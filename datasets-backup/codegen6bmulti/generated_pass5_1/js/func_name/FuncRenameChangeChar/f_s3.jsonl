{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n  const len = numbers.length;\n  if (len < 2) return false;\n  const diff = (numbers[0] - numbers[1]);\n  for (let i = 2; i < len; i++) {\n    const curr = (numbers[i] - numbers[i - 1]);\n    if (Math.abs(curr) < threshold) return false;\n    if (Math.abs(curr) > Math.abs(diff)) {\n      diff = curr;\n    }\n  }\n  return true;\n};\n\n/**\n  * @param {Array} numbers\n  * @param {number} threshold\n  * @returns {boolean}\n  * @description\n  * Check if in given list of numbers, are any two numbers closer to each other than\n  * given threshold.\n  *\n  * @example\n  * hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  * // => false\n  *\n  * @example\n  * hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  * // => true\n  */\nexport const hasclosEElemEnt = hasclosEElemEntS;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  const stack = []\n  const result = []\n  let current_paren = ''\n  paren_string.split('').forEach(char => {\n    if (char === '(') {\n      stack.push(current_paren)\n      current_paren = char\n    } else if (char === ')') {\n      current_paren = stack.pop()\n    }\n  })\n  return result\n}\n\n/*\n  Input:\nn  Output:\n  '(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()))))()\n  '(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())()\n  '(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())()\n  '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n\n  '(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())()\n  '(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())()\n  '(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())()\n  '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n\n  '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n,(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())()\n  '(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())()\n\n  '((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      prefix += string[i];\n      postfix += string[j];\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return prefix + makePalindrome(string.slice(i, j + 1)) + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      prefix += string[i];\n      postfix += string[j];\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return prefix + makePalindrome(string.slice(i, j + 1)) + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      prefix += string[i];\n      postfix += string[j];\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return prefix + makePalindrome(string.slice(i, j + 1)) + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      prefix += string[i];\n      postfix += string[j];\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return prefix + makePalindrome(string.slice(i, j + 1)) + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i] == string[j]) {\n      prefix += string[i];\n      postfix += string[j];\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return prefix + makePalindrome(string.slice(i, j + 1)) + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nmodule.exports = makEAPiLe;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const words = s.split(/[\\", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\n/*\n  This function takes two positive numbers x and y and returns the\n  smallest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 13\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUmOdd = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2!== 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd2 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd3 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2!== 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd4 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd5 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2!== 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd6 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2!== 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd7 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2!== 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd8 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2!== 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd9 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2!== 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd10 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2!== 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd11 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2!== 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd12 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2!== 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd13 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2!== 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd14 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2!== 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst choOseNUmOdd15 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  const avg = (n + m) / 2;\n  return (avg | 0).toString(2);\n};\n\nconsole.log(rouNdedavg(1, 5));\nconsole.log(rouNdedavg(7, 5));\nconsole.log(rouNdedavg(10, 20));\nconsole.log(rouNdedavg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    if (num % 2 === 0) {\n      continue;\n    }\n    result.push(num);\n  }\n  return result;\n};\n\nexport default uniQueDIgits;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n  const len = arr.length\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = reversed.map(i => names[i])\n  return result\n}\n\nconst byLenght = (arr) => {\n  const len = arr.length\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = reversed.map(i => names[i])\n  return result\n}\n\nconst byDesc = (arr) => {\n  const len = arr.length\n  const sorted = arr.sort((a, b) => b - a)\n  const reversed = sorted.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = reversed.map(i => names[i])\n  return result\n}\n\nconst byDescLenght = (arr) => {\n  const len = arr.length\n  const sorted = arr.sort((a, b) => b - a)\n  const reversed = sorted.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = reversed.map(i => names[i])\n  return result\n}\n\nconst byDescLenghtReverse = (arr) => {\n  const len = arr.length\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = reversed.map(i => names[i])\n  return result\n}\n\nconst byDescLenghtReverse2 = (arr) => {\n  const len = arr.length\n  const sorted = arr.sort((a, b) => b - a)\n  const reversed = sorted.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = reversed.map(i => names[i])\n  return result\n}\n\nconst byDescLenghtReverse3 = (arr) => {\n  const len = arr.length\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = reversed.map(i => names[i])\n  return result\n}\n\nconst byDescLenghtReverse4 = (arr) => {\n  const len = arr.length\n  const sorted = arr.sort((a, b) => b - a)\n  const reversed = sorted.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = reversed.map(i => names[i])\n  return result\n}\n\nconst byDescLenghtReverse5 = (arr) => {\n  const len = arr.length\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = reversed.map(i => names[i])\n  return result\n}\n\nconst byDescLenghtReverse6 = (arr) => {\n  const len = arr.length\n  const sorted = arr.sort((a, b) => b - a)\n  const reversed = sorted.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = reversed.map(i => names[i])\n  return result\n}\n\nconst byDescLenghtReverse7 = (arr) => {\n  const len = arr.length\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = reversed.map(i => names[i])\n  return result\n}\n\nconst byDescLenghtReverse8 = (arr) => {\n  const len = arr.length\n  const sorted = arr.sort((a, b) => b - a)\n  const reversed = sorted.reverse()\n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n  const result = reversed.map(i => names[i])\n  return result\n}\n\nconst byDescLenghtReverse9 = (arr) => {\n  const len = arr.length\n  const sorted =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num!== 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nexport default eveNOddpalinDroMe;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconsole.log(couNtNuMs([-1, 11, -11]));\nconsole.log(couNtNuMs([1, 1, 2]));\nconsole.log(couNtNuMspassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = true;\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return flag;\n};\n\nconst movEOneballTest = () => {\n  let arr = [3, 4, 5, 1, 2];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22];\n  console.log(movEOneball(arr));\n  arr = [3, 5, 4,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return a string consisting of the characters in the string\n  with the same number of 1s and 0s.\n  >>> strBinaryXorpassed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n  let i = 0, j = 0;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2!== 0 && lst2[j] % 2!== 0) {\n      return false;\n    }\n    i++;\n    j++;\n  }\n  return true;\n};\n\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 5, 3, 4]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const testArr = test.split(' ')\n  const testArrLen = testArr.length\n  const testArrLenMin = Math.min(testArrLen, 2)\n  const testArrLenMax = Math.max(testArrLen, 2)\n  const testArrLenMinMax = [testArrLenMin, testArrLenMax]\n  const testArrLenMinMaxArr = testArrLenMinMax.map(x => x)\n  const testArrLenMinMaxArrLen = testArrLenMinMaxArr.length\n  const testArrLenMinMaxArrArr = testArrLenMinMaxArr.map(x => x.length)\n  const testArrLenMinMaxArrArrLen = testArrLenMinMaxArrArr.length\n  const testArrLenMinMaxArrArrArr = testArrLenMinMaxArrArrLen.map(x => x.length)\n  const testArrLenMinMaxArrArrArrArr = testArrLenMinMaxArrArrArrLen.map(x => x.length)\n  const testArrLenMinMaxArrArrArrArrArr = testArrLenMinMaxArrArrArrArrLen.map(x => x.length)\n  const testArrLenMinMaxArrArrArrArrArrArr = testArrLenMinMaxArrArrArrArrArrLen.map(x => x.length)\n  const testArrLenMinMaxArrArrArrArrArrArrArr = testArrLenMinMaxArrArrArrArrArrArrLen.map(x => x.length)\n  const testArrLenMinMaxArrArrArrArrArrArrArrArr = testArrLenMinMaxArrArrArrArrArrArrArrLen.map(x => x.length)\n  const testArrLenMinMaxArrArrArrArrArrArrArrArrArr = testArrLenMinMaxArrArrArrArrArrArrArrArrLen.map(x => x.length)\n  const testArrLenMinMaxArrArrArrArrArrArrArrArrArrArrArr = testArrLenMinMaxArrArrArrArrArrArrArrArrArrArrLen.map(x => x.length)\n  const testArrLenMinMaxArrArrArrArrArrArrArrArrArrArrArrArrArrArr = testArrLenMinMaxArrArrArrArrArrArrArrArrArrArrArrArrArrLen.map(x => x.length)\n  const testArrLenMinMaxArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n  const cLen = c.length\n  const sLen = s.length\n  const rev = s.split('').reverse().join('')\n  const revLen = rev.length\n  let i = 0\n  let j = 0\n  while (i < sLen && j < cLen) {\n    if (s[i] === c[j]) {\n      i++\n      j++\n    } else if (j === cLen - 1) {\n      j = 0\n    } else {\n      j++\n    }\n  }\n  return [rev, i === sLen - 1]\n}\n\nconst revErsedeletE2 = (s, c) => {\n  const cLen = c.length\n  const sLen = s.length\n  const rev = s.split('').reverse().join('')\n  const revLen = rev.length\n  let i = 0\n  let j = 0\n  while (i < sLen && j < cLen) {\n    if (s[i] === c[j]) {\n      i++\n      j++\n    } else if (j === cLen - 1) {\n      j = 0\n    } else {\n      j++\n    }\n  }\n  return [rev, i === sLen - 1]\n}\n\nconst revErsedeletE3 = (s, c) => {\n  const cLen = c.length\n  const sLen = s.length\n  const rev = s.split('').reverse().join('')\n  const revLen = rev.length\n  let i = 0\n  let j = 0\n  while (i < sLen && j < cLen) {\n    if (s[i] === c[j]) {\n      i++\n      j++\n    } else if (j === cLen - 1) {\n      j = 0\n    } else {\n      j++\n    }\n  }\n  return [rev, i === sLen - 1]\n}\n\nconst revErsedeletE4 = (s, c) => {\n  const cLen = c.length\n  const sLen = s.length\n  const rev = s.split('').reverse().join('')\n  const revLen = rev.length\n  let i = 0\n  let j = 0\n  while (i < sLen && j < cLen) {\n    if (s[i] === c[j]) {\n      i++\n      j++\n    } else if (j === cLen - 1) {\n      j = 0\n    } else {\n      j++\n    }\n  }\n  return [rev, i === sLen - 1]\n}\n\nconst revErsedeletE5 = (s, c) => {\n  const cLen = c.length\n  const sLen = s.length\n  const rev = s.split('').reverse().join('')\n  const revLen = rev.length\n  let i = 0\n  let j = 0\n  while (i < sLen && j < cLen) {\n    if (s[i] === c[j]) {\n      i++\n      j++\n    } else if (j === cLen - 1) {\n      j = 0\n    } else {\n      j++\n    }\n  }\n  return [rev, i === sLen - 1]\n}\n\nconst revErsedeletE6 = (s, c) => {\n  const cLen = c.length\n  const sLen = s.length\n  const rev = s.split('').reverse().join('')\n  const revLen = rev.length\n  let i = 0\n  let j = 0\n  while (i < sLen && j < cLen) {\n    if (s[i] === c[j]) {\n      i++\n      j++\n    } else if (j === cLen - 1) {\n      j = 0\n    } else {\n      j++\n    }\n  }\n  return [rev, i === sLen - 1]\n}\n\nconst revErsedeletE7 = (s, c) => {\n  const cLen = c.length\n  const sLen = s.length\n  const rev = s.split('').reverse().join('')\n  const revLen = rev.length\n  let i = 0\n  let j = 0\n  while (i < sLen && j < cLen) {\n    if (s[i] === c[j]) {\n      i++\n      j++\n    } else if (j === cLen - 1) {\n      j = 0\n    } else {\n      j++\n    }\n  }\n  return [rev, i === sLen - 1]\n}\n\nconst revErsedeletE8 = (s, c) => {\n  const cLen = c.length\n  const sLen = s.length\n  const rev = s.split('').reverse().join('')\n  const revLen = rev.length\n  let i = 0\n  let j = 0\n  while (i < sLen && j < cLen) {\n    if (s[i] === c[j]) {\n      i++\n      j++\n    } else if (j === cLen - 1) {\n      j = 0\n    } else {\n      j++\n    }\n  }\n  return [rev, i === sLen - 1]\n}\n\nconst revErsedeletE9 = (s, c) => {\n  const cLen = c.length\n  const sLen = s.length\n  const rev = s.split('').reverse().join('')\n  const revLen = rev.length\n  let i = 0\n  let j = 0\n  while (i < sLen && j < cLen) {\n    if (s[i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i].split('').filter(x => x.length % 2 === 1).length;\n    count += num;\n  }\n  return [`the number of odd elements ${count} of the ${lst.length} input.`];\n};\n\nmodule.exports = oddcounT;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let sum = 0;\n  let minSum = 0;\n  let minSumIndex = 0;\n  let minSumIndex2 = 0;\n  let minSumIndex3 = 0;\n  let minSumIndex4 = 0;\n  let minSumIndex5 = 0;\n  let minSumIndex6 = 0;\n  let minSumIndex7 = 0;\n  let minSumIndex8 = 0;\n  let minSumIndex9 = 0;\n  let minSumIndex10 = 0;\n  let minSumIndex11 = 0;\n  let minSumIndex12 = 0;\n  let minSumIndex13 = 0;\n  let minSumIndex14 = 0;\n  let minSumIndex15 = 0;\n  let minSumIndex16 = 0;\n  let minSumIndex17 = 0;\n  let minSumIndex18 = 0;\n  let minSumIndex19 = 0;\n  let minSumIndex20 = 0;\n  let minSumIndex21 = 0;\n  let minSumIndex22 = 0;\n  let minSumIndex23 = 0;\n  let minSumIndex24 = 0;\n  let minSumIndex25 = 0;\n  let minSumIndex26 = 0;\n  let minSumIndex27 = 0;\n  let minSumIndex28 = 0;\n  let minSumIndex29 = 0;\n  let minSumIndex30 = 0;\n  let minSumIndex31 = 0;\n  let minSumIndex32 = 0;\n  let minSumIndex33 = 0;\n  let minSumIndex34 = 0;\n  let minSumIndex35 = 0;\n  let minSumIndex36 = 0;\n  let minSumIndex37 = 0;\n  let minSumIndex38 = 0;\n  let minSumIndex39 = 0;\n  let minSumIndex40 = 0;\n  let minSumIndex41 = 0;\n  let minSumIndex42 = 0;\n  let minSumIndex43 = 0;\n  let minSumIndex44 = 0;\n  let minSumIndex45 = 0;\n  let minSumIndex46 = 0;\n  let minSumIndex47 = 0;\n  let minSumIndex48 = 0;\n  let minSumIndex49 = 0;\n  let minSumIndex50 = 0;\n  let minSumIndex51 = 0;\n  let minSumIndex52 = 0;\n  let minSumIndex53 = 0;\n  let minSumIndex54 = 0;\n  let minSumIndex55 = 0;\n  let minSumIndex56 = 0;\n  let minSumIndex57 = 0;\n  let minSumIndex58 = 0;\n  let minSumIndex59 = 0;\n  let minSumIndex60 = 0;\n  let minSumIndex61 = 0;\n  let minSumIndex62 = 0;\n  let minSumIndex63 = 0;\n  let minSumIndex64 = 0;\n  let minSumIndex65 = 0;\n  let minSumIndex66 = 0;\n  let minSumIndex67 = 0;\n  let minSumIndex68 = 0;\n  let minSumIndex69 = 0;\n  let minSumIndex70 = 0;\n  let minSumIndex71 = 0;\n  let minSumIndex72 = 0;\n  let minSumIndex73 = 0;\n  let minSumIndex74 = 0;\n  let minSumIndex75 = 0;\n  let minSumIndex76 = 0;\n  let minSumIndex77 = 0;\n  let minSumIndex78 = 0;\n  let minSumIndex79 = 0;\n  let minSumIndex80 = 0;\n  let minSumIndex81 = 0;\n  let minSumIndex82 = 0;\n  let minSumIndex83 = 0;\n  let minSumIndex84 = 0;\n  let minSumIndex85 = 0;\n  let minSumIndex86 = 0;\n  let minSumIndex87 = 0;\n  let minSumIndex88 = 0;\n  let minSumIndex89 = 0;\n  let minSumIndex90 = 0;\n  let minSumIndex91 = 0;\n  let minSumIndex92 = 0;\n  let minSumIndex93 = 0;\n  let minSumIndex94 = 0;\n  let minSumIndex95 = 0;\n  let minSumIndex96 = 0;\n  let minSumIndex97 = 0;\n  let minSumIndex98 = 0;\n  let minSumIndex99 = 0;\n  let minSumIndex100 = 0;\n  let minSumIndex101 = 0;\n  let minSumIndex102 = 0;\n  let minSumIndex103 = 0;\n  let minSumIndex104 = 0;\n  let minSumIndex105 = 0;\n  let minSumIndex106 = 0;\n  let minSumIndex107 = 0;\n  let minSumIndex108 = 0;\n  let minSumIndex109 = 0;\n  let minSumIndex110 = 0;\n  let minSumIndex111 = 0;\n  let minSumIndex112 = 0;\n  let minSumIndex113 = 0;\n  let minSumIndex114 = 0;\n  let minSumIndex115 = 0;\n  let minSumIndex116 = 0;\n  let minSumIndex117 = 0;\n  let minSumIndex118 = 0;\n  let minSumIndex119 = 0;\n  let minSumIndex120 = 0;\n  let minSumIndex121 = 0;\n  let minSumIndex122 = 0;\n  let minSumIndex123 = 0;\n  let minSumIndex124 = 0;\n  let minSumIndex125 = 0;\n  let minSumIndex126 = 0;\n  let minSumIndex127 = 0;\n  let minSumIndex128 = 0;\n  let minSumIndex129 = 0;\n  let minSumIndex130 = 0;\n  let minSumIndex131 = 0;\n  let minSumIndex132 = 0;\n  let minSumIndex133 = 0;\n  let minSumIndex134 = 0;\n  let minSumIndex135 = 0;\n  let minSumIndex136 = 0;\n  let minSumIndex137 = 0;\n  let minSumIndex138 = 0;\n  let minSumIndex139 = 0;\n  let minSumIndex140 = 0;\n  let minSumIndex141 = 0;\n  let minSumIndex142 = 0;\n  let minSumIndex143 =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  const [rows, cols] = grid.length\n  const [row_len, col_len] = grid[0].length\n  const [row_fill, col_fill] = [0, 0]\n  const [row_fill_max, col_fill_max] = [0, 0]\n  const [row_fill_min, col_fill_min] = [0, 0]\n  const [row_fill_sum, col_fill_sum] = [0, 0]\n  const [row_fill_sum_max, col_fill_sum_max] = [0, 0]\n  const [row_fill_sum_min, col_fill_sum_min] = [0, 0]\n  const [row_fill_sum_sum, col_fill_sum_sum] = [0, 0]\n  const [row_fill_sum_sum_max, col_fill_sum_sum_max] = [0, 0]\n  const [row_fill_sum_sum_min, col_fill_sum_sum_min] = [0, 0]\n  const [row_fill_sum_sum_sum, col_fill_sum_sum_sum] = [0, 0]\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        row_fill_sum += 1\n        row_fill_sum_max = Math.max(row_fill_sum_max, row_fill_sum)\n        row_fill_sum_min = Math.min(row_fill_sum_min, row_fill_sum)\n        row_fill_sum_sum += row_fill_sum\n        row_fill_sum_sum_max = Math.max(row_fill_sum_sum_max, row_fill_sum_sum)\n        row_fill_sum_sum_min = Math.min(row_fill_sum_sum_min, row_fill_sum_sum)\n        row_fill_sum_sum_sum += row_fill_sum_sum\n      }\n    }\n  }\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        col_fill_sum += 1\n        col_fill_sum_max = Math.max(col_fill_sum_max, col_fill_sum)\n        col_fill_sum_min = Math.min(col_fill_sum_min, col_fill_sum)\n        col_fill_sum_sum += col_fill_sum\n        col_fill_sum_sum_max = Math.max(col_fill_sum_sum_max, col_fill_sum_sum)\n        col_fill_sum_sum_min = Math.min(col_fill_sum_sum_min, col_fill_sum_sum)\n        col_fill_sum_sum_sum += col_fill_sum_sum\n      }\n    }\n  }\n\n  const [row_fill_avg, col_fill_avg] = [row_fill_sum / rows, col_fill_sum / cols]\n  const [row_fill_avg_max, col_fill_avg_max] = [row_fill_sum_max / rows, col_fill_sum_max / cols]\n  const [row_fill_avg_min, col_fill_avg_min] = [row_fill_sum_min / rows, col_fill_sum_min / cols]\n  const [row_fill_avg_sum, col_fill_avg_sum] = [row_fill_sum_sum / rows, col_fill_sum_sum / cols]\n  const [row_fill_avg_sum_max, col_fill_avg_sum_max] = [row_fill_sum_sum_max / rows, col_fill_sum_sum_max / cols]\n  const [row_fill_avg_sum_min, col_fill_avg_sum_min] = [row_fill_sum_sum_min / rows, col_fill_sum_sum_min / cols]\n  const [row_fill_avg_sum_sum, col_fill_avg_sum_sum] = [row_fill_sum_sum_sum / rows, col_fill_sum_sum_sum / cols]\n\n  return row_fill_avg_sum_sum_max + row_fill_avg_sum_sum_min + row_fill_avg_sum_sum_sum - row_fill_avg_sum_sum_min - row_fill_avg_sum_sum_max\n}\n\nconst [rows, cols] = grid.length\nconst [row_len, col_len] = grid[0].length\nconst [row_fill, col_fill] = [0, 0]\nconst [row_fill_max, col_fill_max] = [0, 0]\nconst [row_fill_min, col", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).split('').reverse().join('');\n    const bInt = b.toString(2).split('').reverse().join('');\n    const aIntLength = aInt.length;\n    const bIntLength = bInt.length;\n    const aIntLengthDiff = aIntLength - bIntLength;\n    const aIntLengthDiffAbs = Math.abs(aIntLengthDiff);\n    const bIntLengthDiffAbs = Math.abs(bIntLengthDiff);\n    const aIntLengthDiffAbsDiff = aIntLengthDiffAbs - bIntLengthDiffAbs;\n    const aIntLengthDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiff);\n    const aIntLengthDiffAbsDiffAbsDiff = Math.abs(aIntLengthDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiff);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLengthDiffAbsDiffAbsDiffAbs);\n    const aIntLengthDiffAbsDiffAbsDiffAbs = Math.abs(aIntLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the nth word from the string s.\nIf the nth word does not exist, then the function should return the empty string.\nExamples:\nnthWord(\"Hello world\", 1) ==> \"Hello\"\nnthWord(\"Hello world\", 2) ==> \"world\"\nnthWord(\"Hello world\", 3) ==> \"\"\nnthWord(\"Hello world\", 4) ==> \"\"\nnthWord(\"Hello world\", 5) ==> \"\"\nnthWord(\"Hello world\", 6) ==> \"\"\nnthWord(\"Hello world\", 7) ==> \"\"\nnthWord(\"Hello world\", 8) ==> \"\"\nnthWord(\"Hello world\", 9) ==> \"\"\nnthWord(\"Hello world\", 10) ==> \"\"\nnthWord(\"Hello world\", 11) ==> \"\"\nnthWord(\"Hello world\", 12) ==> \"\"\nnthWord(\"Hello world\", 13) ==> \"\"\nnthWord(\"Hello world\", 14) ==> \"\"\nnthWord(\"Hello world\", 15) ==> \"\"\nnthWord(\"Hello world\", 16) ==> \"\"\nnthWord(\"Hello world\", 17) ==> \"\"\nnthWord(\"Hello world\", 18) ==> \"\"\nnthWord(\"Hello world\", 19) ==> \"\"\nnthWord(\"Hello world\", 20) ==> \"\"\nnthWord(\"Hello world\", 21) ==> \"\"\nnthWord(\"Hello world\", 22) ==> \"\"\nnthWord(\"Hello world\", 23) ==> \"\"\nnthWord(\"Hello world\", 24) ==> \"\"\nnthWord(\"Hello world\", 25) ==> \"\"\nnthWord(\"Hello world\", 26) ==> \"\"\nnthWord(\"Hello world\", 27) ==> \"\"\nnthWord(\"Hello world\", 28) ==> \"\"\nnthWord(\"Hello world\", 29) ==> \"\"\nnthWord(\"Hello world\", 30) ==> \"\"\nnthWord(\"Hello world\", 31) ==> \"\"\nnthWord(\"Hello world\", 32) ==> \"\"\nnthWord(\"Hello world\", 33) ==> \"\"\nnthWord(\"Hello world\", 34) ==> \"\"\nnthWord(\"Hello world\", 35) ==> \"\"\nnthWord(\"Hello world\", 36) ==> \"\"\nnthWord(\"Hello world\", 37) ==> \"\"\nnthWord(\"Hello world\", 38) ==> \"\"\nnthWord(\"Hello world\", 39) ==> \"\"\nnthWord(\"Hello world\", 40) ==> \"\"\nnthWord(\"Hello world\", 41) ==> \"\"\nnthWord(\"Hello world\", 42) ==> \"\"\nnthWord(\"Hello world\", 43) ==> \"\"\nnthWord(\"Hello world\", 44) ==> \"\"\nnthWord(\"Hello world\", 45) ==> \"\"\nnthWord(\"Hello world\", 46) ==> \"\"\nnthWord(\"Hello world\", 47) ==> \"\"\nnthWord(\"Hello world\", 48) ==> \"\"\nnthWord(\"Hello world\", 49) ==> \"\"\nnthWord(\"Hello world\", 50) ==> \"\"\nnthWord(\"Hello world\", 51) ==> \"\"\nnthWord(\"Hello world\", 52) ==> \"\"\nnthWord(\"Hello world\", 53) ==> \"\"\nnthWord(\"Hello world\", 54) ==> \"\"\nnthWord(\"Hello world\", 55) ==> \"\"\nnthWord(\"Hello world\", 56) ==> \"\"\nnthWord(\"Hello world\", 57) ==> \"\"\nnthWord(\"Hello world\", 58) ==> \"\"\nnthWord(\"Hello world\", 59) ==> \"\"\nnthWord(\"Hello world\", 60) ==> \"\"\nnthWord(\"Hello world\", 61) ==> \"\"\nnthWord(\"Hello world\", 62) ==> \"\"\nnthWord(\"Hello world\", 63) ==> \"\"\nnthWord(\"Hello world\", 64) ==> \"\"\nnthWord(\"Hello world\", 65) ==> \"\"\nnthWord(\"Hello world\", 66) ==> \"\"\nnthWord(\"Hello world\", 67) ==> \"\"\nnthWord(\"Hello world\", 68) ==> \"\"\nnthWord(\"Hello world\", 69) ==> \"\"\nnthWord(\"Hello world\", 70) ==> \"\"\nnthWord(\"Hello world\", 71) ==> \"\"\nnthWord(\"Hello world\", 72) ==> \"\"\nnthWord(\"Hello world\", 73) ==> \"\"\nnthWord(\"Hello world\", 74) ==> \"\"\nnthWord(\"Hello world\", 75) ==> \"\"\nnthWord(\"Hello world\", 76) ==> \"\"\nnthWord(\"Hello world\", 77) ==> \"\"\nnthWord(\"Hello world\", 78) ==> \"\"\nnthWord(\"Hello world\", 79) ==> \"\"\nnthWord(\"Hello world\", 80) ==> \"\"\nnthWord(\"Hello world\", 81) ==> \"\"\nnthWord(\"Hello world\", 82) ==> \"\"\nnthWord(\"Hello world\", 83) ==> \"\"\nnthWord(\"Hello world\", 84) ==> \"\"\nnthWord(\"Hello world\", 85) ==> \"\"\nnthWord(\"Hello world\", 86) ==> \"\"\nnthWord(\"Hello world\", 87) ==> \"\"\nnthWord(\"Hello world\", 88) ==> \"\"\nnthWord(\"Hello world\", 89) ==> \"\"\nnthWord(\"Hello world\", 90) ==> \"\"\nnthWord(\"Hello world\", 91) ==> \"\"\nnthWord", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n  let vowel = '';\n  let consonant = '';\n  let index = word.length - 1;\n  while (index >= 0) {\n    if (word[index] === 'a' || word[index] === 'e' || word[index] === 'i' || word[index] === 'o' || word[index] === 'u') {\n      vowel = word[index];\n      break;\n    }\n    index--;\n  }\n  index = word.length - 1;\n  while (index >= 0) {\n    if (word[index] === 'a' || word[index] === 'e' || word[index] === 'i' || word[index] === 'o' || word[index] === 'u') {\n      consonant = word[index];\n      break;\n    }\n    index--;\n  }\n  if (vowel && consonant) {\n    return vowel;\n  }\n  return '';\n};\n\n/*\n  Given a string, find the longest string that can be formed by deleting \n  one character from the string and still makes the string valid.\n\n  Example:\n  longestValid(\"abcd\") ==> \"bcd\"\n  longestValid(\"abcdd\") ==> \"bcdd\"\n  longestValid(\"aa\") ==> \"a\"\n  longestValid(\"aaa\") ==> \"a\"\n  longestValid(\"aaaa\") ==> \"a\"\n  longestValid(\"aaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") ==> \"aa\"\n  longestValid(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens2 = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens3 = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens4 = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens5 = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens6 = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens7 = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens8 = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens9 = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens10 = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const cur = lst[i]\n    if (cur === '(') {\n      stack.push(cur)\n    } else if (cur === ')') {\n      if (stack.length === 0) return 'No'\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens11 = (lst) => {\n  const len = lst.length\n  if (len === 0) return '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = lonGest;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  const sortedArr = arr.slice().sort();\n  const result = sortedArr.slice(0, k);\n  return result;\n};\n\nconst test = (arr, k) => {\n  const sortedArr = arr.slice().sort();\n  const result = sortedArr.slice(0, k);\n  console.log(`${k}th largest element in ${arr.join(', ')} is ${result.join(', ')}`);\n};\n\ntest([-3, -4, 5], 3);\ntest([4, -4, 4], 2);\ntest([-3, 2, 1, 2, -1, -2, 1], 1);\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solUtioN([5, 8, 7, 1]));\nconsole.log(solUtioN([3, 3, 3, 3, 3]));\nconsole.log(solUtioN([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > 9) {\n      sum -= 10\n    }\n  }\n  return sum\n}\n\nconst addelem = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > 9) {\n      sum -= 10\n    }\n  }\n  return sum\n}\n\nconst addelem2 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > 9) {\n      sum -= 10\n    }\n  }\n  return sum\n}\n\nconst addelem3 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > 9) {\n      sum -= 10\n    }\n  }\n  return sum\n}\n\nconst addelem4 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > 9) {\n      sum -= 10\n    }\n  }\n  return sum\n}\n\nconst addelem5 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > 9) {\n      sum -= 10\n    }\n  }\n  return sum\n}\n\nconst addelem6 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > 9) {\n      sum -= 10\n    }\n  }\n  return sum\n}\n\nconst addelem7 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > 9) {\n      sum -= 10\n    }\n  }\n  return sum\n}\n\nconst addelem8 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > 9) {\n      sum -= 10\n    }\n  }\n  return sum\n}\n\nconst addelem9 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > 9) {\n      sum -= 10\n    }\n  }\n  return sum\n}\n\nconst addelem10 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > 9) {\n      sum -= 10\n    }\n  }\n  return sum\n}\n\nconst addelem11 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > 9) {\n      sum -= 10\n    }\n  }\n  return sum\n}\n\nconst addelem12 = (arr, k) => {\n  const arrLen = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < arrLen; i++) {\n    sum += arr[i]\n    if (sum > 9) {\n      sum -= 10\n    }\n  }\n  return sum\n}\n\nconst addelem13 = (arr, k) => {\n  const arr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let odd = [],\n    i = 1,\n    odd = [1];\n  while (i <= n) {\n    if (i % 2 === 0) {\n      i = i / 2;\n    } else {\n      i = 3 * i + 1;\n    }\n    odd.push(i);\n  }\n  return odd;\n};\n\nconsole.log(getoddCOllatZ(5));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  if (!date) return false;\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1]);\n  const day = parseInt(dateArray[2]);\n  const year = parseInt(dateArray[0]);\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > days[month - 1]) return false;\n  if (year < 1900 || year > 2020) return false;\n  return true;\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe2 = (date) => {\n  if (!date) return false;\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1]);\n  const day = parseInt(dateArray[2]);\n  const year = parseInt(dateArray[0]);\n  const days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > days[month - 1]) return false;\n  if (year < 1900 || year > 2020) return false;\n  return true;\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe3 = (date) => {\n  if (!date) return false;\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1]);\n  const day = parseInt(dateArray[2]);\n  const year = parseInt(dateArray[0]);\n  const days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > days[month - 1]) return false;\n  if (year < 1900 || year > 2020) return false;\n  return true;\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe4 = (date) => {\n  if (!date) return false;\n  const dateArray = date.split('-');\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0);\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds11 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds12 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds13 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds14 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds15 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds16 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds17 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds18 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word.toLowerCase();\n  });\n};\n\nconst splItWoRds19 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0).map((word) => {\n    return word", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const duplicates = lst.filter((x, i) => i < sortedLength - 1 && sorted[i + 1] === x);\n  return!duplicates.length;\n};\n\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  const isPrime = (n) => {\n    const isPrime = (n) => {\n      for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return isPrime(n);\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  const isPrime = (n) => {\n    const isPrime = (n) => {\n      for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return isPrime(n);\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  const isPrime = (n) => {\n    const isPrime = (n) => {\n      for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return isPrime(n);\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  const isPrime = (n) => {\n    const isPrime = (n) => {\n      for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return isPrime(n);\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  const isPrime = (n) => {\n    const isPrime = (n) => {\n      for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return isPrime(n);\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intErseCtion = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  const isPrime = (n) => {\n    const isPrime = (n) => {\n      for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null;\n  }\n  return arr.reduce((acc, num) => {\n    if (num === 0) {\n      return acc;\n    }\n    if (num > 0) {\n      return acc + num;\n    }\n    if (num < 0) {\n      return acc - num;\n    }\n    return acc;\n  }, 0);\n};\n\nmodule.exports = proDSigNs;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  dp[0] = [grid[0][0]]\n  for (let i = 1; i < n; i++) {\n    dp[i] = [grid[i][0]]\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < m; j++) {\n      dp[i].push(Math.min(dp[i - 1][j], dp[i - 1][j - 1]))\n    }\n  }\n  return dp[n - 1][m - 1]\n}\n\nconst test = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n]\n\ntest.forEach(t => {\n  console.log(minpath(t[0], t[1]))\n})\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) return greAtesTCommOnDIvisoR(b, a);\n  if (a % b === 0) return b;\n  return greAtesTCommOnDIvisoR(a, b % a);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR2 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) return greAtesTCommOnDIvisoR2(b, a);\n  if (a % b === 0) return b;\n  return greAtesTCommOnDIvisoR2(a, b % a);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR3 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) return greAtesTCommOnDIvisoR3(b, a);\n  if (a % b === 0) return b;\n  return greAtesTCommOnDIvisoR3(a, b % a);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR4 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) return greAtesTCommOnDIvisoR4(b, a);\n  if (a % b === 0) return b;\n  return greAtesTCommOnDIvisoR4(a, b % a);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR5 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) return greAtesTCommOnDIvisoR5(b, a);\n  if (a % b === 0) return b;\n  return greAtesTCommOnDIvisoR5(a, b % a);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR6 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) return greAtesTCommOnDIvisoR6(b, a);\n  if (a % b === 0) return b;\n  return greAtesTCommOnDIvisoR6(a, b % a);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR7 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) return greAtesTCommOnDIvisoR7(b, a);\n  if (a % b === 0) return b;\n  return greAtesTCommOnDIvisoR7(a, b % a);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR8 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) return greAtesTCommOnDIvisoR8(b, a);\n  if (a % b === 0) return b;\n  return greAtesTCommOnDIvisoR8(a, b % a);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR9 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) return greAtesTCommOnDIviso", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconsole.log(tri(3))\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\nconst test = (n) => {\n  console.log(`The product of the odd digits of ${n} is ${digIts(n)}`);\n};\n\ntest(1);\ntest(4);\ntest(235);\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  let stack = [];\n  let index = 0;\n  while (index < string.length) {\n    if (string[index] === '[') {\n      stack.push(string[index]);\n      index++;\n    } else if (string[index] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop();\n      } else {\n        return false;\n      }\n      index++;\n    } else {\n      return false;\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNEsteD('[[]]'));\nconsole.log(isNEsteD('[]]]]]]][[[[[]'));\nconsole.log(isNEsteD('[][]'));\nconsole.log(isNEsteD('[]'));\nconsole.log(isNEsteD('[[][]]'));\nconsole.log(isNEsteD('[[]][['));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua2 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua3 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua4 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua5 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua6 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua7 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua8 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua9 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua10 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua11 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua12 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua13 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua14 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua15 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua16 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua17 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua18 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua19 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua20 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua21 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua22 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua23 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua24 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua25 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua26 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua27 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua28 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua29 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua30 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua31 = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nconst sumsqua32 = (lst) =>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  return txt.slice(-1) === \" \"? txt.slice(0, -1) : txt;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  return txt.slice(-1) === \" \"? txt.slice(0, -1) : txt;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  return txt.slice(-1) === \" \"? txt.slice(0, -1) : txt;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  return txt.slice(-1) === \" \"? txt.slice(0, -1) : txt;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  return txt.slice(-1) === \" \"? txt.slice(0, -1) : txt;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  return txt.slice(-1) === \" \"? txt.slice(0, -1) : txt;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  return txt.slice(-1) === \" \"? txt.slice(0, -1) : txt;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCk", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    let k = (i + j) / 2;\n    if (arr[k] < arr[i]) {\n      i = k + 1;\n    } else if (arr[k] > arr[i]) {\n      j = k - 1;\n    } else {\n      return k;\n    }\n  }\n  return -1;\n};\n\nmodule.exports = canarraNge;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  const max = -Infinity;\n  const min = Infinity;\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (lst[i] < min) {\n        min = lst[i];\n      }\n    }\n  }\n  if (min === Infinity) {\n    return (null, null);\n  }\n  if (max === -Infinity) {\n    return (null, min);\n  }\n  result.push(max);\n  result.push(min);\n  return (result);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs2 = (lst) => {\n  const max = -Infinity;\n  const min = Infinity;\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (lst[i] < min) {\n        min = lst[i];\n      }\n    }\n  }\n  if (min === Infinity) {\n    return (null, null);\n  }\n  if (max === -Infinity) {\n    return (null, min);\n  }\n  result.push(max);\n  result.push(min);\n  return (result);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs3 = (lst) => {\n  const max = -Infinity;\n  const min = Infinity;\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (lst[i] < min) {\n        min = lst[i];\n      }\n    }\n  }\n  if (min === Infinity) {\n    return (null, null);\n  }\n  if (max === -Infinity) {\n    return (null, min);\n  }\n  result.push(max);\n  result.push(min);\n  return (result);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs4 = (lst) => {\n  const max = -Infinity;\n  const min = Infinity;\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (lst[i] > max) {\n        max = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (lst[i] < min) {\n        min = lst[i];\n      }\n    }\n  }\n  if (min === Infinity) {\n    return (null, null);\n  }\n  if (max === -Infinity) {\n    return (null, min);\n  }\n  result.push(max);\n  result.push(min);\n  return (result);\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (a === b) return null\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b\n  }\n}\n\nconst compare = (a, b) => {\n  if (a === b) return 0\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : -1\n  }\n}\n\nconst compare2 = (a, b) => {\n  if (a === b) return 0\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : -1\n  }\n}\n\nconst compare3 = (a, b) => {\n  if (a === b) return 0\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : -1\n  }\n}\n\nconst compare4 = (a, b) => {\n  if (a === b) return 0\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : -1\n  }\n}\n\nconst compare5 = (a, b) => {\n  if (a === b) return 0\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : -1\n  }\n}\n\nconst compare6 = (a, b) => {\n  if (a === b) return 0\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : -1\n  }\n}\n\nconst compare7 = (a, b) => {\n  if (a === b) return 0\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? 1 : -1\n  }\n}\n\nconst compare8 = (a, b) => {\n  if (a === b) return 0\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? 1 : -1\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? 1 : -1\n  } else if (typeof a === 'number' &&", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEQualtoSumeveO(4) == true\n  isEQualtoSumeveO(6) == false\n  isEQualtoSumeveO(8) == false\n  */\nconst isEQualtoSumeveO = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveE(4) == true\n  isEQualtoSumeveE(6) == false\n  isEQualtoSumeveE(8) == false\n  */\nconst isEQualtoSumeveE = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEQualtoSumeveO(4) == true\n  isEQualtoSumeveO(6) == false\n  isEQualtoSumeveO(8) == false\n  */\nconst isEQualtoSumeveOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveE(4) == true\n  isEQualtoSumeveE(6) == false\n  isEQualtoSumeveE(8) == false\n  */\nconst isEQualtoSumeveEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveE(4) == true\n  isEQualtoSumeveE(6) == false\n  isEQualtoSumeveE(8) == false\n  */\nconst isEQualtoSumeveEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEQualtoSumeveO(4) == true\n  isEQualtoSumeveO(6) == false\n  isEQualtoSumeveO(8) == false\n  */\nconst isEQualtoSumeveOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEQualtoSumeveO(4) == true\n  isEQualtoSumeveO(6) == false\n  isEQualtoSumeveO(8) == false\n  */\nconst isEQualtoSumeveOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveE(4) == true\n  isEQualtoSumeveE(6) == false\n  isEQualtoSumeveE(8) == false\n  */\nconst isEQualtoSumeveOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveE(4) == true\n  isEQualtoSumeveE(6) == false\n  isEQualtoSumeveE(8) == false\n  */\nconst isEQualtoSumeveEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEQualtoSumeveO(4) == true\n  isEQualtoSumeveO(6) == false\n  isEQualtoSumeveO(8) == false\n  */\nconst isEQualtoSumeveOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEQualtoSumeveO(4) == true\n  isEQualtoSumeveO(6) == false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The Catalan number is defined as:\n  catalan(n) = n * (n + 1) / 2 * (n + 2) / 3 * (n + 3) / 4 *... * 1!\n  where n > 0\n\n  For example:\n  >>> catalan(4)\n  76\n\n  The function will receive an integer as input and should return the\n  Catalan number of this integer.\n  */\nconst catalan = (n) => {\n  let catalan = 1;\n  for (let i = 1; i <= n; i++) {\n    catalan *= (i + 1);\n  }\n  return catalan;\n};\n\n/*The Fibonacci number is defined as:\n  fibonacci(n) = fibonacci(n-1) + fibonacci(n-2)\n  where n > 0\n\n  For example:\n  >>> fibonacci(4)\n  5\n\n  The function will receive an integer as input and should return the\n  Fibonacci number of this integer.\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 1;\n  for (let i = 1; i <= n; i++) {\n    fibonacci += fibonacci;\n  }\n  return fibonacci;\n};\n\n/*The harmonic number is defined as:\n  harmonic(n) = 1 / (1 - n)\n  where n > 0\n\n  For example:\n  >>> harmonic(4)\n  2\n\n  The function will receive an integer as input and should return the\n  Harmonic number of this integer.\n  */\nconst harmonic = (n) => {\n  let harmonic = 1;\n  for (let i = 1; i <= n; i++) {\n    harmonic = harmonic - 1;\n  }\n  return harmonic;\n};\n\n/*The golden ratio is defined as:\n  golden_ratio = 1 + (1 / (1 - golden_ratio))\n  where golden_ratio > 0\n\n  For example:\n  >>> golden_ratio(4)\n  1.618033988749895\n\n  The function will receive an integer as input and should return the\n  Golden ratio of this integer.\n  */\nconst golden_ratio = (n) => {\n  let golden_ratio = 1;\n  for (let i = 1; i <= n; i++) {\n    golden_ratio = golden_ratio + 1;\n  }\n  return golden_ratio;\n};\n\n/*The euler constant is defined as:\n  euler_constant = 1 + (1 / (1 - euler_constant))\n  where euler_constant > 0\n\n  For example:\n  >>> euler_constant(4)\n  1.584962500721156\n\n  The function will receive an integer as input and should return the\n  Euler constant of this integer.\n  */\nconst euler_constant = (n) => {\n  let euler_constant = 1;\n  for (let i = 1; i <= n; i++) {\n    euler_constant = euler_constant + 1;\n  }\n  return euler_constant;\n};\n\n/*The phi function is defined as:\n  phi(n) = (1 + n) / (1 - n)\n  where n > 0\n\n  For example:\n  >>> phi(4)\n  1.618033988749895\n\n  The function will receive an integer as input and should return the\n  Phi function of this integer.\n  */\nconst phi = (n) => {\n  let phi = 1;\n  for (let i = 1; i <= n; i++) {\n    phi = phi + 1;\n  }\n  return phi;\n};\n\n/*The prime number is defined as:\n  prime(n) = n * (n + 1) / 2 * (n + 3) / 6 * (n + 5) / 10 *... * 1!\n  where n > 0\n\n  For example:\n  >>> prime(4)\n  24\n\n  The function will receive an integer as input and should return the\n  prime number of this integer.\n  */\nconst prime = (n) => {\n  let prime = 1;\n  for (let i = 1; i <= n; i++) {\n    prime *= (i + 1);\n  }\n  return prime;\n};\n\n/*The factorial is defined as:\n  factorial(n) = n * (n - 1) * (n - 2) *... * 1!\n  where n > 0\n\n  For example:\n  >>> factorial(4)\n  24\n\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*The binomial coefficient is defined as:\n  binomial_coefficient(n, k) = n! / (k! * (n - k)!)\n  where n > 0 and k > 0\n\n  For example:\n  >>> binomial_coefficient(4, 2)\n  2\n\n  The function will receive two integers as input and should return the\n  binomial coefficient of this pair of integers.\n  */\nconst binomial_coefficient = (n, k) => {\n  let binomial_coefficient = 1;\n  for (let i = 1; i <= n; i++) {\n    binomial_coefficient *= i;\n  }\n  for (let i = 1; i <= k; i++) {\n    binomial_coefficient *= (n - i);\n  }\n  return binomial_coefficient;\n};\n\n/*The hypergeometric coefficient is defined as:\n  hypergeometric_coefficient(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  const prefixes = []\n  for (let i = 0; i < string.length; i++) {\n    const prefix = string.slice(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allsuffIxes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allsuffIxes = (string) => {\n  const suffixes = []\n  for (let i = string.length - 1; i >= 0; i--) {\n    const suffix = string.slice(i)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffIxes = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffIxes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffIxes = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffIxes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffIxes = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffIxes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffIxes = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffIxes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffIxes = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffIxes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffIxes = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffIxes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffIxes = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffIxes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffIxes = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffIxes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffIxes = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffIxes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffIxes = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffIxes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndSuffIxes = (string) => {\n  const prefixes = allprefIxes(string)\n  const suffixes = allsuffIxes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefIxesAndSuffIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxesAndS", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n  const spaces = /\\s/g\n  return text.replace(spaces, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixunderscEs = (text) => {\n  const underscores = /_/g\n  return text.replace(underscores,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixdashEs = (text) => {\n  const dashes = /-/g\n  return text.replace(dashes,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixdashdashEs = (text) => {\n  const dashes = /--/g\n  return text.replace(dashes,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixdashdashdashEs = (text) => {\n  const dashes = /--/g\n  return text.replace(dashes,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixdashdashdashEs = (text) => {\n  const dashes = /--/g\n  return text.replace(dashes,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixdashdashdashEs = (text) => {\n  const dashes = /--/g\n  return text.replace(dashes,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixdashdashdashEs = (text) => {\n  const dashes = /--/g\n  return text.replace(dashes,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixdashdashdashEs = (text) => {\n  const dashes = /--/g\n  return text.replace(dashes,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  fixspacEs(\" Example   3\") == \"Example 3\"\n  */\nconst fixdashdashdashEs = (text) => {\n  const dashes = /--/g\n  return text.replace(dashes,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example 1\"\n  fixspacEs(\" Example 2\") == \"Example 2\"\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\./;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex5 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex6 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex7 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex8 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex9 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex10 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex11 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex12 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex13 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumsqaRes([1,2,3]));\nconsole.log(sumsqaRes([]));\nconsole.log(sumsqaRes([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  const words = sentence.split(' ')\n  const newSentence = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = getPrimeNumber(word.length)\n    newSentence.push(newWord)\n  }\n  return newSentence.join(' ')\n}\n\nconst getPrimeNumber = (number) => {\n  let primeNumber = 2\n  while (primeNumber < number) {\n    if (number % primeNumber === 0) {\n      return primeNumber\n    }\n    primeNumber += 1\n  }\n  return primeNumber\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  const xN = x.split('/')\n  const nN = n.split('/')\n  const xNLen = xN.length\n  const nNLen = nN.length\n  if (xNLen!== nNLen) {\n    return false\n  }\n  const xNInt = parseInt(xN[0], 10)\n  const nNInt = parseInt(nN[0], 10)\n  if (xNInt === 0 || nNInt === 0) {\n    return false\n  }\n  const xNRem = xN[1]\n  const nNRem = nN[1]\n  const xNRemInt = parseInt(xNRem, 10)\n  const nNRemInt = parseInt(nNRem, 10)\n  if (xNRemInt === 0 || nNRemInt === 0) {\n    return false\n  }\n  return xNInt * nNInt === xNRemInt * nNRemInt\n}\n\nconsole.log(simPlifY('1/5', '5/1'))\nconsole.log(simPlifY('1/6', '2/1'))\nconsole.log(simPlifY('7/10', '10/2'))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    const bSum = b.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\n// const ordErBypointS = (nums) => {\n//   const sorted = nums.slice().sort((a, b) => {\n//     const aSum = a.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n//     const bSum = b.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n//     return aSum - bSum;\n//   });\n//   return sorted;\n// };\n\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    const bSum = b.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    const bSum = b.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    const bSum = b.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    const bSum = b.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    const bSum = b.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    const bSum = b.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    const bSum = b.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    const bSum = b.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    const bSum = b.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    const bSum = b.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordErBypointS = (nums) => {\n  const sorted = nums.slice().sort((", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && (nums[i] % 2 === 1 || nums[i] % 2 === 3 || nums[i] % 2 === 5 || nums[i] % 2 === 7 || nums[i] % 2 === 9)) {\n      result.push(nums[i]);\n    }\n  }\n  return result.length;\n};\n\nconsole.log(speCialfilteR([15, -73, 14, -15]));\nconsole.log(speCialfilteR([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  const a = Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple = (n) => {\n  const a = Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (a[i] + a[j] === 0) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple2 = (n) => {\n  const a = Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (a[i] + a[j] === 0) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple3 = (n) => {\n  const a = Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 0) {\n          count++\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple4 = (n) => {\n  const a = Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        for (let l = k + 1; l < n; l++) {\n          if (a[i] + a[j] + a[k] + a[l] === 0) {\n            count++\n          }\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple5 = (n) => {\n  const a = Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        for (let l = k + 1; l < n; l++) {\n          for (let m = l + 1; m < n; m++) {\n            if (a[i] + a[j] + a[k] + a[l] + a[m] === 0) {\n              count++\n            }\n          }\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple6 = (n) => {\n  const a = Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        for (let l = k + 1; l < n; l++) {\n          for (let m = l + 1; m < n; m++) {\n            for (let n = m + 1; n < n; n++) {\n              if (a[i] + a[j] + a[k] + a[l] + a[m] + a[n] === 0) {\n                count++\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple7 = (n) => {\n  const a = Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        for (let l = k + 1; l < n; l++) {\n          for (let m = l + 1; m < n; m++) {\n            for (let n = m + 1; n < n; n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  if (planet1Index === -1 || planet2Index === -1) {\n    return [];\n  }\n  const planet1Orbit = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ];\n  const planet2Orbit = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ];\n  const planet1OrbitIndex = planet1Orbit.indexOf(planet1);\n  const planet2OrbitIndex = planet2Orbit.indexOf(planet2);\n  const planet1OrbitLength = planet1Orbit.length;\n  const planet2OrbitLength = planet2Orbit.length;\n  const planet1OrbitIndex = planet1Orbit.indexOf(planet1);\n  const planet2OrbitIndex = planet2Orbit.indexOf(planet2);\n  const planet1OrbitLength = planet1Orbit.length;\n  const planet2OrbitLength = planet2Orbit.length;\n  const planet1Orbit = planet1Orbit.slice(planet1OrbitIndex, planet1OrbitIndex + planet1OrbitLength);\n  const planet2Orbit = planet2Orbit.slice(planet2OrbitIndex, planet2OrbitIndex + planet2OrbitLength);\n  const planet1Orbit = planet1Orbit.sort();\n  const planet2Orbit = planet2Orbit.sort();\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Jupiter\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Jupiter\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Saturn\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Saturn\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Uranus\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Uranus\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Neptune\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Neptune\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Earth\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Earth\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Mars\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Mars\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Mercury\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Mercury\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Venus\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Venus\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Neptune\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Neptune\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Uranus\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Uranus\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Jupiter\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Jupiter\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Saturn\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Saturn\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Earth\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Earth\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Mars\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Mars\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Mercury\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Mercury\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Venus\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Venus\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Neptune\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Neptune\");\n  const planet1Orbit = planet1Orbit.filter(p => p!== \"Uranus\");\n  const planet2Orbit = planet2Orbit.filter(p => p!== \"Uranus\");\n  const planet1Orbit = planet1Orbit.filter(p => p!==", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  const lstSorted = lst.slice().sort((a, b) => a.length - b.length);\n  const lstUnique = lstSorted.filter((elem, index, arr) => index === arr.indexOf(elem));\n  return lstUnique;\n};\n\nconst test = [\n  [\"aa\", \"a\", \"aaa\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"dd\"],\n  [\"ab\", \"a\", \"aaa\", \"dd\", \"ee\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\", \"yy\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\", \"yy\", \"zz\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\", \"yy\", \"zz\", \"uuuu\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\", \"pp\", \"qq\", \"rr\", \"ss\", \"tt\", \"uu\", \"vv\", \"ww\", \"xx\", \"yy\", \"zz\", \"uuuu\", \"uuuuuu\"],\n  [\"ab\", \"a\", \"aaa\", \"ee\", \"ff\", \"gg\", \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe2 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe3 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe4 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe5 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe6 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe7 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe8 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe9 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe10 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe11 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe12 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe13 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe14 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(5)\n  '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  } else if (n === 2) {\n    return true\n  } else if (n % 2 === 0) {\n    return false\n  } else {\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\nconst xOryTest = () => {\n  console.log(xOry(7, 34, 12))\n  console.log(xOry(15, 8, 5))\n}\n\nxOryTest()\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnceEven = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 0? sum : 0;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnceOdd = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnceEvenOdd = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 0? sum : 0;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnceOddEven = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnceEvenOdd = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnceOddEven = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHe", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const [scores, guesses] = game;\n  const [length] = guesses;\n  const [length2] = scores;\n  const [length3] = guesses;\n  const [length4] = scores;\n  const [length5] = guesses;\n  const [length6] = scores;\n  const [length7] = guesses;\n  const [length8] = scores;\n  const [length9] = guesses;\n  const [length10] = scores;\n  const [length11] = guesses;\n  const [length12] = scores;\n  const [length13] = guesses;\n  const [length14] = scores;\n  const [length15] = guesses;\n  const [length16] = scores;\n  const [length17] = guesses;\n  const [length18] = scores;\n  const [length19] = guesses;\n  const [length20] = scores;\n  const [length21] = guesses;\n  const [length22] = scores;\n  const [length23] = guesses;\n  const [length24] = scores;\n  const [length25] = guesses;\n  const [length26] = scores;\n  const [length27] = guesses;\n  const [length28] = scores;\n  const [length29] = guesses;\n  const [length30] = scores;\n  const [length31] = guesses;\n  const [length32] = scores;\n  const [length33] = guesses;\n  const [length34] = scores;\n  const [length35] = guesses;\n  const [length36] = scores;\n  const [length37] = guesses;\n  const [length38] = scores;\n  const [length39] = guesses;\n  const [length40] = scores;\n  const [length41] = guesses;\n  const [length42] = scores;\n  const [length43] = guesses;\n  const [length44] = scores;\n  const [length45] = guesses;\n  const [length46] = scores;\n  const [length47] = guesses;\n  const [length48] = scores;\n  const [length49] = guesses;\n  const [length50] = scores;\n  const [length51] = guesses;\n  const [length52] = scores;\n  const [length53] = guesses;\n  const [length54] = scores;\n  const [length55] = guesses;\n  const [length56] = scores;\n  const [length57] = guesses;\n  const [length58] = scores;\n  const [length59] = guesses;\n  const [length60] = scores;\n  const [length61] = guesses;\n  const [length62] = scores;\n  const [length63] = guesses;\n  const [length64] = scores;\n  const [length65] = guesses;\n  const [length66] = scores;\n  const [length67] = guesses;\n  const [length68] = scores;\n  const [length69] = guesses;\n  const [length70] = scores;\n  const [length71] = guesses;\n  const [length72] = scores;\n  const [length73] = guesses;\n  const [length74] = scores;\n  const [length75] = guesses;\n  const [length76] = scores;\n  const [length77] = guesses;\n  const [length78] = scores;\n  const [length79] = guesses;\n  const [length80] = scores;\n  const [length81] = guesses;\n  const [length82] = scores;\n  const [length83] = guesses;\n  const [length84] = scores;\n  const [length85] = guesses;\n  const [length86] = scores;\n  const [length87] = guesses;\n  const [length88] = scores;\n  const [length89] = guesses;\n  const [length90] = scores;\n  const [length91] = guesses;\n  const [length92] = scores;\n  const [length93] = guesses;\n  const [length94] = scores;\n  const [length95] = guesses;\n  const [length96] = scores;\n  const [length97] = guesses;\n  const [length98] = scores;\n  const [length99] = guesses;\n  const [length100] = scores;\n  const [length101] = guesses;\n  const [length102] = scores;\n  const [length103] = guesses;\n  const [length104] = scores;\n  const [length105] = guesses;\n  const [length106] = scores;\n  const [length107] = guesses;\n  const [length108] = scores;\n  const [length109] = guesses;\n  const [length110] = scores;\n  const [length111] = guesses;\n  const [length112] = scores;\n  const [length113] = guesses;\n  const [length114] = scores;\n  const [length115] = guesses;\n  const [length116] = scores;\n  const [length117] = guesses;\n  const [length118] = scores;\n  const [length119] = guesses;\n  const [length120] = scores;\n  const [length121] = guesses;\n  const [length122] = scores;\n  const [length123] = guesses;\n  const [length124] = scores;\n  const [length125] = guesses;\n  const [length126] = scores;\n  const [length127] = guesses;\n  const [length128] = scores", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n  const capExtension = extensions.map(ext => ext.toUpperCase()).sort((a, b) => a.localeCompare(b));\n  const strength = capExtension.reduce((acc, curr) => {\n    const cap = curr.length;\n    const sm = curr.length - curr.toLowerCase().length;\n    return acc + (cap - sm);\n  }, 0);\n  return `${class_name}.${capExtension[strength]}`;\n};\n\nmodule.exports = strOngeStExtEnsIon;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const aRotation = a.split('');\n  const bRotation = b.split('');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < aLen && j < bLen) {\n    if (aRotation[i] === bRotation[j]) {\n      i++;\n      j++;\n    } else if (i < aLen && j < bLen) {\n      if (aRotation[i] === bRotation[j + 1]) {\n        i++;\n        j++;\n      } else if (aRotation[i + 1] === bRotation[j]) {\n        i++;\n        j++;\n      } else if (aRotation[i + 1] === bRotation[j + 1]) {\n        i++;\n        j++;\n      } else {\n        return false;\n      }\n    } else if (i < aLen) {\n      if (aRotation[i] === bRotation[j + 1]) {\n        i++;\n        j++;\n      } else if (aRotation[i + 1] === bRotation[j]) {\n        i++;\n        j++;\n      } else {\n        return false;\n      }\n    } else if (j < bLen) {\n      if (aRotation[i] === bRotation[j + 1]) {\n        i++;\n        j++;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(cycPattErnChEck(\"abcd\",\"abd\"));\nconsole.log(cycPattErnChEck(\"hello\",\"ell\"));\nconsole.log(cycPattErnChEck(\"whassup\",\"psus\"));\nconsole.log(cycPattErnChEck(\"abab\",\"baa\"));\nconsole.log(cycPattErnChEck(\"efef\",\"eeff\"));\nconsole.log(cycPattErnChEck(\"himenss\",\"simen\"));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n    let count = 0;\n    let odd = 0;\n    let even = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num = num / 2;\n    }\n    return [odd, even];\n};\n\nmodule.exports = eveNOddcount;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  let result = '';\n  let number = number;\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      number -= i * 10;\n      result += i.toString();\n      i++;\n    } else if (number >= i * 5) {\n      number -= i * 5;\n      result += i.toString() + 'v';\n      i++;\n    } else if (number >= i * 2) {\n      number -= i * 2;\n      result += i.toString() + 'x';\n      i++;\n    } else {\n      number--;\n      result += i.toString() + 'i';\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  let result = '';\n  let number = number;\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      number -= i * 10;\n      result += i.toString();\n      i++;\n    } else if (number >= i * 5) {\n      number -= i * 5;\n      result += i.toString() + 'v';\n      i++;\n    } else if (number >= i * 2) {\n      number -= i * 2;\n      result += i.toString() + 'x';\n      i++;\n    } else {\n      number--;\n      result += i.toString() + 'i';\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  let result = '';\n  let number = number;\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      number -= i * 10;\n      result += i.toString();\n      i++;\n    } else if (number >= i * 5) {\n      number -= i * 5;\n      result += i.toString() + 'v';\n      i++;\n    } else if (number >= i * 2) {\n      number -= i * 2;\n      result += i.toString() + 'x';\n      i++;\n    } else {\n      number--;\n      result += i.toString() + 'i';\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  let result = '';\n  let number = number;\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      number -= i * 10;\n      result += i.toString();\n      i++;\n    } else if (number >= i * 5) {\n      number -= i * 5;\n      result += i.toString() + 'v';\n      i++;\n    } else if (number >= i * 2) {\n      number -= i * 2;\n      result += i.toString() + 'x';\n      i++;\n    } else {\n      number--;\n      result += i.toString() + 'i';\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  let result = '';\n  let number = number;\n  let i = 1;\n  while (number > 0) {\n    if (number >= i * 10) {\n      number -= i * 10;\n      result += i.toString();\n      i++;\n    } else if (number >= i * 5) {\n      number -= i * 5;\n      result += i.toString() + 'v';\n      i++;\n    } else if (number >= i * 2) {\n      number -= i * 2;\n      result += i.toString() + 'x';\n      i++;\n    } else {\n      number--;\n      result += i.toString() + 'i';\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  areaTriangle(3, 4, 5) == 12\n  areaTriangle(1, 2, 3) == 0\n  */\nconst areaTriangle = (a, b, c) => {\n  if (rigHtAnGleTrIanGle(a, b, c)) {\n    return (a * b) / 2;\n  }\n  return 0;\n};\n\n/*\n Given the length of a side of a rectangle. Return the area of the rectangle.\n  Example:\n  areaRectangle(3) == 6\n  areaRectangle(5) == 0\n  */\nconst areaRectangle = (side) => {\n  return side * side;\n};\n\n/*\n Given the length of a side of a rectangle. Return the perimeter of the\n  rectangle.\n  Example:\n  perimeterRectangle(3) == 9\n  perimeterRectangle(5) == 16\n  */\nconst perimeterRectangle = (side) => {\n  return side * 4;\n};\n\n/*\n Given the length of a side of a rectangle. Return the volume of the\n  rectangle.\n  Example:\n  volumeRectangle(3) == 27\n  volumeRectangle(5) == 0\n  */\nconst volumeRectangle = (side) => {\n  return side * side * side;\n};\n\n/*\n Given the length of a side of a rectangle. Return the area of the rectangle.\n  Example:\n  areaRectangle(3) == 6\n  areaRectangle(5) == 0\n  */\nconst areaRectangle = (side) => {\n  return side * side;\n};\n\n/*\n Given the length of a side of a rectangle. Return the perimeter of the\n  rectangle.\n  Example:\n  perimeterRectangle(3) == 9\n  perimeterRectangle(5) == 16\n  */\nconst perimeterRectangle = (side) => {\n  return side * 4;\n};\n\n/*\n Given the length of a side of a rectangle. Return the volume of the\n  rectangle.\n  Example:\n  volumeRectangle(3) == 27\n  volumeRectangle(5) == 0\n  */\nconst volumeRectangle = (side) => {\n  return side * side * side;\n};\n\n/*\n Given the length of a side of a rectangle. Return the area of the rectangle.\n  Example:\n  areaRectangle(3) == 6\n  areaRectangle(5) == 0\n  */\nconst areaRectangle = (side) => {\n  return side * side;\n};\n\n/*\n Given the length of a side of a rectangle. Return the perimeter of the\n  rectangle.\n  Example:\n  perimeterRectangle(3) == 9\n  perimeterRectangle(5) == 16\n  */\nconst perimeterRectangle = (side) => {\n  return side * 4;\n};\n\n/*\n Given the length of a side of a rectangle. Return the volume of the\n  rectangle.\n  Example:\n  volumeRectangle(3) == 27\n  volumeRectangle(5) == 0\n  */\nconst volumeRectangle = (side) => {\n  return side * side * side;\n};\n\n/*\n Given the length of a side of a rectangle. Return the area of the rectangle.\n  Example:\n  areaRectangle(3) == 6\n  areaRectangle(5) == 0\n  */\nconst areaRectangle = (side) => {\n  return side * side;\n};\n\n/*\n Given the length of a side of a rectangle. Return the perimeter of the\n  rectangle.\n  Example:\n  perimeterRectangle(3) == 9\n  perimeterRectangle(5) == 16\n  */\nconst perimeterRectangle = (side) => {\n  return side * 4;\n};\n\n/*\n Given the length of a side of a rectangle. Return the volume of the\n  rectangle.\n  Example:\n  volumeRectangle(3) == 27\n  volumeRectangle(5) == 0\n  */\nconst volumeRectangle = (side) => {\n  return side * side * side;\n};\n\n/*\n Given the length of a side of a rectangle. Return the area of the rectangle.\n  Example:\n  areaRectangle(3) == 6\n  areaRectangle(5) == 0\n  */\nconst areaRectangle = (side) => {\n  return side * side;\n};\n\n/*\n Given the length of a side of a rectangle. Return the perimeter of the\n  rectangle.\n  Example:\n  perimeterRectangle(3) == 9\n  perimeterRectangle(5) == 16\n  */\nconst perimeterRectangle = (side) => {\n  return side * 4;\n};\n\n/*\n Given the length of a side of a rectangle. Return the volume of the\n  rectangle.\n  Example:\n  volumeRectangle(3) == 27\n  volumeRectangle(5) == 0\n  */\nconst volumeRectangle = (side) => {\n  return side * side * side;\n};\n\n/*\n Given the length of a side of a rectangle. Return the area of the rectangle.\n  Example:\n  areaRectangle(3) == 6\n  areaRectangle(5) == 0\n  */\nconst areaRectangle = (side) => {\n  return side * side;\n};\n\n/*\n Given the length of a side of a rectangle. Return the perimeter of the\n  rectangle.\n  Example:\n  perimeterRectangle(3) == 9\n  perimeterRectangle(5) == 16\n  */\nconst perimeterRectangle = (side) => {\n  return side * 4;\n};\n\n/*\n Given the length of a side of a rectangle. Return the volume of the\n  rectangle.\n  Example:\n  volumeRectangle(3) == 27\n  volumeRectangle", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  const map = new Map();\n  for (const word of words) {\n    const [count, word] = map.get(word) || [0, word];\n    map.set(word, [++count, word]);\n  }\n  const [max, word] = map.get(words[0]);\n  for (const [count, word] of map.values()) {\n    if (count > max) {\n      max = count;\n      word = word;\n    }\n  }\n  return word;\n};\n\nconsole.log(finDMax([\"name\", \"of\", \"string\"]));\nconsole.log(finDMax([\"name\", \"enam\", \"game\"]));\nconsole.log(finDMax([\"aaaaaaa\", \"bb\", \"cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  return [number, remaining];\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0]\n]\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0]\n]\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0]\n]\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0]\n]\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0]\n]\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0]\n]\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0],\n  [11, 20, 0]\n]\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0],\n  [11, 20, 0],\n  [12, 21, 0]\n]\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0],\n  [11, 20, 0],\n  [12, 21, 0],\n  [13, 22, 0]\n]\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13, 0],\n  [5, 14, 0],\n  [6, 15, 0],\n  [7, 16, 0],\n  [8, 17, 0],\n  [9, 18, 0],\n  [10, 19, 0],\n  [11, 20, 0],\n  [12, 21, 0],\n  [13, 22, 0],\n  [14, 23, 0]\n]\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 1],\n  [4, 13,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const upper = char.toUpperCase();\n    const lower = char.toLowerCase();\n    if (map.has(upper)) {\n      map.set(upper, map.get(upper) + 1);\n    } else {\n      map.set(upper, 1);\n    }\n    if (map.has(lower)) {\n      map.set(lower, map.get(lower) + 1);\n    } else {\n      map.set(lower, 1);\n    }\n  }\n  return map.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const upper = char.toUpperCase();\n    const lower = char.toLowerCase();\n    if (map.has(upper)) {\n      map.set(upper, map.get(upper) + 1);\n    } else {\n      map.set(upper, 1);\n    }\n    if (map.has(lower)) {\n      map.set(lower, map.get(lower) + 1);\n    } else {\n      map.set(lower, 1);\n    }\n  }\n  return map.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const upper = char.toUpperCase();\n    const lower = char.toLowerCase();\n    if (map.has(upper)) {\n      map.set(upper, map.get(upper) + 1);\n    } else {\n      map.set(upper, 1);\n    }\n    if (map.has(lower)) {\n      map.set(lower, map.get(lower) + 1);\n    } else {\n      map.set(lower, 1);\n    }\n  }\n  return map.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const upper = char.toUpperCase();\n    const lower = char.toLowerCase();\n    if (map.has(upper)) {\n      map.set(upper, map.get(upper) + 1);\n    } else {\n      map.set(upper, 1);\n    }\n    if (map.has(lower)) {\n      map.set(lower, map.get(lower) + 1);\n    } else {\n      map.set(lower, 1);\n    }\n  }\n  return map.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const upper = char.toUpperCase();\n    const lower = char.toLowerCase();\n    if (map.has(upper)) {\n      map.set(upper, map.get(upper) + 1);\n    } else {\n      map.set(upper, 1);\n    }\n    if (map.has(lower)) {\n      map.set(lower, map.get(lower) + 1);\n    } else {\n      map.set(lower, 1);\n    }\n  }\n  return map.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  const map = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    const upper = char.toUpperCase();\n    const lower = char.toLowerCase();\n    if (map.has(upper)) {\n      map.set(upper, map.get(upper) + 1);\n    } else {\n      map.set(upper, 1);\n    }\n    if (map.has(lower)) {\n      map.set(lower, map.get(lower) + 1);\n    } else {\n      map.set(lower, 1);\n    }\n  }\n  return map.size;\n};\n\n/*\n  Given a string, find", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n\n  const result = operandList.reduce((acc, current, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n\n    return operator(acc, operand)\n  }, operandList[operandLength - 1])\n\n  return operatorList[operatorLength - 1](result)\n}\n\nconst doALgebRa2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n\n  const result = operandList.reduce((acc, current, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n\n    return operator(acc, operand)\n  }, operandList[operandLength - 1])\n\n  return operatorList[operatorLength - 1](result)\n}\n\nconst doALgebRa3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n\n  const result = operandList.reduce((acc, current, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n\n    return operator(acc, operand)\n  }, operandList[operandLength - 1])\n\n  return operatorList[operatorLength - 1](result)\n}\n\nconst doALgebRa4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n\n  const result = operandList.reduce((acc, current, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n\n    return operator(acc, operand)\n  }, operandList[operandLength - 1])\n\n  return operatorList[operatorLength - 1](result)\n}\n\nconst doALgebRa5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n\n  const result = operandList.reduce((acc, current, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n\n    return operator(acc, operand)\n  }, operandList[operandLength - 1])\n\n  return operatorList[operatorLength - 1](result)\n}\n\nconst doALgebRa6 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n\n  const result = operandList.reduce((acc, current, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n\n    return operator(acc, operand)\n  }, operandList[operandLength - 1])\n\n  return operatorList[operatorLength - 1](result)\n}\n\nconst doALgebRa7 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n\n  const result = operandList.reduce((acc, current, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n\n    return operator(acc, operand)\n  }, operandList[operandLength - 1])\n\n  return operatorList[operatorLength - 1](result)\n}\n\nconst doALgebRa8 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n\n  const result = operandList.reduce((acc, current, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n\n    return operator(acc, operand)\n  }, operandList[operandLength - 1])\n\n  return operatorList[operatorLength - 1](result)\n}\n\nconst doALgebRa9 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorList = operator.slice(0, operatorLength - 1)\n  const operandList = operand.slice(0, operandLength - 1)\n\n  const result = operand", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solVe('1234'));\nconsole.log(solVe('ab'));\nconsole.log(solVe('#a@C'));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSH1('Hello world') == '9e8d2d8f4b0c1f9d0c7f6b5e9f5e7b9f'\n  */\nconst strIngTOSH1 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const sha1 = crypto.createHash('sha1');\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSH256('Hello world') == 'b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9b9d4d9b4c9", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the odd digits between a\n  and b, in ascending order.\n\n  For example:\n  genOddInteGerS(2, 8) => [3, 5, 7]\n  genOddInteGerS(8, 2) => [3, 5, 7]\n  genOddInteGerS(10, 14) => [11, 13]\n  */\nconst genOddInteGerS = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the even digits\n  between a and b, in ascending order.\n\n  For example:\n  sumEvenInteGerS(2, 8) => 10\n  sumEvenInteGerS(8, 2) => 10\n  sumEvenInteGerS(10, 14) => 28\n  */\nconst sumEvenInteGerS = (a, b) => {\n  let result = 0;\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the odd digits\n  between a and b, in ascending order.\n\n  For example:\n  sumOddInteGerS(2, 8) => 12\n  sumOddInteGerS(8, 2) => 12\n  sumOddInteGerS(10, 14) => 30\n  */\nconst sumOddInteGerS = (a, b) => {\n  let result = 0;\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the difference between the\n  even and odd digits, in ascending order.\n\n  For example:\n  diffEvenOddInteGerS(2, 8) => 6\n  diffEvenOddInteGerS(8, 2) => 6\n  diffEvenOddInteGerS(10, 14) => 12\n  */\nconst diffEvenOddInteGerS = (a, b) => {\n  let result = 0;\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result += i;\n    } else {\n      result -= i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the product of the even\n  digits between a and b, in ascending order.\n\n  For example:\n  prodEvenInteGerS(2, 8) => 32\n  prodEvenInteGerS(8, 2) => 32\n  prodEvenInteGerS(10, 14) => 1890\n  */\nconst prodEvenInteGerS = (a, b) => {\n  let result = 1;\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the product of the odd\n  digits between a and b, in ascending order.\n\n  For example:\n  prodOddInteGerS(2, 8) => 16\n  prodOddInteGerS(8, 2) => 16\n  prodOddInteGerS(10, 14) => 1890\n  */\nconst prodOddInteGerS = (a, b) => {\n  let result = 1;\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the even\n  digits between a and b, in ascending order.\n\n  For example:\n  sumEvenInteGerS(2, 8) => 10\n  sumEvenInteGerS(8, 2) => 10\n  sumEvenInteGerS(10, 14) => 28\n  */\nconst sumOddInteGerS = (a, b) => {\n  let result = 0;\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the odd\n  digits between a and b, in ascending order.\n\n  For example:\n  sumOddInteGerS(2, 8) => 12\n  sumOddInteGerS(8, 2) => 12\n  sumOddInteGerS(10, 14) => 30\n  */\nconst sumEvenInteGerS = (a, b) => {\n  let result = 0;\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the difference between the\n  even and odd digits, in ascending order.\n\n  For example:\n  diffEvenOddInteGerS(2, 8) => 6\n  diffEvenOddInteGerS(8, 2) => 6\n  diffEvenOddInte", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic2 = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic3 = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic4 = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic5 = (music_string) => {\n  const notes = music_string.split('');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i = string.indexOf(substring, i) + substring.length;\n    } else {\n      break;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return a new string where all the occurrences of the given substring are replaced by the given replacement string.\n  >>> replace('a', 'b', 'c')\n  'c'\n  >>> replace('a', 'a', 'b')\n  'b'\n  >>> replace('aaa', 'a', 'b')\n  'bbb'\n  >>> replace('aaa', 'aa', 'b')\n  'bbb'\n  */\nconst replace = (string, substring, replacement) => {\n  let i = 0;\n  while (i < string.length) {\n    if (string.indexOf(substring, i)!== -1) {\n      string = string.replace(substring, replacement);\n      i = string.indexOf(substring, i) + substring.length;\n    } else {\n      break;\n    }\n  }\n  return string;\n};\n\n/*\n  Given a string, return a new string where all the occurrences of the given substring are replaced by the given replacement string.\n  >>> replace('a', 'a', 'b')\n  'b'\n  >>> replace('aaa', 'a', 'b')\n  'bbb'\n  >>> replace('aaa', 'aa', 'b')\n  'bbb'\n  */\nconst replaceAll = (string, substring, replacement) => {\n  let i = 0;\n  while (i < string.length) {\n    if (string.indexOf(substring, i)!== -1) {\n      string = string.replace(substring, replacement);\n      i = string.indexOf(substring, i) + substring.length;\n    } else {\n      break;\n    }\n  }\n  return string;\n};\n\n/*\n  Given a string, return a new string where all the occurrences of the given substring are replaced by the given replacement string.\n  >>> replaceAll('a', 'a', 'b')\n  'b'\n  >>> replaceAll('aaa', 'a', 'b')\n  'bbb'\n  >>> replaceAll('aaa', 'aa', 'b')\n  'bbb'\n  */\nconst replaceAllInPlace = (string, substring, replacement) => {\n  let i = 0;\n  while (i < string.length) {\n    if (string.indexOf(substring, i)!== -1) {\n      string = string.replace(substring, replacement);\n      i = string.indexOf(substring, i) + substring.length;\n    } else {\n      break;\n    }\n  }\n  return string;\n};\n\n/*\n  Given a string, return a new string where all the occurrences of the given substring are replaced by the given replacement string.\n  >>> replaceAll('a', 'a', 'b')\n  'b'\n  >>> replaceAll('aaa', 'a', 'b')\n  'bbb'\n  >>> replaceAll('aaa', 'aa', 'b')\n  'bbb'\n  */\nconst replaceAllInPlaceInPlace = (string, substring, replacement) => {\n  let i = 0;\n  while (i < string.length) {\n    if (string.indexOf(substring, i)!== -1) {\n      string = string.replace(substring, replacement);\n      i = string.indexOf(substring, i) + substring.length;\n    } else {\n      break;\n    }\n  }\n  return string;\n};\n\n/*\n  Given a string, return a new string where all the occurrences of the given substring are replaced by the given replacement string.\n  >>> replaceAllInPlace('a', 'a', 'b')\n  'b'\n  >>> replaceAllInPlace('aaa', 'a', 'b')\n  'bbb'\n  >>> replaceAllInPlace('aaa', 'aa', 'b')\n  'bbb'\n  */\nconst replaceAllInPlaceInPlaceInPlace = (string, substring, replacement) => {\n  let i = 0;\n  while (i < string.length) {\n    if (string.indexOf(substring, i)!== -1) {\n      string = string.replace(substring, replacement);\n      i = string.indexOf(substring, i) + substring.length;\n    } else {\n      break;\n    }\n  }\n  return string;\n};\n\n/*\n  Given a string, return a new string where all the occurrences of the given substring are replaced by the given replacement string.\n  >>> replaceAllInPlaceInPlace('a', 'a', 'b')\n  'b'\n  >>> replaceAllInPlaceInPlace('aaa', 'a', 'b')\n  'bbb'\n  >>> replaceAllInPlaceInPlace('aaa', 'aa', 'b')\n  'bbb'\n  */\nconst replaceAllInPlaceInPlaceInPlaceInPlace = (string, substring, replacement) => {\n  let i = 0;\n  while (i < string.length) {\n    if (string.indexOf(substring, i)!== -1) {\n      string = string.replace(substring, replacement);\n      i = string.indexOf(substring, i) + substring.length;\n    } else {\n      break;\n    }\n  }\n  return string;\n};\n\n/*\n  Given a string, return a new string where all the occurrences of the given substring are replaced by the given replacement string.\n  >>> replaceAllInPlaceInPlaceInPlace('a', 'a', 'b')\n  'b'\n  >>> replaceAllInPlaceInPlaceInPlace('aaa', 'a', 'b')\n  'bbb'\n  >>> replaceAllInPlaceInPlaceInPlace('aaa', 'aa', 'b')\n  'bbb'\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrLen = numbersArr.length\n  const numbersArrSorted = numbersArr.sort((a, b) => a - b)\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight nine zero one two three four five six seven'\n  */\nconst sorTNumBers2 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrLen = numbersArr.length\n  const numbersArrSorted = numbersArr.sort((a, b) => a - b)\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight nine zero one two three four five six seven'\n  */\nconst sorTNumBers3 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrLen = numbersArr.length\n  const numbersArrSorted = numbersArr.sort((a, b) => a - b)\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight nine zero one two three four five six seven'\n  */\nconst sorTNumBers4 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrLen = numbersArr.length\n  const numbersArrSorted = numbersArr.sort((a, b) => a - b)\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight nine zero one two three four five six seven'\n  */\nconst sorTNumBers5 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrLen = numbersArr.length\n  const numbersArrSorted = numbersArr.sort((a, b) => a - b)\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight nine zero one two three four five six seven'\n  */\nconst sorTNumBers6 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrLen = numbersArr.length\n  const numbersArrSorted = numbersArr.sort((a, b) => a - b)\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight nine zero one two three four five six seven'\n  */\nconst sorTNumBers7 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrLen = numbersArr.length\n  const numbersArrSorted = numbersArr.sort((a, b) => a - b)\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight nine zero one two three four five six seven'\n  */\nconst sorTNumBers8 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrLen = numbersArr.length\n  const numbersArrSorted = numbersArr.sort((a, b) => a - b)\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight nine zero one two three four five six seven'\n  */\nconst sorTNumBers9 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrLen = numbersArr.length\n  const numbersArrSorted = numbersArr.sort((a, b) => a - b)\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight nine zero one two three four five six seven'\n  */\nconst sorTNumBers10 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrLen = numbersArr.length\n  const numbersArrSorted = numbersArr.sort((a, b) => a - b)\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight nine zero one two three four five six seven'\n  */\nconst sorTNumBers11 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrLen = numbersArr.length\n  const numbersArrSorted = numbersArr.sort((a, b) => a - b)\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight nine zero one two three four five six seven'\n  */\nconst sorTNumBers12 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrLen = numbersArr.length\n  const numbersArrSorted = numbersArr.sort((a, b) => a - b)\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErDec = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntDec = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntDecDec = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntDecDecDec = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntDecDecDecDec = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntDecDecDecDecDec = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntDecDecDecDecDecDec = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntDecDecDecDecDecDecDec = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntDecDecDecDecDecDecDecDec = (number) => {\n  let integerPart = Math.floor(number);\n  let decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErIntDecDecDecDecDecDecDecDecDec = (number) => {\n  let integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbErIntDecDecDecDecDecDecDecDecDecDec = (number) => {\n  let integerPart = Math", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0],\n        secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts2 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0],\n        secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts3 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0],\n        secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts4 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0],\n        secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts5 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0],\n        secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts6 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0],\n        secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts7 = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const closest = sorted[0],\n        secondClosest = sorted[1];\n  return [closest, secondClosest];\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  const len = numbers.length;\n  const min = numbers[0];\n  const max = numbers[len - 1];\n  const range = max - min;\n  const step = range / (len - 1);\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    result.push(min + step * i);\n  }\n  return result;\n};\n\nexport default resCaletoUniT;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n// Filter given list of any python values only for strings\nconst filTerStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n// Filter given list of any python values only for booleans\nconst filTerBools = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n// Filter given list of any python values only for dicts\nconst filTerDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n// Filter given list of any python values only for lists\nconst filTerLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Array);\n};\n\n// Filter given list of any python values only for numbers\nconst filTerNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n// Filter given list of any python values only for strings\nconst filTerStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n// Filter given list of any python values only for booleans\nconst filTerBools = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n// Filter given list of any python values only for dicts\nconst filTerDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n// Filter given list of any python values only for lists\nconst filTerLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Array);\n};\n\n// Filter given list of any python values only for numbers\nconst filTerNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n// Filter given list of any python values only for strings\nconst filTerStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n// Filter given list of any python values only for booleans\nconst filTerBools = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n// Filter given list of any python values only for dicts\nconst filTerDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n// Filter given list of any python values only for lists\nconst filTerLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Array);\n};\n\n// Filter given list of any python values only for numbers\nconst filTerNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n// Filter given list of any python values only for strings\nconst filTerStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n// Filter given list of any python values only for booleans\nconst filTerBools = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n// Filter given list of any python values only for dicts\nconst filTerDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n// Filter given list of any python values only for lists\nconst filTerLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Array);\n};\n\n// Filter given list of any python values only for numbers\nconst filTerNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n// Filter given list of any python values only for strings\nconst filTerStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n// Filter given list of any python values only for booleans\nconst filTerBools = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n// Filter given list of any python values only for dicts\nconst filTerDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n// Filter given list of any python values only for lists\nconst filTerLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Array);\n};\n\n// Filter given list of any python values only for numbers\nconst filTerNumbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n// Filter given list of any python values only for strings\nconst filTerStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n// Filter given list of any python values only for booleans\nconst filTerBools = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n// Filter given list of any python values only for dicts\nconst filTerDicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Object);\n};\n\n// Filter given list of any python values only for lists\nconst filTerLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null && v.constructor === Array);\n};\n\n// Filter given list of any python values only", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n  return string.length;\n};\n\n/**\n  * Return index of first occurrence of a character in a string\n  *\n  * @param {string} string\n  * @param {string} character\n  * @returns {number}\n  * @example\n  * strIndexOf('abc', 'a')\n  * // => 0\n  * strIndexOf('abc', 'b')\n  * // => 1\n  * strIndexOf('abc', 'c')\n  * // => 2\n  * strIndexOf('abc', 'd')\n  * // => -1\n  */\nconst strIndexOf = (string, character) => {\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n  * Return index of last occurrence of a character in a string\n  *\n  * @param {string} string\n  * @param {string} character\n  * @returns {number}\n  * @example\n  * strLastIndexOf('abc', 'a')\n  * // => 2\n  * strLastIndexOf('abc', 'b')\n  * // => 1\n  * strLastIndexOf('abc', 'c')\n  * // => 0\n  * strLastIndexOf('abc', 'd')\n  * // => -1\n  */\nconst strLastIndexOf = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n  * Return index of first occurrence of a character in a string\n  *\n  * @param {string} string\n  * @param {string} character\n  * @returns {number}\n  * @example\n  * strLastIndexOf('abc', 'a')\n  * // => 2\n  * strLastIndexOf('abc', 'b')\n  * // => 1\n  * strLastIndexOf('abc', 'c')\n  * // => 0\n  * strLastIndexOf('abc', 'd')\n  * // => -1\n  */\nconst strLastIndexOf = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n  * Return index of first occurrence of a character in a string\n  *\n  * @param {string} string\n  * @param {string} character\n  * @returns {number}\n  * @example\n  * strLastIndexOf('abc', 'a')\n  * // => 2\n  * strLastIndexOf('abc', 'b')\n  * // => 1\n  * strLastIndexOf('abc', 'c')\n  * // => 0\n  * strLastIndexOf('abc', 'd')\n  * // => -1\n  */\nconst strLastIndexOf = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n  * Return index of first occurrence of a character in a string\n  *\n  * @param {string} string\n  * @param {string} character\n  * @returns {number}\n  * @example\n  * strLastIndexOf('abc', 'a')\n  * // => 2\n  * strLastIndexOf('abc', 'b')\n  * // => 1\n  * strLastIndexOf('abc', 'c')\n  * // => 0\n  * strLastIndexOf('abc', 'd')\n  * // => -1\n  */\nconst strLastIndexOf = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n  * Return index of first occurrence of a character in a string\n  *\n  * @param {string} string\n  * @param {string} character\n  * @returns {number}\n  * @example\n  * strLastIndexOf('abc', 'a')\n  * // => 2\n  * strLastIndexOf('abc', 'b')\n  * // => 1\n  * strLastIndexOf('abc', 'c')\n  * // => 0\n  * strLastIndexOf('abc', 'd')\n  * // => -1\n  */\nconst strLastIndexOf = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n  * Return index of first occurrence of a character in a string\n  *\n  * @param {string} string\n  * @param {string} character\n  * @returns {number}\n  * @example\n  * strLastIndexOf('abc', 'a')\n  * // => 2\n  * strLastIndexOf('abc', 'b')\n  * // => 1\n  * strLastIndexOf('abc', 'c')\n  * // => 0\n  * strLastIndexOf('abc', 'd')\n  * // => -1\n  */\nconst strLastIndexOf = (string, character) => {\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n  * Return index of first occurrence of a character in a string\n  *\n  * @param {string} string\n  * @param {string} character\n  * @returns {number}\n  * @example\n  * strLastIndexOf('abc', 'a')\n  * // => 2\n  * strLastIndexOf('abc', 'b')\n  * // => 1\n  * strLastIndexOf('abc', 'c')\n  * // =>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  let result = n;\n  let i = n;\n  while (i > 1) {\n    let remainder = n % i;\n    if (remainder === 0) {\n      result = i;\n      break;\n    }\n    i--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr(15)\n  10\n  */\nconst larGestdivisOr2 = (n) => {\n  let result = n;\n  let i = n;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) {\n      result = i;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr2(15)\n  20\n  */\nconst larGestdivisOr3 = (n) => {\n  let result = n;\n  let i = n;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) {\n      result = i;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr3(15)\n  20\n  */\nconst larGestdivisOr4 = (n) => {\n  let result = n;\n  let i = n;\n  while (i > 1) {\n    let remainder = n % i;\n    if (remainder === 0) {\n      result = i;\n      break;\n    }\n    i--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr4(15)\n  20\n  */\nconst larGestdivisOr5 = (n) => {\n  let result = n;\n  let i = n;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) {\n      result = i;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr5(15)\n  20\n  */\nconst larGestdivisOr6 = (n) => {\n  let result = n;\n  let i = n;\n  while (i > 1) {\n    let remainder = n % i;\n    if (remainder === 0) {\n      result = i;\n      break;\n    }\n    i--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr6(15)\n  20\n  */\nconst larGestdivisOr7 = (n) => {\n  let result = n;\n  let i = n;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) {\n      result = i;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr7(15)\n  20\n  */\nconst larGestdivisOr8 = (n) => {\n  let result = n;\n  let i = n;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) {\n      result = i;\n      break;\n    }\n    i--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr8(15)\n  20\n  */\nconst larGestdivisOr9 = (n) => {\n  let result = n;\n  let i = n;\n  while (i > 1) {\n    let remainder = n % i;\n    if (remainder === 0) {\n      result = i;\n      break;\n    }\n    i--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr9(15)\n  20\n  */\nconst larGestdivisOr10 = (n) => {\n  let result = n;\n  let i = n;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) {\n      result = i;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr10(15)\n  20\n  */\nconst larGestdivisOr11 = (n) => {\n  let result = n;\n  let i = n;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) {\n      result = i;\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr11(15)\n  20\n  */\nconst larGestdivisOr12 = (n) => {\n  let result = n;\n  let i = n;\n  while (i < n) {\n    let remainder = n % i;\n    if (remainder === 0) {\n      result = i;\n      break;\n    }\n    i--;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeReverse = (n) => {\n  let factors = [];\n  for (let i = Math.sqrt(n); i >= 2; i--) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeReverse2 = (n) => {\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeReverse3 = (n) => {\n  let factors = [];\n  for (let i = n; i >= 2; i--) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeReverse4 = (n) => {\n  let factors = [];\n  for (let i = n; i >= 2; i--) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeReverse5 = (n) => {\n  let factors = [];\n  for (let i = n; i >= 2; i--) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeReverse6 = (n) => {\n  let factors = [];\n  for (let i = n; i >= 2; i--) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers];\n};\n\nexport default remOveDUplicAteS;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return a string with all the spaces removed.\n  >>> fliSpaces('Hello World')\n  'HelloWorld'\n  */\nconst fliSpaces = (string) => {\n  return string.replace(/\\s/g, '');\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS2 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS3 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS4 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS5 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS6 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS7 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS8 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS9 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS10 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS11 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS12 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS13 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS14 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSpacesCAS('Hello World')\n  'HELLO WORLD'\n  */\nconst fliSpacesCAS15 = (string) => {\n  return fliSpaces(fliPCasE(string));\n};\n\n/*\n  For a given string, return a string with all the spaces removed and\n  all the lowercase characters converted to uppercase.\n  >>> fliSp", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator - the separator\n  * @param {array} strings - list of strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparator = (separator, strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i] + separator;\n  }\n  return result;\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator - the separator\n  * @param {array} strings - list of strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparator2 = (separator, strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i] + separator;\n  }\n  return result;\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator - the separator\n  * @param {array} strings - list of strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparator3 = (separator, strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i] + separator;\n  }\n  return result;\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator - the separator\n  * @param {array} strings - list of strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparator4 = (separator, strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i] + separator;\n  }\n  return result;\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator - the separator\n  * @param {array} strings - list of strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparator5 = (separator, strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i] + separator;\n  }\n  return result;\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator - the separator\n  * @param {array} strings - list of strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparator6 = (separator, strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i] + separator;\n  }\n  return result;\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator - the separator\n  * @param {array} strings - list of strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparator7 = (separator, strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i] + separator;\n  }\n  return result;\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator - the separator\n  * @param {array} strings - list of strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparator8 = (separator, strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i] + separator;\n  }\n  return result;\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator - the separator\n  * @param {array} strings - list of strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparator9 = (separator, strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i] + separator;\n  }\n  return result;\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator - the separator\n  * @param {array} strings - list of strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparator10 = (separator, strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i] + separator;\n  }\n  return result;\n};\n\n/*\n  * Concatenate list of strings into a single string\n  * with a separator\n  *\n  * @param {string} separator - the separator\n  * @param {array} strings - list of strings\n  * @returns {string}\n  */\nconst conCateNateWithSeparator11 = (separator, strings) => {\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filTerBYPrefIx", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = belOwZeRo;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive2 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive3 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive4 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive5 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive6 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive7 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive8 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive9 = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getpos", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(6)\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const max = xs[len - 1];\n    for (let i = 0; i < len; i += 2) {\n      if (xs[i] === 0) {\n        return xs[i + 1] / max;\n      }\n    }\n  }\n  return undefined;\n}\n\n/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY10 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY11 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n  const sorted = l.slice().sort();\n  const divisible = sorted.filter((x) => x % 3 === 0);\n  const nonDivisible = sorted.filter((x) => x % 3!== 0);\n  const nonDivisibleSorted = nonDivisible.sort();\n  return divisible.concat(nonDivisibleSorted);\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sorTThiRd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst sorTThiRd2 = (l) => {\n  const sorted = l.slice().sort();\n  const divisible = sorted.filter((x) => x % 5 === 0);\n  const nonDivisible = sorted.filter((x) => x % 5!== 0);\n  const nonDivisibleSorted = nonDivisible.sort();\n  return divisible.concat(nonDivisibleSorted);\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> sorTThiRd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue2 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue3 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue4 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue5 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue6 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue7 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue8 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue9 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue10 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue11 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue12 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue13 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue14 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue15 = (l) => {\n  const arr = Array.from(l)\n  const sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\n/*Return sorted uniQue elements", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelem = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxelem([1, 2, 3])\n  3\n  >>> maxelem([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> max([1, 2, 3])\n  3\n  >>> max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> max([1, 2, 3])\n  3\n  >>> max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> max([1, 2, 3])\n  3\n  >>> max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> max([1, 2, 3])\n  3\n  >>> max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> max([1, 2, 3])\n  3\n  >>> max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> max([1, 2, 3])\n  3\n  >>> max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> max([1, 2, 3])\n  3\n  >>> max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> max([1, 2, 3])\n  3\n  >>> max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> max([1, 2, 3])\n  3\n  >>> max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> max([1, 2, 3])\n  3\n  >>> max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max = (l) => {\n  let max = 0;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0 && (n / i) % 11 === 7 || n % i === 0 && (n / i) % 13 === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find the largest prime number that is less than or equal to n.\n  >>> fizZBuzZ(100)\n  2\n  >>> fizZBuzZ(101)\n  3\n  >>> fizZBuzZ(1000)\n  2\n  >>> fizZBuzZ(1001)\n  3\n  >>> fizZBuzZ(10000)\n  2\n  >>> fizZBuzZ(10001)\n  3\n  >>> fizZBuzZ(1000000)\n  2\n  >>> fizZBuzZ(100000001)\n  3\n  */\nconst fizZBuzZPrime = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find the largest prime number that is less than or equal to n.\n  >>> fizZBuzZPrime(100)\n  2\n  >>> fizZBuzZPrime(101)\n  3\n  >>> fizZBuzZPrime(1000)\n  2\n  >>> fizZBuzZPrime(1001)\n  3\n  >>> fizZBuzZPrime(10000)\n  2\n  >>> fizZBuzZPrime(10001)\n  3\n  >>> fizZBuzZPrime(1000000)\n  2\n  >>> fizZBuzZPrime(100000001)\n  3\n  */\nconst fizZBuzZPrime2 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find the largest prime number that is less than or equal to n.\n  >>> fizZBuzZPrime2(100)\n  2\n  >>> fizZBuzZPrime2(101)\n  3\n  >>> fizZBuzZPrime2(1000)\n  2\n  >>> fizZBuzZPrime2(1001)\n  3\n  >>> fizZBuzZPrime2(10000)\n  2\n  >>> fizZBuzZPrime2(10001)\n  3\n  >>> fizZBuzZPrime2(1000000)\n  2\n  >>> fizZBuzZPrime2(100000001)\n  3\n  */\nconst fizZBuzZPrime3 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find the largest prime number that is less than or equal to n.\n  >>> fizZBuzZPrime3(100)\n  2\n  >>> fizZBuzZPrime3(101)\n  3\n  >>> fizZBuzZPrime3(1000)\n  2\n  >>> fizZBuzZPrime3(1001)\n  3\n  >>> fizZBuzZPrime3(10000)\n  2\n  >>> fizZBuzZPrime3(10001)\n  3\n  >>> fizZBuzZPrime3(1000000)\n  2\n  >>> fizZBuzZPrime3(100000001)\n  3\n  */\nconst fizZBuzZPrime4 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find the largest prime number that is less than or equal to n.\n  >>> fizZBuzZPrime4(100)\n  2\n  >>> fizZBuzZPrime4(101)\n  3\n  >>> fizZBuzZPrime4(1000)\n  2\n  >>> fizZBuzZPrime4(1001)\n  3\n  >>> fizZBuzZPrime4(10000)\n  2\n  >>> fizZBuzZPrime4(10001)\n  3\n  >>> fizZBuzZPrime4(1000000)\n  2\n  >>> fizZBuzZPrime4(100000001)\n  3\n  */\nconst fizZBuzZPrime5 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let's try to find the largest prime number that is less than or equal to n.\n  >>> fizZBuzZPrime5(100)\n  2\n  >>> fizZBuzZPrime5(101)\n  3\n  >>> fizZBuzZPrime5(1000)\n  2\n  >>> fizZBuzZPrime5(1001)\n  3\n  >>> fizZBuzZPrime5(10000)\n  2\n  >>> fizZBuzZPrime5(10001)\n  3\n  >>> fizZBuzZPrime5(1000000)\n  2\n  >>> fizZBuzZPrime5(100000001)\n  3\n  */\nconst fizZBuzZPrime6 = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Let", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n  const l2 = l.slice(0);\n  l2.sort();\n  return l2.slice(1);\n};\n\nmodule.exports = sorTEveN;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1, 2) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2, 3) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2, 3) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeOdeCYclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n  let fib = [1, 2];\n  let fibPrime = [1, 2];\n  let fibPrimeCount = 0;\n  let fibPrimeIndex = 0;\n  let fibPrimeIndexMax = fibPrime.length - 1;\n  let fibPrimeIndexMin = 0;\n  let fibPrimeIndexMinMax = fibPrimeIndexMax;\n  let fibPrimeIndexMinMaxMin = fibPrimeIndexMinMax;\n  let fibPrimeIndexMinMaxMinMax = fibPrimeIndexMinMaxMin;\n  let fibPrimeIndexMinMaxMinMaxMax = fibPrimeIndexMinMaxMinMax;\n  let fibPrimeIndexMinMaxMinMaxMaxMax = fibPrimeIndexMinMaxMinMaxMax;\n  let fibPrimeIndexMinMaxMinMaxMaxMax = fibPrimeIndexMinMaxMinMaxMaxMax;\n  let fibPrimeIndexMinMaxMinMaxMaxMaxMax = fibPrimeIndexMinMaxMinMaxMaxMaxMax;\n  let fibPrimeIndexMinMaxMinMaxMaxMaxMaxMax = fibPrimeIndexMinMaxMinMaxMaxMaxMaxMaxMax;\n  let fibPrimeIndexMinMaxMinMaxMaxMaxMaxMaxMaxMax = fibPrimeIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax;\n  let fibPrimeIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax Max\n  */\n  let fib = fib.slice(0, n);\n  let fibPrime = fib.slice(0, fibPrime.length);\n  let fibPrimeCount = fibPrime.length;\n  let fibPrimeIndex = fibPrime.slice(0, fibPrimeCount);\n  let fibPrimeIndexMax = fibPrimeIndex.slice(0, fibPrimeIndexMax);\n  let fibPrimeIndexMin = fibPrimeIndex.slice(0, fibPrimeIndexMin);\n  let fibPrimeIndexMinMax = fibPrimeIndex.slice(0, fibPrimeIndexMinMax);\n  let fibPrimeIndexMinMaxMax = fibPrimeIndex.slice(0, fibPrimeIndexMinMaxMax);\n  let fibPrimeIndexMinMaxMin = fibPrimeIndex.slice(0, fibPrimeIndexMinMaxMin);\n  let fibPrimeIndexMinMaxMinMax = fibPrimeIndex.slice(0, fibPrimeIndexMinMaxMinMax);\n  let fibPrimeIndexMinMaxMinMaxMax = fibPrimeIndex.slice(0, fibPrimeIndexMinMaxMinMax);\n  let fibPrimeIndexMinMaxMinMaxMax = fibPrimeIndex.slice(0, fibPrimeIndexMinMaxMinMax);\n  let fibPrimeIndexMinMaxMinMaxMax = fibPrimeIndex.slice(0, fibPrimeIndexMinMaxMinMax);\n  let fibPrimeIndexMinMaxMinMaxMax = fibPrimeIndex.slice(0, fibPrimeIndexMinMaxMinMax);\n  let fibPrimeIndexMinMaxMinMaxMax = fibPrime", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return mean(numbers.map(mad));\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return mean(numbers.map(mad));\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return mean(numbers.map(mad));\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return mean(numbers.map(mad));\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return mean(numbers.map(mad));\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return mean(numbers.map(mad));\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return mean(numbers.map(mad));\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return mean(numbers.map(mad));\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const mean = mean(numbers);\n  const mad = (x) => Math.abs(x - mean);\n  return mean(numbers.map(mad));\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return l.filter((x) => x + sum === 0).length === 3;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO2 = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return l.filter((x) => x + sum === 0).length === 3;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO3 = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return l.filter((x) => x + sum === 0).length === 3;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO4 = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return l.filter((x) => x + sum === 0).length === 3;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO5 = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return l.filter((x) => x + sum === 0).length === 3;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO6 = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return l.filter((x) => x + sum === 0).length === 3;\n};\n\n/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO7 = (l) => {\n    const sum = l.reduce((a, b) => a + b, 0);\n    return l.filter((x) => x + sum === 0).length === 3;\n};\n\n/*\n  triPlessumTozerO takes", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  const collisions = [];\n  const carracer = carrace(n);\n  const carracer2 = carrace(n);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        continue;\n      }\n      const carracer_i = carracer[i];\n      const carracer_j = carracer[j];\n      const carracer2_i = carracer2[i];\n      const carracer2_j = carracer2[j];\n      if (carracer_i.x === carracer_j.x && carracer_i.y === carracer_j.y) {\n        collisions.push(carracer_i.x);\n      }\n      if (carracer2_i.x === carracer2_j.x && carracer2_i.y === carracer2_j.y) {\n        collisions.push(carracer2_i.x);\n      }\n    }\n  }\n  return collisions.length;\n};\n\nconst carracecolliSioN_ = (n) => {\n  const collisions = [];\n  const carracer = carrace(n);\n  const carracer2 = carrace(n);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        continue;\n      }\n      const carracer_i = carracer[i];\n      const carracer_j = carracer[j];\n      const carracer2_i = carracer2[i];\n      const carracer2_j = carracer2[j];\n      if (carracer_i.x === carracer_j.x && carracer_i.y === carracer_j.y) {\n        collisions.push(carracer_i.x);\n      }\n      if (carracer2_i.x === carracer2_j.x && carracer2_i.y === carracer2_j.y) {\n        collisions.push(carracer2_i.x);\n      }\n    }\n  }\n  return collisions.length;\n};\n\nconst carracecolliSioN_ = (n) => {\n  const collisions = [];\n  const carracer = carrace(n);\n  const carracer2 = carrace(n);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        continue;\n      }\n      const carracer_i = carracer[i];\n      const carracer_j = carracer[j];\n      const carracer2_i = carracer2[i];\n      const carracer2_j = carracer2[j];\n      if (carracer_i.x === carracer_j.x && carracer_i.y === carracer_j.y) {\n        collisions.push(carracer_i.x);\n      }\n      if (carracer2_i.x === carracer2_j.x && carracer2_i.y === carracer2_j.y) {\n        collisions.push(carracer2_i.x);\n      }\n    }\n  }\n  return collisions.length;\n};\n\nconst carracecolliSioN = (n) => {\n  const collisions = [];\n  const carracer = carrace(n);\n  const carracer2 = carrace(n);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        continue;\n      }\n      const carracer_i = carracer[i];\n      const carracer_j = carracer[j];\n      const carracer2_i = carracer2[i];\n      const carracer2_j = carracer2[j];\n      if (carracer_i.x === carracer_j.x && carracer_i.y === carracer_j.y) {\n        collisions.push(carracer_i.x);\n      }\n      if (carracer2_i.x === carracer2_j.x && carracer2_i.y === carracer2_j.y) {\n        collisions.push(carracer2_i.x);\n      }\n    }\n  }\n  return collisions.length;\n};\n\nconst carracecolliSioN = (n) => {\n  const collisions = [];\n  const carracer = carrace(n);\n  const carracer2 = carrace(n);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === j) {\n        continue;\n      }\n      const carracer_i = carracer[i];\n      const carracer_j = carracer[j];\n      const carracer2_i = carracer2[i];\n      const carracer2_j = carracer2[j];\n      if (carracer_i.x === carracer_j.x && carracer_i.y === carracer_j.y) {\n        collisions.push(carracer_i.x);\n      }\n      if (carracer2_i.x === carracer2_j.x &&", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  let result = l.slice();\n  for (let i = 0; i < result.length; i++) {\n    result[i]++;\n  }\n  return result;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis = (l) => {\n  let result = l.slice();\n  for (let i = 0; i < result.length; i++) {\n    result[i]++;\n  }\n  return result;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis2 = (l) => {\n  let result = l.slice();\n  for (let i = 0; i < result.length; i++) {\n    result[i]++;\n  }\n  return result;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis3 = (l) => {\n  let result = l.slice();\n  for (let i = 0; i < result.length; i++) {\n    result[i]++;\n  }\n  return result;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis4 = (l) => {\n  let result = l.slice();\n  for (let i = 0; i < result.length; i++) {\n    result[i]++;\n  }\n  return result;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis5 = (l) => {\n  let result = l.slice();\n  for (let i = 0; i < result.length; i++) {\n    result[i]++;\n  }\n  return result;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis6 = (l) => {\n  let result = l.slice();\n  for (let i = 0; i < result.length; i++) {\n    result[i]++;\n  }\n  return result;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis7 = (l) => {\n  let result = l.slice();\n  for (let i = 0; i < result.length; i++) {\n    result[i]++;\n  }\n  return result;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis8 = (l) => {\n  let result = l.slice();\n  for (let i = 0; i < result.length; i++) {\n    result[i]++;\n  }\n  return result;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis9 = (l) => {\n  let result = l.slice();\n  for (let i = 0; i < result.length; i++) {\n    result[i]++;\n  }\n  return result;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLis10 = (l) => {\n  let result = l.slice();\n  for (let i = 0; i < result.length; i++) {\n    result[i]++;\n  }\n  return result;\n};\n\n/*\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return l.some(x => x!== 0 && sum === 0)\n}\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo2 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return l.some(x => x!== 0 && sum === 0)\n}\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo3 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return l.some(x => x!== 0 && sum === 0)\n}\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo4 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return l.some(x => x!== 0 && sum === 0)\n}\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo5 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return l.some(x => x!== 0 && sum === 0)\n}\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo6 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return l.some(x => x!== 0 && sum === 0)\n}\n\n/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo7 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return l.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  const str = x.toString(base);\n  const len = str.length;\n  const res = [];\n  for (let i = 0; i < len; i++) {\n    res.push(str[i]);\n  }\n  return res.join('');\n};\n\n/*\n  Convert a number to a string in base 10.\n  >>> chaNgeToStr(8)\n  '8'\n  >>> chaNgeToStr(8, 2)\n  '10'\n  >>> chaNgeToStr(7, 2)\n  '11'\n  */\nconst chaNgeToStr = (x, base) => {\n  return x.toString(base);\n};\n\n/*\n  Convert a string to a number in base 10.\n  >>> chaNgeToNum('100')\n  100\n  >>> chaNgeToNum('100', 2)\n  8\n  >>> chaNgeToNum('100', 3)\n  7\n  >>> chaNgeToNum('100', 4)\n  6\n  >>> chaNgeToNum('100', 5)\n  5\n  >>> chaNgeToNum('100', 6)\n  4\n  >>> chaNgeToNum('100', 7)\n  3\n  >>> chaNgeToNum('100', 8)\n  2\n  >>> chaNgeToNum('100', 9)\n  1\n  >>> chaNgeToNum('100', 10)\n  0\n  >>> chaNgeToNum('100', 11)\n  1\n  >>> chaNgeToNum('100', 12)\n  2\n  >>> chaNgeToNum('100', 13)\n  3\n  >>> chaNgeToNum('100', 14)\n  4\n  >>> chaNgeToNum('100', 15)\n  5\n  >>> chaNgeToNum('100', 16)\n  6\n  >>> chaNgeToNum('100', 17)\n  7\n  >>> chaNgeToNum('100', 18)\n  8\n  >>> chaNgeToNum('100', 19)\n  9\n  >>> chaNgeToNum('100', 20)\n  10\n  >>> chaNgeToNum('100', 21)\n  11\n  >>> chaNgeToNum('100', 22)\n  12\n  >>> chaNgeToNum('100', 23)\n  13\n  >>> chaNgeToNum('100', 24)\n  14\n  >>> chaNgeToNum('100', 25)\n  15\n  >>> chaNgeToNum('100', 26)\n  16\n  >>> chaNgeToNum('100', 27)\n  17\n  >>> chaNgeToNum('100', 28)\n  18\n  >>> chaNgeToNum('100', 29)\n  19\n  >>> chaNgeToNum('100', 30)\n  20\n  >>> chaNgeToNum('100', 31)\n  21\n  >>> chaNgeToNum('100', 32)\n  22\n  >>> chaNgeToNum('100', 33)\n  23\n  >>> chaNgeToNum('100', 34)\n  24\n  >>> chaNgeToNum('100', 35)\n  25\n  >>> chaNgeToNum('100', 36)\n  26\n  >>> chaNgeToNum('100', 37)\n  27\n  >>> chaNgeToNum('100', 38)\n  28\n  >>> chaNgeToNum('100', 39)\n  29\n  >>> chaNgeToNum('100', 40)\n  30\n  >>> chaNgeToNum('100', 41)\n  31\n  >>> chaNgeToNum('100', 42)\n  32\n  >>> chaNgeToNum('100', 43)\n  33\n  >>> chaNgeToNum('100', 44)\n  34\n  >>> chaNgeToNum('100', 45)\n  35\n  >>> chaNgeToNum('100', 46)\n  36\n  >>> chaNgeToNum('100', 47)\n  37\n  >>> chaNgeToNum('100', 48)\n  38\n  >>> chaNgeToNum('100', 49)\n  39\n  >>> chaNgeToNum('100', 50)\n  40\n  >>> chaNgeToNum('100', 51)\n  41\n  >>> chaNgeToNum('100', 52)\n  42\n  >>> chaNgeToNum('100', 53)\n  43\n  >>> chaNgeToNum('100', 54)\n  44\n  >>> chaNgeToNum('100', 55)\n  45\n  >>> chaNgeToNum('100', 56)\n  46\n  >>> chaNgeToNum('100', 57)\n  47\n  >>> chaNgeToNum('100', 58)\n  48\n  >>> chaNgeToNum('100', 59)\n  49\n  >>> chaNgeToNum('100', 60)\n  50\n  >>> chaNgeToNum('100', 61)\n  51\n  >>> chaNgeToNum('100', 62)\n  52\n  >>> chaNgeToNum('100', 63)\n  53\n  >>> chaNgeToNum('100', 64)\n  54\n  >>> chaNgeToNum('100', 65)\n  55\n  >>> chaNgeToNum('100', 66)\n  56\n  >>> chaNgeToNum('100', 67)\n  57\n  >>> chaNgeToNum('100', 68)\n  58\n  >>> chaNgeToNum('100', 69)\n  59\n  >>> chaNgeToNum('100', 70)\n  60\n  >>> chaNgeToNum('100', 71)\n  61\n  >>> chaNgeToNum('100', 72)\n  62\n  >>> chaNgeToNum('100', 73)\n  63\n  >>> chaNgeToNum('100', 74)\n  64\n  >>> chaNgeToNum('100', 75)\n  65\n  >>> chaNgeToNum('100', 76)\n  66\n  >>> chaNgeToNum('100', 77)\n  67\n  >>> chaNgeToNum('100', 78)\n  68\n  >>> chaNgeToNum", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  return (a * h) / 2;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 2\n  } else if (n === 3) {\n    return 0\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  let i = 1,\n    j = l.length - 1,\n    median;\n\n  while (i < j) {\n    const m = (i + j) / 2;\n    const n = l.length - m;\n\n    if (l[m] < l[n]) {\n      i = m + 1;\n    } else {\n      j = n - 1;\n    }\n  }\n\n  median = l[i];\n\n  return median;\n};\n\nexport default medIan;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome2('')\n  true\n  >>> isPalindrome2('aba')\n  true\n  >>> isPalindrome2('aaaaa')\n  true\n  >>> isPalindrome2('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome3('')\n  true\n  >>> isPalindrome3('aba')\n  true\n  >>> isPalindrome3('aaaaa')\n  true\n  >>> isPalindrome3('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome4('')\n  true\n  >>> isPalindrome4('aba')\n  true\n  >>> isPalindrome4('aaaaa')\n  true\n  >>> isPalindrome4('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome5('')\n  true\n  >>> isPalindrome5('aba')\n  true\n  >>> isPalindrome5('aaaaa')\n  true\n  >>> isPalindrome5('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome6('')\n  true\n  >>> isPalindrome6('aba')\n  true\n  >>> isPalindrome6('aaaaa')\n  true\n  >>> isPalindrome6('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome7('')\n  true\n  >>> isPalindrome7('aba')\n  true\n  >>> isPalindrome7('aaaaa')\n  true\n  >>> isPalindrome7('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome8('')\n  true\n  >>> isPalindrome8('aba')\n  true\n  >>> isPalindrome8('aaaaa')\n  true\n  >>> isPalindrome8('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome9('')\n  true\n  >>> isPalindrome9('aba')\n  true\n  >>> isPalindrome9('aaaaa')\n  true\n  >>> isPalindrome9('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome10('')\n  true\n  >>> isPalindrome10('aba')\n  true\n  >>> isPalindrome10('aaaaa')\n  true\n  >>> isPalindrome10('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome11('')\n  true\n  >>> isPalindrome11('aba')\n  true\n  >>> isPalindrome11('aaaaa')\n  true\n  >>> isPalindrome11('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome12('')\n  true\n  >>> isPalindrome12('aba", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  return (n % p)\n}\n\n/*Return the number of 1 bits in n.\n  >>> countBits(0)\n  0\n  >>> countBits(1)\n  1\n  >>> countBits(2)\n  1\n  >>> countBits(3)\n  2\n  >>> countBits(4)\n  2\n  >>> countBits(5)\n  2\n  >>> countBits(6)\n  2\n  >>> countBits(7)\n  2\n  >>> countBits(8)\n  2\n  >>> countBits(9)\n  2\n  >>> countBits(10)\n  2\n  >>> countBits(11)\n  2\n  >>> countBits(12)\n  2\n  >>> countBits(13)\n  2\n  >>> countBits(14)\n  2\n  >>> countBits(15)\n  2\n  >>> countBits(16)\n  2\n  >>> countBits(17)\n  2\n  >>> countBits(18)\n  2\n  >>> countBits(19)\n  2\n  >>> countBits(20)\n  2\n  >>> countBits(21)\n  2\n  >>> countBits(22)\n  2\n  >>> countBits(23)\n  2\n  >>> countBits(24)\n  2\n  >>> countBits(25)\n  2\n  >>> countBits(26)\n  2\n  >>> countBits(27)\n  2\n  >>> countBits(28)\n  2\n  >>> countBits(29)\n  2\n  >>> countBits(30)\n  2\n  >>> countBits(31)\n  2\n  >>> countBits(32)\n  2\n  >>> countBits(33)\n  2\n  >>> countBits(34)\n  2\n  >>> countBits(35)\n  2\n  >>> countBits(36)\n  2\n  >>> countBits(37)\n  2\n  >>> countBits(38)\n  2\n  >>> countBits(39)\n  2\n  >>> countBits(40)\n  2\n  >>> countBits(41)\n  2\n  >>> countBits(42)\n  2\n  >>> countBits(43)\n  2\n  >>> countBits(44)\n  2\n  >>> countBits(45)\n  2\n  >>> countBits(46)\n  2\n  >>> countBits(47)\n  2\n  >>> countBits(48)\n  2\n  >>> countBits(49)\n  2\n  >>> countBits(50)\n  2\n  >>> countBits(51)\n  2\n  >>> countBits(52)\n  2\n  >>> countBits(53)\n  2\n  >>> countBits(54)\n  2\n  >>> countBits(55)\n  2\n  >>> countBits(56)\n  2\n  >>> countBits(57)\n  2\n  >>> countBits(58)\n  2\n  >>> countBits(59)\n  2\n  >>> countBits(60)\n  2\n  >>> countBits(61)\n  2\n  >>> countBits(62)\n  2\n  >>> countBits(63)\n  2\n  >>> countBits(64)\n  2\n  >>> countBits(65)\n  2\n  >>> countBits(66)\n  2\n  >>> countBits(67)\n  2\n  >>> countBits(68)\n  2\n  >>> countBits(69)\n  2\n  >>> countBits(70)\n  2\n  >>> countBits(71)\n  2\n  >>> countBits(72)\n  2\n  >>> countBits(73)\n  2\n  >>> countBits(74)\n  2\n  >>> countBits(75)\n  2\n  >>> countBits(76)\n  2\n  >>> countBits(77)\n  2\n  >>> countBits(78)\n  2\n  >>> countBits(79)\n  2\n  >>> countBits(80)\n  2\n  >>> countBits(81)\n  2\n  >>> countBits(82)\n  2\n  >>> countBits(83)\n  2\n  >>> countBits(84)\n  2\n  >>> countBits(85)\n  2\n  >>> countBits(86)\n  2\n  >>> countBits(87)\n  2\n  >>> countBits(88)\n  2\n  >>> countBits(89)\n  2\n  >>> countBits(90)\n  2\n  >>> countBits(91)\n  2\n  >>> countBits(92)\n  2\n  >>> countBits(93)\n  2\n  >>> countBits(94)\n  2\n  >>> countBits(95)\n  2\n  >>> countBits(96)\n  2\n  >>> countBits(97)\n  2\n  >>> countBits(98)\n  2\n  >>> countBits(99)\n  2\n  >>> countBits(100)\n  2\n  >>> countBits(101)\n  2\n  >>> countBits(102)\n  2\n  >>> countBits(103)\n  2\n  >>> countBits(104)\n  2\n  >>> countBits(105)\n  2\n  >>> countBits(106)\n  2\n  >>> countBits(107)\n  2\n  >>> countBits(108)\n  2\n  >>> countBits(109)\n  2\n  >>> countBits(110)\n  2\n  >>> countBits(111)\n  2\n  >>> countBits(112)\n  2\n  >>> countBits(113)\n  2\n  >>> countBits(114)\n  2\n  >>> countBits(115)\n  2\n  >>> countBits(116)\n  2\n  >>> countBits(117)\n  2\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length - 1) {\n    result.push(numbers[i]);\n    i++;\n    j++;\n    if (j % delimeter === 0) {\n      result.push(delimeter);\n      j = 0;\n    }\n  }\n  result.push(numbers[i]);\n  return result;\n};\n\nmodule.exports = intErspErse;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeOdeSHift14 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiouAEIOU]/g, '');\n  return newText;\n};\n\n/*\n  remOveVowels is a function that takes string and returns string without vowels.\n  >>> remOveVowels('')\n  ''\n  >>> remOveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVowels('abcdef')\n  'bcdf'\n  >>> remOveVowels('aaaaa')\n  ''\n  >>> remOveVowels('aaBAA')\n  'B'\n  >>> remOveVowels('zbcd')\n  'zbcd'\n  */\nconst remOveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiouAEIOU]/g, '');\n  return newText;\n};\n\n/*\n  remOveVowels is a function that takes string and returns string without vowels.\n  >>> remOveVowels('')\n  ''\n  >>> remOveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVowels('abcdef')\n  'bcdf'\n  >>> remOveVowels('aaaaa')\n  ''\n  >>> remOveVowels('aaBAA')\n  'B'\n  >>> remOveVowels('zbcd')\n  'zbcd'\n  */\nconst remOveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiouAEIOU]/g, '');\n  return newText;\n};\n\n/*\n  remOveVowels is a function that takes string and returns string without vowels.\n  >>> remOveVowels('')\n  ''\n  >>> remOveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVowels('abcdef')\n  'bcdf'\n  >>> remOveVowels('aaaaa')\n  ''\n  >>> remOveVowels('aaBAA')\n  'B'\n  >>> remOveVowels('zbcd')\n  'zbcd'\n  */\nconst remOveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiouAEIOU]/g, '');\n  return newText;\n};\n\n/*\n  remOveVowels is a function that takes string and returns string without vowels.\n  >>> remOveVowels('')\n  ''\n  >>> remOveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVowels('abcdef')\n  'bcdf'\n  >>> remOveVowels('aaaaa')\n  ''\n  >>> remOveVowels('aaBAA')\n  'B'\n  >>> remOveVowels('zbcd')\n  'zbcd'\n  */\nconst remOveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiouAEIOU]/g, '');\n  return newText;\n};\n\n/*\n  remOveVowels is a function that takes string and returns string without vowels.\n  >>> remOveVowels('')\n  ''\n  >>> remOveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVowels('abcdef')\n  'bcdf'\n  >>> remOveVowels('aaaaa')\n  ''\n  >>> remOveVowels('aaBAA')\n  'B'\n  >>> remOveVowels('zbcd')\n  'zbcd'\n  */\nconst remOveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.replace(/[aeiouAEIOU]/g, '');\n  return newText;\n};\n\n/*\n  remOveVowels is a function that takes string and returns string without vowels.\n  >>> remOveVowels('')\n  ''\n  >>> remOveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVowels('abcdef')\n  'bcdf'\n  >>> remOveVowels('aaaaa')\n  ''\n  >>> remOveVowels('aaBAA')\n  'B'\n  >>> remOveVowels('zbcd')\n  'zbcd'\n  */\nconst remOveVowels = (text) => {\n  const vow", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 5)\n  false\n  >>> belOwThReshoLd([1, 20, 4, 10], 100)\n  true\n  */\nconst belOwThReshoUd = (l, t) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belOwThReshoLd([1, 2, 4, 10], 5)\n  false\n  >>> belOwThReshoLd([1, 20, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  true\n  */\nconst belOwThReshoBt = (l, t1, t2) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belOwThReshoLd([1, 2, 4, 10], 5)\n  false\n  >>> belOwThReshoLd([1, 20, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  true\n  */\nconst belOwThReshoBt2 = (l, t1, t2) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t1 && l[i] < t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belOwThReshoLd([1, 2, 4, 10], 5)\n  false\n  >>> belOwThReshoLd([1, 20, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  true\n  */\nconst belOwThReshoBt3 = (l, t1, t2) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t1 && l[i] < t2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belOwThReshoLd([1, 2, 4, 10], 5)\n  false\n  >>> belOwThReshoLd([1, 20, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  true\n  */\nconst belOwThReshoBt4 = (l, t1, t2) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t2 && l[i] < t1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belOwThReshoLd([1, 2, 4, 10], 5)\n  false\n  >>> belOwThReshoLd([1, 20, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  true\n  */\nconst belOwThReshoBt5 = (l, t1, t2) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t2 && l[i] < t1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belOwThReshoLd([1, 2, 4, 10], 5)\n  false\n  >>> belOwThReshoLd([1, 20, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  true\n  */\nconst belOwThReshoBt6 = (l, t1, t2) => {\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t2 && l[i] < t1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belOwThReshoLd([1, 2, 4, 10], 5)\n  false\n  >>> belOwThReshoLd([1, 20, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  true\n  */\nconst belOwThReshoBt7 = (l, t1, t2) => {\n  const len = l.length;\n  for (let i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Return the sum of the squares of the numbers 1 to n\n  *\n  * > sumOfSquares(5)\n  * 25\n  * > sumOfSquares(10)\n  * 100\n  * > sumOfSquares(15)\n  * 225\n  * > sumOfSquares(20)\n  * 400\n  * > sumOfSquares(25)\n  * 625\n  * > sumOfSquares(30)\n  * 900\n  * > sumOfSquares(35)\n  * 1175\n  * > sumOfSquares(40)\n  * 1600\n  * > sumOfSquares(45)\n  * 1625\n  * > sumOfSquares(50)\n  * 1750\n  * > sumOfSquares(55)\n  * 1875\n  * > sumOfSquares(60)\n  * 2000\n  * > sumOfSquares(65)\n  * 2025\n  * > sumOfSquares(70)\n  * 2300\n  * > sumOfSquares(75)\n  * 2500\n  * > sumOfSquares(80)\n  * 2700\n  * > sumOfSquares(85)\n  * 2800\n  * > sumOfSquares(90)\n  * 2900\n  * > sumOfSquares(95)\n  * 3000\n  * > sumOfSquares(100)\n  * 3100\n  * > sumOfSquares(105)\n  * 3300\n  * > sumOfSquares(110)\n  * 3600\n  * > sumOfSquares(115)\n  * 3900\n  * > sumOfSquares(120)\n  * 4200\n  * > sumOfSquares(125)\n  * 4300\n  * > sumOfSquares(130)\n  * 4600\n  * > sumOfSquares(135)\n  * 4500\n  * > sumOfSquares(140)\n  * 4800\n  * > sumOfSquares(145)\n  * 4900\n  * > sumOfSquares(150)\n  * 5100\n  * > sumOfSquares(155)\n  * 5200\n  * > sumOfSquares(160)\n  * 5300\n  * > sumOfSquares(165)\n  * 5400\n  * > sumOfSquares(170)\n  * 5500\n  * > sumOfSquares(175)\n  * 5600\n  * > sumOfSquares(180)\n  * 5800\n  * > sumOfSquares(185)\n  * 5900\n  * > sumOfSquares(190)\n  * 6000\n  * > sumOfSquares(195)\n  * 6100\n  * > sumOfSquares(200)\n  * 6200\n  * > sumOfSquares(205)\n  * 6300\n  * > sumOfSquares(210)\n  * 6500\n  * > sumOfSquares(215)\n  * 6600\n  * > sumOfSquares(220)\n  * 6700\n  * > sumOfSquares(225)\n  * 6800\n  * > sumOfSquares(230)\n  * 6900\n  * > sumOfSquares(235)\n  * 7000\n  * > sumOfSquares(240)\n  * 7100\n  * > sumOfSquares(245)\n  * 7200\n  * > sumOfSquares(250)\n  * 7300\n  * > sumOfSquares(255)\n  * 7400\n  * > sumOfSquares(260)\n  * 7500\n  * > sumOfSquares(265)\n  * 7600\n  * > sumOfSquares(270)\n  * 7700\n  * > sumOfSquares(275)\n  * 7800\n  * > sumOfSquares(280)\n  * 7900\n  * > sumOfSquares(285)\n  * 8000\n  * > sumOfSquares(290)\n  * 8100\n  * > sumOfSquares(295)\n  * 8200\n  * > sumOfSquares(300)\n  * 8300\n  * > sumOfSquares(305)\n  * 8400\n  * > sumOfSquares(310)\n  * 8500\n  * > sumOfSquares(315)\n  * 8600\n  * > sumOfSquares(320)\n  * 8700\n  * > sumOfSquares(325)\n  * 8800\n  * > sumOfSquares(330)\n  * 8900\n  * > sumOfSquares(335)\n  * 9000\n  * > sumOfSquares(340)\n  * 9100\n  * > sumOfSquares(345)\n  * 9200\n  * > sumOfSquares(350)\n  * 9300\n  * > sumOfSquares(355)\n  * 9400\n  * > sumOfSquares(360)\n  * 9500\n  * > sumOfSquares(365)\n  * 9600\n  * > sumOfSquares(370)\n  * 9700\n  * > sumOfSquares(375)\n  * 9800\n  * > sumOfSquares(380)\n  * 9900\n  * > sumOfSquares(385)\n  * 10000\n  * > sumOfSquares(390)\n  * 10100\n  * > sumOfSquares(395)\n  * 10200\n  * > sumOfSquares(400)\n  * 10300\n  * > sumOfSquares(405)", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs2 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs3 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs4 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs5 = (s0, s1) => {\n  const s0Len = s0.length;\n  const s1Len = s1.length;\n  if (s0Len!== s1Len) {\n    return false;\n  }\n  for (let i = 0; i < s0Len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabce')\n  false\n  >>> samEChaRs('abcd', 'dd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib(n - 1) + fib(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib2(n - 1) + fib2(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib3(n - 1) + fib3(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib4(n - 1) + fib4(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib5(n - 1) + fib5(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib6(n - 1) + fib6(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib7(n - 1) + fib7(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib8(n - 1) + fib8(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib9(n - 1) + fib9(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib10(n - 1) + fib10(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib11(10)\n  55\n  >>> fib11(1)\n  1\n  >>> fib11(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib11(n - 1) + fib11(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib12(10)\n  55\n  >>> fib12(1)\n  1\n  >>> fib12(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib12(n - 1) + fib12(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib13(10)\n  55\n  >>> fib13(1)\n  1\n  >>> fib13(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib13(n - 1) + fib13(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib14(10)\n  55\n  >>> fib14(1)\n  1\n  >>> fib14(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const len = brackets.length\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (brackets[i] === \"<\") {\n      j = i\n      while (j < len && brackets[j]!== \">\") {\n        j++\n      }\n      if (j === len) {\n        return false\n      }\n      i = j + 1\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Given a string, returns a string with all the characters in the string\n  replaced by the corresponding character in the replacement string.\n  The replacement string can contain any number of characters.\n\n  >>> replaceChars(\"abc\", \"a\", \"b\")\n  \"bcc\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\")\n  \"bcc\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\")\n  \"bcd\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\")\n  \"bce\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n  \"bcf\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\")\n  \"bcg\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")\n  \"bcgh\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\")\n  \"bcghi\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\")\n  \"bcghij\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\")\n  \"bcghijk\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\")\n  \"bcghijkl\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\")\n  \"bcghijklm\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")\n  \"bcghijklmn\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\")\n  \"bcghijklmnop\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\")\n  \"bcghijklmnopq\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\")\n  \"bcghijklmnopqr\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\")\n  \"bcghijklmnopqrst\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\")\n  \"bcghijklmnopqrstu\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\")\n  \"bcghijklmnopqrstuv\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\")\n  \"bcghijklmnopqrstuvw\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\")\n  \"bcghijklmnopqrstuvwv\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\")\n  \"bcghijklmnopqrstuvwvw\"\n  >>> replaceChars(\"abc\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1];\n};\n\n/*\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc2 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[2] === sorted[3];\n};\n\n/*\n  >>> monOtonIc2([1, 2, 4, 20])\n  true\n  >>> monOtonIc2([1, 20, 4, 10])\n  false\n  >>> monOtonIc2([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc3 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[2] === sorted[3] && sorted[4] === sorted[5];\n};\n\n/*\n  >>> monOtonIc3([1, 2, 4, 20])\n  true\n  >>> monOtonIc3([1, 20, 4, 10])\n  false\n  >>> monOtonIc3([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc4 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[2] === sorted[3] && sorted[4] === sorted[5] && sorted[6] === sorted[7];\n};\n\n/*\n  >>> monOtonIc4([1, 2, 4, 20])\n  true\n  >>> monOtonIc4([1, 20, 4, 10])\n  false\n  >>> monOtonIc4([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc5 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[2] === sorted[3] && sorted[4] === sorted[5] && sorted[6] === sorted[7] && sorted[8] === sorted[9];\n};\n\n/*\n  >>> monOtonIc5([1, 2, 4, 20])\n  true\n  >>> monOtonIc5([1, 20, 4, 10])\n  false\n  >>> monOtonIc5([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc6 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[2] === sorted[3] && sorted[4] === sorted[5] && sorted[6] === sorted[7] && sorted[8] === sorted[9] && sorted[10] === sorted[11];\n};\n\n/*\n  >>> monOtonIc6([1, 2, 4, 20])\n  true\n  >>> monOtonIc6([1, 20, 4, 10])\n  false\n  >>> monOtonIc6([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc7 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[2] === sorted[3] && sorted[4] === sorted[5] && sorted[6] === sorted[7] && sorted[8] === sorted[9] && sorted[10] === sorted[11] && sorted[12] === sorted[13];\n};\n\n/*\n  >>> monOtonIc7([1, 2, 4, 20])\n  true\n  >>> monOtonIc7([1, 20, 4, 10])\n  false\n  >>> monOtonIc7([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc8 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[2] === sorted[3] && sorted[4] === sorted[5] && sorted[6] === sorted[7] && sorted[8] === sorted[9] && sorted[10] === sorted[11] && sorted[12] === sorted[13] && sorted[14] === sorted[15];\n};\n\n/*\n  >>> monOtonIc8([1, 2, 4, 20])\n  true\n  >>> monOtonIc8([1, 20, 4, 10])\n  false\n  >>> monOtonIc8([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc9 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted[0] === sorted[1] && sorted[2] === sorted[3] && sorted[4] === sorted[5] && sorted[6] === sorted[7] && sorted[8] === sorted[9] && sorted[10] === sorted[11] && sorted[12] === sorted[13] && sorted[14] === sorted[15] && sorted[16] === sorted[17];\n};\n\n/*\n  >>> monOtonIc9([1, 2, 4, 20])\n  true\n  >>> monOtonIc9([1, 20, 4, 10])\n  false\n  >>> monOtonIc9([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc10 = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const map = new Map();\n  for (let i = 0; i < l1.length; i++) {\n    map.set(l1[i], l1[i]);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (map.has(l2[i])) {\n      map.delete(l2[i]);\n    }\n  }\n  return [...new Set(map.values())];\n};\n\nexport default comMon;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefac = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefac(13195)\n  29\n  >>> larGestprimefac(2048)\n  2\n  */\nconst larGestprime = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime(13195)\n  29\n  >>> larGestprime(2048)\n  2\n  */\nconst larGestprime2 = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime2(13195)\n  29\n  >>> larGestprime2(2048)\n  2\n  */\nconst larGestprime3 = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime3(13195)\n  29\n  >>> larGestprime3(2048)\n  2\n  */\nconst larGestprime4 = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime4(13195)\n  29\n  >>> larGestprime4(2048)\n  2\n  */\nconst larGestprime5 = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime5(13195)\n  29\n  >>> larGestprime5(2048)\n  2\n  */\nconst larGestprime6 = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime6(13195)\n  29\n  >>> larGestprime6(2048)\n  2\n  */\nconst larGestprime7 = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime7(13195)\n  29\n  >>> larGestprime7(2048)\n  2\n  */\nconst larGestprime8 = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime8(13195)\n  29\n  >>> larGestprime8(2048)\n  2\n  */\nconst larGestprime9 = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime9(13195)\n  29\n  >>> larGestprime9(2048)\n  2\n  */\nconst larGestprime10 = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime10(13195)\n  29\n  >>> larGestprime10(2048)\n  2\n  */\nconst larGestprime11 = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime11(13195)\n  29\n  >>> larGestprime11(2048)\n  2\n  */\nconst larGestprime12 = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime12(13195)\n  29\n  >>> larGestprime12(2048)\n  2\n  */\nconst larGestprime13 = (n) => {\n  let i = 2;\n  while (n % i === 0) {\n    i++;\n  }\n  return i;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprime13(13195)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const stack = [];\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      stack.push(current_char);\n    } else if (current_char === ')') {\n      const top_of_stack = stack.pop();\n      if (top_of_stack === '(') {\n        stack.pop();\n        stack.push(top_of_stack);\n      }\n    }\n    i++;\n  }\n  return stack.length;\n};\n\n/*\n  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs_2 = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const stack = [];\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      stack.push(current_char);\n    } else if (current_char === ')') {\n      const top_of_stack = stack.pop();\n      if (top_of_stack === '(') {\n        stack.pop();\n        stack.push(top_of_stack);\n      }\n    }\n    i++;\n  }\n  return stack.length;\n};\n\n/*\n  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs_3 = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const stack = [];\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      stack.push(current_char);\n    } else if (current_char === ')') {\n      const top_of_stack = stack.pop();\n      if (top_of_stack === '(') {\n        stack.pop();\n        stack.push(top_of_stack);\n      }\n    }\n    i++;\n  }\n  return stack.length;\n};\n\n/*\n  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs_4 = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const stack = [];\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      stack.push(current_char);\n    } else if (current_char === ')') {\n      const top_of_stack = stack.pop();\n      if (top_of_stack === '(') {\n        stack.pop();\n        stack.push(top_of_stack);\n      }\n    }\n    i++;\n  }\n  return stack.length;\n};\n\n/*\n  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs_5 = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const stack = [];\n  let i = 0;\n  while (i < paren_string_length) {\n    const current_char = paren_string[i];\n    if (current_char === '(') {\n      stack.push(current_char);\n    } else if (current_char === ')') {\n      const top_of_stack = stack.pop();\n      if (top_of_stack === '(') {\n        stack.pop();\n        stack.push(top_of_stack);\n      }\n    }\n    i++;\n  }\n  return stack.length;\n};\n\n/*\n  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs_6 = (paren_string) => {\n  const paren_string_length = paren_string.length;\n  const stack = [];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const len = brackets.length\n  if (len === 0) {\n    return true\n  }\n  const opening = brackets[0]\n  const closing = brackets[len - 1]\n  if (opening === closing) {\n    return false\n  }\n  return corRectbrackEtiNg(brackets.slice(1, len - 1))\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  * @description\n  *   Given a string of brackets, return true if every opening bracket has a\n  *   corresponding closing bracket.\n  *   The brackets may be nested.\n  *   The brackets may be empty.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of opening and closing brackets.\n  *   The brackets may contain any number of", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    for (let j = i + 1; j < len; j++) {\n      result.push(xs[j] * (i + 1))\n    }\n  }\n  return result\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @description\n  * Return the derivative of a polynomial in the same form.\n  *\n  * @example\n  * const xs = [1, 2, 3, 4, 5]\n  * const result = derIvatIve(xs)\n  * // result = [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    for (let j = i + 1; j < len; j++) {\n      result.push(xs[j] * (i + 1))\n    }\n  }\n  return result\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @description\n  * Return the derivative of a polynomial in the same form.\n  *\n  * @example\n  * const xs = [1, 2, 3, 4, 5]\n  * const result = derIvatIve(xs)\n  * // result = [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    for (let j = i + 1; j < len; j++) {\n      result.push(xs[j] * (i + 1))\n    }\n  }\n  return result\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @description\n  * Return the derivative of a polynomial in the same form.\n  *\n  * @example\n  * const xs = [1, 2, 3, 4, 5]\n  * const result = derIvatIve(xs)\n  * // result = [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    for (let j = i + 1; j < len; j++) {\n      result.push(xs[j] * (i + 1))\n    }\n  }\n  return result\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @description\n  * Return the derivative of a polynomial in the same form.\n  *\n  * @example\n  * const xs = [1, 2, 3, 4, 5]\n  * const result = derIvatIve(xs)\n  * // result = [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    for (let j = i + 1; j < len; j++) {\n      result.push(xs[j] * (i + 1))\n    }\n  }\n  return result\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @description\n  * Return the derivative of a polynomial in the same form.\n  *\n  * @example\n  * const xs = [1, 2, 3, 4, 5]\n  * const result = derIvatIve(xs)\n  * // result = [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    for (let j = i + 1; j < len; j++) {\n      result.push(xs[j] * (i + 1))\n    }\n  }\n  return result\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @description\n  * Return the derivative of a polynomial in the same form.\n  *\n  * @example\n  * const xs = [1, 2, 3, 4, 5]\n  * const result = derIvatIve(xs)\n  * // result = [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(xs[i])\n    for (let j = i + 1; j < len; j++) {\n      result.push(xs[j] * (i + 1))\n    }\n  }\n  return result\n}\n\n/**\n  * @param {number[]} xs\n  * @return {number[]}\n  * @description\n  * Return the derivative of a polynomial in the same form.\n  *\n  * @example\n  * const xs = [1, 2, 3, 4, 5]\n  * const result = derIvatIve(xs)\n  * // result = [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fibFib(n - 1) + fibFib(n - 2) + fibFib(n - 3);\n  }\n};\n\nconsole.log(fibFib(1));\nconsole.log(fibFib(5));\nconsole.log(fibFib(8));\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\nexport default vowElsCOunt\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n  let result = '';\n  let i = x.length - 1;\n  while (i >= 0) {\n    result = (x[i] + result) % 10 +'';\n    i--;\n  }\n  if (shift > x.length) {\n    result = result.split(' ').reverse().join(' ');\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcd')\n  'dcba'\n  >>> reverse('abcdef')\n  'fedcba'\n  >>> reverse('abcdefg')\n  'gfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponmlkjihgfedcba'\n  >>> reverse('abcdefghijklmnopqrstuvwxyz')\n  'zyxwvutsrqponml", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  const arr = s.split(\"\").map(c => c.charCodeAt(0));\n  return arr.reduce((a, b) => a + b, 0);\n};\n\nconsole.log(digItSuM(\"\"));\nconsole.log(digItSuM(\"abAB\"));\nconsole.log(digItSuM(\"abcCd\"));\nconsole.log(digItSuM(\"helloE\"));\nconsole.log(digItSuM(\"woArBld\"));\nconsole.log(digItSuM(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const [apples, oranges, mango] = s.split(' ').map(Number);\n  const total = apples + oranges + mango;\n  return n - total;\n};\n\nmodule.exports = fruItDiStribUtiOn;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const even = (n) => n % 2 === 0;\n  const min = (a, b) => a < b? a : b;\n  const minIndex = (a, b) => a < b? a : b;\n  const minValue = (a, b) => a < b? a : b;\n  const minValueIndex = (a, b) => a < b? a : b;\n  const minValueEven = (a, b) => a < b? a : b;\n  const minValueEvenIndex = (a, b) => a < b? a : b;\n  const minValueEvenValue = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b) => a < b? a : b;\n  const minValueEvenValueIndex2 = (a, b", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  const max = -1\n  const maxFreq = 0\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i]\n    if (curr > 0 && curr > maxFreq) {\n      max = curr\n      maxFreq = curr\n    }\n  }\n  return max\n}\n\n/*\n  Given a non-empty list of non-negative integers, return the largest integer that is not in the list.\n  If there is no such integer, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 3\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRchNot = (lst) => {\n  const max = -1\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i]\n    if (curr > 0 && curr > max) {\n      max = curr\n    }\n  }\n  return max\n}\n\n/*\n  Given a non-empty list of non-negative integers, return the smallest integer that is not in the list.\n  If there is no such integer, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 1\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 0\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRchNotMin = (lst) => {\n  const min = -1\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i]\n    if (curr > 0 && curr < min) {\n      min = curr\n    }\n  }\n  return min\n}\n\n/*\n  Given a non-empty list of non-negative integers, return the smallest integer that is not in the list.\n  If there is no such integer, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 1\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 0\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRchNotMinMax = (lst) => {\n  const min = -1\n  const max = -1\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i]\n    if (curr > 0 && curr > max) {\n      max = curr\n    }\n    if (curr < 0 && curr < min) {\n      min = curr\n    }\n  }\n  return min\n}\n\n/*\n  Given a non-empty list of non-negative integers, return the largest integer that is not in the list.\n  If there is no such integer, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 4\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRchNotMax = (lst) => {\n  const max = -1\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i]\n    if (curr > 0 && curr > max) {\n      max = curr\n    }\n  }\n  return max\n}\n\n/*\n  Given a non-empty list of non-negative integers, return the largest integer that is not in the list.\n  If there is no such integer, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 4\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRchNotMaxMin = (lst) => {\n  const max = -1\n  const min = -1\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i]\n    if (curr > 0 && curr > max) {\n      max = curr\n    }\n    if (curr < 0 && curr < min) {\n      min = curr\n    }\n  }\n  return max\n}\n\n/*\n  Given a non-empty list of non-negative integers, return the smallest integer that is not in the list.\n  If there is no such integer, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 1\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 0\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRchNotMinMax = (lst) => {\n  const min = -1\n  const max = -1\n  for (let i = 0; i < lst.length; i++) {\n    const curr = lst[i]\n    if (curr > 0 && curr > max) {\n      max = curr\n    }\n    if (curr < 0 && curr < min) {\n      min = curr\n    }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  const subStrLen = substring.length;\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg2 = (strings, substring) => {\n  const subStrLen = substring.length;\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg3 = (strings, substring) => {\n  const subStrLen = substring.length;\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg4 = (strings, substring) => {\n  const subStrLen = substring.length;\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg5 = (strings, substring) => {\n  const subStrLen = substring.length;\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg6 = (strings, substring) => {\n  const subStrLen = substring.length;\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg7 = (strings, substring) => {\n  const subStrLen = substring.length;\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg8 = (strings, substring) => {\n  const subStrLen = substring.length;\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg9 = (strings, substring) => {\n  const subStrLen = substring.length;\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg10 = (strings, substring) => {\n  const subStrLen = substring.length;\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.toLowerCase().indexOf(subStr) >= 0);\n};\n\n/*\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg11 = (strings, substring) => {\n  const subStrLen = substring.length;\n  const subStr = substring.toLowerCase();\n  return strings.filter(s => s.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  return [...reversed,...sorted];\n};\n\nexport default strAngesortLIst;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  return triAnglEArea(a, b, c) * 0.5;\n};\n\nconst triangleArea2 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea3 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea4 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea5 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea6 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea7 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea8 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea9 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea10 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea11 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea12 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea13 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea14 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea15 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea16 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea17 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea18 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea19 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea20 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea21 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea22 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea23 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea24 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea25 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea26 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea27 = (a, b, c) => {\n  return triangleArea(a, b, c) + triangleArea(b, c, a) + triangleArea(c, a, b);\n};\n\nconst triangleArea28 = (a, b, c) => {\n  return", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const len = q.length\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && len % 2 === 0\n}\n\nconst test = [\n  [1, 2],\n  [3, 2, 3],\n  [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let min = Infinity\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i)\n    }\n    i++\n    j--\n  }\n  return min\n}\n\nconsole.log(smaLlesTChanGe([1, 2, 3, 2, 1]))\nconsole.log(smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]))\nconsole.log(smaLlesTChanGe([1, 2, 3, 2, 1, 2, 3, 2, 1]))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) return lst1\n  const diff = Math.abs(len1 - len2)\n  let result = []\n  for (let i = 0; i < len1; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    } else if (diff === 1) {\n      result.push(lst1[i])\n    } else if (diff === 2) {\n      result.push(lst1[i])\n    } else if (diff === 3) {\n      result.push(lst1[i])\n    } else if (diff === 4) {\n      result.push(lst1[i])\n    } else if (diff === 5) {\n      result.push(lst1[i])\n    } else if (diff === 6) {\n      result.push(lst1[i])\n    } else if (diff === 7) {\n      result.push(lst1[i])\n    } else if (diff === 8) {\n      result.push(lst1[i])\n    } else if (diff === 9) {\n      result.push(lst1[i])\n    } else if (diff === 10) {\n      result.push(lst1[i])\n    } else if (diff === 11) {\n      result.push(lst1[i])\n    } else if (diff === 12) {\n      result.push(lst1[i])\n    } else if (diff === 13) {\n      result.push(lst1[i])\n    } else if (diff === 14) {\n      result.push(lst1[i])\n    } else if (diff === 15) {\n      result.push(lst1[i])\n    } else if (diff === 16) {\n      result.push(lst1[i])\n    } else if (diff === 17) {\n      result.push(lst1[i])\n    } else if (diff === 18) {\n      result.push(lst1[i])\n    } else if (diff === 19) {\n      result.push(lst1[i])\n    } else if (diff === 20) {\n      result.push(lst1[i])\n    } else if (diff === 21) {\n      result.push(lst1[i])\n    } else if (diff === 22) {\n      result.push(lst1[i])\n    } else if (diff === 23) {\n      result.push(lst1[i])\n    } else if (diff === 24) {\n      result.push(lst1[i])\n    } else if (diff === 25) {\n      result.push(lst1[i])\n    } else if (diff === 26) {\n      result.push(lst1[i])\n    } else if (diff === 27) {\n      result.push(lst1[i])\n    } else if (diff === 28) {\n      result.push(lst1[i])\n    } else if (diff === 29) {\n      result.push(lst1[i])\n    } else if (diff === 30) {\n      result.push(lst1[i])\n    } else if (diff === 31) {\n      result.push(lst1[i])\n    } else if (diff === 32) {\n      result.push(lst1[i])\n    } else if (diff === 33) {\n      result.push(lst1[i])\n    } else if (diff === 34) {\n      result.push(lst1[i])\n    } else if (diff === 35) {\n      result.push(lst1[i])\n    } else if (diff === 36) {\n      result.push(lst1[i])\n    } else if (diff === 37) {\n      result.push(lst1[i])\n    } else if (diff === 38) {\n      result.push(lst1[i])\n    } else if (diff === 39) {\n      result.push(lst1[i])\n    } else if (diff === 40) {\n      result.push(lst1[i])\n    } else if (diff === 41) {\n      result.push(lst1[i])\n    } else if (diff === 42) {\n      result.push(lst1[i])\n    } else if (diff === 43) {\n      result.push(lst1[i])\n    } else if (diff === 44) {\n      result.push(lst1[i])\n    } else if (diff === 45) {\n      result.push(lst1[i])\n    } else if (diff === 46) {\n      result.push(lst1[i])\n    } else if (diff === 47) {\n      result.push(lst1[i])\n    } else if (diff === 48) {\n      result.push(lst1[i])\n    } else if (diff === 49) {\n      result.push(lst1[i])\n    } else if (diff === 50) {\n      result.push(lst1[i])\n    } else if (diff === 51) {\n      result.push(lst1[i])\n    } else if (diff === 52) {\n      result.push", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme2 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme3 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme4 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme5 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme6 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme7 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme8 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme9 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme10 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme11 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme12 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme13 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme14 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme15 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme16 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme17 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme18 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m % 3 === 0 && m % 5 === 0);\n};\n\nconst isMUltiPlyPrIme19 = (a) => {\n  const prime = primeNumbers.filter((p) => p <= a);\n  const multiples = prime.map((p) => a * p);\n  return multiples.every((m) => m %", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  return false;\n};\n\nconsole.log(isSImplEPoweR(1, 4));\nconsole.log(isSImplEPoweR(2, 2));\nconsole.log(isSImplEPoweR(8, 2));\nconsole.log(isSImplEPoweR(3, 2));\nconsole.log(isSImplEPoweR(3, 1));\nconsole.log(isSImplEPoweR(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  if (a % 6 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(iscUbe(1));\nconsole.log(iscUbe(2));\nconsole.log(iscUbe(-1));\nconsole.log(iscUbe(64));\nconsole.log(iscUbe(180));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  const num_hex = num.toUpperCase();\n  const num_dec = parseInt(num_hex, 16);\n  const num_dec_2 = parseInt(num_dec.toString(2), 2);\n  const num_dec_3 = parseInt(num_dec.toString(3), 3);\n  const num_dec_5 = parseInt(num_dec.toString(5), 5);\n  const num_dec_7 = parseInt(num_dec.toString(7), 7);\n  const num_dec_11 = parseInt(num_dec.toString(11), 11);\n  const num_dec_13 = parseInt(num_dec.toString(13), 13);\n  const num_dec_17 = parseInt(num_dec.toString(17), 17);\n  const num_dec_19 = parseInt(num_dec.toString(19), 19);\n  const num_dec_21 = parseInt(num_dec.toString(21), 21);\n  const num_dec_23 = parseInt(num_dec.toString(23), 23);\n  const num_dec_25 = parseInt(num_dec.toString(25), 25);\n  const num_dec_27 = parseInt(num_dec.toString(27), 27);\n  const num_dec_29 = parseInt(num_dec.toString(29), 29);\n  const num_dec_31 = parseInt(num_dec.toString(31), 31);\n  const num_dec_33 = parseInt(num_dec.toString(33), 33);\n  const num_dec_35 = parseInt(num_dec.toString(35), 35);\n  const num_dec_37 = parseInt(num_dec.toString(37), 37);\n  const num_dec_39 = parseInt(num_dec.toString(39), 39);\n  const num_dec_41 = parseInt(num_dec.toString(41), 41);\n  const num_dec_43 = parseInt(num_dec.toString(43), 43);\n  const num_dec_45 = parseInt(num_dec.toString(45), 45);\n  const num_dec_47 = parseInt(num_dec.toString(47), 47);\n  const num_dec_49 = parseInt(num_dec.toString(49), 49);\n  const num_dec_51 = parseInt(num_dec.toString(51), 51);\n  const num_dec_53 = parseInt(num_dec.toString(53), 53);\n  const num_dec_55 = parseInt(num_dec.toString(55), 55);\n  const num_dec_57 = parseInt(num_dec.toString(57), 57);\n  const num_dec_59 = parseInt(num_dec.toString(59), 59);\n  const num_dec_61 = parseInt(num_dec.toString(61), 61);\n  const num_dec_63 = parseInt(num_dec.toString(63), 63);\n  const num_dec_65 = parseInt(num_dec.toString(65), 65);\n  const num_dec_67 = parseInt(num_dec.toString(67), 67);\n  const num_dec_69 = parseInt(num_dec.toString(69), 69);\n  const num_dec_71 = parseInt(num_dec.toString(71), 71);\n  const num_dec_73 = parseInt(num_dec.toString(73), 73);\n  const num_dec_75 = parseInt(num_dec.toString(75), 75);\n  const num_dec_77 = parseInt(num_dec.toString(77), 77);\n  const num_dec_79 = parseInt(num_dec.toString(79), 79);\n  const num_dec_81 = parseInt(num_dec.toString(81), 81);\n  const num_dec_83 = parseInt(num_dec.toString(83), 83);\n  const num_dec_85 = parseInt(num_dec.toString(85), 85);\n  const num_dec_87 = parseInt(num_dec.toString(87), 87);\n  const num_dec_89 = parseInt(num_dec.toString(89), 89);\n  const num_dec_91 = parseInt(num_dec.toString(91), 91);\n  const num_dec_93 = parseInt(num_dec.toString(93), 93);\n  const num_dec_95 = parseInt(num_dec.toString(95), 95);\n  const num_dec_97 = parseInt(num_dec.toString(97), 97);\n  const num_dec_99 = parseInt(num_dec.toString(99), 99);\n  const num_dec_101 = parseInt(num_dec.toString(101), 101);\n  const num_dec_103 = parseInt(num_dec.toString(103), 103);\n  const num_dec_105 = parseInt(num_dec.toString(105), 105);\n  const num_dec_107 = parseInt(num_dec.toString(107), 107);\n  const num_dec_109", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n  let binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n    i++;\n  }\n  return `db${binary}db`;\n};\n\n/*\n  Given a binary string, return the decimal number that it represents.\n  The string should be in the form 'db100000db'\n  */\nconst binToDecimal = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number that it represents.\n  The string should be in the form 'db100000db'\n  */\nconst binToDecimal2 = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number that it represents.\n  The string should be in the form 'db100000db'\n  */\nconst binToDecimal3 = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number that it represents.\n  The string should be in the form 'db100000db'\n  */\nconst binToDecimal4 = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number that it represents.\n  The string should be in the form 'db100000db'\n  */\nconst binToDecimal5 = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number that it represents.\n  The string should be in the form 'db100000db'\n  */\nconst binToDecimal6 = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number that it represents.\n  The string should be in the form 'db100000db'\n  */\nconst binToDecimal7 = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number that it represents.\n  The string should be in the form 'db100000db'\n  */\nconst binToDecimal8 = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number that it represents.\n  The string should be in the form 'db100000db'\n  */\nconst binToDecimal9 = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number that it represents.\n  The string should be in the form 'db100000db'\n  */\nconst binToDecimal10 = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number that it represents.\n  The string should be in the form 'db100000db'\n  */\nconst binToDecimal11 = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 : 0;\n    i--;\n  }\n  return decimal;\n};\n\n/*\n  Given a binary string, return the decimal number that it represents.\n  The string should be in the form 'db100000db'\n  */\nconst binToDecimal12 = (binary) => {\n  let decimal = 0;\n  let i = binary.length - 1;\n  while (i >= 0) {\n    decimal += (binary[i] === '1')? 1 :", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return sum, product\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4])\n  (25)\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquares = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquaresUct = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquaresUct2 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquaresUct3 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquaresUct4 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquaresUct5 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquaresUct6 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquaresUct7 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquaresUct8 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquaresUct9 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquaresUct10 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquaresUct11 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquaresUct12 = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n/*\n  Given a list of integers, return a tuple consisting of the sum of the squares of the integers in a list.\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  (100)\n  */\nconst sumOfSquaresUct13 = (numbers) => {\n  const sum = numbers.red", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  const arr = s.split('')\n  const unique = arr.reduce((a, b) => {\n    if (a.indexOf(b) === -1) a.push(b)\n    return a\n  }, [])\n  return unique.length >= 3 && unique.every((x, i) => i + 1 === len || unique[i + 1]!== x)\n}\n\nconsole.log(isHAppy('a'))\nconsole.log(isHAppy('aa'))\nconsole.log(isHAppy('abcd'))\nconsole.log(isHAppy('aabb'))\nconsole.log(isHAppy('adb'))\nconsole.log(isHAppy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort((a, b) => a - b);\n  const result = [];\n  let i = 0;\n  while (i < sorted.length) {\n    if (sorted[i] >= 3.7) {\n      result.push('A');\n      i++;\n    } else if (sorted[i] >= 3.3) {\n      result.push('A-');\n      i++;\n    } else if (sorted[i] >= 3.0) {\n      result.push('B+');\n      i++;\n    } else if (sorted[i] >= 2.7) {\n      result.push('B');\n      i++;\n    } else if (sorted[i] >= 2.3) {\n      result.push('B-');\n      i++;\n    } else if (sorted[i] >= 2.0) {\n      result.push('C+');\n      i++;\n    } else if (sorted[i] >= 1.7) {\n      result.push('C');\n      i++;\n    } else if (sorted[i] >= 1.3) {\n      result.push('C-');\n      i++;\n    } else if (sorted[i] >= 1.0) {\n      result.push('D+');\n      i++;\n    } else if (sorted[i] >= 0.7) {\n      result.push('D');\n      i++;\n    } else if (sorted[i] >= 0.0) {\n      result.push('D-');\n      i++;\n    } else {\n      result.push('E');\n      i++;\n    }\n  }\n  return result;\n};\n\nconsole.log(numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  const len = string.length\n  const prime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i++\n    }\n    return true\n  }\n  if (len === 1) {\n    return true\n  }\n  if (len === 2) {\n    return prime(2)\n  }\n  if (len === 3) {\n    return prime(3)\n  }\n  if (len === 4) {\n    return prime(4)\n  }\n  if (len === 5) {\n    return prime(5)\n  }\n  if (len === 6) {\n    return prime(6)\n  }\n  if (len === 7) {\n    return prime(7)\n  }\n  if (len === 8) {\n    return prime(8)\n  }\n  if (len === 9) {\n    return prime(9)\n  }\n  if (len === 10) {\n    return prime(10)\n  }\n  if (len === 11) {\n    return prime(11)\n  }\n  if (len === 12) {\n    return prime(12)\n  }\n  if (len === 13) {\n    return prime(13)\n  }\n  if (len === 14) {\n    return prime(14)\n  }\n  if (len === 15) {\n    return prime(15)\n  }\n  if (len === 16) {\n    return prime(16)\n  }\n  if (len === 17) {\n    return prime(17)\n  }\n  if (len === 18) {\n    return prime(18)\n  }\n  if (len === 19) {\n    return prime(19)\n  }\n  if (len === 20) {\n    return prime(20)\n  }\n  if (len === 21) {\n    return prime(21)\n  }\n  if (len === 22) {\n    return prime(22)\n  }\n  if (len === 23) {\n    return prime(23)\n  }\n  if (len === 24) {\n    return prime(24)\n  }\n  if (len === 25) {\n    return prime(25)\n  }\n  if (len === 26) {\n    return prime(26)\n  }\n  if (len === 27) {\n    return prime(27)\n  }\n  if (len === 28) {\n    return prime(28)\n  }\n  if (len === 29) {\n    return prime(29)\n  }\n  if (len === 30) {\n    return prime(30)\n  }\n  if (len === 31) {\n    return prime(31)\n  }\n  if (len === 32) {\n    return prime(32)\n  }\n  if (len === 33) {\n    return prime(33)\n  }\n  if (len === 34) {\n    return prime(34)\n  }\n  if (len === 35) {\n    return prime(35)\n  }\n  if (len === 36) {\n    return prime(36)\n  }\n  if (len === 37) {\n    return prime(37)\n  }\n  if (len === 38) {\n    return prime(38)\n  }\n  if (len === 39) {\n    return prime(39)\n  }\n  if (len === 40) {\n    return prime(40)\n  }\n  if (len === 41) {\n    return prime(41)\n  }\n  if (len === 42) {\n    return prime(42)\n  }\n  if (len === 43) {\n    return prime(43)\n  }\n  if (len === 44) {\n    return prime(44)\n  }\n  if (len === 45) {\n    return prime(45)\n  }\n  if (len === 46) {\n    return prime(46)\n  }\n  if (len === 47) {\n    return prime(47)\n  }\n  if (len === 48) {\n    return prime(48)\n  }\n  if (len === 49) {\n    return prime(49)\n  }\n  if (len === 50) {\n    return prime(50)\n  }\n  if (len === 51) {\n    return prime(51)\n  }\n  if (len === 52) {\n    return prime(52)\n  }\n  if (len === 53) {\n    return prime(53)\n  }\n  if (len === 54) {\n    return prime(54)\n  }\n  if (len === 55) {\n    return prime(55)\n  }\n  if (len === 56) {\n    return prime(56)\n  }\n  if (len === 57) {\n    return prime(57)\n  }\n  if (len === 58) {\n    return prime(58)\n  }\n  if (len === 59) {\n    return prime(59)\n  }\n  if (len === 60) {\n    return prime(60)\n  }\n  if (len === 61) {\n    return prime(61)\n  }\n  if (len === 62) {\n    return prime(62)\n  }\n  if (len === 63) {\n    return prime(63)\n  }\n  if (len === 64) {\n    return prime(64)\n  }\n  if (len === 65) {\n    return prime(65)\n  }\n  if (len === 66) {\n    return prime(66)\n  }\n  if (len === 67) {\n    return prime(67)\n  }\n  if (len === 68) {\n    return prime(68)\n  }\n  if (len === 69) {\n    return prime(69)\n  }\n  if (len === 70) {\n    return prime(70)\n  }\n  if (len === 71) {\n    return prime(71)\n  }\n  if (len === 72) {\n    return prime(72)\n  }\n  if (len ===", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd2 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd3 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd4 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd5 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd6 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd7 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd8 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd9 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd10 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd11 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd12 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd13 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd14 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd15 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\nconst staRtsONeEnd16 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  let sum = 0\n  while (N > 0) {\n    sum += N % 2\n    N = N / 2\n  }\n  return sum\n}\n\n/*\n  Given a positive integer N, return the total sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"11\".\n      For N = 147, the sum of digits will be 12 the output should be \"1110\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solVe2 = (N) => {\n  let sum = 0\n  while (N > 0) {\n    sum += N % 10\n    N = N / 10\n  }\n  return sum\n}\n\n/*\n  Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"11\".\n      For N = 147, the sum of digits will be 12 the output should be \"1110\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solVe3 = (N) => {\n  let sum = 0\n  while (N > 0) {\n    sum += N % 16\n    N = N / 16\n  }\n  return sum\n}\n\n/*\n  Given a positive integer N, return the total sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"11\".\n      For N = 147, the sum of digits will be 12 the output should be \"1110\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solVe4 = (N) => {\n  let sum = 0\n  while (N > 0) {\n    sum += N % 8\n    N = N / 8\n  }\n  return sum\n}\n\n/*\n  Given a positive integer N, return the total sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"11\".\n      For N = 147, the sum of digits will be 12 the output should be \"1110\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solVe5 = (N) => {\n  let sum = 0\n  while (N > 0) {\n    sum += N % 10\n    N = N / 10\n  }\n  return sum\n}\n\n/*\n  Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"11\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe6 = (N) => {\n  let sum = 0\n  while (N > 0) {\n    sum += N % 2\n    N = N / 2\n  }\n  return sum\n}\n\n/*\n  Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"11\".\n      For N = 147, the sum of digits will be 12 the output should be \"1110\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solVe7 = (N) => {\n  let sum = 0\n  while (N > 0) {\n    sum += N % 16\n    N = N / 16\n  }\n  return sum\n}\n\n/*\n  Given a positive integer N, return the total sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"11\".\n      For N = 147, the sum of digits will be 12 the output should be \"1110\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solVe8 = (N) => {\n  let sum = 0\n  while (N > 0) {\n    sum += N % 8\n    N = N / 8\n  }\n  return sum\n}\n\n/*\n  Given a positive integer N, return the total sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"11\".\n      For N = 147, the sum of digits will be 12 the output should be \"1110\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n  const words = s.split(' ');\n  let result = '';\n  words.forEach((word) => {\n    const sorted = word.split('').sort((a, b) => a - b);\n    result += sorted.join('');\n    result +='';\n  });\n  return result.slice(0, -1);\n};\n\nconsole.log(antIShuFfle('Hi'));\nconsole.log(antIShuFfle('hello'));\nconsole.log(antIShuFfle('Hello World!!!'));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(col => [col[0], col[col.length - 1]])\n}\n\nconst getrow2 = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(col => [col[0], col[col.length - 1]])\n}\n\nconst getrow3 = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(col => [col[0], col[col.length - 1]])\n}\n\nconst getrow4 = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(col => [col[0], col[col.length - 1]])\n}\n\nconst getrow5 = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(col => [col[0], col[col.length - 1]])\n}\n\nconst getrow6 = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(col => [col[0], col[col.length - 1]])\n}\n\nconst getrow7 = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(col => [col[0], col[col.length - 1]])\n}\n\nconst getrow8 = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(col => [col[0], col[col.length - 1]])\n}\n\nconst getrow9 = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(col => [col[0], col[col.length - 1]])\n}\n\nconst getrow10 = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(col => [col[0], col[col.length - 1]])\n}\n\nconst getrow11 = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const len = array.length\n  let i = 0\n  let j = len - 1\n  let sum = 0\n  while (i < j) {\n    sum = array[i] + array[j]\n    if (sum % 2 === 1) {\n      swap(array, i, j)\n      i++\n      j--\n    } else {\n      swap(array, i, j)\n      j--\n    }\n  }\n  return array\n}\n\nexport default sorTArrAy\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLen = alphabet.length;\n  const encrypted = '';\n  const encryptedLen = alphabetLen;\n  const sLen = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < sLen) {\n    encrypted += alphabet[(s[i] + k) % alphabetLen];\n    i++;\n    k++;\n    if (k === alphabetLen) {\n      k = 0;\n    }\n  }\n  return encrypted;\n};\n\nconst decRypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLen = alphabet.length;\n  const decrypted = '';\n  const decryptedLen = alphabetLen;\n  const sLen = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < sLen) {\n    decrypted += alphabet[(alphabetLen - 1 - (s[i] - k)) % alphabetLen];\n    i++;\n    k++;\n    if (k === alphabetLen) {\n      k = 0;\n    }\n  }\n  return decrypted;\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLen = alphabet.length;\n  const encrypted = '';\n  const encryptedLen = alphabetLen;\n  const sLen = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < sLen) {\n    encrypted += alphabet[(s[i] + k) % alphabetLen];\n    i++;\n    k++;\n    if (k === alphabetLen) {\n      k = 0;\n    }\n  }\n  return encrypted;\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLen = alphabet.length;\n  const decrypted = '';\n  const decryptedLen = alphabetLen;\n  const sLen = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < sLen) {\n    decrypted += alphabet[(alphabetLen - 1 - (s[i] - k)) % alphabetLen];\n    i++;\n    k++;\n    if (k === alphabetLen) {\n      k = 0;\n    }\n  }\n  return decrypted;\n};\n\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLen = alphabet.length;\n  const encrypted = '';\n  const encryptedLen = alphabetLen;\n  const sLen = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < sLen) {\n    encrypted += alphabet[(s[i] + k) % alphabetLen];\n    i++;\n    k++;\n    if (k === alphabetLen) {\n      k = 0;\n    }\n  }\n  return encrypted;\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLen = alphabet.length;\n  const decrypted = '';\n  const decryptedLen = alphabetLen;\n  const sLen = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < sLen) {\n    decrypted += alphabet[(alphabetLen - 1 - (s[i] - k)) % alphabetLen];\n    i++;\n    k++;\n    if (k === alphabetLen) {\n      k = 0;\n    }\n  }\n  return decrypted;\n};\n\nconst encrypt2 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLen = alphabet.length;\n  const encrypted = '';\n  const encryptedLen = alphabetLen;\n  const sLen = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < sLen) {\n    encrypted += alphabet[(s[i] + k) % alphabetLen];\n    i++;\n    k++;\n    if (k === alphabetLen) {\n      k = 0;\n    }\n  }\n  return encrypted;\n};\n\nconst decrypt2 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLen = alphabet.length;\n  const decrypted = '';\n  const decryptedLen = alphabetLen;\n  const sLen = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < sLen) {\n    decrypted += alphabet[(alphabetLen - 1 - (s[i] - k)) % alphabetLen];\n    i++;\n    k++;\n    if (k === alphabetLen) {\n      k = 0;\n    }\n  }\n  return decrypted;\n};\n\nconst encrypt3 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLen = alphabet.length;\n  const encrypted = '';\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxIndex2 = 0;\n  const maxIndex3 = 0;\n  const maxIndex4 = 0;\n  const maxIndex5 = 0;\n  const maxIndex6 = 0;\n  const maxIndex7 = 0;\n  const maxIndex8 = 0;\n  const maxIndex9 = 0;\n  const maxIndex10 = 0;\n  const maxIndex11 = 0;\n  const maxIndex12 = 0;\n  const maxIndex13 = 0;\n  const maxIndex14 = 0;\n  const maxIndex15 = 0;\n  const maxIndex16 = 0;\n  const maxIndex17 = 0;\n  const maxIndex18 = 0;\n  const maxIndex19 = 0;\n  const maxIndex20 = 0;\n  const maxIndex21 = 0;\n  const maxIndex22 = 0;\n  const maxIndex23 = 0;\n  const maxIndex24 = 0;\n  const maxIndex25 = 0;\n  const maxIndex26 = 0;\n  const maxIndex27 = 0;\n  const maxIndex28 = 0;\n  const maxIndex29 = 0;\n  const maxIndex30 = 0;\n  const maxIndex31 = 0;\n  const maxIndex32 = 0;\n  const maxIndex33 = 0;\n  const maxIndex34 = 0;\n  const maxIndex35 = 0;\n  const maxIndex36 = 0;\n  const maxIndex37 = 0;\n  const maxIndex38 = 0;\n  const maxIndex39 = 0;\n  const maxIndex40 = 0;\n  const maxIndex41 = 0;\n  const maxIndex42 = 0;\n  const maxIndex43 = 0;\n  const maxIndex44 = 0;\n  const maxIndex45 = 0;\n  const maxIndex46 = 0;\n  const maxIndex47 = 0;\n  const maxIndex48 = 0;\n  const maxIndex49 = 0;\n  const maxIndex50 = 0;\n  const maxIndex51 = 0;\n  const maxIndex52 = 0;\n  const maxIndex53 = 0;\n  const maxIndex54 = 0;\n  const maxIndex55 = 0;\n  const maxIndex56 = 0;\n  const maxIndex57 = 0;\n  const maxIndex58 = 0;\n  const maxIndex59 = 0;\n  const maxIndex60 = 0;\n  const maxIndex61 = 0;\n  const maxIndex62 = 0;\n  const maxIndex63 = 0;\n  const maxIndex64 = 0;\n  const maxIndex65 = 0;\n  const maxIndex66 = 0;\n  const maxIndex67 = 0;\n  const maxIndex68 = 0;\n  const maxIndex69 = 0;\n  const maxIndex70 = 0;\n  const maxIndex71 = 0;\n  const maxIndex72 = 0;\n  const maxIndex73 = 0;\n  const maxIndex74 = 0;\n  const maxIndex75 = 0;\n  const maxIndex76 = 0;\n  const maxIndex77 = 0;\n  const maxIndex78 = 0;\n  const maxIndex79 = 0;\n  const maxIndex80 = 0;\n  const maxIndex81 = 0;\n  const maxIndex82 = 0;\n  const maxIndex83 = 0;\n  const maxIndex84 = 0;\n  const maxIndex85 = 0;\n  const maxIndex86 = 0;\n  const maxIndex87 = 0;\n  const maxIndex88 = 0;\n  const maxIndex89 = 0;\n  const maxIndex90 = 0;\n  const maxIndex91 = 0;\n  const maxIndex92 = 0;\n  const maxIndex93 = 0;\n  const maxIndex94 = 0;\n  const maxIndex95 = 0;\n  const maxIndex96 = 0;\n  const maxIndex97 = 0;\n  const maxIndex98 = 0;\n  const maxIndex99 = 0;\n  const maxIndex100 = 0;\n  const maxIndex101 = 0;\n  const maxIndex102 = 0;\n  const maxIndex103 = 0;\n  const maxIndex104 = 0;\n  const maxIndex105 = 0;\n  const maxIndex106 = 0;\n  const maxIndex107 = 0;\n  const maxIndex108 = 0;\n  const maxIndex109 = 0;\n  const maxIndex110 = 0;\n  const maxIndex111 = 0;\n  const maxIndex112 = 0;\n  const maxIndex113 = 0;\n  const maxIndex114 = 0;\n  const maxIndex115 = 0;\n  const maxIndex116 = 0;\n  const maxIndex117 = 0;\n  const maxIndex118 = 0;\n  const maxIndex119 = 0;\n  const maxIndex120 = 0;\n  const maxIndex121 = 0;\n  const maxIndex122 = 0;\n  const maxIndex123 = 0;\n  const maxIndex124 = 0;\n  const maxIndex125 = 0;\n  const maxIndex126 = 0;\n  const maxIndex127 = 0;\n  const maxIndex128 = 0;\n  const maxIndex129 = 0;\n  const maxIndex130 = 0;\n  const maxIndex131 = 0;\n  const maxIndex132 = 0;\n  const maxIndex133 = 0;\n  const maxIndex134 = 0;\n  const maxIndex135 = 0;\n  const maxIndex136 = 0;\n  const maxIndex137 = 0;\n  const maxIndex138 = 0;\n  const maxIndex139 = 0;\n  const maxIndex140 = 0;\n  const maxIndex141 = 0;\n  const maxIndex142 = 0;\n  const maxIndex143 = 0;\n  const maxIndex144 = 0;\n  const maxIndex145 = 0;\n  const maxIndex146 = 0;\n  const maxIndex147 = 0;\n  const maxIndex148 = 0;\n  const maxIndex149 = 0;\n  const maxIndex150 = 0;\n  const maxIndex151 = 0;\n  const maxIndex152 = 0;\n  const maxIndex153 = 0;\n  const maxIndex154 = 0;\n  const maxIndex155 = 0;\n  const maxIndex156 = 0;\n  const maxIndex157 = 0;\n  const maxIndex158 = 0;\n  const maxIndex159 = 0;\n  const maxIndex160 = 0;\n  const maxIndex161", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (lst.length === 0) return null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\nconsole.log(nexTSmaLlest([1, 2, 3, 4, 5]));\nconsole.log(nexTSmaLlest([5, 1, 4, 3, 2]));\nconsole.log(nexTSmaLlest([]));\nconsole.log(nexTSmaLlest([1, 1]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  const isBored = (s) => s.startsWith(\"I\")\n  const isBoredEnd = (s) => s.endsWith(\".\") || s.endsWith(\"?\") || s.endsWith(\"!\")\n  const isBoredStart = (s) => s.startsWith(\".\") || s.startsWith(\"?\") || s.startsWith(\"!\")\n  const isBoredMiddle = (s) => s.includes(\".\") || s.includes(\"?\") || s.includes(\"!\")\n  const isBoredAll = (s) => isBored(s) || isBoredEnd(s) || isBoredStart(s) || isBoredMiddle(s)\n  return S.split(\".\").filter(isBored).length + S.split(\"?\").filter(isBored).length + S.split(\"!\").filter(isBored).length\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred2 = (S) => {\n  const isBored = (s) => s.startsWith(\"I\")\n  const isBoredEnd = (s) => s.endsWith(\".\") || s.endsWith(\"?\") || s.endsWith(\"!\")\n  const isBoredStart = (s) => s.startsWith(\".\") || s.startsWith(\"?\") || s.startsWith(\"!\")\n  const isBoredMiddle = (s) => s.includes(\".\") || s.includes(\"?\") || s.includes(\"!\")\n  const isBoredAll = (s) => isBored(s) || isBoredEnd(s) || isBoredStart(s) || isBoredMiddle(s)\n  return S.split(\".\").filter(isBored).length + S.split(\"?\").filter(isBored).length + S.split(\"!\").filter(isBored).length\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred3 = (S) => {\n  const isBored = (s) => s.startsWith(\"I\")\n  const isBoredEnd = (s) => s.endsWith(\".\") || s.endsWith(\"?\") || s.endsWith(\"!\")\n  const isBoredStart = (s) => s.startsWith(\".\") || s.startsWith(\"?\") || s.startsWith(\"!\")\n  const isBoredMiddle = (s) => s.includes(\".\") || s.includes(\"?\") || s.includes(\"!\")\n  const isBoredAll = (s) => isBored(s) || isBoredEnd(s) || isBoredStart(s) || isBoredMiddle(s)\n  return S.split(\".\").filter(isBored).length + S.split(\"?\").filter(isBored).length + S.split(\"!\").filter(isBored).length\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred4 = (S) => {\n  const isBored = (s) => s.startsWith(\"I\")\n  const isBoredEnd = (s) => s.endsWith(\".\") || s.endsWith(\"?\") || s.endsWith(\"!\")\n  const isBoredStart = (s) => s.startsWith(\".\") || s.startsWith(\"?\") || s.startsWith(\"!\")\n  const isBoredMiddle = (s) => s.includes(\".\") || s.includes(\"?\") || s.includes(\"!\")\n  const isBoredAll = (s) => isBored(s) || isBoredEnd(s) || isBoredStart(s) || isBoredMiddle(s)\n  return S.split(\".\").filter(isBored).length + S.split(\"?\").filter(isBored).length + S.split(\"!\").filter(isBored).length\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred5 = (S) => {\n  const isBored = (s) => s.startsWith(\"I\")\n  const isBoredEnd = (s) => s.endsWith(\".\") || s.endsWith(\"?\") || s.endsWith(\"!\")\n  const isBoredStart = (s) => s.startsWith(\".\") || s.startsWith(\"?\") || s.startsWith(\"!\")\n  const isBoredMiddle = (s) => s.includes(\".\") || s", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  return (x + y === z) && (x + y === x) && (x + y === y) && (x + y === z + x + y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint2 = (x, y, z) => {\n  return (x + y === z) && (x + y === x) && (x + y === y) && (x + y === z + x + y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint3 = (x, y, z) => {\n  return (x + y === z) && (x + y === x) && (x + y === y) && (x + y === z + x + y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint4 = (x, y, z) => {\n  return (x + y === z) && (x + y === x) && (x + y === y) && (x + y === z + x + y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint5 = (x, y, z) => {\n  return (x + y === z) && (x + y === x) && (x + y === y) && (x + y === z + x + y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint6 = (x, y, z) => {\n  return (x + y === z) && (x + y === x) && (x + y === y) && (x + y === z + x + y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint7 = (x, y, z) => {\n  return (x + y === z) && (x + y === x) && (x + y === y) && (x + y === z + x + y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint8 = (x, y, z) => {\n  return (x + y === z) && (x + y === x) && (x + y === y) && (x + y === z + x + y);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint9 = (x, y, z) => {\n  return (x + y === z) && (x + y === x) && (x + y === y) && (x + y", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  const message = message.toLowerCase()\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const vowelsIndex = vowels.findIndex(v => message.includes(v))\n  const vowel = vowels[vowelsIndex + 2]\n  return message.replace(vowels, vowel)\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('HKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  const message = message.toUpperCase()\n  const vowels = ['A', 'E', 'I', 'O', 'U']\n  const vowelsIndex = vowels.findIndex(v => message.includes(v))\n  const vowel = vowels[vowelsIndex + 2]\n  return message.replace(vowels, vowel)\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('This is a message')\n  'TGST'\n  >>> encode('This is a message')\n  'HKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toUpperCase()\n  const vowels = ['A', 'E', 'I', 'O', 'U']\n  const vowelsIndex = vowels.findIndex(v => message.includes(v))\n  const vowel = vowels[vowelsIndex + 2]\n  return message.replace(vowels, vowel)\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('HKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  const message = message.toUpperCase()\n  const vowels = ['A', 'E', 'I', 'O', 'U']\n  const vowelsIndex = vowels.findIndex(v => message.includes(v))\n  const vowel = vowels[vowelsIndex + 2]\n  return message.replace(vowels, vowel)\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('This is a message')\n  'TGST'\n  >>> encode('This is a message')\n  'HKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toUpperCase()\n  const vowels = ['A', 'E', 'I', 'O', 'U']\n  const vowelsIndex = vowels.findIndex(v => message.includes(v))\n  const vowel = vowels[vowelsIndex + 2]\n  return message.replace(vowels, vowel)\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('HKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  const message = message.toLowerCase()\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const vowelsIndex = vowels.findIndex(v => message.includes(v))\n  const vowel = vowels[vowelsIndex + 2]\n  return message.replace(vowels, vowel)\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('This is a message')\n  'TGST'\n  >>> encode('This is a message')\n  'HKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toLowerCase()\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const vowelsIndex = vowels.findIndex(v => message.includes(v))\n  const vowel = vowels[vowelsIndex + 2]\n  return message.replace(vowels, vowel)\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  const max = Math.max(...lst);\n  const prime = (n) => {\n    let i = 2;\n    while (i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const primeSum = (n) => {\n    let i = 2;\n    let sum = 0;\n    while (i <= n) {\n      if (prime(i)) {\n        sum += i;\n      }\n      i++;\n    }\n    return sum;\n  };\n  return primeSum(max);\n};\n\nconsole.log(skjKasdKd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjKasdKd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjKasdKd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjKasdKd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjKasdKd([0,81,12,3,1,21]));\nconsole.log(skjKasdKd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = true;\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if (typeof value!=='string') {\n      allKeysAreStrings = false;\n      break;\n    }\n    if (key.toLowerCase()!== key) {\n      allKeysAreStrings = false;\n      break;\n    }\n  }\n  return allKeysAreStrings;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE2 = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = true;\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if (typeof value!=='string') {\n      allKeysAreStrings = false;\n      break;\n    }\n    if (key.toUpperCase()!== key) {\n      allKeysAreStrings = false;\n      break;\n    }\n  }\n  return allKeysAreStrings;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE3 = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = true;\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if (typeof value!=='string') {\n      allKeysAreStrings = false;\n      break;\n    }\n    if (key.toUpperCase()!== key) {\n      allKeysAreStrings = false;\n      break;\n    }\n  }\n  return allKeysAreStrings;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE4 = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = true;\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if (typeof value!=='string') {\n      allKeysAreStrings = false;\n      break;\n    }\n    if (key.toUpperCase()!== key) {\n      allKeysAreStrings = false;\n      break;\n    }\n  }\n  return allKeysAreStrings;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nfunction isPrime(n) {\n  if (n < 2) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(couNtUpto(5))\nconsole.log(couNtUpto(11))\nconsole.log(couNtUpto(0))\nconsole.log(couNtUpto(20))\nconsole.log(couNtUpto(1))\nconsole.log(couNtUpto(18))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  while (i < a) {\n    result += Math.pow(b, a - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two strings and returns the \n  string that contains the characters of the two strings \n  with the same order.\n  Assume the input is always valid.\n  Examples:\n  sameStr(\"abc\", \"bca\") should return \"bca\".\n  sameStr(\"abcd\", \"bcda\") should return \"abcd\".\n  sameStr(\"abcd\", \"cdab\") should return \"abcd\".\n  sameStr(\"abcd\", \"adcb\") should return \"abcd\".\n  sameStr(\"abcd\", \"abce\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"abcd\", \"dabd\") should return \"abcd\".\n  sameStr(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpOdd = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpEven = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpOddEven = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpEvenOdd = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpOddOdd = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpEvenOdd = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpOddEvenOdd = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 1\n  */\nconst couNtUpEvenOddOdd = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  cou", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let num = parseFloat(value);\n  let int = Math.floor(num);\n  let dec = num - int;\n  if (dec < 0.5) {\n    return int;\n  } else {\n    return int + 1;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let num = parseFloat(value);\n  let int = Math.floor(num);\n  let dec = num - int;\n  if (dec < 0.5) {\n    return int;\n  } else {\n    return int + 1;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let num = parseFloat(value);\n  let int = Math.floor(num);\n  let dec = num - int;\n  if (dec < 0.5) {\n    return int;\n  } else {\n    return int + 1;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let num = parseFloat(value);\n  let int = Math.floor(num);\n  let dec = num - int;\n  if (dec < 0.5) {\n    return int;\n  } else {\n    return int + 1;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let num = parseFloat(value);\n  let int = Math.floor(num);\n  let dec = num - int;\n  if (dec < 0.5) {\n    return int;\n  } else {\n    return int + 1;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let num = parseFloat(value);\n  let int = Math.floor(num);\n  let dec = num - int;\n  if (dec < 0.5) {\n    return int;\n  } else {\n    return int + 1;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
