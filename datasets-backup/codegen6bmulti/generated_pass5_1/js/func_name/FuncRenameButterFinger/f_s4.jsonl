{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const diff = (numbers[0] - numbers[1])\n  for (let i = 2; i < len; i++) {\n    const diff2 = (numbers[i] - numbers[i - 1])\n    if (Math.abs(diff2) < threshold) return true\n    diff = diff + diff2\n  }\n  return false\n}\n\n/*\n  Given a list of numbers, return the median.\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  >>> median([1, 2, 3, 4, 5, 6])\n  4.0\n  >>> median([1, 2, 3, 4, 5, 6, 7])\n  5.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8])\n  6.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  7.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  8.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  9.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  10.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  11.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  12.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  13.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  14.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  15.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  16.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  17.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  18.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  20.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  21.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  22.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  23.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  24.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  25.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  26.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  27.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  28.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  29.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  30.0\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  const stack = []\n  const output = []\n  const stack_index = 0\n  const paren_index = 0\n  const paren_string_length = paren_string.length\n  const paren_string_char = paren_string.charAt(paren_index)\n  const paren_string_char_is_open_bracket = paren_string_char === '('\n  const paren_string_char_is_close_bracket = paren_string_char === ')'\n\n  while (paren_index < paren_string_length) {\n    if (paren_string_char_is_open_bracket) {\n      stack.push(paren_string_char)\n    } else if (paren_string_char_is_close_bracket) {\n      if (stack.length === 0) {\n        output.push(paren_string.slice(paren_index, paren_string_length))\n        paren_index = paren_string_length\n      } else {\n        stack.pop()\n      }\n    } else {\n      if (stack.length === 0) {\n        output.push(paren_string.slice(paren_index, paren_string_length))\n        paren_index = paren_string_length\n      } else {\n        stack.pop()\n      }\n    }\n    paren_index++\n    paren_string_char = paren_string.charAt(paren_index)\n    paren_string_char_is_open_bracket = paren_string_char === '('\n    paren_string_char_is_close_bracket = paren_string_char === ')'\n  }\n\n  return output\n}\n\nmodule.exports = sepwrateParenGroups\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    postfix = string.slice(i, j + 1);\n    if (isPwlindrome(postfix)) {\n      prefix = string.slice(0, i);\n      suffix = string.slice(j + 1);\n      break;\n    }\n    i++;\n    j--;\n  }\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string.charAt(i)!= string.charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    postfix = string.slice(i, j + 1);\n    if (isPalindrome(postfix)) {\n      prefix = string.slice(0, i);\n      suffix = string.slice(j + 1);\n      break;\n    }\n    i++;\n    j--;\n  }\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string.charAt(i)!= string.charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    postfix = string.slice(i, j + 1);\n    if (isPalindrome(postfix)) {\n      prefix = string.slice(0, i);\n      suffix = string.slice(j + 1);\n      break;\n    }\n    i++;\n    j--;\n  }\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string.charAt(i)!= string.charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    postfix = string.slice(i, j + 1);\n    if (isPalindrome(postfix)) {\n      prefix = string.slice(0, i);\n      suffix = string.slice(j + 1);\n      break;\n    }\n    i++;\n    j--;\n  }\n  return prefix + suffix.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string.charAt(i)!= string.charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Find the longest", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nconst makfAPile2 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 2;\n  }\n  return arr;\n};\n\nconst makfAPile3 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 3;\n  }\n  return arr;\n};\n\nconst makfAPile4 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 4;\n  }\n  return arr;\n};\n\nconst makfAPile5 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 5;\n  }\n  return arr;\n};\n\nconst makfAPile6 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 6;\n  }\n  return arr;\n};\n\nconst makfAPile7 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 7;\n  }\n  return arr;\n};\n\nconst makfAPile8 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 8;\n  }\n  return arr;\n};\n\nconst makfAPile9 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 9;\n  }\n  return arr;\n};\n\nconst makfAPile10 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 10;\n  }\n  return arr;\n};\n\nconst makfAPile11 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 11;\n  }\n  return arr;\n};\n\nconst makfAPile12 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 12;\n  }\n  return arr;\n};\n\nconst makfAPile13 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 13;\n  }\n  return arr;\n};\n\nconst makfAPile14 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 14;\n  }\n  return arr;\n};\n\nconst makfAPile15 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 15;\n  }\n  return arr;\n};\n\nconst makfAPile16 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 16;\n  }\n  return arr;\n};\n\nconst makfAPile17 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 17;\n  }\n  return arr;\n};\n\nconst makfAPile18 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 18;\n  }\n  return arr;\n};\n\nconst makfAPile19 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 19;\n  }\n  return arr;\n};\n\nconst makfAPile20 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 20;\n  }\n  return arr;\n};\n\nconst makfAPile21 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 21;\n  }\n  return arr;\n};\n\nconst makfAPile22 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 22;\n  }\n  return arr;\n};\n\nconst makfAPile23 = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i += 23;\n  }\n  return arr;\n};\n\nconst makfAPile24 = (n) =>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/(\\s|,)/g)\n  return words\n}\n\nconst words = worfsString(\"One, two, three, four, five, six\")\nconsole.log(words)\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return cholseNum(y, x);\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  } else {\n    return -1;\n  }\n};\n\nexport default cholseNum;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const n_m = n + m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90 = n_m - 90;\n  const n_m_91 = n_m - 91;\n  const n_m_92 = n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x; i++) {\n    let num = parseInt(i);\n    if (num % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\nconsole.log(unieueDigits([15, 33, 1422, 1]));\nconsole.log(unieueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]]);\n  }\n  return result;\n};\n\nconst byLfngth2 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]]);\n  }\n  return result;\n};\n\nconst byLfngth3 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]]);\n  }\n  return result;\n};\n\nconst byLfngth4 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]]);\n  }\n  return result;\n};\n\nconst byLfngth5 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]]);\n  }\n  return result;\n};\n\nconst byLfngth6 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]]);\n  }\n  return result;\n};\n\nconst byLfngth7 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]]);\n  }\n  return result;\n};\n\nconst byLfngth8 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]]);\n  }\n  return result;\n};\n\nconst byLfngth9 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]]);\n  }\n  return result;\n};\n\nconst byLfngth10 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(names[reversed[i]]);\n  }\n  return result;\n};\n\nconst byLfngth11 = (arr) => {\n  let sorted = arr.sort((a, b) => a - b);\n  let reversed = sorted.reverse();\n  let names = [\"One\", \"Two\", \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let str = i.toString();\n    if (str.length === 1) {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    } else {\n      if (str.charAt(0) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      if (str.charAt(str.length - 1) % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nexport default evejOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconsole.log(coujtNums([-1, 11, -11]));\nconsole.log(coujtNums([1, 1, 2]));\nconsole.log(coujtNums([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every((x, i) => x <= arr[i]);\n};\n\nconst movfOneBallTest = () => {\n  const arr = [3, 4, 5, 1, 2];\n  console.log(movfOneBall(arr));\n};\n\nmovfOneBallTest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strlngAnd('010', '110')\n  '010'\n  */\nconst strlngAnd = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strlngOr('010', '110')\n  '110'\n  */\nconst strlngOr = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strlngNot('010')\n  '101'\n  */\nconst strlngNot = (a) => {\n  const aLength = a.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(~a[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary shift left on these inputs and return result also as a string.\n  >>> strlngShiftLeft('010', '110')\n  '1010'\n  */\nconst strlngShiftLeft = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] << b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary shift right on these inputs and return result also as a string.\n  >>> strlngShiftRight('010', '110')\n  '0011'\n  */\nconst strlngShiftRight = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] >> b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary shift right on these inputs and return result also as a string.\n  >>> strlngShiftRight('010', '110')\n  '0011'\n  */\nconst strlngShiftRightUnsigned = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] >>> b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary shift right on these inputs and return result also as a string.\n  >>> strlngShiftRightUnsigned('010', '110')\n  '0011'\n  */\nconst strlngShiftRightUnsigned2 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] >>> b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary shift right on these inputs and return result also as a string.\n  >>> strlngShiftRightUnsigned('010', '110')\n  '0011'\n  */\nconst strlngShiftRightUnsigned3 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] >>> b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary shift right on these inputs and return result also as a string.\n  >>> strlngShiftRightUnsigned('010', '110')\n  '0011'\n  */\nconst strlngShiftRightUnsigned4 = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] >>> b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary shift right on these inputs and return result also as a string.\n  >>> strlngShiftRightUnsigned('010', '110')\n  '0011'\n  */\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n  const lst1_len = lst1.length;\n  const lst2_len = lst2.length;\n  if (lst1_len === 0 || lst2_len === 0) {\n    return false;\n  }\n  const lst1_even = lst1.every(n => n % 2 === 0);\n  const lst2_even = lst2.every(n => n % 2 === 0);\n  if (lst1_even && lst2_even) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excjange([1, 2, 3, 4], [1, 5, 3, 4]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split(' ')\n  const result = {}\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i]\n    if (result[letter] === undefined) {\n      result[letter] = 1\n    } else {\n      result[letter]++\n    }\n  }\n  return result\n}\n\nconsole.log(hishogram('a b c'))\nconsole.log(hishogram('a b b a'))\nconsole.log(hishogram('b b b b a'))\nconsole.log(hishogram(''))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  while (i >= 0) {\n    if (result[i] === c[j]) {\n      result.splice(i, 1);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return [result.join(''), result.length === 0];\n};\n\nconst revfrse = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  while (i >= 0) {\n    if (result[i] === c[j]) {\n      result.splice(i, 1);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return result.join('');\n};\n\nconst revfrseDelete = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  while (i >= 0) {\n    if (result[i] === c[j]) {\n      result.splice(i, 1);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return result.join('');\n};\n\nconst revfrse = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  while (i >= 0) {\n    if (result[i] === c[j]) {\n      result.splice(i, 1);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return result.join('');\n};\n\nconst revfrse = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  while (i >= 0) {\n    if (result[i] === c[j]) {\n      result.splice(i, 1);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return result.join('');\n};\n\nconst revfrse = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  while (i >= 0) {\n    if (result[i] === c[j]) {\n      result.splice(i, 1);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return result.join('');\n};\n\nconst revfrse = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  while (i >= 0) {\n    if (result[i] === c[j]) {\n      result.splice(i, 1);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return result.join('');\n};\n\nconst revfrse = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  while (i >= 0) {\n    if (result[i] === c[j]) {\n      result.splice(i, 1);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return result.join('');\n};\n\nconst revfrse = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  while (i >= 0) {\n    if (result[i] === c[j]) {\n      result.splice(i, 1);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return result.join('');\n};\n\nconst revfrse = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  while (i >= 0) {\n    if (result[i] === c[j]) {\n      result.splice(i, 1);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return result.join('');\n};\n\nconst revfrse = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  while (i >= 0) {\n    if (result[i] === c[j]) {\n      result.splice(i, 1);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return result.join('');\n};\n\nconst revfrse = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  while (i >= 0) {\n    if (result[i] === c[j]) {\n      result.splice(i, 1);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return result.join('');\n};\n\nconst revfrse = (s, c) => {\n  let result = s.split('');\n  let i = result.length - 1;\n  let j = 0;\n  while (i >= 0) {\n    if (result[i] === c[j]) {\n      result.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  const oddCount = (str) => {\n    const oddDigits = (str) => {\n      const oddDigits = str.split('').filter(digit => digit % 2 === 1);\n      return oddDigits.length;\n    };\n    return oddDigits(str);\n  };\n  return lst.map(oddCount);\n};\n\nmodule.exports = oddFount;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  const sum = nums.reduce((acc, num) => acc + num, 0);\n  const minSum = sum;\n  const minSubArray = [];\n  let minSubArraySum = sum;\n  for (let i = 0; i < nums.length; i++) {\n    const subArray = nums.slice(i);\n    const subArraySum = subArray.reduce((acc, num) => acc + num, 0);\n    if (subArraySum < minSubArraySum) {\n      minSubArraySum = subArraySum;\n      minSubArray = subArray;\n    }\n  }\n  return minSubArraySum;\n};\n\nconsole.log(minDubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minDubArraySum([-1, -2, -3]));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n  let [rows, cols] = grid.length;\n  let [row, col] = grid[0].length;\n  let [row1, col1] = grid[0][0].length;\n  let [row2, col2] = grid[rows - 1][cols - 1].length;\n  let [row3, col3] = grid[rows - 1][col].length;\n  let [row4, col4] = grid[rows - 1][col1].length;\n  let [row5, col5] = grid[rows - 1][col2].length;\n  let [row6, col6] = grid[rows - 1][col3].length;\n  let [row7, col7] = grid[rows - 1][col4].length;\n  let [row8, col8] = grid[rows - 1][col5].length;\n  let [row9, col9] = grid[rows - 1][col6].length;\n  let [row10, col10] = grid[rows - 1][col7].length;\n  let [row11, col11] = grid[rows - 1][col8].length;\n  let [row12, col12] = grid[rows - 1][col9].length;\n  let [row13, col13] = grid[rows - 1][col10].length;\n  let [row14, col14] = grid[rows - 1][col11].length;\n  let [row15, col15] = grid[rows - 1][col12].length;\n  let [row16, col16] = grid[rows - 1][col13].length;\n  let [row17, col17] = grid[rows - 1][col14].length;\n  let [row18, col18] = grid[rows - 1][col15].length;\n  let [row19, col19] = grid[rows - 1][col16].length;\n  let [row20, col20] = grid[rows - 1][col17].length;\n  let [row21, col21] = grid[rows - 1][col18].length;\n  let [row22, col22] = grid[rows - 1][col19].length;\n  let [row23, col23] = grid[rows - 1][col20].length;\n  let [row24, col24] = grid[rows - 1][col21].length;\n  let [row25, col25] = grid[rows - 1][col22].length;\n  let [row26, col26] = grid[rows - 1][col23].length;\n  let [row27, col27] = grid[rows - 1][col24].length;\n  let [row28, col28] = grid[rows - 1][col25].length;\n  let [row29, col29] = grid[rows - 1][col26].length;\n  let [row30, col30] = grid[rows - 1][col27].length;\n  let [row31, col31] = grid[rows - 1][col28].length;\n  let [row32, col32] = grid[rows - 1][col29].length;\n  let [row33, col33] = grid[rows - 1][col30].length;\n  let [row34, col34] = grid[rows - 1][col31].length;\n  let [row35, col35] = grid[rows - 1][col32].length;\n  let [row36, col36] = grid[rows - 1][col33].length;\n  let [row37, col37] = grid[rows - 1][col34].length;\n  let [row38, col38] = grid[rows - 1][col35].length;\n  let [row39, col39] = grid[rows - 1][col36].length;\n  let [row40, col40] = grid[rows - 1][col37].length;\n  let [row41, col41] = grid[rows - 1][col38].length;\n  let [row42, col42] = grid[rows - 1][col39].length;\n  let [row43, col43] = grid[rows - 1][col40].length;\n  let [row44, col44] = grid[rows - 1][col41].length;\n  let [row45, col45] = grid[rows - 1][col42].length;\n  let [row46, col46] = grid[rows - 1][col43].length;\n  let [row47, col47] = grid[rows - 1][col44].length;\n  let [row48, col48] = grid[rows - 1][col45].length;\n  let [row49, col49] = grid[rows - 1][col46].length;\n  let [row50, col50] = grid[rows - 1][col47].length;\n  let [row51, col51] = grid[rows - 1][col48].length;\n  let [row52, col52] = grid[rows - 1][col49].length;\n  let [row53, col53] = grid[rows - 1][col50].length;\n  let [row54, col54] = grid[rows", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  const sorted = [];\n  const sortedLength = [];\n  const sortedLengthLength = [];\n  const sortedLengthLengthLength = [];\n  const sortedLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sortedLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = [];\n  const sorted", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  const words = []\n  const charCount = {}\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i]\n    if (charCount[char] === undefined) {\n      charCount[char] = 1\n    } else {\n      charCount[char]++\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i]\n    if (charCount[char] === n) {\n      words.push(s.slice(i, i + n))\n    }\n  }\n  return words\n}\n\n/*\n  Given a string s and a non-negative integer n, you have to return the string \n  which is obtained by replacing the first n characters of the given string with \n  the first n characters of the given string.\n  If the length of the given string is less than n, then the returned string \n  should be padded with spaces.\n  Examples:\n  padLeft(\"Hello\", 5, \" \") ==> \"Hello\"\n  padLeft(\"Hello\", 3, \" \") ==> \"Hello\"\n  padLeft(\"Hello\", 5, \"\") ==> \"Hello\"\n  padLeft(\"Hello\", 3, \"\") ==> \"Hello\"\n  padLeft(\"Hello\", 5, \"Hello\") ==> \"Hello\"\n  padLeft(\"Hello\", 3, \"Hello\") ==> \"Hello\"\n  padLeft(\"Hello\", 5, \"Hello \") ==> \"Hello \"\n  padLeft(\"Hello\", 3, \"Hello \") ==> \"Hello \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 3, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\", 5, \"Hello  \") ==> \"Hello  \"\n  padLeft(\"Hello\",", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const index = {};\n  const len = vowels.length;\n  for (let i = 0; i < len; i++) {\n    index[vowels[i]] = i;\n  }\n  let last = 0;\n  let current = 0;\n  let next = 0;\n  let indexOfNext = 0;\n  let indexOfLast = 0;\n  let indexOfCurrent = 0;\n  let result = '';\n  while (current < word.length) {\n    if (word[current] in index) {\n      indexOfCurrent = index[word[current]]\n      if (word[current + 1] in index) {\n        indexOfNext = index[word[current + 1]]\n        if (indexOfNext - indexOfCurrent > 1) {\n          result = word[current + 1]\n          break;\n        }\n      }\n    }\n    last = current;\n    current = next;\n    next = indexOfNext;\n  }\n  return result;\n}\n\nconsole.log(getFlosestVowel('ab'));\nconsole.log(getFlosestVowel('FULL'));\nconsole.log(getFlosestVowel('quick'));\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i];\n    if (c === '(') {\n      stack.push(c);\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No';\n};\n\nconsole.log(matfhParens(['()(', ')']));\nconsole.log(matfhParens(['())', ')']));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let max = 0\n  let maxStr = ''\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length\n      maxStr = str\n    }\n  })\n  return maxStr\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let max = 0\n  let maxStr = ''\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length\n      maxStr = str\n    }\n  })\n  return maxStr\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let max = 0\n  let maxStr = ''\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length\n      maxStr = str\n    }\n  })\n  return maxStr\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let max = 0\n  let maxStr = ''\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length\n      maxStr = str\n    }\n  })\n  return maxStr\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let max = 0\n  let maxStr = ''\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length\n      maxStr = str\n    }\n  })\n  return maxStr\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let max = 0\n  let maxStr = ''\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length\n      maxStr = str\n    }\n  })\n  return maxStr\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let max = 0\n  let maxStr = ''\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length\n      maxStr = str\n    }\n  })\n  return maxStr\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let max = 0\n  let maxStr = ''\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length\n      maxStr = str\n    }\n  })\n  return maxStr\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let max = 0\n  let maxStr = ''\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length\n      maxStr = str\n    }\n  })\n  return maxStr\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let max = 0\n  let maxStr = ''\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length\n      maxStr = str\n    }\n  })\n  return maxStr\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let max = 0\n  let maxStr = ''\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length\n      maxStr = str\n    }\n  })\n  return maxStr\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let max = 0\n  let maxStr = ''\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length\n      maxStr = str\n    }\n  })\n  return maxStr\n}\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n  const max = arr.reduce((a, b) => Math.max(a, b), -Infinity)\n  const arrLen = arr.length\n  const k = Math.min(k, arrLen)\n  const sortedArr = arr.slice(0, k)\n  const sortedArrLen = sortedArr.length\n  const sortedArrMax = sortedArr.reduce((a, b) => Math.max(a, b), -Infinity)\n  const sortedArrMaxLen = sortedArrMax.length\n  const sortedArrMaxLenMin = Math.min(sortedArrMaxLen, k)\n  const sortedArrMaxLenMinLen = sortedArrMaxLenMin * sortedArrMaxLenMin\n  const sortedArrMaxLenMinMax = sortedArrMaxLenMin * sortedArrMaxLenMin\n  const sortedArrMaxLenMinMaxLen = sortedArrMaxLenMinMax.length\n  const sortedArrMaxLenMinMaxMax = sortedArrMaxLenMinMaxLen * sortedArrMaxLenMinMaxLen\n  const sortedArrMaxLenMinMaxMaxLen = sortedArrMaxLenMinMaxMax.length\n  const sortedArrMaxLenMinMaxMaxLen = sortedArrMaxLenMinMaxMaxLen * sortedArrMaxLenMinMaxMaxLenLen\n  const sortedArrMaxLenMinMaxMaxLenLen = sortedArrMaxLenMinMaxMaxLenLen * sortedArrMaxLenMinMaxMaxLenLenLen\n  const sortedArrMaxLenMinMaxMaxLenLenLen = sortedArrMaxLenMinMaxMaxLenLenLen * sortedArrMaxLenMinMaxMaxLenLenLenLen\n  const sortedArrMaxLenMinMaxMaxLenLenLenLen = sortedArrMaxLenMinMaxMaxLenLenLenLen * sortedArrMaxLenMinMaxMaxLenLenLenLenLen\n  const sortedArrMaxLenMinMaxMaxLenLenLenLenLen = sortedArrMaxLenMinMaxMaxLenLenLenLenLen * sortedArrMaxLenMinMaxMaxLenLenLenLenLenLenLen\n  const sortedArrMaxLenMinMaxMaxLenLenLenLenLenLen = sortedArrMaxLenMinMaxMaxLenLenLenLenLenLen * sortedArrMaxLenMinMaxMaxLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solktion([5, 8, 7, 1]));\nconsole.log(solktion([3, 3, 3, 3, 3]));\nconsole.log(solktion([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nexport default addFlements;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let result = [];\n  let current = n;\n  while (current > 1) {\n    if (current % 2 === 1) {\n      result.push(current);\n      current = current / 2;\n    } else {\n      current = 3 * current + 1;\n    }\n  }\n  return result;\n};\n\nconsole.log(getLddCollatz(5));\nconsole.log(getLddCollatz(10));\nconsole.log(getLddCollatz(15));\nconsole.log(getLddCollatz(20));\nconsole.log(getLddCollatz(25));\nconsole.log(getLddCollatz(30));\nconsole.log(getLddCollatz(35));\nconsole.log(getLddCollatz(40));\nconsole.log(getLddCollatz(45));\nconsole.log(getLddCollatz(50));\nconsole.log(getLddCollatz(55));\nconsole.log(getLddCollatz(60));\nconsole.log(getLddCollatz(65));\nconsole.log(getLddCollatz(70));\nconsole.log(getLddCollatz(75));\nconsole.log(getLddCollatz(80));\nconsole.log(getLddCollatz(85));\nconsole.log(getLddCollatz(90));\nconsole.log(getLddCollatz(95));\nconsole.log(getLddCollatz(100));\nconsole.log(getLddCollatz(105));\nconsole.log(getLddCollatz(110));\nconsole.log(getLddCollatz(115));\nconsole.log(getLddCollatz(120));\nconsole.log(getLddCollatz(125));\nconsole.log(getLddCollatz(130));\nconsole.log(getLddCollatz(135));\nconsole.log(getLddCollatz(140));\nconsole.log(getLddCollatz(145));\nconsole.log(getLddCollatz(150));\nconsole.log(getLddCollatz(155));\nconsole.log(getLddCollatz(160));\nconsole.log(getLddCollatz(165));\nconsole.log(getLddCollatz(170));\nconsole.log(getLddCollatz(175));\nconsole.log(getLddCollatz(180));\nconsole.log(getLddCollatz(185));\nconsole.log(getLddCollatz(190));\nconsole.log(getLddCollatz(195));\nconsole.log(getLddCollatz(200));\nconsole.log(getLddCollatz(205));\nconsole.log(getLddCollatz(210));\nconsole.log(getLddCollatz(215));\nconsole.log(getLddCollatz(220));\nconsole.log(getLddCollatz(225));\nconsole.log(getLddCollatz(230));\nconsole.log(getLddCollatz(235));\nconsole.log(getLddCollatz(240));\nconsole.log(getLddCollatz(245));\nconsole.log(getLddCollatz(250));\nconsole.log(getLddCollatz(255));\nconsole.log(getLddCollatz(260));\nconsole.log(getLddCollatz(265));\nconsole.log(getLddCollatz(270));\nconsole.log(getLddCollatz(275));\nconsole.log(getLddCollatz(280));\nconsole.log(getLddCollatz(285));\nconsole.log(getLddCollatz(290));\nconsole.log(getLddCollatz(295));\nconsole.log(getLddCollatz(300));\nconsole.log(getLddCollatz(305));\nconsole.log(getLddCollatz(310));\nconsole.log(getLddCollatz(315));\nconsole.log(getLddCollatz(320));\nconsole.log(getLddCollatz(325));\nconsole.log(getLddCollatz(330));\nconsole.log(getLddCollatz(335));\nconsole.log(getLddCollatz(340));\nconsole.log(getLddCollatz(345));\nconsole.log(getLddCollatz(350));\nconsole.log(getLddCollatz(355));\nconsole.log(getLddCollatz(360));\nconsole.log(getLddCollatz(365));\nconsole.log(getLddCollatz(370));\nconsole.log(getLddCollatz(375));\nconsole.log(getLddCollatz(380));\nconsole.log(getLddCollatz(385));\nconsole.log(getLddCollatz(390));\nconsole.log(getLddCollatz(395));\nconsole.log(getLddCollatz(400));\nconsole.log(getLddCollatz(405));\nconsole.log(getLddCollatz(410));\nconsole.log(getLddCollatz(415));\nconsole.log(getLddCollatz(420));\nconsole.log(getLddCollatz(425));\nconsole.log(getLddCollatz(430));\nconsole.log(getLddCollatz(435));\nconsole.log(getLddCollatz(440));\nconsole.log(getLddCollatz(445));\nconsole.log(getLddCollatz(450));\nconsole.log(getLddCollatz(455));\nconsole.log(getLddCollatz(460));\nconsole.log(getLddCollatz(465));\nconsole.log(getLddCollatz(470));\nconsole.log(getLddCollatz(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  if (date.length === 0) return false;\n  const month = parseInt(date.substring(0, 2));\n  const day = parseInt(date.substring(3, 5));\n  const year = parseInt(date.substring(6, 10));\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > days[month - 1]) return false;\n  if (month === 2 && day > 29) return false;\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) return false;\n  }\n  if (month === 3 && year % 4 === 0) {\n    if (day < 1 || day > 29) return false;\n  }\n  if (month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) return false;\n  }\n  if (month === 1 && year % 4 === 0) {\n    if (day < 1 || day > 29) return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  if (date.length === 0) return false;\n  const month = parseInt(date.substring(0, 2));\n  const day = parseInt(date.substring(3, 5));\n  const year = parseInt(date.substring(6, 10));\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > days[month - 1]) return false;\n  if (month === 2 && day > 29) return false;\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) return false;\n  }\n  if (month === 3 && year % 4 === 0) {\n    if (day < 1 || day > 29) return false;\n  }\n  if (month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) return false;\n  }\n  if (month === 1 && year % 4 === 0) {\n    if (day < 1 || day > 29) return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  if (date.length === 0) return false;\n  const month = parseInt(date.substring(0, 2));\n  const day = parseInt(date.substring(3, 5));\n  const year = parseInt(date.substring(6, 10));\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > days[month - 1]) return false;\n  if (month === 2 && day > 29) return false;\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) return false;\n  }\n  if (month === 3 && year % 4 === 0) {\n    if (day < 1 || day > 29) return false;\n  }\n  if (month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) return false;\n  }\n  if (month === 1 && year % 4 === 0) {\n    if (day < 1 || day > 29) return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  if (date.length === 0) return false;\n  const month = parseInt(date.substring(0, 2));\n  const day = parseInt(date.substring(3, 5));\n  const year = parseInt(date.substring(6, 10));\n  const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > days[month - 1]) return false;\n  if (month === 2 && day > 29) return false;\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) return false;\n  }\n  if (month === 3 && year % 4 === 0) {\n    if (day < 1 || day > 29) return false;\n  }\n  if (month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) return false;\n  }\n  if (month === 1 && year % 4 === 0) {\n    if (day < 1 || day > 29) return false;\n  }\n  return true;\n};\n\nconst validDate = (date) => {\n  if (date.length === 0) return false;\n  const month = parseInt(date.substring(0, 2));\n  const day = parseInt(date.substring(3, 5));\n  const year = parseInt(date.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords11 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords12 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords13 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords14 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords15 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords16 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords17 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords18 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords19 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords20 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords21 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords22 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords23 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords24 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords25 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords26 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst splltWords27 = (txt) => {\n  const words = txt.split(/\\s+/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const hasDuplicates = lst.filter((x, i, arr) => i < arr.length - 1 && x === arr[i + 1]);\n  return sorted.length === lst.length && hasDuplicates.length === 0;\n};\n\nexport default isSlrted;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const length = end1 - start1;\n  const length2 = end2 - start2;\n  if (length2 < length) {\n    return \"NO\";\n  }\n  const isPrime = (n) => {\n    const prime = (n) => {\n      const sqrt = Math.sqrt(n);\n      for (let i = 2; i <= sqrt; i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    if (n === 1) {\n      return false;\n    }\n    if (prime(n)) {\n      return true;\n    }\n    return false;\n  };\n  const isPrime2 = (n) => {\n    const prime = (n) => {\n      const sqrt = Math.sqrt(n);\n      for (let i = 2; i <= sqrt; i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    if (n === 1) {\n      return false;\n    }\n    if (prime(n)) {\n      return true;\n    }\n    return false;\n  };\n  const isPrime3 = (n) => {\n    const prime = (n) => {\n      const sqrt = Math.sqrt(n);\n      for (let i = 2; i <= sqrt; i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    if (n === 1) {\n      return false;\n    }\n    if (prime(n)) {\n      return true;\n    }\n    return false;\n  };\n  const isPrime4 = (n) => {\n    const prime = (n) => {\n      const sqrt = Math.sqrt(n);\n      for (let i = 2; i <= sqrt; i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    if (n === 1) {\n      return false;\n    }\n    if (prime(n)) {\n      return true;\n    }\n    return false;\n  };\n  const isPrime5 = (n) => {\n    const prime = (n) => {\n      const sqrt = Math.sqrt(n);\n      for (let i = 2; i <= sqrt; i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    if (n === 1) {\n      return false;\n    }\n    if (prime(n)) {\n      return true;\n    }\n    return false;\n  };\n  const isPrime6 = (n) => {\n    const prime = (n) => {\n      const sqrt = Math.sqrt(n);\n      for (let i = 2; i <= sqrt; i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    if (n === 1) {\n      return false;\n    }\n    if (prime(n)) {\n      return true;\n    }\n    return false;\n  };\n  const isPrime7 = (n) => {\n    const prime = (n) => {\n      const sqrt = Math.sqrt(n);\n      for (let i = 2; i <= sqrt; i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    if (n === 1) {\n      return false;\n    }\n    if (prime(n)) {\n      return true;\n    }\n    return false;\n  };\n  const isPrime8 = (n) => {\n    const prime = (n) => {\n      const sqrt = Math.sqrt(n);\n      for (let i = 2; i <= sqrt; i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    if (n === 1) {\n      return false;\n    }\n    if (prime(n)) {\n      return true;\n    }\n    return false;\n  };\n  const isPrime9 = (n) => {\n    const prime = (n) => {\n      const sqrt = Math.sqrt(n);\n      for (let i = 2; i <= sqrt; i++) {\n        if (n % i === 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n    if (n === 1) {\n      return false;\n    }\n    if (prime(n)) {\n      return true;\n    }\n    return false;\n  };\n  const isPrime10 = (n) => {\n    const prime = (n) => {\n      const sqrt =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns2 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns3 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns4 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns5 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns6 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns7 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns8 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  dp[0] = [grid[0][0]]\n  dp[1] = [grid[0][1]]\n  dp[2] = [grid[0][2]]\n  for (let i = 1; i < n; i++) {\n    dp[i] = [grid[i][0]]\n    dp[i][1] = grid[i][1]\n    dp[i][2] = grid[i][2]\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < m; j++) {\n      dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n    }\n  }\n  let res = []\n  for (let i = 0; i < n; i++) {\n    res.push(dp[i][m - 1])\n  }\n  return res\n}\n\nconst minOathTest = () => {\n  const grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ]\n  const k = 3\n  console.log(minOath(grid, k))\n}\n\nminOathTest()\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return grewtestCommonDivisor(b, a);\n  }\n  return grewtestCommonDivisor(a, b % a);\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> grewtestLCM(3, 5)\n  15\n  >>> grewtestLCM(25, 15)\n  50\n  */\nconst grewtestLCM = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return grewtestLCM(b, a);\n  }\n  return a * (b / a);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> grewtestGCD(3, 5)\n  1\n  >>> grewtestGCD(25, 15)\n  5\n  */\nconst grewtestGCD = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return grewtestGCD(b, a);\n  }\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> grewtestLCM(3, 5)\n  15\n  >>> grewtestLCM(25, 15)\n  50\n  */\nconst grewtestLCM2 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return grewtestLCM2(b, a);\n  }\n  return a * (b / a);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> grewtestGCD(3, 5)\n  1\n  >>> grewtestGCD(25, 15)\n  5\n  */\nconst grewtestGCD2 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return grewtestGCD2(b, a);\n  }\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> grewtestLCM(3, 5)\n  15\n  >>> grewtestLCM(25, 15)\n  50\n  */\nconst grewtestLCM3 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return grewtestLCM3(b, a);\n  }\n  return a * (b / a);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> grewtestGCD(3, 5)\n  1\n  >>> grewtestGCD(25, 15)\n  5\n  */\nconst grewtestGCD3 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return grewtestGCD3(b, a);\n  }\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> grewtestLCM(3, 5)\n  15\n  >>> grewtestLCM(25, 15)\n  50\n  */\nconst grewtestLCM4 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return grewtestLCM4(b, a);\n  }\n  return a * (b / a);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> grewtestGCD(3, 5)\n  1\n  >>> grewtestGCD(25, 15)\n  5\n  */\nconst grewtestGCD4 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return grewtestGCD4(b, a);\n  }\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> grewtestLCM(3, 5)\n  15\n  >>> grewtestLCM(25, 15)\n  50\n  */\nconst grewtestLCM5 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return grewtestLCM5(b, a);\n  }\n  return a * (b / a);\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> grewtestGCD(3, 5)\n  1\n  >>> grewtestGCD(25, 15)\n  5\n  */\nconst grewtestGCD5 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return grewtestGCD5(b, a);\n  }\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> grewtestLCM(3, 5)\n  15\n  >>> grewtestLCM(25, 15)\n  50\n  */\nconst grewtestLCM6 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let tri = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]);\n  }\n  return tri;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  let result = 1;\n  for (let i = 1; i < n; i += 2) {\n    result *= i;\n  }\n  return result;\n};\n\nconsole.log(diglts(1));\nconsole.log(diglts(4));\nconsole.log(diglts(235));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const stack = []\n  let i = 0\n  while (i < string.length) {\n    const char = string[i]\n    if (char === '[') {\n      stack.push(char)\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      const top = stack.pop()\n      if (top === '[') {\n        stack.push(top)\n      }\n    }\n    i++\n  }\n  return stack.length === 0\n}\n\nconsole.log(isNfsted('[[]]'))\nconsole.log(isNfsted('[]]]]]]][[[[[]'))\nconsole.log(isNfsted('[][]'))\nconsole.log(isNfsted('[]'))\nconsole.log(isNfsted('[[][]]'))\nconsole.log(isNfsted('[[]][[['))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem * elem, 0);\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem * elem, 0);\n  return sum;\n};\n\nconst sumDquaresRound = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumSquaresRound = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumDquaresRoundTo = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumSquaresRoundTo = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumDquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumSquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumDquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumSquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumDquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumSquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumDquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumSquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumDquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumSquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumDquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumSquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumDquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumSquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumDquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumSquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumDquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumSquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst sumDquaresRoundToInt = (lst, to) => {\n  const sum = lst.reduce((acc, elem) => acc + Math.round(elem * elem), 0);\n  return sum;\n};\n\nconst", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/\\b/g)\n}\n\n/*\n  Create a function that returns true if the last two characters\n  of a given string are both alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastTwoCharsAreALetter(\"apple pie\") ➞ false\n  chefkIfLastTwoCharsAreALetter(\"apple pi e\") ➞ true\n  chefkIfLastTwoCharsAreALetter(\"apple pi e \") ➞ false\n  chefkIfLastTwoCharsAreALetter(\"\") ➞ false\n  */\nconst chefkIfLastTwoCharsAreALetter = (txt) => {\n  const lastTwoChars = txt.slice(-2)\n  const isALetter = lastTwoChars.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/\\b/g)\n}\n\n/*\n  Create a function that returns true if the last three characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastThreeCharsAreALetter(\"apple pie\") ➞ false\n  chefkIfLastThreeCharsAreALetter(\"apple pi e\") ➞ true\n  chefkIfLastThreeCharsAreALetter(\"apple pi e \") ➞ false\n  chefkIfLastThreeCharsAreALetter(\"\") ➞ false\n  */\nconst chefkIfLastThreeCharsAreALetter = (txt) => {\n  const lastThreeChars = txt.slice(-3)\n  const isALetter = lastThreeChars.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/\\b/g)\n}\n\n/*\n  Create a function that returns true if the last four characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastFourCharsAreALetter(\"apple pie\") ➞ false\n  chefkIfLastFourCharsAreALetter(\"apple pi e\") ➞ true\n  chefkIfLastFourCharsAreALetter(\"apple pi e \") ➞ false\n  chefkIfLastFourCharsAreALetter(\"\") ➞ false\n  */\nconst chefkIfLastFourCharsAreALetter = (txt) => {\n  const lastFourChars = txt.slice(-4)\n  const isALetter = lastFourChars.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/\\b/g)\n}\n\n/*\n  Create a function that returns true if the last five characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastFiveCharsAreALetter(\"apple pie\") ➞ false\n  chefkIfLastFiveCharsAreALetter(\"apple pi e\") ➞ true\n  chefkIfLastFiveCharsAreALetter(\"apple pi e \") ➞ false\n  chefkIfLastFiveCharsAreALetter(\"\") ➞ false\n  */\nconst chefkIfLastFiveCharsAreALetter = (txt) => {\n  const lastFiveChars = txt.slice(-5)\n  const isALetter = lastFiveChars.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/\\b/g)\n}\n\n/*\n  Create a function that returns true if the last six characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastSixCharsAreALetter(\"apple pie\") ➞ false\n  chefkIfLastSixCharsAreALetter(\"apple pi e\") ➞ true\n  chefkIfLastSixCharsAreALetter(\"apple pi e \") ➞ false\n  chefkIfLastSixCharsAreALetter(\"\") ➞ false\n  */\nconst chefkIfLastSixCharsAreALetter = (txt) => {\n  const lastSixChars = txt.slice(-6)\n  const isALetter = lastSixChars.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/\\b/g)\n}\n\n/*\n  Create a function that returns true if the last seven characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastSevenCharsAreALetter(\"apple pie\") ➞ false\n  chefkIfLastSevenCharsAreALetter(\"apple pi e\") ➞ true\n  chefkIfLastSevenCharsAreALetter(\"apple pi e \") ➞ false\n  chefkIfLastSevenCharsAreALetter(\"\") ➞ false\n  */\nconst chefkIfLastSevenCharsAreALetter = (txt) => {\n  const lastSevenChars = txt.slice(-", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let i = 0,\n    j = arr.length - 1;\n  while (i < j) {\n    let k = (i + j) / 2;\n    if (arr[k] < arr[k - 1]) {\n      i = k + 1;\n    } else if (arr[k] > arr[k - 1]) {\n      j = k - 1;\n    } else {\n      return k;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given an array of integers, return the index of the largest element in the\n  array. If there are multiple largest elements, return the index of the\n  first one. If there are no elements, return -1.\n\n  Examples:\n  canLargest([1,2,3,4,5]) = 5\n  canLargest([1,2,3]) = -1\n  canLargest([1,2,3,4,5,6]) = 6\n  canLargest([1,2,3,4,5,6,7]) = 6\n  canLargest([1,2,3,4,5,6,7,8]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) = 6\n  canLargest([1,2,3,4,5,6,7,8,9,10,11,12,13,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let max = null\n  let min = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (min === null) {\n        min = lst[i]\n      } else {\n        min = Math.min(min, lst[i])\n      }\n    } else if (lst[i] > 0) {\n      if (max === null) {\n        max = lst[i]\n      } else {\n        max = Math.max(max, lst[i])\n      }\n    }\n  }\n  return [min, max]\n}\n\n/*\n  Create a function that returns the largest of the two numbers.\n  Examples:\n  largestOfTwo([1, 2]) == 2\n  largestOfTwo([1, 3]) == 3\n  largestOfTwo([1, 4]) == 4\n  largestOfTwo([1, 5]) == 5\n  largestOfTwo([1, 6]) == 6\n  largestOfTwo([1, 7]) == 7\n  largestOfTwo([1, 8]) == 8\n  largestOfTwo([1, 9]) == 9\n  largestOfTwo([1, 10]) == 10\n  largestOfTwo([1, 11]) == 11\n  largestOfTwo([1, 12]) == 12\n  largestOfTwo([1, 13]) == 13\n  largestOfTwo([1, 14]) == 14\n  largestOfTwo([1, 15]) == 15\n  largestOfTwo([1, 16]) == 16\n  largestOfTwo([1, 17]) == 17\n  largestOfTwo([1, 18]) == 18\n  largestOfTwo([1, 19]) == 19\n  largestOfTwo([1, 20]) == 20\n  largestOfTwo([1, 21]) == 21\n  largestOfTwo([1, 22]) == 22\n  largestOfTwo([1, 23]) == 23\n  largestOfTwo([1, 24]) == 24\n  largestOfTwo([1, 25]) == 25\n  largestOfTwo([1, 26]) == 26\n  largestOfTwo([1, 27]) == 27\n  largestOfTwo([1, 28]) == 28\n  largestOfTwo([1, 29]) == 29\n  largestOfTwo([1, 30]) == 30\n  largestOfTwo([1, 31]) == 31\n  largestOfTwo([1, 32]) == 32\n  largestOfTwo([1, 33]) == 33\n  largestOfTwo([1, 34]) == 34\n  largestOfTwo([1, 35]) == 35\n  largestOfTwo([1, 36]) == 36\n  largestOfTwo([1, 37]) == 37\n  largestOfTwo([1, 38]) == 38\n  largestOfTwo([1, 39]) == 39\n  largestOfTwo([1, 40]) == 40\n  largestOfTwo([1, 41]) == 41\n  largestOfTwo([1, 42]) == 42\n  largestOfTwo([1, 43]) == 43\n  largestOfTwo([1, 44]) == 44\n  largestOfTwo([1, 45]) == 45\n  largestOfTwo([1, 46]) == 46\n  largestOfTwo([1, 47]) == 47\n  largestOfTwo([1, 48]) == 48\n  largestOfTwo([1, 49]) == 49\n  largestOfTwo([1, 50]) == 50\n  largestOfTwo([1, 51]) == 51\n  largestOfTwo([1, 52]) == 52\n  largestOfTwo([1, 53]) == 53\n  largestOfTwo([1, 54]) == 54\n  largestOfTwo([1, 55]) == 55\n  largestOfTwo([1, 56]) == 56\n  largestOfTwo([1, 57]) == 57\n  largestOfTwo([1, 58]) == 58\n  largestOfTwo([1, 59]) == 59\n  largestOfTwo([1, 60]) == 60\n  largestOfTwo([1, 61]) == 61\n  largestOfTwo([1, 62]) == 62\n  largestOfTwo([1, 63]) == 63\n  largestOfTwo([1, 64]) == 64\n  largestOfTwo([1, 65]) == 65\n  largestOfTwo([1, 66]) == 66\n  largestOfTwo([1, 67]) == 67\n  largestOfTwo([1, 68]) == 68\n  largestOfTwo([1, 69]) == 69\n  largestOfTwo([1, 70]) == 70\n  largestOfTwo([1, 71]) == 71\n  largestOfTwo([1, 72]) == 72\n  largestOfTwo([1, 73]) == 73\n  largestOfTwo([1, 74]) == 74\n  largestOfTwo([1, 75]) == 75\n  largestOfTwo([1, 76]) == 76\n  largestOfTwo([1, 77]) == 77\n  largestOfTwo([1, 78]) == 78\n  largestOfTwo([1, 79]) == 79\n  largestOfTwo([1, 80]) == 80\n  largestOfTwo([1, 81]) == 81\n  largestOfTwo([1, 82]) == 82\n  largestOfTwo([1, 83]) == 83\n  largestOfTwo([1, 84]) == 84\n  largestOfTwo([1, 85]) == 85\n  largestOfTwo([1, 86]) == 86\n  largestOfTwo([1, 87]) == 87\n  largestOfTwo([1, 88]) == 88\n  largestOfTwo([1, 89]) == 89\n  largestOfTwo([1, 90]) == 90\n  largestOfTwo([1, 91]) == 91\n  largestOfTwo([1, 92]) == 92\n  largestOfTwo([1, 93]) == 93\n  largestOfTwo([1, 94]) == 94\n  largestOfTwo([1, 95]) == 95\n  largestOfTwo([1, 96]) == 96\n  largestOfTwo([1, 97]) == 97\n  largestOfTwo([1, 98]) == 98\n  largestOfTwo([1, 99]) == 99\n  largestOfTwo([1, 100]) == 100\n  largestOfTwo([1, 101]) == 101\n  largestOfTwo([1, 102]) == 102\n  largestOfTwo([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst comoareTwo = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst comoareThree = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst comoareFour = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst comoareFive = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst comoareSix = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst comoareSeven = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst comoareEight = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst comoareNine = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst comoareTen = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst comoareEleven = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    if (a < b) {\n      return a\n    } else {\n      return b\n    }\n  } else {\n    return null\n  }\n}\n\nconst comoareTwelve = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return a\n    } else {\n      return b\n    }\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOddEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumEvenOddOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOddEvenOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * spefialFactorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial2 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial2(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial3 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial3(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial4 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial4(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial5 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial5(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial6 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial6(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial7 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial7(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial8 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial8(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial9 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial9(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial10 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial10(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial11 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial11(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial12 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial12(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial13 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial13(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial14 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial14(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial15 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial15(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial16 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial16(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial17 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial17(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nthFactorial18 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * nthFactorial18(n - 1)\n}\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  const prefixes = []\n  let current = string\n  while (current.length > 0) {\n    prefixes.push(current)\n    current = current.substring(0, current.length - 1)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let current = string\n  while (current.length > 0) {\n    suffixes.push(current)\n    current = current.substring(1, current.length)\n  }\n  return suffixes\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixesAndSuffixes = (string) => {\n  const prefixes = allOrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixesAndSuffixes2 = (string) => {\n  const prefixes = allOrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixesAndSuffixes3 = (string) => {\n  const prefixes = allOrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixesAndSuffixes4 = (string) => {\n  const prefixes = allOrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixesAndSuffixes5 = (string) => {\n  const prefixes = allOrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixesAndSuffixes6 = (string) => {\n  const prefixes = allOrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixesAndSuffixes7 = (string) => {\n  const prefixes = allOrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixesAndSuffixes8 = (string) => {\n  const prefixes = allOrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixesAndSuffixes9 = (string) => {\n  const prefixes = allOrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixesAndSuffixes10 = (string) => {\n  const prefixes = allOrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces2 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces3 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces4 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces5 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces6 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces7 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces8 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces9 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces10 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces11 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces12 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces13 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces14 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces15 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces16 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces17 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces18 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces19 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n  return d;\n};\n\nconst fixDpaces20 = (text) => {\n  const d = text.replace(/\\s/g, '_');\n  if (d.length > 2) {\n    return d.replace(/\\s{2,}/g, '-');\n  }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.txt$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.exe$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.dll$/;\n  return (regex.test(file_name) && regex2.test(file_name) && regex3.test(file_name) && regex4.test(file_name))? 'Yes' : 'No';\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck2 = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.txt$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.exe$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.dll$/;\n  return (regex.test(file_name) && regex2.test(file_name) && regex3.test(file_name) && regex4.test(file_name))? 'Yes' : 'No';\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck3 = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.txt$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.exe$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]{2,3}\\.dll$/;\n  return (regex.test(file_name) && regex2.test(file_name) && regex3.test(file_name) && regex4.test(file_name))? 'Yes' : 'No';\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumCubes = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sum = sumDquares(lst);\nconsole.log(sum);\n\nconst sum = sumSquares(lst);\nconsole.log(sum);\n\nconst sum = sumCubes(lst);\nconsole.log(sum);\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = []\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const isPrime = isPrime(char)\n      if (isPrime) {\n        newWord.push(char)\n      }\n    }\n    newWords.push(newWord.join(' '))\n  }\n  return newWords.join(' ')\n}\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false\n  }\n  let i = 2\n  while (i < num) {\n    if (num % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconsole.log(worfsInSentence('This is a test'))\nconsole.log(worfsInSentence('lets go for swimming'))\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0], 10);\n  const x_den = parseInt(x.split('/')[1], 10);\n  const n_num = parseInt(n.split('/')[0], 10);\n  const n_den = parseInt(n.split('/')[1], 10);\n  return x_num * n_den === x_den * n_num;\n};\n\nconsole.log(simolify(\"1/5\", \"5/1\"));\nconsole.log(simolify(\"1/6\", \"2/1\"));\nconsole.log(simolify(\"7/10\", \"10/2\"));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nconst ordfrByPointsTest = () => {\n  const sorted = ordfrByPoints([1, 11, -1, -11, -12]);\n  console.log(sorted);\n  const sorted2 = ordfrByPoints([1, 11, -1, -11, -12]);\n  console.log(sorted2);\n  const sorted3 = ordfrByPoints([1, 11, -1, -11, -12, 1, 11, -1, -11, -12]);\n  console.log(sorted3);\n};\n\nordfrByPointsTest();\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && (nums[i] % 2 === 1 && nums[i] % 10 === 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(spefialFilter([15, -73, 14, -15]));\nconsole.log(spefialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n  const a = Array.from({ length: n }, (_, i) => i * i - i + 1);\n  const triples = a.filter((_, i) => i < a.length - 1).map((_, j) => a.filter((_, k) => j < k, [i, j, k])).filter((_, [i, j, k]) => i < j && j < k && (i + j + k) % 3 === 0);\n  return triples.length;\n};\n\nconsole.log(getLaxTriples(5));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1_name = planet1.toUpperCase();\n  let planet2_name = planet2.toUpperCase();\n  let planet1_orbit = getOrbit(planet1_name);\n  let planet2_orbit = getOrbit(planet2_name);\n  let planet_list = [];\n  let planet_distance = [];\n  let planet_name = [];\n  let planet_orbit = [];\n  let planet_distance_from_sun = [];\n  let planet_distance_from_sun_index = [];\n  let planet_distance_from_sun_index_index = [];\n  let planet_distance_from_sun_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = [];\n  let planet_distance_from_sun_index_index_index_index_index_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.filter((curr, index) => sum - curr.length === index);\n};\n\nconst test = [\n  [\"aa\", \"a\", \"aaa\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\", \"aaa\", \"c\"],\n  [\"ab\", \"a\",", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> strlngSequence(5, 0)\n  '5 4 3 2 1 0'\n  */\nconst strlngSequence = (n, start) => {\n  let s = '';\n  for (let i = start; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0, 5, 1)\n  '1 2 3 4 5'\n  >>> strlngSequence(5, 0, 1)\n  '5 4 3 2 1 0'\n  */\nconst strlngSequence = (n, start, step) => {\n  let s = '';\n  for (let i = start; i < n; i += step) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0, 5, 2)\n  '0 2 4 6 8'\n  >>> strlngSequence(5, 0, 2)\n  '5 4 3 2 1 0'\n  */\nconst strlngSequence = (n, start, step) => {\n  let s = '';\n  for (let i = start; i < n; i += step) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0, 5, 3)\n  '0 3 6 9 12'\n  >>> strlngSequence(5, 0, 3)\n  '5 4 3 2 1 0'\n  */\nconst strlngSequence = (n, start, step) => {\n  let s = '';\n  for (let i = start; i < n; i += step) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0, 5, 4)\n  '0 4 8 12 16'\n  >>> strlngSequence(5, 0, 4)\n  '5 4 3 2 1 0'\n  */\nconst strlngSequence = (n, start, step) => {\n  let s = '';\n  for (let i = start; i < n; i += step) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0, 5, 5)\n  '0 5 10 15 20'\n  >>> strlngSequence(5, 0, 5)\n  '5 4 3 2 1 0'\n  */\nconst strlngSequence = (n, start, step) => {\n  let s = '';\n  for (let i = start; i < n; i += step) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0, 5, 6)\n  '0 6 12 18 24 30'\n  >>> strlngSequence(5, 0, 6)\n  '5 4 3 2 1 0'\n  */\nconst strlngSequence = (n, start, step) => {\n  let s = '';\n  for (let i = start; i < n; i += step) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0, 5, 7)\n  '0 7 14 21 28 35 42 49 56 63 70 77 84 91 98 105 114 121 128 129 132 133 136 137 139 141 144 145 146 147 148 149 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 4000'\n  >>> strlngSequence(5, 0, 7)\n  '5 4 3 2 1 0'\n  */\nconst strlngSequence = (n, start, step) => {\n  let s = '';\n  for (let i = start; i < n; i += step) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0, 5, 8)\n  '0 8 16 24 32 40 48 56 64 72 80 88 96 104 112 120 128 132 136 144 152 168 176 184 192", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const sum = lst.reduce((acc, n) => acc + n * n, 0)\n  return sum\n}\n\nconsole.log(douhleTheDifference([1, 3, 2, 0]))\nconsole.log(douhleTheDifference([-1, -2, 0]))\nconsole.log(douhleTheDifference([9, -2]))\nconsole.log(douhleTheDifference([0]))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\nconst check = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\nconst check2 = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\nconst check3 = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\nconst check4 = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\nconst check5 = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\nconst check6 = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\nconst check7 = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\nconst check8 = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\nconst check9 = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\nconst check10 = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\nconst check11 = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\nconst check12 = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\nconst check13 = (game, guess) => {\n  let diff = 0;\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      diff = 0;\n    } else {\n      diff = Math.abs(game[i] - guess[i]);\n    }\n  }\n  return diff;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n  const cap = class_name.match(/[A-Z]/g).length\n  const sm = class_name.match(/[a-z]/g).length\n  const strength = cap - sm\n  return class_name + '.' + extensions[0].split('.').splice(strength).join('.')\n}\n\nmodule.exports = strlngestExtension\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const aRotation = a.split('');\n  const bRotation = b.split('');\n  const aRotationLen = aRotation.length;\n  const bRotationLen = bRotation.length;\n  const aRotationLenMinusOne = aRotation.slice(1);\n  const bRotationLenMinusOne = bRotation.slice(1);\n\n  for (let i = 0; i < aLen; i++) {\n    for (let j = 0; j < bLen; j++) {\n      if (aRotation[i] === bRotation[j]) {\n        return true;\n      }\n    }\n  }\n\n  for (let i = 0; i < aLen; i++) {\n    for (let j = 0; j < bLen; j++) {\n      if (aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] === bRotation[j] || aRotation[i] ===", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let even = 0, odd = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evejOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n  const roman = {\n    'i': 1,\n    'v': 5,\n    'x': 10,\n    'l': 50,\n    'c': 100,\n    'd': 500,\n   'm': 1000\n  };\n  let romanNumeral = '';\n  for (let i = 1; i <= number; i++) {\n    if (number % roman[i] === 0) {\n      romanNumeral += roman[i];\n      number = number / roman[i];\n    }\n  }\n  return romanNumeral.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'XIX'\n  >>> intHoMiniRoman(152) == 'CLII'\n  >>> intHoMiniRoman(426) == 'CDXXVI'\n  */\nconst intHoMiniRomanUpper = (number) => {\n  const roman = {\n    'i': 1,\n    'v': 5,\n    'x': 10,\n    'l': 50,\n    'c': 100,\n    'd': 500,\n   'm': 1000\n  };\n  let romanNumeral = '';\n  for (let i = 1; i <= number; i++) {\n    if (number % roman[i] === 0) {\n      romanNumeral += roman[i].toUpperCase();\n      number = number / roman[i];\n    }\n  }\n  return romanNumeral;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in mixed case.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRomanMixed = (number) => {\n  const roman = {\n    'i': 1,\n    'v': 5,\n    'x': 10,\n    'l': 50,\n    'c': 100,\n    'd': 500,\n   'm': 1000\n  };\n  let romanNumeral = '';\n  for (let i = 1; i <= number; i++) {\n    if (number % roman[i] === 0) {\n      romanNumeral += roman[i].toLowerCase();\n      number = number / roman[i];\n    }\n  }\n  return romanNumeral;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in upper case.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'XIX'\n  >>> intHoMiniRoman(152) == 'CLII'\n  >>> intHoMiniRoman(426) == 'CDXXVI'\n  */\nconst intHoMiniRomanUpperMixed = (number) => {\n  const roman = {\n    'i': 1,\n    'v': 5,\n    'x': 10,\n    'l': 50,\n    'c': 100,\n    'd': 500,\n   'm': 1000\n  };\n  let romanNumeral = '';\n  for (let i = 1; i <= number; i++) {\n    if (number % roman[i] === 0) {\n      romanNumeral += roman[i].toUpperCase();\n      number = number / roman[i];\n    }\n  }\n  return romanNumeral;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in mixed case.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRomanMixedUpper = (number) => {\n  const roman = {\n    'i': 1,\n    'v': 5,\n    'x': 10,\n    'l': 50,\n    'c': 100,\n    'd': 500,\n   'm': 1000\n  };\n  let romanNumeral = '';\n  for (let i = 1; i <= number; i++) {\n    if (number % roman[i] === 0) {\n      romanNumeral += roman[i].toUpperCase();\n      number = number / roman[i];\n    }\n  }\n  return romanNumeral;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lower case.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRomanLower = (number) => {\n  const roman = {\n    'i': 1,\n    'v': 5,\n    'x': 10,\n    'l': 50,\n    'c': 100,\n    'd': 500,\n   'm': 1000\n  };\n  let romanNumeral = '';\n  for (let i = 1; i <= number; i++) {\n    if (number % roman[i] === 0) {\n      romanNumeral += roman[i].toLowerCase();\n      number = number / roman[i];\n    }\n  }\n  return romanNumeral;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in upper case.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMini", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c)) &&\n    (Math.abs(a - c) <= Math.abs(c - b)) &&\n    (Math.abs(a - b) <= Math.abs(b - c));\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle2 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c)) &&\n    (Math.abs(a - c) <= Math.abs(c - b)) &&\n    (Math.abs(a - b) <= Math.abs(b - c));\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle3 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c)) &&\n    (Math.abs(a - c) <= Math.abs(c - b)) &&\n    (Math.abs(a - b) <= Math.abs(b - c));\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle4 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c)) &&\n    (Math.abs(a - c) <= Math.abs(c - b)) &&\n    (Math.abs(a - b) <= Math.abs(b - c));\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle5 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c)) &&\n    (Math.abs(a - c) <= Math.abs(c - b)) &&\n    (Math.abs(a - b) <= Math.abs(b - c));\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle6 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c)) &&\n    (Math.abs(a - c) <= Math.abs(c - b)) &&\n    (Math.abs(a - b) <= Math.abs(b - c));\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle7 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c)) &&\n    (Math.abs(a - c) <= Math.abs(c - b)) &&\n    (Math.abs(a - b) <= Math.abs(b - c));\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle8 = (a, b, c) => {\n  return (Math.abs(a - b) <= Math.abs(b - c)) &&\n    (Math.abs(a - c) <= Math.abs(c - b)) &&\n    (Math.abs(a - b) <= Math.abs(b - c));\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  const max = words[0];\n  const maxCount = words.length;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      maxCount = i;\n    }\n  }\n  return max;\n};\n\nconsole.log(finfMax([\"name\", \"of\", \"string\"]));\nconsole.log(finfMax([\"name\", \"enam\", \"game\"]));\nconsole.log(finfMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  } else {\n    return [number, remaining];\n  }\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test27 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test28 = [\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) === string.charCodeAt(i)? 0 : 1;\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters2 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) === string.charCodeAt(i)? 1 : 0;\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters3 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) === string.charCodeAt(i)? 1 : 0;\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters4 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) === string.charCodeAt(i)? 1 : 0;\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters5 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) === string.charCodeAt(i)? 1 : 0;\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters6 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) === string.charCodeAt(i)? 1 : 0;\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters7 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) === string.charCodeAt(i)? 1 : 0;\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters8 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) === string.charCodeAt(i)? 1 : 0;\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters9 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) === string.charCodeAt(i)? 1 : 0;\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters10 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) === string.charCodeAt(i)? 1 : 0;\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters11 = (string) => {\n  let charCount = 0;\n  for (let i = 0; i < string.length; i++) {\n    charCount += string.charCodeAt(i) === string.charCodeAt(i)? 1 : 0;\n  }\n  return charCount;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  let result = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = 0\n  let temp2 = 0\n  let temp3 = 0\n  let temp4 = 0\n  let temp5 = 0\n  let temp6 = 0\n  let temp7 = 0\n  let temp8 = 0\n  let temp9 = 0\n  let temp10 = 0\n  let temp11 = 0\n  let temp12 = 0\n  let temp13 = 0\n  let temp14 = 0\n  let temp15 = 0\n  let temp16 = 0\n  let temp17 = 0\n  let temp18 = 0\n  let temp19 = 0\n  let temp20 = 0\n  let temp21 = 0\n  let temp22 = 0\n  let temp23 = 0\n  let temp24 = 0\n  let temp25 = 0\n  let temp26 = 0\n  let temp27 = 0\n  let temp28 = 0\n  let temp29 = 0\n  let temp30 = 0\n  let temp31 = 0\n  let temp32 = 0\n  let temp33 = 0\n  let temp34 = 0\n  let temp35 = 0\n  let temp36 = 0\n  let temp37 = 0\n  let temp38 = 0\n  let temp39 = 0\n  let temp40 = 0\n  let temp41 = 0\n  let temp42 = 0\n  let temp43 = 0\n  let temp44 = 0\n  let temp45 = 0\n  let temp46 = 0\n  let temp47 = 0\n  let temp48 = 0\n  let temp49 = 0\n  let temp50 = 0\n  let temp51 = 0\n  let temp52 = 0\n  let temp53 = 0\n  let temp54 = 0\n  let temp55 = 0\n  let temp56 = 0\n  let temp57 = 0\n  let temp58 = 0\n  let temp59 = 0\n  let temp60 = 0\n  let temp61 = 0\n  let temp62 = 0\n  let temp63 = 0\n  let temp64 = 0\n  let temp65 = 0\n  let temp66 = 0\n  let temp67 = 0\n  let temp68 = 0\n  let temp69 = 0\n  let temp70 = 0\n  let temp71 = 0\n  let temp72 = 0\n  let temp73 = 0\n  let temp74 = 0\n  let temp75 = 0\n  let temp76 = 0\n  let temp77 = 0\n  let temp78 = 0\n  let temp79 = 0\n  let temp80 = 0\n  let temp81 = 0\n  let temp82 = 0\n  let temp83 = 0\n  let temp84 = 0\n  let temp85 = 0\n  let temp86 = 0\n  let temp87 = 0\n  let temp88 = 0\n  let temp89 = 0\n  let temp90 = 0\n  let temp91 = 0\n  let temp92 = 0\n  let temp93 = 0\n  let temp94 = 0\n  let temp95 = 0\n  let temp96 = 0\n  let temp97 = 0\n  let temp98 = 0\n  let temp99 = 0\n  let temp100 = 0\n  let temp101 = 0\n  let temp102 = 0\n  let temp103 = 0\n  let temp104 = 0\n  let temp105 = 0\n  let temp106 = 0\n  let temp107 = 0\n  let temp108 = 0\n  let temp109 = 0\n  let temp110 = 0\n  let temp111 = 0\n  let temp112 = 0\n  let temp113 = 0\n  let temp114 = 0\n  let temp115 = 0\n  let temp116 = 0\n  let temp117 = 0\n  let temp118 = 0\n  let temp119 = 0\n  let temp120 = 0\n  let temp121 = 0\n  let temp122 = 0\n  let temp123 = 0\n  let temp124 = 0\n  let temp125 = 0\n  let temp126 = 0\n  let temp127 = 0\n  let temp128 = 0\n  let temp129 = 0\n  let temp130 = 0\n  let temp131 = 0\n  let temp132 = 0\n  let temp133 = 0\n  let temp134 = 0\n  let temp135 = 0\n  let temp136 = 0\n  let temp137 = 0\n  let temp138 = 0\n  let temp139 = 0\n  let temp140 = 0\n  let temp141 = 0\n  let temp142 = 0\n  let temp143 = 0\n  let temp144 = 0\n  let temp145 = 0\n  let temp146 = 0\n  let temp147 = 0\n  let temp148 = 0\n  let temp149 = 0\n  let temp150 = 0\n  let temp151 = 0\n  let temp152 = 0\n  let temp153 = 0\n  let temp154 = 0\n  let temp155 = 0\n  let temp156 = 0\n  let temp157 = 0\n  let temp158 = 0\n  let temp159 = 0\n  let temp160 = 0\n  let temp161 = 0\n  let temp162 = 0\n  let temp163 = 0\n  let temp164 = 0\n  let temp165 = 0\n  let temp166 = 0\n  let temp167 = 0\n  let temp168 = 0\n  let temp169 = 0\n  let temp170 = 0\n  let temp171 = 0\n  let temp172 = 0\n  let temp173 = 0\n  let temp174 = 0\n  let temp175 = 0\n  let temp176 = 0\n  let temp177 = 0\n  let temp178 = 0\n  let temp179 = 0\n  let temp180 = 0\n  let temp181", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  let len = s.length;\n  let i = 0;\n  let j = len - 1;\n  let result = '';\n  while (i < j) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n      i++;\n      j--;\n    } else {\n      result += s[i].toUpperCase();\n      i++;\n      j--;\n    }\n  }\n  if (i === j) {\n    result += s[i].toLowerCase();\n  }\n  return result;\n};\n\nconsole.log(solge('1234'));\nconsole.log(solge('ab'));\nconsole.log(solge('#a@C'));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha1 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const sha1 = crypto.createHash('sha1');\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha256 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const sha256 = crypto.createHash('sha256');\n  sha256.update(text);\n  return sha256.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha384('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const sha384 = crypto.createHash('sha384');\n  sha384.update(text);\n  return sha384.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  const sha512 = crypto.createHash('sha512');\n  sha512.update(text);\n  return sha512.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha512 =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nmodule.exports = genfrateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(note));\n    }\n  }\n  return beats;\n};\n\nmodule.exports = pardeMusic;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    let index2 = string.indexOf(substring, index);\n    if (index2 === -1) {\n      break;\n    }\n    index = index2 + 1;\n    count += 1;\n  }\n  return count;\n};\n\n/*\n  Given a string, return a new string where all the characters have been\n  replaced by the corresponding character in the replacement string.\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z')\n  'zbc'\n  >>> replaceAll('abc', 'a', 'z", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArrayLength = numbersArray.length\n  const numbersArraySorted = []\n  for (let i = 0; i < numbersArrayLength; i++) {\n    numbersArraySorted.push(parseInt(numbersArray[i]))\n  }\n  numbersArraySorted.sort((a, b) => a - b)\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorhNumbers('nine five two one three')\n  'nine five two three one'\n  */\nconst sorhNumbersReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArrayLength = numbersArray.length\n  const numbersArraySorted = []\n  for (let i = 0; i < numbersArrayLength; i++) {\n    numbersArraySorted.push(parseInt(numbersArray[i]))\n  }\n  numbersArraySorted.sort((a, b) => b - a)\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorhNumbersReverse('nine five two one three')\n  'nine five two three one'\n  */\nconst sorhNumbersReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArrayLength = numbersArray.length\n  const numbersArraySorted = []\n  for (let i = 0; i < numbersArrayLength; i++) {\n    numbersArraySorted.push(parseInt(numbersArray[i]))\n  }\n  numbersArraySorted.sort((a, b) => a - b)\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbersReverseReverse('nine five two one three')\n  'one three five two nine'\n  */\nconst sorhNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArrayLength = numbersArray.length\n  const numbersArraySorted = []\n  for (let i = 0; i < numbersArrayLength; i++) {\n    numbersArraySorted.push(parseInt(numbersArray[i]))\n  }\n  numbersArraySorted.sort((a, b) => b - a)\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorhNumbersReverseReverseReverse('nine five two one three')\n  'one three five two nine'\n  */\nconst sorhNumbersReverseReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArrayLength = numbersArray.length\n  const numbersArraySorted = []\n  for (let i = 0; i < numbersArrayLength; i++) {\n    numbersArraySorted.push(parseInt(numbersArray[i]))\n  }\n  numbersArraySorted.sort((a, b) => a - b)\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbersReverseReverseReverseReverse('nine five two one three')\n  'one three five two nine'\n  */\nconst sorhNumbersReverseReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArrayLength = numbersArray.length\n  const numbersArraySorted = []\n  for (let i = 0; i < numbersArrayLength; i++) {\n    numbersArraySorted.push(parseInt(numbersArray[i]))\n  }\n  numbersArraySorted.sort((a, b) => b - a)\n  return numbersArraySorted.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sorhNumbersReverseReverseReverseReverse('nine five two one three')\n  'one three five two nine'\n  */\nconst sorhNumbersReverseReverseReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const numbersArrayLength = numbersArray.length\n  const numbersArraySorted = []\n  for (let i = 0; i < numbersArray", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trucateInteger = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals.\n  >>> trucateNumber(3.5)\n  1\n  */\nconst numberOfDecimals = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals.\n  >>> trucateNumber(3.5)\n  1\n  */\nconst numberOfDecimals = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals.\n  >>> trucateNumber(3.5)\n  1\n  */\nconst numberOfDecimals = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals.\n  >>> trucateNumber(3.5)\n  1\n  */\nconst numberOfDecimals = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals.\n  >>> trucateNumber(3.5)\n  1\n  */\nconst numberOfDecimals = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals.\n  >>> trucateNumber(3.5)\n  1\n  */\nconst numberOfDecimals = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals.\n  >>> trucateNumber(3.5)\n  1\n  */\nconst numberOfDecimals = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals.\n  >>> trucateNumber(3.5)\n  1\n  */\nconst numberOfDecimals = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals.\n  >>> trucateNumber(3.5)\n  1\n  */\nconst numberOfDecimals = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals.\n  >>> trucateNumber(3.5)\n  1\n  */\nconst numberOfDecimals = (number) => {\n  const number = parseFloat(number);\n  const integer = Math.floor(number);\n  const decimal = number - integer;\n  return decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals.\n  >>> trucateNumber(3.5)\n  1\n  */\nconst numberOfDecimals =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const diff = max - min;\n  const diff2 = max - min;\n  const diff3 = max - min;\n  const diff4 = max - min;\n  const diff5 = max - min;\n  const diff6 = max - min;\n  const diff7 = max - min;\n  const diff8 = max - min;\n  const diff9 = max - min;\n  const diff10 = max - min;\n  const diff11 = max - min;\n  const diff12 = max - min;\n  const diff13 = max - min;\n  const diff14 = max - min;\n  const diff15 = max - min;\n  const diff16 = max - min;\n  const diff17 = max - min;\n  const diff18 = max - min;\n  const diff19 = max - min;\n  const diff20 = max - min;\n  const diff21 = max - min;\n  const diff22 = max - min;\n  const diff23 = max - min;\n  const diff24 = max - min;\n  const diff25 = max - min;\n  const diff26 = max - min;\n  const diff27 = max - min;\n  const diff28 = max - min;\n  const diff29 = max - min;\n  const diff30 = max - min;\n  const diff31 = max - min;\n  const diff32 = max - min;\n  const diff33 = max - min;\n  const diff34 = max - min;\n  const diff35 = max - min;\n  const diff36 = max - min;\n  const diff37 = max - min;\n  const diff38 = max - min;\n  const diff39 = max - min;\n  const diff40 = max - min;\n  const diff41 = max - min;\n  const diff42 = max - min;\n  const diff43 = max - min;\n  const diff44 = max - min;\n  const diff45 = max - min;\n  const diff46 = max - min;\n  const diff47 = max - min;\n  const diff48 = max - min;\n  const diff49 = max - min;\n  const diff50 = max - min;\n  const diff51 = max - min;\n  const diff52 = max - min;\n  const diff53 = max - min;\n  const diff54 = max - min;\n  const diff55 = max - min;\n  const diff56 = max - min;\n  const diff57 = max - min;\n  const diff58 = max - min;\n  const diff59 = max - min;\n  const diff60 = max - min;\n  const diff61 = max - min;\n  const diff62 = max - min;\n  const diff63 = max - min;\n  const diff64 = max - min;\n  const diff65 = max - min;\n  const diff66 = max - min;\n  const diff67 = max - min;\n  const diff68 = max - min;\n  const diff69 = max - min;\n  const diff70 = max - min;\n  const diff71 = max - min;\n  const diff72 = max - min;\n  const diff73 = max - min;\n  const diff74 = max - min;\n  const diff75 = max - min;\n  const diff76 = max - min;\n  const diff77 = max - min;\n  const diff78 = max - min;\n  const diff79 = max - min;\n  const diff80 = max - min;\n  const diff81 = max - min;\n  const diff82 = max - min;\n  const diff83 = max - min;\n  const diff84 = max - min;\n  const diff85 = max - min;\n  const diff86 = max - min;\n  const diff87 = max - min;\n  const diff88 = max - min;\n  const diff89 = max - min;\n  const diff90 = max - min;\n  const diff91 = max - min;\n  const diff92 = max - min;\n  const diff93 = max - min;\n  const diff94 = max - min;\n  const diff95 = max - min;\n  const diff96 = max - min;\n  const diff97 = max - min;\n  const diff98 = max - min;\n  const diff99 = max - min;\n  const diff100 = max - min;\n  const diff101 = max - min;\n  const diff102 = max - min;\n  const diff103 = max - min;\n  const diff104 = max - min;\n  const diff105 = max - min;\n  const diff106 = max - min;\n  const diff107 = max - min;\n  const diff108 = max - min;\n  const diff109 = max - min;\n  const diff110 = max - min;\n  const diff111 = max - min;\n  const diff112 = max - min;\n  const diff113 = max - min;\n  const diff114 = max - min;\n  const diff115 = max - min;\n  const diff116 = max - min;\n  const diff117 = max - min;\n  const diff118 = max - min;\n  const diff119 = max - min;\n  const diff120 = max - min;\n  const diff121 = max - min;\n  const diff122 = max - min;\n  const diff123 = max - min;\n  const diff124 = max - min;\n  const diff125 = max - min;\n  const diff126 = max - min;\n  const diff127 = max - min;\n  const diff128 = max - min;\n  const diff129 = max - min;\n  const diff130 = max - min;\n  const diff131 = max - min;\n  const diff132 = max - min;\n  const diff133 = max - min;\n  const diff134 = max - min;\n  const diff135 = max - min;\n  const diff136 = max - min;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where the numbers are scaled to the range [0, 1]\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitRange = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where the numbers are scaled to the range [0, 1]\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitRangeInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where the numbers are scaled to the range [0, 1]\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitRangeInverseInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where the numbers are scaled to the range [0, 1]\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitRangeInverseInverseInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where the numbers are scaled to the range [0, 1]\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitRangeInverseInverseInverseInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where the numbers are scaled to the range [0, 1]\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitRangeInverseInverseInverseInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where the numbers are scaled to the range [0, 1]\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnitRangeInverseInverseInverseInverseInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/* Filter given list of any python values only for strings\n  >>> filherStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filherStrings = (values) => {\n  return values.filter(v => typeof v ==='string')\n}\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  [5]\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean')\n}\n\n/* Filter given list of any python values only for objects\n  >>> filherObjects(['a', 3.14, 5])\n  [{}]\n  >>> filherObjects([1, 2, 3, 'abc', {}, []])\n  [{}, []]\n  */\nconst filherObjects = (values) => {\n  return values.filter(v => typeof v === 'object')\n}\n\n/* Filter given list of any python values only for lists\n  >>> filherLists(['a', 3.14, 5])\n  [5]\n  >>> filherLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherLists = (values) => {\n  return values.filter(v => typeof v === 'object')\n}\n\n/* Filter given list of any python values only for dictionaries\n  >>> filherDictionaries(['a', 3.14, 5])\n  [{}]\n  >>> filherDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, []]\n  */\nconst filherDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object')\n}\n\n/* Filter given list of any python values only for numbers\n  >>> filherNumbers(['a', 3.14, 5])\n  [5]\n  >>> filherNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherNumbers = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/* Filter given list of any python values only for strings\n  >>> filherStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filherStrings = (values) => {\n  return values.filter(v => typeof v ==='string')\n}\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  [5]\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean')\n}\n\n/* Filter given list of any python values only for objects\n  >>> filherObjects(['a', 3.14, 5])\n  [{}]\n  >>> filherObjects([1, 2, 3, 'abc', {}, []])\n  [{}, []]\n  */\nconst filherObjects = (values) => {\n  return values.filter(v => typeof v === 'object')\n}\n\n/* Filter given list of any python values only for lists\n  >>> filherLists(['a', 3.14, 5])\n  [5]\n  >>> filherLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherLists = (values) => {\n  return values.filter(v => typeof v === 'object')\n}\n\n/* Filter given list of any python values only for dictionaries\n  >>> filherDictionaries(['a', 3.14, 5])\n  [{}]\n  >>> filherDictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, []]\n  */\nconst filherDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object')\n}\n\n/* Filter given list of any python values only for numbers\n  >>> filherNumbers(['a', 3.14, 5])\n  [5]\n  >>> filherNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherNumbers = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/* Filter given list of any python values only for strings\n  >>> filherStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filherStrings = (values) => {\n  return values.filter(v => typeof v ==='string')\n}\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  [5]\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean')\n}\n\n/* Filter given list of any python values only for objects\n  >>>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  let i = 0,\n    len = string.length,\n    code = 0,\n    char = string.charCodeAt(i);\n\n  while (i < len) {\n    code = char | (string.charCodeAt(++i) << 8);\n    if (code > 0xffff) {\n      code -= 0x10000;\n      char = string.charCodeAt(++i);\n      code = (code << 16) | char;\n    }\n    if (code > 0xffffff) {\n      code -= 0x1000000;\n      char = string.charCodeAt(++i);\n      code = (code << 8) | char;\n    }\n    if (code > 0xffffffff) {\n      code -= 0x100000000;\n      char = string.charCodeAt(++i);\n      code = (code << 4) | (char & 0xf);\n    }\n    if (code > 0xffffffffff) {\n      code -= 0x10000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 3) | (char & 0x7);\n    }\n    if (code > 0xffffffffffff) {\n      code -= 0x100000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 2) | (char & 0x3);\n    }\n    if (code > 0xffffffffffffff) {\n      code -= 0x1000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 1) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffff) {\n      code -= 0x10000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffff) {\n      code -= 0x100000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffff) {\n      code -= 0x1000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffff) {\n      code -= 0x10000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffff) {\n      code -= 0x100000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffffff) {\n      code -= 0x1000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffffffff) {\n      code -= 0x100000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffffffffff) {\n      code -= 0x10000000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffffffffffff) {\n      code -= 0x100000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffffffffffffff) {\n      code -= 0x10000000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffffffffffffffff) {\n      code -= 0x100000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffffffffffffffffff) {\n      code -= 0x10000000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffffffffffffffffffff) {\n      code -= 0x100000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffffffffffffffffffffff) {\n      code -= 0x10000000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffffffffffffffffffffffff) {\n      code -= 0x100000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffffffffffffffffffffffffff) {\n      code -= 0x10000000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffffffffffffffffffffffffffff) {\n      code -= 0x100000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1);\n    }\n    if (code > 0xffffffffffffffffffffffffffffffffffffffffffffffffff) {\n      code -= 0x10000000000000000000;\n      char = string.charCodeAt(++i);\n      code = (code << 0) | (char & 0x1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let largest = 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larhestDivisor(15)\n  7\n  */\nconst larhestDivisor2 = (n) => {\n  let largest = n + 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor3 = (n) => {\n  let largest = n - 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larhestDivisor(15)\n  7\n  */\nconst larhestDivisor4 = (n) => {\n  let largest = n + 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor5 = (n) => {\n  let largest = n - 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larhestDivisor(15)\n  7\n  */\nconst larhestDivisor6 = (n) => {\n  let largest = n + 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor7 = (n) => {\n  let largest = n - 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larhestDivisor(15)\n  7\n  */\nconst larhestDivisor8 = (n) => {\n  let largest = n + 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor9 = (n) => {\n  let largest = n - 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larhestDivisor(15)\n  7\n  */\nconst larhestDivisor10 = (n) => {\n  let largest = n + 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor11 = (n) => {\n  let largest = n - 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larhestDivisor(15)\n  7\n  */\nconst larhestDivisor12 = (n) => {\n  let largest = n + 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor13 = (n) => {\n  let largest = n - 1;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      largest = i;\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larhestDivisor(15)\n  7\n  */\nconst larhestDivisor14 = (n) => {\n  let largest = n + 1;\n  let i = 2;\n  while (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  const factors = []\n  const factors_count = []\n  const factors_sum = []\n  const factors_sum_count = []\n  const factors_sum_count_sum = []\n  const factors_sum_count_sum_sum = []\n  const factors_sum_count_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_sum_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\nexport default remlveDuplicates;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip uppercase characters to lowercase and lowercase to uppercase.\n  >>> flioCase('Hello')\n  'hello'\n  */\nconst flioUpperCase = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to lowercase.\n  >>> flioCase('Hello')\n  'hello'\n  */\nconst flioLowerCase = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioUpperCaseAll = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to lowercase.\n  >>> flioCase('Hello')\n  'hello'\n  */\nconst flioLowerCaseAll = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioUpperCaseAllAll = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to lowercase.\n  >>> flioCase('Hello')\n  'hello'\n  */\nconst flioLowerCaseAllAll = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioUpperCaseAllAllAll = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to lowercase.\n  >>> flioCase('Hello')\n  'hello'\n  */\nconst flioLowerCaseAllAllAll = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioUpperCaseAllAllAllAll = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to lowercase.\n  >>> flioCase('Hello')\n  'hello'\n  */\nconst flioLowerCaseAllAllAllAll = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioUpperCaseAllAllAllAllAll = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to lowercase.\n  >>> flioCase('Hello')\n  'hello'\n  */\nconst flioLowerCaseAllAllAllAllAll = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioUpperCaseAllAllAllAllAllAll = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to lowercase.\n  >>> flioCase('Hello')\n  'hello'\n  */\nconst flioLowerCaseAllAllAllAllAllAll = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioUpperCaseAllAllAllAllAllAllAll = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to lowercase.\n  >>> flioCase('Hello')\n  'hello'\n  */\nconst flioLowerCaseAllAllAllAllAllAllAll = (string) => {\n  return string.replace(/[A-Z]/g, (char) => {\n    return char.toLowerCase();\n  });\n};\n\n/*\n  For a given string, flip all letters to uppercase.\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioUpperCaseAllAllAllAllAllAllAll", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', '", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = bellwZero;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive2 = (l) => {\n  return l.filter((x) => x > 0).sort((a, b) => a - b);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive3 = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive4 = (l) => {\n  return l.sort((a, b) => a - b).filter((x) => x > 0);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive5 = (l) => {\n  return l.sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive6 = (l) => {\n  return l.sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b).filter((x) => x > 0);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive7 = (l) => {\n  return l.sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive8 = (l) => {\n  return l.sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive9 = (l) => {\n  return l.sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive10 = (l) => {\n  return l.sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b).filter((x) => x > 0).sort((a, b) => a - b);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\n/*\n  >>> isPnprime(6)\n  false\n  >>> isPnprime(101)\n  false\n  >>> isPnprime(11)\n  false\n  >>> isPnprime(13441)\n  false\n  >>> isPnprime(61)\n  false\n  >>> isPnprime(4)\n  true\n  >>> isPnprime(1)\n  false\n  */\nconst isPnprime = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\n/*\n  >>> isPnprime(6)\n  true\n  >>> isPnprime(101)\n  true\n  >>> isPnprime(11)\n  true\n  >>> isPnprime(13441)\n  true\n  >>> isPnprime(61)\n  true\n  >>> isPnprime(4)\n  false\n  >>> isPnprime(1)\n  false\n  */\nconst isPnprime = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\n/*\n  >>> isPnprime(6)\n  true\n  >>> isPnprime(101)\n  true\n  >>> isPnprime(11)\n  true\n  >>> isPnprime(13441)\n  true\n  >>> isPnprime(61)\n  true\n  >>> isPnprime(4)\n  false\n  >>> isPnprime(1)\n  false\n  */\nconst isPnprime = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\n/*\n  >>> isPnprime(6)\n  true\n  >>> isPnprime(101)\n  true\n  >>> isPnprime(11)\n  true\n  >>> isPnprime(13441)\n  true\n  >>> isPnprime(61)\n  true\n  >>> isPnprime(4)\n  false\n  >>> isPnprime(1)\n  false\n  */\nconst isPnprime = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\n/*\n  >>> isPnprime(6)\n  true\n  >>> isPnprime(101)\n  true\n  >>> isPnprime(11)\n  true\n  >>> isPnprime(13441)\n  true\n  >>> isPnprime(61)\n  true\n  >>> isPnprime(4)\n  false\n  >>> isPnprime(1)\n  false\n  */\nconst isPnprime = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\n/*\n  >>> isPnprime(6)\n  true\n  >>> isPnprime(101)\n  true\n  >>> isPnprime(11)\n  true\n  >>> isPnprime(13441)\n  true\n  >>> isPnprime(61)\n  true\n  >>> isPnprime(4)\n  false\n  >>> isPnprime(1)\n  false\n  */\nconst isPnprime = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\n/*\n  >>> isPnprime(6)\n  true\n  >>> isPnprime(101)\n  true\n  >>> isPnprime(11)\n  true\n  >>> isPnprime(13441)\n  true\n  >>> isPnprime(61)\n  true\n  >>> isPnprime(4)\n  false\n  >>> isPnprime(1)\n  false\n  */\nconst isPnprime = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\n/*\n  >>> isPnprime(6)\n  true\n  >>> isPnprime(101)\n  true\n  >>> isPnprime(11)\n  true\n  >>> isPnprime(13441)\n  true\n  >>> isPnprime(61)\n  true\n  >>> isPnprime(4)\n  false\n  >>> isPnprime(1)\n  false\n  */\nconst isPnprime = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\n/*\n  >>> isPnprime(6)\n  true\n  >>> isPnprime(101)\n  true\n  >>> isPnprime(11)\n  true\n  >>> isPnprime(13441)\n  true\n  >>> isPnprime(61)\n  true\n  >>> isPnprime(4)\n  false\n  >>> isPnprime(1)\n  false\n  */\nconst isP", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let x = 0;\n  let y = 0;\n  let i = 0;\n  while (i < n) {\n    y = xs[i];\n    x = xs[i + 1];\n    if (y === 0) {\n      return x;\n    }\n    i += 2;\n  }\n  return -1;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly10 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n  const lCopy = l.slice();\n  const lCopySorted = lCopy.sort();\n  const lCopySortedLength = lCopySorted.length;\n  const lCopySortedLengthDivThree = lCopySortedLength % 3;\n  const lCopySortedLengthDivThreeRemainder = lCopySortedLengthDivThree % 3;\n  const lCopySortedLengthDivThreeRemainderRemainder = lCopySortedLengthDivThreeRemainder % 3;\n  const lCopySortedLengthDivThreeRemainderRemainderRemainder = lCopySortedLengthDivThreeRemainderRemainder % 3;\n  const lCopySortedLengthDivThreeRemainderRemainderRemainderRemainder = lCopySortedLengthDivThreeRemainderRemainderRemainder % 3;\n  const lCopySortedLengthDivThreeRemainderRemainderRemainderRemainderRemainder = lCopySortedLengthDivThreeRemainderRemainderRemainderRemainder % 3;\n  const lCopySortedLengthDivThreeRemainderRemainderRemainderRemainderRemainderRemainder = lCopySortedLengthDivThreeRemainderRemainderRemainderRemainderRemainder % 3;\n  const lCopySortedLengthDivThreeRemainderRemainderRemainderRemainderRemainderRemainderRemainder = lCopySortedLengthDivThreeRemainderRemainderRemainderRemainderRemainderRemainder % 3;\n  const lCopySortedLengthDivThreeRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder = lCopySortedLengthDivThreeRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder % 3;\n  const lCopySortedLengthDivThreeRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder = lCopySortedLengthDivThreeRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder % 3;\n  const lCopySortedLengthDivThreeRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemain", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.filter(x => x!== sorted[0]);\n};\n\n/*\n  Return the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst first = (l) => l[0];\n\n/*\n  Return the last element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  */\nconst last = (l) => l[l.length - 1];\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst indexOf = (l, x) => l.indexOf(x);\n\n/*\n  Return the index of the last element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst lastIndexOf = (l, x) => l.lastIndexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst indexOfLast = (l, x) => l.lastIndexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst indexOfFirst = (l, x) => l.indexOf(x);\n\n/*\n  Return the index of the last element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst lastIndexOfFirst = (l, x) => l.indexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst indexOfLastFirst = (l, x) => l.lastIndexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst indexOfLastLast = (l, x) => l.lastIndexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst indexOfFirstLast = (l, x) => l.indexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst indexOfFirstFirst = (l, x) => l.indexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst indexOfLastLast = (l, x) => l.lastIndexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst indexOfLastFirst = (l, x) => l.lastIndexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst indexOfFirstLast = (l, x) => l.indexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst indexOfLastFirst = (l, x) => l.lastIndexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst indexOfFirst = (l, x) => l.indexOf(x);\n\n/*\n  Return the index of the last element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst lastIndexOfFirst = (l, x) => l.lastIndexOf(x);\n\n/*\n  Return the index of the last element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst lastIndexOfLast = (l, x) => l.lastIndexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst lastIndexOfFirst = (l, x) => l.lastIndexOf(x);\n\n/*\n  Return the index of the last element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst lastIndexOfLast = (l, x) => l.lastIndexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst lastIndexOfFirst = (l, x) => l.lastIndexOf(x);\n\n/*\n  Return the index of the first element in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  */\nconst lastIndexOfLast = (l, x) => l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  const divisors = [11, 13]\n  const divisor = divisors[Math.floor(Math.random() * divisors.length)]\n  const divisorPower = Math.pow(divisor, n)\n  const divisorDigits = divisorPower.toString().split('').reverse()\n  const divisorDigitsLength = divisorDigits.length\n  const divisorDigitsLengthMinusOne = divisorDigitsLength - 1\n  const divisorDigitsLengthMinusTwo = divisorDigitsLength - 2\n  const divisorDigitsLengthMinusThree = divisorDigitsLength - 3\n  const divisorDigitsLengthMinusFour = divisorDigitsLength - 4\n  const divisorDigitsLengthMinusFive = divisorDigitsLength - 5\n  const divisorDigitsLengthMinusSix = divisorDigitsLength - 6\n  const divisorDigitsLengthMinusSeven = divisorDigitsLength - 7\n  const divisorDigitsLengthMinusEight = divisorDigitsLength - 8\n  const divisorDigitsLengthMinusNine = divisorDigitsLength - 9\n  const divisorDigitsLengthMinusTen = divisorDigitsLength - 10\n  const divisorDigitsLengthMinusEleven = divisorDigitsLength - 11\n  const divisorDigitsLengthMinusTwelve = divisorDigitsLength - 12\n  const divisorDigitsLengthMinusThirteen = divisorDigitsLength - 13\n  const divisorDigitsLengthMinusFourteen = divisorDigitsLength - 14\n  const divisorDigitsLengthMinusFifteen = divisorDigitsLength - 15\n  const divisorDigitsLengthMinusSixteen = divisorDigitsLength - 16\n  const divisorDigitsLengthMinusSeventeen = divisorDigitsLength - 17\n  const divisorDigitsLengthMinusEighteen = divisorDigitsLength - 18\n  const divisorDigitsLengthMinusNineteen = divisorDigitsLength - 19\n  const divisorDigitsLengthMinusTwenty = divisorDigitsLength - 20\n  const divisorDigitsLengthMinusTwentyOne = divisorDigitsLength - 21\n  const divisorDigitsLengthMinusTwentyTwo = divisorDigitsLength - 22\n  const divisorDigitsLengthMinusTwentyThree = divisorDigitsLength - 23\n  const divisorDigitsLengthMinusTwentyFour = divisorDigitsLength - 24\n  const divisorDigitsLengthMinusTwentyFive = divisorDigitsLength - 25\n  const divisorDigitsLengthMinusTwentySix = divisorDigitsLength - 26\n  const divisorDigitsLengthMinusTwentySeven = divisorDigitsLength - 27\n  const divisorDigitsLengthMinusTwentyEight = divisorDigitsLength - 28\n  const divisorDigitsLengthMinusTwentyNine = divisorDigitsLength - 29\n  const divisorDigitsLengthMinusThirty = divisorDigitsLength - 30\n  const divisorDigitsLengthMinusThirtyOne = divisorDigitsLength - 31\n  const divisorDigitsLengthMinusThirtyTwo = divisorDigitsLength - 32\n  const divisorDigitsLengthMinusThirtyThree = divisorDigitsLength - 33\n  const divisorDigitsLengthMinusThirtyFour = divisorDigitsLength - 34\n  const divisorDigitsLengthMinusThirtyFive = divisorDigitsLength - 35\n  const divisorDigitsLengthMinusThirtySix = divisorDigitsLength - 36\n  const divisorDigitsLengthMinusThirtySeven = divisorDigitsLength - 37\n  const divisorDigitsLengthMinusThirtyEight = divisorDigitsLength - 38\n  const divisorDigitsLengthMinusThirtyNine = divisorDigitsLength - 39\n  const divisorDigitsLengthMinusForty = divisorDigitsLength - 40\n  const divisorDigitsLengthMinusFortyOne = divisorDigitsLength - 41\n  const divisorDigitsLengthMinusFortyTwo = divisorDigitsLength - 42\n  const divisorDigitsLengthMinusFortyThree = divisorDigitsLength - 43\n  const divisorDigitsLengthMinusFortyFour = divisorDigitsLength - 44\n  const divisorDigitsLengthMinusFortyFive = divisorDigitsLength - 45\n  const divisorDigitsLengthMinusFortySix = divisorDigitsLength - 46\n  const divisorDigitsLengthMinusFortySeven = divisorDigitsLength - 47\n  const divisorDigitsLengthMinusFortyEight = divisorDigitsLength - 48\n  const divisorDigitsLengthMinusFortyNine = divisorDigitsLength - 49\n  const divisorDigitsLengthMinusFifty = divisorDigitsLength - 50\n  const divisorDigitsLengthMinusFiftyOne = divisorDigitsLength - 51\n  const divisorDigitsLengthMinusFiftyTwo = divisorDigitsLength - 52\n  const divisorDigitsLengthMinusFiftyThree = divisorDigitsLength - 53\n  const divisorDigitsLengthMinusFiftyFour = divisorDigitsLength - 54\n  const divisorDigitsLengthMinusFiftyFive = divisorDigitsLength - 55\n  const divisorDigitsLengthMinusFiftySix = divisorDigitsLength - 56\n  const divisorDigitsLengthMinusFiftySeven = divisorDigitsLength - 57\n  const divisorDigitsLengthMinusFiftyEight = divisorDigitsLength - 58\n  const divisorDigitsLengthMinusFiftyNine = divisorDigitsLength - 59\n  const divisorDigitsLengthMinusSixty = divisorDigitsLength - 60\n  const divisorDigitsLengthMinusSixtyOne = divisorDigitsLength - 61\n  const divisorDigitsLengthMinus", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\nmodule.exports = sorhEven;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n  let fib = 1,\n    fib2 = 2,\n    fib3 = 3,\n    fib4 = 5,\n    fib5 = 13,\n    fib6 = 89,\n    fib7 = 233,\n    fib8 = 571,\n    fib9 = 1265,\n    fib10 = 2233,\n    fib11 = 4571,\n    fib12 = 9233,\n    fib13 = 18689,\n    fib14 = 28657,\n    fib15 = 39241,\n    fib16 = 51849,\n    fib17 = 63617,\n    fib18 = 73637,\n    fib19 = 83737,\n    fib20 = 93737,\n    fib21 = 103737,\n    fib22 = 113737,\n    fib23 = 123737,\n    fib24 = 133737,\n    fib25 = 143737,\n    fib26 = 153737,\n    fib27 = 163737,\n    fib28 = 173737,\n    fib29 = 183737,\n    fib30 = 193737,\n    fib31 = 203737,\n    fib32 = 213737,\n    fib33 = 223737,\n    fib34 = 233737,\n    fib35 = 243737,\n    fib36 = 253737,\n    fib37 = 263737,\n    fib38 = 273737,\n    fib39 = 283737,\n    fib40 = 293737,\n    fib41 = 303737,\n    fib42 = 313737,\n    fib43 = 323737,\n    fib44 = 333737,\n    fib45 = 343737,\n    fib46 = 353737,\n    fib47 = 363737,\n    fib48 = 373737,\n    fib49 = 383737,\n    fib50 = 393737,\n    fib51 = 403737,\n    fib52 = 413737,\n    fib53 = 423737,\n    fib54 = 433737,\n    fib55 = 443737,\n    fib56 = 453737,\n    fib57 = 463737,\n    fib58 = 473737,\n    fib59 = 483737,\n    fib60 = 493737,\n    fib61 = 503737,\n    fib62 = 513737,\n    fib63 = 523737,\n    fib64 = 533737,\n    fib65 = 543737,\n    fib66 = 553737,\n    fib67 = 563737,\n    fib68 = 573737,\n    fib69 = 583737,\n    fib70 = 593737,\n    fib71 = 603737,\n    fib72 = 613737,\n    fib73 = 623737,\n    fib74 = 633737,\n    fib75 = 643737,\n    fib76 = 653737,\n    fib77 = 663737,\n    fib78 = 673737,\n    fib79 = 683737,\n    fib80 = 693737,\n    fib81 = 703737,\n    fib82 = 713737,\n    fib83 = 723737,\n    fib84 = 733737,\n    fib85 = 743737,\n    fib86 = 753737,\n    fib87 = 763737,\n    fib88 = 773737,\n    fib89 = 783737,\n    fib90 = 793737,\n    fib91 = 803737,\n    fib92 = 813737,\n    fib93 = 823737,\n    fib94 = 833737,\n    fib95 = 843737,\n    fib96 = 853737,\n    fib97 = 863737,\n    fib98 = 873737,\n    fib99 = 883737,\n    fib100 = 893737,\n    fib101 = 903737,\n    fib102 = 913737,\n    fib103 = 923737,\n    fib104 = 933737,\n    fib105 = 943737,\n    fib106 = 953737,\n    fib107 = 963737,\n    fib108 = 973737,\n    fib109 = 983737,\n    fib110 = 993737,\n    fib111 = 1003737,\n    fib112 = 1013737,\n    fib113 = 1023737,\n    fib114 = 1033737,\n    fib115 = 1043737,\n    fib116 = 1053737,\n    fib117 = 1063737,\n    fib118 = 1073737,\n    fib119 = 1083737,\n    fib120 = 1093737,\n    fib121 = 1103737,\n    fib122 = 1113737,\n    fib123 = 1123737,\n    fib124 = 1133737,\n    fib125 = 1143737,\n    fib126 = 1153737,\n    fib127 = 1163737,\n    fib128 = 1173737,\n    fib129 = 1183737,\n    fib130 = 1193737,\n    fib131 = 1203737,\n    fib132 = 121_3737,\n    fib133 = 122_3737,\n    fib134 = 123_3737,\n    fib135 = 124_3737,\n    fib136 = 125_3737,\n    fib137 = 126_3737,\n    fib138 = 127_3737,\n    fib139 = 128_3737,\n    fib140 = 129_3737,\n    fib141 = 130_3737,\n    fib142 = 131_3737,\n    fib143 = 132_3737,\n    fib144 = 133_3737,\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return mean(deviation(numbers));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst stdDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(mean(deviation(numbers)));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst stdDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(mean(deviation(numbers)));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst stdDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(mean(deviation(numbers)));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst stdDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(mean(deviation(numbers)));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst stdDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(mean(deviation(numbers)));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst stdDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(mean(deviation(numbers)));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst stdDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(mean(deviation(numbers)));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst stdDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(mean(deviation(numbers)));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst stdDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(mean(deviation(numbers)));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.41421\n  */\nconst stdDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.pow", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0 && sorted.length === 3;\n};\n\nmodule.exports = triolesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n  let collisions = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  while (i < n) {\n    while (j < n) {\n      while (k < n) {\n        while (l < n) {\n          if (i == j || i == k || i == l || j == k || j == l || k == l) {\n            collisions++;\n          }\n          l++;\n        }\n        l = 0;\n        k++;\n      }\n      k = 0;\n      j++;\n    }\n    j = 0;\n    i++;\n  }\n  return collisions;\n};\n\nconsole.log(carGaceCollision(10));\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  const incgList = (l) => {\n    const incgList = (l) => {\n      const incgList = (l) => {\n        const incgList = (l) => {\n          const incgList = (l) => {\n            const incgList = (l) => {\n              const incgList = (l) => {\n                const incgList = (l) => {\n                  const incgList = (l) => {\n                    const incgList = (l) => {\n                      const incgList = (l) => {\n                        const incgList = (l) => {\n                          const incgList = (l) => {\n                            const incgList = (l) => {\n                              const incgList = (l) => {\n                                const incgList = (l) => {\n                                  const incgList = (l) => {\n                                    const incgList = (l) => {\n                                      const incgList = (l) => {\n                                        const incgList = (l) => {\n                                          const incgList = (l) => {\n                                            const incgList = (l) => {\n                                              const incgList = (l) => {\n                                                const incgList = (l) => {\n                                                  const incgList = (l) => {\n                                                    const incgList = (l) => {\n                                                      const incgList = (l) => {\n                                                        const incgList = (l) => {\n                                                          const incgList = (l) => {\n                                                           const incgList = (l) => {\n                                                            const incgList = (l) => {\n                                                              const incgList = (l) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return incgList(l)\n}\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList2 = (l) => {\n  const incgList = (l) => {\n    const incgList = (l) => {\n      const incgList = (l) => {\n        const incgList = (l) => {\n          const incgList = (l) => {\n            const incgList = (l) => {\n              const incgList = (l) => {\n                const incgList = (l) => {\n                  const incgList = (l) => {\n                    const incgList = (l) => {\n                      const incgList = (l) => {\n                        const incgList = (l) => {\n                          const incgList = (l) => {\n                            const incgList = (l) => {\n                              const incgList = (l) => {\n                                const incgList = (l) => {\n                                  const incgList = (l) => {\n                                    const incgList = (l) => {\n                                      const incgList = (l) => {\n                                        const incgList = (l) => {\n                                          const incgList = (l) => {\n                                            const incgList = (l) => {\n                                              const incgList = (l) => {\n                                                const incgList = (l) => {\n                                                  const incgList = (l) => {\n                                                    const incgList = (l) => {\n                                                      const incgList = (l) => {\n                                                        const incgList = (l) => {\n                                                          const incgList = (l) => {\n                                                           const incgList = (l) => {\n                                                            const incgList = (l) => {\n                                                              const incgList = (l) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return incgList(l)\n}\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum === 0\n}\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> countChar('')\n  0\n  >>> countChar('abc')\n  3\n  >>> countChar('abcd')\n  4\n  >>> countChar('abcd')\n  4\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.charAt(i).length;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> countChar('')\n  0\n  >>> countChar('abc')\n  3\n  >>> countChar('abcd')\n  4\n  >>> countChar('abcd')\n  4\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.charAt(i).length;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> countChar('')\n  0\n  >>> countChar('abc')\n  3\n  >>> countChar('abcd')\n  4\n  >>> countChar('abcd')\n  4\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.charAt(i).length;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> countChar('')\n  0\n  >>> countChar('abc')\n  3\n  >>> countChar('abcd')\n  4\n  >>> countChar('abcd')\n  4\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.charAt(i).length;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> countChar('')\n  0\n  >>> countChar('abc')\n  3\n  >>> countChar('abcd')\n  4\n  >>> countChar('abcd')\n  4\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.charAt(i).length;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> countChar('')\n  0\n  >>> countChar('abc')\n  3\n  >>> countChar('abcd')\n  4\n  >>> countChar('abcd')\n  4\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.charAt(i).length;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> countChar('')\n  0\n  >>> countChar('abc')\n  3\n  >>> countChar('abcd')\n  4\n  >>> countChar('abcd')\n  4\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.charAt(i).length;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> countChar('')\n  0\n  >>> countChar('abc')\n  3\n  >>> countChar('abcd')\n  4\n  >>> countChar('abcd')\n  4\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.charAt(i).length;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> countChar('')\n  0\n  >>> countChar('abc')\n  3\n  >>> countChar('abcd')\n  4\n  >>> countChar('abcd')\n  4\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.charAt(i).length;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> countChar('')\n  0\n  >>> countChar('abc')\n  3\n  >>> countChar('abcd')\n  4\n  >>> countChar('abcd')\n  4\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.charAt(i).length;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> countChar('')\n  0\n  >>> countChar('abc')\n  3\n  >>> countChar('abcd')\n  4\n  >>> countChar('abcd')\n  4\n  */\nconst countChar = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.charAt(i).length;\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of characters", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngle", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconst fib4_2 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_2(n - 1) + fib4_2(n - 2) + fib4_2(n - 3) + fib4_2(n - 4)\n}\n\nconst fib4_3 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_3(n - 1) + fib4_3(n - 2) + fib4_3(n - 3) + fib4_3(n - 4)\n}\n\nconst fib4_4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_4(n - 1) + fib4_4(n - 2) + fib4_4(n - 3) + fib4_4(n - 4)\n}\n\nconst fib4_5 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_5(n - 1) + fib4_5(n - 2) + fib4_5(n - 3) + fib4_5(n - 4)\n}\n\nconst fib4_6 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_6(n - 1) + fib4_6(n - 2) + fib4_6(n - 3) + fib4_6(n - 4)\n}\n\nconst fib4_7 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_7(n - 1) + fib4_7(n - 2) + fib4_7(n - 3) + fib4_7(n - 4)\n}\n\nconst fib4_8 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_8(n - 1) + fib4_8(n - 2) + fib4_8(n - 3) + fib4_8(n - 4)\n}\n\nconst fib4_9 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_9(n - 1) + fib4_9(n - 2) + fib4_9(n - 3) + fib4_9(n - 4)\n}\n\nconst fib4_10 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_10(n - 1) + fib4_10(n - 2) + fib4_10(n - 3) + fib4_10(n - 4)\n}\n\nconst fib4_11 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_11(n - 1) + fib4_11(n - 2) + fib4_11(n - 3) + fib4_11(n - 4)\n}\n\nconst fib4_12 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_12(n - 1) + fib4_12(n - 2) + fib4_12(n - 3) + fib4_12(n - 4)\n}\n\nconst fib4_13 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_13(n - 1) + fib4_13(n - 2) + fib4_13(n - 3) + fib4_13(n - 4)\n}\n\nconst fib4_14 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_14(n - 1) + fib4_14(n - 2) + fib4_14(n - 3) + fib4_14(n - 4)\n}\n\nconst fib4_15 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_15(n - 1) + fib4_15(n - 2) + fib4_15(n - 3) + fib4_15(n - 4)\n}\n\nconst fib4_16 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4_16(n - 1) + fib4_16(n - 2) + fib4_16(n - 3", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n  let len = l.length;\n  let median = l[len / 2];\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      median = l[i];\n      i++;\n    } else {\n      median = l[j];\n      j--;\n    }\n  }\n  return median;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let len = l.length;\n  let median = l[len / 2];\n  if (len % 2 === 0) {\n    median = (l[len / 2 - 1] + l[len / 2]) / 2;\n  }\n  return median;\n};\n\n/*Return the mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.5\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  13.0\n  */\nconst mean = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let max = 0;\n  let max_index = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n};\n\n/*Return the median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let len = l.length;\n  let median = l[len / 2];\n  if (len % 2 === 0) {\n    median = (l[len / 2 - 1] + l[len / 2]) / 2;\n  }\n  return median;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let max = 0;\n  let max_index = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let max = 0;\n  let max_index = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let max = 0;\n  let max_index = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let max = 0;\n  let max_index = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let max = 0;\n  let max_index = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  let max = 0;\n  let max_index = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  true\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalind", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  Return the number of times that a number can be divided by a number\n  without remainder.\n  >>> divisor(3, 5)\n  2\n  >>> divisor(1101, 101)\n  3\n  >>> divisor(0, 101)\n  1\n  >>> divisor(3, 11)\n  2\n  >>> divisor(100, 101)\n  1\n  */\nconst divisor = (n, p) => {\n  let i = 1;\n  while (n % p === 0) {\n    n = n / p;\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the number of times that a number can be divided by a number\n  without remainder.\n  >>> divisor(3, 5)\n  2\n  >>> divisor(1101, 101)\n  3\n  >>> divisor(0, 101)\n  1\n  >>> divisor(3, 11)\n  2\n  >>> divisor(100, 101)\n  1\n  */\nconst divisor2 = (n, p) => {\n  let i = 0;\n  while (n % p === 0) {\n    n = n / p;\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the number of times that a number can be divided by a number\n  without remainder.\n  >>> divisor(3, 5)\n  2\n  >>> divisor(1101, 101)\n  3\n  >>> divisor(0, 101)\n  1\n  >>> divisor(3, 11)\n  2\n  >>> divisor(100, 101)\n  1\n  */\nconst divisor3 = (n, p) => {\n  let i = 0;\n  while (n % p === 0) {\n    n = n / p;\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the number of times that a number can be divided by a number\n  without remainder.\n  >>> divisor(3, 5)\n  2\n  >>> divisor(1101, 101)\n  3\n  >>> divisor(0, 101)\n  1\n  >>> divisor(3, 11)\n  2\n  >>> divisor(100, 101)\n  1\n  */\nconst divisor4 = (n, p) => {\n  let i = 0;\n  while (n % p === 0) {\n    n = n / p;\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the number of times that a number can be divided by a number\n  without remainder.\n  >>> divisor(3, 5)\n  2\n  >>> divisor(1101, 101)\n  3\n  >>> divisor(0, 101)\n  1\n  >>> divisor(3, 11)\n  2\n  >>> divisor(100, 101)\n  1\n  */\nconst divisor5 = (n, p) => {\n  let i = 0;\n  while (n % p === 0) {\n    n = n / p;\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the number of times that a number can be divided by a number\n  without remainder.\n  >>> divisor(3, 5)\n  2\n  >>> divisor(1101, 101)\n  3\n  >>> divisor(0, 101)\n  1\n  >>> divisor(3, 11)\n  2\n  >>> divisor(100, 101)\n  1\n  */\nconst divisor6 = (n, p) => {\n  let i = 0;\n  while (n % p === 0) {\n    n = n / p;\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the number of times that a number can be divided by a number\n  without remainder.\n  >>> divisor(3, 5)\n  2\n  >>> divisor(1101, 101)\n  3\n  >>> divisor(0, 101)\n  1\n  >>> divisor(3, 11)\n  2\n  >>> divisor(100, 101)\n  1\n  */\nconst divisor7 = (n, p) => {\n  let i = 0;\n  while (n % p === 0) {\n    n = n / p;\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the number of times that a number can be divided by a number\n  without remainder.\n  >>> divisor(3, 5)\n  2\n  >>> divisor(1101, 101)\n  3\n  >>> divisor(0, 101)\n  1\n  >>> divisor(3, 11)\n  2\n  >>> divisor(100, 101)\n  1\n  */\nconst divisor8 = (n, p) => {\n  let i = 0;\n  while (n % p === 0) {\n    n = n / p;\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the number of times that a number can be divided by a number\n  without remainder.\n  >>> divisor(3, 5)\n  2\n  >>> divisor(1101, 101)\n  3\n  >>> divisor(0, 101)\n  1\n  >>> divisor(3, 11)\n  2\n  >>> divisor(100, 101)\n  1\n  */\nconst divisor9 = (n, p) => {\n  let i = 0;\n  while (n % p === 0) {\n    n = n / p;\n    i++;\n  }\n  return i;\n};\n\n/*\n  Return the number of times that a number can be divided by a number\n  without remainder.\n  >>> divisor(3, 5)\n  2\n  >>> divisor(1101, 101)\n  3\n  >>> divis", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  while (i < numbers.length - 1) {\n    result.push(numbers[i])\n    i++\n    if (i < numbers.length - 1) {\n      result.push(delimeter)\n    }\n  }\n  result.push(numbers[i])\n  return result\n}\n\n/**\n  * @param {number} n\n  * @param {number} k\n  * @return {number}\n  * @example\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 1)\n  * // => 2\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 2)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 3)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 5)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 6)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 7)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 8)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 9)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 10)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 11)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 12)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 13)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 14)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 15)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 16)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 17)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 18)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 19)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 20)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 21)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 22)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 23)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 24)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 25)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 26)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 27)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 28)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 29)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 30)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 31)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 32)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 33)\n  * // => 3\n  * intfract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 34)\n  * // => 3\n  * intfract([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift14 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift15 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const newText = text.replace(/[aeiouAEIOU]/g, '')\n  return newText\n}\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'aB'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '=', '+', '{', '}', '[', ']', '|', ':', ';', '\\'', '\"', '.', '?', '~', '`', '\\\\', '/', '<', '>', '|passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold2 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold3 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold4 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold5 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold6 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold7 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold8 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold9 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold10 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold11 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold12 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold13 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwTh", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add29 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add30 = (x, y) => {\n  return x + y;\n};\n\n/*", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> samfSame('eabcd', 'dddddddabc')\n  true\n  >>> samfSame('abcd', 'dddddddabce')\n  false\n  >>> samfSame('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfSame = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same, ignoring case.\n  >>> samfSameIgnoreCase('eabcd', 'dddddddabc')\n  true\n  >>> samfSameIgnoreCase('abcd', 'dddddddabce')\n  true\n  >>> samfSameIgnoreCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  true\n  */\nconst samfSameIgnoreCase = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toLowerCase()) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same, ignoring case.\n  >>> samfSameIgnoreCase('eabcd', 'dddddddabc')\n  true\n  >>> samfSameIgnoreCase('abcd', 'dddddddabce')\n  true\n  >>> samfSameIgnoreCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  true\n  */\nconst samfSameIgnoreCase2 = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i].toUpperCase()!== s1[i].toUpperCase()) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same, ignoring case.\n  >>> samfSameIgnoreCase('eabcd', 'dddddddabc')\n  true\n  >>> samfSameIgnoreCase('abcd', 'dddddddabce')\n  true\n  >>> samfSameIgnoreCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  true\n  */\nconst samfSameIgnoreCase3 = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toUpperCase()) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same, ignoring case.\n  >>> samfSameIgnoreCase('eabcd', 'dddddddabc')\n  true\n  >>> samfSameIgnoreCase('abcd', 'dddddddabce')\n  true\n  >>> samfSameIgnoreCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  true\n  */\nconst samfSameIgnoreCase4 = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i].toUpperCase()!== s1[i].toLowerCase()) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same, ignoring case.\n  >>> samfSameIgnoreCase('eabcd', 'dddddddabc')\n  true\n  >>> samfSameIgnoreCase('abcd', 'dddddddabce')\n  true\n  >>> samfSameIgnoreCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  true\n  */\nconst samfSameIgnoreCase5 = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0; i < len; i++) {\n    if (s0[i].toLowerCase()!== s1[i].toUpperCase()) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same, ignoring case.\n  >>> samfSameIgnoreCase('eabcd', 'dddddddabc')\n  true\n  >>> samfSameIgnoreCase('abcd', 'dddddddabce')\n  true\n  >>> samfSameIgnoreCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  true\n  */\nconst samfSameIgnoreCase6 = (s0, s1) => {\n  const len = s0.length;\n  if (len!== s1.length) return false;\n  for (let i = 0", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib11(10)\n  55\n  >>> fib11(1)\n  1\n  >>> fib11(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib12(10)\n  55\n  >>> fib12(1)\n  1\n  >>> fib12(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib13(10)\n  55\n  >>> fib13(1)\n  1\n  >>> fib13(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib14(10)\n  55\n  >>> fib14(1)\n  1\n  >>> fib14(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const stack = [brackets];\n  while (stack.length > 0) {\n    const bracket = stack.pop();\n    if (bracket === \">\") {\n      stack.push(\"<\");\n    } else if (bracket === \"<\") {\n      stack.push(\">\");\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, return the number of brackets in the string.\n\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<\")\n  1\n  >>> countBrackets(\"\")\n  0\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<>\")\n  2\n  >>> countBrackets(\"<", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n  const sorted = l.slice().sort();\n  const diff = sorted[1] - sorted[0];\n  return diff === 0? true : diff < 0? false : true;\n};\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic2 = (l) => {\n  const sorted = l.slice().sort();\n  const diff = sorted[1] - sorted[0];\n  return diff === 0? true : diff < 0? false : true;\n};\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic3 = (l) => {\n  const sorted = l.slice().sort();\n  const diff = sorted[1] - sorted[0];\n  return diff === 0? true : diff > 0? false : true;\n};\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic4 = (l) => {\n  const sorted = l.slice().sort();\n  const diff = sorted[1] - sorted[0];\n  return diff === 0? true : diff > 0? false : true;\n};\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic5 = (l) => {\n  const sorted = l.slice().sort();\n  const diff = sorted[1] - sorted[0];\n  return diff === 0? true : diff < 0? false : true;\n};\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic6 = (l) => {\n  const sorted = l.slice().sort();\n  const diff = sorted[1] - sorted[0];\n  return diff === 0? true : diff > 0? false : true;\n};\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic7 = (l) => {\n  const sorted = l.slice().sort();\n  const diff = sorted[1] - sorted[0];\n  return diff === 0? true : diff < 0? false : true;\n};\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic8 = (l) => {\n  const sorted = l.slice().sort();\n  const diff = sorted[1] - sorted[0];\n  return diff === 0? true : diff > 0? false : true;\n};\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic9 = (l) => {\n  const sorted = l.slice().sort();\n  const diff = sorted[1] - sorted[0];\n  return diff === 0? true : diff < 0? false : true;\n};\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic10 = (l) => {\n  const sorted = l.slice().sort();\n  const diff = sorted[1] - sorted[0];\n  return diff === 0? true : diff > 0? false : true;\n};\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic11 = (l) => {\n  const sorted = l.slice().sort();\n  const diff = sorted[1] - sorted[0];\n  return diff === 0? true : diff < 0? false : true;\n};\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic12 = (l) => {\n  const sorted = l.slice().sort();\n  const diff = sorted[1] - sorted[0];\n  return diff === 0? true : diff > 0? false : true;\n};\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic13 = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  return [...new Set([...l1_set,...l2_set])];\n};\n\nmodule.exports = comlon;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor8 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor9 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor10 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor11 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor12 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor13 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n  const stack = [];\n  let i = 0;\n  while (i < paren_string.length) {\n    const char = paren_string[i];\n    if (char === '(') {\n      stack.push(i);\n    } else if (char === ')') {\n      const top = stack.pop();\n      if (stack.length === 0) {\n        return [i - top, i];\n      }\n    }\n    i++;\n  }\n  return [i, i];\n};\n\nmodule.exports = pardeNestedParens;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sumHoN(30));\nconsole.log(sumHoN(100));\nconsole.log(sumHoN(5));\nconsole.log(sumHoN(10));\nconsole.log(sumHoN(1));\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i]\n    if (bracket === \"(\" || bracket === \")\") {\n      stack.push(bracket)\n    } else if (stack.length === 0) {\n      return false\n    } else if (stack[stack.length - 1] === \"(\" && bracket === \")\") {\n      stack.pop()\n    } else {\n      return false\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return the longest string that is a substring of the string.\n\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"abcdefghijklmnopqrstuvwxyz\")\n  'z'\n  >>> longestSubstring(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const x = xs[i]\n    const x2 = x * x\n    const x3 = x2 * x\n    const x4 = x3 * x\n    const x5 = x4 * x\n    result.push(x5)\n  }\n  return result\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivate = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = len - 1; i >= 0; i--) {\n    const x = xs[i]\n    const x2 = x * x\n    const x3 = x2 * x\n    const x4 = x3 * x\n    const x5 = x4 * x\n    result.push(x5)\n  }\n  return result\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derivate([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivate([1, 2, 3])\n  [2, 6]\n  */\nconst derivate2 = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const x = xs[i]\n    const x2 = x * x\n    const x3 = x2 * x\n    const x4 = x3 * x\n    const x5 = x4 * x\n    result.push(x5)\n  }\n  return result\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derivate2([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivate2([1, 2, 3])\n  [2, 6]\n  */\nconst derivate3 = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const x = xs[i]\n    const x2 = x * x\n    const x3 = x2 * x\n    const x4 = x3 * x\n    const x5 = x4 * x\n    result.push(x5)\n  }\n  return result\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derivate3([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivate3([1, 2, 3])\n  [2, 6]\n  */\nconst derivate4 = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const x = xs[i]\n    const x2 = x * x\n    const x3 = x2 * x\n    const x4 = x3 * x\n    const x5 = x4 * x\n    result.push(x5)\n  }\n  return result\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derivate4([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivate4([1, 2, 3])\n  [2, 6]\n  */\nconst derivate5 = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const x = xs[i]\n    const x2 = x * x\n    const x3 = x2 * x\n    const x4 = x3 * x\n    const x5 = x4 * x\n    result.push(x5)\n  }\n  return result\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derivate5([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivate5([1, 2, 3])\n  [2, 6]\n  */\nconst derivate6 = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const x = xs[i]\n    const x2 = x * x\n    const x3 = x2 * x\n    const x4 = x3 * x\n    const x5 = x4 * x\n    result.push(x5)\n  }\n  return result\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derivate6([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivate6([1, 2, 3])\n  [2, 6]\n  */\nconst derivate7 = (xs) => {\n  const len = xs.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const x = xs[i]\n    const x2 = x * x\n    const x3 = x2 * x\n    const x4 = x3 * x\n    const x5 = x4 * x\n    result.push(x5)\n  }\n  return result\n}\n\n/*\n  Given a polynomial, return the derivative of the polynomial.\n  >>> derivate7([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivate7([1, 2, 3])\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibvib(n - 1) + fibvib(n - 2) + fibvib(n - 3);\n};\n\nconsole.log(fibvib(1));\nconsole.log(fibvib(5));\nconsole.log(fibvib(8));\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\n/*Write a function isVowel which takes a string representing a word as input and\n  returns true if the word contains at least one vowel, and false otherwise.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> isVowel(\"abcde\")\n  true\n  >>> isVowel(\"ACEDY\")\n  true\n  >>> isVowel(\"\")\n  false\n  */\nconst isVowel = (s) => {\n  return s.match(/[aeiouy]/);\n};\n\n/*Write a function isVowel which takes a string representing a word as input and\n  returns true if the word contains at least one vowel, and false otherwise.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> isVowel(\"abcde\")\n  true\n  >>> isVowel(\"ACEDY\")\n  true\n  >>> isVowel(\"\")\n  false\n  */\nconst isVowel = (s) => {\n  return s.match(/[aeiouy]/);\n};\n\n/*Write a function isVowel which takes a string representing a word as input and\n  returns true if the word contains at least one vowel, and false otherwise.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> isVowel(\"abcde\")\n  true\n  >>> isVowel(\"ACEDY\")\n  true\n  >>> isVowel(\"\")\n  false\n  */\nconst isVowel = (s) => {\n  return s.match(/[aeiouy]/);\n};\n\n/*Write a function isVowel which takes a string representing a word as input and\n  returns true if the word contains at least one vowel, and false otherwise.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> isVowel(\"abcde\")\n  true\n  >>> isVowel(\"ACEDY\")\n  true\n  >>> isVowel(\"\")\n  false\n  */\nconst isVowel = (s) => {\n  return s.match(/[aeiouy]/);\n};\n\n/*Write a function isVowel which takes a string representing a word as input and\n  returns true if the word contains at least one vowel, and false otherwise.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> isVowel(\"abcde\")\n  true\n  >>> isVowel(\"ACEDY\")\n  true\n  >>> isVowel(\"\")\n  false\n  */\nconst isVowel = (s) => {\n  return s.match(/[aeiouy]/);\n};\n\n/*Write a function isVowel which takes a string representing a word as input and\n  returns true if the word contains at least one vowel, and false otherwise.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> isVowel(\"abcde\")\n  true\n  >>> isVowel(\"ACEDY\")\n  true\n  >>> isVowel(\"\")\n  false\n  */\nconst isVowel = (s) => {\n  return s.match(/[aeiouy]/);\n};\n\n/*Write a function isVowel which takes a string representing a word as input and\n  returns true if the word contains at least one vowel, and false otherwise.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> isVowel(\"abcde\")\n  true\n  >>> isVowel(\"ACEDY\")\n  true\n  >>> isVowel(\"\")\n  false\n  */\nconst isVowel = (s) => {\n  return s.match(/[aeiouy]/);\n};\n\n/*Write a function isVowel which takes a string representing a word as input and\n  returns true if the word contains at least one vowel, and false otherwise.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> isVowel(\"abcde\")\n  true\n  >>> isVowel(\"ACEDY\")\n  true\n  >>> isVowel(\"\")\n  false\n  */\nconst isVowel = (s) => {\n  return s.match(/[aeiouy]/);\n};\n\n/*Write a function isVowel which takes a string representing a word as input and\n  returns true if the word contains at least one vowel, and false otherwise.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> isVowel(\"abcde\")\n  true\n  >>> isVowel(\"ACEDY\")\n  true\n  >>> isVowel(\"\")\n  false\n  */\nconst isVowel = (s) => {\n  return s.match(/[aeiouy]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n  const len = x.length\n  const reversed = x.split('').reverse()\n  const reversedLen = reversed.length\n  const result = reversed.join('')\n  if (shift < 0) {\n    return result.substring(len + shift)\n  } else if (shift > reversedLen) {\n    return reversed.join('')\n  } else {\n    return result.substring(0, len - shift)\n  }\n}\n\n/*\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift2 = (x, shift) => {\n  const len = x.length\n  const reversed = x.split('').reverse()\n  const reversedLen = reversed.length\n  const result = reversed.join('')\n  if (shift < 0) {\n    return result.substring(len + shift)\n  } else if (shift > reversedLen) {\n    return reversed.join('')\n  } else {\n    return result.substring(0, len - shift)\n  }\n}\n\n/*\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift3 = (x, shift) => {\n  const len = x.length\n  const reversed = x.split('').reverse()\n  const reversedLen = reversed.length\n  const result = reversed.join('')\n  if (shift < 0) {\n    return result.substring(len + shift)\n  } else if (shift > reversedLen) {\n    return reversed.join('')\n  } else {\n    return result.substring(0, len - shift)\n  }\n}\n\n/*\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift4 = (x, shift) => {\n  const len = x.length\n  const reversed = x.split('').reverse()\n  const reversedLen = reversed.length\n  const result = reversed.join('')\n  if (shift < 0) {\n    return result.substring(len + shift)\n  } else if (shift > reversedLen) {\n    return reversed.join('')\n  } else {\n    return result.substring(0, len - shift)\n  }\n}\n\n/*\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift5 = (x, shift) => {\n  const len = x.length\n  const reversed = x.split('').reverse()\n  const reversedLen = reversed.length\n  const result = reversed.join('')\n  if (shift < 0) {\n    return result.substring(len + shift)\n  } else if (shift > reversedLen) {\n    return reversed.join('')\n  } else {\n    return result.substring(0, len - shift)\n  }\n}\n\n/*\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift6 = (x, shift) => {\n  const len = x.length\n  const reversed = x.split('').reverse()\n  const reversedLen = reversed.length\n  const result = reversed.join('')\n  if (shift < 0) {\n    return result.substring(len + shift)\n  } else if (shift > reversedLen) {\n    return reversed.join('')\n  } else {\n    return result.substring(0, len - shift)\n  }\n}\n\n/*\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift7 = (x, shift) => {\n  const len = x.length\n  const reversed = x.split('').reverse()\n  const reversedLen = reversed.length\n  const result = reversed.join('')\n  if (shift < 0) {\n    return result.substring(len + shift)\n  } else if (shift > reversedLen) {\n    return reversed.join('')\n  } else {\n    return result.substring(0, len - shift)\n  }\n}\n\n/*\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift8 = (x, shift) => {\n  const len = x.length\n  const reversed = x.split('').reverse()\n  const reversedLen = reversed.length\n  const result = reversed.join('')\n  if (shift < 0) {\n    return result.substring(len + shift)\n  } else if (shift > reversedLen) {\n    return reversed.join('')\n  } else {\n    return result.substring(0, len - shift)\n  }\n}\n\n/*\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift9 = (x, shift) => {\n  const len = x.length\n  const reversed = x.split('').reverse()\n  const reversedLen = reversed.length\n  const result = reversed.join('')\n  if (shift < 0) {\n    return result.substring(len + shift)\n  } else if (shift > reversedLen) {\n    return reversed.join('')\n  } else {\n    return result.substring(0, len - shift)\n  }\n}\n\n/*\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digltSum(\"\"));\nconsole.log(digltSum(\"abAB\"));\nconsole.log(digltSum(\"abcCd\"));\nconsole.log(digltSum(\"helloE\"));\nconsole.log(digltSum(\"woArBld\"));\nconsole.log(digltSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  const arr = s.split(\" \")\n  const apples = arr[0]\n  const oranges = arr[1]\n  const mango = arr[2]\n  const total = apples + oranges + mango\n  return total - apples - oranges - mango\n}\n\nconsole.log(frultDistribution(\"5 apples and 6 oranges\", 19))\nconsole.log(frultDistribution(\"0 apples and 1 oranges\", 3))\nconsole.log(frultDistribution(\"2 apples and 3 oranges\", 100))\nconsole.log(frultDistribution(\"100 apples and 1 oranges\", 120))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n  let result = [];\n  let min = Number.MAX_VALUE;\n  let minIndex = -1;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  if (minIndex!== -1) {\n    result.push([min, minIndex]);\n  }\n  return result;\n};\n\nconst arr = [4, 2, 3];\nconsole.log(plufk(arr));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  return max\n}\n\nconsole.log(seagch([4, 1, 2, 2, 3, 1]))\nconsole.log(seagch([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(seagch([5, 5, 4, 4, 4]))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring2 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring3 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring4 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring5 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring6 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring7 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring8 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring9 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring10 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bac", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  const sortedLength = sorted.length;\n  const sortedList = [];\n  let i = 0;\n  let j = sortedLength - 1;\n  while (i < j) {\n    const min = sorted[i];\n    const max = sorted[j];\n    sortedList.push(min);\n    sortedList.push(max);\n    i++;\n    j--;\n  }\n  return sortedList;\n};\n\nmodule.exports = strwngeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.round(Math.sqrt(a * b * c) * 100) / 100;\n};\n\nconst triangle = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle2 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle3 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle4 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle5 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle6 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle7 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle8 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle9 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle10 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle11 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle12 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle13 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle14 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [a, b, c]\n  };\n};\n\nconst triangle15 = (a, b, c) => {\n  const area = triwngleArea(a, b, c);\n  if (area === -1) {\n    return -1;\n  }\n  return {\n    area,\n    perimeter: (a + b + c) / 2,\n    sides: [", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly2 = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly3 = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly4 = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  return q[0] + q[1] + q[2] + q[3] <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wil", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let min = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n    }\n    i++;\n    j--;\n  }\n  return min;\n};\n\nconsole.log(smaplestChange([1, 2, 3, 2, 1]));\nconsole.log(smaplestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smaplestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    const lst1Str = lst1[i]\n    const lst2Str = lst2[i]\n    if (lst1Str.length === lst2Str.length) {\n      result.push(lst1Str)\n    } else {\n      const diff = lst1Str.length - lst2Str.length\n      const lst1StrLen = lst1Str.length\n      const lst2StrLen = lst2Str.length\n      const lst1StrStart = lst1StrLen - diff\n      const lst2StrStart = lst2StrLen - diff\n      const lst1StrEnd = lst1StrStart + lst1StrLen\n      const lst2StrEnd = lst2StrStart + lst2StrLen\n      const lst1StrSub = lst1Str.substring(lst1StrStart, lst1StrEnd)\n      const lst2StrSub = lst2Str.substring(lst2StrStart, lst2StrEnd)\n      if (lst1StrSub === lst2StrSub) {\n        result.push(lst1Str)\n      }\n    }\n  }\n  return result\n}\n\nexport default totwlMatch\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const isPrime = (n) => {\n    let i = 0;\n    while (i < prime.length) {\n      if (n % prime[i] === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  return isPrime(a) && isPrime(a * a) && isPrime(a * a * a);\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const isPrime = (n) => {\n    let i = 0;\n    while (i < prime.length) {\n      if (n % prime[i] === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  return isPrime(a) && isPrime(a * a) && isPrime(a * a * a);\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n === 1) {\n    return x === 1;\n  }\n  if (n === 2) {\n    return x === 2;\n  }\n  if (n === 3) {\n    return x === 3;\n  }\n  if (n === 4) {\n    return x === 4;\n  }\n  if (n === 5) {\n    return x === 5;\n  }\n  if (n === 6) {\n    return x === 6;\n  }\n  if (n === 7) {\n    return x === 7;\n  }\n  if (n === 8) {\n    return x === 8;\n  }\n  if (n === 9) {\n    return x === 9;\n  }\n  if (n === 10) {\n    return x === 10;\n  }\n  if (n === 11) {\n    return x === 11;\n  }\n  if (n === 12) {\n    return x === 12;\n  }\n  if (n === 13) {\n    return x === 13;\n  }\n  if (n === 14) {\n    return x === 14;\n  }\n  if (n === 15) {\n    return x === 15;\n  }\n  if (n === 16) {\n    return x === 16;\n  }\n  if (n === 17) {\n    return x === 17;\n  }\n  if (n === 18) {\n    return x === 18;\n  }\n  if (n === 19) {\n    return x === 19;\n  }\n  if (n === 20) {\n    return x === 20;\n  }\n  if (n === 21) {\n    return x === 21;\n  }\n  if (n === 22) {\n    return x === 22;\n  }\n  if (n === 23) {\n    return x === 23;\n  }\n  if (n === 24) {\n    return x === 24;\n  }\n  if (n === 25) {\n    return x === 25;\n  }\n  if (n === 26) {\n    return x === 26;\n  }\n  if (n === 27) {\n    return x === 27;\n  }\n  if (n === 28) {\n    return x === 28;\n  }\n  if (n === 29) {\n    return x === 29;\n  }\n  if (n === 30) {\n    return x === 30;\n  }\n  if (n === 31) {\n    return x === 31;\n  }\n  if (n === 32) {\n    return x === 32;\n  }\n  if (n === 33) {\n    return x === 33;\n  }\n  if (n === 34) {\n    return x === 34;\n  }\n  if (n === 35) {\n    return x === 35;\n  }\n  if (n === 36) {\n    return x === 36;\n  }\n  if (n === 37) {\n    return x === 37;\n  }\n  if (n === 38) {\n    return x === 38;\n  }\n  if (n === 39) {\n    return x === 39;\n  }\n  if (n === 40) {\n    return x === 40;\n  }\n  if (n === 41) {\n    return x === 41;\n  }\n  if (n === 42) {\n    return x === 42;\n  }\n  if (n === 43) {\n    return x === 43;\n  }\n  if (n === 44) {\n    return x === 44;\n  }\n  if (n === 45) {\n    return x === 45;\n  }\n  if (n === 46) {\n    return x === 46;\n  }\n  if (n === 47) {\n    return x === 47;\n  }\n  if (n === 48) {\n    return x === 48;\n  }\n  if (n === 49) {\n    return x === 49;\n  }\n  if (n === 50) {\n    return x === 50;\n  }\n  if (n === 51) {\n    return x === 51;\n  }\n  if (n === 52) {\n    return x === 52;\n  }\n  if (n === 53) {\n    return x === 53;\n  }\n  if (n === 54) {\n    return x === 54;\n  }\n  if (n === 55) {\n    return x === 55;\n  }\n  if (n === 56) {\n    return x === 56;\n  }\n  if (n === 57) {\n    return x === 57;\n  }\n  if (n === 58) {\n    return x === 58;\n  }\n  if (n === 59) {\n    return x === 59;\n  }\n  if (n === 60) {\n    return x === 60;\n  }\n  if (n === 61) {\n    return x === 61;\n  }\n  if (n === 62) {\n    return x === 62;\n  }\n  if (n === 63) {\n    return x === 63;\n  }\n  if (n === 64) {\n    return x === 64;\n  }\n  if (n === 65) {\n    return x === 65;\n  }\n  if (n === 66) {\n    return x === 66;\n  }\n  if (n === 67) {\n    return x === 67;\n  }\n  if (n === 68) {\n    return x === 68;\n  }\n  if (n === 69) {\n    return x === 69;\n  }\n  if (n === 70) {\n    return x === 70;\n  }\n  if (n === 71) {\n    return x === 71;\n  }\n  if (n === 72) {\n    return x === 72;\n  }\n  if (n === 73) {\n    return x === 73;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n  if (a === 0) return true\n  if (a % 2 === 0) return false\n  return isckbe(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckpe(1) ==> true\n  isckpe(2) ==> false\n  isckpe(3) ==> true\n  isckpe(4) ==> true\n  isckpe(5) ==> false\n  isckpe(64) ==> true\n  isckpe(180) ==> false\n  */\nconst isckpe = (a) => {\n  if (a === 0) return true\n  if (a % 3 === 0) return false\n  return isckpe(a / 3)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckpe(1) ==> true\n  isckpe(2) ==> false\n  isckpe(3) ==> true\n  isckpe(4) ==> true\n  isckpe(5) ==> false\n  isckpe(64) ==> true\n  isckpe(180) ==> false\n  */\nconst isck = (a) => {\n  if (a === 0) return true\n  if (a % 2 === 0) return false\n  return isck(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isck(1) ==> true\n  isck(2) ==> false\n  isck(3) ==> true\n  isck(4) ==> true\n  isck(5) ==> false\n  isck(64) ==> true\n  isck(180) ==> false\n  */\nconst isck = (a) => {\n  if (a === 0) return true\n  if (a % 3 === 0) return false\n  return isck(a / 3)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isck(1) ==> true\n  isck(2) ==> false\n  isck(3) ==> true\n  isck(4) ==> true\n  isck(5) ==> false\n  isck(64) ==> true\n  isck(180) ==> false\n  */\nconst isck = (a) => {\n  if (a === 0) return true\n  if (a % 2 === 0) return false\n  return isck(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isck(1) ==> true\n  isck(2) ==> false\n  isck(3) ==> true\n  isck(4) ==> true\n  isck(5) ==> false\n  isck(64) ==> true\n  isck(180) ==> false\n  */\nconst isck = (a) => {\n  if (a === 0) return true\n  if (a % 3 === 0) return false\n  return isck(a / 3)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isck(1) ==> true\n  isck(2) ==> false\n  isck(3) ==> true\n  isck(4) ==> true\n  isck(5) ==> false\n  isck(64) ==> true\n  isck(180) ==> false\n  */\nconst isck = (a) => {\n  if (a === 0) return true\n  if (a % 2 === 0) return false\n  return isck(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isck(1) ==> true\n  isck(2) ==> false\n  isck(3) ==> true\n  isck(4) ==> true\n  isck(5) ==> false\n  isck(64) ==> true\n  isck(180) ==> false\n  */\nconst isck = (a) => {\n  if (a === 0) return true\n  if (a % 3 === 0) return false\n  return isck(a / 3)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isck(1) ==> true\n  isck(2) ==> false\n  isck(3) ==> true\n  isck(4) ==> true\n  isck(5) ==> false\n  isck(64) ==> true\n  isck(180) ==> false\n  */\nconst isck = (a) => {\n  if (a === 0) return true\n  if (a % 2 === 0) return false\n  return isck(a / 2)\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a perfect cube of some integer number.\n  Note: you may assume the input", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(hexNey(\"AB\"));\nconsole.log(hexNey(\"1077E\"));\nconsole.log(hexNey(\"ABED1A33\"));\nconsole.log(hexNey(\"123456789ABCDEF0\"));\nconsole.log(hexNey(\"2020\"));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n  let binary = '';\n  let binaryLength = 0;\n  let binaryString = '';\n  let decimalString = '';\n  let decimalLength = 0;\n  let decimalStringLength = 0;\n  let decimalStringLengthLength = 0;\n  let decimalStringLengthLengthLength = 0;\n  let decimalStringLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let decimalStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength length of the given string.\n  //\n  //  1.  The string is converted to a binary string using the given function.\n  //  2.  The length of the binary string is calculated.\n  //  3.  The length of the binary string is compared with the given length.\n  //  4.  If the length of the binary string is less than the given length, the string is padded with zeroes to the given length.\n  //  5.  The length of the binary string is returned.\n  //\n  //  Example:\n  //  var binaryString = \"01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const product = numbers.reduce((acc, num) => acc * num, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of integers, return a list of the sum of all the even integers in the list.\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [4, 6, 8, 10]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [4, 6, 8, 10, 12]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [4, 6, 8, 10, 12, 14]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [4, 6, 8, 10, 12, 14, 16]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [4, 6, 8, 10, 12, 14, 16, 18]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [4, 6, 8, 10, 12, 14, 16,", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n  const len = s.length\n  if (len < 3) {\n    return false\n  }\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    if (arr.indexOf(s[i])!== -1) {\n      return false\n    }\n    arr.push(s[i])\n  }\n  return true\n}\n\nconsole.log(isHwppy('a'))\nconsole.log(isHwppy('aa'))\nconsole.log(isHwppy('abcd'))\nconsole.log(isHwppy('aabb'))\nconsole.log(isHwppy('adb'))\nconsole.log(isHwppy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  const gradesArray = Array.from(grades);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArrayLengthMinusOne = gradesArrayLength - 1;\n  const gradesArrayLengthMinusTwo = gradesArrayLength - 2;\n  const gradesArrayLengthMinusThree = gradesArrayLength - 3;\n  const gradesArrayLengthMinusFour = gradesArrayLength - 4;\n  const gradesArrayLengthMinusFive = gradesArrayLength - 5;\n  const gradesArrayLengthMinusSix = gradesArrayLength - 6;\n  const gradesArrayLengthMinusSeven = gradesArrayLength - 7;\n  const gradesArrayLengthMinusEight = gradesArrayLength - 8;\n  const gradesArrayLengthMinusNine = gradesArrayLength - 9;\n  const gradesArrayLengthMinusTen = gradesArrayLength - 10;\n  const gradesArrayLengthMinusEleven = gradesArrayLength - 11;\n  const gradesArrayLengthMinusTwelve = gradesArrayLength - 12;\n  const gradesArrayLengthMinusThirteen = gradesArrayLength - 13;\n  const gradesArrayLengthMinusFourteen = gradesArrayLength - 14;\n  const gradesArrayLengthMinusFifteen = gradesArrayLength - 15;\n  const gradesArrayLengthMinusSixteen = gradesArrayLength - 16;\n  const gradesArrayLengthMinusSeventeen = gradesArrayLength - 17;\n  const gradesArrayLengthMinusEighteen = gradesArrayLength - 18;\n  const gradesArrayLengthMinusNineteen = gradesArrayLength - 19;\n  const gradesArrayLengthMinusTwenty = gradesArrayLength - 20;\n  const gradesArrayLengthMinusTwentyOne = gradesArrayLength - 21;\n  const gradesArrayLengthMinusTwentyTwo = gradesArrayLength - 22;\n  const gradesArrayLengthMinusTwentyThree = gradesArrayLength - 23;\n  const gradesArrayLengthMinusTwentyFour = gradesArrayLength - 24;\n  const gradesArrayLengthMinusTwentyFive = gradesArrayLength - 25;\n  const gradesArrayLengthMinusTwentySix = gradesArrayLength - 26;\n  const gradesArrayLengthMinusTwentySeven = gradesArrayLength - 27;\n  const gradesArrayLengthMinusTwentyEight = gradesArrayLength - 28;\n  const gradesArrayLengthMinusTwentyNine = gradesArrayLength - 29;\n  const gradesArrayLengthMinusThirty = gradesArrayLength - 30;\n  const gradesArrayLengthMinusThirtyOne = gradesArrayLength - 31;\n  const gradesArrayLengthMinusThirtyTwo = gradesArrayLength - 32;\n  const gradesArrayLengthMinusThirtyThree = gradesArrayLength - 33;\n  const gradesArrayLengthMinusThirtyFour = gradesArrayLength - 34;\n  const gradesArrayLengthMinusThirtyFive = gradesArrayLength - 35;\n  const gradesArrayLengthMinusThirtySix = gradesArrayLength - 36;\n  const gradesArrayLengthMinusThirtySeven = gradesArrayLength - 37;\n  const gradesArrayLengthMinusThirtyEight = gradesArrayLength - 38;\n  const gradesArrayLengthMinusThirtyNine = gradesArrayLength - 39;\n  const gradesArrayLengthMinusForty = gradesArrayLength - 40;\n  const gradesArrayLengthMinusFortyOne = gradesArrayLength - 41;\n  const gradesArrayLengthMinusFortyTwo = gradesArrayLength - 42;\n  const gradesArrayLengthMinusFortyThree = gradesArrayLength - 43;\n  const gradesArrayLengthMinusFortyFour = gradesArrayLength - 44;\n  const gradesArrayLengthMinusFortyFive = gradesArrayLength - 45;\n  const gradesArrayLengthMinusFortySix = gradesArrayLength - 46;\n  const gradesArrayLengthMinusFortySeven = gradesArrayLength - 47;\n  const gradesArrayLengthMinusFortyEight = gradesArrayLength - 48;\n  const gradesArrayLengthMinusFortyNine = gradesArrayLength - 49;\n  const gradesArrayLengthMinusFifty = gradesArrayLength - 50;\n  const gradesArrayLengthMinusFiftyOne = gradesArrayLength - 51;\n  const gradesArrayLengthMinusFiftyTwo = gradesArrayLength - 52;\n  const gradesArrayLengthMinusFiftyThree = gradesArrayLength - 53;\n  const gradesArrayLengthMinusFiftyFour = gradesArrayLength - 54;\n  const gradesArrayLengthMinusFiftyFive = gradesArrayLength - 55;\n  const gradesArrayLengthMinusFiftySix = gradesArrayLength - 56;\n  const gradesArrayLengthMinusFiftySeven = gradesArrayLength - 57;\n  const gradesArrayLengthMinusFiftyEight = gradesArrayLength - 58;\n  const gradesArrayLengthMinusFiftyNine = gradesArrayLength - 59;\n  const gradesArrayLengthMinusSixty = gradesArrayLength - 60;\n  const gradesArrayLengthMinusSixtyOne = gradesArrayLength - 61;\n  const gradesArrayLengthMinusSixtyTwo = gradesArrayLength - 62;\n  const gradesArrayLengthMinusSixtyThree = gradesArrayLength - 63;\n  const gradesArrayLengthMinusSixtyFour = gradesArrayLength - 64;\n  const gradesArrayLengthMinusSixtyFive = gradesArrayLength - 65;\n  const gradesArrayLengthMinusSixtySix = gradesArrayLength - 66;\n  const gradesArrayLengthMinusSixtySeven = gradesArrayLength - 67;\n  const gradesArrayLengthMinusSixtyEight = gradesArrayLength - 68;\n  const gradesArrayLengthMinusSixtyNine = gradesArrayLength - 69;\n  const gradesArrayLengthMinusSeventy = gradesArrayLength - 70;\n  const gradesArrayLengthMinusSeventyOne = gradesArrayLength - 71;\n  const gradesArrayLengthMinusSeventyTwo = gradesArrayLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  const len = string.length;\n  const prime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  return prime(len)? len : false;\n};\n\nmodule.exports = prileLength;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1.\n  */\nconst stagtsStarts = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that end with 1.\n  */\nconst stagtsEnds = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst stagtsStartsEnds = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst stagtsStartsEnds2 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst stagtsStartsEnds3 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst stagtsStartsEnds4 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst stagtsStartsEnds5 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst stagtsStartsEnds6 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst stagtsStartsEnds7 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst stagtsStartsEnds8 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst stagtsStartsEnds9 = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++\n      }\n      num = num / 10\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst stagtsStartsEnds", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n  const digits = Array.from(Array(N).keys()).map((_, i) => i);\n  return digits.reduce((acc, digit) => acc + digits[digit], 0);\n};\n\nconsole.log(solge(1000));\nconsole.log(solge(150));\nconsole.log(solge(147));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\nconsole.log(add([4, 2, 6, 7]))\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  const words = s.split(' ');\n  const shuffled = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const shuffledWord = [];\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j];\n      const shuffledChar = char.charCodeAt(0);\n      const shuffledWord.push(shuffledChar);\n    }\n    shuffled.push(shuffledWord.join(' '));\n  }\n  return shuffled.join(' ');\n};\n\nconsole.log(antlShuffle('Hi'));\nconsole.log(antlShuffle('hello'));\nconsole.log(antlShuffle('Hello World!!!'));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const rows = lst.map(row => row.map(col => col))\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const cols = rowsSorted.map(row => row.sort((a, b) => b[1] - a[1]))\n  const result = cols.map(col => [x, col[0]])\n  return result\n}\n\nconst getGow2 = (lst, x) => {\n  const rows = lst.map(row => row.map(col => col))\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const cols = rowsSorted.map(row => row.sort((a, b) => b[1] - a[1]))\n  const result = cols.map(col => [x, col[0]])\n  return result\n}\n\nconst getGow3 = (lst, x) => {\n  const rows = lst.map(row => row.map(col => col))\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const cols = rowsSorted.map(row => row.sort((a, b) => b[1] - a[1]))\n  const result = cols.map(col => [x, col[0]])\n  return result\n}\n\nconst getGow4 = (lst, x) => {\n  const rows = lst.map(row => row.map(col => col))\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const cols = rowsSorted.map(row => row.sort((a, b) => b[1] - a[1]))\n  const result = cols.map(col => [x, col[0]])\n  return result\n}\n\nconst getGow5 = (lst, x) => {\n  const rows = lst.map(row => row.map(col => col))\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const cols = rowsSorted.map(row => row.sort((a, b) => b[1] - a[1]))\n  const result = cols.map(col => [x, col[0]])\n  return result\n}\n\nconst getGow6 = (lst, x) => {\n  const rows = lst.map(row => row.map(col => col))\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const cols = rowsSorted.map(row => row.sort((a, b) => b[1] - a[1]))\n  const result = cols.map(col => [x, col[0]])\n  return result\n}\n\nconst getGow7 = (lst, x) => {\n  const rows = lst.map(row => row.map(col => col))\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const cols = rowsSorted.map(row => row.sort((a, b) => b[1] - a[1]))\n  const result = cols.map(col => [x, col[0]])\n  return result\n}\n\nconst getGow8 = (lst, x) => {\n  const rows = lst.map(row => row.map(col => col))\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const cols = rowsSorted.map(row => row.sort((a, b) => b[1] - a[1]))\n  const result = cols.map(col => [x, col[0]])\n  return result\n}\n\nconst getGow9 = (lst, x) => {\n  const rows = lst.map(row => row.map(col => col))\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const cols = rowsSorted.map(row => row.sort((a, b) => b[1] - a[1]))\n  const result = cols.map(col => [x, col[0]])\n  return result\n}\n\nconst getGow10 = (lst, x) => {\n  const rows = lst.map(row => row.map(col => col))\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const cols = rowsSorted.map(row => row.sort((a, b) => b[1] - a[1]))\n  const result = cols.map(col => [x, col[0]])\n  return result\n}\n\nconst getGow11 = (lst, x) => {\n  const rows = lst.map(row => row.map(col => col))\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const cols = rowsSorted.map(row => row.sort((a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  const sorted = array.slice().sort((a, b) => {\n    return a - b;\n  });\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  if (sum % 2 === 1) {\n    return sorted.reverse();\n  } else {\n    return sorted;\n  }\n};\n\nconsole.log(sorhArray([2, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_len = alphabet.length;\n  const alphabet_len_half = alphabet_len / 2;\n  const alphabet_half_len = alphabet_len_half * 2;\n  const alphabet_half_len_half = alphabet_half_len / 2;\n  const alphabet_half_len_half_half = alphabet_half_len_half * 2;\n  const alphabet_half_len_half_half_half = alphabet_half_len_half_half * 2;\n  const alphabet_half_len_half_half_half_half = alphabet_half_len_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half = alphabet_half_len_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half * 2;\n  const alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half_half = alphabet_half_len_half_half_half_half_half_half_half_half_half_half_half_half_half_half * 2;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxValue = max;\n  const maxIndexInArray = maxIndex;\n  const maxValueInArray = maxValue;\n  const maxIndexInArrayInArray = maxIndexInArray;\n  const maxValueInArrayInArray = maxValueInArray;\n  const maxIndexInArrayInArrayInArray = maxIndexInArrayInArray;\n  const maxValueInArrayInArrayInArray = maxValueInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArrayInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxIndexInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray;\n  const maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray = maxValueInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArrayInArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  const min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index + 1]\n}\n\nconsole.log(nexhSmallest([1, 2, 3, 4, 5]))\nconsole.log(nexhSmallest([5, 1, 4, 3, 2]))\nconsole.log(nexhSmallest([1, 1]))\nconsole.log(nexhSmallest([1, 2, 3, 4, 5, 6]))\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  const regex = /^I/\n  const words = S.split('.')\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (regex.test(words[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  const regex = /^I/\n  const words = S.split('.')\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (regex.test(words[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I/\n  const words = S.split('.')\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (regex.test(words[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I/\n  const words = S.split('.')\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (regex.test(words[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I/\n  const words = S.split('.')\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (regex.test(words[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I/\n  const words = S.split('.')\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (regex.test(words[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I/\n  const words = S.split('.')\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (regex.test(words[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I/\n  const words = S.split('.')\n  let count = 0\n  for (let i = 0; i < words.length; i++) {\n    if (regex.test(words[i])) {\n      count++\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  return (x + y === z) && (x % 1 === 0) && (y % 1 === 0);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt2 = (x, y, z) => {\n  return (x + y === z) && (x % 1 === 0) && (y % 1 === 0);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt3 = (x, y, z) => {\n  return (x + y === z) && (x % 1 === 0) && (y % 1 === 0);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt4 = (x, y, z) => {\n  return (x + y === z) && (x % 1 === 0) && (y % 1 === 0);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt5 = (x, y, z) => {\n  return (x + y === z) && (x % 1 === 0) && (y % 1 === 0);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt6 = (x, y, z) => {\n  return (x + y === z) && (x % 1 === 0) && (y % 1 === 0);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt7 = (x, y, z) => {\n  return (x + y === z) && (x % 1 === 0) && (y % 1 === 0);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt8 = (x, y, z) => {\n  return (x + y === z) && (x % 1 === 0) && (y % 1 === 0);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt9 = (x, y, z) => {\n  return (x + y === z) && (x % 1 === 0) && (y % 1 === 0);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  const message = message.toLowerCase()\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const vowelsLength = vowels.length\n  const vowelsIndex = (vowel) => vowels.indexOf(vowel)\n  const vowelsIndexLength = vowelsIndex.length\n  const vowelIndex = (vowel) => vowelsIndex(vowel)\n  const vowelIndexLength = vowelIndex.length\n  const vowelIndexLength2 = vowelIndexLength * 2\n  const vowelIndexLength3 = vowelIndexLength * 3\n  const vowelIndexLength4 = vowelIndexLength * 4\n  const vowelIndexLength5 = vowelIndexLength * 5\n  const vowelIndexLength6 = vowelIndexLength * 6\n  const vowelIndexLength7 = vowelIndexLength * 7\n  const vowelIndexLength8 = vowelIndexLength * 8\n  const vowelIndexLength9 = vowelIndexLength * 9\n  const vowelIndexLength10 = vowelIndexLength * 10\n  const vowelIndexLength11 = vowelIndexLength * 11\n  const vowelIndexLength12 = vowelIndexLength * 12\n  const vowelIndexLength13 = vowelIndexLength * 13\n  const vowelIndexLength14 = vowelIndexLength * 14\n  const vowelIndexLength15 = vowelIndexLength * 15\n  const vowelIndexLength16 = vowelIndexLength * 16\n  const vowelIndexLength17 = vowelIndexLength * 17\n  const vowelIndexLength18 = vowelIndexLength * 18\n  const vowelIndexLength19 = vowelIndexLength * 19\n  const vowelIndexLength20 = vowelIndexLength * 20\n  const vowelIndexLength21 = vowelIndexLength * 21\n  const vowelIndexLength22 = vowelIndexLength * 22\n  const vowelIndexLength23 = vowelIndexLength * 23\n  const vowelIndexLength24 = vowelIndexLength * 24\n  const vowelIndexLength25 = vowelIndexLength * 25\n  const vowelIndexLength26 = vowelIndexLength * 26\n  const vowelIndexLength27 = vowelIndexLength * 27\n  const vowelIndexLength28 = vowelIndexLength * 28\n  const vowelIndexLength29 = vowelIndexLength * 29\n  const vowelIndexLength30 = vowelIndexLength * 30\n  const vowelIndexLength31 = vowelIndexLength * 31\n  const vowelIndexLength32 = vowelIndexLength * 32\n  const vowelIndexLength33 = vowelIndexLength * 33\n  const vowelIndexLength34 = vowelIndexLength * 34\n  const vowelIndexLength35 = vowelIndexLength * 35\n  const vowelIndexLength36 = vowelIndexLength * 36\n  const vowelIndexLength37 = vowelIndexLength * 37\n  const vowelIndexLength38 = vowelIndexLength * 38\n  const vowelIndexLength39 = vowelIndexLength * 39\n  const vowelIndexLength40 = vowelIndexLength * 40\n  const vowelIndexLength41 = vowelIndexLength * 41\n  const vowelIndexLength42 = vowelIndexLength * 42\n  const vowelIndexLength43 = vowelIndexLength * 43\n  const vowelIndexLength44 = vowelIndexLength * 44\n  const vowelIndexLength45 = vowelIndexLength * 45\n  const vowelIndexLength46 = vowelIndexLength * 46\n  const vowelIndexLength47 = vowelIndexLength * 47\n  const vowelIndexLength48 = vowelIndexLength * 48\n  const vowelIndexLength49 = vowelIndexLength * 49\n  const vowelIndexLength50 = vowelIndexLength * 50\n  const vowelIndexLength51 = vowelIndexLength * 51\n  const vowelIndexLength52 = vowelIndexLength * 52\n  const vowelIndexLength53 = vowelIndexLength * 53\n  const vowelIndexLength54 = vowelIndexLength * 54\n  const vowelIndexLength55 = vowelIndexLength * 55\n  const vowelIndexLength56 = vowelIndexLength * 56\n  const vowelIndexLength57 = vowelIndexLength * 57\n  const vowelIndexLength58 = vowelIndexLength * 58\n  const vowelIndexLength59 = vowelIndexLength * 59\n  const vowelIndexLength60 = vowelIndexLength * 60\n  const vowelIndexLength61 = vowelIndexLength * 61\n  const vowelIndexLength62 = vowelIndexLength * 62\n  const vowelIndexLength63 = vowelIndexLength * 63\n  const vowelIndexLength64 = vowelIndexLength * 64\n  const vowelIndexLength65 = vowelIndexLength * 65\n  const vowelIndexLength66 = vowelIndexLength * 66\n  const vowelIndexLength67 = vowelIndexLength * 67\n  const vowelIndexLength68 = vowelIndexLength * 68\n  const vowelIndexLength69 = vowelIndexLength * 69\n  const vowelIndexLength70 = vowelIndexLength * 70\n  const vowelIndexLength71 = vowelIndexLength * 71\n  const vowelIndexLength72 = vowelIndexLength * 72\n  const vowelIndexLength73 = vowelIndexLength * 73\n  const vowelIndexLength74 = vowelIndexLength * 74\n  const vowelIndexLength75 = vowelIndexLength * 75\n  const vowelIndexLength76 = vowelIndexLength * 76\n  const vowelIndexLength77 = vowelIndexLength * 77\n  const vowelIndexLength78 = vowelIndexLength * 78\n  const vowelIndexLength79 = vowelIndexLength * 79\n  const vowelIndexLength80 = vowelIndexLength * 80\n  const vowelIndexLength81 = vowelIndexLength * 81\n  const vowelIndexLength82 = vowelIndexLength * 82\n  const vowelIndexLength83 = vowelIndexLength * 83\n  const vowelIndexLength84 = vowelIndexLength * 84\n  const vowelIndexLength85 = vowelIndexLength * 85\n  const vowelIndexLength86 = vowelIndexLength * 86\n  const vowelIndexLength87 = vowelIndexLength * 87\n  const vowelIndexLength88 = vowelIndexLength * 88\n  const vowelIndexLength89 = vowelIndexLength * 89\n  const vowelIndexLength90 = vowelIndexLength * 90\n  const vowelIndexLength91 = vowelIndexLength * 91\n  const vowelIndexLength92 = vowelIndexLength * 92\n  const vowelIndexLength93 = vowelIndexLength * 93\n  const vowelIndexLength94 = vowelIndexLength * 94\n  const vowelIndexLength95 = vowelIndexLength * 95\n  const vowelIndexLength96 = vowelIndexLength * 96\n  const vowelIndexLength97 = vowelIndexLength * 97\n  const vowelIndexLength98 = vowelIndexLength * 98\n  const vowelIndexLength99 = vowelIndexLength * 99\n  const vowelIndexLength100 = vowelIndexLength * 100\n  const vowelIndexLength101 = vowelIndexLength * 101", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let temp = lst[i];\n    while (temp > 0) {\n      max = Math.max(max, temp % 10);\n      temp = temp / 10;\n    }\n  }\n  return max;\n};\n\nconsole.log(skjnasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjnasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjnasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjnasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjnasdkd([0,81,12,3,1,21]));\nconsole.log(skjnasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key.toUpperCase()\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCaseNoEmpty = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key.toUpperCase()\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCaseNoEmptyNoEmpty = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key.toUpperCase()\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCaseNoEmptyNoEmptyNoEmpty = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key.toUpperCase()\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCaseNoEmptyNoEmptyNoEmptyNoEmpty = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key.toUpperCase()\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCaseNoEmptyNoEmptyNoEmptyNoEmptyNoEmpty = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key.toUpperCase()\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  const arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(coujtUpTo(5));\nconsole.log(coujtUpTo(11));\nconsole.log(coujtUpTo(0));\nconsole.log(coujtUpTo(20));\nconsole.log(coujtUpTo(1));\nconsole.log(coujtUpTo(18));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply2 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply3 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply4 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply5 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply6 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply7 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply8 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply9 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply10 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply11 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply12 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply13 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply14 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply15 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply16 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply17 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply18 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply19 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply20 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply21 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply22 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply23 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b;\n  }\n  return result;\n};\n\nconst mulhiply24 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 0\n  coujtUpper('abcdefg') returns 1\n  coujtUpper('dBBE') returns 1\n  */\nconst coujtLower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 1\n  coujtLower('abcdefg') returns 0\n  coujtLower('dBBE') returns 0\n  */\nconst coujtLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 0\n  coujtLower('abcdefg') returns 1\n  coujtLower('dBBE') returns 1\n  */\nconst coujtLower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  coujtVowels('aBCdEf') returns 1\n  coujtVowels('abcdefg') returns 0\n  coujtVowels('dBBE') returns 0\n  */\nconst coujtVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  coujtVowels('aBCdEf') returns 0\n  coujtVowels('abcdefg') returns 1\n  coujtVowels('dBBE') returns 1\n  */\nconst coujtVowels = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  coujtConsonants('aBCdEf') returns 1\n  coujtConsonants('abcdefg') returns 0\n  coujtConsonants('dBBE') returns 0\n  */\nconst coujtConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  coujtConsonants('aBCdEf') returns 0\n  coujtConsonants('abcdefg') returns 1\n  coujtConsonants('dBBE') returns 1\n  */\nconst coujtConsonants = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  coujtConsonants('aBCdEf') returns 1\n  coujtConsonants('abcdefg') returns 0\n  coujtConsonants('dBBE') returns 0\n  */\nconst coujtConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase()!== s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  coujtConsonants('aBCdEf') returns 0\n  coujtConsonants('abcdefg') returns 1\n  coujtConsonants('dBBE') returns 1\n  */\nconst coujtConsonants", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  const intValue = parseInt(value, 10);\n  const intValueAbs = Math.abs(intValue);\n  const intValueAbsFloor = Math.floor(intValueAbs);\n  const intValueAbsCeil = Math.ceil(intValueAbs);\n  const intValueAbsFarthest = Math.max(intValueAbsFloor, intValueAbsCeil);\n  const intValueAbsFarthestFarthest = Math.min(intValueAbsFloor, intValueAbsCeil);\n  const intValueAbsFarthestFarthestAbs = Math.abs(intValueAbsFarthestFarthest);\n  const intValueAbsFarthestFarthestAbsFloor = Math.floor(intValueAbsFarthestFarthestAbs);\n  const intValueAbsFarthestFarthestAbsCeil = Math.ceil(intValueAbsFarthestFarthestAbs);\n  const intValueAbsFarthestFarthestAbsFarthest = Math.max(intValueAbsFarthestFarthestAbsFloor, intValueAbsFarthestFarthestAbsCeil);\n  const intValueAbsFarthestFarthestAbsFarthestAbs = Math.min(intValueAbsFarthestFarthestAbsFloor, intValueAbsFarthestFarthestAbsCeil);\n  if (intValueAbsFarthestFarthestAbsFarthest === intValueAbsFarthestFarthestAbsFarthestAbs) {\n    return intValueAbsFarthestFarthestAbsFarthest;\n  } else if (intValueAbsFarthestFarthestAbsFarthest === intValueAbsFarthestFarthestAbsFarthestAbs) {\n    return intValueAbsFarthestFarthestAbsFarthest;\n  } else {\n    return Math.round(intValueAbsFarthestFarthestAbsFarthest);\n  }\n};\n\nmodule.exports = clodestInteger;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
