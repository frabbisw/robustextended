{"task_id": "JavaScript/0", "prompt": "/* check IF in gIVen list of numbers, aRe any tWo numbers cLOser to each otHER thaN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "/* check IF in gIVen list of numbers, aRe any tWo numbers cLOser to each otHER thaN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements9 = (numbers, threshold) => {\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/1", "prompt": "/* input TO tHIs funcTion is A stRIng containinG MUltiPle groups of nEsted pAreNTheSes. yOur GoAl Is to\n  sEPaRAte THoSe group into sepARate StrIngS and return the list OF thOse.\n  seParAte GroUPs ARe bALAnceD (Each OPeN brACe is PROpERly clOSed) and nOt nesTED WiThIn each oThER\n  IgnorE Any spAceS in the iNpuT STring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "/* input TO tHIs funcTion is A stRIng containinG MUltiPle groups of nEsted pAreNTheSes. yOur GoAl Is to\n  sEPaRAte THoSe group into sepARate StrIngS and return the list OF thOse.\n  seParAte GroUPs ARe bALAnceD (Each OPeN brACe is PROpERly clOSed) and nOt nesTED WiThIn each oThER\n  IgnorE Any spAceS in the iNpuT STring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = [];\n  const paren_groups_length = paren_string.length;\n  let current_group = '';\n  let current_group_length = 0;\n  let current_group_index = 0;\n  let current_group_paren_index = 0;\n  let current_group_paren_length = 0;\n  let current_group_paren_index = 0;\n  let current_group_paren_paren_index = 0;\n  let current_group_paren_paren_length = 0;\n  let current_group_paren_paren_index = 0;\n  let current_group_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_length = 0;\n  let current_group_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_length = 0;\n  let current_group_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_length = 0;\n  let current_group_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_length = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_length = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_length = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_length = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_length = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_length = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_length = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_length = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_paren_index = 0;\n  let current_group_paren_paren", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let start = 0, end = string.length - 1;\n  while (start < end) {\n    if (string[start]!= string[end]) {\n      break;\n    }\n    start++;\n    end--;\n  }\n  return string.slice(start, end + 1);\n}\n\n/*\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('c", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    const next = i + 1;\n    const isEven = next % 2 === 0;\n    const isOdd = next % 2 === 1;\n    const isEvenOrOdd = isEven || isOdd;\n    const numberOfStones = next;\n    const numberOfStonesInLevel = numberOfStones;\n    const numberOfStonesInLevelPlusOne = numberOfStones + 1;\n    const numberOfStonesInLevelPlusTwo = numberOfStones + 2;\n    const numberOfStonesInLevelPlusThree = numberOfStones + 3;\n    const numberOfStonesInLevelPlusFour = numberOfStones + 4;\n    const numberOfStonesInLevelPlusFive = numberOfStones + 5;\n    const numberOfStonesInLevelPlusSix = numberOfStones + 6;\n    const numberOfStonesInLevelPlusSeven = numberOfStones + 7;\n    const numberOfStonesInLevelPlusEight = numberOfStones + 8;\n    const numberOfStonesInLevelPlusNine = numberOfStones + 9;\n    const numberOfStonesInLevelPlusTen = numberOfStones + 10;\n    const numberOfStonesInLevelPlusEleven = numberOfStones + 11;\n    const numberOfStonesInLevelPlusTwelve = numberOfStones + 12;\n    const numberOfStonesInLevelPlusThirteen = numberOfStones + 13;\n    const numberOfStonesInLevelPlusFourteen = numberOfStones + 14;\n    const numberOfStonesInLevelPlusFifteen = numberOfStones + 15;\n    const numberOfStonesInLevelPlusSixteen = numberOfStones + 16;\n    const numberOfStonesInLevelPlusSeventeen = numberOfStones + 17;\n    const numberOfStonesInLevelPlusEighteen = numberOfStones + 18;\n    const numberOfStonesInLevelPlusNineteen = numberOfStones + 19;\n    const numberOfStonesInLevelPlusTwenty = numberOfStones + 20;\n    const numberOfStonesInLevelPlusTwentyOne = numberOfStones + 21;\n    const numberOfStonesInLevelPlusTwentyTwo = numberOfStones + 22;\n    const numberOfStonesInLevelPlusTwentyThree = numberOfStones + 23;\n    const numberOfStonesInLevelPlusTwentyFour = numberOfStones + 24;\n    const numberOfStonesInLevelPlusTwentyFive = numberOfStones + 25;\n    const numberOfStonesInLevelPlusTwentySix = numberOfStones + 26;\n    const numberOfStonesInLevelPlusTwentySeven = numberOfStones + 27;\n    const numberOfStonesInLevelPlusTwentyEight = numberOfStones + 28;\n    const numberOfStonesInLevelPlusTwentyNine = numberOfStones + 29;\n    const numberOfStonesInLevelPlusThirty = numberOfStones + 30;\n    const numberOfStonesInLevelPlusThirtyOne = numberOfStones + 31;\n    const numberOfStonesInLevelPlusThirtyTwo = numberOfStones + 32;\n    const numberOfStonesInLevelPlusThirtyThree = numberOfStones + 33;\n    const numberOfStonesInLevelPlusThirtyFour = numberOfStones + 34;\n    const numberOfStonesInLevelPlusThirtyFive = numberOfStones + 35;\n    const numberOfStonesInLevelPlusThirtySix = numberOfStones + 36;\n    const numberOfStonesInLevelPlusThirtySeven = numberOfStones + 37;\n    const numberOfStonesInLevelPlusThirtyEight = numberOfStones + 38;\n    const numberOfStonesInLevelPlusThirtyNine = numberOfStones + 39;\n    const numberOfStonesInLevelPlusFourty = numberOfStones + 40;\n    const numberOfStonesInLevelPlusFourtyOne = numberOfStones + 41;\n    const numberOfStonesInLevelPlusFourtyTwo = numberOfStones + 42;\n    const numberOfStonesInLevelPlusFourtyThree = numberOfStones + 43;\n    const numberOfStonesInLevelPlusFourtyFour = numberOfStones + 44;\n    const numberOfStonesInLevelPlusFourtyFive = numberOfStones + 45;\n    const numberOfStonesInLevelPlusFourtySix = numberOfStones + 46;\n    const numberOfStonesInLevelPlusFourtySeven = numberOfStones + 47;\n    const numberOfStonesInLevelPlusFourtyEight = numberOfStones + 48;\n    const numberOfStonesInLevelPlusFourtyNine = numberOfStones + 49;\n    const numberOfStonesInLevelPlusFifty = numberOfStones + 50;\n    const numberOfStonesInLevelPlusFiftyOne = numberOfStones + 51;\n    const numberOfStonesInLevelPlusFiftyTwo = numberOfStones + 52;\n    const numberOfStonesInLevelPlusFiftyThree = numberOfStones + 53;\n    const numberOfStonesInLevelPlusFiftyFour = numberOfStones + 54;\n    const numberOfStonesInLevelPlusFiftyFive = numberOfStones + 55;\n    const numberOfStonesInLevelPlusFiftySix = numberOfStones + 56;\n    const numberOfStonesInLevelPlusFiftySeven = numberOfStones + 57;\n    const numberOfStonesInLevelPlusFiftyEight = numberOfStones + 58;\n    const numberOfStonesInLevelPlusFiftyNine = numberOfStones + 59;\n    const numberOfStonesInLevelPlusSixty = numberOfStones + 60;\n    const numberOfStonesInLevelPlusSixtyOne = numberOfStones + 61;\n    const numberOfStonesInLevelPlusSixtyTwo =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg INTO wORdS AND return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg INTO wORdS AND return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg INTO wORdS AND return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg INTO wORdS AND return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg INTO wORdS AND return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg INTO wORdS AND return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg INTO wORdS AND return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg INTO wORdS AND return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg INTO wORdS AND return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*THis fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "/*THis fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x > y) {\n    return -1;\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/103", "prompt": "/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n + m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/104", "prompt": "/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Even diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Even diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const d = x % 10;\n    if (d % 2 === 0) {\n      digits.push(d);\n    }\n    x = Math.floor(x / 10);\n  }\n  return digits;\n};\n\n/*\n  Given a list of positive integers, return a list of all the even numbers.\n  \n  For EXampLe:\n  >>> evenDigits([15, 33, 1422, 1])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  given AN aRRay of iNtegerS, soRT the integers THAt arE between 1 and 9 iNclusiVe,\n  rEVerSe tHE reSuLtIng arRAy, ANd tHEn Replace each digIT by iTs cOrrEspondiNG naMe fRoM\n  \"OnE\", \"TwO\", \"ThREe\", \"fOur\", \"fIVe\", \"SiX\", \"seveN\", \"eiGht\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "/*\n  given AN aRRay of iNtegerS, soRT the integers THAt arE between 1 and 9 iNclusiVe,\n  rEVerSe tHE reSuLtIng arRAy, ANd tHEn Replace each digIT by iTs cOrrEspondiNG naMe fRoM\n  \"OnE\", \"TwO\", \"ThREe\", \"fOur\", \"fIVe\", \"SiX\", \"seveN\", \"eiGht\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sortedArr = arr.slice().sort((a, b) => a.length - b.length);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    let str = reversedArr[i];\n    let index = str.indexOf(\"OnE\");\n    if (index === -1) {\n      index = str.indexOf(\"TwO\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"ThREe\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"fOur\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"fIVe\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"SiX\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"seveN\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"eiGht\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"nIne\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"\");\n    }\n    if (index!== -1) {\n      result.push(str.substring(0, index));\n    }\n  }\n  return result;\n};\n\nconst byLength = (arr) => {\n  let sortedArr = arr.slice().sort((a, b) => a.length - b.length);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    let str = reversedArr[i];\n    let index = str.indexOf(\"OnE\");\n    if (index === -1) {\n      index = str.indexOf(\"TwO\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"ThREe\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"fOur\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"fIVe\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"SiX\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"seveN\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"eiGht\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"nIne\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"\");\n    }\n    if (index!== -1) {\n      result.push(str.substring(0, index));\n    }\n  }\n  return result;\n};\n\nconst byLength = (arr) => {\n  let sortedArr = arr.slice().sort((a, b) => a.length - b.length);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    let str = reversedArr[i];\n    let index = str.indexOf(\"OnE\");\n    if (index === -1) {\n      index = str.indexOf(\"TwO\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"ThREe\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"fOur\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"fIVe\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"SiX\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"seveN\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"eiGht\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"nIne\");\n    }\n    if (index === -1) {\n      index = str.indexOf(\"\");\n    }\n    if (index!== -1) {\n      result.push(str.substring(0, index));\n    }\n  }\n  return result;\n};\n\nconst byLength = (arr) => {\n  let sortedArr = arr.slice().sort((a, b) => a.length - b.length);\n  let reversedArr = sortedArr.reverse();\n  let result = [];\n  for (let i = 0; i < reversedArr.length; i++) {\n    let str = reversedArr[i];\n    let index = str.indexOf(\"OnE\");\n    if (index === -1) {\n      index = str.indexOf(\"TwO\");\n    }\n    if (index", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += factorial(i);\n    }\n    return sum;\n  };\n  return [factorial(n), sum(n)];\n};\n\nconst f = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  given A PoSItive iNteger n, return A tuple thAT has the numbeR OF eveN and odd\n  integEr paliNdrOMes ThaT FalL wItHin thE RaNGe(1, n), iNClUsive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger n, return A tuple thAT has the numbeR OF eveN and odd\n  integEr paliNdrOMes ThaT FalL wItHin thE RaNGe(1, n), iNClUsive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconst evenOddPalindrome2 = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconst evenOddPalindrome3 = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconst evenOddPalindrome4 = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconst evenOddPalindrome5 = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconst evenOddPalindrome6 = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconst evenOddPalindrome7 = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconst evenOddPalindrome8 = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconst evenOddPalindrome9 = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconst evenOddPalindrome10 = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconst evenOddPalindrome11 = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconst evenOddPalindrome12 = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconst evenOddPalindrome13 = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd.push(i)\n    }\n  }\n  return (even.length, odd.length)\n}\n\nconst evenOddPalindrome14 = (n) => {\n  const even = []\n  const odd = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    } else {\n      odd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const sum = arr.reduce((acc, curr) => acc + curr, 0);\n  return sum > 0? sum : 0;\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  const sum = arr.reduce((acc, curr) => acc + curr, 0);\n  return sum > 0? sum : 0;\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums3 = (arr) => {\n  const sum = arr.reduce((acc, curr) => acc + curr, 0);\n  return sum > 0? sum : 0;\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums4 = (arr) => {\n  const sum = arr.reduce((acc, curr) => acc + curr, 0);\n  return sum > 0? sum : 0;\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums5 = (arr) => {\n  const sum = arr.reduce((acc, curr) => acc + curr, 0);\n  return sum > 0? sum : 0;\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums6 = (arr) => {\n  const sum = arr.reduce((acc, curr) => acc + curr, 0);\n  return sum > 0? sum : 0;\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums7 = (arr) => {\n  const sum = arr.reduce((acc, curr) => acc + curr, 0);\n  return sum > 0? sum : 0;\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*WE have AN aRRay 'arr' of N IntegeRs arr[1], arr[2], ..., arr[N].The\n  nUMbers in the arraY WIll bE randomly ordEred. YoUr tASk iS to DEteRmInE if\n  it IS pOSsiBLe To get an array soRTed in nOn-dEcrEasing oRDer By pErForMinG \n  thE FoLLowING opeRAtioN On The GIven ARRaY:\n      you arE Allowed To perFORM rIgHt shift OpERation ANy numBer Of timEs.\n  \n  ONE Right SHIFT opErATion mEANs shIFting all elemenTs oF the arraY bY one\n  posiTiON in tHE RiGHt DirectiOn. ThE laST elEMEnt of the Array Will be moVEd to\n  thE STaRTinG posiTIOn in tHe ArRay i.e. 0th index. \n\n  If it iS PossiBLE To obTaIn tHE sOrteD ArrAy by pERfOrmIng thE aboVe opeRation\n  TheN return trUe ELse return falSE.\n  if the gIveN aRraY is empTY THen return TRue.\n\n  NotE: THe gIVeN list is guarantEed to Have unIqUe elemeNts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "/*WE have AN aRRay 'arr' of N IntegeRs arr[1], arr[2],..., arr[N].The\n  nUMbers in the arraY WIll bE randomly ordEred. YoUr tASk iS to DEteRmInE if\n  it IS pOSsiBLe To get an array soRTed in nOn-dEcrEasing oRDer By pErForMinG \n  thE FoLLowING opeRAtioN On The GIven ARRaY:\n      you arE Allowed To perFORM rIgHt shift OpERation ANy numBer Of timEs.\n  \n  ONE Right SHIFT opErATion mEANs shIFting all elemenTs oF the arraY bY one\n  posiTiON in tHE RiGHt DirectiOn. ThE laST elEMEnt of the Array Will be moVEd to\n  thE STaRTinG posiTIOn in tHe ArRay i.e. 0th index. \n\n  If it iS PossiBLE To obTaIn tHE sOrteD ArrAy by pERfOrmIng thE aboVe opeRation\n  TheN return trUe ELse return falSE.\n  if the gIveN aRraY is empTY THen return TRue.\n\n  NotE: THe gIVeN list is guarantEed to Have unIqUe elemeNts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const len = arr.length\n  if (len === 0) return false\n  let i = 0\n  let j = len - 1\n  let temp = arr[i]\n  while (j > i) {\n    if (arr[j] < arr[i]) {\n      arr[i] = arr[j]\n      arr[j] = temp\n      temp = arr[i]\n      i++\n    }\n    j--\n  }\n  return true\n}\n\nconst moveOneBall2 = (arr) => {\n  const len = arr.length\n  if (len === 0) return false\n  let i = 0\n  let j = len - 1\n  let temp = arr[i]\n  while (j > i) {\n    if (arr[j] < arr[i]) {\n      arr[i] = arr[j]\n      arr[j] = temp\n      temp = arr[i]\n      i++\n    }\n    j--\n  }\n  return true\n}\n\nconst moveOneBall3 = (arr) => {\n  const len = arr.length\n  if (len === 0) return false\n  let i = 0\n  let j = len - 1\n  let temp = arr[i]\n  while (j > i) {\n    if (arr[j] < arr[i]) {\n      arr[i] = arr[j]\n      arr[j] = temp\n      temp = arr[i]\n      i++\n    }\n    j--\n  }\n  return true\n}\n\nconst moveOneBall4 = (arr) => {\n  const len = arr.length\n  if (len === 0) return false\n  let i = 0\n  let j = len - 1\n  let temp = arr[i]\n  while (j > i) {\n    if (arr[j] < arr[i]) {\n      arr[i] = arr[j]\n      arr[j] = temp\n      temp = arr[i]\n      i++\n    }\n    j--\n  }\n  return true\n}\n\nconst moveOneBall5 = (arr) => {\n  const len = arr.length\n  if (len === 0) return false\n  let i = 0\n  let j = len - 1\n  let temp = arr[i]\n  while (j > i) {\n    if (arr[j] < arr[i]) {\n      arr[i] = arr[j]\n      arr[j] = temp\n      temp = arr[i]\n      i++\n    }\n    j--\n  }\n  return true\n}\n\nconst moveOneBall6 = (arr) => {\n  const len = arr.length\n  if (len === 0) return false\n  let i = 0\n  let j = len - 1\n  let temp = arr[i]\n  while (j > i) {\n    if (arr[j] < arr[i]) {\n      arr[i] = arr[j]\n      arr[j] = temp\n      temp = arr[i]\n      i++\n    }\n    j--\n  }\n  return true\n}\n\nconst moveOneBall7 = (arr) => {\n  const len = arr.length\n  if (len === 0) return false\n  let i = 0\n  let j = len - 1\n  let temp = arr[i]\n  while (j > i) {\n    if (arr[j] < arr[i]) {\n      arr[i] = arr[j]\n      arr[j] = temp\n      temp = arr[i]\n      i++\n    }\n    j--\n  }\n  return true\n}\n\nconst moveOneBall8 = (arr) => {\n  const len = arr.length\n  if (len === 0) return false\n  let i = 0\n  let j = len - 1\n  let temp = arr[i]\n  while (j > i) {\n    if (arr[j] < arr[i]) {\n      arr[i] = arr[j]\n      arr[j] = temp\n      temp = arr[i]\n      i++\n    }\n    j--\n  }\n  return true\n}\n\nconst moveOneBall9 = (arr) => {\n  const len = arr.length\n  if (len === 0) return false\n  let i = 0\n  let j = len - 1\n  let temp = arr[i]\n  while (j > i) {\n    if (arr[j] < arr[i]) {\n      arr[i] = arr[j]\n      arr[j", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* input ARe TWo striNgs a and b ConSIsting only of 1S ANd 0s.\n  PErform binary xOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "/* input ARe TWo striNgs a and b ConSIsting only of 1S ANd 0s.\n  PErform binary xOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  PErform binary AND on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringAnd('010', '110')\n  '010'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/*\n  PErform binary OR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/*\n  PErform binary XOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  PErform binary AND on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringAnd('010', '110')\n  '010'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/*\n  PErform binary OR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/*\n  PErform binary XOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  PErform binary AND on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringAnd('010', '110')\n  '010'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/*\n  PErform binary OR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/*\n  PErform binary XOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  PErform binary AND on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringAnd('010', '110')\n  '010'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/*\n  PErform binary OR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringOr('010', '110')\n  '110'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/*\n  PErform binary XOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  PErform binary AND on tHesE InpUts ANd return rEsUlT also AS a s", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return false;\n  }\n  let i = 0;\n  let j = 0;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] === lst2[j]) {\n      lst1[i] = lst2[j];\n      j++;\n    }\n    i++;\n  }\n  while (i < lst1.length) {\n    lst1[i] = lst2[j];\n    i++;\n  }\n  while (j < lst2.length) {\n    lst1[i] = lst2[j];\n    j++;\n  }\n  return true;\n};\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]); // true\nexchange([1, 2, 3, 4], [1, 5, 3, 4]); // false\nexchange([1, 2, 3, 4], [1, 2, 3, 5]); // false\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5]); // false\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]); // false\nexchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4]); // true\nexchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]); // true\nexchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6]); // true\nexchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]); // true\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 2, 3", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase()\n  const test = test.split('')\n  const result = {}\n  for (let i = 0; i < test.length; i++) {\n    if (result[test[i]] === undefined) {\n      result[test[i]] = 1\n    } else {\n      result[test[i]]++\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, return a list of all the words in the string.\n  \n  Example:\n  words('a b c') == ['a', 'b', 'c']\n  words('a b c d') == ['a', 'b', 'c', 'd']\n  words('a b c d e') == ['a', 'b', 'c', 'd', 'e']\n  words('a b c d e f') == ['a', 'b', 'c', 'd', 'e', 'f']\n  words('a b c d e f g') == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n  words('a b c d e f g h') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n  words('a b c d e f g h i') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\n  words('a b c d e f g h i j') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n  words('a b c d e f g h i j k') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\n  words('a b c d e f g h i j k l') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l']\n  words('a b c d e f g h i j k l m') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']\n  words('a b c d e f g h i j k l m n') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n']\n  words('a b c d e f g h i j k l m n o') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o']\n  words('a b c d e f g h i j k l m n o p') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p']\n  words('a b c d e f g h i j k l m n o p q') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q']\n  words('a b c d e f g h i j k l m n o p q r') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r']\n  words('a b c d e f g h i j k l m n o p q r s') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s']\n  words('a b c d e f g h i j k l m n o p q r s t') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't']\n  words('a b c d e f g h i j k l m n o p q r s t u') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u']\n  words('a b c d e f g h i j k l m n o p q r s t u v') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v']\n  words('a b c d e f g h i j k l m n o p q r s t u v w') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/112", "prompt": "/*TAsk\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "/*TAsk\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  while (j < len) {\n    if (s[j] === c) {\n      j++\n    } else {\n      result.push(s[j])\n      j++\n    }\n  }\n  while (k < len) {\n    if (s[k] === c) {\n      k++\n    } else {\n      result.push(s[k])\n      k++\n    }\n  }\n  return result\n}\n\nconst reverseDelete2 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  while (j < len) {\n    if (s[j] === c) {\n      j++\n    } else {\n      result.push(s[j])\n      j++\n    }\n  }\n  while (k < len) {\n    if (s[k] === c) {\n      k++\n    } else {\n      result.push(s[k])\n      k++\n    }\n  }\n  return result\n}\n\nconst reverseDelete3 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  while (j < len) {\n    if (s[j] === c) {\n      j++\n    } else {\n      result.push(s[j])\n      j++\n    }\n  }\n  while (k < len) {\n    if (s[k] === c) {\n      k++\n    } else {\n      result.push(s[k])\n      k++\n    }\n  }\n  return result\n}\n\nconst reverseDelete4 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  while (j < len) {\n    if (s[j] === c) {\n      j++\n    } else {\n      result.push(s[j])\n      j++\n    }\n  }\n  while (k < len) {\n    if (s[k] === c) {\n      k++\n    } else {\n      result.push(s[k])\n      k++\n    }\n  }\n  return result\n}\n\nconst reverseDelete5 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  while (j < len) {\n    if (s[j] === c) {\n      j++\n    } else {\n      result.push(s[j])\n      j++\n    }\n  }\n  while (k < len) {\n    if (s[k] === c) {\n      k++\n    } else {\n      result.push(s[k])\n      k++\n    }\n  }\n  return result\n}\n\nconst reverseDelete6 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  while (j < len) {\n    if (s[j] === c) {\n      j++\n    } else {\n      result.push(s[j])\n      j++\n    }\n  }\n  while (k < len) {\n    if (s[k] === c) {\n      k++\n    } else {\n      result.push(s[k])\n      k++\n    }\n  }\n  return result\n}\n\nconst reverseDelete7 = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    if (s[i] === c) {\n      i++\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  while (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/113", "prompt": "/*GIven a list OF sTRings, wHere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "/*GIven a list OF sTRings, wHere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      count++\n    }\n  }\n  return count.toString()\n}\n\n/*\n  Given a list of sTRings, wHere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      count++\n    }\n  }\n  return count.toString()\n}\n\n/*\n  Given a list of sTRings, wHere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      count++\n    }\n  }\n  return count.toString()\n}\n\n/*\n  Given a list of sTRings, wHere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      count++\n    }\n  }\n  return count.toString()\n}\n\nmodule.exports = {\n  oddCount\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const len = nums.length\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = sum\n  let start = 0\n  let end = 0\n  let sumOfSubArray = 0\n  while (end < len) {\n    sumOfSubArray = sum - nums[end]\n    if (sumOfSubArray < minSum) {\n      minSum = sumOfSubArray\n      start = end\n    }\n    end++\n  }\n  return minSum\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]))\nconsole.log(minSubArraySum([-1, -2, -3]))\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  you arE GiVEn a recTangulAr grid oF Wells. Each row REPresEnts a single wEll,\n  and EacH 1 in A roW rePResEnTs A singLE uNIt oF WaTer.\n  Each well has A CorrEspOndIng buckET thAt cAn Be uSed To eXTrACt wATEr frOM it, \n  aND aLl bUCketS HAvE The saME capacity.\n  Your taSk is tO USE tHe Buckets To EMpty thE Wells.\n  outPut thE nuMBEr of tIMES You NeED to loWER the BUckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a recTangulAr grid oF Wells. Each row REPresEnts a single wEll,\n  and EacH 1 in A roW rePResEnTs A singLE uNIt oF WaTer.\n  Each well has A CorrEspOndIng buckET thAt cAn Be uSed To eXTrACt wATEr frOM it, \n  aND aLl bUCketS HAvE The saME capacity.\n  Your taSk is tO USE tHe Buckets To EMpty thE Wells.\n  outPut thE nuMBEr of tIMES You NeED to loWER the BUckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(n).fill(0);\n    const used = new Array(n).fill(0);\n    const maxFill = new Array(n).fill(0);\n    const res = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                used[i] = 1;\n                buckets[i]++;\n                if (buckets[i] > capacity) {\n                    res += buckets[i] - capacity;\n                    buckets[i] = capacity;\n                }\n            }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (used[i] === 0) {\n                maxFill[i] = Math.max(maxFill[i], buckets[i]);\n            }\n        }\n    }\n    return res + maxFill.reduce((a, b) => a + b);\n};\n\nconst grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\nconst capacity = 1;\nconsole.log(maxFill(grid, capacity));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = arr.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*GIven a STrINg s and a NaturaL nuMBer n, you have beEN TaskEd to implemenT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "/*GIven a STrINg s and a NaturaL nuMBer n, you have beEN TaskEd to implemenT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = s.split(\" \")\n  let result = []\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === n) {\n      result.push(words[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, return a new string with the first letter in uppercase.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  uppercase(\"Hello world\") ==> \"Hello world\"\n  uppercase(\"Hello world\") ==> \"Hello world\"\n  uppercase(\"Hello world\") ==> \"Hello world\"\n  uppercase(\"Hello world\") ==> \"Hello world\"\n  */\nconst uppercase = (s) => {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\n/*\n  Given a string, return a new string with the first letter in lowercase.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  lowercase(\"Hello world\") ==> \"hello world\"\n  lowercase(\"Hello world\") ==> \"hello world\"\n  lowercase(\"Hello world\") ==> \"hello world\"\n  lowercase(\"Hello world\") ==> \"hello world\"\n  */\nconst lowercase = (s) => {\n  return s.charAt(0).toLowerCase() + s.slice(1)\n}\n\n/*\n  Given a string, return a new string with the first letter in title case.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  titleCase(\"Hello world\") ==> \"Hello World\"\n  titleCase(\"Hello world\") ==> \"Hello World\"\n  titleCase(\"Hello world\") ==> \"Hello World\"\n  titleCase(\"Hello world\") ==> \"Hello World\"\n  */\nconst titleCase = (s) => {\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase()\n}\n\n/*\n  Given a string, return a new string with the first letter in sentence case.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  sentenceCase(\"Hello world\") ==> \"Hello world\"\n  sentenceCase(\"Hello world\") ==> \"Hello world\"\n  sentenceCase(\"Hello world\") ==> \"Hello world\"\n  sentenceCase(\"Hello world\") ==> \"Hello world\"\n  */\nconst sentenceCase = (s) => {\n  let words = s.split(\" \")\n  let result = \"\"\n  for (let i = 0; i < words.length; i++) {\n    if (i === 0) {\n      result += words[i].charAt(0).toUpperCase() + words[i].slice(1)\n    } else {\n      result += words[i]\n    }\n    if (i < words.length - 1) {\n      result += \" \"\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, return a new string with the first letter in upper case.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  upperCase(\"Hello world\") ==> \"Hello world\"\n  upperCase(\"Hello world\") ==> \"Hello world\"\n  upperCase(\"Hello world\") ==> \"Hello world\"\n  upperCase(\"Hello world\") ==> \"Hello world\"\n  */\nconst upperCase = (s) => {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\n/*\n  Given a string, return a new string with the first letter in lower case.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  lowerCase(\"Hello world\") ==> \"hello world\"\n  lowerCase(\"Hello world\") ==> \"hello world\"\n  lowerCase(\"Hello world\") ==> \"hello world\"\n  lowerCase(\"Hello world\") ==> \"hello world\"\n  */\nconst lowerCase = (s) => {\n  return s.charAt(0).toLowerCase() + s.slice(1)\n}\n\n/*\n  Given a string, return a new string with the first letter in title case.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  titleCase(\"Hello world\") ==> \"Hello World\"\n  titleCase(\"Hello world\") ==> \"Hello World\"\n  titleCase(\"Hello world\") ==> \"Hello World\"\n  titleCase(\"Hello world\") ==> \"Hello World\"\n  */\nconst titleCase = (s) => {\n  return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase()\n}\n\n/*\n  Given a string, return a new string with the first letter in sentence case.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  sentenceCase(\"Hello world\") ==> \"Hello world\"\n  sent", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*YOu are GIvEN a word. Your Task is To fINd the closest VOWel tHat stands betWeen \n  twO coNSonAntS FroM tHe Right SIdE Of tHE word (cAse sensitive).\n  \n  VoWEls in tHe bEgiNning anD EndIng DoEsn'T coUnt. rEtURn eMPTy stRIng iF YoU diDN't\n  fiND AnY Vowel MEt the abOve coNDITiOn. \n\n  you may aSsUMe that THe givEn sTring ConTAIns EnGLISH leTtER only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a word. Your Task is To fINd the closest VOWel tHat stands betWeen \n  twO coNSonAntS FroM tHe Right SIdE Of tHE word (cAse sensitive).\n  \n  VoWEls in tHe bEgiNning anD EndIng DoEsn'T coUnt. rEtURn eMPTy stRIng iF YoU diDN't\n  fiND AnY Vowel MEt the abOve coNDITiOn. \n\n  you may aSsUMe that THe givEn sTring ConTAIns EnGLISH leTtER only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelCount = vowels.length\n  const wordLength = word.length\n  const closestVowel = word.charAt(0)\n  let closestDistance = Math.abs(wordLength - vowelCount)\n  let closestIndex = 0\n  for (let i = 1; i < wordLength; i++) {\n    const distance = Math.abs(wordLength - i)\n    if (distance < closestDistance) {\n      closestDistance = distance\n      closestIndex = i\n    }\n  }\n  return closestVowel\n}\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"y\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel2 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelCount = vowels.length\n  const wordLength = word.length\n  const closestVowel = word.charAt(0)\n  let closestDistance = Math.abs(wordLength - vowelCount)\n  let closestIndex = 0\n  for (let i = 1; i < wordLength; i++) {\n    const distance = Math.abs(wordLength - i)\n    if (distance < closestDistance) {\n      closestDistance = distance\n      closestIndex = i\n    }\n  }\n  return closestVowel\n}\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"y\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel3 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelCount = vowels.length\n  const wordLength = word.length\n  const closestVowel = word.charAt(0)\n  let closestDistance = Math.abs(wordLength - vowelCount)\n  let closestIndex = 0\n  for (let i = 1; i < wordLength; i++) {\n    const distance = Math.abs(wordLength - i)\n    if (distance < closestDistance) {\n      closestDistance = distance\n      closestIndex = i\n    }\n  }\n  return closestVowel\n}\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"y\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel4 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelCount = vowels.length\n  const wordLength = word.length\n  const closestVowel = word.charAt(0)\n  let closestDistance = Math.abs(wordLength - vowelCount)\n  let closestIndex = 0\n  for (let i = 1; i < wordLength; i++) {\n    const distance = Math.abs(wordLength - i)\n    if (distance < closestDistance) {\n      closestDistance = distance\n      closestIndex = i\n    }\n  }\n  return closestVowel\n}\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"y\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel5 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const vowelCount = vowels.length\n  const wordLength = word.length\n  const closestVowel = word.charAt(0)\n  let closestDistance = Math.abs(wordLength - vowelCount)\n  let closestIndex = 0\n  for (let i = 1; i < wordLength; i++) {\n    const distance = Math.abs(wordLength - i)\n    if (distance < closestDistance) {\n      closestDistance = distance\n      closestIndex = i\n    }\n  }\n  return closestVowel\n}\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"y\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel6 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/119", "prompt": "/* you arE GiVEn a list of tWo striNgs, BOth strings coNSIst oF open\n  parenthEses '(' or CloSE paRenTHesEs ')' OnLy.\n  YouR JoB Is tO ChEck if it is possiBLe to ConCatEnate thE Two StrInGs in\n  sOme OrdER, tHAt tHE ResuLTing STrIng WIll bE GOoD.\n  a striNG S is conSiderED TO bE gOod if anD oNLy if alL ParenTheSes in S\n  aRe bALAnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "/* you arE GiVEn a list of tWo striNgs, BOth strings coNSIst oF open\n  parenthEses '(' or CloSE paRenTHesEs ')' OnLy.\n  YouR JoB Is tO ChEck if it is possiBLe to ConCatEnate thE Two StrInGs in\n  sOme OrdER, tHAt tHE ResuLTing STrIng WIll bE GOoD.\n  a striNG S is conSiderED TO bE gOod if anD oNLy if alL ParenTheSes in S\n  aRe bALAnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  if (len === 1) return 'Yes'\n  if (lst[0] === '(' && lst[len - 1] === ')') return 'Yes'\n  if (lst[0] === '(' && lst[len - 1] === ')') return 'No'\n  if (lst[0] === '(') return 'No'\n  if (lst[len - 1] === ')') return 'No'\n  return 'No'\n}\n\n/*\n  matchParens(['()', ')']) == 'Yes'\n  matchParens(['())', ')']) == 'No'\n  matchParens(['(())', ')']) == 'Yes'\n  matchParens(['(())', ')()']) == 'No'\n  matchParens(['(())', '()']) == 'No'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()']) == 'Yes'\n  matchParens(['(())', '()'])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* out of list OF strings, return tHE longest one. ReTurn thE fiRSt one in case of mULTiplE\n  strings of the same leNgth. ReTurN NulL in caSE thE iNpUt list is eMPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "/* out of list OF strings, return tHE longest one. ReTurn thE fiRSt one in case of mULTiplE\n  strings of the same leNgth. ReTurN NulL in caSE thE iNpUt list is eMPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let max = 0\n  let longest = ''\n  strings.forEach((string) => {\n    if (string.length > max) {\n      max = string.length\n      longest = string\n    }\n  })\n  return longest\n}\n\n/*\n  >>> longest([1, 2, 3])\n  1\n  >>> longest([1, 2, 3, 4])\n  4\n  >>> longest([1, 2, 3, 4, 5])\n  5\n  >>> longest([1, 2, 3, 4, 5, 6])\n  6\n  >>> longest([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  10\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  11\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  12\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  13\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  14\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  15\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  16\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  17\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  18\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  19\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  20\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  21\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  22\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  23\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  24\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  25\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  26\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  27\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  28\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  29\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  30\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  31\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  32\n  >>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  given AN aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe maximum k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "/*\n  given AN aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe maximum k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxLen = 1\n  let i = 0\n  let j = 0\n  let maxIndex = 0\n  while (i < len) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxLen = 1\n      maxIndex = i\n    } else if (arr[i] === max) {\n      maxLen++\n    }\n    i++\n  }\n  if (maxLen === k) {\n    return arr\n  }\n  const newArr = []\n  for (i = 0; i < k; i++) {\n    newArr.push(arr[maxIndex])\n    maxIndex++\n  }\n  return newArr\n}\n\nconst arr = [-3, -4, 5]\nconst k = 3\nconst res = maximum(arr, k)\nconsole.log(res)\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*GIven a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "/*GIven a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements17 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements18 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements19 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements20 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements21 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements22 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements23 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements24 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements25 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements26 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  given A PoSItive iNteger n, return A soRTed list that has thE ODd nuMbers in collatz SequenCe.\n\n  THE CoLlaTZ coNjEcTure iS A cONjeCTuRe in mathematics tHAt coNceRns A sequenCE deFinEd\n  As fOllOws: STaRT wiTH Any pOSitiVE iNteGEr n. ThEN EaCH term IS obtainEd froM THE \n  pReVious teRm AS folloWS: if thE prEviouS teRM Is eveN, THE NexT tERm is oNE Half OF \n  the previous teRm. IF the prevIoUs term is OdD, ThE NExT TeRm is 3 timEs thE prEVioUS\n  Term plus 1. the coNjecture IS that nO MAtTEr wHat vaLUE of n, ThE sEquence will alwaYS reacH 1.\n\n  nOTe: \n      1. CoLlAtz(1) IS [1].\n      2. rEturNEd list sOrted in INcReaSing oRder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger n, return A soRTed list that has thE ODd nuMbers in collatz SequenCe.\n\n  THE CoLlaTZ coNjEcTure iS A cONjeCTuRe in mathematics tHAt coNceRns A sequenCE deFinEd\n  As fOllOws: STaRT wiTH Any pOSitiVE iNteGEr n. ThEN EaCH term IS obtainEd froM THE \n  pReVious teRm AS folloWS: if thE prEviouS teRM Is eveN, THE NexT tERm is oNE Half OF \n  the previous teRm. IF the prevIoUs term is OdD, ThE NExT TeRm is 3 timEs thE prEVioUS\n  Term plus 1. the coNjecture IS that nO MAtTEr wHat vaLUE of n, ThE sEquence will alwaYS reacH 1.\n\n  nOTe: \n      1. CoLlAtz(1) IS [1].\n      2. rEturNEd list sOrted in INcReaSing oRder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = [1, n]\n  const odd = []\n  const even = []\n  const i = 1\n  while (collatz[i]!== 1) {\n    if (collatz[i] % 2 === 1) {\n      odd.push(collatz[i])\n    } else {\n      even.push(collatz[i])\n    }\n    i = collatz[i] // get next term\n  }\n  return odd.concat(even)\n}\n\nconst getOddCollatz2 = (n) => {\n  const collatz = [1, n]\n  const odd = []\n  const even = []\n  const i = 1\n  while (collatz[i]!== 1) {\n    if (collatz[i] % 2 === 1) {\n      odd.push(collatz[i])\n    } else {\n      even.push(collatz[i])\n    }\n    i = collatz[i] // get next term\n  }\n  return odd.concat(even)\n}\n\nconst getOddCollatz3 = (n) => {\n  const collatz = [1, n]\n  const odd = []\n  const even = []\n  const i = 1\n  while (collatz[i]!== 1) {\n    if (collatz[i] % 2 === 1) {\n      odd.push(collatz[i])\n    } else {\n      even.push(collatz[i])\n    }\n    i = collatz[i] // get next term\n  }\n  return odd.concat(even)\n}\n\nconst getOddCollatz4 = (n) => {\n  const collatz = [1, n]\n  const odd = []\n  const even = []\n  const i = 1\n  while (collatz[i]!== 1) {\n    if (collatz[i] % 2 === 1) {\n      odd.push(collatz[i])\n    } else {\n      even.push(collatz[i])\n    }\n    i = collatz[i] // get next term\n  }\n  return odd.concat(even)\n}\n\nconst getOddCollatz5 = (n) => {\n  const collatz = [1, n]\n  const odd = []\n  const even = []\n  const i = 1\n  while (collatz[i]!== 1) {\n    if (collatz[i] % 2 === 1) {\n      odd.push(collatz[i])\n    } else {\n      even.push(collatz[i])\n    }\n    i = collatz[i] // get next term\n  }\n  return odd.concat(even)\n}\n\nconst getOddCollatz6 = (n) => {\n  const collatz = [1, n]\n  const odd = []\n  const even = []\n  const i = 1\n  while (collatz[i]!== 1) {\n    if (collatz[i] % 2 === 1) {\n      odd.push(collatz[i])\n    } else {\n      even.push(collatz[i])\n    }\n    i = collatz[i] // get next term\n  }\n  return odd.concat(even)\n}\n\nconst getOddCollatz7 = (n) => {\n  const collatz = [1, n]\n  const odd = []\n  const even = []\n  const i = 1\n  while (collatz[i]!== 1) {\n    if (collatz[i] % 2 === 1) {\n      odd.push(collatz[i])\n    } else {\n      even.push(collatz[i])\n    }\n    i = collatz[i] // get next term\n  }\n  return odd.concat(even)\n}\n\nconst getOddCollatz8 = (n) => {\n  const collatz = [1, n]\n  const odd = []\n  const even = []\n  const i = 1\n  while (collatz[i]!== 1) {\n    if (collatz[i] % 2 === 1) {\n      odd.push(collatz[i])\n    } else {\n      even.push(collatz[i])\n    }\n    i = collatz[i] // get next term\n  }\n  return odd.concat(even)\n}\n\nconst getOddCollatz9 = (n) => {\n  const collatz = [1, n]\n  const odd = []\n  const even = []\n  const i = 1\n  while (collatz[i]!== 1) {\n    if (collatz[i] % 2 === 1) {\n      odd.push(collatz[i])\n    } else {\n      even.push(collatz[i])\n    }\n    i = collatz[i] // get next term\n  }\n  return odd.concat(even)\n}\n\nconst getOddCollatz10 = (n) => {\n  const collatz = [", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/124", "prompt": "/*YOu havE To WRite a fUnctioN whICh validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date sTriNg iS NoT EmpTY.\n  2. the nUMber OF dAys IS not LESs THan 1 or HIgher thAn 31 dayS FOR mOnThs 1,3,5,7,8,10,12. And tHe NUmber oF Days iS noT less ThaN 1 OR highER THAn 30 dAyS For moNTHs 4,6,9,11. AnD, The number of dayS is Not less tHaN 1 or higheR tHAn 29 FOR tHE mOnth 2.\n  3. The MontHs sHOulD NOt be less Than 1 oR higher tHAn 12.\n  4. The date sHOUlD Be in tHe forMAT: mm-Dd-YyYy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "/*YOu havE To WRite a fUnctioN whICh validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date sTriNg iS NoT EmpTY.\n  2. the nUMber OF dAys IS not LESs THan 1 or HIgher thAn 31 dayS FOR mOnThs 1,3,5,7,8,10,12. And tHe NUmber oF Days iS noT less ThaN 1 OR highER THAn 30 dAyS For moNTHs 4,6,9,11. AnD, The number of dayS is Not less tHaN 1 or higheR tHAn 29 FOR tHE mOnth 2.\n  3. The MontHs sHOulD NOt be less Than 1 oR higher tHAn 12.\n  4. The date sHOUlD Be in tHe forMAT: mm-Dd-YyYy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateArray = date.split('-');\n  let dateArrayLength = dateArray.length;\n  let dateArrayLength2 = dateArray.length;\n  let dateArrayLength3 = dateArray.length;\n  let dateArrayLength4 = dateArray.length;\n  let dateArrayLength5 = dateArray.length;\n  let dateArrayLength6 = dateArray.length;\n  let dateArrayLength7 = dateArray.length;\n  let dateArrayLength8 = dateArray.length;\n  let dateArrayLength9 = dateArray.length;\n  let dateArrayLength10 = dateArray.length;\n  let dateArrayLength11 = dateArray.length;\n  let dateArrayLength12 = dateArray.length;\n  let dateArrayLength13 = dateArray.length;\n  let dateArrayLength14 = dateArray.length;\n  let dateArrayLength15 = dateArray.length;\n  let dateArrayLength16 = dateArray.length;\n  let dateArrayLength17 = dateArray.length;\n  let dateArrayLength18 = dateArray.length;\n  let dateArrayLength19 = dateArray.length;\n  let dateArrayLength20 = dateArray.length;\n  let dateArrayLength21 = dateArray.length;\n  let dateArrayLength22 = dateArray.length;\n  let dateArrayLength23 = dateArray.length;\n  let dateArrayLength24 = dateArray.length;\n  let dateArrayLength25 = dateArray.length;\n  let dateArrayLength26 = dateArray.length;\n  let dateArrayLength27 = dateArray.length;\n  let dateArrayLength28 = dateArray.length;\n  let dateArrayLength29 = dateArray.length;\n  let dateArrayLength30 = dateArray.length;\n  let dateArrayLength31 = dateArray.length;\n  let dateArrayLength32 = dateArray.length;\n  let dateArrayLength33 = dateArray.length;\n  let dateArrayLength34 = dateArray.length;\n  let dateArrayLength35 = dateArray.length;\n  let dateArrayLength36 = dateArray.length;\n  let dateArrayLength37 = dateArray.length;\n  let dateArrayLength38 = dateArray.length;\n  let dateArrayLength39 = dateArray.length;\n  let dateArrayLength40 = dateArray.length;\n  let dateArrayLength41 = dateArray.length;\n  let dateArrayLength42 = dateArray.length;\n  let dateArrayLength43 = dateArray.length;\n  let dateArrayLength44 = dateArray.length;\n  let dateArrayLength45 = dateArray.length;\n  let dateArrayLength46 = dateArray.length;\n  let dateArrayLength47 = dateArray.length;\n  let dateArrayLength48 = dateArray.length;\n  let dateArrayLength49 = dateArray.length;\n  let dateArrayLength50 = dateArray.length;\n  let dateArrayLength51 = dateArray.length;\n  let dateArrayLength52 = dateArray.length;\n  let dateArrayLength53 = dateArray.length;\n  let dateArrayLength54 = dateArray.length;\n  let dateArrayLength55 = dateArray.length;\n  let dateArrayLength56 = dateArray.length;\n  let dateArrayLength57 = dateArray.length;\n  let dateArrayLength58 = dateArray.length;\n  let dateArrayLength59 = dateArray.length;\n  let dateArrayLength60 = dateArray.length;\n  let dateArrayLength61 = dateArray.length;\n  let dateArrayLength62 = dateArray.length;\n  let dateArrayLength63 = dateArray.length;\n  let dateArrayLength64 = dateArray.length;\n  let dateArrayLength65 = dateArray.length;\n  let dateArrayLength66 = dateArray.length;\n  let dateArrayLength67 = dateArray.length;\n  let dateArrayLength68 = dateArray.length;\n  let dateArrayLength69 = dateArray.length;\n  let dateArrayLength70 = dateArray.length;\n  let dateArrayLength71 = dateArray.length;\n  let dateArrayLength72 = dateArray.length;\n  let dateArrayLength73 = dateArray.length;\n  let dateArrayLength74 = dateArray.length;\n  let dateArrayLength75 = dateArray.length;\n  let dateArrayLength76 = dateArray.length;\n  let dateArrayLength77 = dateArray.length;\n  let dateArrayLength78 = dateArray.length;\n  let dateArrayLength79 = dateArray.length;\n  let dateArrayLength80 = dateArray.length;\n  let dateArrayLength81 = dateArray.length;\n  let dateArrayLength82 = dateArray.length;\n  let dateArrayLength83 = dateArray.length;\n  let dateArrayLength84 = dateArray.length;\n  let dateArrayLength85 = dateArray.length;\n  let dateArrayLength86 = dateArray.length;\n  let dateArrayLength87 = dateArray.length;\n  let dateArrayLength88 = dateArray.length;\n  let dateArrayLength89 = dateArray.length;\n  let dateArrayLength90 = dateArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* given A StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1, ... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "/* given A StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1,... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsLengthMinusOne = wordsLength - 1;\n  const wordsLengthMinusTwo = wordsLength - 2;\n  const wordsLengthMinusThree = wordsLength - 3;\n  const wordsLengthMinusFour = wordsLength - 4;\n  const wordsLengthMinusFive = wordsLength - 5;\n  const wordsLengthMinusSix = wordsLength - 6;\n  const wordsLengthMinusSeven = wordsLength - 7;\n  const wordsLengthMinusEight = wordsLength - 8;\n  const wordsLengthMinusNine = wordsLength - 9;\n  const wordsLengthMinusTen = wordsLength - 10;\n  const wordsLengthMinusEleven = wordsLength - 11;\n  const wordsLengthMinusTwelve = wordsLength - 12;\n  const wordsLengthMinusThirteen = wordsLength - 13;\n  const wordsLengthMinusFourteen = wordsLength - 14;\n  const wordsLengthMinusFifteen = wordsLength - 15;\n  const wordsLengthMinusSixteen = wordsLength - 16;\n  const wordsLengthMinusSeventeen = wordsLength - 17;\n  const wordsLengthMinusEighteen = wordsLength - 18;\n  const wordsLengthMinusNineteen = wordsLength - 19;\n  const wordsLengthMinusTwenty = wordsLength - 20;\n  const wordsLengthMinusTwentyOne = wordsLength - 21;\n  const wordsLengthMinusTwentyTwo = wordsLength - 22;\n  const wordsLengthMinusTwentyThree = wordsLength - 23;\n  const wordsLengthMinusTwentyFour = wordsLength - 24;\n  const wordsLengthMinusTwentyFive = wordsLength - 25;\n  const wordsLengthMinusTwentySix = wordsLength - 26;\n  const wordsLengthMinusTwentySeven = wordsLength - 27;\n  const wordsLengthMinusTwentyEight = wordsLength - 28;\n  const wordsLengthMinusTwentyNine = wordsLength - 29;\n  const wordsLengthMinusThirty = wordsLength - 30;\n  const wordsLengthMinusThirtyOne = wordsLength - 31;\n  const wordsLengthMinusThirtyTwo = wordsLength - 32;\n  const wordsLengthMinusThirtyThree = wordsLength - 33;\n  const wordsLengthMinusThirtyFour = wordsLength - 34;\n  const wordsLengthMinusThirtyFive = wordsLength - 35;\n  const wordsLengthMinusThirtySix = wordsLength - 36;\n  const wordsLengthMinusThirtySeven = wordsLength - 37;\n  const wordsLengthMinusThirtyEight = wordsLength - 38;\n  const wordsLengthMinusThirtyNine = wordsLength - 39;\n  const wordsLengthMinusForty = wordsLength - 40;\n  const wordsLengthMinusFortyOne = wordsLength - 41;\n  const wordsLengthMinusFortyTwo = wordsLength - 42;\n  const wordsLengthMinusFortyThree = wordsLength - 43;\n  const wordsLengthMinusFortyFour = wordsLength - 44;\n  const wordsLengthMinusFortyFive = wordsLength - 45;\n  const wordsLengthMinusFortySix = wordsLength - 46;\n  const wordsLengthMinusFortySeven = wordsLength - 47;\n  const wordsLengthMinusFortyEight = wordsLength - 48;\n  const wordsLengthMinusFortyNine = wordsLength - 49;\n  const wordsLengthMinusFifty = wordsLength - 50;\n  const wordsLengthMinusFiftyOne = wordsLength - 51;\n  const wordsLengthMinusFiftyTwo = wordsLength - 52;\n  const wordsLengthMinusFiftyThree = wordsLength - 53;\n  const wordsLengthMinusFiftyFour = wordsLength - 54;\n  const wordsLengthMinusFiftyFive = wordsLength - 55;\n  const wordsLengthMinusFiftySix = wordsLength - 56;\n  const wordsLengthMinusFiftySeven = wordsLength - 57;\n  const wordsLengthMinusFiftyEight = wordsLength - 58;\n  const wordsLengthMinusFiftyNine = wordsLength - 59;\n  const wordsLengthMinusSixty = wordsLength - 60;\n  const wordsLengthMinusSixtyOne = wordsLength - 61;\n  const wordsLengthMinusSixtyTwo = wordsLength - 62;\n  const wordsLengthMinusSixtyThree = wordsLength - 63;\n  const wordsLengthMinusSixtyFour = wordsLength - 64;\n  const wordsLengthMinusSixtyFive = wordsLength - 65;\n  const wordsLengthMinusSixtySix = wordsLength - 66;\n  const wordsLengthMinusSixtySeven = wordsLength - 67;\n  const wordsLengthMinusSixtyEight = wordsLength - 68;\n  const wordsLengthMinusSixtyNine = wordsLength - 69;\n  const wordsLengthMinusSeventy = wordsLength - 70;\n  const wordsLengthMinusSeventyOne = wordsLength - 71;\n  const wordsLengthMinusSeventyTwo = wordsLength - 72;\n  const wordsLengthMinusSeventyThree = wordsLength - 73;\n  const wordsLengthMinusSeventyFour = wordsLength - 74;\n  const wordsLengthMinusSeventyFive = wordsLength - 75;\n  const wordsLengthMinusSeventySix = wordsLength - 76;\n  const wordsLengthMinusSeventySeven = wordsLength - 77;\n  const wordsLengthMinusSeventyEight = wordsLength - 78;\n  const wordsLengthMinusSeventyNine = wordsLength - 79;\n  const wordsLengthMinusSeventyTen = wordsLength - 80;\n  const wordsLengthMinusSeventyEleven = wordsLength - 81;\n  const wordsLengthMinusSeventyTwelve = wordsLength - 82;\n  const wordsLengthMinusSeventyThirteen = wordsLength - 83;\n  const wordsLengthMinusSeventyFourteen = wordsLength - 84;\n  const wordsLengthMinusSeventy", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/126", "prompt": "/* given A list Of NUmbers, return WhetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAn 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "/* given A list Of NUmbers, return WhetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAn 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  if (len < 2) return true\n  let prev = lst[0]\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < prev) return false\n    prev = lst[i]\n  }\n  return true\n}\n\n/*\n  Given a list of numbers, return the number of times the number appears\n  in the list.\n  Examples\n  count([1, 2, 3, 4, 5, 6, 7]) ➞ 7\n  count([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 3\n  count([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 2\n  count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 1\n  count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ 0\n  */\nconst count = (lst) => {\n  const len = lst.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === lst[i]) count++\n  }\n  return count\n}\n\n/*\n  Given a list of numbers, return the number of times the number appears\n  in the list, but only count the number if it is unique.\n  Examples\n  countUnique([1, 2, 3, 4, 5, 6, 7]) ➞ 7\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 5\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 4\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 3\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ 2\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ 1\n  */\nconst countUnique = (lst) => {\n  const len = lst.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === lst[i]) count++\n  }\n  return count\n}\n\n/*\n  Given a list of numbers, return the number of times the number appears\n  in the list, but only count the number if it is unique.\n  Examples\n  countUnique([1, 2, 3, 4, 5, 6, 7]) ➞ 7\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 5\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 4\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 3\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ 2\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ 1\n  */\nconst countUnique2 = (lst) => {\n  const len = lst.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === lst[i]) count++\n  }\n  return count\n}\n\n/*\n  Given a list of numbers, return the number of times the number appears\n  in the list, but only count the number if it is unique.\n  Examples\n  countUnique([1, 2, 3, 4, 5, 6, 7]) ➞ 7\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 5\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 4\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 3\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ 2\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ 1\n  */\nconst countUnique3 = (lst) => {\n  const len = lst.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === lst[i]) count++\n  }\n  return count\n}\n\n/*\n  Given a list of numbers, return the number of times the number appears\n  in the list, but only count the number if it is unique.\n  Examples\n  countUnique([1, 2, 3, 4, 5, 6, 7]) ➞ 7\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 5\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 4\n  countUnique([1, 2, 3, 4, 5, 6, 7, 8,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*YOu are GIvEN two inTervalS,\n  whERe each intervAL Is a pAir of integerS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN two inTervalS,\n  whERe each intervAL Is a pAir of integerS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n\n  const start = Math.max(interval1.start, interval2.start);\n  const end = Math.min(interval1.end, interval2.end);\n\n  if (end - start === 0) {\n    return \"NO\";\n  }\n\n  const prime = prime(end - start);\n\n  if (prime === false) {\n    return \"NO\";\n  }\n\n  return \"YES\";\n};\n\nconst prime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n\n  const isPrime = (n) => {\n    for (let i = 2; i * i <= n; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i) === false) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport {\n  intersection\n};\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const len = arr.length\n  const sum = arr.reduce((acc, curr) => acc + curr, 0)\n  if (sum === 0) {\n    return 0\n  }\n  return sum * Math.abs(arr.reduce((acc, curr) => acc * curr, 1))\n}\n\n/*\n  you arE GiVEn an arRAY of iNteGERs and you neeD TO return\n  the sum of the squares of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> sumOfSquares([1, 2, 2, -4]) == 16\n  >>> sumOfSquares([0, 1]) == 0\n  >>> sumOfSquares([]) == null\n  */\nconst sumOfSquares = (arr) => {\n  const len = arr.length\n  const sum = arr.reduce((acc, curr) => acc + curr * curr, 0)\n  if (sum === 0) {\n    return 0\n  }\n  return sum * Math.abs(arr.reduce((acc, curr) => acc * curr, 1))\n}\n\n/*\n  you arE GiVEn an arRAY of iNteGERs and you neeD TO return\n  the sum of the products of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> sumOfProducts([1, 2, 2, -4]) == -12\n  >>> sumOfProducts([0, 1]) == 0\n  >>> sumOfProducts([]) == null\n  */\nconst sumOfProducts = (arr) => {\n  const len = arr.length\n  const sum = arr.reduce((acc, curr) => acc + curr * curr, 0)\n  if (sum === 0) {\n    return 0\n  }\n  return sum * Math.abs(arr.reduce((acc, curr) => acc * curr, 1))\n}\n\n/*\n  you arE GiVEn an arRAY of iNteGERs and you neeD TO return\n  the sum of the products of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> sumOfProducts([1, 2, 2, -4]) == -12\n  >>> sumOfProducts([0, 1]) == 0\n  >>> sumOfProducts([]) == null\n  */\nconst sumOfSquares = (arr) => {\n  const len = arr.length\n  const sum = arr.reduce((acc, curr) => acc + curr * curr, 0)\n  if (sum === 0) {\n    return 0\n  }\n  return sum * Math.abs(arr.reduce((acc, curr) => acc * curr, 1))\n}\n\n/*\n  you arE GiVEn an arRAY of iNteGERs and you neeD TO return\n  the sum of the products of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> sumOfProducts([1, 2, 2, -4]) == -12\n  >>> sumOfProducts([0, 1]) == 0\n  >>> sumOfProducts([]) == null\n  */\nconst sumOfProducts = (arr) => {\n  const len = arr.length\n  const sum = arr.reduce((acc, curr) => acc + curr * curr, 0)\n  if (sum === 0) {\n    return 0\n  }\n  return sum * Math.abs(arr.reduce((acc, curr) => acc * curr, 1))\n}\n\n/*\n  you arE GiVEn an arRAY of iNteGERs and you neeD TO return\n  the sum of the products of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> sumOfProducts([1, 2, 2, -4]) == -12\n  >>> sumOfProducts([0, 1]) == 0\n  >>> sumOfProducts([]) == null\n  */\nconst sumOfSquares = (arr) => {\n  const len = arr.length\n  const sum = arr.reduce((acc, curr) => acc + curr * curr, 0)\n  if (sum === 0) {\n    return 0\n  }\n  return sum * Math.abs(arr.reduce((acc, curr) => acc * curr, 1))\n}\n\n/*\n  you arE GiVEn an arRAY of iNteGERs and you neeD TO return\n  the sum of the products of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> sumOfProducts([1, 2, 2, -4]) == -12\n  >>> sumOfProducts([0, 1]) == 0\n  >>> sumOfProducts([]) == null\n  */\nconst sumOfProducts = (arr) => {\n  const len = arr.length\n  const sum = arr.reduce((acc, curr) => acc + curr * curr, 0)\n  if (sum === 0) {\n    return 0\n  }\n  return sum * Math.abs(arr.reduce((acc, curr) => acc * curr, 1))\n}\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  given A grid WiTH N rows And N coLumNS (N >= 2) and a positiVE InteGer k, \n  each cell oF the grid coNtaINs a ValUE. EvErY iNtegeR in ThE RanGE [1, N * n]\n  inclusive appeARs exActLy oNce on thE CelLs oF tHe grid.\n\n  YOu hAve TO fINd tHE MiniMUm paTH oF leNGth k in tHE grid. yoU Can stARt\n  from aNy celL, AND in eAcH step yoU cAN move tO Any of The NeighBor CELls,\n  in otHER WOrdS, yOU can gO TO celLS which share an eDge With you cUrRent\n  cell.\n  plEAsE NOtE ThAt a path Of leNgtH k MeaNS Visiting ExactLy k cells (nOT\n  necesSARiLY diStincT).\n  yOu CaNnOt go off the grid.\n  A path A (OF lengTH k) IS conSiDerED lEss tHAn a Path B (OF lEngTh k) if\n  aFter MakinG the orDerEd lIsTS of the VALues on The CeLls That A aND b Go\n  tHRough (lEt'S caLL tHem lst_A and Lst_B), lSt_A is lExIcograpHicAlLY leSs\n  tHan lst_b, in other wORDS, There eXist An integER InDeX i (1 <= i <= k)\n  SUcH THAt LSt_A[i] < Lst_b[i] ANd FoR ANy j (1 <= j < i) We haVE\n  Lst_a[J] = lst_b[J].\n  iT IS guAranteED thAT tHe AnsWer is uniQue.\n  rEturn aN oRderED list of the vaLuEs oN tHE cELLs tHAt The miniMUM pATh Go ThRough.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "/*\n  given A grid WiTH N rows And N coLumNS (N >= 2) and a positiVE InteGer k, \n  each cell oF the grid coNtaINs a ValUE. EvErY iNtegeR in ThE RanGE [1, N * n]\n  inclusive appeARs exActLy oNce on thE CelLs oF tHe grid.\n\n  YOu hAve TO fINd tHE MiniMUm paTH oF leNGth k in tHE grid. yoU Can stARt\n  from aNy celL, AND in eAcH step yoU cAN move tO Any of The NeighBor CELls,\n  in otHER WOrdS, yOU can gO TO celLS which share an eDge With you cUrRent\n  cell.\n  plEAsE NOtE ThAt a path Of leNgtH k MeaNS Visiting ExactLy k cells (nOT\n  necesSARiLY diStincT).\n  yOu CaNnOt go off the grid.\n  A path A (OF lengTH k) IS conSiDerED lEss tHAn a Path B (OF lEngTh k) if\n  aFter MakinG the orDerEd lIsTS of the VALues on The CeLls That A aND b Go\n  tHRough (lEt'S caLL tHem lst_A and Lst_B), lSt_A is lExIcograpHicAlLY leSs\n  tHan lst_b, in other wORDS, There eXist An integER InDeX i (1 <= i <= k)\n  SUcH THAt LSt_A[i] < Lst_b[i] ANd FoR ANy j (1 <= j < i) We haVE\n  Lst_a[J] = lst_b[J].\n  iT IS guAranteED thAT tHe AnsWer is uniQue.\n  rEturn aN oRderED list of the vaLuEs oN tHE cELLs tHAt The miniMUM pATh Go ThRough.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n * m);\n  const visited = new Array(n * m);\n  const visited2 = new Array(n * m);\n  dp[0] = 1;\n  visited[0] = true;\n  visited2[0] = true;\n  for (let i = 1; i < n * m; i++) {\n    dp[i] = Infinity;\n    visited[i] = false;\n    visited2[i] = false;\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === k) {\n        dp[i * m + j] = 0;\n        visited[i * m + j] = true;\n        visited2[i * m + j] = true;\n      }\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === k &&!visited[i * m + j]) {\n        let path = [];\n        let curr = i * m + j;\n        while (curr > 0) {\n          path.unshift(grid[curr / m][curr % m]);\n          curr = dp[curr];\n        }\n        let result = path.join('');\n        let result2 = path.join('');\n        let result3 = path.join('');\n        let result4 = path.join('');\n        let result5 = path.join('');\n        let result6 = path.join('');\n        let result7 = path.join('');\n        let result8 = path.join('');\n        let result9 = path.join('');\n        let result10 = path.join('');\n        let result11 = path.join('');\n        let result12 = path.join('');\n        let result13 = path.join('');\n        let result14 = path.join('');\n        let result15 = path.join('');\n        let result16 = path.join('');\n        let result17 = path.join('');\n        let result18 = path.join('');\n        let result19 = path.join('');\n        let result20 = path.join('');\n        let result21 = path.join('');\n        let result22 = path.join('');\n        let result23 = path.join('');\n        let result24 = path.join('');\n        let result25 = path.join('');\n        let result26 = path.join('');\n        let result27 = path.join('');\n        let result28 = path.join('');\n        let result29 = path.join('');\n        let result30 = path.join('');\n        let result31 = path.join('');\n        let result32 = path.join('');\n        let result33 = path.join('');\n        let result34 = path.join('');\n        let result35 = path.join('');\n        let result36 = path.join('');\n        let result37 = path.join('');\n        let result38 = path.join('');\n        let result39 = path.join('');\n        let result40 = path.join('');\n        let result41 = path.join('');\n        let result42 = path.join('');\n        let result43 = path.join('');\n        let result44 = path.join('');\n        let result45 = path.join('');\n        let result46 = path.join('');\n        let result47 = path.join('');\n        let result48 = path.join(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor(a, b);\n  }\n  return a;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor2 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor2(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor2(a, b);\n  }\n  return a;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor3 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor3(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor3(a, b);\n  }\n  return a;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor4 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor4(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor4(a, b);\n  }\n  return a;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor5 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor5(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor5(a, b);\n  }\n  return a;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor6 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor6(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor6(a, b);\n  }\n  return a;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor7 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor7(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor7(a, b);\n  }\n  return a;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor8 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor8(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor8(a, b);\n  }\n  return a;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor9 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor9(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor9(a, b);\n  }\n  return a;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor10 = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor10(b, a);\n  }\n  if (a > b) {\n    return greatestCommonDivisor10(a, b);\n  }\n  return a;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor11 =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/130", "prompt": "/*EVeryoNE kNOws FibOnacci SeqUEnce, it was stuDIEd deEply by mathemAticiaNs in \n  tHE laSt cOUplE cEnTurieS. hoWEveR, WhAt people don't knOW is TRibOnaCci sequENce.\n  triBoNacCi sEquENcE Is dEFIned BY the REcUrrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n IS eVEn.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n iS Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "/*EVeryoNE kNOws FibOnacci SeqUEnce, it was stuDIEd deEply by mathemAticiaNs in \n  tHE laSt cOUplE cEnTurieS. hoWEveR, WhAt people don't knOW is TRibOnaCci sequENce.\n  triBoNacCi sEquENcE Is dEFIned BY the REcUrrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n IS eVEn.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n iS Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = [];\n  for (let i = 1; i <= n; i++) {\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*GIven a POsITive inTeger n, return tHe pROduct of the odD digits.\n  rEturN 0 if all digits are eveN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "/*GIven a POsITive inTeger n, return tHe pROduct of the odD digits.\n  rEturN 0 if all digits are eveN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result++;\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 4\n  */\nconst digits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n  let stack = []\n  let index = 0\n  let isNested = false\n  while (index < string.length) {\n    let char = string[index]\n    if (char === '[') {\n      stack.push(char)\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop()\n      } else {\n        return false\n      }\n    }\n    index++\n  }\n  return stack.length === 0\n}\n\n/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested2 = (string) => {\n  let stack = []\n  let index = 0\n  let isNested = false\n  while (index < string.length) {\n    let char = string[index]\n    if (char === '[') {\n      stack.push(char)\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop()\n      } else {\n        return false\n      }\n    }\n    index++\n  }\n  return stack.length === 0\n}\n\n/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested3 = (string) => {\n  let stack = []\n  let index = 0\n  let isNested = false\n  while (index < string.length) {\n    let char = string[index]\n    if (char === '[') {\n      stack.push(char)\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop()\n      } else {\n        return false\n      }\n    }\n    index++\n  }\n  return stack.length === 0\n}\n\n/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested4 = (string) => {\n  let stack = []\n  let index = 0\n  let isNested = false\n  while (index < string.length) {\n    let char = string[index]\n    if (char === '[') {\n      stack.push(char)\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop()\n      } else {\n        return false\n      }\n    }\n    index++\n  }\n  return stack.length === 0\n}\n\n/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]')", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3])); // 14\nconsole.log(sumSquares([1,4,9])); // 98\nconsole.log(sumSquares([1,3,5,7])); // 84\nconsole.log(sumSquares([1.4,4.2,0])); // 29\nconsole.log(sumSquares([-2.4,1,1])); // 6\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  if (lastChar === \" \") {\n    return false;\n  }\n  if (lastChar.match(/[a-zA-Z]/)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  if (lastChar === \" \") {\n    return false;\n  }\n  if (lastChar.match(/[a-zA-Z]/)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  if (lastChar === \" \") {\n    return false;\n  }\n  if (lastChar.match(/[a-zA-Z]/)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  if (lastChar === \" \") {\n    return false;\n  }\n  if (lastChar.match(/[a-zA-Z]/)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  if (lastChar === \" \") {\n    return false;\n  }\n  if (lastChar.match(/[a-zA-Z]/)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*CReate A FuNCtion wHich reTurNS the largest iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "/*CReate A FuNCtion wHich reTurNS the largest iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*CReate A FuNCtion wHich reTurNS the smallest iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*CReate A FuNCtion wHich reTurNS the iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*CReate A FuNCtion wHich reTurNS the iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*CReate A FuNCtion wHich reTurNS the iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*CReate A FuNCtion wHich reTurNS the iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let min = Infinity;\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*CReate A FuNCtion wHich reTurNS the iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) =", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce((a, b) => largest(a, b), null);\n  return largestSmallest(lst);\n};\n\n/*\n  creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const largestSmallest = (lst) => lst.reduce", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  creatE a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nulL\n  */\ncONst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "/*\n  creatE a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nulL\n  */\ncONst compareOne = (a, b) => {\n  if (a === b) return a\n  if (a === null) return null\n  if (b === null) return null\n  if (a === undefined) return undefined\n  if (b === undefined) return undefined\n  if (typeof a === \"number\" && typeof b === \"number\") return a - b\n  if (typeof a === \"string\" && typeof b === \"string\") return a.localeCompare(b)\n  return null\n}\n\nconst compare = (a, b) => {\n  if (a === b) return a\n  if (a === null) return null\n  if (b === null) return null\n  if (a === undefined) return undefined\n  if (b === undefined) return undefined\n  if (typeof a === \"number\" && typeof b === \"number\") return a - b\n  if (typeof a === \"string\" && typeof b === \"string\") return a.localeCompare(b)\n  return null\n}\n\nconst compare2 = (a, b) => {\n  if (a === b) return a\n  if (a === null) return null\n  if (b === null) return null\n  if (a === undefined) return undefined\n  if (b === undefined) return undefined\n  if (typeof a === \"number\" && typeof b === \"number\") return a - b\n  if (typeof a === \"string\" && typeof b === \"string\") return a.localeCompare(b)\n  return null\n}\n\nconst compare3 = (a, b) => {\n  if (a === b) return a\n  if (a === null) return null\n  if (b === null) return null\n  if (a === undefined) return undefined\n  if (b === undefined) return undefined\n  if (typeof a === \"number\" && typeof b === \"number\") return a - b\n  if (typeof a === \"string\" && typeof b === \"string\") return a.localeCompare(b)\n  return null\n}\n\nconst compare4 = (a, b) => {\n  if (a === b) return a\n  if (a === null) return null\n  if (b === null) return null\n  if (a === undefined) return undefined\n  if (b === undefined) return undefined\n  if (typeof a === \"number\" && typeof b === \"number\") return a - b\n  if (typeof a === \"string\" && typeof b === \"string\") return a.localeCompare(b)\n  return null\n}\n\nconst compare5 = (a, b) => {\n  if (a === b) return a\n  if (a === null) return null\n  if (b === null) return null\n  if (a === undefined) return undefined\n  if (b === undefined) return undefined\n  if (typeof a === \"number\" && typeof b === \"number\") return a - b\n  if (typeof a === \"string\" && typeof b === \"string\") return a.localeCompare(b)\n  return null\n}\n\nconst compare6 = (a, b) => {\n  if (a === b) return a\n  if (a === null) return null\n  if (b === null) return null\n  if (a === undefined) return undefined\n  if (b === undefined) return undefined\n  if (typeof a === \"number\" && typeof b === \"number\") return a - b\n  if (typeof a === \"string\" && typeof b === \"string\") return a.localeCompare(b)\n  return null\n}\n\nconst compare7 = (a, b) => {\n  if (a === b) return a\n  if (a === null) return null\n  if (b === null) return null\n  if (a === undefined) return undefined\n  if (b === undefined) return undefined\n  if (typeof a === \"number\" && typeof b === \"number\") return a - b\n  if (typeof a === \"string\" && typeof b === \"string\") return a.localeCompare(b)\n  return null\n}\n\nconst compare8 = (a, b) => {\n  if (a === b) return a\n  if (a === null) return null\n  if (b === null) return null\n  if (a === undefined) return undefined\n  if (b === undefined) return undefined\n  if (typeof a === \"number\" && typeof b === \"number\") return a - b\n  if (typeof a === \"string\" && typeof b === \"string\") return a.localeCompare(b)\n  return null\n}\n\nconst compare9 = (a, b) => {\n  if (a === b) return a\n  if (a === null) return null\n  if (b === null) return null\n  if (a === undefined) return undefined\n  if (b === undefined) return undefined\n  if (typeof a === \"number\" && typeof b === \"number\") return a - b\n  if (typeof a === \"string\" && typeof b === \"string\") return a.localeCompare(b)\n  return null\n}\n\nconst compare10 = (a, b) => {\n  if (a === b) return a\n  if (a === null) return null\n  if (b === null) return null\n  if (a === undefined) return undefined\n  if (b === undefined) return undefined\n  if (typeof a === \"number\" && typeof b === \"number\") return a - b\n  if (typeof a === \"string\" && typeof b === \"string\") return a.localeCompare(b)\n  return null\n}\n\nconst compare11 = (a, b) => {\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n === 0) {\n    return true\n  }\n  return (n % 2 === 0)\n}\n\nexport default isEqualToSumEven\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/139", "prompt": "/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacciRecursive = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacciIterative = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let a = 0;\n  let b = 1;\n  let c = 0;\n  while (n > 1) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacciRecursiveIterative = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let a = 0;\n  let b = 1;\n  let c = 0;\n  while (n > 1) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacciIterativeRecursive = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let a = 0;\n  let b = 1;\n  let c = 0;\n  while (n > 1) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacciIterativeRecursive2 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let a = 0;\n  let b = 1;\n  let c = 0;\n  while (n > 1) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacciIterativeRecursive3 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let a = 0;\n  let b = 1;\n  let c = 0;\n  while (n > 1) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacciIterativeRecursive4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let a = 0;\n  let b = 1;\n  let c = 0;\n  while (n > 1) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacciIterativeRecursive5 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let a = 0;\n  let b = 1;\n  let c = 0;\n  while (n > 1) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  The function will receive an integer as input and should return the nth\n  number in the Fibonacci sequence.\n  */\nconst fibonacciIterativeRecursive6 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  let a = 0;\n  let", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    const prefix = string.substring(i);\n    result.push(prefix);\n    i += prefix.length;\n  }\n  return result;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  given A StRIng text, repLace alL spACes in it with undERScorEs, \n  and if a striNg has mOre THan 2 ConSEcuTiVe SpaceS, \n  ThEN rePLaCe all consecutiVE spaCes WitH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "/*\n  given A StRIng text, repLace alL spACes in it with undERScorEs, \n  and if a striNg has mOre THan 2 ConSEcuTiVe SpaceS, \n  ThEN rePLaCe all consecutiVE spaCes WitH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '_')\n}\n\nconst getSpaces = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '')\n}\n\nconst getSpacesLength = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount2 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount3 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount4 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount5 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount6 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount7 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount8 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount9 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount10 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount11 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount12 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount13 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount14 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount15 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount16 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount17 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount18 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount19 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount20 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount21 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount22 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount23 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount24 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount25 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount26 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount27 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount28 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount29 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount30 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount31 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount32 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpacesCount33 = (text) => {\n  const re = /\\s+/g\n  return text.replace(re, '').length\n}\n\nconst getSpaces", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/141", "prompt": "/*CReate a FUnCTion whIch takEs a sTRing represenTINg a fiLe's name, and reTurns\n  'YEs' iF The The FIle'S nAmE is vaLId, ANd rETuRns 'No' otherwise.\n  a File'S naMe iS considERed To bE vAliD if And ONlY If aLL The fOLlowINg ConDItioNS \n  ArE Met:\n  - ThERe shoulD not bE MORe ThAn three DiGIts ('0'-'9') in the FIle's nAme.\n  - the fiLe's NAMe conTAINS exAcTLy one DOT '.'\n  - The SUbstring before The Dot shoulD nOt be emptY, aND iT STaRTs With a letTer fRom \n  THe lATIn alphapEt ('a'-'z' and 'a'-'Z').\n  - The subSTring aFTEr THe dOt shoULD be OnE oF these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "/*CReate a FUnCTion whIch takEs a sTRing represenTINg a fiLe's name, and reTurns\n  'YEs' iF The The FIle'S nAmE is vaLId, ANd rETuRns 'No' otherwise.\n  a File'S naMe iS considERed To bE vAliD if And ONlY If aLL The fOLlowINg ConDItioNS \n  ArE Met:\n  - ThERe shoulD not bE MORe ThAn three DiGIts ('0'-'9') in the FIle's nAme.\n  - the fiLe's NAMe conTAINS exAcTLy one DOT '.'\n  - The SUbstring before The Dot shoulD nOt be emptY, aND iT STaRTs With a letTer fRom \n  THe lATIn alphapEt ('a'-'z' and 'a'-'Z').\n  - The subSTring aFTEr THe dOt shoULD be OnE oF these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.match(/^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+$/)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\n/*CReate a FUnCTion whIch takEs a sTRing represenTINg a fiLe's name, and reTurns\n  'YEs' iF The The FIle'S nAmE is vaLId, ANd rETuRns 'No' otherwise.\n  a File'S naMe iS considERed To bE vAliD if And ONlY If aLL The fOLlowINg ConDItioNS \n  ArE Met:\n  - ThERe shoulD not bE MORe ThAn three DiGIts ('0'-'9') in the FIle's nAme.\n  - the fiLe's NAMe conTAINS exAcTLy one DOT '.'\n  - The SUbstring before The Dot shoulD nOt be emptY, aND iT STaRTs With a letTer fRom \n  THe lATIn alphapEt ('a'-'z' and 'a'-'Z').\n  - The subSTring aFTEr THe dOt shoULD be OnE oF these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  if (file_name.match(/^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+$/)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\n/*CReate a FUnCTion whIch takEs a sTRing represenTINg a fiLe's name, and reTurns\n  'YEs' iF The The FIle'S nAmE is vaLId, ANd rETuRns 'No' otherwise.\n  a File'S naMe iS considERed To bE vAliD if And ONlY If aLL The fOLlowINg ConDItioNS \n  ArE Met:\n  - ThERe shoulD not bE MORe ThAn three DiGIts ('0'-'9') in the FIle's nAme.\n  - the fiLe's NAMe conTAINS exAcTLy one DOT '.'\n  - The SUbstring before The Dot shoulD nOt be emptY, aND iT STaRTs With a letTer fRom \n  THe lATIn alphapEt ('a'-'z' and 'a'-'Z').\n  - The subSTring aFTEr THe dOt shoULD be OnE oF these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  if (file_name.match(/^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+$/)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\n/*CReate a FUnCTion whIch takEs a sTRing represenTINg a fiLe's name, and reTurns\n  'YEs' iF The The FIle'S nAmE is vaLId, ANd rETuRns 'No' otherwise.\n  a File'S naMe iS considERed To bE vAliD if And ONlY If aLL The fOLlowINg ConDItioNS \n  ArE Met:\n  - ThERe shoulD not bE MORe ThAn three DiGIts ('0'-'9') in the FIle's nAme.\n  - the fiLe's NAMe conTAINS exAcTLy one DOT '.'\n  - The SUbstring before The Dot shoulD nOt be emptY, aND iT STaRTs With a letTer fRom \n  THe lATIn alphapEt ('a'-'z' and 'a'-'Z').\n  - The subSTring aFTEr THe dOt shoULD be OnE oF these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck4 = (file_name) => {\n  if (file_name.match(/^[a-zA-Z]+[0-9", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  this fUNcTIon wilL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*\"\n  this fUNcTIon wilL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumSquares2 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares3 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares4 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares5 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares6 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares7 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares8 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares9 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares10 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares11 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares12 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares13 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares14 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares15 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares16 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares17 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares18 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares19 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares20 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares21 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares22 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst sumSquares23 = (lst) => {\n  const sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const wordLengths = words.map(word => word.length)\n  const maxLength = Math.max(...wordLengths)\n  const minLength = Math.min(...wordLengths)\n  const maxWordCount = Math.max(...wordLengths.map(wordLength => wordLength / minLength))\n  const minWordCount = Math.min(...wordLengths.map(wordLength => wordLength / maxLength))\n  const wordCount = Math.max(minWordCount, maxWordCount)\n  const wordCounts = wordLengths.map(wordLength => wordCount * wordLength)\n  const wordCountsSum = wordCounts.reduce((acc, curr) => acc + curr, 0)\n  const wordCountsSumSquared = wordCountsSum * wordCountsSum\n  const wordCountsSumLog = Math.log(wordCountsSumSquared)\n  const wordCountsSumLogSquared = Math.pow(Math.log(wordCountsSumSquared), 2)\n  const wordCountsSumLogLog = Math.log(wordCountsSumLogSquared)\n  const wordCountsSumLogLogSquared = Math.pow(Math.log(wordCountsSumLogSquared), 2)\n  const wordCountsSumLogLogLog = Math.log(wordCountsSumLogLogSquared)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCountsSumLogLogLogSquared = Math.pow(Math.log(wordCountsSumLogLogLogSquared), 2)\n  const wordCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*YOur taSK iS To implEment a fUncTIon that will simplify tHE ExprEssion\n  x * n. The funCtion rEtuRNs tRue IF x * n evAlUaTes to a WHoLE nuMBeR and false\n  otherWIse. BOth x And n, Are striNG rePreSeNtaTioN of a FRaCTioN, ANd haVE the FOlLowINg foRMAt,\n  <NUmeraTOr>/<denomInatoR> WHErE bOth numeRaTOr and dENominAtoR are pOsiTIVe whoLE NUMbeRs.\n\n  yOu can ASSume THat x, and n are valid FraCtions, anD dO not have ZeRO aS DEnOMiNator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = faLse\n  simplify(\"7/10\", \"10/2\") = FAlsE\n  */\nCOnst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "/*YOur taSK iS To implEment a fUncTIon that will simplify tHE ExprEssion\n  x * n. The funCtion rEtuRNs tRue IF x * n evAlUaTes to a WHoLE nuMBeR and false\n  otherWIse. BOth x And n, Are striNG rePreSeNtaTioN of a FRaCTioN, ANd haVE the FOlLowINg foRMAt,\n  <NUmeraTOr>/<denomInatoR> WHErE bOth numeRaTOr and dENominAtoR are pOsiTIVe whoLE NUMbeRs.\n\n  yOu can ASSume THat x, and n are valid FraCtions, anD dO not have ZeRO aS DEnOMiNator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = faLse\n  simplify(\"7/10\", \"10/2\") = FAlsE\n  */\nCOnst simplify = (x, n) => {\n  if (x === n) return true\n  if (x === 0) return false\n  if (n === 0) return false\n  if (x === 1) return true\n  if (n === 1) return true\n  if (x === -1) return false\n  if (n === -1) return false\n  if (x === 2) return true\n  if (n === 2) return true\n  if (x === -2) return false\n  if (n === -2) return false\n  if (x === 3) return true\n  if (n === 3) return true\n  if (x === -3) return false\n  if (n === -3) return false\n  if (x === 4) return true\n  if (n === 4) return true\n  if (x === -4) return false\n  if (n === -4) return false\n  if (x === 5) return true\n  if (n === 5) return true\n  if (x === -5) return false\n  if (n === -5) return false\n  if (x === 6) return true\n  if (n === 6) return true\n  if (x === -6) return false\n  if (n === -6) return false\n  if (x === 7) return true\n  if (n === 7) return true\n  if (x === -7) return false\n  if (n === -7) return false\n  if (x === 8) return true\n  if (n === 8) return true\n  if (x === -8) return false\n  if (n === -8) return false\n  if (x === 9) return true\n  if (n === 9) return true\n  if (x === -9) return false\n  if (n === -9) return false\n  if (x === 10) return true\n  if (n === 10) return true\n  if (x === -10) return false\n  if (n === -10) return false\n  if (x === 11) return true\n  if (n === 11) return true\n  if (x === -11) return false\n  if (n === -11) return false\n  if (x === 12) return true\n  if (n === 12) return true\n  if (x === -12) return false\n  if (n === -12) return false\n  if (x === 13) return true\n  if (n === 13) return true\n  if (x === -13) return false\n  if (n === -13) return false\n  if (x === 14) return true\n  if (n === 14) return true\n  if (x === -14) return false\n  if (n === -14) return false\n  if (x === 15) return true\n  if (n === 15) return true\n  if (x === -15) return false\n  if (n === -15) return false\n  if (x === 16) return true\n  if (n === 16) return true\n  if (x === -16) return false\n  if (n === -16) return false\n  if (x === 17) return true\n  if (n === 17) return true\n  if (x === -17) return false\n  if (n === -17) return false\n  if (x === 18) return true\n  if (n === 18) return true\n  if (x === -18) return false\n  if (n === -18) return false\n  if (x === 19) return true\n  if (n === 19) return true\n  if (x === -19) return false\n  if (n === -19) return false\n  if (x === 20) return true\n  if (n === 20) return true\n  if (x === -20) return false\n  if (n === -20) return false\n  if (x === 21) return true\n  if (n === 21) return true\n  if (x === -21) return false\n  if (n === -21) return false\n  if (x === 22) return true\n  if (n === 22) return true\n  if (x === -22) return false\n  if (n === -22) return false\n  if (x === 23) return true\n  if (n === 23) return true\n  if (x === -23) return false\n  if (n === -23) return false\n  if (x === 24) return true\n  if (n === 24) return true\n  if (x === -24) return false\n  if (n === -24) return false\n  if (x === 25) return true\n  if (n === 25) return true\n  if (x === -25) return false\n  if (n === -25) return false\n  if (x === 26) return true\n  if (n === 26) return true\n  if (x === -26) return false\n  if (n === -26) return false\n  if (x === 27) return true\n  if (n === 27) return true\n  if (x === -27) return false\n  if (n === -27) return false\n  if (x === 28) return true\n  if (n === 28) return true\n  if (x === -28) return false\n  if (n === -28) return false\n  if (x === 29) return true\n  if (n === 29) return true\n  if (x === -29) return false\n  if (n === -29) return false\n  if (x === 30) return true\n  if (n === 30) return", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b);\n  return sorted.map((n) => sum - n);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*WRite a FUnCTion thAt takeS an ARray of numberS AS inpUt and returns \n  The numBer OF elEmeNTs in tHe ArRay thAT aRE grEAtEr than 10 and both \n  fIRst aNd lAst Digits oF A nuMbeR aRe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion thAt takeS an ARray of numberS AS inpUt and returns \n  The numBer OF elEmeNTs in tHe ArRay thAT aRE grEAtEr than 10 and both \n  fIRst aNd lAst Digits oF A nuMbeR aRe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const numsArr = nums.slice();\n  const numsArrLength = numsArr.length;\n  const numsArrLengthMinusOne = numsArrLength - 1;\n  const numsArrLengthMinusTwo = numsArrLength - 2;\n  const numsArrLengthMinusThree = numsArrLength - 3;\n  const numsArrLengthMinusFour = numsArrLength - 4;\n  const numsArrLengthMinusFive = numsArrLength - 5;\n  const numsArrLengthMinusSix = numsArrLength - 6;\n  const numsArrLengthMinusSeven = numsArrLength - 7;\n  const numsArrLengthMinusEight = numsArrLength - 8;\n  const numsArrLengthMinusNine = numsArrLength - 9;\n  const numsArrLengthMinusTen = numsArrLength - 10;\n  const numsArrLengthMinusEleven = numsArrLength - 11;\n  const numsArrLengthMinusTwelve = numsArrLength - 12;\n  const numsArrLengthMinusThirteen = numsArrLength - 13;\n  const numsArrLengthMinusFourteen = numsArrLength - 14;\n  const numsArrLengthMinusFifteen = numsArrLength - 15;\n  const numsArrLengthMinusSixteen = numsArrLength - 16;\n  const numsArrLengthMinusSeventeen = numsArrLength - 17;\n  const numsArrLengthMinusEighteen = numsArrLength - 18;\n  const numsArrLengthMinusNineteen = numsArrLength - 19;\n  const numsArrLengthMinusTwenty = numsArrLength - 20;\n  const numsArrLengthMinusTwentyOne = numsArrLength - 21;\n  const numsArrLengthMinusTwentyTwo = numsArrLength - 22;\n  const numsArrLengthMinusTwentyThree = numsArrLength - 23;\n  const numsArrLengthMinusTwentyFour = numsArrLength - 24;\n  const numsArrLengthMinusTwentyFive = numsArrLength - 25;\n  const numsArrLengthMinusTwentySix = numsArrLength - 26;\n  const numsArrLengthMinusTwentySeven = numsArrLength - 27;\n  const numsArrLengthMinusTwentyEight = numsArrLength - 28;\n  const numsArrLengthMinusTwentyNine = numsArrLength - 29;\n  const numsArrLengthMinusThirty = numsArrLength - 30;\n  const numsArrLengthMinusThirtyOne = numsArrLength - 31;\n  const numsArrLengthMinusThirtyTwo = numsArrLength - 32;\n  const numsArrLengthMinusThirtyThree = numsArrLength - 33;\n  const numsArrLengthMinusThirtyFour = numsArrLength - 34;\n  const numsArrLengthMinusThirtyFive = numsArrLength - 35;\n  const numsArrLengthMinusThirtySix = numsArrLength - 36;\n  const numsArrLengthMinusThirtySeven = numsArrLength - 37;\n  const numsArrLengthMinusThirtyEight = numsArrLength - 38;\n  const numsArrLengthMinusThirtyNine = numsArrLength - 39;\n  const numsArrLengthMinusForty = numsArrLength - 40;\n  const numsArrLengthMinusFortyOne = numsArrLength - 41;\n  const numsArrLengthMinusFortyTwo = numsArrLength - 42;\n  const numsArrLengthMinusFortyThree = numsArrLength - 43;\n  const numsArrLengthMinusFortyFour = numsArrLength - 44;\n  const numsArrLengthMinusFortyFive = numsArrLength - 45;\n  const numsArrLengthMinusFortySix = numsArrLength - 46;\n  const numsArrLengthMinusFortySeven = numsArrLength - 47;\n  const numsArrLengthMinusFortyEight = numsArrLength - 48;\n  const numsArrLengthMinusFortyNine = numsArrLength - 49;\n  const numsArrLengthMinusFifty = numsArrLength - 50;\n  const numsArrLengthMinusFiftyOne = numsArrLength - 51;\n  const numsArrLengthMinusFiftyTwo = numsArrLength - 52;\n  const numsArrLengthMinusFiftyThree = numsArrLength - 53;\n  const numsArrLengthMinusFiftyFour = numsArrLength - 54;\n  const numsArrLengthMinusFiftyFive = numsArrLength - 55;\n  const numsArrLengthMinusFiftySix = numsArrLength - 56;\n  const numsArrLengthMinusFiftySeven = numsArrLength - 57;\n  const numsArrLengthMinusFiftyEight = numsArrLength - 58;\n  const numsArrLengthMinusFiftyNine = numsArrLength - 59;\n  const numsArrLengthMinusSixty = numsArrLength - 60;\n  const numsArrLengthMinusSixtyOne = numsArrLength - 61;\n  const numsArrLengthMinusSixtyTwo = numsArrLength - 62;\n  const numsArrLengthMinusSixtyThree = numsArrLength - 63;\n  const numsArrLengthMinusSixtyFour = numsArrLength - 64;\n  const nums", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({ length: n }, (x, i) => i + 1)\n  const b = a.map((x, i) => i * i - i + 1)\n  const c = a.map((x, i) => a.indexOf(x) + b.indexOf(x) + b.indexOf(x))\n  const d = c.filter((x, i) => x === 3)\n  return d.length\n}\n\n/*\n  you arE GiVEn a posItive iNteGER n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n      The second valid triple is (1, 3, 21).\n  */\nconst getMaxTriples2 = (n) => {\n  const a = Array.from({ length: n }, (x, i) => i + 1)\n  const b = a.map((x, i) => i * i - i + 1)\n  const c = a.map((x, i) => a.indexOf(x) + b.indexOf(x) + b.indexOf(x))\n  const d = c.filter((x, i) => x === 3)\n  const e = c.filter((x, i) => x === 3)\n  return d.length + e.length\n}\n\n/*\n  you arE GiVEn a posItive iNteGER n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n      The second valid triple is (1, 3, 21).\n  */\nconst getMaxTriples3 = (n) => {\n  const a = Array.from({ length: n }, (x, i) => i + 1)\n  const b = a.map((x, i) => i * i - i + 1)\n  const c = a.map((x, i) => a.indexOf(x) + b.indexOf(x) + b.indexOf(x))\n  const d = c.filter((x, i) => x === 3)\n  const e = c.filter((x, i) => x === 3)\n  const f = d.length + e.length\n  return f\n}\n\n/*\n  you arE GiVEn a posItive iNteGER n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n      The second valid triple is (1, 3, 21).\n  */\nconst getMaxTriples4 = (n) => {\n  const a = Array.from({ length: n }, (x, i) => i + 1)\n  const b = a.map((x, i) => i * i - i + 1)\n  const c = a.map((x, i) => a.indexOf(x) + b.indexOf(x) + b.indexOf(x))\n  const d = c.filter((x, i) => x === 3)\n  const e = c.filter((x, i) => x === 3)\n  const f = d.length + e.length\n  return f\n}\n\n/*\n  you arE GiVEn a posItive iNteGER n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* there ARe EIght plAnets in oUr sOLar system: the CLOserSt to the Sun\n  is mercurY, thE NexT onE Is VEnUs, Then EARtH, marS, juPiter, Saturn,\n  UraNUs, NePtuNe.\n  WRite a fuNCtiOn tHaT taKes Two PLaNEt nAMEs as STrinGS planet1 aNd planet2.\n  THE funCTIoN ShoulD return A tuple contaiNing aLL PLaNeTs whose OrBIts are\n  LOcateD beTween The ORBit of planet1 AND THe oRbIT of planet2, soRTEd by\n  THe proximity to tHe sUn.\n  The funCtIon shoulD return aN EmPTY tuple iF planet1 Or planet2\n  Are not cOrreCt pLAneT NAmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "/* there ARe EIght plAnets in oUr sOLar system: the CLOserSt to the Sun\n  is mercurY, thE NexT onE Is VEnUs, Then EARtH, marS, juPiter, Saturn,\n  UraNUs, NePtuNe.\n  WRite a fuNCtiOn tHaT taKes Two PLaNEt nAMEs as STrinGS planet1 aNd planet2.\n  THE funCTIoN ShoulD return A tuple contaiNing aLL PLaNeTs whose OrBIts are\n  LOcateD beTween The ORBit of planet1 AND THe oRbIT of planet2, soRTEd by\n  THe proximity to tHe sUn.\n  The funCtIon shoulD return aN EmPTY tuple iF planet1 Or planet2\n  Are not cOrreCt pLAneT NAmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = planet1.orbit;\n  const planet2Orbit = planet2.orbit;\n  const planet1OrbitLength = planet1Orbit.length;\n  const planet2OrbitLength = planet2Orbit.length;\n  const planet1OrbitIndex = planet1Orbit.indexOf(planet1);\n  const planet2OrbitIndex = planet2Orbit.indexOf(planet2);\n  const planet1OrbitLengthDifference = planet1OrbitLength - planet2OrbitLength;\n  const planet2OrbitLengthDifference = planet2OrbitLength - planet1OrbitLength;\n  const planet1OrbitLengthDifferenceIndex = planet1OrbitLengthDifference + planet1OrbitIndex;\n  const planet2OrbitLengthDifferenceIndex = planet2OrbitLengthDifference + planet2OrbitIndex;\n  const planet1OrbitLengthDifferenceIndexPlusOne = planet1OrbitLengthDifferenceIndex + 1;\n  const planet2OrbitLengthDifferenceIndexPlusOne = planet2OrbitLengthDifferenceIndex + 1;\n  const planet1OrbitLengthDifferenceIndexPlusTwo = planet1OrbitLengthDifferenceIndexPlusOne + 1;\n  const planet2OrbitLengthDifferenceIndexPlusTwo = planet2OrbitLengthDifferenceIndexPlusOne + 1;\n  const planet1OrbitLengthDifferenceIndexPlusThree = planet1OrbitLengthDifferenceIndexPlusTwo + 1;\n  const planet2OrbitLengthDifferenceIndexPlusThree = planet2OrbitLengthDifferenceIndexPlusTwo + 1;\n  const planet1OrbitLengthDifferenceIndexPlusFour = planet1OrbitLengthDifferenceIndexPlusThree + 1;\n  const planet2OrbitLengthDifferenceIndexPlusFour = planet2OrbitLengthDifferenceIndexPlusThree + 1;\n  const planet1OrbitLengthDifferenceIndexPlusFive = planet1OrbitLengthDifferenceIndexPlusFour + 1;\n  const planet2OrbitLengthDifferenceIndexPlusFive = planet2OrbitLengthDifferenceIndexPlusFour + 1;\n  const planet1OrbitLengthDifferenceIndexPlusSix = planet1OrbitLengthDifferenceIndexPlusFive + 1;\n  const planet2OrbitLengthDifferenceIndexPlusSix = planet2OrbitLengthDifferenceIndexPlusFive + 1;\n  const planet1OrbitLengthDifferenceIndexPlusSeven = planet1OrbitLengthDifferenceIndexPlusSix + 1;\n  const planet2OrbitLengthDifferenceIndexPlusSeven = planet2OrbitLengthDifferenceIndexPlusSix + 1;\n  const planet1OrbitLengthDifferenceIndexPlusEight = planet1OrbitLengthDifferenceIndexPlusSeven + 1;\n  const planet2OrbitLengthDifferenceIndexPlusEight = planet2OrbitLengthDifferenceIndexPlusSeven + 1;\n  const planet1OrbitLengthDifferenceIndexPlusNine = planet1OrbitLengthDifferenceIndexPlusEight + 1;\n  const planet2OrbitLengthDifferenceIndexPlusNine = planet2OrbitLengthDifferenceIndexPlusEight + 1;\n  const planet1OrbitLengthDifferenceIndexPlusTen = planet1OrbitLengthDifferenceIndexPlusNine + 1;\n  const planet2OrbitLengthDifferenceIndexPlusTen = planet2OrbitLengthDifferenceIndexPlusNine + 1;\n  const planet1OrbitLengthDifferenceIndexPlusEleven = planet1OrbitLengthDifferenceIndexPlusTen + 1;\n  const planet2OrbitLengthDifferenceIndexPlusEleven = planet2OrbitLengthDifferenceIndexPlusTen + 1;\n  const planet1OrbitLengthDifferenceIndexPlusTwelve = planet1OrbitLengthDifferenceIndexPlusEleven + 1;\n  const planet2OrbitLengthDifferenceIndexPlusTwelve = planet2OrbitLengthDifferenceIndexPlusEleven + 1;\n  const planet1OrbitLengthDifferenceIndexPlusThirteen = planet1OrbitLengthDifferenceIndexPlusTwelve + 1;\n  const planet2OrbitLengthDifferenceIndexPlusThirteen = planet2OrbitLengthDifferenceIndexPlusTwelve + 1;\n  const planet1OrbitLengthDifferenceIndexPlusFourteen = planet1OrbitLengthDifferenceIndexPlusThirteen + 1;\n  const planet2OrbitLengthDifferenceIndexPlusFourteen = planet2OrbitLengthDifferenceIndexPlusThirteen + 1;\n  const planet1OrbitLengthDifferenceIndexPlusFifteen = planet1OrbitLengthDifferenceIndexPlusFourteen + 1;\n  const planet2OrbitLengthDifferenceIndexPlusFifteen = planet2OrbitLengthDifferenceIndexPlusFourteen + 1;\n  const planet1OrbitLengthDifferenceIndexPlusSixteen = planet1OrbitLengthDifferenceIndexPlusFifteen + 1;\n  const planet2OrbitLengthDifferenceIndexPlusSixteen = planet2OrbitLengthDifferenceIndexPlusFifteen + 1;\n  const planet1OrbitLengthDifferenceIndexPlusSeventeen = planet1OrbitLengthDifferenceIndexPlusSixteen + 1;\n  const planet2OrbitLengthDifferenceIndexPlusSeventeen = planet2OrbitLengthDifferenceIndexPlusSixteen + 1;\n  const planet1OrbitLengthDifferenceIndexPlusEighteen = planet1OrbitLengthDifferenceIndexPlusSeventeen + 1;\n  const planet2OrbitLengthDifferenceIndexPlusEighteen = planet2OrbitLengthDifferenceIndexPlusSeventeen + 1;\n  const planet1OrbitLengthDifferenceIndexPlusNineteen = planet1OrbitLengthDifferenceIndexPlusEighteen + 1;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*WRite a FUnCTion thAt accePts A list Of strings as a PARameTer,\n  deletes thE strinGs tHAt hAve ODd lEnGtHs froM It,\n  ANd rETuRns the resulted list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion thAt accePts A list Of strings as a PARameTer,\n  deletes thE strinGs tHAt hAve ODd lEnGtHs froM It,\n  ANd rETuRns the resulted list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < sortedList.length; i++) {\n    sum += sortedList[i];\n  }\n  return sum;\n};\n\nconst list_sort = (lst) => {\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\nconst list_sort_by_length = (lst) => {\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => b.length - a.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => b.length - a.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => b.length - a.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => b.length - a.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => b.length - a.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => b.length - a.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => b.length - a.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => b.length - a.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => b.length - a.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  let sortedList = lst.sort((a, b) => a.length - b.length);\n  return sortedList;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (l", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/15", "prompt": "/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += String.fromCharCode(i);\n  }\n  return result;\n};\n\n/*\n  >>> stringSequence(5, 'a')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'A')\n  '0 A 1 A 2 A 3 A 4 A 5'\n  >>> stringSequence(5, 'a', 'A')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'a', 'A', 'a', 'A')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'a', 'A', 'a', 'A', 'a', 'A')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A')\n  '0 a 1 a 2 a 3 a 4 a 5'\n  >>> stringSequence(5, 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a', 'A', 'a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY2 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY3 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY4 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY5 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY6 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY7 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY8 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY9 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY10 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY11 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY12 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY13 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY14 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY15 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY16 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY17 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY18 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY19 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY20 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY21 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY22 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY23 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  } else if (n === y) {\n    return x;\n  } else {\n    return n;\n  }\n};\n\nconst xOrY24 = (n, x, y) => {\n  if (n ===", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "/* given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares13 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares14 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list.\n  */\nConSt sumOfSquares15 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/152", "prompt": "/*I Think WE aLL rememBer thaT feELing when the rESUlt oF some long-awaIted\n  evEnt IS fiNalLY knOwN. THe feeLInGS anD ThOughts you have aT That MomEnt Are\n  defiNIteLy wOrTh nOtiNg dOWn ANd cOMPariNG.\n  YouR TaSk iS To deTERmINe if a PErson coRrectLY GUeSsEd the reSuLTs of a nUMber oF maTches.\n  you ARE giveN TWO ArrAyS Of scoRES and GUesses of equal lEngTh, where eAcH index shOwS A mATCh. \n  rEtUrn an arRay oF thE SamE LEngth denOting How far ofF Each guess waS. iF tHEy hAve guESSed CoRrEctly,\n  the value is 0, ANd if nOT, THe vaLuE is THe AbsoLUte DiffeREnCe bEtweeN the guess And thE score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "/*I Think WE aLL rememBer thaT feELing when the rESUlt oF some long-awaIted\n  evEnt IS fiNalLY knOwN. THe feeLInGS anD ThOughts you have aT That MomEnt Are\n  defiNIteLy wOrTh nOtiNg dOWn ANd cOMPariNG.\n  YouR TaSk iS To deTERmINe if a PErson coRrectLY GUeSsEd the reSuLTs of a nUMber oF maTches.\n  you ARE giveN TWO ArrAyS Of scoRES and GUesses of equal lEngTh, where eAcH index shOwS A mATCh. \n  rEtUrn an arRay oF thE SamE LEngth denOting How far ofF Each guess waS. iF tHEy hAve guESSed CoRrEctly,\n  the value is 0, ANd if nOT, THe vaLuE is THe AbsoLUte DiffeREnCe bEtweeN the guess And thE score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let [gameLength, gameScore, gameGuess, gameGuessLength] = game;\n  let [guessLength, guessScore, guessGuess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength] = guess;\n  let [guess, guessGuessLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*YOu wilL Be GIven thE name oF a cLAss (a string) anD A list Of extensions.\n  ThE extensions are to be used To load AddITioNal CLasSeS tO the cLAsS. the\n  STrEngth of the exteNSion Is aS foLlows: LeT cAP Be tHe NumBer Of tHE uPPerCASe\n  leTTers in THe ExtENsioN'S NaME, and lET SM be thE numbER OF lOwErcase lEtTErs\n  in the EXtensIon'S name, The STRengtH IS GIveN bY The frACTion caP - SM.\n  You should fInd The stronGeSt extensIoN AnD return A StRInG in this\n  foRmat: claSSNaME.strongesTExteNsionNamE.\n  if therE ARe TWo oR more extensions WITh tHe SaMe strength, you shOUld\n  chOOSE the OnE thAT cOmes FIrsT in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "/*YOu wilL Be GIven thE name oF a cLAss (a string) anD A list Of extensions.\n  ThE extensions are to be used To load AddITioNal CLasSeS tO the cLAsS. the\n  STrEngth of the exteNSion Is aS foLlows: LeT cAP Be tHe NumBer Of tHE uPPerCASe\n  leTTers in THe ExtENsioN'S NaME, and lET SM be thE numbER OF lOwErcase lEtTErs\n  in the EXtensIon'S name, The STRengtH IS GIveN bY The frACTion caP - SM.\n  You should fInd The stronGeSt extensIoN AnD return A StRInG in this\n  foRmat: claSSNaME.strongesTExteNsionNamE.\n  if therE ARe TWo oR more extensions WITh tHe SaMe strength, you shOUld\n  chOOSE the OnE thAT cOmes FIrsT in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strongestExtensionName = extensions.reduce((acc, extension) => {\n    const strength = extension.strength;\n    if (strength > acc.strength) {\n      return extension.name;\n    }\n    return acc;\n  }, { strength: -1 });\n  return class_name + '.' + strongestExtensionName;\n};\n\nconst getClassName = (class_name, extensions) => {\n  const strongestExtension = strongestExtension(class_name, extensions);\n  return strongestExtension;\n};\n\nconst getClassNameFromExtension = (extension) => {\n  return extension.name;\n};\n\nconst getClassNameFromExtensionStrength = (extension) => {\n  return extension.strength;\n};\n\nconst getClassNameFromExtensionStrengthAndExtension = (extension) => {\n  return extension.name + '.' + extension.strength;\n};\n\nconst getClassNameFromExtensionStrengthAndExtensionStrength = (extension) => {\n  return extension.name + '.' + extension.strength + '.' + extension.strength;\n};\n\nconst getClassNameFromExtensionStrengthAndExtensionStrengthAndExtension = (extension) => {\n  return extension.name + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength;\n};\n\nconst getClassNameFromExtensionStrengthAndExtensionStrengthAndExtensionStrength = (extension) => {\n  return extension.name + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength;\n};\n\nconst getClassNameFromExtensionStrengthAndExtensionStrengthAndExtensionStrengthAndExtension = (extension) => {\n  return extension.name + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength;\n};\n\nconst getClassNameFromExtensionStrengthAndExtensionStrengthAndExtensionStrengthAndExtension = (extension) => {\n  return extension.name + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength;\n};\n\nconst getClassNameFromExtensionStrengthAndExtensionStrengthAndExtensionStrengthAndExtensionStrength = (extension) => {\n  return extension.name + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength;\n};\n\nconst getClassNameFromExtensionStrengthAndExtensionStrengthAndExtensionStrengthAndExtensionStrengthAndExtension = (extension) => {\n  return extension.name + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength;\n};\n\nconst getClassNameFromExtensionStrengthAndExtensionStrengthAndExtensionStrengthAndExtensionStrengthAndExtension = (extension) => {\n  return extension.name + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength;\n};\n\nconst getClassNameFromExtensionStrengthAndExtensionStrengthAndExtensionStrengthAndExtensionStrengthAndExtension = (extension) => {\n  return extension.name + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength;\n};\n\nconst getClassNameFromExtensionStrengthAndExtensionStrengthAndExtensionStrengthAndExtensionStrengthAndExtension = (extension) => {\n  return extension.name + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength;\n};\n\nconst getClassNameFromExtensionStrengthAndExtensionStrengthAndExtensionStrengthAndExtensionStrengthAndExtension = (extension) => {\n  return extension.name + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '.' + extension.strength + '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/154", "prompt": "/*YOu are GIvEN 2 words. you neeD to return TRue if the secoND Word Or any of its roTationS is a SUbsTriNG in thE fIrSt worD\n  cycpatternCheck(\"abcd\",\"abd\") => FaLSe\n  cycpatternCheck(\"hello\",\"ell\") => tRUe\n  cycpatternCheck(\"whassup\",\"psus\") => False\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => TRue\n  */\ncOnsT cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN 2 words. you neeD to return TRue if the secoND Word Or any of its roTationS is a SUbsTriNG in thE fIrSt worD\n  cycpatternCheck(\"abcd\",\"abd\") => FaLSe\n  cycpatternCheck(\"hello\",\"ell\") => tRUe\n  cycpatternCheck(\"whassup\",\"psus\") => False\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => TRue\n  */\ncOnsT cycpatternCheck = (a, b) => {\n  let a_len = a.length\n  let b_len = b.length\n  let a_i = 0\n  let b_i = 0\n  while (a_i < a_len && b_i < b_len) {\n    if (a[a_i] === b[b_i]) {\n      a_i++\n      b_i++\n    } else if (a[a_i] < b[b_i]) {\n      a_i++\n    } else {\n      b_i++\n    }\n  }\n  if (a_i === a_len && b_i === b_len) {\n    return true\n  } else if (a_i === a_len) {\n    return false\n  } else if (b_i === b_len) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  let a = \"abcd\"\n  let b = \"abd\"\n  let c = \"abcd\"\n  let d = \"abd\"\n  let e = \"abcd\"\n  let f = \"abd\"\n  let g = \"abcd\"\n  let h = \"abd\"\n  let i = \"abcd\"\n  let j = \"abd\"\n  let k = \"abcd\"\n  let l = \"abd\"\n  let m = \"abcd\"\n  let n = \"abd\"\n  let o = \"abcd\"\n  let p = \"abd\"\n  let q = \"abcd\"\n  let r = \"abd\"\n  let s = \"abcd\"\n  let t = \"abd\"\n  let u = \"abcd\"\n  let v = \"abd\"\n  let w = \"abcd\"\n  let x = \"abd\"\n  let y = \"abcd\"\n  let z = \"abd\"\n  let A = \"abcd\"\n  let B = \"abd\"\n  let C = \"abcd\"\n  let D = \"abd\"\n  let E = \"abcd\"\n  let F = \"abd\"\n  let G = \"abcd\"\n  let H = \"abd\"\n  let I = \"abcd\"\n  let J = \"abd\"\n  let K = \"abcd\"\n  let L = \"abd\"\n  let M = \"abcd\"\n  let N = \"abd\"\n  let O = \"abcd\"\n  let P = \"abd\"\n  let Q = \"abcd\"\n  let R = \"abd\"\n  let S = \"abcd\"\n  let T = \"abd\"\n  let U = \"abcd\"\n  let V = \"abd\"\n  let W = \"abcd\"\n  let X = \"abd\"\n  let Y = \"abcd\"\n  let Z = \"abd\"\n  let aa = \"abcd\"\n  let bb = \"abd\"\n  let cc = \"abcd\"\n  let dd = \"abd\"\n  let ee = \"abcd\"\n  let ff = \"abd\"\n  let gg = \"abcd\"\n  let hh = \"abd\"\n  let ii = \"abcd\"\n  let jj = \"abd\"\n  let kk = \"abcd\"\n  let ll = \"abd\"\n  let mm = \"abcd\"\n  let nn = \"abd\"\n  let oo = \"abcd\"\n  let pp = \"abd\"\n  let qq = \"abcd\"\n  let rr = \"abd\"\n  let ss = \"abcd\"\n  let tt = \"abd\"\n  let uu = \"abcd\"\n  let vv = \"abd\"\n  let ww = \"abcd\"\n  let xx = \"abd\"\n  let yy = \"abcd\"\n  let zz = \"abd\"\n  let aa_len = a.length\n  let bb_len = b.length\n  let cc_len = c.length\n  let dd_len = d.length\n  let ee_len = e.length\n  let ff_len = f.length\n  let gg_len = g.length\n  let hh_len = h.length\n  let ii_len = i.length\n  let jj_len = j.length\n  let kk_len = k.length\n  let ll_len = l.length\n  let mm_len = m.length\n  let nn_len = n.length\n  let oo_len = o.length\n  let pp_len = p.length\n  let qq_len = q.length\n  let rr_len = r.length\n  let ss_len = s.length\n  let tt_len = t.length\n  let uu_len = u.length\n  let vv_len = v.length\n  let ww_len = w.length\n  let xx_len = x.length\n  let yy_len = y.length\n  let zz_len = z.length\n  let aa_i = 0\n  let bb_i = 0\n  let cc_i = 0\n  let dd_i = 0\n  let ee_i = 0\n  let ff_i = 0\n  let gg_i = 0\n  let hh_i = 0\n  let ii_i = 0\n  let jj_i = 0\n  let kk_i = 0\n  let ll_i = 0\n  let mm_i = 0\n  let nn_i = 0\n  let oo_i = 0\n  let pp_i = 0\n  let qq_i = 0\n  let rr_i = 0\n  let ss_i = 0\n  let t", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    let isOdd = false;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        } else {\n            isOdd =!isOdd;\n        }\n        num = num / 2;\n    }\n    return (isOdd? (count, 1) : (count, 0));\n};\n\nexport default evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = parseInt(number, 10);\n  const result = [];\n  let i = 1;\n  while (num > 0) {\n    const digit = num % 10;\n    num = Math.floor(num / 10);\n    result.push(digit);\n    i++;\n  }\n  return result.reverse().join('');\n};\n\n/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const num = parseInt(number, 10);\n  const result = [];\n  let i = 1;\n  while (num > 0) {\n    const digit = num % 10;\n    num = Math.floor(num / 10);\n    result.push(digit);\n    i++;\n  }\n  return result.reverse().join('');\n};\n\n/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const num = parseInt(number, 10);\n  const result = [];\n  let i = 1;\n  while (num > 0) {\n    const digit = num % 10;\n    num = Math.floor(num / 10);\n    result.push(digit);\n    i++;\n  }\n  return result.reverse().join('');\n};\n\n/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const num = parseInt(number, 10);\n  const result = [];\n  let i = 1;\n  while (num > 0) {\n    const digit = num % 10;\n    num = Math.floor(num / 10);\n    result.push(digit);\n    i++;\n  }\n  return result.reverse().join('');\n};\n\n/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const num = parseInt(number, 10);\n  const result = [];\n  let i = 1;\n  while (num > 0) {\n    const digit = num % 10;\n    num = Math.floor(num / 10);\n    result.push(digit);\n    i++;\n  }\n  return result.reverse().join('');\n};\n\n/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const num = parseInt(number, 10);\n  const result = [];\n  let i = 1;\n  while (num > 0) {\n    const digit = num % 10;\n    num = Math.floor(num / 10);\n    result.push(digit);\n    i++;\n  }\n  return result.reverse().join('');\n};\n\n/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const num = parseInt(number, 10);\n  const result = [];\n  let i = 1;\n  while (num > 0) {\n    const digit = num % 10;\n    num = Math.floor(num / 10);\n    result.push(digit);\n    i++;\n  }\n  return result.reverse().join('');\n};\n\n/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn true if the Three\n  sIdeS ForM a riGHt-aNgLeD triaNGlE, FalSE oTherwise.\n  A right-ANgleD trIanGle is a trIAngLe in wHiCh oNe aNglE Is RIghT ANgle OR\n  90 degREe.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "/*\n given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn true if the Three\n  sIdeS ForM a riGHt-aNgLeD triaNGlE, FalSE oTherwise.\n  A right-ANgleD trIanGle is a trIAngLe in wHiCh oNe aNglE Is RIghT ANgle OR\n  90 degREe.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n  const abc = ab + bc;\n  const acb = ac + bc;\n  const abc = ab + c;\n  const abc = ab + c;\n  return (abc === abc && abc === abc && abc === abc);\n};\n\n/*\n Given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn true if the Three\n  sIdeS ForM a riGHt-aNgLeD triaNGlE, FalSE oTherwise.\n  A right-ANgleD trIanGle is a trIAngLe in wHiCh oNe aNglE Is RIghT ANgle OR\n  90 degREe.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n  const abc = ab + bc;\n  const acb = ac + bc;\n  const abc = ab + c;\n  const abc = ab + c;\n  return (abc === abc && abc === abc && abc === abc);\n};\n\nconst rightAngleTriangle3 = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n  const abc = ab + bc;\n  const acb = ac + bc;\n  const abc = ab + c;\n  const abc = ab + c;\n  return (abc === abc && abc === abc && abc === abc);\n};\n\nconst rightAngleTriangle4 = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n  const abc = ab + bc;\n  const acb = ac + bc;\n  const abc = ab + c;\n  const abc = ab + c;\n  return (abc === abc && abc === abc && abc === abc);\n};\n\nconst rightAngleTriangle5 = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n  const abc = ab + bc;\n  const acb = ac + bc;\n  const abc = ab + c;\n  const abc = ab + c;\n  return (abc === abc && abc === abc && abc === abc);\n};\n\nconst rightAngleTriangle6 = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n  const abc = ab + bc;\n  const acb = ac + bc;\n  const abc = ab + c;\n  const abc = ab + c;\n  return (abc === abc && abc === abc && abc === abc);\n};\n\nconst rightAngleTriangle7 = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n  const abc = ab + bc;\n  const acb = ac + bc;\n  const abc = ab + c;\n  const abc = ab + c;\n  return (abc === abc && abc === abc && abc === abc);\n};\n\nconst rightAngleTriangle8 = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n  const abc = ab + bc;\n  const acb = ac + bc;\n  const abc = ab + c;\n  const abc = ab + c;\n  return (abc === abc && abc === abc && abc === abc);\n};\n\nconst rightAngleTriangle9 = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n  const abc = ab + bc;\n  const acb = ac + bc;\n  const abc = ab + c;\n  const abc = ab + c;\n  return (abc === abc && abc === abc && abc === abc);\n};\n\nconst rightAngleTriangle10 = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n  const abc = ab + bc;\n  const acb = ac + bc;\n  const abc = ab + c;\n  const abc = ab + c;\n  return (abc === abc && abc === abc && abc === abc);\n};\n\nconst rightAngleTriangle11 = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n  const abc = ab + bc;\n  const acb = ac + bc;\n  const abc = ab + c;\n  const abc = ab + c;\n  return (abc === abc && abc === abc && abc === abc);\n};\n\nconst rightAngleTriangle12 = (a, b, c) => {\n  const ab = a + b;\n  const bc = b + c;\n  const ac = a + c;\n  const abc =", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/158", "prompt": "/*WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax = (words) => {\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Find the longest word in a list of words.\n  */\nconst findLongest = (words) => {\n  const longest = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > longest.length) {\n      longest = words[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  Find the shortest word in a list of words.\n  */\nconst findShortest = (words) => {\n  const shortest = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length < shortest.length) {\n      shortest = words[i];\n    }\n  }\n  return shortest;\n};\n\n/*\n  Find the word that occurs the most in a list of words.\n  */\nconst findMost = (words) => {\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Find the word that occurs the least in a list of words.\n  */\nconst findLeast = (words) => {\n  const min = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length < min.length) {\n      min = words[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Find the word that occurs the most in a list of words.\n  */\nconst findMostFrequent = (words) => {\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Find the word that occurs the least in a list of words.\n  */\nconst findLeastFrequent = (words) => {\n  const min = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length < min.length) {\n      min = words[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Find the word that occurs the most in a list of words.\n  */\nconst findMostCommon = (words) => {\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Find the word that occurs the least in a list of words.\n  */\nconst findLeastCommon = (words) => {\n  const min = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length < min.length) {\n      min = words[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Find the word that occurs the most in a list of words.\n  */\nconst findMostCommon = (words) => {\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Find the word that occurs the least in a list of words.\n  */\nconst findLeastCommon = (words) => {\n  const min = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length < min.length) {\n      min = words[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Find the word that occurs the most in a list of words.\n  */\nconst findMostCommon = (words) => {\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Find the word that occurs the least in a list of words.\n  */\nconst findLeastCommon = (words) => {\n  const min = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length < min.length) {\n      min = words[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Find the word that occurs the most in a list of words.\n  */\nconst findMostCommon = (words) => {\n  const max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Find the word that occurs the least in a list of words.\n  */\nconst findLeastCommon = (words) => {\n  const min = words[0];\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  you're A HuNGry rabBit, and You ALready have eaTEN a ceRtain number of carroTs,\n  but nOw yOU need to eat MorE CarRoTs To comPLeTE thE DaY's meals.\n  you shouLD return an aRraY of [ Total number of EAteN caRrOts AftEr yOUr MEalS,\n                                  THe number of CArroTS lEft AFter YOUr MEals ]\n  iF There arE not eNOUGh remaining CaRrots, yoU wILl eat all remaining cARrots, But Will sTilL BE hungRY.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "/*\n  you're A HuNGry rabBit, and You ALready have eaTEN a ceRtain number of carroTs,\n  but nOw yOU need to eat MorE CarRoTs To comPLeTE thE DaY's meals.\n  you shouLD return an aRraY of [ Total number of EAteN caRrOts AftEr yOUr MEalS,\n                                  THe number of CArroTS lEft AFter YOUr MEals ]\n  iF There arE not eNOUGh remaining CaRrots, yoU wILl eat all remaining cARrots, But Will sTilL BE hungRY.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  const total = number + need;\n  const remainingCarrots = remaining;\n  \n  if (total <= remainingCarrots) {\n    result.push(total);\n  } else {\n    result.push(remainingCarrots);\n    result.push(total - remainingCarrots);\n  }\n  \n  return result;\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charArray = string.split('')\n  const charArrayLength = charArray.length\n  const charArrayLengthMinusOne = charArrayLength - 1\n  const charArrayLengthMinusTwo = charArrayLength - 2\n  const charArrayLengthMinusThree = charArrayLength - 3\n  const charArrayLengthMinusFour = charArrayLength - 4\n  const charArrayLengthMinusFive = charArrayLength - 5\n  const charArrayLengthMinusSix = charArrayLength - 6\n  const charArrayLengthMinusSeven = charArrayLength - 7\n  const charArrayLengthMinusEight = charArrayLength - 8\n  const charArrayLengthMinusNine = charArrayLength - 9\n  const charArrayLengthMinusTen = charArrayLength - 10\n  const charArrayLengthMinusEleven = charArrayLength - 11\n  const charArrayLengthMinusTwelve = charArrayLength - 12\n  const charArrayLengthMinusThirteen = charArrayLength - 13\n  const charArrayLengthMinusFourteen = charArrayLength - 14\n  const charArrayLengthMinusFifteen = charArrayLength - 15\n  const charArrayLengthMinusSixteen = charArrayLength - 16\n  const charArrayLengthMinusSeventeen = charArrayLength - 17\n  const charArrayLengthMinusEighteen = charArrayLength - 18\n  const charArrayLengthMinusNineteen = charArrayLength - 19\n  const charArrayLengthMinusTwenty = charArrayLength - 20\n  const charArrayLengthMinusTwentyOne = charArrayLength - 21\n  const charArrayLengthMinusTwentyTwo = charArrayLength - 22\n  const charArrayLengthMinusTwentyThree = charArrayLength - 23\n  const charArrayLengthMinusTwentyFour = charArrayLength - 24\n  const charArrayLengthMinusTwentyFive = charArrayLength - 25\n  const charArrayLengthMinusTwentySix = charArrayLength - 26\n  const charArrayLengthMinusTwentySeven = charArrayLength - 27\n  const charArrayLengthMinusTwentyEight = charArrayLength - 28\n  const charArrayLengthMinusTwentyNine = charArrayLength - 29\n  const charArrayLengthMinusThirty = charArrayLength - 30\n  const charArrayLengthMinusThirtyOne = charArrayLength - 31\n  const charArrayLengthMinusThirtyTwo = charArrayLength - 32\n  const charArrayLengthMinusThirtyThree = charArrayLength - 33\n  const charArrayLengthMinusThirtyFour = charArrayLength - 34\n  const charArrayLengthMinusThirtyFive = charArrayLength - 35\n  const charArrayLengthMinusThirtySix = charArrayLength - 36\n  const charArrayLengthMinusThirtySeven = charArrayLength - 37\n  const charArrayLengthMinusThirtyEight = charArrayLength - 38\n  const charArrayLengthMinusThirtyNine = charArrayLength - 39\n  const charArrayLengthMinusForty = charArrayLength - 40\n  const charArrayLengthMinusFortyOne = charArrayLength - 41\n  const charArrayLengthMinusFortyTwo = charArrayLength - 42\n  const charArrayLengthMinusFortyThree = charArrayLength - 43\n  const charArrayLengthMinusFortyFour = charArrayLength - 44\n  const charArrayLengthMinusFortyFive = charArrayLength - 45\n  const charArrayLengthMinusFortySix = charArrayLength - 46\n  const charArrayLengthMinusFortySeven = charArrayLength - 47\n  const charArrayLengthMinusFortyEight = charArrayLength - 48\n  const charArrayLengthMinusFortyNine = charArrayLength - 49\n  const charArrayLengthMinusFifty = charArrayLength - 50\n  const charArrayLengthMinusFiftyOne = charArrayLength - 51\n  const charArrayLengthMinusFiftyTwo = charArrayLength - 52\n  const charArrayLengthMinusFiftyThree = charArrayLength - 53\n  const charArrayLengthMinusFiftyFour = charArrayLength - 54\n  const charArrayLengthMinusFiftyFive = charArrayLength - 55\n  const charArrayLengthMinusFiftySix = charArrayLength - 56\n  const charArrayLengthMinusFiftySeven = charArrayLength - 57\n  const charArrayLengthMinusFiftyEight = charArrayLength - 58\n  const charArrayLengthMinusFiftyNine = charArrayLength - 59\n  const charArrayLengthMinusSixty = charArrayLength - 60\n  const charArrayLengthMinusSixtyOne = charArrayLength - 61\n  const charArrayLengthMinusSixtyTwo = charArrayLength - 62\n  const charArrayLengthMinusSixtyThree = charArrayLength - 63\n  const charArrayLengthMinusSixtyFour = charArrayLength - 64\n  const charArrayLengthMinusSixtyFive = charArrayLength - 65\n  const charArrayLengthMinusSixtySix = charArrayLength - 66\n  const charArrayLengthMinusSixtySeven = charArrayLength - 67\n  const charArrayLengthMinusSixtyEight = charArrayLength - 68\n  const charArrayLengthMinusSixtyNine = charArrayLength - 69\n  const charArrayLengthMinusSeventy = charArrayLength - 70\n  const charArrayLengthMinusSeventyOne = charArrayLength - 71\n  const charArrayLengthMinusSeventyTwo = charArrayLength - 72\n  const charArrayLengthMinusSeventyThree = charArrayLength - 73\n  const charArrayLengthMinusSeventyFour = charArrayLength - 74\n  const charArrayLengthMinusSeventyFive = charArrayLength - 75\n  const charArrayLengthMinusSeventySix = charArrayLength - 76\n  const charArrayLengthMinusSeventySeven = charArrayLength - 77\n  const charArrayLengthMinusSeventyEight = charArrayLength - 78\n  const charArrayLengthMinusSeventyNine = charArrayLength - 79\n  const charArrayLengthMinusSeventyTen = charArrayLength - 80\n  const charArrayLengthMinusSeventyEleven = charArrayLength - 81\n  const charArrayLengthMinusSeventyTwelve = charArrayLength - 82\n  const charArrayLengthMinusSeventyThirteen = charArrayLength - 83\n  const charArrayLengthMinusSeventyFourteen = charArrayLength - 84\n  const charArrayLengthMinusSeventyFifteen = charArrayLength - 85\n  const charArrayLengthMinusSeventySixteen = charArrayLength - 86\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  given TWo LIsts operator, anD operand. The fiRst list HAs basic algebRA OperAtions, and \n  the Second list Is a list OF inTegERs. USe ThE two gIVeN LisTS tO build the algebRIc \n  exPreSsiOn and return thE EvaLuaTiOn oF thIs eXPrESsiON.\n\n  the bASic aLGeBra OPeraTIOnS:\n  additIOn ( + ) \n  SubtrActioN ( - ) \n  mULtIpLicatioN ( * ) \n  FLOor divISion ( // ) \n  EXpoNentiAtiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "/*\n  given TWo LIsts operator, anD operand. The fiRst list HAs basic algebRA OperAtions, and \n  the Second list Is a list OF inTegERs. USe ThE two gIVeN LisTS tO build the algebRIc \n  exPreSsiOn and return thE EvaLuaTiOn oF thIs eXPrESsiON.\n\n  the bASic aLGeBra OPeraTIOnS:\n  additIOn ( + ) \n  SubtrActioN ( - ) \n  mULtIpLicatioN ( * ) \n  FLOor divISion ( // ) \n  EXpoNentiAtiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split(' ')\n  const operandList = operand.split(' ')\n  const result = []\n  for (let i = 0; i < operatorList.length; i++) {\n    const operator = operatorList[i]\n    const operand = operandList[i]\n    if (operator === '+') {\n      result.push(operand[0] + operand[1])\n    } else if (operator === '-') {\n      result.push(operand[0] - operand[1])\n    } else if (operator === '*') {\n      result.push(operand[0] * operand[1])\n    } else if (operator === '/') {\n      result.push(operand[0] / operand[1])\n    } else if (operator === '//') {\n      result.push(operand[0] // operand[1])\n    } else if (operator === '**') {\n      result.push(operand[0] ** operand[1])\n    }\n  }\n  return result\n}\n\n/*\n  given two lists, anD operand. The fiRst list HAs basic algebRA OperAtions, and \n  the Second list Is a list OF inTegERs. USe ThE two gIVeN LisTS tO build the algebRIc \n  exPreSsiOn and return thE EvaLuaTiOn oF thIs eXPrESsiON.\n\n  the bASic aLGeBra OPeraTIOnS:\n  additIOn ( + ) \n  SubtrActioN ( - ) \n  mULtIpLicatioN ( * ) \n  FLOor divISion ( // ) \n  EXpoNentiAtiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra2 = (operator, operand) => {\n  const operatorList = operator.split(' ')\n  const operandList = operand.split(' ')\n  const result = []\n  for (let i = 0; i < operatorList.length; i++) {\n    const operator = operatorList[i]\n    const operand = operandList[i]\n    if (operator === '+') {\n      result.push(operand[0] + operand[1])\n    } else if (operator === '-') {\n      result.push(operand[0] - operand[1])\n    } else if (operator === '*') {\n      result.push(operand[0] * operand[1])\n    } else if (operator === '/') {\n      result.push(operand[0] / operand[1])\n    } else if (operator === '//') {\n      result.push(operand[0] // operand[1])\n    } else if (operator === '**') {\n      result.push(operand[0] ** operand[1])\n    }\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorList = operator.split(' ')\n  const operandList = operand.split(' ')\n  const result = []\n  for (let i = 0; i < operatorList.length; i++) {\n    const operator = operatorList[i]\n    const operand = operandList[i]\n    if (operator === '+') {\n      result.push(operand[0] + operand[1])\n    } else if (operator === '-') {\n      result.push(operand[0] - operand[1])\n    } else if (operator === '*') {\n      result.push(operand[0] * operand[1])\n    } else if (operator === '/') {\n      result.push(operand[0] / operand[1])\n    } else if (operator === '//') {\n      result.push(operand[0] // operand[1])\n    } else if (operator === '**') {\n      result.push(operand[0] ** operand[1])\n    }\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorList = operator.split(' ')\n  const operandList = operand.split(' ')\n  const result = []\n  for (let i = 0; i < operatorList.length; i++) {\n    const operator = operatorList[i]\n    const operand = operandList[i]\n    if (operator === '+') {\n      result.push(operand[0] + operand[1])\n    } else if (operator === '-') {\n      result.push(operand[0] - operand[1])\n    } else if (operator === '*') {\n      result.push", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let s = s.toLowerCase()\n  let result = \"\"\n  let stack = []\n  let stackIndex = 0\n  let stackLength = 0\n  let stackLengthMax = 0\n  let stackLengthMin = 0\n  let stackLengthMinMax = 0\n  let stackLengthMinMaxMin = 0\n  let stackLengthMinMaxMinMax = 0\n  let stackLengthMinMaxMinMaxMin = 0\n  let stackLengthMinMaxMinMaxMinMax = 0\n  let stackLengthMinMaxMinMaxMinMaxMin = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMax = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMin = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = 0\n  let stackLengthMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  given TWo POsitivE integErs a ANd b, return the even digITS betWeen a\n  and b, in ascenDing orDer.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "/*\n  given TWo POsitivE integErs a ANd b, return the even digITS betWeen a\n  and b, in ascenDing orDer.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const aInt = a.toString().split('').reverse().join('');\n  const bInt = b.toString().split('').reverse().join('');\n  const aIntLen = aInt.length;\n  const bIntLen = bInt.length;\n  const evenDigits = [];\n  for (let i = 0; i < aIntLen; i++) {\n    if (aInt.charAt(i) === bInt.charAt(i)) {\n      evenDigits.push(aInt.charAt(i));\n    }\n  }\n  return evenDigits;\n};\n\nexport default generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/17", "prompt": "/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('');\n  const notes_length = notes.length;\n  const beats = [];\n  let current_beat = 0;\n  let current_note = 0;\n  let current_note_length = 0;\n  let current_note_type = 0;\n  let current_note_octave = 0;\n  let current_note_duration = 0;\n  let current_note_note = 0;\n  let current_note_pitch = 0;\n  let current_note_pitch_octave = 0;\n  let current_note_pitch_name = 0;\n  let current_note_pitch_octave_name = 0;\n  let current_note_pitch_name_octave = 0;\n  let current_note_pitch_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave = 0;\n  let current_note_pitch_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name_octave_name = 0;\n  let current_note_pitch_name_octave_name_octave_name_octave_name_octave_name", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j)!== substring.charAt(j)) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaaa')\n  1\n  */\nconst howManyTimes2 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j)!== substring.charAt(j)) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaaa')\n  1\n  */\nconst howManyTimes3 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j)!== substring.charAt(j)) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaaa')\n  1\n  */\nconst howManyTimes4 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j)!== substring.charAt(j)) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaaa')\n  1\n  */\nconst howManyTimes5 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j)!== substring.charAt(j)) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaaa')\n  1\n  */\nconst howManyTimes6 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j)!== substring.charAt(j)) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaaa')\n  1\n  */\nconst howManyTimes7 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j)!== substring.charAt(j)) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('aaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  >>> howManyTimes('aaaa', 'aaa')\n  0\n  >>> howManyTimes('aaaa', 'aaaa')\n  1\n  */\nconst howManyTimes8 = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe', 'sIX', 'sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => a - b);\n  return sorted.join('');\n};\n\n/*\n  input IS a sPAce-delImed StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => a - b);\n  return sorted.join('');\n};\n\n/*\n  input IS a sPAce-delImed StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers2('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => a - b);\n  return sorted.join('');\n};\n\n/*\n  input IS a sPAce-delImed StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers3('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => a - b);\n  return sorted.join('');\n};\n\n/*\n  input IS a sPAce-delImed StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers4('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => a - b);\n  return sorted.join('');\n};\n\n/*\n  input IS a sPAce-delImed StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers5('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => a - b);\n  return sorted.join('');\n};\n\n/*\n  input IS a sPAce-delImed StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers6('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => a - b);\n  return sorted.join('');\n};\n\n/*\n  input IS a sPAce-delImed StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers7('three one five')\n  'one three five'\n  */\nconst sortNumbers8 = (numbers) => {\n  const sorted = numbers.split('').sort((a, b) => a - b);\n  return sorted.join('');\n};\n\n/*\n  input IS a sPAce-delImed StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers8('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* given A PoSItive fLoatinG poINt number, it can be decOMPoseD into\n  and inteGer parT (laRGesT inTEgeR sMaLler tHAn GIveN number) AnD decimals\n  (leftoVEr paRt aLwaYs smallER thAn 1).\n\n  REtUrn The DecIMaL ParT OF the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "/* given A PoSItive fLoatinG poINt number, it can be decOMPoseD into\n  and inteGer parT (laRGesT inTEgeR sMaLler tHAn GIveN number) AnD decimals\n  (leftoVEr paRt aLwaYs smallER thAn 1).\n\n  REtUrn The DecIMaL ParT OF the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let decimal = number % 1;\n  let integer = Math.floor(number);\n  let part = integer % 10;\n  let result = part;\n  if (decimal > 0) {\n    result += 1;\n  }\n  return result;\n};\n\nexport default truncateNumber;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/20", "prompt": "/* from a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "/* from a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = sortNumbers(numbers);\n  const closestNumber = sortedNumbers[0];\n  const closestDistance = Math.abs(closestNumber - numbers[0]);\n  const closestIndex = 0;\n  for (let i = 1; i < sortedNumbers.length; i++) {\n    const currentNumber = sortedNumbers[i];\n    const currentDistance = Math.abs(closestNumber - currentNumber);\n    if (currentDistance < closestDistance) {\n      closestNumber = currentNumber;\n      closestDistance = currentDistance;\n      closestIndex = i;\n    }\n  }\n  return [closestNumber, sortedNumbers[closestIndex]];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const sortedNumbers = sortNumbers(numbers);\n  const closestNumber = sortedNumbers[0];\n  const closestDistance = Math.abs(closestNumber - numbers[0]);\n  const closestIndex = 0;\n  for (let i = 1; i < sortedNumbers.length; i++) {\n    const currentNumber = sortedNumbers[i];\n    const currentDistance = Math.abs(closestNumber - currentNumber);\n    if (currentDistance < closestDistance) {\n      closestNumber = currentNumber;\n      closestDistance = currentDistance;\n      closestIndex = i;\n    }\n  }\n  return [closestNumber, sortedNumbers[closestIndex]];\n};\n\nconst sortNumbers = (numbers) => {\n  return numbers.sort((a, b) => {\n    return a - b;\n  });\n};\n\nmodule.exports = {\n  findClosestElements,\n  findClosestElements2\n};\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* given list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "/* given list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (x) => (x - min) / (max - min);\n  return numbers.map(scale);\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/22", "prompt": "/* filteR GiVEn list of anY pythoN values onLY for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "/* filteR GiVEn list of anY pythoN values onLY for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers2 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers3 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers4 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers5 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers6 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers7 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers8 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers9 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers10 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers11 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers12 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers13 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers14 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers15 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers16 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers17 = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* returN LeNGth of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "/* returN LeNGth of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen2 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen3 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen4 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen5 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen6 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen7 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen8 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen9 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen10 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen11 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen12 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen13 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen14 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen15 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen16 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen17 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen18 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen19 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen20 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen21 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen22 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen23 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen24 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen25 = (string) => {\n  return string.length\n}\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefg')\n  7\n  */", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor15 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor16 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor17 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* returN list Of PRime faCtors oF giVEn integer in the ORDer fRom smallest tO largeSt.\n  EACh oF thE FacToRs ShoulD Be LIstED nUmber of times coRRespOndIng To how maNY tiMes It AppEarEs in fACtORizATIon.\n  INPut nUMbEr sHOuld BE EqUAl to tHE producT of alL FACtOrS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "/* returN list Of PRime faCtors oF giVEn integer in the ORDer fRom smallest tO largeSt.\n  EACh oF thE FacToRs ShoulD Be LIstED nUmber of times coRRespOndIng To how maNY tiMes It AppEarEs in fACtORizATIon.\n  INPut nUMbEr sHOuld BE EqUAl to tHE producT of alL FACtOrS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      factors.push(i)\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      factors.push(i)\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      factors.push(i)\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      factors.push(i)\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      factors.push(i)\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      factors.push(i)\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      factors.push(i)\n    }\n  }\n  return factors\n}\n\n/*", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/26", "prompt": "/* from a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "/* from a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* from a list OF iNTegers, Remove All ELementS that oCCUr moRe than once.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* from a list OF iNTegers, Remove All ELementS that oCCUr moRe than once.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* from a list OF iNTegers, Remove All ELementS that oCCUr moRe than once.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* from a list OF iNTegers, Remove All ELementS that oCCUr moRe than once.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* from a list OF iNTegers, Remove All ELementS that oCCUr moRe than once.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* from a list OF iNTegers, Remove All ELementS that oCCUr moRe than once.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* from a list OF iNTegers, Remove All ELementS that oCCUr moRe than once.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* from a list OF iNTegers, Remove All ELementS that oCCUr moRe than once.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers[i]);\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/* from a list OF iNTegers, Remove All ELementS that oCCUr moRe than once.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      seen.push(numbers", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* for a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "/* for a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return `${match.toUpperCase()}`;\n  });\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomString = (length) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return result;\n};\n\nconst getRandomStringWithLength = (length) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return result;\n};\n\nconst getRandomStringWithLengthAndCase = (length) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return result;\n};\n\nconst getRandomStringWithLengthAndCaseAndFlipCase = (length) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return result;\n};\n\nconst getRandomStringWithLengthAndCaseAndFlipCaseAndRandomCase = (length) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return result;\n};\n\nconst getRandomStringWithLengthAndCaseAndRandomCase = (length) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return result;\n};\n\nconst getRandomStringWithLengthAndCaseAndRandomCaseAndFlipCase = (length) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return result;\n};\n\nconst getRandomStringWithLengthAndCaseAndRandomCaseAndFlipCaseAndRandomCase = (length) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return result;\n};\n\nconst getRandomStringWithLengthAndCaseAndRandomCaseAndFlipCaseAndRandomCaseAndRandomCase = (length) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return result;\n};\n\nconst getRandomStringWithLengthAndCaseAndRandomCaseAndRandomCaseAndFlipCaseAndRandomCaseAndRandomCase = (length) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return result;\n};\n\nconst getRandomStringWithLengthAndCaseAndRandomCaseAndRandomCaseAndFlipCaseAndRandomCaseAndRandomCase = (length) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return result;\n};\n\nconst getRandomStringWithLengthAndCaseAndRandomCaseAndRandomCaseAndFlipCaseAndRandomCaseAndRandomCase = (length) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[getRandomInt(0, chars.length - 1)];\n  }\n  return result", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/28", "prompt": "/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};\n\n/*\n  >>> concatenate(['a', 'b', 'c'], 'd')\n  'abcd'\n  */\nconst concatenate = (strings, glue) => {\n  return strings.reduce((acc, str) => acc + glue + str, '');\n};", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "/* filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix2 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix3 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix4 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix5 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix6 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix7 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix8 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix9 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix10 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix11 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix12 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix13 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix14 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix15 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix16 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix17 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const result = [];\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      result.push(true);\n    } else {\n      result.push(false);\n    }\n  }\n  return result;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/30", "prompt": "/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const arr = l.slice();\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr.splice(i, 1);\n      i--;\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const arr = l.slice();\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      arr.splice(i, 1);\n      i--;\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/31", "prompt": "/*REturn TRuE If a givEn numbEr iS Prime, and falsE OTherWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "/*REturn TRuE If a givEn numbEr iS Prime, and falsE OTherWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  if (n < 3) return true\n  if (n % 3 === 0) return false\n  if (n < 5) return true\n  if (n % 5 === 0) return false\n  if (n < 7) return true\n  if (n % 7 === 0) return false\n  if (n < 11) return true\n  if (n % 11 === 0) return false\n  if (n < 13) return true\n  if (n % 13 === 0) return false\n  if (n < 17) return true\n  if (n % 17 === 0) return false\n  if (n < 19) return true\n  if (n % 19 === 0) return false\n  if (n < 23) return true\n  if (n % 23 === 0) return false\n  if (n < 29) return true\n  if (n % 29 === 0) return false\n  if (n < 31) return true\n  if (n % 31 === 0) return false\n  if (n < 37) return true\n  if (n % 37 === 0) return false\n  if (n < 41) return true\n  if (n % 41 === 0) return false\n  if (n < 43) return true\n  if (n % 43 === 0) return false\n  if (n < 47) return true\n  if (n % 47 === 0) return false\n  if (n < 53) return true\n  if (n % 53 === 0) return false\n  if (n < 59) return true\n  if (n % 59 === 0) return false\n  if (n < 61) return true\n  if (n % 61 === 0) return false\n  if (n < 67) return true\n  if (n % 67 === 0) return false\n  if (n < 71) return true\n  if (n % 71 === 0) return false\n  if (n < 73) return true\n  if (n % 73 === 0) return false\n  if (n < 79) return true\n  if (n % 79 === 0) return false\n  if (n < 83) return true\n  if (n % 83 === 0) return false\n  if (n < 89) return true\n  if (n % 89 === 0) return false\n  if (n < 97) return true\n  if (n % 97 === 0) return false\n  if (n < 101) return true\n  if (n % 101 === 0) return false\n  if (n < 103) return true\n  if (n % 103 === 0) return false\n  if (n < 107) return true\n  if (n % 107 === 0) return false\n  if (n < 109) return true\n  if (n % 109 === 0) return false\n  if (n < 113) return true\n  if (n % 113 === 0) return false\n  if (n < 127) return true\n  if (n % 127 === 0) return false\n  if (n < 131) return true\n  if (n % 131 === 0) return false\n  if (n < 137) return true\n  if (n % 137 === 0) return false\n  if (n < 139) return true\n  if (n % 139 === 0) return false\n  if (n < 149) return true\n  if (n % 149 === 0) return false\n  if (n < 151) return true\n  if (n % 151 === 0) return false\n  if (n < 157) return true\n  if (n % 157 === 0) return false\n  if (n < 163) return true\n  if (n % 163 === 0) return false\n  if (n < 167) return true\n  if (n % 167 === 0) return false\n  if (n < 173) return true\n  if (n % 173 === 0) return false\n  if (n < 179) return true\n  if (n % 179 === 0) return false\n  if (n < 181) return true\n  if (n % 181 === 0) return false\n  if (n < 187) return true\n  if (n % 187 === 0) return false\n  if (n < 191) return true\n  if (n % 191 === 0) return false\n  if (n < 193) return true\n  if (n % 193 === 0) return false\n  if (n < 197) return true\n  if (n % 197 === 0) return false\n  if (n < 199) return true\n  if (n % 199 === 0) return false\n  if (n < 211) return true\n  if (n % 211 === 0) return false\n  if (n < 223) return true\n  if (n % 223 === 0) return false\n  if (n < 227) return true\n  if (n % 227 === 0) return false\n  if (n < 229) return true\n  if (n % 229 === 0) return false\n  if (n < 233) return true\n  if (n % 233 === 0) return false\n  if (n < 239) return true\n  if (n % 239 === 0) return false\n  if (n < 241) return true\n  if (n % 241 === 0) return false\n  if (n < 247) return true\n  if (n % 247 === 0) return false\n  if (n < 251) return true\n  if (n % 251 === 0) return false\n  if (n < 257) return true\n  if (n % 257 === 0) return false\n  if (n < 263) return true\n  if (n % 263 === 0) return false\n  if (n < 269) return true\n  if (n % 269 === 0) return false\n  if (n < 271) return true\n  if (n % 271 === 0) return false\n  if (n < 277) return true\n  if (n % 277 === 0) return false\n  if (n < 281) return true\n  if (n % 281 === 0) return false\n  if (n < 283) return true\n  if (n % 283 === 0) return false\n  if (n < 293) return true\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  evaluATeS PolynoMial wiTh cOEfficients xs at POInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "/*\n  evaluATeS PolynoMial wiTh cOEfficients xs at POInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  while (poly(x)!== 0) {\n    x = x + 1;\n  }\n  return x;\n}\n\n/*\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a function.\n  findZero(xs) is a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the indicIes thaT arE Not DivISibLe By three, While ITs VAluES aT the indicies thAT are DivIsiBle by three arE EquAl\n  tO tHe vAluEs oF ThE CorRESponDIng iNDiCieS Of l, buT SOrTEd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the indicIes thaT arE Not DivISibLe By three, While ITs VAluES aT the indicies thAT are DivIsiBle by three arE EquAl\n  tO tHe vAluEs oF ThE CorRESponDIng iNDiCieS Of l, buT SOrTEd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = l.sort((a, b) => {\n    if (a % 3 === b % 3) {\n      return a - b;\n    } else if (a % 3 > b % 3) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n  return sorted;\n};\n\nexport default sortThird;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/34", "prompt": "/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set();\n  return l.filter(x => seen.add(x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn2 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn3 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn4 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn5 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn6 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn7 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn8 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn9 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn10 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn11 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn12 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByFn13 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/36", "prompt": "/*REturn THe NUmber oF times The DIgit 7 appears in iNTEgerS less than n whiCh are dIviSIblE by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "/*REturn THe NUmber oF times The DIgit 7 appears in iNTEgerS less than n whiCh are dIviSIblE by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      console.log(i);\n    }\n    i++;\n  }\n};\n\nfizzBuzz(78);\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the odd inDicies, WhiLE itS vaLUes At ThE even indiCIeS Are EQuAl\n  to the values oF The even iNdiCieS of l, but sORteD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the odd inDicies, WhiLE itS vaLUes At ThE even indiCIeS Are EQuAl\n  to the values oF The even iNdiCieS of l, but sORteD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const sorted = [];\n  const even = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      sorted.push(l[i]);\n    }\n  }\n  sorted.push(...even);\n  return sorted;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  const sorted = [];\n  const odd = [];\n  for (let i = 1; i < l.length; i += 2) {\n    if (l[i] % 2 === 1) {\n      odd.push(l[i]);\n    } else {\n      sorted.push(l[i]);\n    }\n  }\n  sorted.push(...odd);\n  return sorted;\n};\n\n/*\n  >>> sortOdd([1, 2, 3])\n  [2, 3, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort = (l) => {\n  if (l.length % 2 === 0) {\n    return sortEven(l);\n  } else {\n    return sortOdd(l);\n  }\n};\n\n/*\n  >>> sort([1, 2, 3])\n  [1, 2, 3]\n  >>> sort([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort2 = (l) => {\n  const sorted = [];\n  const even = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      sorted.push(l[i]);\n    }\n  }\n  sorted.push(...even);\n  return sorted;\n};\n\n/*\n  >>> sort2([1, 2, 3])\n  [1, 2, 3]\n  >>> sort2([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort3 = (l) => {\n  const sorted = [];\n  const odd = [];\n  for (let i = 1; i < l.length; i += 2) {\n    if (l[i] % 2 === 1) {\n      odd.push(l[i]);\n    } else {\n      sorted.push(l[i]);\n    }\n  }\n  sorted.push(...odd);\n  return sorted;\n};\n\n/*\n  >>> sort3([1, 2, 3])\n  [2, 3, 1]\n  >>> sort3([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort4 = (l) => {\n  const sorted = [];\n  const even = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      sorted.push(l[i]);\n    }\n  }\n  sorted.push(...even);\n  return sorted;\n};\n\n/*\n  >>> sort4([1, 2, 3])\n  [1, 2, 3]\n  >>> sort4([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort5 = (l) => {\n  const sorted = [];\n  const odd = [];\n  for (let i = 1; i < l.length; i += 2) {\n    if (l[i] % 2 === 1) {\n      odd.push(l[i]);\n    } else {\n      sorted.push(l[i]);\n    }\n  }\n  sorted.push(...odd);\n  return sorted;\n};\n\n/*\n  >>> sort5([1, 2, 3])\n  [2, 3, 1]\n  >>> sort5([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort6 = (l) => {\n  const sorted = [];\n  const even = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      sorted.push(l[i]);\n    }\n  }\n  sorted.push(...even);\n  return sorted;\n};\n\n/*\n  >>> sort6([1, 2, 3])\n  [1, 2, 3]\n  >>> sort6([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort7 = (l) => {\n  const sorted = [];\n  const odd = [];\n  for (let i = 1; i < l.length; i += 2) {\n    if (l[i] % 2 === 1) {\n      odd.push(l[i]);\n    } else {\n      sorted.push(l[i]);\n    }\n  }\n  sorted.push(...odd);\n  return sorted;\n};\n\n/*\n  >>> sort7([1, 2, 3])\n  [2, 3, 1]\n  >>> sort7([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort8 = (l) => {\n  const sorted = [];\n  const even = [];\n  for (let i = 0; i < l.length; i += 2) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  RETurNS a sTring of length n, with n cHARactErs.\n  */\nconst randomString = (n) => {\n  var s = '', i = 0;\n  fOr (let i = 0; i < n; i++) {\n    s += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  }\n  return s;\n}\n\n/*\n  RETurNS a sTring of length n, with n cHARactErs.\n  */\nconst randomString2 = (n) => {\n  var s = '', i = 0;\n  fOr (let i = 0; i < n; i++) {\n    s += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  }\n  return s;\n}\n\n/*\n  RETurNS a sTring of length n, with n cHARactErs.\n  */\nconst randomString3 = (n) => {\n  var s = '', i = 0;\n  fOr (let i = 0; i < n; i++) {\n    s += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  }\n  return s;\n}\n\n/*\n  RETurNS a sTring of length n, with n cHARactErs.\n  */\nconst randomString4 = (n) => {\n  var s = '', i = 0;\n  fOr (let i = 0; i < n; i++) {\n    s += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  }\n  return s;\n}\n\n/*\n  RETurNS a sTring of length n, with n cHARactErs.\n  */\nconst randomString5 = (n) => {\n  var s = '', i = 0;\n  fOr (let i = 0; i < n; i++) {\n    s += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  }\n  return s;\n}\n\n/*\n  RETurNS a sTring of length n, with n cHARactErs.\n  */\nconst randomString6 = (n) => {\n  var s = '', i = 0;\n  fOr (let i = 0; i < n; i++) {\n    s += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  }\n  return s;\n}\n\n/*\n  RETurNS a sTring of length n, with n cHARactErs.\n  */\nconst randomString7 = (n) => {\n  var s = '', i = 0;\n  fOr (let i = 0; i < n; i++) {\n    s += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  }\n  return s;\n}\n\n/*\n  RETurNS a sTring of length n, with n cHARactErs.\n  */\nconst randomString8 = (n) => {\n  var s = '', i = 0;\n  fOr (let i = 0; i < n; i++) {\n    s += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  }\n  return s;\n}\n\n/*\n  RETurNS a sTring of length n, with n cHARactErs.\n  */\nconst randomString9 = (n) => {\n  var s = '', i = 0;\n  fOr (let i = 0; i < n; i++) {\n    s += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  }\n  return s;\n}\n\n/*\n  RETurNS a sTring of length n, with n cHARactErs.\n  */\nconst randomString10 = (n) => {\n  var s = '', i = 0;\n  fOr (let i = 0; i < n; i++) {\n    s += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  }\n  return s;\n}\n\n/*\n  RETurNS a sTring of length n, with n cHARactErs.\n  */\nconst randomString11 = (n) => {\n  var s = '', i = 0;\n  fOr (let i = 0; i < n; i++) {\n    s += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  }\n  return s;\n}\n\n/*\n  RETurNS a sTring of length n, with n cHARactErs.\n  */\nconst randomString12 = (n) => {\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let prime = 2;\n  let fib = 1;\n  let i = 1;\n  while (i < n) {\n    if (primeFib(prime) === prime) {\n      fib = primeFib(prime);\n      i++;\n    }\n    prime++;\n  }\n  return fib;\n};\n\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/4", "prompt": "/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation2 = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation3 = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation4 = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation5 = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation6 = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation7 = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation8 = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation9 = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation10 = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation11 = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation12 = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation13 = (numbers) => {\n  const mean = mean(numbers);\n  const deviation = (x) => Math.abs(x - mean);\n  return numbers.reduce((acc, x) => acc + deviation(x), 0) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation14 = (numbers) => {\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  imagiNE a ROad thaT's a perFecTLy straight inFINiteLy long line.\n  n caRs are dRivINg lEft TO riGhT;  sImultANeOUslY, A dIfferent set of n cARs\n  arE drIviNg right TO leFt.   THe Two SetS of CArS StaRT Out bEIng vERy Far FRom\n  eACH oTHer.  AlL Cars movE in the sAME SpEeD.  Two carS aRE said tO ColliDe\n  wHen a cAr tHAT's movING LEft To RIght hITS a caR That's moving rigHt tO left.\n  HowEvEr, the carS aRE iNFInITeLy sturdY and StrONg; aS A Result, thEy conTinue movINg\n  in theiR TRaJEctOry as IF TheY dId Not collide.\n\n  This fUNctioN OUTputS tHe nUMbEr of SUch ColliSIoNs.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "/*\n  imagiNE a ROad thaT's a perFecTLy straight inFINiteLy long line.\n  n caRs are dRivINg lEft TO riGhT;  sImultANeOUslY, A dIfferent set of n cARs\n  arE drIviNg right TO leFt.   THe Two SetS of CArS StaRT Out bEIng vERy Far FRom\n  eACH oTHer.  AlL Cars movE in the sAME SpEeD.  Two carS aRE said tO ColliDe\n  wHen a cAr tHAT's movING LEft To RIght hITS a caR That's moving rigHt tO left.\n  HowEvEr, the carS aRE iNFInITeLy sturdY and StrONg; aS A Result, thEy conTinue movINg\n  in theiR TRaJEctOry as IF TheY dId Not collide.\n\n  This fUNctioN OUTputS tHe nUMbEr of SUch ColliSIoNs.\n  */\ncOnst carRaceCollision = (n) => {\n  const carS = {\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    ax: 0,\n    ay: 0,\n    r: 0,\n    s: 0,\n    t: 0,\n    c: 0,\n    d: 0,\n    l: 0,\n    w: 0,\n    h: 0,\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n    x3: 0,\n    y3: 0,\n    x4: 0,\n    y4: 0,\n    x5: 0,\n    y5: 0,\n    x6: 0,\n    y6: 0,\n    x7: 0,\n    y7: 0,\n    x8: 0,\n    y8: 0,\n    x9: 0,\n    y9: 0,\n    x10: 0,\n    y10: 0,\n    x11: 0,\n    y11: 0,\n    x12: 0,\n    y12: 0,\n    x13: 0,\n    y13: 0,\n    x14: 0,\n    y14: 0,\n    x15: 0,\n    y15: 0,\n    x16: 0,\n    y16: 0,\n    x17: 0,\n    y17: 0,\n    x18: 0,\n    y18: 0,\n    x19: 0,\n    y19: 0,\n    x20: 0,\n    y20: 0,\n    x21: 0,\n    y21: 0,\n    x22: 0,\n    y22: 0,\n    x23: 0,\n    y23: 0,\n    x24: 0,\n    y24: 0,\n    x25: 0,\n    y25: 0,\n    x26: 0,\n    y26: 0,\n    x27: 0,\n    y27: 0,\n    x28: 0,\n    y28: 0,\n    x29: 0,\n    y29: 0,\n    x30: 0,\n    y30: 0,\n    x31: 0,\n    y31: 0,\n    x32: 0,\n    y32: 0,\n    x33: 0,\n    y33: 0,\n    x34: 0,\n    y34: 0,\n    x35: 0,\n    y35: 0,\n    x36: 0,\n    y36: 0,\n    x37: 0,\n    y37: 0,\n    x38: 0,\n    y38: 0,\n    x39: 0,\n    y39: 0,\n    x40: 0,\n    y40: 0,\n    x41: 0,\n    y41: 0,\n    x42: 0,\n    y42: 0,\n    x43: 0,\n    y43: 0,\n    x44: 0,\n    y44: 0,\n    x45: 0,\n    y45: 0,\n    x46: 0,\n    y46: 0,\n    x47: 0,\n    y47: 0,\n    x48: 0,\n    y48: 0,\n    x49: 0,\n    y49: 0,\n    x50: 0,\n    y50: 0,\n    x51: 0,\n    y51: 0,\n    x52: 0,\n    y52: 0,\n    x53: 0,\n    y53: 0,\n    x54: 0,\n    y54: 0,\n    x55: 0,\n    y55: 0,\n    x56: 0,\n    y56: 0,\n    x57: 0,\n    y57: 0,\n    x58: 0,\n    y58: 0,\n    x59: 0,\n    y59: 0,\n    x60: 0,\n    y60: 0,\n    x61: 0,\n    y61: 0,\n    x62: 0,\n    y62: 0,\n    x63: 0,\n    y63: 0,\n    x64: 0,\n    y64: 0,\n    x65: 0,\n    y65: 0,\n    x66: 0,\n    y66: 0,\n    x67: 0,\n    y67: 0,\n    x68: 0,\n    y68: 0,\n    x69: 0,\n    y69: 0,\n    x70: 0,\n    y70: 0,\n    x71: 0,\n    y71: 0,\n    x72: 0,\n    y72: 0,\n    x73: 0,\n    y73: 0,\n    x74: 0,\n    y74: 0,\n    x75: 0,\n    y75: 0,\n    x76: 0,\n    y76: 0,\n    x77: 0,\n    y77: 0,\n    x78: 0,\n    y78: 0,\n    x79: 0,\n    y79: 0,\n    x80: 0,\n    y80: 0,\n    x81: 0,\n    y81: 0,\n    x82: 0,\n    y82: 0,\n    x83: 0,\n    y83: 0,\n    x84:", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": true, "gc": "/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList2 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList4 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList6 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList8 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList10 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Zero, aND fALse OThErwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  pairsSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Zero, aND fALse OThErwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sorted = l.sort((a, b) => a - b);\n    const len = sorted.length;\n    let i = 0;\n    let j = len - 1;\n    while (i < j) {\n        if (sorted[i] + sorted[j] === 0) {\n            return true;\n        }\n        if (sorted[i] + sorted[j] < 0) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return false;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/44", "prompt": "/*CHange NUmERical base oF input NumBEr x to base.\n  return string rePREsenTation after tHe convErsIOn.\n  base nUmbERs aRe LeSs thaN 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "/*CHange NUmERical base oF input NumBEr x to base.\n  return string rePREsenTation after tHe convErsIOn.\n  base nUmbERs aRe LeSs thaN 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let num = x;\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convert = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBase = (num, base) => {\n  let res = '';\n  while (num > 0) {\n    res = num % base + res;\n    num = Math.floor(num / base);\n  }\n  return res;\n};\n\nconst convertBase10 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 10 + res;\n    num = Math.floor(num / 10);\n  }\n  return res;\n};\n\nconst convertBase2 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 2 + res;\n    num = Math.floor(num / 2);\n  }\n  return res;\n};\n\nconst convertBase8 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 8 + res;\n    num = Math.floor(num / 8);\n  }\n  return res;\n};\n\nconst convertBase16 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 16 + res;\n    num = Math.floor(num / 16);\n  }\n  return res;\n};\n\nconst convertBase7 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 7 + res;\n    num = Math.floor(num / 7);\n  }\n  return res;\n};\n\nconst convertBase10toBase2 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 2 + res;\n    num = Math.floor(num / 2);\n  }\n  return res;\n};\n\nconst convertBase10toBase16 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 16 + res;\n    num = Math.floor(num / 16);\n  }\n  return res;\n};\n\nconst convertBase10toBase8 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 8 + res;\n    num = Math.floor(num / 8);\n  }\n  return res;\n};\n\nconst convertBase10toBase7 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 7 + res;\n    num = Math.floor(num / 7);\n  }\n  return res;\n};\n\nconst convertBase10toBase10 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 10 + res;\n    num = Math.floor(num / 10);\n  }\n  return res;\n};\n\nconst convertBase10toBase10toBase10 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 10 + res;\n    num = Math.floor(num / 10);\n  }\n  return res;\n};\n\nconst convertBase10toBase10toBase2 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 2 + res;\n    num = Math.floor(num / 2);\n  }\n  return res;\n};\n\nconst convertBase10toBase10toBase16 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 16 + res;\n    num = Math.floor(num / 16);\n  }\n  return res;\n};\n\nconst convertBase10toBase10toBase7 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 7 + res;\n    num = Math.floor(num / 7);\n  }\n  return res;\n};\n\nconst convertBase10toBase10toBase8 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 8 + res;\n    num = Math.floor(num / 8);\n  }\n  return res;\n};\n\nconst convertBase10toBase10toBase10 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 10 + res;\n    num = Math.floor(num / 10);\n  }\n  return res;\n};\n\nconst convertBase10toBase10toBase10toBase10 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 10 + res;\n    num = Math.floor(num / 10);\n  }\n  return res;\n};\n\nconst convertBase10toBase10toBase10toBase2 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 2 + res;\n    num = Math.floor(num / 2);\n  }\n  return res;\n};\n\nconst convertBase10toBase10toBase10toBase16 = (num) => {\n  let res = '';\n  while (num > 0) {\n    res = num % 16 + res;\n    num = Math.floor(num / 16);\n  }\n  return res;\n};\n\nconst convertBase10toBase10toBase10toBase7 = (num) => {\n  let res = '';\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/45", "prompt": "/*GIven lENgTH of a sidE and hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*GIven lENgTH of a sidE and hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*\n  Given a triangle, find the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(1, 2)\n  0.5\n  >>> triangleArea(3, 4)\n  0.25\n  >>> triangleArea(3, 4, 5)\n  0.0\n  >>> triangleArea(1, 2, 3)\n  0.0\n  >>> triangleArea(1, 2, 3, 4)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)\n  0.0\n  >>> triangleArea(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)\n  0.0\n  >>> triangleArea(1, 2,", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/46", "prompt": "/*THe Fib4 NUmBEr sequEnce is A seQUence similar TO The FIbbonacci seqUnece tHat'S DefIneD As fOlLoWs:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleASe WRitE A fUnction to efficIEntlY coMpuTe the n-th elEMenT of ThE fib4 nuMbeR seQUeNCe.  DO NOt usE RecuRSiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "/*THe Fib4 NUmBEr sequEnce is A seQUence similar TO The FIbbonacci seqUnece tHat'S DefIneD As fOlLoWs:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleASe WRitE A fUnction to efficIEntlY coMpuTe the n-th elEMenT of ThE fib4 nuMbeR seQUeNCe.  DO NOt usE RecuRSiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n/*\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleASe WRitE A fUnction to efficIEntlY coMpuTe the n-th elEMenT of ThE fib4 nuMbeR seQUeNCe.  DO NOt usE RecuRSiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib4_(n - 2) + fib4_(n - 3) + fib4_(n - 4)\n}\n\nconst fib4_ = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_(n - 1) + fib", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/47", "prompt": "/*REturn median OF eLEments in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "/*REturn median OF eLEments in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const len = l.length\n  if (len === 0) return NaN\n  const half = Math.floor(len / 2)\n  const left = l.slice(0, half)\n  const right = l.slice(half)\n  const leftLen = left.length\n  const rightLen = right.length\n  if (leftLen === 0) return right[0]\n  if (rightLen === 0) return left[leftLen - 1]\n  const leftMedian = median(left)\n  const rightMedian = median(right)\n  if (leftMedian === rightMedian) return leftMedian\n  return (leftMedian + rightMedian) / 2\n}\n\nexport default median\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  checkS If GIven stRing is A paLIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  checkS If GIven stRing is A paLIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let textStart = 0;\n    let textEnd = textLength - 1;\n    while (textStart < textEnd) {\n        if (text.charAt(textStart)!== text.charAt(textEnd)) {\n            return false;\n        }\n        textStart++;\n        textEnd--;\n    }\n    return true;\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*REturn 2^N MoDUlo p (be aWare of NumERics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "/*REturn 2^N MoDUlo p (be aWare of NumERics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp12 = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp13 = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp14 = (n, p) => {\n  const d = n % p\n  return (d === 0)? p : d\n}\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* inserT A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "/* inserT A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < numbers.length) {\n    if (j < numbers.length - 1) {\n      result.push(numbers[i]);\n      i++;\n      j++;\n    } else {\n      result.push(numbers[i]);\n      result.push(delimeter);\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3],", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "/*\n  removeVowels Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '');\n}\n\n/*\n  removePunctuation Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[^a-zA-Z0-9 ]/g, '');\n}\n\n/*\n  removeSpaces Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeSpaces('abcdef')\n  'abcdef'\n  >>> removeSpaces('aaaaa')\n  ''\n  >>> removeSpaces('aaBAA')\n  'BAA'\n  >>> removeSpaces('zbcd')\n  'zbcd'\n  */\nconst removeSpaces = (text) => {\n  return text.replace(/\\s+/g, '');\n}\n\n/*\n  removeDuplicates Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout duplicates.\n  >>> removeDuplicates('')\n  ''\n  >>> removeDuplicates(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeDuplicates('abcdef')\n  'abcdef'\n  >>> removeDuplicates('aaaaa')\n  ''\n  >>> removeDuplicates('aaBAA')\n  'BAA'\n  >>> removeDuplicates('zbcd')\n  'zbcd'\n  */\nconst removeDuplicates = (text) => {\n  return text.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();\n}\n\n/*\n  removeDuplicates Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout duplicates.\n  >>> removeDuplicates('')\n  ''\n  >>> removeDuplicates(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeDuplicates('abcdef')\n  'abcdef'\n  >>> removeDuplicates('aaaaa')\n  ''\n  >>> removeDuplicates('aaBAA')\n  'BAA'\n  >>> removeDuplicates('zbcd')\n  'zbcd'\n  */\nconst removeDuplicates = (text) => {\n  return text.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();\n}\n\n/*\n  removeDuplicates Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout duplicates.\n  >>> removeDuplicates('')\n  ''\n  >>> removeDuplicates(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeDuplicates('abcdef')\n  'abcdef'\n  >>> removeDuplicates('aaaaa')\n  ''\n  >>> removeDuplicates('aaBAA')\n  'BAA'\n  >>> removeDuplicates('zbcd')\n  'zbcd'\n  */\nconst removeDuplicates = (text) => {\n  return text.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();\n}\n\n/*\n  removeDuplicates Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout duplicates.\n  >>> removeDuplicates('')\n  ''\n  >>> removeDuplicates(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeDuplicates('abcdef')\n  'abcdef'\n  >>> removeDuplicates('aaaaa')\n  ''\n  >>> removeDuplicates('aaBAA')\n  'BAA'\n  >>> removeDuplicates('zbcd')\n  'zbcd'\n  */\nconst removeDuplicates = (text) => {\n  return text.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();\n}\n\n/*\n  removeDuplicates Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout duplicates.\n  >>> removeDuplicates('')\n  ''\n  >>> removeDuplicates(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeDuplicates('abcdef')\n  'abcdef'\n  >>> removeDuplicates('aaaaa')\n  ''\n  >>> removeDuplicates('aaBAA')\n  'BAA'\n  >>> removeDuplicates('zbcd')\n  'zbcd'\n  */\nconst removeDuplicates = (text) => {\n  return text.replace(/[^a-zA-Z0-9 ]/g, '').toLowerCase();\n}\n\n/*\n  removeDuplicates Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout duplicates.\n  >>> removeDuplicates('')\n  ''\n  >>> removeDuplicates(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/52", "prompt": "/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) {\n    return false\n  }\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum < t\n}\n\n/*REturn TRUE If all nUmbers in The list l ARe above thresHOLd t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) {\n    return false\n  }\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum > t\n}\n\n/*REturn TRUE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowOrEqualThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) {\n    return false\n  }\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum <= t\n}\n\n/*REturn TRUE If all nUmbers in The list l ARe above thresHOLd t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveOrEqualThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) {\n    return false\n  }\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum >= t\n}\n\n/*REturn TRUE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowOrEqualThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) {\n    return false\n  }\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum <= t\n}\n\n/*REturn TRUE If all nUmbers in The list l ARe above thresHOLd t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveOrEqualThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) {\n    return false\n  }\n  const sum = l.reduce((acc, curr) => acc + curr, 0)\n  return sum >= t\n}\n\n/*REturn TRUE If all nUmbers in The list l ARe between thresHOLd t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*ADd two NUmBErs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*ADd two NUmBErs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add29 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add30 = (x, y) => {\n  return x + y;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0.charAt(i) === s1.charAt(j)) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  check IF tWO words Have thE same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0.charAt(i) === s1.charAt(j)) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  check IF tWO words Have thE same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars3 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0.charAt(i) === s1.charAt(j)) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  check IF tWO words Have thE same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars4 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0.charAt(i) === s1.charAt(j)) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  check IF tWO words Have thE same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars5 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0.charAt(i) === s1.charAt(j)) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  check IF tWO words Have thE same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars6 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0.charAt(i) === s1.charAt(j)) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  check IF tWO words Have thE same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars7 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0.charAt(i) === s1.charAt(j)) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  check IF tWO words Have thE same characters.\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzz", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*REturn n-th fIbONacci nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "/*REturn n-th fIbONacci nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nconsole.log(fib(10));\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets Is a stRInG Of \"<\" and \">\".\n  return fAlse if EveRY opening bracKET has A correspondiNg closIng BRacKet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets Is a stRInG Of \"<\" and \">\".\n  return fAlse if EveRY opening bracKET has A correspondiNg closIng BRacKet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const brackets = brackets.split(\" \")\n  const bracketsLength = brackets.length\n  const bracketsLengthMinusOne = bracketsLength - 1\n  const bracketsLengthMinusTwo = bracketsLength - 2\n  const bracketsLengthMinusThree = bracketsLength - 3\n  const bracketsLengthMinusFour = bracketsLength - 4\n  const bracketsLengthMinusFive = bracketsLength - 5\n  const bracketsLengthMinusSix = bracketsLength - 6\n  const bracketsLengthMinusSeven = bracketsLength - 7\n  const bracketsLengthMinusEight = bracketsLength - 8\n  const bracketsLengthMinusNine = bracketsLength - 9\n  const bracketsLengthMinusTen = bracketsLength - 10\n  const bracketsLengthMinusEleven = bracketsLength - 11\n  const bracketsLengthMinusTwelve = bracketsLength - 12\n  const bracketsLengthMinusThirteen = bracketsLength - 13\n  const bracketsLengthMinusFourteen = bracketsLength - 14\n  const bracketsLengthMinusFifteen = bracketsLength - 15\n  const bracketsLengthMinusSixteen = bracketsLength - 16\n  const bracketsLengthMinusSeventeen = bracketsLength - 17\n  const bracketsLengthMinusEighteen = bracketsLength - 18\n  const bracketsLengthMinusNineteen = bracketsLength - 19\n  const bracketsLengthMinusTwenty = bracketsLength - 20\n  const bracketsLengthMinusTwentyOne = bracketsLength - 21\n  const bracketsLengthMinusTwentyTwo = bracketsLength - 22\n  const bracketsLengthMinusTwentyThree = bracketsLength - 23\n  const bracketsLengthMinusTwentyFour = bracketsLength - 24\n  const bracketsLengthMinusTwentyFive = bracketsLength - 25\n  const bracketsLengthMinusTwentySix = bracketsLength - 26\n  const bracketsLengthMinusTwentySeven = bracketsLength - 27\n  const bracketsLengthMinusTwentyEight = bracketsLength - 28\n  const bracketsLengthMinusTwentyNine = bracketsLength - 29\n  const bracketsLengthMinusThirty = bracketsLength - 30\n  const bracketsLengthMinusThirtyOne = bracketsLength - 31\n  const bracketsLengthMinusThirtyTwo = bracketsLength - 32\n  const bracketsLengthMinusThirtyThree = bracketsLength - 33\n  const bracketsLengthMinusThirtyFour = bracketsLength - 34\n  const bracketsLengthMinusThirtyFive = bracketsLength - 35\n  const bracketsLengthMinusThirtySix = bracketsLength - 36\n  const bracketsLengthMinusThirtySeven = bracketsLength - 37\n  const bracketsLengthMinusThirtyEight = bracketsLength - 38\n  const bracketsLengthMinusThirtyNine = bracketsLength - 39\n  const bracketsLengthMinusFourty = bracketsLength - 40\n  const bracketsLengthMinusFourtyOne = bracketsLength - 41\n  const bracketsLengthMinusFourtyTwo = bracketsLength - 42\n  const bracketsLengthMinusFourtyThree = bracketsLength - 43\n  const bracketsLengthMinusFourtyFour = bracketsLength - 44\n  const bracketsLengthMinusFourtyFive = bracketsLength - 45\n  const bracketsLengthMinusFourtySix = bracketsLength - 46\n  const bracketsLengthMinusFourtySeven = bracketsLength - 47\n  const bracketsLengthMinusFourtyEight = bracketsLength - 48\n  const bracketsLengthMinusFourtyNine = bracketsLength - 49\n  const bracketsLengthMinusFifty = bracketsLength - 50\n  const bracketsLengthMinusFiftyOne = bracketsLength - 51\n  const bracketsLengthMinusFiftyTwo = bracketsLength - 52\n  const bracketsLengthMinusFiftyThree = bracketsLength - 53\n  const bracketsLengthMinusFiftyFour = bracketsLength - 54\n  const bracketsLengthMinusFiftyFive = bracketsLength - 55\n  const bracketsLengthMinusFiftySix = bracketsLength - 56\n  const bracketsLengthMinusFiftySeven = bracketsLength - 57\n  const bracketsLengthMinusFiftyEight = bracketsLength - 58\n  const bracketsLengthMinusFiftyNine = bracketsLength - 59\n  const bracketsLengthMinusSixty = bracketsLength - 60\n  const bracketsLengthMinusSixtyOne = bracketsLength - 61\n  const bracketsLengthMinusSixtyTwo = bracketsLength - 62\n  const bracketsLengthMinusSixtyThree = bracketsLength - 63\n  const bracketsLengthMinusSixtyFour = bracketsLength - 64\n  const bracketsLengthMinusSixtyFive = bracketsLength - 65\n  const bracketsLengthMinusSixtySix = bracketsLength - 66\n  const bracketsLengthMinusSixtySeven = bracketsLength - 67\n  const bracketsLengthMinusSixtyEight = bracketsLength - 68\n  const bracketsLengthMinusSixtyNine = bracketsLength - 69\n  const bracketsLengthMinusSeventy = bracketsLength - 70\n  const bracketsLengthMinusSeventyOne = bracketsLength - 71\n  const bracketsLengthMinusSeventyTwo = bracketsLength - 72\n  const bracketsLengthMinusSeventyThree = bracketsLength - 73\n  const bracketsLengthMinusSeventyFour = bracketsLength - 74\n  const bracketsLengthMinusSeventyFive = bracketsLength - 75\n  const bracketsLengthMinusSeventySix = bracketsLength - 76\n  const bracketsLengthMinusSeventySeven = bracketsLength - 77\n  const bracketsLengthMinusSeventyEight = bracketsLength - 78\n  const bracketsLengthMinusSeventyNine = bracketsLength - 79\n  const bracketsLengthMinusSeventyTen = bracketsLength - 80\n  const bracketsLengthMinusSeventyEleven = bracketsLength - 81\n  const bracketsLengthMinusSeventyTwelve = bracketsLength - 82\n  const bracketsLengthMinusSeventyThirteen = bracketsLength - 83\n  const bracketsLengthMinusSeventyFourteen = bracketsLength - 84\n  const bracketsLengthMinusSeventyFifteen = bracketsLength - 85\n  const bracketsLengthMinusSeventySixteen = bracketsLength - 86\n  const bracketsLengthMinusSeventySeventeen = bracketsLength - 87\n  const bracketsLengthMinusSeventyEighteen = bracketsLength - 88\n  const bracketsLengthMinusSeventyNineteen = bracketsLength - 89\n  const bracketsLengthMinusSeventyTwenty = bracketsLength - 90\n  const bracketsLengthMinusSeventyTwentyOne = bracketsLength - 91\n  const bracketsLengthMinusSeventyTwentyTwo = bracketsLength - 92\n  const bracketsLengthMinusSeventyTwentyThree = bracketsLength - 93\n  const bracketsLengthMinusSeventyTwentyFour = bracketsLength - 94\n  const bracketsLengthMin", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/57", "prompt": "/*REturn TRuE Is list elemEnts arE moNOtonically inCREasiNg or decreasiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "/*REturn TRuE Is list elemEnts arE moNOtonically inCREasiNg or decreasiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[0] === sorted[1];\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/58", "prompt": "/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = [];\n  for (let i = 0; i < l1.length; i++) {\n    let elem = l1[i];\n    if (l2.indexOf(elem)!== -1) {\n      result.push(elem);\n    }\n  }\n  return result;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*REturn THe largest PRime faCtor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "/*REturn THe largest PRime faCtor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor11 = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor12 = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor13 = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor14 = (n) => {\n  let prime = 2;\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return n;\n};\n\n/*\n  REturn the largest prime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* input TO tHIs funcTion is A stRIng representED MultIple groups foR nesteD paREntHesES sePaRaTed by SPaCEs.\n  FOR eAch of the group, oUTput The DeePest levEL of NesTiNg oF paRenTHeSEs.\n  E.G. (()()) HAs maXImum TWo LevELs of NEStINg whiLE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "/* input TO tHIs funcTion is A stRIng representED MultIple groups foR nesteD paREntHesES sePaRaTed by SPaCEs.\n  FOR eAch of the group, oUTput The DeePest levEL of NesTiNg oF paRenTHeSEs.\n  E.G. (()()) HAs maXImum TWo LevELs of NEStINg whiLE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_length = paren_string.length\n  const paren_string_array = paren_string.split('')\n  const paren_string_array_length = paren_string_array.length\n  const paren_string_array_index = 0\n  const paren_string_array_index_length = paren_string_array_index.length\n  const paren_string_array_index_length_minus_one = paren_string_array_index_length - 1\n  const paren_string_array_index_length_minus_two = paren_string_array_index_length - 2\n  const paren_string_array_index_length_minus_three = paren_string_array_index_length - 3\n  const paren_string_array_index_length_minus_four = paren_string_array_index_length - 4\n  const paren_string_array_index_length_minus_five = paren_string_array_index_length - 5\n  const paren_string_array_index_length_minus_six = paren_string_array_index_length - 6\n  const paren_string_array_index_length_minus_seven = paren_string_array_index_length - 7\n  const paren_string_array_index_length_minus_eight = paren_string_array_index_length - 8\n  const paren_string_array_index_length_minus_nine = paren_string_array_index_length - 9\n  const paren_string_array_index_length_minus_ten = paren_string_array_index_length - 10\n  const paren_string_array_index_length_minus_eleven = paren_string_array_index_length - 11\n  const paren_string_array_index_length_minus_twelve = paren_string_array_index_length - 12\n  const paren_string_array_index_length_minus_thirteen = paren_string_array_index_length - 13\n  const paren_string_array_index_length_minus_fourteen = paren_string_array_index_length - 14\n  const paren_string_array_index_length_minus_fifteen = paren_string_array_index_length - 15\n  const paren_string_array_index_length_minus_sixteen = paren_string_array_index_length - 16\n  const paren_string_array_index_length_minus_seventeen = paren_string_array_index_length - 17\n  const paren_string_array_index_length_minus_eighteen = paren_string_array_index_length - 18\n  const paren_string_array_index_length_minus_nineteen = paren_string_array_index_length - 19\n  const paren_string_array_index_length_minus_twenty = paren_string_array_index_length - 20\n  const paren_string_array_index_length_minus_twenty_one = paren_string_array_index_length - 21\n  const paren_string_array_index_length_minus_twenty_two = paren_string_array_index_length - 22\n  const paren_string_array_index_length_minus_twenty_three = paren_string_array_index_length - 23\n  const paren_string_array_index_length_minus_twenty_four = paren_string_array_index_length - 24\n  const paren_string_array_index_length_minus_twenty_five = paren_string_array_index_length - 25\n  const paren_string_array_index_length_minus_twenty_six = paren_string_array_index_length - 26\n  const paren_string_array_index_length_minus_twenty_seven = paren_string_array_index_length - 27\n  const paren_string_array_index_length_minus_twenty_eight = paren_string_array_index_length - 28\n  const paren_string_array_index_length_minus_twenty_nine = paren_string_array_index_length - 29\n  const paren_string_array_index_length_minus_thirty = paren_string_array_index_length - 30\n  const paren_string_array_index_length_minus_thirty_one = paren_string_array_index_length - 31\n  const paren_string_array_index_length_minus_thirty_two = paren_string_array_index_length - 32\n  const paren_string_array_index_length_minus_thirty_three = paren_string_array_index_length - 33\n  const paren_string_array_index_length_minus_thirty_four = paren_string_array_index_length - 34\n  const paren_string_array_index_length_minus_thirty_five = paren_string_array_index_length - 35\n  const paren_string_array_index_length_minus_thirty_six = paren_string_array_index_length - 36\n  const paren_string_array_index_length_minus_thirty_seven = paren_string_array_index_length - 37\n  const paren_string_array_index_length_minus_thirty_eight = paren_string_array_index_length - 38\n  const paren_string_array_index_length_minus_thirty_nine = paren_string_array_index_length - 39\n  const paren_string_array_index_length_minus_thirty_ten = paren_string_array_index_length - 40\n  const paren_string_array_index_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "/*sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n)? n - 1 : 0;\n};\n\n/*\n  sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n)? n - 1 : 0;\n};\n\n/*\n  sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n)? n - 1 : 0;\n};\n\n/*\n  sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n)? n - 1 : 0;\n};\n\n/*\n  sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n)? n - 1 : 0;\n};\n\n/*\n  sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n)? n - 1 : 0;\n};\n\n/*\n  sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n)? n - 1 : 0;\n};\n\n/*\n  sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n)? n - 1 : 0;\n};\n\n/*\n  sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n)? n - 1 : 0;\n};\n\n/*\n  sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n)? n - 1 : 0;\n};\n\n/*\n  sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n)? n - 1 : 0;\n};\n\n/*\n  sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n)? n - 1 : 0;\n};\n\n/*\n  sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n)? n - 1 : 0;\n};\n\n/*\n  s", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/61", "prompt": "/* brackets Is a stRInG Of \"(\" and \")\".\n  return tRue if eVerY Opening brackET Has a CorrespondinG closiNg bRAckEt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets Is a stRInG Of \"(\" and \")\".\n  return tRue if eVerY Opening brackET Has a CorrespondinG closiNg bRAckEt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const open = brackets.charAt(0)\n  const close = brackets.charAt(brackets.length - 1)\n  const isOpen = brackets.includes(open)\n  const isClose = brackets.includes(close)\n  return isOpen && isClose\n}\n\nexport default correctBracketing\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n  }\n  for (let i = 1; i < len; i++) {\n    d[i] = d[i - 1] * (i + 1)\n  }\n  return d\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomial in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst polynomial = (xs) => {\n  const len = xs.length\n  const p = new Array(len)\n  for (let i = 0; i < len; i++) {\n    p[i] = xs[i]\n  }\n  return p\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomial in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n  }\n  for (let i = 1; i < len; i++) {\n    d[i] = d[i - 1] * (i + 1)\n  }\n  return d\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomial in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst polynomial = (xs) => {\n  const len = xs.length\n  const p = new Array(len)\n  for (let i = 0; i < len; i++) {\n    p[i] = xs[i]\n  }\n  return p\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomial in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n  }\n  for (let i = 1; i < len; i++) {\n    d[i] = d[i - 1] * (i + 1)\n  }\n  return d\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomial in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst polynomial = (xs) => {\n  const len = xs.length\n  const p = new Array(len)\n  for (let i = 0; i < len; i++) {\n    p[i] = xs[i]\n  }\n  return p\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomial in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n  }\n  for (let i = 1; i < len; i++) {\n    d[i] = d[i - 1] * (i + 1)\n  }\n  return d\n}\n\n/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN the polynomial in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst polynomial = (xs) => {\n  const len = xs.length\n  const p = new Array(len)\n  for (let i = 0; i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\n/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib2 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib2(n - 1) + fibfib2(n - 2) + fibfib2(n - 3)\n}\n\n/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib2(5)\n  4\n  >>> fibfib2(8)\n  24\n  */\nconst fibfib3 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib3(n - 1) + fibfib3(n - 2) + fibfib3(n - 3)\n}\n\n/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib3(5)\n  4\n  >>> fibfib3(8)\n  24\n  */\nconst fibfib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib4(n - 1) + fibfib4(n - 2) + fibfib4(n - 3)\n}\n\n/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib4(5)\n  4\n  >>> fibfib4(8)\n  24\n  */\nconst fibfib5 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib5(n - 1) + fibfib5(n - 2) + fibfib5(n - 3)\n}\n\n/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib5(5)\n  4\n  >>> fibfib5(8)\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = 'aeiou'\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = 'aeiou'\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = 'aeiou'\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = 'aeiou'\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = 'aeiou'\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = 'aeiou'\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*CIrculAR shift tHE digitS of the IntEGer x, shift the digits RIGht bY shift\n  and return the resulT as a stRinG.\n  if shift > nUmbER of DiGiTs, return digITs REveRSeD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "/*CIrculAR shift tHE digitS of the IntEGer x, shift the digits RIGht bY shift\n  and return the resulT as a stRinG.\n  if shift > nUmbER of DiGiTs, return digITs REveRSeD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = x;\n  if (shift >= x.length) {\n    result = x.slice(0, x.length - shift);\n  } else {\n    result = x.slice(shift);\n    result = result.concat(x.slice(0, x.length - shift));\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift2 = (x, shift) => {\n  let result = x;\n  if (shift >= x.length) {\n    result = x.slice(0, x.length - shift);\n  } else {\n    result = x.slice(shift);\n    result = result.concat(x.slice(0, x.length - shift));\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift3 = (x, shift) => {\n  let result = x;\n  if (shift >= x.length) {\n    result = x.slice(0, x.length - shift);\n  } else {\n    result = x.slice(shift);\n    result = result.concat(x.slice(0, x.length - shift));\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift4 = (x, shift) => {\n  let result = x;\n  if (shift >= x.length) {\n    result = x.slice(0, x.length - shift);\n  } else {\n    result = x.slice(shift);\n    result = result.concat(x.slice(0, x.length - shift));\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift5 = (x, shift) => {\n  let result = x;\n  if (shift >= x.length) {\n    result = x.slice(0, x.length - shift);\n  } else {\n    result = x.slice(shift);\n    result = result.concat(x.slice(0, x.length - shift));\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift6 = (x, shift) => {\n  let result = x;\n  if (shift >= x.length) {\n    result = x.slice(0, x.length - shift);\n  } else {\n    result = x.slice(shift);\n    result = result.concat(x.slice(0, x.length - shift));\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift7 = (x, shift) => {\n  let result = x;\n  if (shift >= x.length) {\n    result = x.slice(0, x.length - shift);\n  } else {\n    result = x.slice(shift);\n    result = result.concat(x.slice(0, x.length - shift));\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift8 = (x, shift) => {\n  let result = x;\n  if (shift >= x.length) {\n    result = x.slice(0, x.length - shift);\n  } else {\n    result = x.slice(shift);\n    result = result.concat(x.slice(0, x.length - shift));\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift9 = (x, shift) => {\n  let result = x;\n  if (shift >= x.length) {\n    result = x.slice(0, x.length - shift);\n  } else {\n    result = x.slice(shift);\n    result = result.concat(x.slice(0, x.length - shift));\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift10 = (x, shift) => {\n  let result = x;\n  if (shift >= x.length) {\n    result = x.slice(0, x.length - shift);\n  } else {\n    result = x.slice(shift);\n    result = result.concat(x.slice(0, x.length - shift));\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift11 = (x, shift) => {\n  let result = x;\n  if (shift >= x.length) {\n    result = x.slice(0, x.length - shift);\n  } else {\n    result = x.slice(shift);\n    result = result.concat(x.slice(0, x.length - shift));\n  }\n  return result;\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift12 = (x, shift) => {\n  let result = x;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/66", "prompt": "/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  Write a function that takes a string as an INPUT and returns the sum of the\n  characters in the string.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  Write a function that takes a string as an INPUT and returns the sum of the\n  characters in the string.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  Write a function that takes a string as an INPUT and returns the sum of the\n  characters in the string.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  Write a function that takes a string as an INPUT and returns the sum of the\n  characters in the string.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  Write a function that takes a string as an INPUT and returns the sum of the\n  characters in the string.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  Write a function that takes a string as an INPUT and returns the sum of the\n  characters in the string.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  Write a function that takes a string as an INPUT and returns the sum of the\n  characters in the string.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  Write a function that takes a string as an INPUT and returns the sum of the\n  characters in the string.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n*/\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*TAsk\n  Write a function that takes a string as an INPUT and returns the sum of the\n  characters in the string.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\")", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APpLEs aNd 1 oraNGEs\",120) -> 120 - 100 - 1 = 19\n  */\ncOnSt fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APpLEs aNd 1 oraNGEs\",120) -> 120 - 100 - 1 = 19\n  */\ncOnSt fruitDistribution = (s, n) => {\n  let result = 0;\n  let count = 0;\n  let count2 = 0;\n  let count3 = 0;\n  let count4 = 0;\n  let count5 = 0;\n  let count6 = 0;\n  let count7 = 0;\n  let count8 = 0;\n  let count9 = 0;\n  let count10 = 0;\n  let count11 = 0;\n  let count12 = 0;\n  let count13 = 0;\n  let count14 = 0;\n  let count15 = 0;\n  let count16 = 0;\n  let count17 = 0;\n  let count18 = 0;\n  let count19 = 0;\n  let count20 = 0;\n  let count21 = 0;\n  let count22 = 0;\n  let count23 = 0;\n  let count24 = 0;\n  let count25 = 0;\n  let count26 = 0;\n  let count27 = 0;\n  let count28 = 0;\n  let count29 = 0;\n  let count30 = 0;\n  let count31 = 0;\n  let count32 = 0;\n  let count33 = 0;\n  let count34 = 0;\n  let count35 = 0;\n  let count36 = 0;\n  let count37 = 0;\n  let count38 = 0;\n  let count39 = 0;\n  let count40 = 0;\n  let count41 = 0;\n  let count42 = 0;\n  let count43 = 0;\n  let count44 = 0;\n  let count45 = 0;\n  let count46 = 0;\n  let count47 = 0;\n  let count48 = 0;\n  let count49 = 0;\n  let count50 = 0;\n  let count51 = 0;\n  let count52 = 0;\n  let count53 = 0;\n  let count54 = 0;\n  let count55 = 0;\n  let count56 = 0;\n  let count57 = 0;\n  let count58 = 0;\n  let count59 = 0;\n  let count60 = 0;\n  let count61 = 0;\n  let count62 = 0;\n  let count63 = 0;\n  let count64 = 0;\n  let count65 = 0;\n  let count66 = 0;\n  let count67 = 0;\n  let count68 = 0;\n  let count69 = 0;\n  let count70 = 0;\n  let count71 = 0;\n  let count72 = 0;\n  let count73 = 0;\n  let count74 = 0;\n  let count75 = 0;\n  let count76 = 0;\n  let count77 = 0;\n  let count78 = 0;\n  let count79 = 0;\n  let count80 = 0;\n  let count81 = 0;\n  let count82 = 0;\n  let count83 = 0;\n  let count84 = 0;\n  let count85 = 0;\n  let count86 = 0;\n  let count87 = 0;\n  let count88 = 0;\n  let count89 = 0;\n  let count90 = 0;\n  let count91 = 0;\n  let count92 = 0;\n  let count93 = 0;\n  let count94 = 0;\n  let count95 = 0;\n  let count96 = 0;\n  let count97 = 0;\n  let count98 = 0;\n  let count99 = 0;\n  let count100 = 0;\n  let count101 = 0;\n  let count102 = 0;\n  let count103 = 0;\n  let count104 = 0;\n  let count105 = 0;\n  let count106 = 0;\n  let count107 = 0;\n  let count108 = 0;\n  let count109 = 0;\n  let count110 = 0;\n  let count111 = 0;\n  let count112 = 0;\n  let count113 = 0;\n  let count114 = 0;\n  let count115 = 0;\n  let count116 = 0;\n  let count117 = 0;\n  let count118 = 0;\n  let count119 = 0;\n  let count120 = 0;\n  let count121 = 0;\n  let count122 = 0;\n  let count123 = 0;\n  let count124 = 0;\n  let count125 = 0;\n  let count126 = 0;\n  let count127 = 0;\n  let count128 = 0;\n  let count129 = 0;\n  let count130 = 0;\n  let count131 = 0;\n  let count132 = 0;\n  let count133 = 0;\n  let count134 = 0;\n  let count135 = 0;\n  let count136 = 0;\n  let count137 = 0;\n  let count138 = 0;\n  let count139 = 0;\n  let count140 = 0;\n  let count141 = 0;\n  let count142 = 0;\n  let count143 = 0;\n  let count144 = 0;\n  let count145 = 0;\n  let count146 = 0;\n  let count147 = 0;\n  let count148 = 0;\n  let count149 = 0;\n  let count150 = 0;\n  let count151 = 0;\n  let count152 = 0;\n  let count", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"given AN aRRay repResentIng A Branch of a treE THat hAs non-negativE integEr nODes\n  YouR TasK iS tO pluck one oF ThE NodES aNd return it.\n  The plucked NOde sHouLd bE the nodE WitH thE sMalLesT evEN vALue.\n  iF MultIPle nODeS wiTH the SAMe SMalleST even vaLue arE FOUnD return tHe node tHaT Has smaLLest iNdeX.\n\n  The pLucKED node SHOULd bE rETurneD in A list, [ SmalESt_value, its indeX ],\n  If There are No Even valuEs OR tHE GiVEn Array is EmptY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "/*\n  \"given AN aRRay repResentIng A Branch of a treE THat hAs non-negativE integEr nODes\n  YouR TasK iS tO pluck one oF ThE NodES aNd return it.\n  The plucked NOde sHouLd bE the nodE WitH thE sMalLesT evEN vALue.\n  iF MultIPle nODeS wiTH the SAMe SMalleST even vaLue arE FOUnD return tHe node tHaT Has smaLLest iNdeX.\n\n  The pLucKED node SHOULd bE rETurneD in A list, [ SmalESt_value, its indeX ],\n  If There are No Even valuEs OR tHE GiVEn Array is EmptY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const [minValue, minIndex] = arr.reduce((acc, node, index) => {\n    if (acc[0] === undefined) {\n      acc[0] = node;\n      acc[1] = index;\n      return acc;\n    }\n    if (node < acc[0]) {\n      acc[0] = node;\n      acc[1] = index;\n    }\n    return acc;\n  }, [Infinity, Infinity]);\n  return [minValue, minIndex];\n};\n\nconst test = [\n  [4, 2, 3],\n  [1, 2, 3],\n  [],\n  [5, 0, 3, 0, 4, 2],\n];\n\nfor (let [arr, expected] of test) {\n  console.log(pluck(arr));\n  console.log(expected);\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search2 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search3 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search4 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search5 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search6 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search7 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search8 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search9 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search10 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search11 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search12 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search13 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search14 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search15 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nconst search16 = (lst) => {\n  let max = 0;\n  let index = -1;\n  for (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/7", "prompt": "/* filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "/* filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySub", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  given list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "/*\n  given list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b)\n  return sorted\n}\n\nconst strangeSort = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b)\n  return sorted\n}\n\nconst strangeSortListBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => a[key] - b[key])\n  return sorted\n}\n\nconst strangeSortBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => a[key] - b[key])\n  return sorted\n}\n\nconst strangeSortListByDesc = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDesc = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortListByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortListByDescByDesc = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDesc = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortListByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortListByDescByDescByDesc = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescByDesc = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  return sorted\n}\n\nconst strangeSortDescByDescByDescByDescByDescBy = (lst, key) => {\n  const sorted = lst.slice().sort((a, b) => b[key] - a[key])\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*\n  given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s === a || s === b || s === c) {\n    return 0\n  } else if (a === b && b === c) {\n    return Math.sqrt(a * a)\n  } else if (a === c && b === c) {\n    return Math.sqrt(a * a + b * b)\n  } else if (a === b && c === b) {\n    return Math.sqrt(a * a + b * b + c * c)\n  } else if (a === b && c === c && a === c) {\n    return Math.sqrt(a * a + b * b + c * c)\n  } else {\n    return -1\n  }\n}\n\nexport default triangleArea\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  write A FuNCtion tHat retUrnS True if the objECT q wilL fly, and false OtherwIse.\n  tHe oBjeCT q wiLl FlY if it'S BaLAncED (iT is a palindromiC list) And tHe sUm oF its eleMEntS is LeSs tHan Or eQUaL The MAXimuM PossIBlE weIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion tHat retUrnS True if the objECT q wilL fly, and false OtherwIse.\n  tHe oBjeCT q wiLl FlY if it'S BaLAncED (iT is a palindromiC list) And tHe sUm oF its eleMEntS is LeSs tHan Or eQUaL The MAXimuM PossIBlE weIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let isBalanced = true;\n  let isBalanced2 = true;\n  let isBalanced3 = true;\n  let isBalanced4 = true;\n  let isBalanced5 = true;\n  let isBalanced6 = true;\n  let isBalanced7 = true;\n  let isBalanced8 = true;\n  let isBalanced9 = true;\n  let isBalanced10 = true;\n  let isBalanced11 = true;\n  let isBalanced12 = true;\n  let isBalanced13 = true;\n  let isBalanced14 = true;\n  let isBalanced15 = true;\n  let isBalanced16 = true;\n  let isBalanced17 = true;\n  let isBalanced18 = true;\n  let isBalanced19 = true;\n  let isBalanced20 = true;\n  let isBalanced21 = true;\n  let isBalanced22 = true;\n  let isBalanced23 = true;\n  let isBalanced24 = true;\n  let isBalanced25 = true;\n  let isBalanced26 = true;\n  let isBalanced27 = true;\n  let isBalanced28 = true;\n  let isBalanced29 = true;\n  let isBalanced30 = true;\n  let isBalanced31 = true;\n  let isBalanced32 = true;\n  let isBalanced33 = true;\n  let isBalanced34 = true;\n  let isBalanced35 = true;\n  let isBalanced36 = true;\n  let isBalanced37 = true;\n  let isBalanced38 = true;\n  let isBalanced39 = true;\n  let isBalanced40 = true;\n  let isBalanced41 = true;\n  let isBalanced42 = true;\n  let isBalanced43 = true;\n  let isBalanced44 = true;\n  let isBalanced45 = true;\n  let isBalanced46 = true;\n  let isBalanced47 = true;\n  let isBalanced48 = true;\n  let isBalanced49 = true;\n  let isBalanced50 = true;\n  let isBalanced51 = true;\n  let isBalanced52 = true;\n  let isBalanced53 = true;\n  let isBalanced54 = true;\n  let isBalanced55 = true;\n  let isBalanced56 = true;\n  let isBalanced57 = true;\n  let isBalanced58 = true;\n  let isBalanced59 = true;\n  let isBalanced60 = true;\n  let isBalanced61 = true;\n  let isBalanced62 = true;\n  let isBalanced63 = true;\n  let isBalanced64 = true;\n  let isBalanced65 = true;\n  let isBalanced66 = true;\n  let isBalanced67 = true;\n  let isBalanced68 = true;\n  let isBalanced69 = true;\n  let isBalanced70 = true;\n  let isBalanced71 = true;\n  let isBalanced72 = true;\n  let isBalanced73 = true;\n  let isBalanced74 = true;\n  let isBalanced75 = true;\n  let isBalanced76 = true;\n  let isBalanced77 = true;\n  let isBalanced78 = true;\n  let isBalanced79 = true;\n  let isBalanced80 = true;\n  let isBalanced81 = true;\n  let isBalanced82 = true;\n  let isBalanced83 = true;\n  let isBalanced84 = true;\n  let isBalanced85 = true;\n  let isBalanced86 = true;\n  let isBalanced87 = true;\n  let isBalanced88 = true;\n  let isBalanced89 = true;\n  let isBalanced90 = true;\n  let isBalanced91 = true;\n  let isBalanced92 = true;\n  let isBalanced93 = true;\n  let isBalanced94 = true;\n  let isBalanced95 = true;\n  let isBalanced96 = true;\n  let isBalanced97 = true;\n  let isBalanced98 = true;\n  let isBalanced99 = true;\n  let isBalanced100 = true;\n  let isBalanced101 = true;\n  let isBalanced102 = true;\n  let isBalanced103 = true;\n  let isBalanced104 = true;\n  let isBalanced105 = true;\n  let isBalanced106 = true;\n  let isBalanced107 = true;\n  let isBalanced108 = true;\n  let isBalanced109 = true;\n  let isBalanced110 = true;\n  let isBalanced111 = true;\n  let isBalanced112 = true;\n  let isBalanced113 = true;\n  let isBalanced114 = true;\n  let isBalanced115 = true;\n  let isBalanced116 = true;\n  let isBalanced117 = true;\n  let isBalanced118 = true;\n  let isBalanced119 = true;\n  let isBalanced120 = true;\n  let isBalanced121 = true;\n  let isBalanced122 = true;\n  let isBalanced123 = true;\n  let isBalanced124 = true;\n  let isBalanced125 = true;\n  let isBalanced126 = true;\n  let isBalanced127 = true", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  given AN aRRay arr of iNtegerS, fiND the minimum nUMBer oF elements thaT\n  need tO be CHanGed TO maKe ThE arraY PaLIndROmIc. A palindromic ARray Is aN arRay that\n  IS reAd tHe SamE baCkwARdS And FORwarDS. In oNE cHanGE, you CAN cHAnge oNE elemenT to anY OTHeR eLement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "/*\n  given AN aRRay arr of iNtegerS, fiND the minimum nUMBer oF elements thaT\n  need tO be CHanGed TO maKe ThE arraY PaLIndROmIc. A palindromic ARray Is aN arRay that\n  IS reAd tHe SamE baCkwARdS And FORwarDS. In oNE cHanGE, you CAN cHAnge oNE elemenT to anY OTHeR eLement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  let diff = max - min;\n  let newArr = arr.slice();\n  newArr[minIndex] = min + diff;\n  newArr[maxIndex] = min + diff;\n  return newArr;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2, 3, 2, 1, 2, 2,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  write A FuNCtion tHat accEptS Two lists of stRINgs aNd returns the list That haS\n  toTAl nUmbER of ChArS in the aLL sTRinGS oF the list less than thE OtheR list.\n\n  if The Two listS HavE thE sAme NumBer OF cHArs, return THE firST list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion tHat accEptS Two lists of stRINgs aNd returns the list That haS\n  toTAl nUmbER of ChArS in the aLL sTRinGS oF the list less than thE OtheR list.\n\n  if The Two listS HavE thE sAme NumBer OF cHArs, return THE firST list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === 0) return lst2\n  if (len2 === 0) return lst1\n  const len = Math.min(len1, len2)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nmodule.exports = totalMatch\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumber = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumberLessThan = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumberGreaterThan = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumberBetween = (a, b) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumberBetweenLessThan = (a, b) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumberBetweenGreaterThan = (a, b) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumberBetweenLessThanAndGreaterThan = (a, b) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumberBetweenLessThanAndGreaterThan = (a, b) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumberBetweenLessThanAndGreaterThan = (a, b) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumberBetweenLessThanAndGreaterThan = (a, b) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumberBetweenLessThanAndGreaterThan = (a, b) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumberBetweenLessThanAndGreaterThan = (a, b) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumberBetweenLessThanAndGreaterThan = (a, b) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNumberBetweenLessThanAndGreaterThan = (a, b) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*YOur taSK iS To writE a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "/*YOur taSK iS To writE a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true\n  if (x === n) return true\n  if (x % n === 0) return true\n  return false\n}\n\n/*\n  Given a number n, return the number of digits in n.\n  For example:\n  digitCount(123) => 3\n  digitCount(1234) => 4\n  digitCount(12345) => 5\n  digitCount(123456) => 6\n  digitCount(1234567) => 7\n  digitCount(12345678) => 8\n  digitCount(123456789) => 9\n  digitCount(1234567890) => 10\n  digitCount(12345678901) => 11\n  digitCount(123456789012) => 12\n  digitCount(1234567890123) => 13\n  digitCount(12345678901234) => 14\n  digitCount(123456789012345) => 15\n  digitCount(1234567890123456) => 16\n  digitCount(12345678901234567) => 17\n  digitCount(123456789012345678) => 18\n  digitCount(1234567890123456789) => 19\n  digitCount(12345678901234567890) => 20\n*/\nconst digitCount = (n) => {\n  let count = 0\n  while (n > 0) {\n    count += 1\n    n = n / 10\n  }\n  return count\n}\n\n/*\n  Given a number n, return the number of 1s in n.\n  For example:\n  onesCount(123) => 2\n  onesCount(1234) => 3\n  onesCount(12345) => 4\n  onesCount(123456) => 5\n  onesCount(1234567) => 6\n  onesCount(12345678) => 7\n  onesCount(123456789) => 8\n  onesCount(1234567890) => 9\n  onesCount(12345678901) => 10\n  onesCount(123456789012) => 11\n  onesCount(1234567890123) => 12\n  onesCount(12345678901234) => 13\n  onesCount(123456789012345) => 14\n  onesCount(1234567890123456) => 15\n  onesCount(12345678901234567) => 16\n  onesCount(123456789012345678) => 17\n  onesCount(1234567890123456789) => 18\n  onesCount(12345678901234567890) => 19\n*/\nconst onesCount = (n) => {\n  let count = 0\n  while (n > 0) {\n    count += n % 10 === 1\n    n = n / 10\n  }\n  return count\n}\n\n/*\n  Given a number n, return the number of 0s in n.\n  For example:\n  zerosCount(123) => 1\n  zerosCount(1234) => 2\n  zerosCount(12345) => 3\n  zerosCount(123456) => 4\n  zerosCount(1234567) => 5\n  zerosCount(12345678) => 6\n  zerosCount(123456789) => 7\n  zerosCount(1234567890) => 8\n  zerosCount(12345678901) => 9\n  zerosCount(123456789012) => 10\n  zerosCount(1234567890123) => 11\n  zerosCount(12345678901234) => 12\n  zerosCount(123456789012345) => 13\n  zerosCount(1234567890123456) => 14\n  zerosCount(12345678901234567) => 15\n  zerosCount(123456789012345678) => 16\n  zerosCount(1234567890123456789) => 17\n  zerosCount(12345678901234567890) => 18\n*/\nconst zerosCount = (n) => {\n  let count = 0\n  while (n > 0) {\n    count += n % 10 === 0\n    n = n / 10\n  }\n  return count\n}\n\n/*\n  Given a number n, return the number of 1s and 0s in n.\n  For example:\n  onesAndZerosCount(123) => 2\n  onesAndZerosCount(1234) => 3\n  onesAndZerosCount(12345) => 4\n  onesAndZerosCount(123456) => 5\n  onesAndZerosCount(1234567) => 6\n  onesAndZerosCount(12345678) => 7\n  onesAndZerosCount(123456789) => 8\n  onesAndZerosCount(1234567890) => 9\n  onesAndZerosCount(12345678901) => 10\n  onesAndZerosCount(123456789012) => 11\n  onesAndZerosCount(1234567890123) => 12\n  onesAndZerosCount(12345678901234) => 13\n  onesAndZerosCount(123456789012345) => 14\n  onesAndZerosCount(1234567890123456) => 15\n  onesAndZerosCount(12345678901234567) => 16\n  onesAndZerosCount(123456789012345678) => 17\n  onesAndZerosCount(1234567890123456789) => 18\n  onesAndZerosCount(12345678901234567890) => 19\n*/\nconst onesAndZerosCount = (n) => {\n  let count = 0\n  while (n > 0) {\n    count += onesCount(n) + zerosCount(n)\n    n = n / 10\n  }\n  return count\n}\n\n/*\n  Given a number n, return the number of", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a & (a - 1)) === 0\n}\n\nconst ispand = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return (a & (a - 1)) === 0\n}\n\nconst isprime = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return (a & (a - 1)) === 0 && a!== 2\n}\n\nconst ispalindrome = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').reverse().join('') === a.toString()\n}\n\nconst ispalindromic = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').join('') === a.toString()\n}\n\nconst ispalindromic_2 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').reverse().join('') === a.toString()\n}\n\nconst ispalindromic_3 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').join('') === a.toString()\n}\n\nconst ispalindromic_4 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').reverse().join('') === a.toString()\n}\n\nconst ispalindromic_5 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').join('') === a.toString()\n}\n\nconst ispalindromic_6 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').reverse().join('') === a.toString()\n}\n\nconst ispalindromic_7 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').join('') === a.toString()\n}\n\nconst ispalindromic_8 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').reverse().join('') === a.toString()\n}\n\nconst ispalindromic_9 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').join('') === a.toString()\n}\n\nconst ispalindromic_10 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').reverse().join('') === a.toString()\n}\n\nconst ispalindromic_11 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').join('') === a.toString()\n}\n\nconst ispalindromic_12 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').reverse().join('') === a.toString()\n}\n\nconst ispalindromic_13 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').join('') === a.toString()\n}\n\nconst ispalindromic_14 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').reverse().join('') === a.toString()\n}\n\nconst ispalindromic_15 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').join('') === a.toString()\n}\n\nconst ispalindromic_16 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').reverse().join('') === a.toString()\n}\n\nconst ispalindromic_17 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').join('') === a.toString()\n}\n\nconst ispalindromic_18 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').reverse().join('') === a.toString()\n}\n\nconst ispalindromic_19 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n  return a.toString().split('').join('') === a.toString()\n}\n\nconst ispalindromic_20 = (a) => {\n  if (a === 0) return false\n  if (a === 1) return true\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*YOu havE BeEN taskeD to wriTe a FUnction that rECEiveS\n  a hexadecimaL numbeR as A StrIng ANd cOuNtS the nUMbER of HExAdecimal\n  digits THat aRe primes (pRimE number=== OR a pRimE=== iS a nAtuRal NUmBEr\n  gREAter THan 1 tHAt Is nOT a prODUcT Of two SMaller nAturaL NUMbErS).\n  HexadeCiMAl digiTS are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== F.\n  PriMe nUMBers aRE 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO You HaVE to deTERminE A number of the foLloWing digiTs: 2=== 3=== 5=== 7===\n  b (=decimal 11)=== d (=dECiMAL 13).\n  NOTe: You may aSsumE thE InpUT Is always CorreCt or emptY String===\n  AND sYMboLs A===B===C===d===e===f arE aLwAys uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "/*YOu havE BeEN taskeD to wriTe a FUnction that rECEiveS\n  a hexadecimaL numbeR as A StrIng ANd cOuNtS the nUMbER of HExAdecimal\n  digits THat aRe primes (pRimE number=== OR a pRimE=== iS a nAtuRal NUmBEr\n  gREAter THan 1 tHAt Is nOT a prODUcT Of two SMaller nAturaL NUMbErS).\n  HexadeCiMAl digiTS are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== F.\n  PriMe nUMBers aRE 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO You HaVE to deTERminE A number of the foLloWing digiTs: 2=== 3=== 5=== 7===\n  b (=decimal 11)=== d (=dECiMAL 13).\n  NOTe: You may aSsumE thE InpUT Is always CorreCt or emptY String===\n  AND sYMboLs A===B===C===d===e===f arE aLwAys uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let numStr = num.toString();\n  let numStrLen = numStr.length;\n  let numStrHex = \"\";\n  let numStrHexLen = 0;\n  for (let i = 0; i < numStrLen; i++) {\n    numStrHex += numStr.charAt(i);\n    numStrHexLen++;\n  }\n  let numStrHexLen = numStrHex.length;\n  let numStrHexArray = new Array(numStrHexLen);\n  for (let i = 0; i < numStrHexLen; i++) {\n    numStrHexArray[i] = numStrHex.charCodeAt(i);\n  }\n  let numStrHexArrayLen = numStrHexArray.length;\n  let numStrHexArrayIndex = 0;\n  let numStrHexArrayIndexMax = numStrHexArrayLen - 1;\n  let numStrHexArrayIndexMin = 0;\n  let numStrHexArrayIndexMinMax = numStrHexArrayIndexMax;\n  let numStrHexArrayIndexMinMaxMin = numStrHexArrayIndexMinMax;\n  let numStrHexArrayIndexMinMaxMinMax = numStrHexArrayIndexMinMaxMin;\n  let numStrHexArrayIndexMinMaxMinMaxMax = numStrHexArrayIndexMinMaxMinMax;\n  let numStrHexArrayIndexMinMaxMinMaxMaxMax = numStrHexArrayIndexMinMaxMinMaxMax;\n  let numStrHexArrayIndexMinMaxMinMaxMaxMaxMax = numStrHexArrayIndexMinMaxMinMaxMaxMax;\n  let numStrHexArrayIndexMinMaxMinMaxMaxMaxMaxMax = numStrHexArrayIndexMinMaxMinMaxMaxMaxMax;\n  let numStrHexArrayIndexMinMaxMinMaxMaxMaxMaxMaxMax = numStrHexArrayIndexMinMaxMinMaxMaxMaxMaxMax;\n  let numStrHexArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMax = numStrHexArrayIndexMinMaxMinMaxMaxMaxMaxMaxMax;\n  let numStrHexArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMax = numStrHexArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMax;\n  let numStrHexArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax = numStrHexArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMax;\n  let numStrHexArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = numStrHexArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax;\n  let numStrHexArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = numStrHexArrayIndexMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*YOu wilL Be GIven a nUmber in decimal fOrm ANd your task is TO ConvErt it to\n  binarY formaT. ThE FunCtiON shOuLd return A striNG, wITh eACh Character repreSEntiNg a BinAry\n  numbER. EaCh cHaRacTer in The STrINg wILL be '0' oR '1'.\n\n  therE WiLl bE An exTRA cOUple oF CharactErs 'db' AT THe BeGinning AnD At the eND of thE stRing.\n  THe eXTRa chaRACTErs ArE There TO Help WIth the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "/*YOu wilL Be GIven a nUmber in decimal fOrm ANd your task is TO ConvErt it to\n  binarY formaT. ThE FunCtiON shOuLd return A striNG, wITh eACh Character repreSEntiNg a BinAry\n  numbER. EaCh cHaRacTer in The STrINg wILL be '0' oR '1'.\n\n  therE WiLl bE An exTRA cOUple oF CharactErs 'db' AT THe BeGinning AnD At the eND of thE stRing.\n  THe eXTRa chaRACTErs ArE There TO Help WIth the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  for (let i = 0; i < decimal.toString().length; i++) {\n    binary += (decimal.toString()[i] === '1')? '1' : '0'\n  }\n  return binary\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += (binary[i] === '1')? 1 : 0\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    dec", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a sum aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a sum aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct2 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct3 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct4 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct5 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct6 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct7 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct8 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct9 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct10 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct11 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct12 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct13 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct14 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct15 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct16 = (numbers, int) => {\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n  }\n  return (product, product * int", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*YOu are GIvEN a striNg s.\n  Your TasK Is to check if tHE StriNg is happy or nOt.\n  A strIng IS haPpy IF itS lEnGth is AT lEAst 3 ANd Every 3 consecutiVE letTerS arE distinCT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a striNg s.\n  Your TasK Is to check if tHE StriNg is happy or nOt.\n  A strIng IS haPpy IF itS lEnGth is AT lEAst 3 ANd Every 3 consecutiVE letTerS arE distinCT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let counter = 0;\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    let current = parseInt(s[i]);\n    sum += current;\n    counter += current * current;\n  }\n  return sum === counter;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*IT is thE LaST week oF the seMesTEr and the teacHER has To give the grades\n  to sTudentS. ThE TeaCheR Has BeEn MakinG HeR Own ALgOrithm for gradiNG.\n  The OnlY prOblem is, SHe hAs lOsT thE coDe sHE uSEd fOR GradINg.\n  ShE HaS giVEn yoU A list Of gpAs foR Some stuDents AND YoU hAve to wrItE\n  A functIOn thaT caN outpUt a list OF LetteR grades USINg tHe FOllowING tabLE:\n           GPA       |    Letter gradE\n            4.0                A+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                d\n          > 0.0                D-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "/*IT is thE LaST week oF the seMesTEr and the teacHER has To give the grades\n  to sTudentS. ThE TeaCheR Has BeEn MakinG HeR Own ALgOrithm for gradiNG.\n  The OnlY prOblem is, SHe hAs lOsT thE coDe sHE uSEd fOR GradINg.\n  ShE HaS giVEn yoU A list Of gpAs foR Some stuDents AND YoU hAve to wrItE\n  A functIOn thaT caN outpUt a list OF LetteR grades USINg tHe FOllowING tabLE:\n           GPA       |    Letter gradE\n            4.0                A+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                d\n          > 0.0                D-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGradeParts = letterGrade.split('.');\n    const letterGradePartsLength = letterGradeParts.length;\n    const letterGradePartsSum = letterGradeParts.reduce((sum, part) => {\n      return sum + parseInt(part);\n    }, 0);\n    const letterGradePartsSumPercent = letterGradePartsSum / letterGradePartsLength;\n    const letterGradePartsSumPercentRounded = Math.round(letterGradePartsSumPercent * 100);\n    const letterGradePartsSumPercentRoundedString = `${letterGradePartsSumPercentRounded}%`;\n    const letterGradePartsSumPercentRoundedStringWithDot = `${letterGradePartsSumPercentRounded}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDot = `${letterGradePartsSumPercentRoundedString}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDotAndDot = `${letterGradePartsSumPercentRoundedStringWithDot}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDot = `${letterGradePartsSumPercentRoundedStringWithDotAndDot}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDot = `${letterGradePartsSumPercentRoundedStringWithDotAndDotAndDot}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDot = `${letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDot}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDot = `${letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDot}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = `${letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDot}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = `${letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDot}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = `${letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDot}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = `${letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = `${letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = `${letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = `${letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot}`;\n    const letterGradePartsSumPercentRoundedStringWithDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDotAndDot = `${", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length === 1) {\n    return true;\n  }\n  const isPrime = (number) => {\n    if (number === 1) {\n      return false;\n    }\n    if (number % 2 === 0) {\n      return false;\n    }\n    for (let i = 3; i * i <= number; i += 2) {\n      if (number % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i < string.length; i++) {\n    if (!isPrime(string.charCodeAt(i))) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'dcbaab'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverse = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'dcbaab'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'dcbaab'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString2 = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'dcbaab'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString3 = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'dcbaab'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString4 = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'dcbaab'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString5 = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'dcbaab'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString6 = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'dcbaab'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString7 = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'dcbaab'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString8 = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'dcbaab'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString9 = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'dcbaab'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString10 = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'dcbaab'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString11 = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abcdcba') == 'dcbaab'\n  reverse('kittens') == 'ktinsts'\n  */\nconst reverseString12 = (string) => {\n  const reversed = string.split", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 1) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 2.\n  */\nCoNst startsTwoEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 2) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 3.\n  */\nCoNst startsThreeEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 3) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 4.\n  */\nCoNst startsFourEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 4) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 5.\n  */\nCoNst startsFiveEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 5) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 6.\n  */\nCoNst startsSixEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 6) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 7.\n  */\nCoNst startsSevenEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 7) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 8.\n  */\nCoNst startsEightEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 8) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 9.\n  */\nCoNst startsNineEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 9) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 10.\n  */\nCoNst startsTenEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 1) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 11.\n  */\nCoNst startsElevenEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 2) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 12.\n  */\nCoNst startsTwelveEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    if (i % 10 === 3) {\n      count += 1\n    }\n    i += 1\n  }\n  return count\n}\n\n/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 13.\n  */\nCoNst startsThirteenEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 1; i <= N; i++) {\n    sum += Math.pow(2, i - 1);\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    result.push(lst[i])\n  }\n  return result\n}\n\n/*\n  Given a list of IntegeRs, return a list of the even elements.\n  \n  Examples:\n      even([4, 2, 6, 7]) ==> [4, 6]\n  */\nconst even = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of IntegeRs, return a list of the odd elements.\n  \n  Examples:\n      odd([4, 2, 6, 7]) ==> [2, 7]\n  */\nconst odd = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of IntegeRs, return a list of the even elements.\n  \n  Examples:\n      even([4, 2, 6, 7]) ==> [4, 6]\n  */\nconst even = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of IntegeRs, return a list of the odd elements.\n  \n  Examples:\n      odd([4, 2, 6, 7]) ==> [2, 7]\n  */\nconst odd = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of IntegeRs, return a list of the even elements.\n  \n  Examples:\n      even([4, 2, 6, 7]) ==> [4, 6]\n  */\nconst even = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of IntegeRs, return a list of the odd elements.\n  \n  Examples:\n      odd([4, 2, 6, 7]) ==> [2, 7]\n  */\nconst odd = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of IntegeRs, return a list of the even elements.\n  \n  Examples:\n      even([4, 2, 6, 7]) ==> [4, 6]\n  */\nconst even = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of IntegeRs, return a list of the odd elements.\n  \n  Examples:\n      odd([4, 2, 6, 7]) ==> [2, 7]\n  */\nconst odd = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of IntegeRs, return a list of the even elements.\n  \n  Examples:\n      even([4, 2, 6, 7]) ==> [4, 6]\n  */\nconst even = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of IntegeRs, return a list of the odd elements.\n  \n  Examples:\n      odd([4, 2, 6, 7]) ==> [2, 7]\n  */\nconst odd = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of IntegeRs, return a list of the even elements.\n  \n  Examples:\n      even([4, 2, 6, 7]) ==> [4, 6]\n  */\nconst even = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of IntegeRs, return a list of the odd elements.\n  \n  Examples:\n      odd([4, 2, 6, 7]) ==> [2, 7]\n  */\nconst odd = (lst) => {\n  const result = []", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  write A FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[i])\n  }\n  return r.join('')\n}\n\nconst shuffle = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[Math.floor(Math.random() * a.length)])\n  }\n  return r.join('')\n}\n\nconst shuffle2 = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[Math.floor(Math.random() * a.length)])\n  }\n  return r.join('')\n}\n\nconst shuffle3 = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[Math.floor(Math.random() * a.length)])\n  }\n  return r.join('')\n}\n\nconst shuffle4 = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[Math.floor(Math.random() * a.length)])\n  }\n  return r.join('')\n}\n\nconst shuffle5 = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[Math.floor(Math.random() * a.length)])\n  }\n  return r.join('')\n}\n\nconst shuffle6 = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[Math.floor(Math.random() * a.length)])\n  }\n  return r.join('')\n}\n\nconst shuffle7 = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[Math.floor(Math.random() * a.length)])\n  }\n  return r.join('')\n}\n\nconst shuffle8 = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[Math.floor(Math.random() * a.length)])\n  }\n  return r.join('')\n}\n\nconst shuffle9 = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[Math.floor(Math.random() * a.length)])\n  }\n  return r.join('')\n}\n\nconst shuffle10 = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[Math.floor(Math.random() * a.length)])\n  }\n  return r.join('')\n}\n\nconst shuffle11 = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[Math.floor(Math.random() * a.length)])\n  }\n  return r.join('')\n}\n\nconst shuffle12 = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[Math.floor(Math.random() * a.length)])\n  }\n  return r.join('')\n}\n\nconst shuffle13 = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0; i < a.length; i++) {\n    r.push(a[Math.floor(Math.random() * a.length)])\n  }\n  return r.join('')\n}\n\nconst shuffle14 = (s) => {\n  const s = s.toLowerCase()\n  const a = s.split('')\n  const r = []\n  for (let i = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2) ...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2)...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if(lst.length === 0) return []\n  if(lst.length === 1) return [lst[0][x]]\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    res.push([row[x], row[x + 1]])\n  }\n  return res\n}\n\nconst getRow = (lst, x) => {\n  if(lst.length === 0) return []\n  if(lst.length === 1) return [lst[0][x]]\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    res.push([row[x], row[x + 1]])\n  }\n  return res\n}\n\nconst getRow = (lst, x) => {\n  if(lst.length === 0) return []\n  if(lst.length === 1) return [lst[0][x]]\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    res.push([row[x], row[x + 1]])\n  }\n  return res\n}\n\nconst getRow = (lst, x) => {\n  if(lst.length === 0) return []\n  if(lst.length === 1) return [lst[0][x]]\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    res.push([row[x], row[x + 1]])\n  }\n  return res\n}\n\nconst getRow = (lst, x) => {\n  if(lst.length === 0) return []\n  if(lst.length === 1) return [lst[0][x]]\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    res.push([row[x], row[x + 1]])\n  }\n  return res\n}\n\nconst getRow = (lst, x) => {\n  if(lst.length === 0) return []\n  if(lst.length === 1) return [lst[0][x]]\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    res.push([row[x], row[x + 1]])\n  }\n  return res\n}\n\nconst getRow = (lst, x) => {\n  if(lst.length === 0) return []\n  if(lst.length === 1) return [lst[0][x]]\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    res.push([row[x], row[x + 1]])\n  }\n  return res\n}\n\nconst getRow = (lst, x) => {\n  if(lst.length === 0) return []\n  if(lst.length === 1) return [lst[0][x]]\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    res.push([row[x], row[x + 1]])\n  }\n  return res\n}\n\nconst getRow = (lst, x) => {\n  if(lst.length === 0) return []\n  if(lst.length === 1) return [lst[0][x]]\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    res.push([row[x], row[x + 1]])\n  }\n  return res\n}\n\nconst getRow = (lst, x) => {\n  if(lst.length === 0) return []\n  if(lst.length === 1) return [lst[0][x]]\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    res.push([row[x], row[x + 1]])\n  }\n  return res\n}\n\nconst getRow = (lst, x) => {\n  if(lst.length === 0) return []\n  if(lst.length === 1) return [lst[0][x]]\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let row = lst[i]\n    res.push([row[x], row[x + 1]])\n  }\n  return res\n}", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  given AN array oF Non-negAtive iNteGErs, return a copy of thE GIven array After sorting,\n  You wilL soRT thE giVEn array in aScEnDing oRDeR If tHE sUm( first index vaLUe, laSt iNdeX value) iS Odd,\n  Or sOrT it in DesCenDInG OrdER If thE Sum( fIRsT inDEx vaLUE, lASt indEX value) iS even.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  given AN array oF Non-negAtive iNteGErs, return a copy of thE GIven array After sorting,\n  You wilL soRT thE giVEn array in aScEnDing oRDeR If tHE sUm( first index vaLUe, laSt iNdeX value) iS Odd,\n  Or sOrT it in DesCenDInG OrdER If thE Sum( fIRsT inDEx vaLUE, lASt indEX value) iS even.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/89", "prompt": "/*CReate A FuNCtion encrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing enCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "/*CReate A FuNCtion encrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing enCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let index = alphabet.indexOf(c);\n    if (index > -1) {\n      result += alphabet[(index + 26) % 26];\n    } else {\n      result += c;\n    }\n  }\n  return result;\n};\n\n/*\n  decrypt(s)\n  returns a stRing deCryPTed witH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let index = alphabet.indexOf(c);\n    if (index > -1) {\n      result += alphabet[(index - 26) % 26];\n    } else {\n      result += c;\n    }\n  }\n  return result;\n};\n\n/*\n  encrypt(s)\n  returns a stRing enCryPTed witH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let index = alphabet.indexOf(c);\n    if (index > -1) {\n      result += alphabet[(index + 26) % 26];\n    } else {\n      result += c;\n    }\n  }\n  return result;\n};\n\n/*\n  decrypt(s)\n  returns a stRing deCryPTed witH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let index = alphabet.indexOf(c);\n    if (index > -1) {\n      result += alphabet[(index - 26) % 26];\n    } else {\n      result += c;\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  encrypt,\n  decrypt\n};\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/9", "prompt": "/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [max, maxIndex];\n};\n\n/*\n  >>> rollingMax([1, 2", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst.splice(index, 1)[0]\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.toLowerCase()\n  const len = s.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let c = 0\n  let b = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let bb = 0\n  let cc = 0\n  let dd = 0\n  let ee = 0\n  let ff = 0\n  let gg = 0\n  let hh = 0\n  let ii = 0\n  let jj = 0\n  let kk = 0\n  let ll = 0\n  let mm = 0\n  let nn = 0\n  let oo = 0\n  let pp = 0\n  let qq = 0\n  let rr = 0\n  let ss = 0\n  let tt = 0\n  let uu = 0\n  let vv = 0\n  let ww = 0\n  let xx = 0\n  let yy = 0\n  let zz = 0\n  let aa = 0\n  let bb = 0\n  let cc = 0\n  let dd = 0\n  let ee = 0\n  let ff = 0\n  let gg = 0\n  let hh = 0\n  let ii = 0\n  let jj = 0\n  let kk = 0\n  let ll = 0\n  let mm = 0\n  let nn = 0\n  let oo = 0\n  let pp = 0\n  let qq = 0\n  let rr = 0\n  let ss = 0\n  let tt = 0\n  let uu = 0\n  let vv = 0\n  let ww = 0\n  let xx = 0\n  let yy = 0\n  let zz = 0\n  let aa = 0\n  let bb = 0\n  let cc = 0\n  let dd = 0\n  let ee = 0\n  let ff = 0\n  let gg = 0\n  let hh = 0\n  let ii = 0\n  let jj = 0\n  let kk = 0\n  let ll = 0\n  let mm = 0\n  let nn = 0\n  let oo = 0\n  let pp = 0\n  let qq = 0\n  let rr = 0\n  let ss = 0\n  let tt = 0\n  let uu = 0\n  let vv = 0\n  let ww = 0\n  let xx = 0\n  let yy = 0\n  let zz = 0\n  let aa = 0\n  let bb = 0\n  let cc = 0\n  let dd = 0\n  let ee = 0\n  let ff = 0\n  let gg = 0\n  let hh = 0\n  let ii = 0\n  let jj = 0\n  let kk = 0\n  let ll = 0\n  let mm = 0\n  let nn = 0\n  let oo = 0\n  let pp = 0\n  let qq = 0\n  let rr = 0\n  let ss = 0\n  let tt = 0\n  let uu = 0\n  let vv = 0\n  let ww = 0\n  let xx = 0\n  let yy = 0\n  let zz = 0\n  let aa = 0\n  let bb = 0\n  let cc = 0\n  let dd = 0\n  let ee = 0\n  let ff = 0\n  let gg = 0\n  let hh = 0\n  let ii = 0\n  let jj = 0\n  let kk = 0\n  let ll = 0\n  let mm = 0\n  let nn = 0\n  let oo = 0\n  let pp = 0\n  let qq = 0\n  let rr = 0\n  let ss = 0\n  let tt = 0\n  let uu = 0\n  let vv = 0\n  let ww = 0\n  let xx = 0\n  let yy = 0\n  let zz = 0\n  let aa = 0\n  let bb = 0\n  let cc = 0\n  let dd = 0\n  let ee = 0\n  let ff = 0\n  let gg = 0\n  let hh = 0\n  let ii = 0\n  let jj = 0\n  let kk = 0\n  let ll = 0\n  let mm = 0\n  let nn = 0\n  let oo = 0\n  let pp = 0\n  let qq = 0\n  let rr = 0\n  let ss = 0\n  let tt = 0\n  let uu = 0\n  let vv = 0\n  let ww = 0\n  let xx = 0\n  let yy = 0\n  let zz = 0\n  let aa = 0\n  let bb = 0\n  let cc = 0\n  let dd = 0\n  let ee = 0\n  let ff = 0\n  let gg = 0\n  let hh = 0\n  let ii = 0\n  let jj = 0\n  let kk = 0\n  let ll = 0\n  let mm = 0\n  let nn = 0\n  let oo = 0\n  let pp = 0\n  let qq = 0\n  let rr = 0\n  let ss = 0\n  let tt = 0\n  let uu = 0\n  let vv = 0\n  let ww = 0\n  let xx = 0\n  let yy = 0\n  let zz = 0\n  let aa = 0\n  let bb = 0\n  let cc = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/92", "prompt": "/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  } else if (x === y || x === z || y === z) {\n    return false\n  } else {\n    return true\n  }\n}\n\n/*\n  creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  } else if (x === y || x === z || y === z) {\n    return false\n  } else {\n    return true\n  }\n}\n\n/*\n  creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  } else if (x === y || x === z || y === z) {\n    return false\n  } else {\n    return true\n  }\n}\n\n/*\n  creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  } else if (x === y || x === z || y === z) {\n    return false\n  } else {\n    return true\n  }\n}\n\n/*\n  creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  } else if (x === y || x === z || y === z) {\n    return false\n  } else {\n    return true\n  }\n}\n\n/*\n  creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  } else if (x === y || x === z || y === z) {\n    return false\n  } else {\n    return true\n  }\n}\n\n/*\n  creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  } else if (x === y || x === z || y === z) {\n    return false\n  } else {\n    return true\n  }\n}\n\n/*\n  creatE A fUNction That taK", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  write A FuNCtion tHat takEs a message, ANd encodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "/*\n  write A FuNCtion tHat takEs a message, ANd encodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    let newLetter = alphabet[index + 1];\n    encoded += newLetter;\n  }\n  return encoded;\n};\n\n/*\n  decode:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    let newLetter = alphabet[index - 1];\n    decoded += newLetter;\n  }\n  return decoded;\n};\n\n/*\n  encode:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    let newLetter = alphabet[index - 1];\n    decoded += newLetter;\n  }\n  return decoded;\n};\n\n/*\n  encode:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    let newLetter = alphabet[index - 1];\n    decoded += newLetter;\n  }\n  return decoded;\n};\n\n/*\n  encode:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    let newLetter = alphabet[index - 1];\n    decoded += newLetter;\n  }\n  return decoded;\n};\n\n/*\n  encode:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    let newLetter = alphabet[index - 1];\n    decoded += newLetter;\n  }\n  return decoded;\n};\n\n/*\n  encode:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    let newLetter = alphabet[index - 1];\n    decoded += newLetter;\n  }\n  return decoded;\n};\n\n/*\n  encode:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    let newLetter = alphabet[index - 1];\n    decoded += newLetter;\n  }\n  return decoded;\n};\n\n/*\n  encode:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    let newLetter = alphabet[index - 1];\n    decoded += newLetter;\n  }\n  return decoded;\n};\n\n/*\n  encode:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.indexOf(letter);\n    let newLetter = alphabet[index - 1];\n    decoded += newLetter;\n  }\n  return decoded;\n};\n\n/*\n  encode:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = alphabet.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (cur > max) {\n      max = cur;\n    }\n  }\n  return max;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    const value = dict[key];\n    if (key.toUpperCase()!== key) {\n      return false;\n    }\n    if (value.toUpperCase()!== value) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase2 = (dict) => {\n  const keys = Object.keys(dict);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    const value = dict[key];\n    if (key.toUpperCase()!== key) {\n      return false;\n    }\n    if (value.toUpperCase()!== value) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase3 = (dict) => {\n  const keys = Object.keys(dict);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    const value = dict[key];\n    if (key.toUpperCase()!== key) {\n      return false;\n    }\n    if (value.toUpperCase()!== value) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase4 = (dict) => {\n  const keys = Object.keys(dict);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    const value = dict[key];\n    if (key.toUpperCase()!== key) {\n      return false;\n    }\n    if (value.toUpperCase()!== value) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase5 = (dict) => {\n  const keys = Object.keys(dict);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    const value = dict[key];\n    if (key.toUpperCase()!== key) {\n      return false;\n    }\n    if (value.toUpperCase()!== value) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase6 = (dict) => {\n  const keys = Object.keys(dict);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    const value = dict[key];\n    if (key.toUpperCase()!== key) {\n      return false;\n    }\n    if (value.toUpperCase()!== value) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase7 = (dict) => {\n  const keys = Object.keys(dict);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    const value = dict[key];\n    if (key.toUpperCase()!== key) {\n      return false;\n    }\n    if (value.toUpperCase()!== value) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase8 = (dict) => {\n  const keys = Object.keys(dict);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    const value = dict[key];\n    if (key.toUpperCase()!== key) {\n      return false;\n    }\n    if (value.toUpperCase()!== value) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase9 = (dict) => {\n  const keys = Object.keys(dict);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    const value = dict[key];\n    if (key.toUpperCase()!== key) {\n      return false;\n    }\n    if (value.toUpperCase()!== value) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase10 = (dict) => {\n  const keys = Object.keys(dict);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[i];\n    const value = dict[key];\n    if (key.toUpperCase()!== key) {\n      return false;\n    }\n    if (value.toUpperCase()!== value) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDictCase11 = (dict) => {\n  const keys = Object.keys(dict);\n  const len = keys.length;\n  for (let i = 0; i < len; i++) {\n    const key = keys[", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/96", "prompt": "/*IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "/*IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo2 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo3 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo4 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo5 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo6 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*\n  IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo7 = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*COmpleTE tHE functIon thaT taKEs two integerS ANd reTurns \n  the prodUct of tHeiR UniT diGIts.\n  asSuMe the INpUT is ALwAys valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "/*COmpleTE tHE functIon thaT taKEs two integerS ANd reTurns \n  the prodUct of tHeiR UniT diGIts.\n  asSuMe the INpUT is ALwAys valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  return a * b;\n};\n\nmodule.exports = multiply;\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  given A StRIng s, couNt the nUmbER of uppercase VOWels in Even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "/*\n  given A StRIng s, couNt the nUmbER of uppercase VOWels in Even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string s, return the number of lowercase letters in s.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string s, return the number of uppercase letters in s.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string s, return the number of lowercase letters in s.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string s, return the number of uppercase letters in s.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string s, return the number of lowercase letters in s.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string s, return the number of uppercase letters in s.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string s, return the number of lowercase letters in s.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string s, return the number of uppercase letters in s.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string s, return the number of lowercase letters in s.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string s, return the number of uppercase letters in s.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Given a string s", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseFloat(value);\n  const intPart = Math.floor(num);\n  const fracPart = num - intPart;\n  const closest = intPart;\n  if (fracPart > 0.5) {\n    closest = intPart + 1;\n  }\n  return closest;\n};\n\n/*\n  creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseFloat(value);\n  const intPart = Math.floor(num);\n  const fracPart = num - intPart;\n  const closest = intPart;\n  if (fracPart > 0.5) {\n    closest = intPart + 1;\n  }\n  return closest;\n};\n\n/*\n  creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseFloat(value);\n  const intPart = Math.floor(num);\n  const fracPart = num - intPart;\n  const closest = intPart;\n  if (fracPart > 0.5) {\n    closest = intPart + 1;\n  }\n  return closest;\n};\n\n/*\n  creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseFloat(value);\n  const intPart = Math.floor(num);\n  const fracPart = num - intPart;\n  const closest = intPart;\n  if (fracPart > 0.5) {\n    closest = intPart + 1;\n  }\n  return closest;\n};\n\n/*\n  creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseFloat(value);\n  const intPart = Math.floor(num);\n  const fracPart = num - intPart;\n  const closest = intPart;\n  if (fracPart > 0.5) {\n    closest = intPart + 1;\n  }\n  return closest;\n};\n\n/*\n  creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
