{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  const len = numbers.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char ==='') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char;\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst paren_groups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char ==='') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char;\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst paren_groups_string = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char ==='') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char;\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst paren_groups_string_array = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char ==='') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char;\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst paren_groups_string_array_array = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char ==='') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char;\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst paren_groups_string_array_array_array = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char ==='') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char;\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst paren_groups_string_array_array_array_array = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    for (let j = 0; j < paren_group.length; j++) {\n      const char = paren_group.charAt(j);\n      if (char === ')') {\n        paren_group_string += char;\n      } else if (char ==='') {\n        paren_group_string += char;\n      } else {\n        paren_group_string += char;\n      }\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/* Given a string containing multiple groups of nested parentheses, return the list of those groups. Ignore any spaces in the input string.\n  >>> paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst paren_groups_string_array_array_array_array_array = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let palindromeLength = 0;\n  let palindromePrefix = '';\n  let palindromeSuffix = '';\n  let reversedString = '';\n  let prefix = '';\n  let suffix = '';\n\n  /* Find the longest postfix of supplied string that is a palindrome */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromeLength++;\n    }\n  }\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  for (let i = 0; i < palindromeLength; i++) {\n    reversedString += string[i];\n  }\n\n  /* Find the longest postfix of supplied string that is a palindrome */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromePrefix = '';\n      palindromeSuffix = '';\n    }\n    else {\n      palindromePrefix = string[i];\n      palindromeSuffix = string[string.length - i - 1];\n    }\n  }\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  for (let i = 0; i < palindromeLength; i++) {\n    reversedString += string[i];\n  }\n\n  /* Find the longest postfix of supplied string that is a palindrome */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromePrefix = '';\n      palindromeSuffix = '';\n    }\n    else {\n      palindromePrefix = string[i];\n      palindromeSuffix = string[string.length - i - 1];\n    }\n  }\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  for (let i = 0; i < palindromeLength; i++) {\n    reversedString += string[i];\n  }\n\n  /* Find the longest postfix of supplied string that is a palindrome */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromePrefix = '';\n      palindromeSuffix = '';\n    }\n    else {\n      palindromePrefix = string[i];\n      palindromeSuffix = string[string.length - i - 1];\n    }\n  }\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  for (let i = 0; i < palindromeLength; i++) {\n    reversedString += string[i];\n  }\n\n  /* Find the longest postfix of supplied string that is a palindrome */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromePrefix = '';\n      palindromeSuffix = '';\n    }\n    else {\n      palindromePrefix = string[i];\n      palindromeSuffix = string[string.length - i - 1];\n    }\n  }\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  for (let i = 0; i < palindromeLength; i++) {\n    reversedString += string[i];\n  }\n\n  /* Find the longest postfix of supplied string that is a palindrome */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromePrefix = '';\n      palindromeSuffix = '';\n    }\n    else {\n      palindromePrefix = string[i];\n      palindromeSuffix = string[string.length - i - 1];\n    }\n  }\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  for (let i = 0; i < palindromeLength; i++) {\n    reversedString += string[i];\n  }\n\n  /* Find the longest postfix of supplied string that is a palindrome */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromePrefix = '';\n      palindromeSuffix = '';\n    }\n    else {\n      palindromePrefix = string[i];\n      palindromeSuffix = string[string.length - i - 1];\n    }\n  }\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  for (let i = 0; i < palindromeLength; i++) {\n    reversedString += string[i];\n  }\n\n  /* Find the longest postfix of supplied string that is a palindrome */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromePrefix = '';\n      palindromeSuffix = '';\n    }\n    else {\n      palindromePrefix = string[i];\n      palindromeSuffix = string[string.length - i - 1];\n    }\n  }\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  for (let i = 0; i < palindromeLength; i++) {\n    reversedString += string[i];\n  }\n\n  /* Find the longest postfix of supplied string that is a palindrome */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromePrefix = '';\n      palindromeSuffix = '';\n    }\n    else {\n      palindromePrefix = string[i];\n      palindromeSuffix = string[string.length - i - 1];\n    }\n  }\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  for (let i = 0; i < palindromeLength; i++) {\n    reversedString += string[i];\n  }\n\n  /* Find the longest postfix of supplied string that is a palindrome */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromePrefix = '';\n      palindromeSuffix = '';\n    }\n    else {\n      palindromePrefix = string[i];\n      palindromeSuffix = string[string.length - i - 1];\n    }\n  }\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  for (let i = 0; i < palindromeLength; i++) {\n    reversedString += string[i];\n  }\n\n  /* Find the longest postfix of supplied string that is a palindrome */\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!= string[string.length - i - 1]) {\n      palindromePrefix = '';\n      palindromeSuffix = '';\n    }\n    else {\n      palindromePrefix = string[i];\n      palindromeSuffix = string[string.length - i - 1];\n    }\n  }\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  for (let i = 0; i < palindromeLength; i++) {\n    reversedString += string[i];\n  }\n\n  /* Find the longest postfix of supplied ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  let level = 0;\n  let i = 0;\n  while (i < n) {\n    result.push(level);\n    i += 2;\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(5)\n  [5, 7, 11, 13, 15]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  let level = 0;\n  let i = 0;\n  while (i < n) {\n    result.push(level);\n    i += 2;\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(8)\n  [8, 12, 16, 20, 24, 28, 32]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  let level = 0;\n  let i = 0;\n  while (i < n) {\n    result.push(level);\n    i += 2;\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(10)\n  [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  let level = 0;\n  let i = 0;\n  while (i < n) {\n    result.push(level);\n    i += 2;\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(15)\n  [15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  let level = 0;\n  let i = 0;\n  while (i < n) {\n    result.push(level);\n    i += 2;\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(20)\n  [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  let level = 0;\n  let i = 0;\n  while (i < n) {\n    result.push(level);\n    i += 2;\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(25)\n  [25, 27, 29, 31, 33, 35, 37, 39, 41]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  let level = 0;\n  let i = 0;\n  while (i < n) {\n    result.push(level);\n    i += 2;\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(30)\n  [30, 32, 34, 36, 38, 40]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  let level = 0;\n  let i = 0;\n  while (i < n) {\n    result.push(level);\n    i += 2;\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(35)\n  [35, 37, 39, 41]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  let level = 0;\n  let i = 0;\n  while (i < n) {\n    result.push(level);\n    i += 2;\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(40)\n  [40, 42, 44, 46, 48, 50]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  let level = 0;\n  let i = 0;\n  while (i < n) {\n    result.push(level);\n    i += 2;\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(/[, ]+/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the length of the longest word in the string.\n  \n  For example:\n  word_length(\"Hi, my name is John\") == \"John\"\n  word_length(\"One, two, three, four, five, six\") == \"six\"\n  */\nconst word_length = (s) => {\n  const words = s.split(/[, ]+/);\n  let longestWord = 0;\n  words.forEach((word) => {\n    if (word.length > longestWord) {\n      longestWord = word.length;\n    }\n  });\n  return longestWord;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of words in the string.\n  \n  For example:\n  word_count(\"Hi, my name is John\") == 2\n  word_count(\"One, two, three, four, five, six\") == 6\n  */\nconst word_count = (s) => {\n  const words = s.split(/[, ]+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of spaces in the string.\n  \n  For example:\n  space_count(\"Hi, my name is John\") == 2\n  space_count(\"One, two, three, four, five, six\") == 6\n  */\nconst space_count = (s) => {\n  const words = s.split(/[, ]+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of periods in the string.\n  \n  For example:\n  period_count(\"Hi, my name is John\") == 2\n  period_count(\"One, two, three, four, five, six\") == 6\n  */\nconst period_count = (s) => {\n  const words = s.split(/[, ]+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of apostrophes in the string.\n  \n  For example:\n  apostrophe_count(\"Hi, my name is John\") == 2\n  apostrophe_count(\"One, two, three, four, five, six\") == 6\n  */\nconst apostrophe_count = (s) => {\n  const words = s.split(/[, ]+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of double quotes in the string.\n  \n  For example:\n  double_quote_count(\"Hi, my name is John\") == 2\n  double_quote_count(\"One, two, three, four, five, six\") == 6\n  */\nconst double_quote_count = (s) => {\n  const words = s.split(/[, ]+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of single quotes in the string.\n  \n  For example:\n  single_quote_count(\"Hi, my name is John\") == 2\n  single_quote_count(\"One, two, three, four, five, six\") == 6\n  */\nconst single_quote_count = (s) => {\n  const words = s.split(/[, ]+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of apostrophes and double quotes in the string.\n  \n  For example:\n  apostrophe_double_quote_count(\"Hi, my name is John\") == 2\n  apostrophe_double_quote_count(\"One, two, three, four, five, six\") == 6\n  */\nconst apostrophe_double_quote_count = (s) => {\n  const words = s.split(/[, ]+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of apostrophes and single quotes in the string.\n  \n  For example:\n  apostrophe_single_quote_count(\"Hi, my name is John\") == 2\n  apostrophe_single_quote_count(\"One, two, three, four, five, six\") == 6\n  */\nconst apostrophe_single_quote_count = (s) => {\n  const words = s.split(/[, ]+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of apostrophes and double quotes in the string.\n  \n  For example:\n  apostrophe_double_quote_count(\"Hi, my name is John\") == 2\n  apostrophe_double_quote_count(\"One, two, three, four, five, six\") == 6\n  */\nconst apostrophe_single_quote_count(s) => {\n  const words = s.split(/[, ]+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of apostrophes and single quotes in the string.\n  \n  For example:\n  apostrophe_single_quote_count(\"Hi, my name is John\") == 2\n  apostrophe_single_quote_count(\"One, two, three, four, five, six\") == 6\n  */\nconst apostrophe_double_quote_count(s) => {\n  const words = s.split(/[, ]+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of apostrophes and double quotes in the string.\n  \n  For example:\n  apostrophe_double_quote_count(\"Hi, my name is John\") == 2\n  apostrophe_double_quote_count(\"One, two, three, four, five, six\") == 6\n  */\nconst apostrophe_single_quote_count(s) => {\n  const words = s.split(/[, ]+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of apostrophes and double quotes in the string.\n  \n  For example:\n  apostrophe_double_quote_count(\"Hi, my name is John\") == 2\n  apostrophe_double_quote_count(\"One, two, three, four, five, six\") == 6\n  */\nconst apostrophe_double_quote_count(s) => {\n  const words = s.split(/[, ]+/);\n  return words.length;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task\n  is to return the number of apostrophes and double quotes in the string.\n  \n  For example:\n  apostrophe_double_quote_count(\"Hi, my name is John\") == 2\n  apostrophe_double_quote_count(\"One, two, three, four, five, six\") == 6", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let max_num = -1;\n  let max_even = -1;\n  let even = 0;\n  let odd = 0;\n  let even_index = 0;\n  let odd_index = 0;\n  let even_count = 0;\n  let odd_count = 0;\n  let even_index2 = 0;\n  let odd_index2 = 0;\n  let even_count2 = 0;\n  let odd_count2 = 0;\n  let even_index3 = 0;\n  let odd_index3 = 0;\n  let even_count3 = 0;\n  let odd_count3 = 0;\n  let even_index4 = 0;\n  let odd_index4 = 0;\n  let even_count4 = 0;\n  let odd_count4 = 0;\n  let even_index5 = 0;\n  let odd_index5 = 0;\n  let even_count5 = 0;\n  let odd_count5 = 0;\n  let even_index6 = 0;\n  let odd_index6 = 0;\n  let even_count6 = 0;\n  let odd_count6 = 0;\n  let even_index7 = 0;\n  let odd_index7 = 0;\n  let even_count7 = 0;\n  let odd_count7 = 0;\n  let even_index8 = 0;\n  let odd_index8 = 0;\n  let even_count8 = 0;\n  let odd_count8 = 0;\n  let even_index9 = 0;\n  let odd_index9 = 0;\n  let even_count9 = 0;\n  let odd_count9 = 0;\n  let even_index10 = 0;\n  let odd_index10 = 0;\n  let even_count10 = 0;\n  let odd_count10 = 0;\n  let even_index11 = 0;\n  let odd_index11 = 0;\n  let even_count11 = 0;\n  let odd_count11 = 0;\n  let even_index12 = 0;\n  let odd_index12 = 0;\n  let even_count12 = 0;\n  let odd_count12 = 0;\n  let even_index13 = 0;\n  let odd_index13 = 0;\n  let even_count13 = 0;\n  let odd_count13 = 0;\n  let even_index14 = 0;\n  let odd_index14 = 0;\n  let even_count14 = 0;\n  let odd_count14 = 0;\n  let even_index15 = 0;\n  let odd_index15 = 0;\n  let even_count15 = 0;\n  let odd_count15 = 0;\n  let even_index16 = 0;\n  let odd_index16 = 0;\n  let even_count16 = 0;\n  let odd_count16 = 0;\n  let even_index17 = 0;\n  let odd_index17 = 0;\n  let even_count17 = 0;\n  let odd_count17 = 0;\n  let even_index18 = 0;\n  let odd_index18 = 0;\n  let even_count18 = 0;\n  let odd_count18 = 0;\n  let even_index19 = 0;\n  let odd_index19 = 0;\n  let even_count19 = 0;\n  let odd_count19 = 0;\n  let even_index20 = 0;\n  let odd_index20 = 0;\n  let even_count20 = 0;\n  let odd_count20 = 0;\n  let even_index21 = 0;\n  let odd_index21 = 0;\n  let even_count21 = 0;\n  let odd_count21 = 0;\n  let even_index22 = 0;\n  let odd_index22 = 0;\n  let even_count22 = 0;\n  let odd_count22 = 0;\n  let even_index23 = 0;\n  let odd_index23 = 0;\n  let even_count23 = 0;\n  let odd_count23 = 0;\n  let even_index24 = 0;\n  let odd_index24 = 0;\n  let even_count24 = 0;\n  let odd_count24 = 0;\n  let even_index25 = 0;\n  let odd_index25 = 0;\n  let even_count25 = 0;\n  let odd_count25 = 0;\n  let even_index26 = 0;\n  let odd_index26 = 0;\n  let even_count26 = 0;\n  let odd_count26 = 0;\n  let even_index27 = 0;\n  let odd_index27 = 0;\n  let even_count27 = 0;\n  let odd_count27 = 0;\n  let even_index28 = 0;\n  let odd_index28 = 0;\n  let even_count28 = 0;\n  let odd_count28 = 0;\n  let even_index29 = 0;\n  let odd_index29 = 0;\n  let even_count29 = 0;\n  let odd_count29 = 0;\n  let even_index30 = 0;\n  let odd_index30 = 0;\n  let even_count30 = 0;\n  let odd_count30 = 0;\n  let even_index31 = 0;\n  let odd_index31 = 0;\n  let even_count31 = 0;\n  let odd_count31 = 0;\n  let even_index32 = 0;\n  let odd_index32 = 0;\n  let even_count32 = 0;\n  let odd_count32 = 0;\n  let even_index33 = 0;\n  let odd_index33 = 0;\n  let even_count33 = 0;\n  let odd_count33 = 0;\n  let even_index34 = 0;\n  let odd_index34 = 0;\n  let even_count34 = 0;\n  let odd_count34 = 0;\n  let even_index35 = 0;\n  let odd_index35 = 0;\n  let even_count35 = 0;\n  let odd_count35 = 0;\n  let even_index36 = 0;\n  let odd_index36 = 0;\n  let even_count36 = 0;\n  let odd_count36 = 0;\n  let even_index37 = 0;\n  let odd_index37 = 0;\n  let even_count37 = 0;\n  let odd_count37 = 0;\n  let even_index38 = 0;\n  let odd_index38 = 0;\n  let even_count38 = 0;\n  let odd_count38 = 0;\n  let even_index39 = 0;\n  let odd_index39 = 0;\n  let even_count39 = 0;\n  let odd_count39 = 0;\n  let even_index40 = 0;\n  let odd_index40 = 0;\n  let even_count40 = 0;\n  let odd_count40 = 0;\n  let even_index41 = 0;\n  let odd_index41 = 0;\n  let even_count41 = 0;\n  let odd_count41 = 0;\n  let even_index42 = 0;\n  let odd_index42 = 0;\n  let even_count42 = 0;\n  let odd_count42 = 0;\n  let even_index43 = 0;\n  let odd_index43 = 0;\n  let even_count43 = 0;\n  let odd_count43 = 0;\n  let even_index44 = 0;\n  let odd_index44 = 0;\n  let even_count44 = 0;\n  let odd_count44 = 0;\n  let even_index45 = 0;\n  let odd_index45 = 0;\n  let even_count45 = 0;\n  let odd_count45 = 0;\n  let even_index46 = 0;\n  let odd_index46 = 0;\n  let even_count46 = 0;\n  let odd_count46 = 0;\n  let even_index47 = 0;\n  let odd_index47 = 0;\n  let even_count47 = 0;\n  let odd_count47 = 0;\n  let even_index48 = 0;\n  let odd_index48 = 0;\n  let even_count48 = 0;\n  let odd_count48 = 0;\n  let even_index49 = 0;\n  let odd_index49 = 0;\n  let even_count49 = 0;\n  let odd_count49 = 0;\n  let even_index50 = 0;\n  let odd_index50 = 0;\n  let even_count50 = 0;\n  let odd_count50 = 0;\n  let even_index51 = 0;\n  let odd_index51 = 0;\n  let even_count51 = 0;\n  let odd_count51 = 0;\n  let even_index52 = 0;\n  let odd_index52 = 0;\n  let even_count52 = 0;\n  let odd_count52 = 0;\n  let even_index53 = 0;\n  let odd_index53 = 0;\n  let even_count53 = 0;\n  let odd_count53 = 0;\n  let even_index54 = 0;\n  let odd_index54 = 0;\n  let even_count54 = 0;\n  let odd_count54 = 0;\n  let even_index55 = 0;\n  let odd_index55 = 0;\n  let even_count55 = 0;\n  let odd_count55 = 0;\n  let even_index56 = 0;\n  let odd_index56 = 0;\n  let even_count56 = 0;\n  let odd_count56 = 0;\n  let even_index57 = 0;\n  let odd_index57 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let decimal = 0;\n  let decimals = 2;\n  let decimals_remainder = 0;\n  let decimals_remainder2 = 0;\n  let decimals_remainder3 = 0;\n  let decimals_remainder4 = 0;\n  let decimals_remainder5 = 0;\n  let decimals_remainder6 = 0;\n  let decimals_remainder7 = 0;\n  let decimals_remainder8 = 0;\n  let decimals_remainder9 = 0;\n  let decimals_remainder10 = 0;\n  let decimals_remainder11 = 0;\n  let decimals_remainder12 = 0;\n  let decimals_remainder13 = 0;\n  let decimals_remainder14 = 0;\n  let decimals_remainder15 = 0;\n  let decimals_remainder16 = 0;\n  let decimals_remainder17 = 0;\n  let decimals_remainder18 = 0;\n  let decimals_remainder19 = 0;\n  let decimals_remainder20 = 0;\n  let decimals_remainder21 = 0;\n  let decimals_remainder22 = 0;\n  let decimals_remainder23 = 0;\n  let decimals_remainder24 = 0;\n  let decimals_remainder25 = 0;\n  let decimals_remainder26 = 0;\n  let decimals_remainder27 = 0;\n  let decimals_remainder28 = 0;\n  let decimals_remainder29 = 0;\n  let decimals_remainder30 = 0;\n  let decimals_remainder31 = 0;\n  let decimals_remainder32 = 0;\n  let decimals_remainder33 = 0;\n  let decimals_remainder34 = 0;\n  let decimals_remainder35 = 0;\n  let decimals_remainder36 = 0;\n  let decimals_remainder37 = 0;\n  let decimals_remainder38 = 0;\n  let decimals_remainder39 = 0;\n  let decimals_remainder40 = 0;\n  let decimals_remainder41 = 0;\n  let decimals_remainder42 = 0;\n  let decimals_remainder43 = 0;\n  let decimals_remainder44 = 0;\n  let decimals_remainder45 = 0;\n  let decimals_remainder46 = 0;\n  let decimals_remainder47 = 0;\n  let decimals_remainder48 = 0;\n  let decimals_remainder49 = 0;\n  let decimals_remainder50 = 0;\n  let decimals_remainder51 = 0;\n  let decimals_remainder52 = 0;\n  let decimals_remainder53 = 0;\n  let decimals_remainder54 = 0;\n  let decimals_remainder55 = 0;\n  let decimals_remainder56 = 0;\n  let decimals_remainder57 = 0;\n  let decimals_remainder58 = 0;\n  let decimals_remainder59 = 0;\n  let decimals_remainder60 = 0;\n  let decimals_remainder61 = 0;\n  let decimals_remainder62 = 0;\n  let decimals_remainder63 = 0;\n  let decimals_remainder64 = 0;\n  let decimals_remainder65 = 0;\n  let decimals_remainder66 = 0;\n  let decimals_remainder67 = 0;\n  let decimals_remainder68 = 0;\n  let decimals_remainder69 = 0;\n  let decimals_remainder70 = 0;\n  let decimals_remainder71 = 0;\n  let decimals_remainder72 = 0;\n  let decimals_remainder73 = 0;\n  let decimals_remainder74 = 0;\n  let decimals_remainder75 = 0;\n  let decimals_remainder76 = 0;\n  let decimals_remainder77 = 0;\n  let decimals_remainder78 = 0;\n  let decimals_remainder79 = 0;\n  let decimals_remainder80 = 0;\n  let decimals_remainder81 = 0;\n  let decimals_remainder82 = 0;\n  let decimals_remainder83 = 0;\n  let decimals_remainder84 = 0;\n  let decimals_remainder85 = 0;\n  let decimals_remainder86 = 0;\n  let decimals_remainder87 = 0;\n  let decimals_remainder88 = 0;\n  let decimals_remainder89 = 0;\n  let decimals_remainder90 = 0;\n  let decimals_remainder91 = 0;\n  let decimals_remainder92 = 0;\n  let decimals_remainder93 = 0;\n  let decimals_remainder94 = 0;\n  let decimals_remainder95 = 0;\n  let decimals_remainder96 = 0;\n  let decimals_remainder97 = 0;\n  let decimals_remainder98 = 0;\n  let decimals_remainder99 = 0;\n  let decimals_remainder100 = 0;\n  let decimals_remainder101 = 0;\n  let decimals_remainder102 = 0;\n  let decimals_remainder103 = 0;\n  let decimals_remainder104 = 0;\n  let decimals_remainder105 = 0;\n  let decimals_remainder106 = 0;\n  let decimals_remainder107 = 0;\n  let decimals_remainder108 = 0;\n  let decimals_remainder109 = 0;\n  let decimals_remainder110 = 0;\n  let decimals_remainder111 = 0;\n  let decimals_remainder112 = 0;\n  let decimals_remainder113 = 0;\n  let decimals_remainder114 = 0;\n  let decimals_remainder115 = 0;\n  let decimals_remainder116 = 0;\n  let decimals_remainder117 = 0;\n  let decimals_remainder118 = 0;\n  let decimals_remainder119 = 0;\n  let decimals_remainder120 = 0;\n  let decimals_remainder121 = 0;\n  let decimals_remainder122 = 0;\n  let decimals_remainder123 = 0;\n  let decimals_remainder124 = 0;\n  let decimals_remainder125 = 0;\n  let decimals_remainder126 = 0;\n  let decimals_remainder127 = 0;\n  let decimals_remainder128 = 0;\n  let decimals_remainder129 = 0;\n  let decimals_remainder130 = 0;\n  let decimals_remainder131 = 0;\n  let decimals_remainder132 = 0;\n  let decimals_remainder133 = 0;\n  let decimals_remainder134 = 0;\n  let decimals_remainder135 = 0;\n  let decimals_remainder136 = 0;\n  let decimals_remainder137 = 0;\n  let decimals_remainder138 = 0;\n  let decimals_remainder139 = 0;\n  let decimals_remainder140 = 0;\n  let decimals_remainder141 = 0;\n  let decimals_remainder142 = 0;\n  let decimals_remainder143 = 0;\n  let decimals_remainder144 = 0;\n  let decimals_remainder145 = 0;\n  let decimals_remainder146 = 0;\n  let decimals_remainder147 = 0;\n  let decimals_remainder148 = 0;\n  let decimals_remainder149 = 0;\n  let decimals_remainder150 = 0;\n  let decimals_remainder151 = 0;\n  let decimals_remainder152 = 0;\n  let decimals_remainder153 = 0;\n  let decimals_remainder154 = 0;\n  let decimals_remainder155 = 0;\n  let decimals_remainder156 = 0;\n  let decimals_remainder157 = 0;\n  let decimals_remainder158 = 0;\n  let decimals_remainder159 = 0;\n  let decimals_remainder160 = 0;\n  let decimals_remainder161 = 0;\n  let decimals_remainder162 = 0;\n  let decimals_remainder163 = 0;\n  let decimals_remainder164 = 0;\n  let decimals_remainder165 = 0;\n  let decimals_remainder166 = 0;\n  let decimals_remainder167 = 0;\n  let decimals_remainder168 = 0;\n  let decimals_remainder169 = 0;\n  let decimals_remainder170 = 0;\n  let decimals_remainder171 = 0;\n  let decimals_remainder172 = 0;\n  let decimals_remainder173 = 0;\n  let decimals_remainder174 = 0;\n  let decimals_remainder175 = 0;\n  let decimal", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  let result = []\n  let digit = 0\n  while (x[digit] % 2!== 0) {\n    digit++\n  }\n  while (x[digit] % 2!== 0) {\n    digit--\n  }\n  while (x[digit] % 2 === 0) {\n    result.push(x[digit])\n    digit--\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_digits = (x) => {\n  let result = []\n  let digit = 0\n  while (x[digit] % 2!== 0) {\n    digit++\n  }\n  while (x[digit] % 2!== 0) {\n    digit--\n  }\n  while (x[digit] % 2!== 0) {\n    result.push(x[digit])\n    digit--\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_even_digits = (x) => {\n  let result = []\n  let digit = 0\n  while (x[digit] % 2!== 0) {\n    digit++\n  }\n  while (x[digit] % 2!== 0) {\n    digit--\n  }\n  while (x[digit] % 2!== 0) {\n    result.push(x[digit])\n    digit--\n  }\n  return result\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_even_digits = (x) => {\n  let result = []\n  let digit = 0\n  while (x[digit] % 2!== 0) {\n    digit++\n  }\n  while (x[digit] % 2!== 0) {\n    digit--\n  }\n  while (x[digit] % 2!== 0) {\n    result.push(x[digit])\n    digit--\n  }\n  return unique_odd_digits(unique_even_digits(result))\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_even_digits_reversed = (x) => {\n  let result = []\n  let digit = 0\n  while (x[digit] % 2!== 0) {\n    digit++\n  }\n  while (x[digit] % 2!== 0) {\n    digit--\n  }\n  while (x[digit] % 2!== 0) {\n    result.push(x[digit])\n    digit--\n  }\n  return unique_odd_digits(unique_even_digits(result)).reverse()\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_even_digits_reversed_reversed = (x) => {\n  let result = []\n  let digit = 0\n  while (x[digit] % 2!== 0) {\n    digit++\n  }\n  while (x[digit] % 2!== 0) {\n    digit--\n  }\n  while (x[digit] % 2!== 0) {\n    result.push(x[digit])\n    digit--\n  }\n  return unique_odd_digits(unique_even_digits(result)).reverse()\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_even_digits_reversed_reversed_reversed = (x) => {\n  let result = []\n  let digit = 0\n  while (x[digit] % 2!== 0) {\n    digit++\n  }\n  while (x[digit] % 2!== 0) {\n    digit--\n  }\n  while (x[digit] % 2!== 0) {\n    result.push(x[digit])\n    digit--\n  }\n  return unique_odd_digits(unique_even_digits(result)).reverse()\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_even_digits_reversed_reversed_reversed_reversed = (x) => {\n  let result = []\n  let digit = 0\n  while (x[digit] % 2!== 0) {\n    digit++\n  }\n  while (x[digit] % 2!== 0) {\n    digit--\n  }\n  while (x[digit] % 2!== 0) {\n    result.push(x[digit])\n    digit--\n  }\n  return unique_odd_digits(unique_even_digits(result)).reverse()\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_even_digits_reversed_reversed_reversed_reversed_reversed = (x) => {\n  let result = []\n  let digit = 0\n  while (x[digit] % 2!== 0) {\n    digit++\n  }\n  while (x[digit] % 2!== 0) {\n    digit--\n  }\n  while (x[digit] % 2!== 0) {\n    result.push(x[digit])\n    digit--\n  }\n  return unique_odd_digits(unique_even_digits(result)).reverse()\n}\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversed_len = reversed.length;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    const num = reversed[i];\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num];\n    result.push(name);\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_name = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversed_len = reversed.length;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    const num = reversed[i];\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num];\n    result.push(name);\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_digit = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversed_len = reversed.length;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    const num = reversed[i];\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num];\n    result.push(name);\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_digits = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversed_len = reversed.length;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    const num = reversed[i];\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num];\n    result.push(name);\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_digits_reversed = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversed_len = reversed.length;\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    const num = reversed[i];\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][num];\n    result.push(name);\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_digits_reversed_reversed = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((a, b) => a * b, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [2, 3, 5, 7, 11]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((a, b) => a % b, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [2, 3, 5, 7, 11]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((a, b) => a % b, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [2, 3, 5, 7, 11]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((a, b) => a % b, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [2, 3, 5, 7, 11]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((a, b) => a % b, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [2, 3, 5, 7, 11]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((a, b) => a % b, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [2, 3, 5, 7, 11]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((a, b) => a % b, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [2, 3, 5, 7, 11]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((a, b) => a % b, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [2, 3, 5, 7, 11]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((a, b) => a % b, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [2, 3, 5, 7, 11]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((a, b) => a % b, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      palindromes.push(i);\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(2, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome_2 = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      palindromes.push(i);\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(3, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (3, 4)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome_3 = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      palindromes.push(i);\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(4, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome_4 = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      palindromes.push(i);\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(5, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (5, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. five of them are even, and six of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (5, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. five of them are even, and six of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome_5 = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      palindromes.push(i);\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(6, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (6, 7)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. six of them are even, and seven of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (6, 7)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. six of them are even, and seven of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome_6 = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      palindromes.push(i);\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(7, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (7, 8)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. seven of them are even, and eight of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (7, 8)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. seven of them are even, and eight of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome_7 = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      palindromes.push(i);\n    }\n  }\n  return palindromes;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(8, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (8, 9)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. eight of them are even", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "<|endoftext|>/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_evens which takes an array of integers and returns\n  the number of elements which has even number of digits (i.e. even\n  number of digits in each element).\n  >>> count_evens([]) == 0\n  >>> count_evens([-1, 11, -11]) == 1\n  >>> count_evens([1, 1, 2]) == 2\n  */\nconst count_evens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_odds which takes an array of integers and returns\n  the number of elements which has odd number of digits (i.e. odd\n  number of digits in each element).\n  >>> count_odds([]) == 0\n  >>> count_odds([-1, 11, -11]) == 1\n  >>> count_odds([1, 1, 2]) == 1\n  */\nconst count_odds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_zeros which takes an array of integers and returns\n  the number of elements which has zero number of digits (i.e. zero\n  number of digits in each element).\n  >>> count_zeros([]) == 0\n  >>> count_zeros([-1, 11, -11]) == 1\n  >>> count_zeros([1, 1, 2]) == 0\n  */\nconst count_zeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_negatives which takes an array of integers and\n  returns an array of integers whose elements are the negative of each\n  element in the array.\n  >>> count_negatives([]) == 0\n  >>> count_negatives([-1, 11, -11]) == [-1, -10, -11]\n  >>> count_negatives([1, 1, 2]) == [-1, 1, 2]\n  */\nconst count_negatives = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_positives which takes an array of integers and\n  returns an array of integers whose elements are the positive of each\n  element in the array.\n  >>> count_positives([]) == 0\n  >>> count_positives([-1, 11, -11]) == [1, 11, -11]\n  >>> count_positives([1, 1, 2]) == [1, 1, 2]\n  */\nconst count_positives = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_zeros_or_negatives which takes an array of integers\n  and returns an array of integers whose elements are the zero or negative\n  of each element in the array.\n  >>> count_zeros_or_negatives([]) == 0\n  >>> count_zeros_or_negatives([-1, 11, -11]) == [-1, -10, -11]\n  >>> count_zeros_or_negatives([1, 1, 2]) == [-1, 1, 2]\n  */\nconst count_zeros_or_negatives = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      result.push(arr[i]);\n    } else if (arr[i] < 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_zeros_or_positives which takes an array of integers\n  and returns an array of integers whose elements are the zero or positive\n  of each element in the array.\n  >>> count_zeros_or_positives([]) == 0\n  >>> count_zeros_or_positives([-1, 11, -11]) == [1, 11, -11]\n  >>> count_zeros_or_positives([1, 1, 2]) == [1, 1, 2]\n  */\nconst count_zeros_or_positives = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result.push(arr[i]);\n    } else if (arr[i] < 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_negatives_or_zeros which takes an array of integers\n  and returns an array of integers whose elements are the negative or zero\n  of each element in the array.\n  >>> count_negatives_or_zeros([]) == 0\n  >>> count_negatives_or_zeros([-1, 11, -11]) == [-1, -10, -11]\n  >>> count_negatives_or_zeros([1, 1, 2]) == [-1, 1, 2]\n  */\nconst count_negatives_or_zeros = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      result.push(arr[i]);\n    } else if (arr[i] === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_negatives_or_positives which takes an array of integers\n  and returns an array of integers whose elements are the negative or positive\n  of each element in the array.\n  >>> count_negatives_or_positives([]) == 0\n  >>> count_negatives_or_positives([-1, 11, -11]) == [1, 11, -11]\n  >>> count_negatives_or_positives([1, 1, 2]) == [1, 1, 2]\n  */\nconst count_negatives_or_positives = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      result.push(arr[i]);\n    } else if (arr[i] > 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_odd_or_evens which takes an array of integers and\n  returns an array of integers whose elements are the odd or even number of\n  digits in each element.\n  >>> count_odd_or_evens([]) == 0\n  >>> count_odd_or_evens([-1, 11, -11]) == [-1, -10, -11]\n  >>> count_odd_or_evens([1, 1, 2]) == [-1, 1, 2]\n  */\nconst count_odd_or_evens = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_evens_or_odds which takes an array of integers and\n  returns an array of integers whose elements are the even or odd number of\n  digits in each element.\n  >>> count_evens_or_odds([]) == 0\n  >>> count_evens_or_odds([-1, 11, -11]) == [1, 11, -11]\n  >>> count_evens_or_odds([1, 1, 2]) == [1, 1, 2]\n  */\nconst count_evens_or_odds = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function count_odd_or_evens_or_zeros which takes an array of integers\n  and returns an array of integers whose elements are the odd or even number of\n  digits in each element.\n  >>> count_odd_or_evens_or_zeros([]) == 0\n  >>> count_odd_or_evens_or_zeros([-1, 11, -11]) == [-1, -10, -11]\n  >>> count_odd_or_evens_or_zeros([1, 1, 2]) == [-1, 1, 2]\n  */\nconst count_odd_or_evens_or_zeros = (arr) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  let len = arr.length;\n  let count = 0;\n  let arr1 = [];\n  let arr2 = [];\n  let arr3 = [];\n  let arr4 = [];\n  let arr5 = [];\n  let arr6 = [];\n  let arr7 = [];\n  let arr8 = [];\n  let arr9 = [];\n  let arr10 = [];\n  let arr11 = [];\n  let arr12 = [];\n  let arr13 = [];\n  let arr14 = [];\n  let arr15 = [];\n  let arr16 = [];\n  let arr17 = [];\n  let arr18 = [];\n  let arr19 = [];\n  let arr20 = [];\n  let arr21 = [];\n  let arr22 = [];\n  let arr23 = [];\n  let arr24 = [];\n  let arr25 = [];\n  let arr26 = [];\n  let arr27 = [];\n  let arr28 = [];\n  let arr29 = [];\n  let arr30 = [];\n  let arr31 = [];\n  let arr32 = [];\n  let arr33 = [];\n  let arr34 = [];\n  let arr35 = [];\n  let arr36 = [];\n  let arr37 = [];\n  let arr38 = [];\n  let arr39 = [];\n  let arr40 = [];\n  let arr41 = [];\n  let arr42 = [];\n  let arr43 = [];\n  let arr44 = [];\n  let arr45 = [];\n  let arr46 = [];\n  let arr47 = [];\n  let arr48 = [];\n  let arr49 = [];\n  let arr50 = [];\n  let arr51 = [];\n  let arr52 = [];\n  let arr53 = [];\n  let arr54 = [];\n  let arr55 = [];\n  let arr56 = [];\n  let arr57 = [];\n  let arr58 = [];\n  let arr59 = [];\n  let arr60 = [];\n  let arr61 = [];\n  let arr62 = [];\n  let arr63 = [];\n  let arr64 = [];\n  let arr65 = [];\n  let arr66 = [];\n  let arr67 = [];\n  let arr68 = [];\n  let arr69 = [];\n  let arr70 = [];\n  let arr71 = [];\n  let arr72 = [];\n  let arr73 = [];\n  let arr74 = [];\n  let arr75 = [];\n  let arr76 = [];\n  let arr77 = [];\n  let arr78 = [];\n  let arr79 = [];\n  let arr80 = [];\n  let arr81 = [];\n  let arr82 = [];\n  let arr83 = [];\n  let arr84 = [];\n  let arr85 = [];\n  let arr86 = [];\n  let arr87 = [];\n  let arr88 = [];\n  let arr89 = [];\n  let arr90 = [];\n  let arr91 = [];\n  let arr92 = [];\n  let arr93 = [];\n  let arr94 = [];\n  let arr95 = [];\n  let arr96 = [];\n  let arr97 = [];\n  let arr98 = [];\n  let arr99 = [];\n  let arr100 = [];\n  let arr101 = [];\n  let arr102 = [];\n  let arr103 = [];\n  let arr104 = [];\n  let arr105 = [];\n  let arr106 = [];\n  let arr107 = [];\n  let arr108 = [];\n  let arr109 = [];\n  let arr110 = [];\n  let arr111 = [];\n  let arr112 = [];\n  let arr113 = [];\n  let arr114 = [];\n  let arr115 = [];\n  let arr116 = [];\n  let arr117 = [];\n  let arr118 = [];\n  let arr119 = [];\n  let arr120 = [];\n  let arr121 = [];\n  let arr122 = [];\n  let arr123 = [];\n  let arr124 = [];\n  let arr125 = [];\n  let arr126 = [];\n  let arr127 = [];\n  let arr128 = [];\n  let arr129 = [];\n  let arr130 = [];\n  let arr131 = [];\n  let arr132 = [];\n  let arr133 = [];\n  let arr134 = [];\n  let arr135 = [];\n  let arr136 = [];\n  let arr137 = [];\n  let arr138 = [];\n  let arr139 = [];\n  let arr140 = [];\n  let arr141 = [];\n  let arr142 = [];\n  let arr143 = [];\n  let arr144 = [];\n  let arr145 = [];\n  let arr146 = [];\n  let arr147 = [];\n  let arr148 = [];\n  let arr149 = [];\n  let arr150 = [];\n  let arr151 = [];\n  let arr152 = [];\n  let arr153 = [];\n  let arr154 = [];\n  let arr155 = [];\n  let arr156 = [];\n  let arr157 = [];\n  let arr158 = [];\n  let arr159 = [];\n  let arr160 = [];\n  let arr161 = [];\n  let arr162 = [];\n  let arr163 = [];\n  let arr164 = [];\n  let arr165 = [];\n  let arr166 = [];\n  let arr167 = [];\n  let arr168 = [];\n  let arr169 = [];\n  let arr170 = [];\n  let arr171 = [];\n  let arr172 = [];\n  let arr173 = [];\n  let arr174 = [];\n  let arr175 = [];\n  let arr176 = [];\n  let arr177 = [];\n  let arr178 = [];\n  let arr179 = [];\n  let arr180 = [];\n  let arr181 = [];\n  let arr182 = [];\n  let arr183 = [];\n  let arr184 = [];\n  let arr185 = [];\n  let arr186 = [];\n  let arr187 = [];\n  let arr188 = [];\n  let arr189 = [];\n  let arr190 = [];\n  let arr191 = [];\n  let arr192 = [];\n  let arr193 = [];\n  let arr194 = [];\n  let arr195 = [];\n  let arr196 = [];\n  let arr197 = [];\n  let arr198 = [];\n  let arr199 = [];\n  let arr200 = [];\n  let arr201 = [];\n  let arr202 = [];\n  let arr203 = [];\n  let arr204 = [];\n  let arr205 = [];\n  let arr206 = [];\n  let arr207 = [];\n  let arr208 = [];\n  let arr209 = [];\n  let arr210 = [];\n  let arr211 = [];\n  let arr212 = [];\n  let arr213 = [];\n  let arr214 = [];\n  let arr215 = [];\n  let arr216 = [];\n  let arr217 = [];\n  let arr218 = [];\n  let arr219 = [];\n  let arr220 = [];\n  let arr221 = [];\n  let arr222 = [];\n  let arr223 = [];\n  let arr224 = [];\n  let arr225 = [];\n  let arr226 = [];\n  let arr227 = [];\n  let arr228 = [];\n  let arr229 = [];\n  let arr230 = [];\n  let arr231 = [];\n  let arr232 = [];\n  let arr233 = [];\n  let arr234 = [];\n  let arr235 = [];\n  let arr236 = [];\n  let arr237 = [];\n  let arr238 = [];\n  let arr239 = [];\n  let arr240 = [];\n  let arr241 = [];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '100'\n  */\nconst string_or = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '100'\n  */\nconst string_or = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '100'\n  */\nconst string_or = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '100'\n  */\nconst string_or = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '100'\n  */\nconst string_or = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] ^ b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] & b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '100'\n  */\nconst string_or = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += String.fromCharCode(a[i] | b[i]);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = true;\n  if (lst1.length < lst2.length) {\n    result = false;\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order (i.e., from smallest to largest).\n  For example:\n  isSorted([5, 2, 1, 3]) => true\n  isSorted([5, 2, 1, 3]) => false\n  It is assumed that the input array will be non-empty.\n  */\nconst isSorted = (arr) => {\n  let result = true;\n  if (arr.length < 2) {\n    result = false;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in descending order (i.e., from largest to smallest).\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isDescending = (arr) => {\n  let result = true;\n  if (arr.length < 2) {\n    result = false;\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > arr[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order (i.e., from smallest to largest).\n  For example:\n  isSorted([5, 2, 1, 3]) => true\n  isSorted([5, 2, 1, 3]) => false\n  It is assumed that the input array will be non-empty.\n  */\nconst isSorted = (arr) => {\n  let result = true;\n  if (arr.length < 2) {\n    result = false;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in descending order (i.e., from largest to smallest).\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isDescending = (arr) => {\n  let result = true;\n  if (arr.length < 2) {\n    result = false;\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < arr[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order (i.e., from smallest to largest).\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isSorted = (arr) => {\n  let result = true;\n  if (arr.length < 2) {\n    result = false;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in descending order (i.e., from largest to smallest).\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isDescending = (arr) => {\n  let result = true;\n  if (arr.length < 2) {\n    result = false;\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < arr[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order (i.e., from smallest to largest).\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isSorted = (arr) => {\n  let result = true;\n  if (arr.length < 2) {\n    result = false;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in descending order (i.e., from largest to smallest).\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isDescending = (arr) => {\n  let result = true;\n  if (arr.length < 2) {\n    result = false;\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < arr[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order (i.e., from smallest to largest).\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isSorted = (arr) => {\n  let result = true;\n  if (arr.length < 2) {\n    result = false;\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in descending order (i.e., from largest to smallest).\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isDescending = (arr) => {\n  let result = true;\n  if (arr.length < 2) {\n    result = false;\n  }\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < arr[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order (i.e., from smallest to largest).\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isSorted = (arr) => {\n  let result = true;\n  if (arr.length < 2) {\n    result = false;\n  }\n  for (let i = 0; i < arr.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let letters = test.split(' ');\n  let counts = {};\n  letters.forEach((letter) => {\n    counts[letter] = counts[letter] || 0;\n    counts[letter]++;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst count = (test) => {\n  let letters = test.split(' ');\n  let counts = {};\n  letters.forEach((letter) => {\n    counts[letter] = counts[letter] || 0;\n    counts[letter]++;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst max = (test) => {\n  let letters = test.split(' ');\n  let counts = {};\n  letters.forEach((letter) => {\n    counts[letter] = counts[letter] || 0;\n    counts[letter]++;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst min = (test) => {\n  let letters = test.split(' ');\n  let counts = {};\n  letters.forEach((letter) => {\n    counts[letter] = counts[letter] || 0;\n    counts[letter]++;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst average = (test) => {\n  let letters = test.split(' ');\n  let counts = {};\n  letters.forEach((letter) => {\n    counts[letter] = counts[letter] || 0;\n    counts[letter]++;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst median = (test) => {\n  let letters = test.split(' ');\n  let counts = {};\n  letters.forEach((letter) => {\n    counts[letter] = counts[letter] || 0;\n    counts[letter]++;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst mode = (test) => {\n  let letters = test.split(' ');\n  let counts = {};\n  letters.forEach((letter) => {\n    counts[letter] = counts[letter] || 0;\n    counts[letter]++;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst modes = (test) => {\n  let letters = test.split(' ');\n  let counts = {};\n  letters.forEach((letter) => {\n    counts[letter] = counts[letter] || 0;\n    counts[letter]++;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst unique = (test) => {\n  let letters = test.split(' ');\n  let counts = {};\n  letters.forEach((letter) => {\n    counts[letter] = counts[letter] || 0;\n    counts[letter]++;\n  });\n  return counts;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  let result = '';\n  let flag = true;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == c[0]) {\n      flag = false;\n      result += s.slice(i, s.length - 1);\n    } else {\n      result += s[i];\n    }\n  }\n  return [result, flag];\n};\n\n/*Task\n  Given a string s and an integer n, return true if and only if the string is a palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  Example\n  For s = \"abcde\", n = 2, the result should be true\n  For s = \"abcde\", n = 4, the result should be false\n  For s = \"abcde\", n = 6, the result should be false\n  For s = \"abcde\", n = 8, the result should be true\n  For s = \"abcde\", n = 10, the result should be false\n  For s = \"abcde\", n = 12, the result should be false\n  For s = \"abcde\", n = 14, the result should be true\n  For s = \"abcde\", n = 16, the result should be false\n  For s = \"abcde\", n = 18, the result should be true\n  For s = \"abcde\", n = 20, the result should be false\n  For s = \"abcde\", n = 22, the result should be false\n  For s = \"abcde\", n = 24, the result should be true\n  For s = \"abcde\", n = 26, the result should be false\n  For s = \"abcde\", n = 28, the result should be true\n  For s = \"abcde\", n = 30, the result should be false\n  For s = \"abcde\", n = 32, the result should be false\n  For s = \"abcde\", n = 34, the result should be true\n  For s = \"abcde\", n = 36, the result should be false\n  For s = \"abcde\", n = 38, the result should be true\n  For s = \"abcde\", n = 40, the result should be false\n  For s = \"abcde\", n = 42, the result should be false\n  For s = \"abcde\", n = 44, the result should be true\n  For s = \"abcde\", n = 46, the result should be false\n  For s = \"abcde\", n = 48, the result should be true\n  For s = \"abcde\", n = 50, the result should be false\n  For s = \"abcde\", n = 52, the result should be false\n  For s = \"abcde\", n = 54, the result should be true\n  For s = \"abcde\", n = 56, the result should be false\n  For s = \"abcde\", n = 58, the result should be true\n  For s = \"abcde\", n = 60, the result should be false\n  For s = \"abcde\", n = 62, the result should be false\n  For s = \"abcde\", n = 64, the result should be true\n  For s = \"abcde\", n = 66, the result should be false\n  For s = \"abcde\", n = 68, the result should be true\n  For s = \"abcde\", n = 70, the result should be false\n  For s = \"abcde\", n = 72, the result should be false\n  For s = \"abcde\", n = 74, the result should be true\n  For s = \"abcde\", n = 76, the result should be false\n  For s = \"abcde\", n = 78, the result should be true\n  For s = \"abcde\", n = 80, the result should be false\n  For s = \"abcde\", n = 82, the result should be false\n  For s = \"abcde\", n = 84, the result should be true\n  For s = \"abcde\", n = 86, the result should be false\n  For s = \"abcde\", n = 88, the result should be true\n  For s = \"abcde\", n = 90, the result should be false\n  For s = \"abcde\", n = 92, the result should be false\n  For s = \"abcde\", n = 94, the result should be true\n  For s = \"abcde\", n = 96, the result should be false\n  For s = \"abcde\", n = 98, the result should be true\n  For s = \"abcde\", n = 100, the result should be false\n  For s = \"abcde\", n = 102, the result should be false\n  For s = \"abcde\", n = 104, the result should be true\n  For s = \"abcde\", n = 106, the result should be false\n  For s = \"abcde\", n = 108, the result should be true\n  For s = \"abcde\", n = 110, the result should be false\n  For s = \"abcde\", n = 112, the result should be false\n  For s = \"abcde\", n = 114, the result should be true\n  For s = \"abcde\", n = 116, the result should be false\n  For s = \"abcde\", n = 118, the result should be false\n  For s = \"abcde\", n = 120, the result should be true\n  For s = \"abcde\", n = 122, the result should be false\n  For s = \"abcde\", n = 124, the result should be true\n  For s = \"abcde\", n = 126, the result should be false\n  For s = \"abcde\", n = 128, the result should be true\n  For s = \"abcde\", n = 130, the result should be false\n  For s = \"abcde\", n = 132, the result should be false\n  For s = \"abcde\", n = 134, the result should be true\n  For s = \"abcde\", n = 136, the result should be false\n  For s = \"abcde\", n = 138, the result should be true\n  For s = \"abcde\", n = 140, the result should be false\n  For s = \"abcde\", n = 142, the result should be false\n  For s = \"abcde\", n = 144, the result should be true\n  For s = \"abcde\", n = 146, the result should be false\n  For s = \"abcde\", n = 148, the result should be true\n  For s = \"abcde\", n = 150, the result should be false\n  For s = \"abcde\", n = 152, the result should be false\n  For s = \"abcde\", n = 154, the result should be true\n  For s = \"abcde\", n = 156, the result should be false\n  For s = \"abcde\", n = 158, the result should be true\n  For s = \"abcde\", n = 160, the result should be false\n  For s = \"abcde\", n = 162, the result should be false\n  For s = \"abcde\", n = 164, the result should be true\n  For s = \"abcde\", n = 166, the result should be false\n  For s = \"abcde\", n = 168, the result should be true\n  For s = \"abcde\", n = 170, the result should be false\n  For s = \"abcde\", n = 172, the result should be false\n  For s = \"abcde\", n = 174, the result should be true\n  For s = \"abcde\", n = 176, the result should be false\n  For s = \"abcde\", n = 178, the result should be true\n  For s = \"abcde\", n = 180, the result should be false\n  For s = \"abcde\", n = 182, the result should be false\n  For s = \"abcde\", n = 184, the result should be true\n  For s = \"abcde\", n = 186, the result should be false\n  For s = \"abcde\", n = 188, the result should be true\n  For s = \"abcde\", n = 190, the result should be false\n  For s = \"abcde\", n = 192, the result should be false\n  For s = \"abcde\", n = 194, the result should be true\n  For s = \"abcde\", n = 196, the result should be false\n  For s = \"abcde\", n = 198, the result should be true\n  For s = \"abcde\", n = 200, the result should be false\n  For s = \"abcde\", n = 202, the result should be false\n  For s = \"abcde\", n = 204, the result should be true\n  For s = \"abcde\", n = 206, the result should be false\n  For s = \"abcde\", n = 208, the result should be true\n  For s = \"abcde\", n = 210, the result should be false\n  For ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  let odd_count = []\n  for (let i = 0; i < lst.length; i++) {\n    let odd_num = 0\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        odd_num++\n      }\n    }\n    odd_count.push(odd_num)\n  }\n  return odd_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> even_count(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_count(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_count = (lst) => {\n  let even_count = []\n  for (let i = 0; i < lst.length; i++) {\n    let even_num = 0\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        even_num++\n      }\n    }\n    even_count.push(even_num)\n  }\n  return even_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of pairs of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of pairs of odd digits in the i'th string of the input.\n\n  >>> pair_count('1234567')\n  [\"the number of pairs of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> pair_count('3',\"11111111\")\n  [\"the number of pairs of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of pairs of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst pair_count = (lst) => {\n  let pair_count = []\n  for (let i = 0; i < lst.length; i++) {\n    let pair_count = []\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        pair_count.push(j)\n      }\n    }\n    pair_count.push(pair_count)\n  }\n  return pair_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of triples of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of triples of odd digits in the i'th string of the input.\n\n  >>> triple_count('1234567')\n  [\"the number of triples of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> triple_count('3',\"11111111\")\n  [\"the number of triples of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of triples of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst triple_count = (lst) => {\n  let triple_count = []\n  for (let i = 0; i < lst.length; i++) {\n    let triple_count = []\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        triple_count.push(j)\n      }\n    }\n    triple_count.push(triple_count)\n  }\n  return triple_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quads of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of quads of odd digits in the i'th string of the input.\n\n  >>> quad_count('1234567')\n  [\"the number of quads of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> quad_count('3',\"11111111\")\n  [\"the number of quads of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of quads of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quad_count = (lst) => {\n  let quad_count = []\n  for (let i = 0; i < lst.length; i++) {\n    let quad_count = []\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        quad_count.push(j)\n      }\n    }\n    quad_count.push(quad_count)\n  }\n  return quad_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quints of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of quints of odd digits in the i'th string of the input.\n\n  >>> quint_count(['1234567'])\n  [\"the number of quints of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> quint_count(['3',\"11111111\"])\n  [\"the number of quints of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of quints of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quint_count = (lst) => {\n  let quint_count = []\n  for (let i = 0; i < lst.length; i++) {\n    let quint_count = []\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        quint_count.push(j)\n      }\n    }\n    quint_count.push(quint_count)\n  }\n  return quint_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of hexadecimal elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of hexadecimal digits in the i'th string of the input.\n\n  >>> hexadecimal_count(['1234567'])\n  [\"the number of hexadecimal elements 4n the str4ng 4 of the 4nput.\"]\n  >>> hexadecimal_count(['3',\"11111111\"])\n  [\"the number of hexadecimal elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of hexadecimal elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst hexadecimal_count = (lst) => {\n  let hexadecimal_count = []\n  for (let i = 0; i < lst.length; i++) {\n    let hexadecimal_count = []\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        hexadecimal_count.push(j)\n      }\n    }\n    hexadecimal_count.push(hexadecimal_count)\n  }\n  return hexadecimal_count\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of binary elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  max_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst max_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.max(sum, 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  min_distinct_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  min_distinct_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst min_distinct_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.min((nums.length - sum), 0);\n};\n\n/*\n  Given an array of integers nums, find the maximum number of distinct sub-arrays\n  of nums.\n  Example\n  max_distinct_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  max_distinct_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst max_distinct_sub_array_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.max((nums.length - sum), 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  min_distinct_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  min_distinct_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst min_distinct_sub_array_sum_with_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.min((nums.length - sum), 0);\n};\n\n/*\n  Given an array of integers nums, find the maximum number of distinct sub-arrays\n  of nums.\n  Example\n  max_distinct_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  max_distinct_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst max_distinct_sub_array_sum_with_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.max((nums.length - sum), 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  min_distinct_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  min_distinct_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst min_distinct_sub_array_sum_with_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.min((nums.length - sum), 0);\n};\n\n/*\n  Given an array of integers nums, find the maximum number of distinct sub-arrays\n  of nums.\n  Example\n  max_distinct_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  max_distinct_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst max_distinct_sub_array_sum_with_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.max((nums.length - sum), 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  min_distinct_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  min_distinct_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst min_distinct_sub_array_sum_with_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.min((nums.length - sum), 0);\n};\n\n/*\n  Given an array of integers nums, find the maximum number of distinct sub-arrays\n  of nums.\n  Example\n  max_distinct_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  max_distinct_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst max_distinct_sub_array_sum_with_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.max((nums.length - sum), 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  min_distinct_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  min_distinct_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst min_distinct_sub_array_sum_with_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.min((nums.length - sum), 0);\n};\n\n/*\n  Given an array of integers nums, find the maximum number of distinct sub-arrays\n  of nums.\n  Example\n  max_distinct_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  max_distinct_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst max_distinct_sub_array_sum_with_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.max((nums.length - sum), 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  min_distinct_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  min_distinct_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst min_distinct_sub_array_sum_with_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.min((nums.length - sum), 0);\n};\n\n/*\n  Given an array of integers nums, find the maximum number of distinct sub-arrays\n  of nums.\n  Example\n  max_distinct_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  max_distinct_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst max_distinct_sub_array_sum_with_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.max((nums.length - sum), 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  min_distinct_sub_array_sum([2, 3, 4, 1, 2, 4]) == 4\n  min_distinct_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst min_distinct_sub_array_sum_with_zero = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]!== 0) {\n      sum += nums[i];\n    }\n  }\n  return Math.min", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += (grid[i][j] === 0? 0 : capacity);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += (grid[i][j] === 0? 0 : capacity);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += (grid[i][j] === 0? 0 : capacity);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += (grid[i][j] === 0? 0 : capacity);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += (grid[i][j] === 0? 0 : capacity);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map((num) => num.toString(2).padStart(2, '0'));\n};\n\nconst sort_array_reversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => num.toString(2).padStart(2, '0'));\n};\n\nconst sort_array_reversed_reversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => num.toString(2).padStart(2, '0'));\n};\n\nconst sort_array_reversed_reversed_reversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => num.toString(2).padStart(2, '0'));\n};\n\nconst sort_array_reversed_reversed_reversed_reversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => num.toString(2).padStart(2, '0'));\n};\n\nconst sort_array_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => num.toString(2).padStart(2, '0'));\n};\n\nconst sort_array_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => num.toString(2).padStart(2, '0'));\n};\n\nconst sort_array_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => num.toString(2).padStart(2, '0'));\n};\n\nconst sort_array_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => num.toString(2).padStart(2, '0'));\n};\n\nconst sort_array_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => num.toString(2).padStart(2, '0'));\n};\n\nconst sort_array_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => num.toString(2).padStart(2, '0'));\n};\n\nconst sort_array_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => num.toString(2).padStart(2, '0'));\n};\n\nconst sort_array_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => num.toString(2).padStart(2, '0'));\n};\n\nconst sort_array_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = []\n  let words = s.split(\" \").filter(w => w.length > n)\n  return words\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = []\n  let words = s.split(\" \").filter(w => w.length > n)\n  return words\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = []\n  let words = s.split(\" \").filter(w => w.length > n)\n  return words\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = []\n  let words = s.split(\" \").filter(w => w.length > n)\n  return words\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = []\n  let words = s.split(\" \").filter(w => w.length > n)\n  return words\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = []\n  let words = s.split(\" \").filter(w => w.length > n)\n  return words\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = []\n  let words = s.split(\" \").filter(w => w.length > n)\n  return words\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = []\n  let words = s.split(\" \").filter(w => w.length > n)\n  return words\n}\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel_right(word);\n  let vowel_left = get_vowel_left(word);\n  let vowel_right = get_vowel", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      res.push('Yes');\n    } else if (lst[i] === ')') {\n      res.push('No');\n    } else {\n      res.push('No');\n    }\n  }\n  return res.indexOf(\"Yes\")!== -1;\n};\n\n/* You are given a string S consisting of only lowercase English letters.\n  Return the number of distinct English words that can be made from S\n  without losing any letters.\n  Examples:\n  count_words(\"\") == 3\n  count_words(\"ab\") == 2\n  count_words(\"abbb\") == 3\n  count_words(\"abbbb\") == 3\n  count_words(\"abbba\") == 3\n  count_words(\"abbbba\") == 3\n  count_words(\"abbbaa\") == 3\n  count_words(\"abbbaaa\") == 3\n  count_words(\"abbbaaaa\") == 3\n  count_words(\"abbbaaaaa\") == 3\n  count_words(\"abbbaaaaab\") == 3\n  count_words(\"abbbaaaaabb\") == 3\n  count_words(\"abbbaaaaabbb\") == 3\n  count_words(\"abbbaaaaabbbb\") == 3\n  count_words(\"abbbaaaaabbbba\") == 3\n  count_words(\"abbbaaaaabbbbaa\") == 3\n  count_words(\"abbbaaaaabbbbaaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaab\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbba\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaab\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbba\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaab\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbba\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbba\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbba\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbba\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaa\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbb\") == 3\n  count_words(\"abbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbbbaaaaabbb", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const longestString = strings.reduce((longestString, string) => {\n    if (string.length > longestString.length) {\n      longestString = string\n    }\n    return longestString\n  }, '')\n\n  return longestString\n}\n\n/**\n * Given a string, return its reverse (ASCII) characters. Return an empty string if\n  the string contains no characters.\n  >>> reverse('a')\n  'z'\n  >>> reverse('z')\n  'a'\n  >>> reverse(' ')\n  ''\n  >>> reverse('')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> reverse(' ')\n  ''\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  let max = 0;\n  let i = -1;\n  while (++i < len) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return [...new Array(k)].map(() => max);\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegers = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArray = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-ii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayII = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-iii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayIII = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-iiii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayIIII = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-iv/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayIV = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-iv/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayIVI = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-ivii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayIVII = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-iviii/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayIVIII = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-iviv/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayIVIVI = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-iviv/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayIVIVI = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-iviv/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayIVIVII = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-iviv/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayIVIVIII = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-iviv/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayIVIVIV = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-iviv/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayIVIVII = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-positive-integers-in-an-array-iviv/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findDistinctPositiveIntegersInArrayIVIVIII = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 4));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 5));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 6));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 7));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 8));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 9));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 10));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 11));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 12));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 13));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 14));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 15));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 16));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 17));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 18));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 19));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 20));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 21));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 22));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 23));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 24));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 25));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 26));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 27));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 28));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 29));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 30));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 31));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 32));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 33));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 34));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 35));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 36));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 37));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 38));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 39));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 40));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 41));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 42));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 43));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 44));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 45));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 46));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 47));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 48));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 49));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 50));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 51));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 52));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 53));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 54));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 55));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 56));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 57));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 58));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 59));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 60));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 61));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 62));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 63));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 64));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 65));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 66));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 67));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 68));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 69));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 70));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 71));\n// console.log(add_elements([111,21,3,4000,5,6,7,8,9], 72));\n// console.log(add_elements([111,21,3,4000,5,6,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let odd_collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      odd_collatz.push(i);\n      i = i + 1;\n    }\n    n = n / 2;\n  }\n  return odd_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5, 16] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, and 16.\n  */\nconst get_even_collatz = (n) => {\n  let even_collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      even_collatz.push(i);\n      i = i + 1;\n    }\n    n = n / 2;\n  }\n  return even_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_prime_collatz(5) returns [1, 5, 3, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [1, 5, 3, 7, 11, 13, 17, 19, 13, 5, 3, 7, 11, 13, 17, 19].\n  */\nconst get_prime_collatz = (n) => {\n  let prime_collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      prime_collatz.push(i);\n      i = i + 1;\n    }\n    n = n / 2;\n  }\n  return prime_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the natural numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_natural_collatz(5) returns [1, 5, 3, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [1, 5, 3, 7, 11, 13, 17, 19, 13, 5, 3, 7, 11, 13, 17, 19].\n  */\nconst get_natural_collatz = (n) => {\n  let natural_collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      natural_collatz.push(i);\n      i = i + 1;\n    }\n    n = n / 2;\n  }\n  return natural_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_prime_collatz(5) returns [1, 5, 3, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [1, 5, 3, 7, 11, 13, 17, 19, 13, 5, 3, 7, 11, 13, 17, 19].\n  */\nconst get_prime_collatz = (n) => {\n  let prime_collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      prime_collatz.push(i);\n      i = i + 1;\n    }\n    n = n / 2;\n  }\n  return prime_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the natural numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_natural_collatz(5) returns [1, 5, 3, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [1, 5, 3, 7, 11, 13, 17, 19, 13, 5, 3, 7, 11, 13, 17, 19].\n  */\nconst get_natural_collatz = (n) => {\n  let natural_collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      natural_collatz.push(i);\n      i = i + 1;\n    }\n    n = n / 2;\n  }\n  return natural_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the natural numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  const date_regex = /^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$/;\n  return date_regex.test(date);\n};\n\n/*\n  Given a date string and a month number, returns the date string in the format mm-dd-yyyy\n  Example: \n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) => '03-11-2000'\n\n  get_date_from_string('03-11-2000', 2) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.split(\" \");\n  const split_words = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  let sorted = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5, 6, 7]) ➞ true\n  is_sorted([6, 5, 7]) ➞ true\n  is_sorted([6, 5, 7, 4]) ➞ false\n  is_sorted([6, 5, 7, 4, 3]) ➞ false\n  is_sorted([6, 5, 7, 4, 3, 2]) ➞ true\n  is_sorted([6, 5, 7, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_desc = (lst) => {\n  let sorted = false;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted_desc([5, 6, 7]) ➞ true\n  is_sorted_desc([6, 5, 7]) ➞ true\n  is_sorted_desc([6, 5, 7, 4]) ➞ false\n  is_sorted_desc([6, 5, 7, 4, 3]) ➞ false\n  is_sorted_desc([6, 5, 7, 4, 3, 2]) ➞ true\n  is_sorted_desc([6, 5, 7, 4, 3, 2, 1]) ➞ false\n  */\nconst is_sorted_and_desc = (lst) => {\n  let sorted = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in descending order and in ascending order and in descending order and in descending order and in ascending order and in descending order and in descending order and in ascending order and in descending order and in descending order and in ascending order and in descending order and in descending order and in ascending order and in descending order and in descending order and in ascending order and in descending order and in descending order and in ascending order and in descending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in descending order and in ascending order and in descending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start, end] = interval1;\n  const [start, end] = interval2;\n  if (start >= end) {\n    return \"NO\";\n  }\n  if (start < end) {\n    if (start <= end) {\n      if (start === end) {\n        return \"YES\";\n      }\n      if (start > end) {\n        return \"NO\";\n      }\n    }\n  }\n  return \"NO\";\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] the length of the intersection\n  \n  Example:\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5]]\n  intervals = [[1, 2], [2, 3], [4, 5", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = sign * -1;\n    } else if (arr[i] < 0) {\n      sign = sign * 1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of absolute values of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> abs_signs([1, 2, 2, -4]) == -9\n  >>> abs_signs([0, 1]) == 0\n  >>> abs_signs([]) == null\n  */\nconst abs_signs = (arr) => {\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = sign + 1;\n    } else if (arr[i] < 0) {\n      sign = sign * -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> square_signs([1, 2, 2, -4]) == -9\n  >>> square_signs([0, 1]) == 0\n  >>> square_signs([]) == null\n  */\nconst square_signs = (arr) => {\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = sign * sign;\n    } else if (arr[i] < 0) {\n      sign = sign * sign * -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs([1, 2, 2, -4]) == -9\n  >>> cube_signs([0, 1]) == 0\n  >>> cube_signs([]) == null\n  */\nconst cube_signs = (arr) => {\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign = sign * sign * sign;\n    } else if (arr[i] < 0) {\n      sign = sign * sign * sign * -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> square_signs([1, 2, 2, -4]) == -9\n  >>> square_signs([0, 1]) == 0\n  >>> square_signs([]) == null\n  */\nconst square_signs_2 = square_signs;\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of cubes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> cube_signs([1, 2, 2, -4]) == -9\n  >>> cube_signs([0, 1]) == 0\n  >>> cube_signs([]) == null\n  */\nconst cube_signs_2 = cube_signs;\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> square_signs_2([1, 2, 2, -4]) == -9\n  >>> square_signs_2([0, 1]) == 0\n  >>> square_signs_2([]) == null\n  */\nconst square_signs_3 = square_signs;\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> square_signs_3([1, 2, 2, -4]) == -9\n  >>> square_signs_3([0, 1]) == 0\n  >>> square_signs_3([]) == null\n  */\nconst square_signs_4 = square_signs;\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> square_signs_4([1, 2, 2, -4]) == -9\n  >>> square_signs_4([0, 1]) == 0\n  >>> square_signs_4([]) == null\n  */\nconst square_signs_5 = square_signs;\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> square_signs_5([1, 2, 2, -4]) == -9\n  >>> square_signs_5([0, 1]) == 0\n  >>> square_signs_5([]) == null\n  */\nconst square_signs_6 = square_signs;\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> square_signs_6([1, 2, 2, -4]) == -9\n  >>> square_signs_6([0, 1]) == 0\n  >>> square_signs_6([]) == null\n  */\nconst square_signs_7 = square_signs;\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> square_signs_7([1, 2, 2, -4]) == -9\n  >>> square_signs_7([0, 1]) == 0\n  >>> square_signs_7([]) == null\n  */\nconst square_signs_8 = square_signs;\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> square_signs_8([1, 2, 2, -4]) == -9\n  >>> square_signs_8([0, 1]) == 0\n  >>> square_signs_8([]) == null\n  */\nconst square_signs_9 = square_signs;\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of squares of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> square_signs_9([1, 2, 2, -4]) == -9\n  >>> square_signs_9([0, 1]) == 0\n  >>> square_signs_9([]) == null\n  */\nconst square_signs_10 = square_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [path] = [];\n  const visited = new Set();\n  const queue = [...grid];\n  while (queue.length) {\n    const cell = queue.shift();\n    if (visited.has(cell)) {\n      continue;\n    }\n    visited.add(cell);\n    path.push(cell);\n    const neighbors = grid\n     .filter(cell =>!visited.has(cell))\n     .map(cell => [...grid].filter(cell => cell!== cell));\n    neighbors.forEach(neighbor => {\n      if (neighbor.some(cell => visited.has(cell))) {\n        return;\n      }\n      queue.push(...neighbor);\n    });\n  }\n  return path;\n};\n\n// https://leetcode.com/problems/find-the-minimum-path-sum-ii/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iii/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/discuss/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/discuss/solution/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/javascript/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/discuss/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/discuss/solution/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/discuss/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/discuss/solution/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/discuss/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/discuss/solution/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/discuss/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/discuss/solution/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/discuss/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/discuss/solution/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/discuss/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/discuss/solution/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/discuss/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/discuss/solution/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/discuss/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/discuss/solution/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/discuss/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/discuss/solution/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/discuss/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/javascript/discuss/solution/\n// https://leetcode.com/problems/find-the-minimum-path-sum-iv/solution/algorithm/java/\n// https://leet", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (a < b) return greatest_common_divisor(b, a);\n  return gcd(a, b);\n};\n\n/**\n * Return the number of bits needed to represent a number in binary\n * e.g. for 8 bit binary number the answer is 8\n * >>> binary_to_bits(8)\n * 8\n * >>> binary_to_bits(16)\n * 16\n * >>> binary_to_bits(32)\n * 32\n * >>> binary_to_bits(64)\n * 64\n * >>> binary_to_bits(128)\n * 128\n * >>> binary_to_bits(256)\n * 256\n * >>> binary_to_bits(512)\n * 512\n * >>> binary_to_bits(1024)\n * 1024\n * >>> binary_to_bits(2048)\n * 2048\n * >>> binary_to_bits(4096)\n * 4096\n * >>> binary_to_bits(8192)\n * 8192\n * >>> binary_to_bits(16384)\n * 16384\n * >>> binary_to_bits(32768)\n * 32768\n * >>> binary_to_bits(65536)\n * 65536\n * >>> binary_to_bits(131072)\n * 131072\n * >>> binary_to_bits(262144)\n * 262144\n * >>> binary_to_bits(524288)\n * 524288\n * >>> binary_to_bits(1048576)\n * 1048576\n * >>> binary_to_bits(2097152)\n * 2097152\n * >>> binary_to_bits(4194304)\n * 4194304\n * >>> binary_to_bits(8388608)\n * 8388608\n * >>> binary_to_bits(16777216)\n * 16777216\n * >>> binary_to_bits(33554432)\n * 33554432\n * >>> binary_to_bits(67108864)\n * 67108864\n * >>> binary_to_bits(134217728)\n * 134217728\n * >>> binary_to_bits(268435456)\n * 268435456\n * >>> binary_to_bits(536870912)\n * 536870912\n * >>> binary_to_bits(1073741824)\n * 1073741824\n * >>> binary_to_bits(2147483648)\n * 2147483648\n * >>> binary_to_bits(4294967296)\n * 4294967296\n * >>> binary_to_bits(87960)\n * 87960\n * >>> binary_to_bits(134217728)\n * 134217728\n * >>> binary_to_bits(268435456)\n * 268435456\n * >>> binary_to_bits(536870912)\n * 536870912\n * >>> binary_to_bits(1073741824)\n * 1073741824\n * >>> binary_to_bits(2147483648)\n * 2147483648\n * >>> binary_to_bits(4294967296)\n * 4294967296\n * >>> binary_to_bits(87960)\n * 87960\n * >>> binary_to_bits(134217728)\n * 134217728\n * >>> binary_to_bits(268435456)\n * 268435456\n * >>> binary_to_bits(536870912)\n * 536870912\n * >>> binary_to_bits(1073741824)\n * 1073741824\n * >>> binary_to_bits(2147483648)\n * 2147483648\n * >>> binary_to_bits(4294967296)\n * 4294967296\n * >>> binary_to_bits(87960)\n * 87960\n * >>> binary_to_bits(134217728)\n * 134217728\n * >>> binary_to_bits(268435456)\n * 268435456\n * >>> binary_to_bits(536870912)\n * 536870912\n * >>> binary_to_bits(1073741824)\n * 1073741824\n * >>> binary_to_bits(2147483648)\n * 2147483648\n * >>> binary_to_bits(4294967296)\n * 4294967296\n * >>> binary_to_bits(87960)\n * 87960\n * >>> binary_to_bits(134217728)\n * 134217728\n * >>> binary_to_bits(268435456)\n * 268435456\n * >>> binary_to_bits(536870912)\n * 536870912\n * >>> binary_to_bits(1073741824)\n * 1073741824\n * >>> binary_to_bits(2147483648)\n * 2147483648\n * >>> binary_to_bits(4294967296)\n * 4294967296\n * >>> binary_to_bits(87960)\n * 87960\n * >>> binary_to_bits(134217728)\n * 134217728\n * >>> binary_to_bits(268435456)\n * 268435456\n * >>> binary_to_bits(536870912)\n * 536870912\n * >>> binary_to_bits(1073741824)\n * 1073741824\n * >>> binary_to_bits(2147483648)\n * 2147483648\n * >>> binary_to_bits(4294967296)\n * 4294967296\n * >>> binary_to_bits(87960)\n * 87960\n * >>> binary_to_bits(134217728)\n * 134217728\n * >>> binary_to_bits(268435456)\n * 268435456\n * >>> binary_to_bits(536870912)\n * 536870912\n * >>> binary_to_bits(1073741824)\n * 1073741824\n * >>> binary_to_bits(2147483648)\n * 2147483648\n * >>> binary_to_bits(4294967296)\n * 4294967296\n * >>> binary_to_bits(87960)\n * 87960\n * >>> binary_to_bits(134217728)\n * 134217728\n * >>> binary_to_bits(268435456)\n * 268435456\n * >>> binary_to_bits(536870912)\n * 536870912\n * >>> binary_to_bits(1073741824)\n * 1073741824\n * >>> binary_to_bits(2147483648)\n * 2147483648\n * >>> binary_to_bits(4294967296)\n * 4294967296\n * >>> binary_to_bits(87960)\n * 87960\n * >>> binary_to_bits(134217728)\n * 134217728\n * >>> binary_to_bits(268435456)\n * 268435456\n * >>> binary_to_bits(536870912)\n * 536870912\n * >>> binary_to_bits(1073741824)\n * 1073741824\n * >>> binary_to_bits(2147483648)\n * 2147483648\n * >>> binary_to_bits(4294967296)\n * 4294967296\n * >>> binary_to_bits(87960)\n * 87960\n * >>> binary_to_bits(134217728)\n * 134217728\n * >>> binary_to_bits(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    tri(n - 1) + tri(n - 2) + tri(n + 1),\n    tri(n - 1) + tri(n - 2) + tri(n),\n    tri(n - 1) + tri(n + 1) + tri(n - 2),\n    tri(n - 1) + tri(n + 1) + tri(n),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fib = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fib(n - 1) + fib(n - 2) + fib(n - 3),\n    fib(n - 1) + fib(n - 2) + fib(n - 3),\n    fib(n - 1) + fib(n - 2) + fib(n - 3),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n  ];\n};\n\n/*\n  Given a non-negative integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(6) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n*/\nconst fibonacci = (n) => {\n  if (n <= 1) return [n, n, n, n];\n  return [\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),\n    fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3),", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 2; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits2 = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits3 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += digits(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits2(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits3(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits4(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits5(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits8 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits6(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits9 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits7(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits10 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits8(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits11 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits9(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits12 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits10(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits13 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits11(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits14 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits12(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits15 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits13(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits16 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits14(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 235\n  */\nconst digits17 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digits15(i);\n  }\n  return sum % 10;\n};\n\n/*Given a positive integer n, return the sum of its digit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const regex = /[\\[\\]]/g;\n  return regex.test(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += Math.pow(num, 2);\n  });\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers and a target number. Return the sum\n  of the numbers in the list that add up to the target.\n  Examples:\n  sumNumbers([1,2,3], 3) → 6\n  sumNumbers([1,4,9], 3) → 14\n  sumNumbers([1,3,5,7], 3) → 84\n  sumNumbers([1.4,4.2,0], 3) → 29\n  sumNumbers([-2.4,1,1], 3) → 6\n  sumNumbers([-2,1,1], 3) → 6\n  sumNumbers([-2,1,1], 2) → 2\n  sumNumbers([-2,1,1], 1) → 0\n  sumNumbers([-2,1,1], 0) → 0\n  sumNumbers([-2,1,1], -1) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumbers([-2,1,1], -2) → 0\n  sumNumber", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_letter = last_char.match(/[a-zA-Z]/)\n  return is_letter\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_number(\"apple pie\") ➞ false\n  check_if_last_char_is_a_number(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_number(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_number(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_number = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_number = last_char.match(/[0-9]/)\n  return is_number\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_punctuation(\"apple pie\") ➞ false\n  check_if_last_char_is_a_punctuation(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_punctuation(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_punctuation(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_punctuation = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_punctuation = last_char.match(/[!?.,;:&]/)\n  return is_punctuation\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a space and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_space(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_space = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_space = last_char.match(/\\s/)\n  return is_space\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a capital letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_capital_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_capital_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_capital_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_capital_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_capital_letter = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_capital_letter = last_char.match(/[A-Z]/)\n  return is_capital_letter\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a lower case letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_lower_case(\"apple pie\") ➞ false\n  check_if_last_char_is_a_lower_case(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_lower_case(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_lower_case(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_lower_case = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_lower_case = last_char.match(/[a-z]/)\n  return is_lower_case\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_number(\"apple pie\") ➞ false\n  check_if_last_char_is_a_number(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_number(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_number(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_number = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_number = last_char.match(/[0-9]/)\n  return is_number\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_punctuation(\"apple pie\") ➞ false\n  check_if_last_char_is_a_punctuation(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_punctuation(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_punctuation(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_punctuation = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_punctuation = last_char.match(/[!?.,;:&]/)\n  return is_punctuation\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a space and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_space(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_space = (txt) => {\n  let last_char = txt.charAt(txt.length - 1)\n  let is_space = last_char.match(/\\s/)\n  return is_space\n}\n\n/* Create a function that returns true if the last character\n  of a given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array of integers arr and an integer k, return true if and only if\n  the array contains exactly k distinct elements.\n\n  Examples:\n  kDistinct(arr,3) = true\n  kDistinct(arr,4) = false\n  kDistinct(arr,5) = false\n  kDistinct(arr,6) = false\n  kDistinct(arr,7) = false\n  kDistinct(arr,8) = false\n  kDistinct(arr,9) = false\n  kDistinct(arr,10) = false\n  kDistinct(arr,11) = true\n  kDistinct(arr,12) = true\n  kDistinct(arr,13) = true\n  kDistinct(arr,14) = true\n  kDistinct(arr,15) = true\n  kDistinct(arr,16) = true\n  kDistinct(arr,17) = true\n  kDistinct(arr,18) = true\n  kDistinct(arr,19) = true\n  kDistinct(arr,20) = true\n  kDistinct(arr,21) = true\n  kDistinct(arr,22) = true\n  kDistinct(arr,23) = true\n  kDistinct(arr,24) = true\n  kDistinct(arr,25) = true\n  kDistinct(arr,26) = true\n  kDistinct(arr,27) = true\n  kDistinct(arr,28) = true\n  kDistinct(arr,29) = true\n  kDistinct(arr,30) = true\n  kDistinct(arr,31) = true\n  kDistinct(arr,32) = true\n  kDistinct(arr,33) = true\n  kDistinct(arr,34) = true\n  kDistinct(arr,35) = true\n  kDistinct(arr,36) = true\n  kDistinct(arr,37) = true\n  kDistinct(arr,38) = true\n  kDistinct(arr,39) = true\n  kDistinct(arr,40) = true\n  kDistinct(arr,41) = true\n  kDistinct(arr,42) = true\n  kDistinct(arr,43) = true\n  kDistinct(arr,44) = true\n  kDistinct(arr,45) = true\n  kDistinct(arr,46) = true\n  kDistinct(arr,47) = true\n  kDistinct(arr,48) = true\n  kDistinct(arr,49) = true\n  kDistinct(arr,50) = true\n  kDistinct(arr,51) = true\n  kDistinct(arr,52) = true\n  kDistinct(arr,53) = true\n  kDistinct(arr,54) = true\n  kDistinct(arr,55) = true\n  kDistinct(arr,56) = true\n  kDistinct(arr,57) = true\n  kDistinct(arr,58) = true\n  kDistinct(arr,59) = true\n  kDistinct(arr,60) = true\n  kDistinct(arr,61) = true\n  kDistinct(arr,62) = true\n  kDistinct(arr,63) = true\n  kDistinct(arr,64) = true\n  kDistinct(arr,65) = true\n  kDistinct(arr,66) = true\n  kDistinct(arr,67) = true\n  kDistinct(arr,68) = true\n  kDistinct(arr,69) = true\n  kDistinct(arr,70) = true\n  kDistinct(arr,71) = true\n  kDistinct(arr,72) = true\n  kDistinct(arr,73) = true\n  kDistinct(arr,74) = true\n  kDistinct(arr,75) = true\n  kDistinct(arr,76) = true\n  kDistinct(arr,77) = true\n  kDistinct(arr,78) = true\n  kDistinct(arr,79) = true\n  kDistinct(arr,80) = true\n  kDistinct(arr,81) = true\n  kDistinct(arr,82) = true\n  kDistinct(arr,83) = true\n  kDistinct(arr,84) = true\n  kDistinct(arr,85) = true\n  kDistinct(arr,86) = true\n  kDistinct(arr,87) = true\n  kDistinct(arr,88) = true\n  kDistinct(arr,89) = true\n  kDistinct(arr,90) = true\n  kDistinct(arr,91) = true\n  kDistinct(arr,92) = true\n  kDistinct(arr,93) = true\n  kDistinct(arr,94) = true\n  kDistinct(arr,95) = true\n  kDistinct(arr,96) = true\n  kDistinct(arr,97) = true\n  kDistinct(arr,98) = true\n  kDistinct(arr,99) = true\n  kDistinct(arr,100) = true\n  kDistinct(arr,101) = true\n  kDistinct(arr,102) = true\n  kDistinct(arr,103) = true\n  kDistinct(arr,104) = true\n  kDistinct(arr,105) = true\n  kDistinct(arr,106) = true\n  kDistinct(arr,107) = true\n  kDistinct(arr,108) = true\n  kDistinct(arr,109) = true\n  kDistinct(arr,110) = true\n  kDistinct(arr,111) = true\n  kDistinct(arr,112) = true\n  kDistinct(arr,113) = true\n  kDistinct(arr,114) = true\n  kDistinct(arr,115) = true\n  kDistinct(arr,116) = true\n  kDistinct(arr,117) = true\n  kDistinct(arr,118) = true\n  kDistinct(arr,119) = true\n  kDistinct(arr,120) = true\n  kDistinct(arr,121) = true\n  kDistinct(arr,122) = true\n  kDistinct(arr,123) = true\n  kDistinct(arr,124) = true\n  kDistinct(arr,125) = true\n  kDistinct(arr,126) = true\n  kDistinct(arr,127) = true\n  kDistinct(arr,128) = true\n  kDistinct(arr,129) = true\n  kDistinct(arr,130) = true\n  kDistinct(arr,131) = true\n  kDistinct(arr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  let largest = Number.MIN_SAFE_INTEGER;\n  let smallest = Number.MAX_SAFE_INTEGER;\n  let result = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = Number.MAX_SAFE_INTEGER;\n    } else if (lst[i] > 0) {\n      largest = Number.MIN_SAFE_INTEGER;\n    }\n  }\n  if (largest < smallest) {\n    smallest = largest;\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    } else if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* Create a function that returns true if the list contains a\n  negative integer.\n  Examples:\n  contains_negative_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_negative_numbers([]) == true\n  contains_negative_numbers([0]) == true\n  */\nconst contains_negative_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Create a function that returns true if the list contains a\n  positive integer.\n  Examples:\n  contains_positive_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_positive_numbers([]) == true\n  contains_positive_numbers([0]) == true\n  */\nconst contains_positive_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Create a function that returns true if the list contains a\n  non-negative integer.\n  Examples:\n  contains_non_negative_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_non_negative_numbers([]) == true\n  contains_non_negative_numbers([0]) == true\n  */\nconst contains_non_negative_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the list contains a\n  non-positive integer.\n  Examples:\n  contains_non_positive_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_non_positive_numbers([]) == true\n  contains_non_positive_numbers([0]) == true\n  */\nconst contains_non_positive_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the list contains a\n  positive integer and false otherwise.\n  Examples:\n  contains_positive_and_non_negative_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_positive_and_non_negative_numbers([]) == true\n  contains_positive_and_non_negative_numbers([0]) == true\n  */\nconst contains_positive_and_non_negative_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Create a function that returns true if the list contains a\n  non-negative integer and false otherwise.\n  Examples:\n  contains_non_negative_and_positive_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_non_negative_and_positive_numbers([]) == true\n  contains_non_negative_and_positive_numbers([0]) == true\n  */\nconst contains_non_negative_and_positive_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the list contains a\n  non-positive integer and false otherwise.\n  Examples:\n  contains_non_positive_and_non_negative_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_non_positive_and_non_negative_numbers([]) == true\n  contains_non_positive_and_non_negative_numbers([0]) == true\n  */\nconst contains_non_positive_and_non_negative_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the list contains a\n  positive integer and true otherwise.\n  Examples:\n  contains_positive_and_non_negative_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_positive_and_non_negative_numbers([]) == true\n  contains_positive_and_non_negative_numbers([0]) == true\n  */\nconst contains_positive_and_non_negative_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Create a function that returns true if the list contains a\n  non-negative integer and true otherwise.\n  Examples:\n  contains_non_negative_and_positive_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_non_negative_and_positive_numbers([]) == true\n  contains_non_negative_and_positive_numbers([0]) == true\n  */\nconst contains_non_negative_and_positive_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the list contains a\n  non-positive integer and true otherwise.\n  Examples:\n  contains_non_positive_and_non_negative_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_non_positive_and_non_negative_numbers([]) == true\n  contains_non_positive_and_non_negative_numbers([0]) == true\n  */\nconst contains_non_positive_and_non_negative_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the list contains a\n  non-negative integer and false otherwise.\n  Examples:\n  contains_non_negative_and_non_positive_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_non_negative_and_non_positive_numbers([]) == true\n  contains_non_negative_and_non_positive_numbers([0]) == true\n  */\nconst contains_non_negative_and_non_positive_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Create a function that returns true if the list contains a\n  positive integer and false otherwise.\n  Examples:\n  contains_positive_and_non_negative_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_positive_and_non_negative_numbers([]) == true\n  contains_positive_and_non_negative_numbers([0]) == true\n  */\nconst contains_positive_and_non_negative_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Create a function that returns true if the list contains a\n  non-positive integer and false otherwise.\n  Examples:\n  contains_non_negative_and_non_positive_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_non_negative_and_non_positive_numbers([]) == true\n  contains_non_negative_and_non_positive_numbers([0]) == true\n  */\nconst contains_non_negative_and_non_positive_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Create a function that returns true if the list contains a\n  positive integer and true otherwise.\n  Examples:\n  contains_positive_and_non_negative_numbers([2, 4, 1, 3, 5, 7]) == true\n  contains_positive_and_non_negative_numbers([]) == true\n  contains_positive_and_non_negative_numbers([0]) == true\n  */\nconst contains_positive_and_non_negative_numbers = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Create a function that returns true if the list contains a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return a === b\n  if (a === \"\" || b === \"\") return a === b\n  if (a === \".\" || b === \".\") return a === b\n  if (a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === b\n  if (a === \".\" || b === \".\" || a === \",\" || b === \",\") return a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/4) && is_odd(n/4);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\n  Example\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(10) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/8) && is_odd(n/8);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 16 positive even numbers\n  Example\n  is_equal_to_sum_even(16) == false\n  is_equal_to_sum_even(20) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/16) && is_odd(n/16);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 32 positive even numbers\n  Example\n  is_equal_to_sum_even(32) == false\n  is_equal_to_sum_even(40) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/32) && is_odd(n/32);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 64 positive even numbers\n  Example\n  is_equal_to_sum_even(64) == false\n  is_equal_to_sum_even(80) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/64) && is_odd(n/64);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 128 positive even numbers\n  Example\n  is_equal_to_sum_even(128) == false\n  is_equal_to_sum_even(160) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/128) && is_odd(n/128);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 256 positive even numbers\n  Example\n  is_equal_to_sum_even(256) == false\n  is_equal_to_sum_even(320) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/256) && is_odd(n/256);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 512 positive even numbers\n  Example\n  is_equal_to_sum_even(512) == false\n  is_equal_to_sum_even(640) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/512) && is_odd(n/512);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1024 positive even numbers\n  Example\n  is_equal_to_sum_even(1024) == false\n  is_equal_to_sum_even(2048) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/1024) && is_odd(n/1024);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2048 positive even numbers\n  Example\n  is_equal_to_sum_even(2048) == false\n  is_equal_to_sum_even(4096) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/2048) && is_odd(n/2048);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4096 positive even numbers\n  Example\n  is_equal_to_sum_even(4096) == false\n  is_equal_to_sum_even(8192) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/4096) && is_odd(n/4096);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8192 positive even numbers\n  Example\n  is_equal_to_sum_even(8192) == false\n  is_equal_to_sum_even(16384) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/8192) && is_odd(n/8192);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 16384 positive even numbers\n  Example\n  is_equal_to_sum_even(16384) == false\n  is_equal_to_sum_even(32768) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/16384) && is_odd(n/16384);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 32768 positive even numbers\n  Example\n  is_equal_to_sum_even(32768) == false\n  is_equal_to_sum_even(65536) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/32768) && is_odd(n/32768);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 65536 positive even numbers\n  Example\n  is_equal_to_sum_even(65536) == false\n  is_equal_to_sum_even(131072) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/65536) && is_odd(n/65536);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 131072 positive even numbers\n  Example\n  is_equal_to_sum_even(131072) == false\n  is_equal_to_sum_even(262144) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/131072) && is_odd(n/131072);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 262144 positive even numbers\n  Example\n  is_equal_to_sum_even(262144) == false\n  is_equal_to_sum_even(524288) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/262144) && is_odd(n/262144);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 524288 positive even numbers\n  Example\n  is_equal_to_sum_even(524288) == false\n  is_equal_to_sum_even(1048576) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/524288) && is_odd(n/524288);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1048576 positive even numbers\n  Example\n  is_equal_to_sum_even(1048576) == false\n  is_equal_to_sum_even(2097152) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return is_even(n) && is_odd(n) && is_even(n/1048576) && is_odd(n/1048576);\n};\n\n/*", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n};\n\n/*\n  Given a positive integer n, return the largest integer less than or equal to n\n  that divides n.\n\n  For example:\n  >>> largest_divisor_less_than(10)\n  9\n\n  The function will receive an integer as input and should return the largest\n  integer less than or equal to n that divides n.\n  */\nconst largest_divisor_less_than = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(Math.sqrt(n));\n};\n\n/*\n  Given a positive integer n, return the smallest integer greater than or equal to n\n  that divides n.\n\n  For example:\n  >>> smallest_divisor_greater_than(10)\n  1\n\n  The function will receive an integer as input and should return the smallest\n  integer greater than or equal to n that divides n.\n  */\nconst smallest_divisor_greater_than = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(n / 2);\n};\n\n/*\n  Given a positive integer n, return the largest integer less than or equal to n\n  that divides n.\n\n  For example:\n  >>> largest_divisor_less_than_or_equal_to(10)\n  9\n\n  The function will receive an integer as input and should return the largest\n  integer less than or equal to n that divides n.\n  */\nconst largest_divisor_less_than_or_equal_to = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(Math.sqrt(n));\n};\n\n/*\n  Given a positive integer n, return the smallest integer greater than or equal to n\n  that divides n.\n\n  For example:\n  >>> smallest_divisor_greater_than_or_equal_to(10)\n  1\n\n  The function will receive an integer as input and should return the smallest\n  integer greater than or equal to n that divides n.\n  */\nconst smallest_divisor_greater_than_or_equal_to = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(n / 2);\n};\n\n/*\n  Given a positive integer n, return the largest integer less than or equal to n\n  that divides n.\n\n  For example:\n  >>> largest_divisor_less_than_or_equal_to(10)\n  9\n\n  The function will receive an integer as input and should return the largest\n  integer less than or equal to n that divides n.\n  */\nconst largest_divisor_less_than_or_equal_to = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(Math.sqrt(n));\n};\n\n/*\n  Given a positive integer n, return the largest integer less than or equal to n\n  that divides n.\n\n  For example:\n  >>> largest_divisor_less_than_or_equal_to(10)\n  9\n\n  The function will receive an integer as input and should return the largest\n  integer less than or equal to n that divides n.\n  */\nconst smallest_divisor_less_than_or_equal_to = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(n / 2);\n};\n\n/*\n  Given a positive integer n, return the largest integer less than or equal to n\n  that divides n.\n\n  For example:\n  >>> largest_divisor_less_than_or_equal_to(10)\n  9\n\n  The function will receive an integer as input and should return the largest\n  integer less than or equal to n that divides n.\n  */\nconst largest_divisor_less_than_or_equal_to = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(Math.sqrt(n));\n};\n\n/*\n  Given a positive integer n, return the largest integer less than or equal to n\n  that divides n.\n\n  For example:\n  >>> largest_divisor_less_than_or_equal_to(10)\n  9\n\n  The function will receive an integer as input and should return the largest\n  integer less than or equal to n that divides n.\n  */\nconst smallest_divisor_less_than_or_equal_to = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(n / 2);\n};\n\n/*\n  Given a positive integer n, return the largest integer less than or equal to n\n  that divides n.\n\n  For example:\n  >>> largest_divisor_less_than_or_equal_to(10)\n  9\n\n  The function will receive an integer as input and should return the largest\n  integer less than or equal to n that divides n.\n  */\nconst largest_divisor_less_than_or_equal_to = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(Math.sqrt(n));\n};\n\n/*\n  Given a positive integer n, return the largest integer less than or equal to n\n  that divides n.\n\n  For example:\n  >>> largest_divisor_less_than_or_equal_to(10)\n  9\n\n  The function will receive an integer as input and should return the largest\n  integer less than or equal to n that divides n.\n  */\nconst smallest_divisor_less_than_or_equal_to = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(n / 2);\n};\n\n/*\n  Given a positive integer n, return the largest integer less than or equal to n\n  that divides n.\n\n  For example:\n  >>> largest_divisor_less_than_or_equal_to(10)\n  9\n\n  The function will receive an integer as input and should return the largest\n  integer less than or equal to n that divides n.\n  */\nconst largest_divisor_less_than_or_equal_to = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(Math.sqrt(n));\n};\n\n/*\n  Given a positive integer n, return the largest integer less than or equal to n\n  that divides n.\n\n  For example:\n  >>> largest_divisor_less_than_or_equal_to(10)\n  9\n\n  The function will receive an integer as input and should return the largest\n  integer less than or equal to n that divides n.\n  */\nconst smallest_divisor_less_than_or_equal_to = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(n / 2);\n};\n\n/*\n  Given a positive integer n, return the largest integer less than or equal to n\n  that divides n.\n\n  For example:\n  >>> largest_divisor_less_than_or_equal_to(10)\n  9\n\n  The function will receive an integer as input and should return the largest\n  integer less than or equal to n that divides n.\n  */\nconst largest_divisor_less_than_or_equal_to = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(Math.sqrt(n));\n};\n\n/*\n  Given a positive integer n, return the largest integer less than or equal to n\n  that divides n.\n\n  For example:\n  >>> largest_divisor_less_than_or_equal_to(10)\n  9\n\n  The function will receive an integer as input and should return the largest\n  integer less than or equal to n that divides n.\n  */\nconst smallest_divisor_less_than_or_equal_to = (n) => {\n  if (n < 1) {\n    return 1;\n  }\n  return Math.floor(n / 2);\n};\n\n/*\n  Given a positive integer n, return the largest integer less than or equal to n\n  that divides n.\n\n  For example:\n  >>> largest_divisor_less_than_or_equal_to(10)\n  9\n\n  The function will receive an integer as input and should return the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  let prefixes = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[j]) {\n      prefixes.push(string[i])\n      i++\n      j++\n    } else {\n      prefixes.push(string[i])\n      i++\n      j++\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['c', 'ba', 'ca']\n  */\nconst all_suffixes = (string) => {\n  let suffixes = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[j]) {\n      suffixes.push(string[i])\n      i++\n      j++\n    } else {\n      suffixes.push(string[i])\n      i++\n      j++\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['abc', 'ab', 'ba', 'ca']\n  */\nconst all_substrings = (string) => {\n  let substrings = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[j]) {\n      substrings.push(string[i])\n      i++\n      j++\n    } else {\n      substrings.push(string[i])\n      i++\n      j++\n    }\n  }\n  return substrings\n}\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['abc', 'ab', 'ba', 'ca']\n  */\nconst all_substrings_nocase = (string) => {\n  let substrings = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[j]) {\n      substrings.push(string[i])\n      i++\n      j++\n    } else {\n      substrings.push(string[i])\n      i++\n      j++\n    }\n  }\n  return substrings\n}\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_nocase('abc')\n  ['abc', 'ab', 'ba', 'ca']\n  */\nconst all_substrings_nocase_nocase = (string) => {\n  let substrings = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[j]) {\n      substrings.push(string[i])\n      i++\n      j++\n    } else {\n      substrings.push(string[i])\n      i++\n      j++\n    }\n  }\n  return substrings\n}\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_nocase_nocase('abc')\n  ['abc', 'ab', 'ba', 'ca']\n  */\nconst all_substrings_nocase_nocase_nocase = (string) => {\n  let substrings = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[j]) {\n      substrings.push(string[i])\n      i++\n      j++\n    } else {\n      substrings.push(string[i])\n      i++\n      j++\n    }\n  }\n  return substrings\n}\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_nocase_nocase_nocase_nocase('abc')\n  ['abc', 'ab', 'ba', 'ca']\n  */\nconst all_substrings_nocase_nocase_nocase_nocase = (string) => {\n  let substrings = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[j]) {\n      substrings.push(string[i])\n      i++\n      j++\n    } else {\n      substrings.push(string[i])\n      i++\n      j++\n    }\n  }\n  return substrings\n}\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_nocase_nocase_nocase_nocase_nocase('abc')\n  ['abc', 'ab', 'ba', 'ca']\n  */\nconst all_substrings_nocase_nocase_nocase_nocase_nocase = (string) => {\n  let substrings = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[j]) {\n      substrings.push(string[i])\n      i++\n      j++\n    } else {\n      substrings.push(string[i])\n      i++\n      j++\n    }\n  }\n  return substrings\n}\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_nocase_nocase_nocase_nocase_nocase_nocase('abc')\n  ['abc', 'ab', 'ba', 'ca']\n  */\nconst all_substrings_nocase_nocase_nocase_nocase_nocase_nocase = (string) => {\n  let substrings = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[j]) {\n      substrings.push(string[i])\n      i++\n      j++\n    } else {\n      substrings.push(string[i])\n      i++\n      j++\n    }\n  }\n  return substrings\n}\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_nocase_nocase_nocase_nocase_nocase_nocase_nocase('abc')\n  ['abc', 'ab', 'ba', 'ca']\n  */\nconst all_substrings_nocase_nocase_nocase_nocase_nocase_nocase_nocase = (string) => {\n  let substrings = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[j]) {\n      substrings.push(string[i])\n      i++\n      j++\n    } else {\n      substrings.push(string[i])\n      i++\n      j++\n    }\n  }\n  return substrings\n}\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_nocase_nocase_nocase_nocase_nocase_nocase_nocase_nocase('abc')\n  ['abc', 'ab', 'ba', 'ca']\n  */\nconst all_substrings_nocase_nocase_nocase_nocase_nocase_nocase_nocase_nocase = (string) => {\n  let substrings = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[j]) {\n      substrings.push(string[i])\n      i++\n      j++\n    } else {\n      substrings.push(string[i])\n      i++\n      j++\n    }\n  }\n  return substrings\n}\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings_nocase_nocase_nocase_nocase_nocase_nocase_nocase_nocase_nocase('abc')\n  ['abc', 'ab', 'ba', 'ca']\n  */\nconst all_substrings_nocase_nocase_nocase_nocase_nocase_nocase_nocase_nocase_nocase = (string) => {\n  let substrings = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = string.length\n  while (i < len) {\n    if (string[i] === string[j]) {\n      substrings.push(string[i])\n      i++\n      j++\n    } else {\n      substrings.push(string[i])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  return text.replace(/\\s/g, \"_\").replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_no_spaces = (text) => {\n  return text.replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_no_spaces_no_spaces = (text) => {\n  return text.replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_no_spaces_no_spaces_no_spaces = (text) => {\n  return text.replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_no_spaces_no_spaces_no_spaces_no_spaces = (text) => {\n  return text.replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces = (text) => {\n  return text.replace(/\\s{2,}/, \" \");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const re = /^[0-9]{3}\\.?[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const re = /^[0-9]{3}\\.?[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const re = /^[0-9]{3}\\.?[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const re = /^[0-9]{3}\\.?[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const re = /^[0-9]{3}\\.?[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const re = /^[0-9]{3}\\.?[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const re = /^[0-9]{3}\\.?[a-zA-Z]{2,}$/;\n  return re.test(file_name);\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The sub", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst square_cube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_cube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_square = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_square_cube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_square_cube_cube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and \n  will square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst cube_square_square_cube_cube = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cu", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newWordsLength = 0;\n  let newWordsOrder = [];\n  let newWordsIndex = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"a\" || words[i] === \"e\" || words[i] === \"i\" || words[i] === \"o\" || words[i] === \"u\") {\n      newWords.push(words[i]);\n      newWordsLength++;\n      newWordsOrder.push(newWordsLength);\n      newWordsIndex++;\n    }\n  }\n\n  for (let i = 0; i < newWordsLength; i++) {\n    if (newWordsIndex % 2 === 0) {\n      newWords.push(words[i]);\n      newWordsIndex++;\n    }\n  }\n\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_with_length = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newWordsLength = 0;\n  let newWordsOrder = [];\n  let newWordsIndex = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"a\" || words[i] === \"e\" || words[i] === \"i\" || words[i] === \"o\" || words[i] === \"u\") {\n      newWords.push(words[i]);\n      newWordsLength++;\n      newWordsOrder.push(newWordsLength);\n      newWordsIndex++;\n    }\n  }\n\n  for (let i = 0; i < newWordsLength; i++) {\n    if (newWordsIndex % 2 === 0) {\n      newWords.push(words[i]);\n      newWordsIndex++;\n    }\n  }\n\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_with_length_and_order = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newWordsLength = 0;\n  let newWordsOrder = [];\n  let newWordsIndex = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"a\" || words[i] === \"e\" || words[i] === \"i\" || words[i] === \"o\" || words[i] === \"u\") {\n      newWords.push(words[i]);\n      newWordsLength++;\n      newWordsOrder.push(newWordsLength);\n      newWordsIndex++;\n    }\n  }\n\n  for (let i = 0; i < newWordsLength; i++) {\n    if (newWordsIndex % 2 === 0) {\n      newWords.push(words[i]);\n      newWordsIndex++;\n    }\n  }\n\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_with_length_and_order_and_length = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newWordsLength = 0;\n  let newWordsOrder = [];\n  let newWordsIndex = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"a\" || words[i] === \"e\" || words[i] === \"i\" || words[i] === \"o\" || words[i] === \"u\") {\n      newWords.push(words[i]);\n      newWordsLength++;\n      newWordsOrder.push(newWordsLength);\n      newWordsIndex++;\n    }\n  }\n\n  for (let i = 0; i < newWordsLength; i++) {\n    if (newWordsIndex % 2 === 0) {\n      newWords.push(words[i]);\n      newWordsIndex++;\n    }\n  }\n\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_with_length_and_order_and_length_and_length = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newWordsLength = 0;\n  let newWordsOrder = [];\n  let newWordsIndex = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"a\" || words[i] === \"e\" || words[i] === \"i\" || words[i] === \"o\" || words[i] === \"u\") {\n      newWords.push(words[i]);\n      newWordsLength++;\n      newWordsOrder.push(newWordsLength);\n      newWordsIndex++;\n    }\n  }\n\n  for (let i = 0; i < newWordsLength; i++) {\n    if (newWordsIndex % 2 === 0) {\n      newWords.push(words[i]);\n      newWordsIndex++;\n    }\n  }\n\n  return newWords.join(\" \");\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_with_length_and_order_and_length_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let isFraction = true;\n  let isInteger = false;\n  let isNumber = false;\n  let isString = false;\n  let isZero = false;\n  let isNegative = false;\n  let isPositive = false;\n  let isNegativeZero = false;\n  let isPositiveZero = false;\n  let isNegativeInfinity = false;\n  let isPositiveInfinity = false;\n  let isZeroInfinity = false;\n  let isInfinity = false;\n  let isNegativeInfinity = false;\n  let isPositiveInfinity = false;\n  let isNegativeInfinityInfinity = false;\n  let isPositiveInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinityInfinity = false;\n  let isInfinity = false;\n  let isInfinity = false;\n  let isInfinity = false;\n  let isInfinity = false;\n  let isInfinity = false;\n  let isInfinity = false;\n  let isInfinity = false;\n  let isInfinity = false;\n  let isInfinity = false;\n  let isInfinity = false;\n  let isInfinity = false;\n  let isInfinity = false;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const nums_sorted = nums.sort((a, b) => a - b);\n  const sums = nums_sorted.reduce((acc, cur) => acc + cur, 0);\n  const digits = nums_sorted.reduce((acc, cur) => acc + cur.toString().length, 0);\n  const sorted_nums = nums_sorted.map((num) => num * Math.pow(10, digits));\n  return sorted_nums.sort((a, b) => a - b);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_desc = (nums) => {\n  const nums_sorted = nums.sort((a, b) => b - a);\n  const sums = nums_sorted.reduce((acc, cur) => acc + cur, 0);\n  const digits = nums_sorted.reduce((acc, cur) => acc + cur.toString().length, 0);\n  const sorted_nums = nums_sorted.map((num) => num * Math.pow(10, digits));\n  return sorted_nums.sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [1, -11, -11, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points_asc = (nums) => {\n  const nums_sorted = nums.sort((a, b) => a - b);\n  const sums = nums_sorted.reduce((acc, cur) => acc + cur, 0);\n  const digits = nums_sorted.reduce((acc, cur) => acc + cur.toString().length, 0);\n  const sorted_nums = nums_sorted.map((num) => num * Math.pow(10, digits));\n  return sorted_nums.sort((a, b) => a - b);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -12, 11]\n  >>> order_by_points_desc([]) == []\n  */\nconst order_by_points_desc_desc = (nums) => {\n  const nums_sorted = nums.sort((a, b) => b - a);\n  const sums = nums_sorted.reduce((acc, cur) => acc + cur, 0);\n  const digits = nums_sorted.reduce((acc, cur) => acc + cur.toString().length, 0);\n  const sorted_nums = nums_sorted.map((num) => num * Math.pow(10, digits));\n  return sorted_nums.sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [1, -11, -11, -12, 11]\n  >>> order_by_points_asc([]) == []\n  */\nconst order_by_points_asc_asc = (nums) => {\n  const nums_sorted = nums.sort((a, b) => a - b);\n  const sums = nums_sorted.reduce((acc, cur) => acc + cur, 0);\n  const digits = nums_sorted.reduce((acc, cur) => acc + cur.toString().length, 0);\n  const sorted_nums = nums_sorted.map((num) => num * Math.pow(10, digits));\n  return sorted_nums.sort((a, b) => a - b);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -12, 11]\n  >>> order_by_points_desc_desc([]) == []\n  */\nconst order_by_points_desc_desc_desc = (nums) => {\n  const nums_sorted = nums.sort((a, b) => b - a);\n  const sums = nums_sorted.reduce((acc, cur) => acc + cur, 0);\n  const digits = nums_sorted.reduce((acc, cur) => acc + cur.toString().length, 0);\n  const sorted_nums = nums_sorted.map((num) => num * Math.pow(10, digits));\n  return sorted_nums.sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [1, -11, -11, -12, 11]\n  >>> order_by_points_asc_asc([]) == []\n  */\nconst order_by_points_asc_asc_desc_desc = (nums) => {\n  const nums_sorted = nums.sort((a, b) => b - a);\n  const sums = nums_sorted.reduce((acc, cur) => acc + cur, 0);\n  const digits = nums_sorted.reduce((acc, cur) => acc + cur.toString().length, 0);\n  const sorted_nums = nums_sorted.map((num) => num * Math.pow(10, digits));\n  return sorted_nums.sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-11, -11, -11, -12, 11]\n  >>> order_by_points_desc_desc_desc([]) == []\n  */\nconst order_by_points_desc_desc_desc_desc_desc = (nums) => {\n  const nums_sorted = nums.sort((a, b) => b - a);\n  const sums = nums_sorted.reduce((acc, cur) => acc + cur, 0);\n  const digits = nums_sorted.reduce((acc, cur) => acc + cur.toString().length, 0);\n  const sorted_nums = nums_sorted.map((num) => num * Math.pow(10, digits));\n  return sorted_nums.sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [1, -11, -11, -", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        a[i] = a[j] + a[k];\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          a[i] = a[i] % 3;\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_2 = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        a[i] = a[j] + a[k];\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          a[i] = a[i] % 3;\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_3 = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        a[i] = a[j] + a[k];\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          a[i] = a[i] % 3;\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_4 = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        a[i] = a[j] + a[k];\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          a[i] = a[i] % 3;\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_5 = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        a[i] = a[j] + a[k];\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          a[i] = a[i] % 3;\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_6 = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        a[i] = a[j] + a[k];\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          a[i] = a[i] % 3;\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples_7 = (n) => {\n  const a = [...Array(n - 1)].map(() => 0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        a[i] = a[j] + a[k];\n        if (i % 3 === 0 && j % 3 === 0 && k % 3 === 0) {\n          ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1OrbitDistance = planet1Orbit.distance;\n  const planet2OrbitDistance = planet2Orbit.distance;\n  const planet1OrbitDistanceInMeters = planet1OrbitDistance * 1000;\n  const planet2OrbitDistanceInMeters = planet2OrbitDistance * 1000;\n  const planet1OrbitDistanceInKm = planet1OrbitDistanceInMeters / 1000;\n  const planet2OrbitDistanceInKm = planet2OrbitDistanceInMeters / 1000;\n  const planet1OrbitDistanceInMiles = planet1OrbitDistanceInKm / 60;\n  const planet2OrbitDistanceInMiles = planet2OrbitDistanceInKm / 60;\n  const planet1OrbitDistanceInFeet = planet1OrbitDistanceInMiles / 3.6;\n  const planet2OrbitDistanceInFeet = planet2OrbitDistanceInMiles / 3.6;\n  const planet1OrbitDistanceInInches = planet1OrbitDistanceInFeet / 12;\n  const planet2OrbitDistanceInInches = planet2OrbitDistanceInFeet / 12;\n  const planet1OrbitDistanceInInch = planet1OrbitDistanceInInches / 12;\n  const planet2OrbitDistanceInInch = planet2OrbitDistanceInInches / 12;\n  const planet1OrbitDistanceInInchDegrees = planet1OrbitDistanceInInch / 12;\n  const planet2OrbitDistanceInInchDegrees = planet2OrbitDistanceInInch / 12;\n  const planet1OrbitDistanceInInchDegreesDegrees = planet1OrbitDistanceInInchDegrees / 12;\n  const planet2OrbitDistanceInInchDegreesDegrees = planet2OrbitDistanceInInchDegrees / 12;\n  const planet1OrbitDistanceInInchDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegrees / 12;\n  const planet2OrbitDistanceInInchDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegrees / 12;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegrees / 12;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegrees / 12;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet1OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees / 12;\n  const planet2OrbitDistanceInInchDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegreesDegrees = planet2OrbitDistanceInInchDegree", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return [...new Set(sum)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_sum([aa, \"a\", \"aaa\", \"cd\"]) => [\"aa\", \"cd\"]\n  assert sorted_list_sum([ab, \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return [...new Set(product)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_product([\"aa\", \"a\", \"aaa\", \"cd\"]) => [\"aa\", \"cd\"]\n  assert sorted_list_product([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_product_sum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return [...new Set(product)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_product_sum([aa, \"a\", \"aaa\", \"cd\"]) => [\"aa\", \"cd\"]\n  assert sorted_list_product_sum([ab, \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_product_product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return [...new Set(product)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_product_product([\"aa\", \"a\", \"aaa\", \"cd\"]) => [\"aa\", \"cd\"]\n  assert sorted_list_product_product([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_product_product_sum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return [...new Set(product)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_product_product_sum([aa, \"a\", \"aaa\", \"cd\"]) => [\"aa\", \"cd\"]\n  assert sorted_list_product_product_sum([ab, \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_product_product_product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return [...new Set(product)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_product_product_sum([aa, \"a\", \"aaa\", \"cd\"]) => [\"aa\", \"cd\"]\n  assert sorted_list_product_product_sum([ab, \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_product_product_product_sum = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      product *= lst[i];\n    }\n  }\n  return [...new Set(product)];\n};\n\n/*\n  Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert sorted_list_product_product_product_sum([aa, \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst string_sequence_with_zero = (n) => {\n  if (n < 0 || n > 9) {\n    return '';\n  }\n  return string_sequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst string_sequence_with_zero_and_minus_one = (n) => {\n  if (n < 0 || n > 9) {\n    return '';\n  }\n  return string_sequence(n) + `-${string_sequence(n - 1)}`;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst string_sequence_with_zero_and_minus_one_and_minus_one = (n) => {\n  if (n < 0 || n > 9) {\n    return '';\n  }\n  return string_sequence(n) + `-${string_sequence(n - 1)}-1`;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst string_sequence_with_zero_and_minus_one_and_minus_one_and_minus_one = (n) => {\n  if (n < 0 || n > 9) {\n    return '';\n  }\n  return string_sequence(n) + `-${string_sequence(n - 1)}-1-1`;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n * If n is less than 0, return '0'.\n */\nconst string_sequence_with_zero_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_minus_one_and_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n <= 0 || n % 2 === 0) return y;\n  return x_or_y(n / 2, y, x);\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 9\n  double_the_difference([0]) == 9\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == -1\n  double_the_difference([9, -2]) == 9\n  double_the_difference([0]) == 9\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 5. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 7. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 9. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 9 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 11. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 13. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 13 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 15. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 15 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 17. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 17 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 19. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 19 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 21. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 21 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 23. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 23 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 25. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 25 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 27. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 27 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 29. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 29 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 31. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 31 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 35. If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameScores = game.map(score => score);\n  const guessScores = guess.map(score => score);\n  const gameScoreDifferences = gameScores.map(gameScore => gameScore - guessScores);\n  const gameScoreDifferenceDifferences = gameScoreDifferences.map(gameScoreDifference => Math.abs(gameScoreDifference));\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  let strongest_extension = class_name;\n  let strongest_extension_strength = -1;\n  let strongest_extension_extensions = extensions;\n\n  for (let i = 0; i < strongest_extension_extensions.length; i++) {\n    const extension = strongest_extension_extensions[i];\n    const extension_strength = strongest_extension_strength;\n    const extension_class = class_name;\n\n    if (extension_strength > extension_class) {\n      strongest_extension = extension;\n      strongest_extension_strength = extension_strength;\n      strongest_extension_class = extension_class;\n    }\n  }\n\n  return strongest_extension;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that\n  has the strongest extension.\n  Example:\n  strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongest_extension_for = (class_name, extensions) => {\n  let strongest_extension = class_name;\n  let strongest_extension_strength = -1;\n  let strongest_extension_extensions = extensions;\n\n  for (let i = 0; i < strongest_extension_extensions.length; i++) {\n    const extension = strongest_extension_extensions[i];\n    const extension_strength = strongest_extension_strength;\n    const extension_class = class_name;\n\n    if (extension_strength > extension_class) {\n      strongest_extension = extension;\n      strongest_extension_strength = extension_strength;\n      strongest_extension_class = extension_class;\n    }\n  }\n\n  return strongest_extension;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that\n  has the strongest extension.\n  Example:\n  strongest_extension_for('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongest_extension_for_for = (class_name, extensions) => {\n  let strongest_extension = class_name;\n  let strongest_extension_strength = -1;\n  let strongest_extension_extensions = extensions;\n\n  for (let i = 0; i < strongest_extension_extensions.length; i++) {\n    const extension = strongest_extension_extensions[i];\n    const extension_strength = strongest_extension_strength;\n    const extension_class = class_name;\n\n    if (extension_strength > extension_class) {\n      strongest_extension = extension;\n      strongest_extension_strength = extension_strength;\n      strongest_extension_class = extension_class;\n    }\n  }\n\n  return strongest_extension;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that\n  has the strongest extension.\n  Example:\n  strongest_extension_for_for('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongest_extension_for_for_for = (class_name, extensions) => {\n  let strongest_extension = class_name;\n  let strongest_extension_strength = -1;\n  let strongest_extension_extensions = extensions;\n\n  for (let i = 0; i < strongest_extension_extensions.length; i++) {\n    const extension = strongest_extension_extensions[i];\n    const extension_strength = strongest_extension_strength;\n    const extension_class = class_name;\n\n    if (extension_strength > extension_class) {\n      strongest_extension = extension;\n      strongest_extension_strength = extension_strength;\n      strongest_extension_class = extension_class;\n    }\n  }\n\n  return strongest_extension;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that\n  has the strongest extension.\n  Example:\n  strongest_extension_for_for_for('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongest_extension_for_for_for_for = (class_name, extensions) => {\n  let strongest_extension = class_name;\n  let strongest_extension_strength = -1;\n  let strongest_extension_extensions = extensions;\n\n  for (let i = 0; i < strongest_extension_extensions.length; i++) {\n    const extension = strongest_extension_extensions[i];\n    const extension_strength = strongest_extension_strength;\n    const extension_class = class_name;\n\n    if (extension_strength > extension_class) {\n      strongest_extension = extension;\n      strongest_extension_strength = extension_strength;\n      strongest_extension_class = extension_class;\n    }\n  }\n\n  return strongest_extension;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that\n  has the strongest extension.\n  Example:\n  strongest_extension_for_for_for_for('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongest_extension_for_for_for_for_for = (class_name, extensions) => {\n  let strongest_extension = class_name;\n  let strongest_extension_strength = -1;\n  let strongest_extension_extensions = extensions;\n\n  for (let i = 0; i < strongest_extension_extensions.length; i++) {\n    const extension = strongest_extension_extensions[i];\n    const extension_strength = strongest_extension_strength;\n    const extension_class = class_name;\n\n    if (extension_strength > extension_class) {\n      strongest_extension = extension;\n      strongest_extension_strength = extension_strength;\n      strongest_extension_class = extension_class;\n    }\n  }\n\n  return strongest_extension;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name that\n  has the strongest extension.\n  Example:\n  strongest_extension_for_for_for_for_for('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongest_extension_for_for_for_for_for = (class_name, extensions) => {\n  let strongest_extension = class_name;\n  let strongest_extension_strength = -1;\n  let strongest_extension_extensions = extensions;\n\n  for (let i = 0; i < strongest_extension_extensions.length; i++) {\n    const extension = strongest_extension_extensions[i];\n    const extension_strength = strongest_extension_strength;\n    const extension_class = class_name;\n\n    if (extension_strength > extension_class) {\n      strongest_extension = extension;\n      strongest_extension_strength = extension_strength;\n      strongest_extension_class = extension_class;\n    }\n  }\n\n  return str", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  let a1 = a.split('');\n  let b1 = b.split('');\n  let len = Math.max(a1.length, b1.length);\n  let result = [];\n  for (let i = 0; i < len; i++) {\n    let a2 = a1.slice(i);\n    let b2 = b1.slice(i);\n    let rotation = a2.slice(-1) - b2.slice(-1);\n    let rotated1 = a2.slice(0, -1) + b2.slice(-1);\n    let rotated2 = a2.slice(0, -1) + b2.slice(0, -1);\n    let rotated3 = a2.slice(0, -1) + b2.slice(1) + a2.slice(i);\n    let rotated4 = a2.slice(0, -1) + b2.slice(1) + a2.slice(0, i);\n    let rotated5 = a2.slice(0, -1) + b2.slice(1) + a2.slice(1) + a2.slice(i);\n    let rotated6 = a2.slice(0, -1) + b2.slice(1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(i);\n    let rotated7 = a2.slice(0, -1) + b2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(i);\n    let rotated8 = a2.slice(0, -1) + b2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(1) + a2.slice(0, 1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a2.slice(1) + a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let even = 0, odd = 0, digit;\n  do {\n    digit = num % 10;\n    even = even + digit % 2;\n    num = Math.floor(num / 10);\n  } while (num > 0);\n  do {\n    digit = num % 10;\n    odd = odd + digit % 2;\n    num = Math.floor(num / 10);\n  } while (num > 0);\n  return [even, odd];\n};\n\n/*Given a string, return an array that has all the characters of the string.\n\n   Example:\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      characters('hello') ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = 2; i <= num.length; i++) {\n    roman += num.charAt(i) + 'i';\n  }\n\n  return roman.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its decimal equivalent,\n  and return the result in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> decimal_to_mini_roman(19) == 'xix'\n  >>> decimal_to_mini_roman(152) == 'clii'\n  >>> decimal_to_mini_roman(426) == 'cdxxvi'\n  */\nconst decimal_to_mini_roman = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = 2; i <= num.length; i++) {\n    roman += num.charAt(i) + 'i';\n  }\n\n  return roman.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its hexadecimal equivalent,\n  and return the result in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> hex_to_mini_roman(19) == 'xix'\n  >>> hex_to_mini_roman(152) == 'clii'\n  >>> hex_to_mini_roman(426) == 'cdxxvi'\n  */\nconst hex_to_mini_roman = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = 2; i <= num.length; i++) {\n    roman += num.charAt(i) + 'i';\n  }\n\n  return roman.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its octal equivalent,\n  and return the result in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> octal_to_mini_roman(19) == 'xix'\n  >>> octal_to_mini_roman(152) == 'clii'\n  >>> octal_to_mini_roman(426) == 'cdxxvi'\n  */\nconst octal_to_mini_roman = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = 2; i <= num.length; i++) {\n    roman += num.charAt(i) + 'i';\n  }\n\n  return roman.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its binary equivalent,\n  and return the result in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> binary_to_mini_roman(19) == 'xix'\n  >>> binary_to_mini_roman(152) == 'clii'\n  >>> binary_to_mini_roman(426) == 'cdxxvi'\n  */\nconst binary_to_mini_roman = (number) => {\n  let roman = '';\n  let num = (number + '');\n  let i;\n\n  for (i = 2; i <= num.length; i++) {\n    roman += num.charAt(i) + 'i';\n  }\n\n  return roman.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its octal equivalent,\n  and return the result in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> octal_to_binary(19) == 'xix'\n  >>> octal_to_binary(152) == 'clii'\n  >>> octal_to_binary(426) == 'cdxxvi'\n  */\nconst octal_to_binary = ((number) => {\n  let binary = '';\n  let num = (number + '');\n  let i;\n\n  for (i = 2; i <= num.length; i++) {\n    binary += num.charAt(i) + 'i';\n  }\n\n  return binary;\n});\n\n/*\n  Given a positive integer, obtain the number of digits in its hexadecimal equivalent,\n  and return the result in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> hex_to_binary(19) == 'xix'\n  >>> hex_to_binary(152) == 'clii'\n  >>> hex_to_binary(426) == 'cdxxvi'\n  */\nconst hex_to_binary = ((number) => {\n  let binary = '';\n  let num = (number + '');\n  let i;\n\n  for (i = 2; i <= num.length; i++) {\n    binary += num.charAt(i) + 'i';\n  }\n\n  return binary;\n});\n\n/*\n  Given a positive integer, obtain the number of digits in its decimal equivalent,\n  and return the result in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> decimal_to_binary(19) == 'xix'\n  >>> decimal_to_binary(152) == 'clii'\n  >>> decimal_to_binary(426) == 'cdxxvi'\n  */\nconst decimal_to_binary = ((number) => {\n  let binary = '';\n  let num = (number + '');\n  let i;\n\n  for (i = 2; i <= num.length; i++) {\n    binary += num.charAt(i) + 'i';\n  }\n\n  return binary;\n});\n\n/*\n  Given a positive integer, obtain the number of digits in its octal equivalent,\n  and return the result in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> octal_to_binary(19) == 'xix'\n  >>> octal_to_binary(152) == 'clii'\n  >>> octal_to_binary(426) == 'cdxxvi'\n  */\nconst octal_to_binary = ((number) => {\n  let binary = '';\n  let num = (number + '');\n  let i;\n\n  for (i = 2; i <= num.length; i++) {\n    binary += num.charAt(i) + 'i';\n  }\n\n  return binary;\n});\n\n/*\n  Given a positive integer, obtain the number of digits in its binary equivalent,\n  and return the result in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> binary_to_binary(19) == 'xix'\n  >>> binary_to_binary(152) == 'clii'\n  >>> binary_to_binary(426) == 'cdxxvi'\n  */\nconst binary_to_binary = ((number) => {\n  let binary = '';\n  let num = (number + '');\n  let i;\n\n  for (i = 2; i <= num.length; i++) {\n    binary += num.charAt(i) + 'i';\n  }\n\n  return binary;\n});\n\n/*\n  Given a positive integer, obtain the number of digits in its octal equivalent,\n  and return the result in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> octal_to_binary(19) == 'xix'\n  >>> octal_to_binary(152) == 'clii'\n  >>> octal_to_binary(426) == 'cdxxvi'\n  */\nconst octal_to_binary = ((number) => {\n  let binary = '';\n  let num = (number + '');\n  let i;\n\n  for (i = 2; i <= num.length; i++) {\n    binary += num.charAt(i) + 'i';\n  }\n\n  return binary;\n});\n\n/*\n  Given a positive integer, obtain the number of digits in its hexadecimal equivalent,\n  and return the result in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> hex_to_binary(19) == 'xix'\n  >>> hex_to_binary(152) == 'clii'\n  >>> hex_to_binary(426) == 'cdxxvi'\n  */\nconst hex", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a rectangle. Return true if the three\n  sides form a right-angled rectangle, false otherwise.\n  A right-angled rectangle is a rectangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_rectangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Return true if the three\n  sides form a right-angled pentagon, false otherwise.\n  A right-angled pentagon is a pentagon which has one side parallel to one of\n  the three sides.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_pentagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a hexagon. Return true if the three\n  sides form a right-angled hexagon, false otherwise.\n  A right-angled hexagon is a hexagon which has one side parallel to one of\n  the three sides.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_hexagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a heptagon. Return true if the three\n  sides form a right-angled heptagon, false otherwise.\n  A right-angled heptagon is a heptagon which has one side parallel to one of\n  the three sides.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_heptagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Return true if the three\n  sides form a right-angled decagon, false otherwise.\n  A right-angled decagon is a decagon which has one side parallel to one of\n  the three sides.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_decagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a octagon. Return true if the three\n  sides form a right-angled octagon, false otherwise.\n  A right-angled octagon is a octagon which has one side parallel to one of\n  the three sides.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_octagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a dodecagon. Return true if the three\n  sides form a right-angled dodecagon, false otherwise.\n  A right-angled dodecagon is a dodecagon which has one side parallel to one of\n  the three sides.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_dodecagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a hexadecagon. Return true if the three\n  sides form a right-angled hexadecagon, false otherwise.\n  A right-angled hexadecagon is a hexadecagon which has one side parallel to one of\n  the three sides.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_hexadecagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a heptadecagon. Return true if the three\n  sides form a right-angled heptadecagon, false otherwise.\n  A right-angled heptadecagon is a heptadecagon which has one side parallel to one of\n  the three sides.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_heptadecagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Return true if the three\n  sides form a right-angled decagon, false otherwise.\n  A right-angled decagon is a decagon which has one side parallel to one of\n  the three sides.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_decagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};\n\n/*\n Given the lengths of the three sides of a octagon. Return true if the three\n  sides form a right-angled octagon, false otherwise.\n  A right-angled octagon is a octagon which has one side parallel to one of\n  the three sides.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_octagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= 0 && ac >= 0 && bc >= 0;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let max = 0;\n  let max_word = \"\";\n  let max_char = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let char = word[0];\n    if (max_char.length < char.length && max_char.length > 0) {\n      if (max_char === char) {\n        max_char = max_char.substr(1);\n      }\n      if (max_char.length > char.length) {\n        max_char = char;\n      }\n    }\n    if (max_word.length < word.length && max_word.length > 0) {\n      if (max_word === word) {\n        max_word = max_word.substr(1);\n      }\n      if (max_word.length > word.length) {\n        max_word = word;\n      }\n    }\n    if (max_char.length < char.length && max_char.length > 0) {\n      if (max_char === char) {\n        max_char = max_char.substr(1);\n      }\n      if (max_char.length > char.length) {\n        max_char = char;\n      }\n    }\n    if (max_word.length < word.length && max_word.length > 0) {\n      if (max_word === word) {\n        max_word = max_word.substr(1);\n      }\n      if (max_word.length > word.length) {\n        max_word = word;\n      }\n    }\n    if (max_char.length < char.length && max_char.length > 0) {\n      if (max_char === char) {\n        max_char = max_char.substr(1);\n      }\n      if (max_char.length > char.length) {\n        max_char = char;\n      }\n    }\n    if (max_word.length < word.length && max_word.length > 0) {\n      if (max_word === word) {\n        max_word = max_word.substr(1);\n      }\n      if (max_word.length > word.length) {\n        max_word = word;\n      }\n    }\n    if (max_char.length < char.length && max_char.length > 0) {\n      if (max_char === char) {\n        max_char = max_char.substr(1);\n      }\n      if (max_char.length > char.length) {\n        max_char = char;\n      }\n    }\n  }\n  return max_word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"string\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_min = (words) => {\n  let min = 0;\n  let min_word = \"\";\n  let min_char = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let char = word[0];\n    if (min_char.length < char.length && min_char.length > 0) {\n      if (min_char === char) {\n        min_char = min_char.substr(1);\n      }\n      if (min_char.length > char.length) {\n        min_char = char;\n      }\n    }\n    if (min_word.length < word.length && min_word.length > 0) {\n      if (min_word === word) {\n        min_word = min_word.substr(1);\n      }\n      if (min_word.length > word.length) {\n        min_word = word;\n      }\n    }\n    if (min_char.length < char.length && min_char.length > 0) {\n      if (min_char === char) {\n        min_char = min_char.substr(1);\n      }\n      if (min_char.length > char.length) {\n        min_char = char;\n      }\n    }\n    if (min_word.length < word.length && min_word.length > 0) {\n      if (min_word === word) {\n        min_word = min_word.substr(1);\n      }\n      if (min_word.length > word.length) {\n        min_word = word;\n      }\n    }\n    if (min_char.length < char.length && min_char.length > 0) {\n      if (min_char === char) {\n        min_char = min_char.substr(1);\n      }\n      if (min_char.length > char.length) {\n        min_char = char;\n      }\n    }\n    if (min_word.length < word.length && min_word.length > 0) {\n      if (min_word === word) {\n        min_word = min_word.substr(1);\n      }\n      if (min_word.length > word.length) {\n        min_word = word;\n      }\n    }\n    if (min_char.length < char.length && min_char.length > 0) {\n      if (min_char === char) {\n        min_char = min_char.substr(1);\n      }\n      if (min_char.length > char.length) {\n        min_char = char;\n      }\n    }\n  }\n  return min_word;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max_min([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max_min([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max_min = (words) => {\n  let max = 0;\n  let max_word = \"\";\n  let max_char = \"\";\n  let min_word = \"\";\n  let min_char = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let char = word[0];\n    if (max_char.length < char.length && max_char.length > 0) {\n      if (max_char === char) {\n        max_char = max_char.substr(1);\n      }\n      if (max_char.length > char.length) {\n        max_char = char;\n      }\n    }\n    if (max_word.length < word.length && max_word.length > 0) {\n      if (max_word === word) {\n        max_word = max_word.substr(1);\n      }\n      if (max_word.length > word.length) {\n        max_word = word;\n      }\n    }\n    if (max_char.length < char.length && max_char.length > 0) {\n      if (max_char === char) {\n        max_char = max_char.substr(1);\n      }\n      if (max_char.length > char.length) {\n        max_char = char;\n      }\n    }\n    if (max_word.length < word.length && max_word.length > 0) {\n      if (max_word === word) {\n        max_word = max_word.substr(1);\n      }\n      if (max_word.length > word.length) {\n        max_word = word;\n      }\n    }\n    if (max_char.length < char.length && max_char.length > 0) {\n      if (max_char === char) {\n        max_char = max_char.substr(1);\n      }\n      if (max_char.length > char.length) {\n        max_char = char;\n      }\n    }\n    if (max_word.length < word.length && max_word.length > 0) {\n      if (max_word === word) {\n        max_word = max_word.substr(1);\n      }\n      if (max_word.length > word.length) {\n        max_word = word;\n      }\n    }\n    if (max_char.length < char.length && max_char.length > 0) {\n      if (max_char === char) {\n        max_char = max_char.substr(1);\n      }\n      if (max_char.length > char.length) {\n        max_char = char;\n      }\n    }\n    if (max_word.length < word.length && max_word.length > 0) {\n      if (max_word === word) {\n        max_word = max_word.substr(1);\n      }\n      if (max_word.length > word.length) {\n        max_word = word;\n      }\n    }\n    if (max_char.length < char.length && max_char.length > 0) {\n      if (max_char === char) {\n        max_char = max_char.substr(1);\n      }\n      if (max_char.length > char.length) {\n        max_char = char;\n      }\n    }\n    if (max_word.length < word.length && max_word.length > 0) {\n      if (max_word === word) {\n        max_word = max_word.substr(1);\n      }\n      if (max_word.length > word.length) {\n        max_word = word;\n      }\n    }\n    if (max_char.length < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let total = 0;\n  let left = 0;\n\n  while (left < need) {\n    total += remaining;\n    left += 1;\n    remaining -= 1;\n    result.push(total);\n  }\n\n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let total = 0;\n  let left = 0;\n\n  while (left < need) {\n    total += remaining;\n    left += 1;\n    remaining -= 1;\n    result.push(total);\n  }\n\n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let total = 0;\n  let left = 0;\n\n  while (left < need) {\n    total += remaining;\n    left += 1;\n    remaining -= 1;\n    result.push(total);\n  }\n\n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let total = 0;\n  let left = 0;\n\n  while (left < need) {\n    total += remaining;\n    left += 1;\n    remaining -= 1;\n    result.push(total);\n  }\n\n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let total = 0;\n  let left = 0;\n\n  while (left < need) {\n    total += remaining;\n    left += 1;\n    remaining -= 1;\n    result.push(total);\n  }\n\n  return result;\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char ==='') {\n      count++;\n    } else {\n      if (count > 1) {\n        return count;\n      }\n      count = 0;\n    }\n  }\n  return count;\n};\n\nconst count_distinct_characters_1 = count_distinct_characters;\n\nconst count_distinct_characters_2 = count_distinct_characters;\n\nconst count_distinct_characters_3 = count_distinct_characters;\n\nconst count_distinct_characters_4 = count_distinct_characters;\n\nconst count_distinct_characters_5 = count_distinct_characters;\n\nconst count_distinct_characters_6 = count_distinct_characters;\n\nconst count_distinct_characters_7 = count_distinct_characters;\n\nconst count_distinct_characters_8 = count_distinct_characters;\n\nconst count_distinct_characters_9 = count_distinct_characters;\n\nconst count_distinct_characters_10 = count_distinct_characters;\n\nconst count_distinct_characters_11 = count_distinct_characters;\n\nconst count_distinct_characters_12 = count_distinct_characters;\n\nconst count_distinct_characters_13 = count_distinct_characters;\n\nconst count_distinct_characters_14 = count_distinct_characters;\n\nconst count_distinct_characters_15 = count_distinct_characters;\n\nconst count_distinct_characters_16 = count_distinct_characters;\n\nconst count_distinct_characters_17 = count_distinct_characters;\n\nconst count_distinct_characters_18 = count_distinct_characters;\n\nconst count_distinct_characters_19 = count_distinct_characters;\n\nconst count_distinct_characters_20 = count_distinct_characters;\n\nconst count_distinct_characters_21 = count_distinct_characters;\n\nconst count_distinct_characters_22 = count_distinct_characters;\n\nconst count_distinct_characters_23 = count_distinct_characters;\n\nconst count_distinct_characters_24 = count_distinct_characters;\n\nconst count_distinct_characters_25 = count_distinct_characters;\n\nconst count_distinct_characters_26 = count_distinct_characters;\n\nconst count_distinct_characters_27 = count_distinct_characters;\n\nconst count_distinct_characters_28 = count_distinct_characters;\n\nconst count_distinct_characters_29 = count_distinct_characters;\n\nconst count_distinct_characters_30 = count_distinct_characters;\n\nconst count_distinct_characters_31 = count_distinct_characters;\n\nconst count_distinct_characters_32 = count_distinct_characters;\n\nconst count_distinct_characters_33 = count_distinct_characters;\n\nconst count_distinct_characters_34 = count_distinct_characters;\n\nconst count_distinct_characters_35 = count_distinct_characters;\n\nconst count_distinct_characters_36 = count_distinct_characters;\n\nconst count_distinct_characters_37 = count_distinct_characters;\n\nconst count_distinct_characters_38 = count_distinct_characters;\n\nconst count_distinct_characters_39 = count_distinct_characters;\n\nconst count_distinct_characters_40 = count_distinct_characters;\n\nconst count_distinct_characters_41 = count_distinct_characters;\n\nconst count_distinct_characters_42 = count_distinct_characters;\n\nconst count_distinct_characters_43 = count_distinct_characters;\n\nconst count_distinct_characters_44 = count_distinct_characters;\n\nconst count_distinct_characters_45 = count_distinct_characters;\n\nconst count_distinct_characters_46 = count_distinct_characters;\n\nconst count_distinct_characters_47 = count_distinct_characters;\n\nconst count_distinct_characters_48 = count_distinct_characters;\n\nconst count_distinct_characters_49 = count_distinct_characters;\n\nconst count_distinct_characters_50 = count_distinct_characters;\n\nconst count_distinct_characters_51 = count_distinct_characters;\n\nconst count_distinct_characters_52 = count_distinct_characters;\n\nconst count_distinct_characters_53 = count_distinct_characters;\n\nconst count_distinct_characters_54 = count_distinct_characters;\n\nconst count_distinct_characters_55 = count_distinct_characters;\n\nconst count_distinct_characters_56 = count_distinct_characters;\n\nconst count_distinct_characters_57 = count_distinct_characters;\n\nconst count_distinct_characters_58 = count_distinct_characters;\n\nconst count_distinct_characters_59 = count_distinct_characters;\n\nconst count_distinct_characters_60 = count_distinct_characters;\n\nconst count_distinct_characters_61 = count_distinct_characters;\n\nconst count_distinct_characters_62 = count_distinct_characters;\n\nconst count_distinct_characters_63 = count_distinct_characters;\n\nconst count_distinct_characters_64 = count_distinct_characters;\n\nconst count_distinct_characters_65 = count_distinct_characters;\n\nconst count_distinct_characters_66 = count_distinct_characters;\n\nconst count_distinct_characters_67 = count_distinct_characters;\n\nconst count_distinct_characters_68 = count_distinct_characters;\n\nconst count_distinct_characters_69 = count_distinct_characters;\n\nconst count_distinct_characters_70 = count_distinct_characters;\n\nconst count_distinct_characters_71 = count_distinct_characters;\n\nconst count_distinct_characters_72 = count_distinct_characters;\n\nconst count_distinct_characters_73 = count_distinct_characters;\n\nconst count_distinct_characters_74 = count_distinct_characters;\n\nconst count_distinct_characters_75 = count_distinct_characters;\n\nconst count_distinct_characters_76 = count_distinct_characters;\n\nconst count_distinct_characters_77 = count_distinct_characters;\n\nconst count_distinct_characters_78 = count_distinct_characters;\n\nconst count_distinct_characters_79 = count_distinct_characters;\n\nconst count_distinct_characters_80 = count_distinct_characters;\n\nconst count_distinct_characters_81 = count_distinct_characters;\n\nconst count_distinct_characters_82 = count_distinct_characters;\n\nconst count_distinct_characters_83 = count_distinct_characters;\n\nconst count_distinct_characters_84 = count_distinct_characters;\n\nconst count_distinct_characters_85 = count_distinct_characters;\n\nconst count_distinct_characters_86 = count_distinct_characters;\n\nconst count_distinct_characters_87 = count_distinct_characters;\n\nconst count_distinct_characters_88 = count_distinct_characters;\n\nconst count_distinct_characters_89 = count_distinct_characters;\n\nconst count_distinct_characters_90 = count_distinct_characters;\n\nconst count_distinct_characters_91 = count_distinct_characters;\n\nconst count_distinct_characters_92 = count_distinct_characters;\n\nconst count_distinct_characters_93 = count_distinct_characters;\n\nconst count_distinct_characters_94 = count_distinct_characters;\n\nconst count_distinct_characters_95 = count_distinct_characters;\n\nconst count_distinct_characters_96 = count_distinct_characters;\n\nconst count_distinct_characters_97 = count_distinct_characters;\n\nconst count_distinct_characters_98 = count_distinct_characters;\n\nconst count_distinct_characters_99 = count_distinct_characters;\n\nconst count_distinct_characters_100 = count_distinct_characters;\n\nconst count_distinct_characters_101 = count_distinct_characters;\n\nconst count_distinct_characters_102 = count_distinct_characters;\n\nconst count_distinct_characters_103 = count_distinct_character", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  let result = 0;\n  let operator_count = 0;\n  let operands_count = 0;\n  let operator_list = operator;\n  let operands_list = operand;\n\n  while (operator_count < operator_list.length && operands_count < operands_list.length) {\n    if (operator_list[operator_count] === '+') {\n      result += operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '-') {\n      result -= operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '*') {\n      result *= operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '/') {\n      result /= operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '**') {\n      result **= operands_list[operands_count];\n      operands_count++;\n    }\n    operator_count++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_multi = (operator, operand) => {\n  let result = 0;\n  let operator_count = 0;\n  let operands_count = 0;\n  let operator_list = operator;\n  let operands_list = operand;\n\n  while (operator_count < operator_list.length && operands_count < operands_list.length) {\n    if (operator_list[operator_count] === '+') {\n      result += operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '-') {\n      result -= operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '*') {\n      result *= operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '/') {\n      result /= operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '**') {\n      result *= operands_list[operands_count];\n      operands_count++;\n    }\n    operator_count++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_div = (operator, operand) => {\n  let result = 0;\n  let operator_count = 0;\n  let operands_count = 0;\n  let operator_list = operator;\n  let operands_list = operand;\n\n  while (operator_count < operator_list.length && operands_count < operands_list.length) {\n    if (operator_list[operator_count] === '+') {\n      result += operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '-') {\n      result -= operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '*') {\n      result *= operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '/') {\n      result /= operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '**') {\n      result /= operands_list[operands_count];\n      operands_count++;\n    }\n    operator_count++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_pow = (operator, operand) => {\n  let result = 0;\n  let operator_count = 0;\n  let operands_count = 0;\n  let operator_list = operator;\n  let operands_list = operand;\n\n  while (operator_count < operator_list.length && operands_count < operands_list.length) {\n    if (operator_list[operator_count] === '+') {\n      result += operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '-') {\n      result -= operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '*') {\n      result *= operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '/') {\n      result /= operands_list[operands_count];\n      operands_count++;\n    } else if (operator_list[operator_count] === '**') {\n      result *= operands_list[operands_count];\n      operands_count++;\n    }\n    operator_count++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = \"\";\n  let letter = \"\";\n  let letters = \"\";\n  let i = 0;\n  let j = 0;\n  let temp = \"\";\n  let temp2 = \"\";\n  let temp3 = \"\";\n  let temp4 = \"\";\n  let temp5 = \"\";\n  let temp6 = \"\";\n  let temp7 = \"\";\n  let temp8 = \"\";\n  let temp9 = \"\";\n  let temp10 = \"\";\n  let temp11 = \"\";\n  let temp12 = \"\";\n  let temp13 = \"\";\n  let temp14 = \"\";\n  let temp15 = \"\";\n  let temp16 = \"\";\n  let temp17 = \"\";\n  let temp18 = \"\";\n  let temp19 = \"\";\n  let temp20 = \"\";\n  let temp21 = \"\";\n  let temp22 = \"\";\n  let temp23 = \"\";\n  let temp24 = \"\";\n  let temp25 = \"\";\n  let temp26 = \"\";\n  let temp27 = \"\";\n  let temp28 = \"\";\n  let temp29 = \"\";\n  let temp30 = \"\";\n  let temp31 = \"\";\n  let temp32 = \"\";\n  let temp33 = \"\";\n  let temp34 = \"\";\n  let temp35 = \"\";\n  let temp36 = \"\";\n  let temp37 = \"\";\n  let temp38 = \"\";\n  let temp39 = \"\";\n  let temp40 = \"\";\n  let temp41 = \"\";\n  let temp42 = \"\";\n  let temp43 = \"\";\n  let temp44 = \"\";\n  let temp45 = \"\";\n  let temp46 = \"\";\n  let temp47 = \"\";\n  let temp48 = \"\";\n  let temp49 = \"\";\n  let temp50 = \"\";\n  let temp51 = \"\";\n  let temp52 = \"\";\n  let temp53 = \"\";\n  let temp54 = \"\";\n  let temp55 = \"\";\n  let temp56 = \"\";\n  let temp57 = \"\";\n  let temp58 = \"\";\n  let temp59 = \"\";\n  let temp60 = \"\";\n  let temp61 = \"\";\n  let temp62 = \"\";\n  let temp63 = \"\";\n  let temp64 = \"\";\n  let temp65 = \"\";\n  let temp66 = \"\";\n  let temp67 = \"\";\n  let temp68 = \"\";\n  let temp69 = \"\";\n  let temp70 = \"\";\n  let temp71 = \"\";\n  let temp72 = \"\";\n  let temp73 = \"\";\n  let temp74 = \"\";\n  let temp75 = \"\";\n  let temp76 = \"\";\n  let temp77 = \"\";\n  let temp78 = \"\";\n  let temp79 = \"\";\n  let temp80 = \"\";\n  let temp81 = \"\";\n  let temp82 = \"\";\n  let temp83 = \"\";\n  let temp84 = \"\";\n  let temp85 = \"\";\n  let temp86 = \"\";\n  let temp87 = \"\";\n  let temp88 = \"\";\n  let temp89 = \"\";\n  let temp90 = \"\";\n  let temp91 = \"\";\n  let temp92 = \"\";\n  let temp93 = \"\";\n  let temp94 = \"\";\n  let temp95 = \"\";\n  let temp96 = \"\";\n  let temp97 = \"\";\n  let temp98 = \"\";\n  let temp99 = \"\";\n  let temp100 = \"\";\n  let temp101 = \"\";\n  let temp102 = \"\";\n  let temp103 = \"\";\n  let temp104 = \"\";\n  let temp105 = \"\";\n  let temp106 = \"\";\n  let temp107 = \"\";\n  let temp108 = \" \";\n  let temp109 = \"\";\n  let temp110 = \"\";\n  let temp111 = \"\";\n  let temp112 = \"\";\n  let temp113 = \"\";\n  let temp114 = \"\";\n  let temp115 = \"\";\n  let temp116 = \"\";\n  let temp117 = \"\";\n  let temp118 = \" \";\n  let temp119 = \"\";\n  let temp120 = \"\";\n  let temp121 = \"\";\n  let temp122 = \"\";\n  let temp123 = \"\";\n  let temp124 = \"\";\n  let temp125 = \"\";\n  let temp126 = \"\";\n  let temp127 = \"\";\n  let temp128 = \"\";\n  let temp129 = \"\";\n  let temp130 = \"\";\n  let temp131 = \"\";\n  let temp132 = \"\";\n  let temp133 = \"\";\n  let temp134 = \"\";\n  let temp135 = \"\";\n  let temp136 = \"\";\n  let temp137 = \"\";\n  let temp138 = \" \";\n  let temp139 = \"\";\n  let temp140 = \"\";\n  let temp141 = \"\";\n  let temp142 = \"\";\n  let temp143 = \"\";\n  let temp144 = \"\";\n  let temp145 = \"\";\n  let temp146 = \"\";\n  let temp147 = \"\";\n  let temp148 = \" \";\n  let temp149 = \"\";\n  let temp150 = \"\";\n  let temp151 = \"\";\n  let temp152 = \"\";\n  let temp153 = \"\";\n  let temp154 = \"\";\n  let temp155 = \"\";\n  let temp156 = \"\";\n  let temp157 = \" \";\n  let temp158 = \" \";\n  let temp159 = \"\";\n  let temp160 = \"\";\n  let temp161 = \"\";\n  let temp162 = \"\";\n  let temp163 = \"\";\n  let temp164 = \"\";\n  let temp165 = \"\";\n  let temp166 = \"\";\n  let temp167 = \" \";\n  let temp168 = \" \";\n  let temp169 = \"\";\n  let temp170 = \"\";\n  let temp171 = \"\";\n  let temp172 = \"\";\n  let temp173 = \"\";\n  let temp174 = \"\";\n  let temp175 = \"\";\n  let temp176 = \"\";\n  let temp177 = \"\";\n  let temp178 = \" \";\n  let temp179 = \"\";\n  let temp180 = \"\";\n  let temp181 = \"\";\n  let temp182 = \"\";\n  let temp183 = \"\";\n  let temp184 = \"\";\n  let temp185 = \"\";\n  let temp186 = \"\";\n  let temp187 = \"\";\n  let temp188 = \" \";\n  let temp189 = \"\";\n  let temp190 = \"\";\n  let temp191 = \"\";\n  let temp192 = \"\";\n  let temp193 = \"\";\n  let temp194 = \"\";\n  let temp195 = \"\";\n  let temp196 = \"\";\n  let temp197 = \"\";\n  let temp198 = \" \";\n  let temp199 = \"\";\n  let temp200 = \"\";\n  let temp201 = \"\";\n  let temp202 = \"\";\n  let temp203 = \"\";\n  let temp204 = \"\";\n  let temp205 = \"\";\n  let temp206 = \"\";\n  let temp207 = \" \";\n  let temp208 = \" \";\n  let temp209 = \"\";\n  let temp210 = \"\";\n  let temp211 = \"\";\n  let temp212 = \"\";\n  let temp213 = \"\";\n  let temp214 = \"\";\n  let temp215 = \"\";\n  let temp216 = \"\";\n  let temp217 = \"\";\n  let temp218 = \"\";\n  let temp219 = \"\";\n  let temp220 = \"\";\n  let temp221 = \"\";\n  let temp222 = \"\";\n  let temp223 = \"\";\n  let temp224 = \"\";\n  let temp225 = \"\";\n  let temp226 = \"\";\n  let temp227 = \"\";\n  let temp228 = \" \";\n  let temp229 = \"\";\n  let temp230 = \"\";\n  let temp231 = \"\";\n  let temp232 = \"\";\n  let temp233 = \"\";\n  let temp234 = \"\";\n  let temp235 = \"\";\n  let temp236 = \"\";\n  let temp237 = \"\";\n  let temp238 = \" \";\n  let temp239 = \"\";\n  let temp240 = \"\";\n  let temp241 = \"\";\n  let temp242 = \"\";\n  let temp243 = \"\";\n  let temp244 = \"\";\n  let temp245 = \"\";\n  let temp246 = \"\";\n  let temp247 = \" \";\n  let temp248 = \" \";\n  let temp249 = \"\";\n  let temp250 = \"\";\n  let temp251 = \"\";\n  let temp252 = \"\";\n  let temp253 = \"\";\n  let temp254 = \"\";\n  let temp255 = \"\";\n  let temp256 = \"\";\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'b3d0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'f8a5fb0a30e3b16606c1a6684e5a3e1760adbce4bda0b3f7e36c9da7d5d'\n  */\nconst string_to_sha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha224 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha224('Hello world') == '4f0eaa3ebb4c91f93218b775d9e98cddf50b32bce4ad7852b855'\n  */\nconst string_to_sha224 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha224').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha384('Hello world') == '9c10b294e00b772fa0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha384 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == '9c10b294e00b772fa0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'b3d0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha1_hex = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'f8a5fb0a30e3b16606c1a6684e5a3e1760adbce4bda0b3f7e36c9da7d5d'\n  */\nconst string_to_sha256_hex = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha224 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha224('Hello world') == '4f0eaa3ebb4c91f93218b775d9e98cddf50b32bce4ad7852b855'\n  */\nconst string_to_sha224_hex = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha224').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha384('Hello world') == '9c10b294e00b772fa0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha384_hex = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == '9c10b294e00b772fa0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha512_hex = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'b3d0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha1_base64 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha1').update(text, 'utf8').digest('base64');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'f8a5fb0a30e3b16606c1a6684e5a3e1760adbce4bda0b3f7e36c9da7d5d'\n  */\nconst string_to_sha256_base64 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return crypto.createHash('sha256').update(text, 'utf8').digest('base64');\n};\n\n/*\n  Given a string 'text', return its sha224 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha224('Hello world') == '4f0eaa3ebb4c91f93218b775d9e98cddf50b32bce4", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const result = [];\n  let current = 0;\n  let next = 1;\n  let last = 0;\n  let digit;\n\n  while (current <= b) {\n    digit = current % 10;\n    result.push(digit);\n    current = next;\n    next = next * 10;\n  }\n\n  return result;\n};\n\n/**\n * Given a number, return its decimal representation in base 10.\n */\nconst to_decimal = number => {\n  const decimal = number.toString().split('').reverse().join('');\n  return decimal;\n};\n\n/**\n * Given a number, return its binary representation in base 2.\n */\nconst to_binary = number => {\n  const binary = number.toString(2).split('').reverse().join('');\n  return binary;\n};\n\n/**\n * Given a number, return its octal representation in base 8.\n */\nconst to_octal = number => {\n  const octal = number.toString(8).split('').reverse().join('');\n  return octal;\n};\n\n/**\n * Given a number, return its hexadecimal representation in base 16.\n */\nconst to_hex = number => {\n  const hex = number.toString(16).split('').reverse().join('');\n  return hex;\n};\n\n/**\n * Given a number, return its triple decimal (base 10) representation in base 10.\n */\nconst to_triple_decimal = number => {\n  const decimal = to_decimal(number);\n  const binary = to_binary(decimal);\n  const octal = to_octal(binary);\n  const hex = to_hex(decimal);\n  const triple_decimal = to_decimal(\n    to_binary(to_decimal(to_binary(decimal))),\n  );\n  return [decimal, binary, octal, hex, triple_decimal];\n};\n\n/**\n * Given a number, return its triple binary (base 2) representation in base 10.\n */\nconst to_triple_binary = number => {\n  const decimal = to_decimal(number);\n  const binary = to_binary(decimal);\n  const octal = to_octal(binary);\n  const hex = to_hex(decimal);\n  const triple_binary = to_binary(\n    to_decimal(to_binary(to_decimal(decimal))),\n  );\n  return [decimal, binary, octal, hex, triple_binary];\n};\n\n/**\n * Given a number, return its triple octal (base 8) representation in base 10.\n */\nconst to_trillite_octal = number => {\n  const decimal = to_decimal(number);\n  const binary = to_binary(decimal);\n  const octal = to_octal(binary);\n  const hex = to_hex(decimal);\n  const trillite_octal = to_decimal(\n    to_binary(to_decimal(to_binary(decimal))),\n  );\n  return [decimal, binary, octal, hex, trillite_octal];\n};\n\n/**\n * Given a number, return its triple hexadecimal (base 16) representation in base 10.\n */\nconst to_trillite_hex = number => {\n  const decimal = to_decimal(number);\n  const binary = to_binary(decimal);\n  const octal = to_octal(binary);\n  const hex = to_hex(decimal);\n  const trillite_hex = to_decimal(\n    to_binary(to_decimal(to_binary(decimal))),\n  );\n  return [decimal, binary, octal, hex, trillite_hex];\n};\n\n/**\n * Given a number, return its triple triple_decimal (base 10) representation in base 10.\n */\nconst to_trillite_triple_decimal = number => {\n  const decimal = to_decimal(number);\n  const binary = to_binary(decimal);\n  const octal = to_octal(binary);\n  const hex = to_hex(decimal);\n  const trillite_triple_decimal = to_decimal(\n    to_binary(to_decimal(to_binary(decimal))),\n  );\n  return [decimal, binary, octal, hex, trillite_triple_decimal];\n};\n\n/**\n * Given a number, return its triple binary (base 2) representation in base 10.\n */\nconst to_trillite_triple_binary = number => {\n  const decimal = to_decimal(number);\n  const binary = to_binary(decimal);\n  const octal = to_octal(binary);\n  const hex = to_hex(decimal);\n  const trillite_triple_binary = to_binary(\n    to_decimal(to_binary(to_decimal(decimal))),\n  );\n  return [decimal, binary, octal, hex, trillite_triple_binary];\n};\n\n/**\n * Given a number, return its triple octal (base 8) representation in base 10.\n */\nconst to_trillite_trillite_octal = number => {\n  const decimal = to_decimal(number);\n  const binary = to_binary(decimal);\n  const octal = to_octal(binary);\n  const hex = to_hex(decimal);\n  const trillite_trillite_octal = to_decimal(\n    to_binary(to_decimal(to_binary(decimal))),\n  );\n  return [decimal, binary, octal, hex, trillite_trillite_octal];\n};\n\n/**\n * Given a number, return its triple hexadecimal (base 16) representation in base 10.\n */\nconst to_trillite_trillite_hex = number => {\n  const decimal = to_decimal(number);\n  const binary = to_binary(decimal);\n  const octal = to_octal(binary);\n  const hex = to_hex(decimal);\n  const trillite_trillite_hex = to_decimal(\n    to_binary(to_decimal(to_binary(decimal))),\n  );\n  return [decimal, binary, octal, hex, trillite_trillite_hex];\n};\n\n/**\n * Given a number, return its triple triple_decimal (base 10) representation in base 10.\n */\nconst to_trillite_trillite_triple_decimal = number => {\n  const decimal = to_decimal(number);\n  const binary = to_binary(decimal);\n  const octal = to_octal(binary);\n  const hex = to_hex(decimal);\n  const trillite_trillite_triple_decimal = to_decimal(\n    to_binary(to_decimal(to_binary(decimal))),\n  );\n  return [decimal, binary, octal, hex, trillite_trillite_triple_decimal];\n};\n\n/**\n * Given a number, return its triple binary (base 2) representation in base 10.\n */\nconst to_trillite_trillite_triple_binary = number => {\n  const decimal = to_decimal(number);\n  const binary = to_binary(decimal);\n  const octal = to_octal(binary);\n  const hex = to_hex(decimal);\n  const trillite_trillite_triple_binary = to_binary(\n    to_decimal(to_binary(to_decimal(decimal))),\n  );\n  return [decimal, binary, octal, hex, trillite_trillite_triple_binary];\n};\n\n/**\n * Given a number, return its triple octal (base 8) representation in base 10.\n */\nconst to_trillite_trillite_trillite_octal = number => {\n  const decimal = to_decimal(number);\n  const binary = to_binary(decimal);\n  const octal = to_octal(binary);\n  const hex = to_hex(decimal", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_count = notes.reduce((acc, note) => {\n    const [note_type, note] = note.split(' ');\n    acc[note_type] = acc[note_type] || 0;\n    acc[note_type] += 1;\n    return acc;\n  }, {});\n  return Object.keys(notes_count).map(key => notes_count[key]);\n};\n\n// Given a string, return a list of integers corresponding to how many beats does each note last.\n// For example, '.' returns [1, 1, 1, 1, 1, 1, 1]\nconst parse_notes = (notes_string) => {\n  const notes = notes_string.split(' ');\n  const notes_count = notes.reduce((acc, note) => {\n    const [note_type, note] = note.split('|');\n    acc[note_type] = acc[note_type] || 0;\n    acc[note_type] += 1;\n    return acc;\n  }, {});\n  return Object.keys(notes_count).map(key => notes_count[key]);\n};\n\n// Given a string, return a list of integers corresponding to how many beats does each note last.\n// For example, '.' returns [1, 1, 1, 1, 1, 1, 1]\nconst parse_notes_string = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_count = notes.reduce((acc, note) => {\n    const [note_type, note] = note.split(' ');\n    acc[note_type] = acc[note_type] || 0;\n    acc[note_type] += 1;\n    return acc;\n  }, {});\n  return Object.keys(notes_count).map(key => notes_count[key]);\n};\n\n// Given a string, return a list of integers corresponding to how many beats does each note last.\n// For example, '.' returns [1, 1, 1, 1, 1, 1, 1]\nconst parse_notes_string_with_beats = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_count = notes.reduce((acc, note) => {\n    const [note_type, note] = note.split(' ');\n    acc[note_type] = acc[note_type] || 0;\n    acc[note_type] += 1;\n    return acc;\n  }, {});\n  return Object.keys(notes_count).map(key => notes_count[key]);\n};\n\n// Given a string, return a list of integers corresponding to how many beats does each note last.\n// For example, '.' returns [1, 1, 1, 1, 1, 1, 1]\nconst parse_notes_string_with_beats_without_beats = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_count = notes.reduce((acc, note) => {\n    const [note_type, note] = note.split(' ');\n    acc[note_type] = acc[note_type] || 0;\n    acc[note_type] += 1;\n    return acc;\n  }, {});\n  return Object.keys(notes_count).map(key => notes_count[key]);\n};\n\n// Given a string, return a list of integers corresponding to how many beats does each note last.\n// For example, '.' returns [1, 1, 1, 1, 1, 1, 1]\nconst parse_notes_string_with_beats_without_beats_without_beats = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_count = notes.reduce((acc, note) => {\n    const [note_type, note] = note.split(' ');\n    acc[note_type] = acc[note_type] || 0;\n    acc[note_type] += 1;\n    return acc;\n  }, {});\n  return Object.keys(notes_count).map(key => notes_count[key]);\n};\n\n// Given a string, return a list of integers corresponding to how many beats does each note last.\n// For example, '.' returns [1, 1, 1, 1, 1, 1, 1]\nconst parse_notes_string_with_beats_without_beats_without_beats_without_beats = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_count = notes.reduce((acc, note) => {\n    const [note_type, note] = note.split(' ');\n    acc[note_type] = acc[note_type] || 0;\n    acc[note_type] += 1;\n    return acc;\n  }, {});\n  return Object.keys(notes_count).map(key => notes_count[key]);\n};\n\n// Given a string, return a list of integers corresponding to how many beats does each note last.\n// For example, '.' returns [1, 1, 1, 1, 1, 1, 1]\nconst parse_notes_string_with_beats_without_beats_without_beats_without_beats_without_beats = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_count = notes.reduce((acc, note) => {\n    const [note_type, note] = note.split(' ');\n    acc[note_type] = acc[note_type] || 0;\n    acc[note_type] += 1;\n    return acc;\n  }, {});\n  return Object.keys(notes_count).map(key => notes_count[key]);\n};\n\n// Given a string, return a list of integers corresponding to how many beats does each note last.\n// For example, '.' returns [1, 1, 1, 1, 1, 1, 1]\nconst parse_notes_string_with_beats_without_beats_without_beats_without_beats_without_beats_without_beats = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_count = notes.reduce((acc, note) => {\n    const [note_type, note] = note.split(' ');\n    acc[note_type] = acc[note_type] || 0;\n    acc[note_type] += 1;\n    return acc;\n  }, {});\n  return Object.keys(notes_count).map(key => notes_count[key]);\n};\n\n// Given a string, return a list of integers corresponding to how many beats does each note last.\n// For example, '.' returns [1, 1, 1, 1, 1, 1, 1]\nconst parse_notes_string_with_beats_without_beats_without_beats_without_beats_without_beats_without_beats_without_beats = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_count = notes.reduce((acc, note) => {\n    const [note_type, note] = note.split(' ');\n    acc[note_type] = acc[note_type] || 0;\n    acc[note_type] += 1;\n    return acc;\n  }, {});\n  return Object.keys(notes_count).map(key => notes_count[key]);\n};\n\n// Given a string, return a list of integers corresponding to how many beats does each note last.\n// For example, '.' returns [1, 1, 1, 1, 1, 1, 1]\nconst parse_notes_string_with_beats_without_beats_without_beats_without_beats_without_beats_without_beats_without_beats_without_beats_without_beats = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_count = notes.reduce((acc, note) => {\n    const [note_type, note] = note.split(' ');\n    acc[note_type] = acc[note_type] || 0;\n    acc[note_type] += 1;\n    return acc;\n  }, {});\n  return Object.keys(notes_count).map(key => notes_count[key]);\n};\n\n// Given a string, return a list of integers corresponding to how many beats does each note last.\n// For example, '.' returns [1, 1, 1, 1, 1, 1, 1]\nconst parse_notes_string_with_beats_without_beats_without_beats_without_beats_without_beats_without_beats_without_beats_without_beats_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = substring? substring.split('') : [];\n\n  while (i < l) {\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k++;\n    } else if (string.charAt(i) === substring.charAt(k)) {\n      count++;\n      i++;\n      k", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  let numbers_sorted = numbers.split(' ').sort((a, b) => a - b);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse = (numbers) => {\n  let numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse_reverse = (numbers) => {\n  let numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse_reverse_and_reverse = (numbers) => {\n  let numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse_reverse_and_reverse_and_reverse = (numbers) => {\n  let numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse_reverse_and_reverse_and_reverse_and_reverse = (numbers) => {\n  let numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (numbers) => {\n  let numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (numbers) => {\n  let numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (numbers) => {\n  let numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (numbers) => {\n  let numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (numbers) => {\n  let numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers_reverse_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (numbers) => {\n  let numbers_sorted = numbers.split(' ').sort((a, b) => b - a);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  let decimal = parseInt(number);\n  let remainder = number % 1;\n  let decimals = remainder === 0? 0 : Math.ceil(number / 1);\n  let decimalPart = decimal % 1;\n  let integerPart = decimal / 1;\n  return { decimal, decimals, decimalPart, integerPart, remainder };\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  let decimal = parseInt(number);\n  let remainder = number % 1;\n  let decimals = remainder === 0? 0 : Math.ceil(number / 1);\n  let decimalPart = decimal % 1;\n  let integerPart = decimal / 1;\n  return { decimal, decimals, decimalPart, integerPart, remainder };\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the remainder of the number.\n  >>> truncate_number(3.5)\n  1\n  */\nconst truncate_number_remainder = (number) => {\n  let decimal = parseInt(number);\n  let remainder = number % 1;\n  let decimals = remainder === 0? 0 : Math.ceil(number / 1);\n  let decimalPart = decimal % 1;\n  let integerPart = decimal / 1;\n  return { decimal, decimals, decimalPart, integerPart, remainder };\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  3.5\n  */\nconst truncate_number_decimal = (number) => {\n  let decimal = parseInt(number);\n  let remainder = number % 1;\n  let decimals = remainder === 0? 0 : Math.ceil(number / 1);\n  let decimalPart = decimal % 1;\n  let integerPart = decimal / 1;\n  return { decimal, decimals, decimalPart, integerPart, remainder };\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_decimal_int_remainder = (number) => {\n  let decimal = parseInt(number);\n  let remainder = number % 1;\n  let decimals = remainder === 0? 0 : Math.ceil(number / 1);\n  let decimalPart = decimal % 1;\n  let integerPart = decimal / 1;\n  return { decimal, decimals, decimalPart, integerPart, remainder };\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the remainder of the number.\n  >>> truncate_number(3.5)\n  1\n  */\nconst truncate_number_decimal_int_remainder_decimal = (number) => {\n  let decimal = parseInt(number);\n  let remainder = number % 1;\n  let decimals = remainder === 0? 0 : Math.ceil(number / 1);\n  let decimalPart = decimal % 1;\n  let integerPart = decimal / 1;\n  return { decimal, decimals, decimalPart, integerPart, remainder };\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  3.5\n  */\nconst truncate_number_decimal_int_remainder_decimal_int_remainder = (number) => {\n  let decimal = parseInt(number);\n  let remainder = number % 1;\n  let decimals = remainder === 0? 0 : Math.ceil(number / 1);\n  let decimalPart = decimal % 1;\n  let integerPart = decimal / 1;\n  return { decimal, decimals, decimalPart, integerPart, remainder };\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_decimal_int_remainder_decimal_int_remainder_decimal = (number) => {\n  let decimal = parseInt(number);\n  let remainder = number % 1;\n  let decimals = remainder === 0? 0 : Math.ceil(number / 1);\n  let decimalPart = decimal % 1;\n  let integerPart = decimal / 1;\n  return { decimal, decimals, decimalPart, integerPart, remainder };\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the remainder of the number.\n  >>> truncate_number(3.5)\n  1\n  */\nconst truncate_number_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder = (number) => {\n  let decimal = parseInt(number);\n  let remainder = number % 1;\n  let decimals = remainder === 0? 0 : Math.ceil(number / 1);\n  let decimalPart = decimal % 1;\n  let integerPart = decimal / 1;\n  return { decimal, decimals, decimalPart, integerPart, remainder };\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  3.5\n  */\nconst truncate_number_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder = (number) => {\n  let decimal = parseInt(number);\n  let remainder = number % 1;\n  let decimals = remainder === 0? 0 : Math.ceil(number / 1);\n  let decimalPart = decimal % 1;\n  let integerPart = decimal / 1;\n  return { decimal, decimals, decimalPart, integerPart, remainder };\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder = (number) => {\n  let decimal = parseInt(number);\n  let remainder = number % 1;\n  let decimals = remainder === 0? 0 : Math.ceil(number / 1);\n  let decimalPart = decimal % 1;\n  let integerPart = decimal / 1;\n  return { decimal, decimals, decimalPart, integerPart, remainder };\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the remainder of the number.\n  >>> truncate_number(3.5)\n  1\n  */\nconst truncate_number_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder_decimal_int_remainder_decimal_int_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers.reduce((smallest, current) => {\n    return Math.min(smallest, current);\n  }, Number.NEGATIVE_INFINITY);\n  const largest = numbers.reduce((largest, current) => {\n    return Math.max(largest, current);\n  }, Number.POSITIVE_INFINITY);\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements_reverse = (numbers) => {\n  const smallest = numbers.reduce((smallest, current) => {\n    return Math.max(smallest, current);\n  }, Number.NEGATIVE_INFINITY);\n  const largest = numbers.reduce((largest, current) => {\n    return Math.min(largest, current);\n  }, Number.POSITIVE_INFINITY);\n  return [largest, smallest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements_reverse_reverse = (numbers) => {\n  const smallest = numbers.reduce((smallest, current) => {\n    return Math.max(smallest, current);\n  }, Number.NEGATIVE_INFINITY);\n  const largest = numbers.reduce((largest, current) => {\n    return Math.min(largest, current);\n  }, Number.POSITIVE_INFINITY);\n  return [largest, smallest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements_reverse_reverse_and_reverse = (numbers) => {\n  const smallest = numbers.reduce((smallest, current) => {\n    return Math.max(smallest, current);\n  }, Number.NEGATIVE_INFINITY);\n  const largest = numbers.reduce((largest, current) => {\n    return Math.min(largest, current);\n  }, Number.POSITIVE_INFINITY);\n  return [largest, smallest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements_reverse_reverse_and_reverse_and_reverse = (numbers) => {\n  const smallest = numbers.reduce((smallest, current) => {\n    return Math.max(smallest, current);\n  }, Number.NEGATIVE_INFINITY);\n  const largest = numbers.reduce((largest, current) => {\n    return Math.min(largest, current);\n  }, Number.POSITIVE_INFINITY);\n  return [largest, smallest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements_reverse_reverse_and_reverse_and_reverse_and_reverse = (numbers) => {\n  const smallest = numbers.reduce((smallest, current) => {\n    return Math.max(smallest, current);\n  }, Number.NEGATIVE_INFINITY);\n  const largest = numbers.reduce((largest, current) => {\n    return Math.min(largest, current);\n  }, Number.POSITIVE_INFINITY);\n  return [largest, smallest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements_reverse_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (numbers) => {\n  const smallest = numbers.reduce((smallest, current) => {\n    return Math.max(smallest, current);\n  }, Number.NEGATIVE_INFINITY);\n  const largest = numbers.reduce((largest, current) => {\n    return Math.min(largest, current);\n  }, Number.POSITIVE_INFINITY);\n  return [largest, smallest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements_reverse_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (numbers) => {\n  const smallest = numbers.reduce((smallest, current) => {\n    return Math.max(smallest, current);\n  }, Number.NEGATIVE_INFINITY);\n  const largest = numbers.reduce((largest, current) => {\n    return Math.min(largest, current);\n  }, Number.POSITIVE_INFINITY);\n  return [largest, smallest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements_reverse_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (numbers) => {\n  const smallest = numbers.reduce((smallest, current) => {\n    return Math.max(smallest, current);\n  }, Number.NEGATIVE_INFINITY);\n  const largest = numbers.reduce((largest, current) => {\n    return Math.min(largest, current);\n  }, Number.POSITIVE_INFINITY);\n  return [largest, smallest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => {\n    return [Math.min(acc, val), Math.max(acc, val)];\n  }, [Infinity, Infinity]);\n  return numbers.map((val) => val / max * min);\n};\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs = (number) => {\n  return Math.abs(number);\n};\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  -5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)\n  5\n  */\nconst abs_ = abs;\n\n/**\n * Given a number, return its absolute value\n * >>> abs(-5)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filter_integers(['a', 3.14, 5.1])\n  [5.1]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_floats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filter_strings(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_strings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filter_strings(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_booleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for empty lists\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given list of any python values only for empty strings\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filter_empty(['a', 3.14, 5.1])\n  ['a', 3.14, 5.1]\n  >>> filter_empty([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filter_empty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWithIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toLowerCase() === suffix[0].toLowerCase()\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCase('abc', 'a')\n  true\n  >>> startsWithIgnoreCase('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase() && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCase('abc', 'b')\n  true\n  >>> endsWithIgnoreCase('abc', 'a')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toLowerCase() === suffix[0].toLowerCase() && string[0].toLowerCase() === suffix[0].toLowerCase()\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCase('abc', 'a')\n  true\n  >>> startsWithIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase() && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> endsWithIgnoreCaseIgnoreCase('abc', 'a')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toLowerCase() === suffix[0].toLowerCase() && string[0].toLowerCase() === suffix[0].toLowerCase()\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCase('abc', 'a')\n  true\n  >>> startsWithIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase() && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toLowerCase() === suffix[0].toLowerCase() && string[0].toLowerCase() === suffix[0].toLowerCase()\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase() && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toLowerCase() === suffix[0].toLowerCase() && string[0].toLowerCase() === suffix[0].toLowerCase()\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase() && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1 && string[0].toLowerCase() === suffix[0].toLowerCase() && string[0].toLowerCase() === suffix[0].toLowerCase()\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'a')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.indexOf(prefix) === 0 && string[0].toLowerCase() === prefix[0].toLowerCase() && string[0].toLowerCase() === prefix[0].toLowerCase()\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor(15)\n  15\n  */\nconst smallest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> greatest_divisor(15)\n  15\n  */\nconst smallest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> greatest_divisor(15)\n  15\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> greatest_divisor(15)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> greatest_divisor(15)\n  15\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> greatest_divisor(15)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> greatest_divisor(15)\n  15\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> greatest_divisor(15)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> greatest_divisor(15)\n  15\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> greatest_divisor(15)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> greatest_divisor(15)\n  15\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> greatest_divisor(15)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> greatest_divisor(15)\n  15\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> greatest_divisor(15)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> greatest_divisor(15)\n  15\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> greatest_divisor(15)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> greatest_divisor(15)\n  15\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> greatest_divisor(15)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> greatest_divisor(15)\n  15\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> greatest_divisor(15)\n  1\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, larger than n\n  >>> greatest_divisor(15)\n  15\n  */\nconst greatest_divisor = (n) => {\n  let divisor = 1;\n  while (divisor <= n) {\n    divisor -= 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, find the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 10;\n  }\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 10;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 10;\n  }\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 10;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 10;\n  }\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 10;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 10;\n  }\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 10;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 10;\n  }\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 10;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 10;\n  }\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 10;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 10;\n  }\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 10;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 10;\n  }\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 10;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 10;\n  }\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 10;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 10;\n  }\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 10;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 10;\n  }\n  while (factor <= n) {\n    factors.push(factor);\n    factor *= 10;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize12 = (n) => {\n  let factors = [];\n  let factor = 1;\n  while (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((n) => {\n    if (seen.has(n)) {\n      return false;\n    }\n    seen.add(n);\n    return true;\n  });\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEvenOrOdd = (n) => {\n  return isEven(n) || isOdd(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isOddOrZero(n);\n};\n\nconst isOddOrEven = (n) => {\n  return isOdd(n) || isEven(n);\n};\n\nconst isOddOrOddOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrOddOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrEvenOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrEvenOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrOddOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrOddOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrEvenOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrEvenOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrOddOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrOddOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrEvenOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrEvenOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrOddOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrOddOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrEvenOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrEvenOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrOddOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrOddOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrEvenOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrEvenOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrOddOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrOddOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrEvenOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrEvenOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrOddOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrOddOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrEvenOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrEvenOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrOddOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrOddOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrEvenOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrEvenOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrOddOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrOddOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrEvenOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrEvenOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrOddOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrOddOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrEvenOrZero = (n) => {\n  return isOddOrEven(n) || isOddOrEvenOrZero(n);\n};\n\nconst isEvenOrOddOrZero = (n) => {\n  return isEvenOrOdd(n) || isEvenOrOddOrZero(n);\n};\n\nconst isOddOrOddOrZero = (n) => {\n  return isOddOrEven(n) || isO", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter.toUpperCase()).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase();\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case_2 = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case_3 = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case_4 = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case_5 = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case_6 = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case_7 = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case_8 = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case_9 = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case_10 = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case_11 = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case_12 = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case_13 = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('');\n};\n\n/* Given a string, remove all occurrences of letters in lowercase and uppercase.\n  >>> remove_letters('Hello')\n  'Hello'\n  */\nconst remove_letters_case_14 = (string) => {\n  return string.toLowerCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).join('').toUpperCase().split('').map((letter) => letter).", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, curr) => acc + curr, \"\");\n};\n\n/* Convert string to number\n  >>> convertToNumber(\"\")\n  0\n  >>> convertToNumber(\"1\")\n  1\n  >>> convertToNumber(\"1.2\")\n  1.2\n  >>> convertToNumber(\"1.23\")\n  1.23\n  >>> convertToNumber(\"1.234\")\n  1.234\n  >>> convertToNumber(\"1.2345\")\n  1.2345\n  >>> convertToNumber(\"1.23456789\")\n  1.23456789\n  >>> convertToNumber(\"1.2345678901\")\n  1.2345678901\n  >>> convertToNumber(\"1.23456789012\")\n  1.23456789012\n  >>> convertToNumber(\"1.234567890123\")\n  1.234567890123\n  >>> convertToNumber(\"1.2345678901234\")\n  1.2345678901234\n  >>> convertToNumber(\"1.23456789012345\")\n  1.23456789012345\n  >>> convertToNumber(\"1.234567890123456\")\n  1.234567890123456\n  >>> convertToNumber(\"1.2345678901234567\")\n  1.2345678901234567\n  >>> convertToNumber(\"1.23456789012345678\")\n  1.23456789012345678\n  >>> convertToNumber(\"1.23456789012345679\")\n  1.23456789012345679\n  >>> convertToNumber(\"1.23456789012345680\")\n  1.23456789012345680\n  >>> convertToNumber(\"1.23456789012345681\")\n  1.23456789012345681\n  >>> convertToNumber(\"1.23456789012345682\")\n  1.23456789012345682\n  >>> convertToNumber(\"1.23456789012345683\")\n  1.23456789012345683\n  >>> convertToNumber(\"1.23456789012345684\")\n  1.23456789012345684\n  >>> convertToNumber(\"1.23456789012345685\")\n  1.23456789012345685\n  >>> convertToNumber(\"1.23456789012345686\")\n  1.23456789012345686\n  >>> convertToNumber(\"1.23456789012345687\")\n  1.23456789012345687\n  >>> convertToNumber(\"1.23456789012345688\")\n  1.23456789012345688\n  >>> convertToNumber(\"1.23456789012345689\")\n  1.23456789012345689\n  >>> convertToNumber(\"1.23456789012345690\")\n  1.23456789012345690\n  >>> convertToNumber(\"1.23456789012345691\")\n  1.23456789012345691\n  >>> convertToNumber(\"1.23456789012345692\")\n  1.23456789012345692\n  >>> convertToNumber(\"1.23456789012345693\")\n  1.23456789012345693\n  >>> convertToNumber(\"1.23456789012345694\")\n  1.23456789012345694\n  >>> convertToNumber(\"1.23456789012345695\")\n  1.23456789012345695\n  >>> convertToNumber(\"1.23456789012345696\")\n  1.23456789012345696\n  >>> convertToNumber(\"1.23456789012345697\")\n  1.23456789012345697\n  >>> convertToNumber(\"1.23456789012345698\")\n  1.23456789012345698\n  >>> convertToNumber(\"1.23456789012345699\")\n  1.23456789012345699\n  >>> convertToNumber(\"1.23456789012345700\")\n  1.23456789012345700\n  >>> convertToNumber(\"1.23456789012345701\")\n  1.23456789012345701\n  >>> convertToNumber(\"1.23456789012345702\")\n  1.23456789012345702\n  >>> convertToNumber(\"1.23456789012345703\")\n  1.23456789012345703\n  >>> convertToNumber(\"1.23456789012345704\")\n  1.23456789012345704\n  >>> convertToNumber(\"1.23456789012345705\")\n  1.23456789012345705\n  >>> convertToNumber(\"1.23456789012345706\")\n  1.23456789012345706\n  >>> convertToNumber(\"1.23456789012345707\")\n  1.23456789012345707\n  >>> convertToNumber(\"1.23456789012345708\")\n  1.23456789012345708\n  >>> convertToNumber(\"1.23456789012345709\")\n  1.23456789012345709\n  >>> convertToNumber(\"1.23456789012345710\")\n  1.23456789012345710\n  >>> convertToNumber(\"1.23456789012345711\")\n  1.23456789012345711\n  >>> convertToNumber(\"1.23456789012345712\")\n  1.23456789012345712\n  >>> convertToNumber(\"1.23456789012345713\")\n  1.23456789012345713\n  >>> convertToNumber(\"1.23456789012345714\")\n  1.23456789012345714\n  >>> convertToNumber(\"1.23456789012345715\")\n  1.23456789012345715\n  >>> convertToNumber(\"1.23456789012345716\")\n  1.23456789012345716\n  >>> convertToNumber(\"1.23456789012345717\")\n  1.23456789012345717\n  >>> convertToNumber(\"1.23456789012345718\")\n  1.23456789012345718\n  >>> convertToNumber(\"1.23456789012345719\")\n  1.23456789012345719\n  >>> convertToNumber(\"1.23456789012345720\")\n  1.23456789012345720\n  >>> convertToNumber(\"1.23456789012345721\")\n  1.23456789012345721\n  >>> convertToNumber(\"1.23456789012345722\")\n  1.23456789012345722\n  >>> convertToNumber(\"1.23456789012345723\")\n  1.23456789012345723\n  >>> convertToNumber(\"1.23456789012345724\")\n  1.23456789012345724\n  >>> convertToNumber(\"1.23456789012345725\")\n  1.23456789012345725\n  >>> convertToNumber(\"1.23456789012345726\")\n  1.23456789012345726\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given prefix and do not start with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given prefix and do not start with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given prefix and do not start with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given prefix and do not start with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given prefix and do not start with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given prefix and do not start with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the one", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([10, 20, 30, 40, 50])\n  false\n  >>> below_zero([10, -20, -30, -40, -50])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([10, 20, 30, 40, 50])\n  false\n  >>> below_zero([10, -20, -30, -40, -50])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([10, 20, 30, 40, 50])\n  false\n  >>> below_zero([10, -20, -30, -40, -50])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([10, 20, 30, 40, 50])\n  false\n  >>> below_zero([10, -20, -30, -40, -50])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([10, 20, 30, 40, 50])\n  false\n  >>> below_zero([10, -20, -30, -40, -50])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([10, 20, 30, 40, 50])\n  false\n  >>> below_zero([10, -20, -30, -40, -50])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([10, 20, 30, 40, 50])\n  false\n  >>> below_zero([10, -20, -30, -40, -50])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([10, 20, 30, 40, 50])\n  false\n  >>> below_zero([10, -20, -30, -40, -50])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([10, 20, 30, 40, 50])\n  false\n  >>> below_zero([10, -20, -30, -40, -50])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([10, 20, 30, 40, 50])\n  false\n  >>> below_zero([10, -20, -30, -40, -50])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([10, 20, 30, 40, 50])\n  false\n  >>> below_zero([10, -20, -30, -40, -50])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return only negative numbers in the list.\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_negative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return only numbers in the list that are not in the list.\n  >>> get_not_in_list([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_not_in_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_not_in_list = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!l.includes(l[i])) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return all numbers in the list that are not in the list.\n  >>> get_not_in_list([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_not_in_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_not_in_list_all = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!l.includes(l[i])) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return all numbers in the list that are not in the list.\n  >>> get_not_in_list_all([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_not_in_list_all([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_not_in_list_all_all = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!l.includes(l[i])) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return all numbers in the list that are not in the list.\n  >>> get_not_in_list_all_all([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_not_in_list_all_all([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_not_in_list_all_all_all = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!l.includes(l[i])) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return all numbers in the list that are not in the list.\n  >>> get_not_in_list_all_all_all([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_not_in_list_all_all_all([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_not_in_list_all_all_all_all = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!l.includes(l[i])) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return all numbers in the list that are not in the list.\n  >>> get_not_in_list_all_all_all_all([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_not_in_list_all_all_all_all([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_not_in_list_all_all_all_all = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!l.includes(l[i])) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return all numbers in the list that are not in the list.\n  >>> get_not_in_list_all_all_all_all([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_not_in_list_all_all_all_all([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_not_in_list_all_all_all_all_all = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!l.includes(l[i])) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return all numbers in the list that are not in the list.\n  >>> get_not_in_list_all_all_all_all_all([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_not_in_list_all_all_all_all_all([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_not_in_list_all_all_all_all_all = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!l.includes(l[i])) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return all numbers in the list that are not in the list.\n  >>> get_not_in_list_all_all_all_all_all([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_not_in_list_all_all_all_all_all([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_not_in_list_all_all_all_all_all_all = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!l.includes(l[i])) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return all numbers in the list that are not in the list.\n  >>> get_not_in_list_all_all_all_all_all([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_not_in_list_all_all_all_all_all([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_not_in_list_all_all_all_all_all_all = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!l.includes(l[i])) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return all numbers in the list that are not in the list.\n  >>> get_not_in_list_all_all_all_all_all_all([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_not_in_list_all_all_all_all_all_all([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_not_in_list_all_all_all_all_all_all = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!l.includes(l[i])) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return all numbers in the list that are not in the list.\n  >>> get_not_in_list_all_all_all_all_all_all([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> get_not_in_list_all_all_all_all_all_all([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst get_not_in_list_all_all_all_all_all_all = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!l.includes(l[i])) result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return all numbers in the list that are not in the list.\n  >>> get_not_in_list_all_all_all_all_all_all([-1, 2, -4, 5, 6])", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a prime number, and false\n  otherwise.\n  >>> is_prime(6)\n  true\n  >>> is_prime(101)\n  false\n  >>> is_prime(11)\n  false\n  >>> is_prime(13441)\n  false\n  >>> is_prime(61)\n  false\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_number = (n) => {\n  if (is_prime(n)) return true;\n  return false;\n};\n\n/*\n  Given a number n, return true if it is a prime number, and false\n  otherwise.\n  >>> is_prime_number(6)\n  true\n  >>> is_prime_number(101)\n  false\n  >>> is_prime_number(11)\n  false\n  >>> is_prime_number(13441)\n  false\n  >>> is_prime_number(61)\n  false\n  >>> is_prime_number(4)\n  false\n  >>> is_prime_number(1)\n  false\n  */\nconst is_prime_number_number = (n) => {\n  if (is_prime_number(n)) return true;\n  return false;\n};\n\n/*\n  Given a number n, return true if it is a prime number, and false\n  otherwise.\n  >>> is_prime_number_number(6)\n  true\n  >>> is_prime_number_number(101)\n  false\n  >>> is_prime_number_number(11)\n  false\n  >>> is_prime_number_number(13441)\n  false\n  >>> is_prime_number_number(61)\n  false\n  >>> is_prime_number_number(4)\n  false\n  >>> is_prime_number_number(1)\n  false\n  */\nconst is_prime_number_number_number = (n) => {\n  if (is_prime_number_number(n)) return true;\n  return false;\n};\n\n/*\n  Given a number n, return true if it is a prime number, and false\n  otherwise.\n  >>> is_prime_number_number_number(6)\n  true\n  >>> is_prime_number_number_number(101)\n  false\n  >>> is_prime_number_number_number(11)\n  false\n  >>> is_prime_number_number_number(13441)\n  false\n  >>> is_prime_number_number_number(61)\n  false\n  >>> is_prime_number_number_number(4)\n  false\n  >>> is_prime_number_number_number(1)\n  false\n  */\nconst is_prime_number_number_number_number = (n) => {\n  if (is_prime_number_number_number(n)) return true;\n  return false;\n};\n\n/*\n  Given a number n, return true if it is a prime number, and false\n  otherwise.\n  >>> is_prime_number_number_number_number(6)\n  true\n  >>> is_prime_number_number_number_number(101)\n  false\n  >>> is_prime_number_number_number_number(11)\n  false\n  >>> is_prime_number_number_number_number(13441)\n  false\n  >>> is_prime_number_number_number_number(61)\n  false\n  >>> is_prime_number_number_number_number(4)\n  false\n  >>> is_prime_number_number_number_number(1)\n  false\n  */\nconst is_prime_number_number_number_number = (n) => {\n  if (is_prime_number_number_number(n)) return true;\n  return false;\n};\n\n/*\n  Given a number n, return true if it is a prime number, and false\n  otherwise.\n  >>> is_prime_number_number_number_number(6)\n  true\n  >>> is_prime_number_number_number_number(101)\n  false\n  >>> is_prime_number_number_number_number(11)\n  false\n  >>> is_prime_number_number_number_number(13441)\n  false\n  >>> is_prime_number_number_number_number(61)\n  false\n  >>> is_prime_number_number_number_number(4)\n  false\n  >>> is_prime_number_number_number_number(1)\n  false\n  */\nconst is_prime_number_number_number_number = (n) => {\n  if (is_prime_number_number_number_number(n)) return true;\n  return false;\n};\n\n/*\n  Given a number n, return true if it is a prime number, and false\n  otherwise.\n  >>> is_prime_number_number_number_number(6)\n  true\n  >>> is_prime_number_number_number_number(101)\n  false\n  >>> is_prime_number_number_number_number(11)\n  false\n  >>> is_prime_number_number_number_number(13441)\n  false\n  >>> is_prime_number_number_number_number(61)\n  false\n  >>> is_prime_number_number_number_number(4)\n  false\n  >>> is_prime_number_number_number_number(1)\n  false\n  */\nconst is_prime_number_number_number_number = (n) => {\n  if (is_prime_number_number_number_number(n)) return true;\n  return false;\n};\n\n/*\n  Given a number n, return true if it is a prime number, and false\n  otherwise.\n  >>> is_prime_number_number_number_number(6)\n  true\n  >>> is_prime_number_number_number_number(101)\n  false\n  >>> is_prime_number_number_number_number(11)\n  false\n  >>> is_prime_number_number_number_number(13441)\n  false\n  >>> is_prime_number_number_number_number(61)\n  false\n  >>> is_prime_number_number_number_number(4)\n  false\n  >>> is_prime_number_number_number_number(1)\n  false\n  */\nconst is_prime_number_number_number_number = (n) => {\n  if (is_prime_number_number_number_number(n)) return true;\n  return false;\n};\n\n/*\n  Given a number n, return true if it is a prime number, and false\n  otherwise.\n  >>> is_prime_number_number_number_number_number(6)\n  true\n  >>> is_prime_number_number_number_number_number(101)\n  false\n  >>> is_prime_number_number_number_number_number(11)\n  false\n  >>> is_prime_number_number_number_number(13441)\n  false\n  >>> is_prime_number_number_number_number_number(61)\n  false\n  >>> is_prime_number_number_number_number_number(4)\n  false\n  >>> is_prime_number_number_number_number_number(1)\n  false\n  */\nconst is_prime_number_number_number_number_number = (n) => {\n  if (is_prime_number_number_number_number_number(n)) return true;\n  return false;\n};\n\n/*\n  Given a number n, return true if it is a prime number, and false\n  otherwise.\n  >>> is_prime_number_number_number_number_number(6)\n  true\n  >>> is_prime_number_number_number_number_number(101)\n  false\n  >>> is_prime_number_number_number_number_number(11)\n  false\n  >>> is_prime_number_number_number_number_number(13441)\n  false\n  >>> is_prime_number_number_number_number_number(61)\n  false\n  >>> is_prime_number_number_number_number_number(4)\n  false\n  >>> is_prime_number_number_number_number_number(1)\n  false\n  */\nconst is_prime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw new Error('findZero expects list of even number of coefficients');\n  }\n  let zero = 0;\n  let lastZero = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      zero += xs[i];\n      lastZero = i;\n    }\n  }\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw new Error('findZero expects list of even number of coefficients');\n  }\n  let zero = 0;\n  let lastZero = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      zero += xs[i];\n      lastZero = i;\n    }\n  }\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly10 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly11 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly12 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly13 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly14 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly15 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l151 = l150.slice();\n  let l15", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) {\n      return false\n    }\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, f) => {\n  let seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) {\n      return false\n    }\n    seen.add(v)\n    return f(v)\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, f) => {\n  let seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) {\n      return false\n    }\n    seen.add(v)\n    return f(v)\n  }).filter((v) => {\n    return seen.has(v)\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKey = (l, f) => {\n  let seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) {\n      return false\n    }\n    seen.add(v)\n    return f(v)\n  }).filter((v) => {\n    return seen.has(v)\n  }).map((v) => {\n    return v\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeys = (l, f) => {\n  let seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) {\n      return false\n    }\n    seen.add(v)\n    return f(v)\n  }).filter((v) => {\n    return seen.has(v)\n  }).map((v) => {\n    return v\n  }).map((v) => {\n    return v\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSorted = (l, f) => {\n  let seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) {\n      return false\n    }\n    seen.add(v)\n    return f(v)\n  }).filter((v) => {\n    return seen.has(v)\n  }).map((v) => {\n    return v\n  }).map((v) => {\n    return v\n  }).sort((a, b) => {\n    return a - b\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedBy = (l, f) => {\n  let seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) {\n      return false\n    }\n    seen.add(v)\n    return f(v)\n  }).filter((v) => {\n    return seen.has(v)\n  }).map((v) => {\n    return v\n  }).map((v) => {\n    return v\n  }).sort((a, b) => {\n    return a - b\n  }).sort((a, b) => {\n    return a - b\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedByKey = (l, f) => {\n  let seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) {\n      return false\n    }\n    seen.add(v)\n    return f(v)\n  }).filter((v) => {\n    return seen.has(v)\n  }).map((v) => {\n    return v\n  }).map((v) => {\n    return v\n  }).sort((a, b) => {\n    return a - b\n  }).sort((a, b) => {\n    return a - b\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedByKeys = (l, f) => {\n  let seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) {\n      return false\n    }\n    seen.add(v)\n    return f(v)\n  }).filter((v) => {\n    return seen.has(v)\n  }).map((v) => {\n    return v\n  }).map((v) => {\n    return v\n  }).sort((a, b) => {\n    return a - b\n  }).sort((a, b) => {\n    return a - b\n  }).sort((a, b) => {\n    return a - b\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedByKeysSorted = (l, f) => {\n  let seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) {\n      return false\n    }\n    seen.add(v)\n    return f(v)\n  }).filter((v) => {\n    return seen.has(v)\n  }).map((v) => {\n    return v\n  }).map((v) => {\n    return v\n  }).sort((a, b) => {\n    return a - b\n  }).sort((a, b) => {\n    return a - b\n  }).sort((a, b) => {\n    return a - b\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedByKeysSortedBy = (l, f) => {\n  let seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) {\n      return false\n    }\n    seen.add(v)\n    return f(v)\n  }).filter((v) => {\n    return seen.has(v)\n  }).map((v) => {\n    return v\n  }).map((v) => {\n    return v\n  }).sort((a, b) => {\n    return a - b\n  }).sort((a, b) => {\n    return a - b\n  }).sort((a, b) => {\n    return a - b\n  }).sort((a, b) => {\n    return a - b\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedByKeysSortedByKey = (l, f) => {\n  let seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) {\n      return false\n    }\n    seen.add(v)\n    return f(v)\n  }).filter((v) => {\n    return seen.has(v)\n  }).map((v) => {\n    return v\n  }).map((v) => {\n    return v\n  }).sort((a, b) => {\n    return a - b\n  }).sort((a, b) => {\n    return a - b\n  }).sort((a, b) => {\n    return a - b\n  }).sort((a, b) => {\n    return a - b\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysSortedByKeysSortedByKeys = (l, f) => {\n  let seen", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> min_element([1, 2, 3])\n  1\n  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst min_element = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  45\n  */\nconst sum_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  45\n  */\nconst sum_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  45\n  */\nconst sum_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  45\n  */\nconst sum_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  45\n  */\nconst sum_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  45\n  */\nconst sum_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  45\n  */\nconst sum_elements_elements_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  45\n  */\nconst sum_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  45\n  */\nconst sum_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  45\n  */\nconst sum_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  45\n  */\nconst sum_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  45\n  */\nconst sum_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_elements_", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  let digit;\n  for (let i = n; i > 0; i--) {\n    digit = n % 10;\n    if (digit === 7) {\n      count++;\n    }\n    n /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return true if n is a palindrome.\n  >>> is_palindrome(123)\n  true\n  >>> is_palindrome(321)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  true\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(121)\n  false\n  >>> is_palindrome(122)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sort_odd = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sort_odd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sort_odd_even = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sort_odd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sort_odd_odd = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sort_odd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sort_odd_odd_even = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sort_odd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sort_odd_odd_odd_even = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sort_odd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sort_odd_odd_odd_odd_even = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sort_odd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sort_odd_odd_odd_odd_odd_even = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sort_odd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sort_odd_odd_odd_odd_odd_odd_even = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sort_odd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sort_odd_odd_odd_odd_odd_odd_odd_even = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even.push(item)\n    } else {\n      odd.push(item)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  >>> sort_odd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sort_odd_odd_odd_odd_odd_odd_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupGroupGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupGroupGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupGroupGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupGroupGroupGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "<|endoftext|>/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  let i = 1;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(13)\n  true\n  >>> is_prime(89)\n  false\n  >>> is_prime(100)\n  false\n  */\nconst is_prime_fast = (n) => {\n  let i = 2;\n  let prime = 1;\n  while (i <= n) {\n    prime = prime * i;\n    i++;\n  }\n  return prime === n;\n};\n\n/*\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.abs(val - mean));\n};\n\n/* Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst mean_squared_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return numbers.map((val) => Math.pow(val - mean, 2));\n};\n\n/* Given a list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the square root of the mean squared deviation\n  between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(mean | x - x_mean |)\n  >>> root_mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst root_mean_squared_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* Given a list of input numbers, calculate Standard Deviation\n  around the mean of this dataset.\n  Standard Deviation is the square root of the mean squared deviation\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(mean | x - x_mean |)\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* Given a list of input numbers, calculate Variance (standard deviation)\n  around the mean of this dataset.\n  Variance is the square root of the standard deviation between each element\n  and a centerpoint (mean in this case):\n  V = sqrt(mean | x - x_mean |)\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst variance = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* Given a list of input numbers, calculate Standard Deviation and\n  Mean Squared Deviation around the mean of this dataset.\n  Standard Deviation is the square root of the mean squared deviation\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(mean | x - x_mean |)\n  MSD = mean | x - x_mean |^2\n  >>> standard_deviation_and_mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  >>> standard_deviation_and_mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst standard_deviation_and_mean_squared_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* Given a list of input numbers, calculate Standard Deviation and\n  Mean Absolute Deviation around the mean of this dataset.\n  Standard Deviation is the square root of the mean squared deviation\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(mean | x - x_mean |)\n  MAD = average | x - x_mean |\n  >>> standard_deviation_and_mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  >>> standard_deviation_and_mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst standard_deviation_and_mean_absolute_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* Given a list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the square root of the mean squared deviation\n  between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(mean | x - x_mean |)\n  >>> root_mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst root_mean_squared_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* Given a list of input numbers, calculate Mean Squared Deviation and\n  Mean Absolute Deviation around the mean of this dataset.\n  Mean Squared Deviation is the square root of the mean squared deviation\n  between each element and a centerpoint (mean in this case):\n  MSD = mean | x - x_mean |^2\n  MAD = average | x - x_mean |\n  >>> mean_squared_deviation_and_mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  >>> mean_squared_deviation_and_mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst mean_squared_deviation_and_mean_absolute_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* Given a list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the square root of the mean squared deviation\n  between each element and a centerpoint (mean in this case):\n  RMSE = sqrt(mean | x - x_mean |)\n  >>> root_mean_squared_deviation_and_mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst root_mean_squared_deviation_and_mean_absolute_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0) / numbers.length;\n  return Math.sqrt(mean);\n};\n\n/* Given a list of input numbers, calculate Mean Squared Deviation and\n  Root Mean Squared Deviation around the mean of this dataset.\n  Mean Squared Deviation is the square root of the mean squared deviation\n  between each element and a centerpoint (mean in this case):\n  MSD = mean | x - x_mean |^2\n  RMSE = sqrt(mean | x - x_mean |)\n  >>> mean_squared_deviation_and_root_mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  >>> mean_squared_deviation_and_root_mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  4.5\n  */\nconst mean_squared_deviation_and_root_mean_squared_deviation = (numbers) => {\n  const mean = numbers.reduce((acc, val) => acc + val, 0", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "<|endoftext|>/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_prime takes an integer as an input, and returns true if it is a\n  prime number, false otherwise.\n\n  >>> is_prime(7)\n  true\n  >>> is_prime(8)\n  false\n  >>> is_prime(9)\n  false\n  >>> is_prime(10)\n  false\n  >>> is_prime(11)\n  false\n  >>> is_prime(12)\n  false\n  >>> is_prime(13)\n  false\n  >>> is_prime(14)\n  false\n  >>> is_prime(15)\n  false\n  >>> is_prime(16)\n  false\n  >>> is_prime(17)\n  false\n  >>> is_prime(18)\n  false\n  >>> is_prime(19)\n  false\n  >>> is_prime(20)\n  false\n  >>> is_prime(21)\n  false\n  >>> is_prime(22)\n  false\n  >>> is_prime(23)\n  false\n  >>> is_prime(24)\n  false\n  >>> is_prime(25)\n  false\n  >>> is_prime(26)\n  false\n  >>> is_prime(27)\n  false\n  >>> is_prime(28)\n  false\n  >>> is_prime(29)\n  false\n  >>> is_prime(30)\n  false\n  >>> is_prime(31)\n  false\n  >>> is_prime(32)\n  false\n  >>> is_prime(33)\n  false\n  >>> is_prime(34)\n  false\n  >>> is_prime(35)\n  false\n  >>> is_prime(36)\n  false\n  >>> is_prime(37)\n  false\n  >>> is_prime(38)\n  false\n  >>> is_prime(39)\n  false\n  >>> is_prime(40)\n  false\n  >>> is_prime(41)\n  false\n  >>> is_prime(42)\n  false\n  >>> is_prime(43)\n  false\n  >>> is_prime(44)\n  false\n  >>> is_prime(45)\n  false\n  >>> is_prime(46)\n  false\n  >>> is_prime(47)\n  false\n  >>> is_prime(48)\n  false\n  >>> is_prime(49)\n  false\n  >>> is_prime(50)\n  false\n  >>> is_prime(51)\n  false\n  >>> is_prime(52)\n  false\n  >>> is_prime(53)\n  false\n  >>> is_prime(54)\n  false\n  >>> is_prime(55)\n  false\n  >>> is_prime(56)\n  false\n  >>> is_prime(57)\n  false\n  >>> is_prime(58)\n  false\n  >>> is_prime(59)\n  false\n  >>> is_prime(60)\n  false\n  >>> is_prime(61)\n  false\n  >>> is_prime(62)\n  false\n  >>> is_prime(63)\n  false\n  >>> is_prime(64)\n  false\n  >>> is_prime(65)\n  false\n  >>> is_prime(66)\n  false\n  >>> is_prime(67)\n  false\n  >>> is_prime(68)\n  false\n  >>> is_prime(69)\n  false\n  >>> is_prime(70)\n  false\n  >>> is_prime(71)\n  false\n  >>> is_prime(72)\n  false\n  >>> is_prime(73)\n  false\n  >>> is_prime(74)\n  false\n  >>> is_prime(75)\n  false\n  >>> is_prime(76)\n  false\n  >>> is_prime(77)\n  false\n  >>> is_prime(78)\n  false\n  >>> is_prime(79)\n  false\n  >>> is_prime(80)\n  false\n  >>> is_prime(81)\n  false\n  >>> is_prime(82)\n  false\n  >>> is_prime(83)\n  false\n  >>> is_prime(84)\n  false\n  >>> is_prime(85)\n  false\n  >>> is_prime(86)\n  false\n  >>> is_prime(87)\n  false\n  >>> is_prime(88)\n  false\n  >>> is_prime(89)\n  false\n  >>> is_prime(90)\n  false\n  >>> is_prime(91)\n  false\n  >>> is_prime(92)\n  false\n  >>> is_prime(93)\n  false\n  >>> is_prime(94)\n  false\n  >>> is_prime(95)\n  false\n  >>> is_prime(96)\n  false\n  >>> is_prime(97)\n  false\n  >>> is_prime(98)\n  false\n  >>> is_prime(99)\n  false\n  >>> is_prime(100)\n  false\n  >>> is_prime(101)\n  false\n  >>> is_prime(102)\n  false\n  >>> is_prime(103)\n  false\n  >>> is_prime(104)\n  false\n  >>> is_prime(105)\n  false\n  >>> is_prime(106)\n  false\n  >>> is_prime(107)\n  false\n  >>> is_prime(108)\n  false\n  >>> is_prime(109)\n  false\n  >>> is_prime(110)\n  false\n  >>> is_prime(111)\n  false\n  >>> is_prime(112)\n  false\n  >>> is_prime(113)\n  false\n  >>> is_prime(114)\n  false\n  >>> is_prime(115)\n  false\n  >>> is_prime(116)\n  false\n  >>> is_prime(117)\n  false\n  >>> is_prime(118)\n  false\n  >>> is_prime(119)\n  false\n  >>> is_prime(120)\n  false\n  >>> is_prime(121)\n  false\n  >>> is_prime(122)\n  false\n  >>> is_prime(123)\n  false\n  >>> is_prime(124)\n  false\n  >>> is_prime(125)\n  false\n  >>> is_prime(126)\n  false\n  >>> is_prime(127)\n  false\n  >>> is_prime(128)\n  false\n  >>> is_prime(129)\n  false\n  >>> is_prime(130)\n  false\n  >>> is_prime(131)\n  false\n  >>> is_prime(132)\n  false\n  >>> is_prime(133)\n  false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    if (cars[i].speed > cars[(i + 1) % n].speed) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car object, find the closest car object to the given car.\n  If the car object is not found, the function returns null.\n  */\nconst find_closest_car = (car) => {\n  let car_distance = 0;\n  let car_closest = null;\n  for (let i = 0; i < cars.length; i++) {\n    if (cars[i].speed > car.speed) {\n      car_distance += Math.pow(cars[i].speed - car.speed, 2);\n      car_closest = cars[i];\n    }\n  }\n  return car_closest;\n};\n\n/*\n  Given a car object, find the closest car object to the given car.\n  If the car object is not found, the function returns null.\n  */\nconst find_closest_car_right = (car) => {\n  let car_distance = 0;\n  let car_closest = null;\n  for (let i = 0; i < cars.length; i++) {\n    if (cars[i].speed > car.speed) {\n      car_distance += Math.pow(cars[i].speed - car.speed, 2);\n      car_closest = cars[i];\n    }\n  }\n  return car_closest;\n};\n\n/*\n  Given a car object, find the closest car object to the given car.\n  If the car object is not found, the function returns null.\n  */\nconst find_closest_car_left = (car) => {\n  let car_distance = 0;\n  let car_closest = null;\n  for (let i = 0; i < cars.length; i++) {\n    if (cars[i].speed > car.speed) {\n      car_distance += Math.pow(cars[i].speed - car.speed, 2);\n      car_closest = cars[i];\n    }\n  }\n  return car_closest;\n};\n\n/*\n  Given a car object, find the closest car object to the given car.\n  If the car object is not found, the function returns null.\n  */\nconst find_closest_car_up = (car) => {\n  let car_distance = 0;\n  let car_closest = null;\n  for (let i = 0; i < cars.length; i++) {\n    if (cars[i].speed > car.speed) {\n      car_distance += Math.pow(cars[i].speed - car.speed, 2);\n      car_closest = cars[i];\n    }\n  }\n  return car_closest;\n};\n\n/*\n  Given a car object, find the closest car object to the given car.\n  If the car object is not found, the function returns null.\n  */\nconst find_closest_car_down = (car) => {\n  let car_distance = 0;\n  let car_closest = null;\n  for (let i = 0; i < cars.length; i++) {\n    if (cars[i].speed > car.speed) {\n      car_distance += Math.pow(cars[i].speed - car.speed, 2);\n      car_closest = cars[i];\n    }\n  }\n  return car_closest;\n};\n\n/*\n  Given a car object, find the closest car object to the given car.\n  If the car object is not found, the function returns null.\n  */\nconst find_closest_car_left = (car) => {\n  let car_distance = 0;\n  let car_closest = null;\n  for (let i = 0; i < cars.length; i++) {\n    if (cars[i].speed > car.speed) {\n      car_distance += Math.pow(cars[i].speed - car.speed, 2);\n      car_closest = cars[i];\n    }\n  }\n  return car_closest;\n};\n\n/*\n  Given a car object, find the closest car object to the given car.\n  If the car object is not found, the function returns null.\n  */\nconst find_closest_car_right = (car) => {\n  let car_distance = 0;\n  let car_closest = null;\n  for (let i = 0; i < cars.length; i++) {\n    if (cars[i].speed > car.speed) {\n      car_distance += Math.pow(cars[i].speed - car.speed, 2);\n      car_closest = cars[i];\n    }\n  }\n  return car_closest;\n};\n\n/*\n  Given a car object, find the closest car object to the given car.\n  If the car object is not found, the function returns null.\n  */\nconst find_closest_car_up = (car) => {\n  let car_distance = 0;\n  let car_closest = null;\n  for (let i = 0; i < cars.length; i++) {\n    if (cars[i].speed > car.speed) {\n      car_distance += Math.pow(cars[i].speed - car.speed, 2);\n      car_closest = cars[i];\n    }\n  }\n  return car_closest;\n};\n\n/*\n  Given a car object, find the closest car object to the given car.\n  If the car object is not found, the function returns null.\n  */\nconst find_closest_car_down = (car) => {\n  let car_distance = 0;\n  let car_closest = null;\n  for (let i = 0; i < cars.length; i++) {\n    if (cars[i].speed > car.speed) {\n      car_distance += Math.pow(cars[i].speed - car.speed, 2);\n      car_closest = cars[i];\n    }\n  }\n  return car_closest;\n};\n\n/*\n  Given a car object, find the closest car object to the given car.\n  If the car object is not found, the function returns null.\n  */\nconst find_closest_car_left = (car) => {\n  let car_distance = 0;\n  let car_closest = null;\n  for (let i = 0; i < cars.length; i++) {\n    if (cars[i].speed > car.speed) {\n      car_distance += Math.pow(cars[i].speed - car.speed, 2);\n      car_closest = cars[i];\n    }\n  }\n  return car_closest;\n};\n\n/*\n  Given a car object, find the closest car object to the given car.\n  If the car object is not found, the function returns null.\n  */\nconst find_closest_car_right = (car) => {\n  let car_distance = 0;\n  let car_closest = null;\n  for (let i = 0; i < cars.length; i++) {\n    if (cars[i].speed > car.speed) {\n      car_distance += Math.pow(cars[i].speed - car.speed, 2);\n      car_closest = cars[i];\n    }\n  }\n  return car_closest;\n};\n\n/*\n  Given a car object, find the closest car object to the given car.\n  If the car object is not found, the function returns null.\n  */\nconst find_closest_car_up = (car) => {\n  let car_distance = 0;\n  let car_closest = null;\n  for (let i = 0; i < cars.length; i++) {\n    if (cars[i].speed > car.speed) {\n      car_distance += Math.pow(cars[i].speed - car.speed, 2);\n      car_closest = cars[i];\n    }\n  }\n  return car_closest;\n};\n\n/*\n  Given a car object, find the closest car object to the given car.\n  If the car object is not found, the function returns null.\n  */\nconst find_closest_car_down = (car) => {\n  let car_distance = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret;\n};\n\n/*Return list with elements decremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret;\n};\n\n/*Return list with elements incremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reversed = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret.reverse();\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reversed_reversed = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reversed_reversed_reversed = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reversed_reversed_reversed_reversed = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reversed_reversed_reversed_reversed_reversed = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reversed_reversed_reversed_reversed_reversed_reversed = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decr_list_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed = (l) => {\n  let i = l.length - 1;\n  let ret = [];\n  while (i--) {\n    ret.push(l[i]);\n  }\n  return ret.reverse();\n};\n\n/*Return list with elements incremented by 1.\n  >>> decr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "<|endoftext|>/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  is_prime takes an integer as an input, and returns true if the number is\n  prime, and false otherwise.\n  >>> is_prime(7)\n  true\n  >>> is_prime(8)\n  false\n  >>> is_prime(9)\n  false\n  >>> is_prime(10)\n  false\n  >>> is_prime(11)\n  false\n  >>> is_prime(12)\n  false\n  >>> is_prime(13)\n  false\n  >>> is_prime(14)\n  false\n  >>> is_prime(15)\n  false\n  >>> is_prime(16)\n  false\n  >>> is_prime(17)\n  false\n  >>> is_prime(18)\n  false\n  >>> is_prime(19)\n  false\n  >>> is_prime(20)\n  false\n  >>> is_prime(21)\n  false\n  >>> is_prime(22)\n  false\n  >>> is_prime(23)\n  false\n  >>> is_prime(24)\n  false\n  >>> is_prime(25)\n  false\n  >>> is_prime(26)\n  false\n  >>> is_prime(27)\n  false\n  >>> is_prime(28)\n  false\n  >>> is_prime(29)\n  false\n  >>> is_prime(30)\n  false\n  >>> is_prime(31)\n  false\n  >>> is_prime(32)\n  false\n  >>> is_prime(33)\n  false\n  >>> is_prime(34)\n  false\n  >>> is_prime(35)\n  false\n  >>> is_prime(36)\n  false\n  >>> is_prime(37)\n  false\n  >>> is_prime(38)\n  false\n  >>> is_prime(39)\n  false\n  >>> is_prime(40)\n  false\n  >>> is_prime(41)\n  false\n  >>> is_prime(42)\n  false\n  >>> is_prime(43)\n  false\n  >>> is_prime(44)\n  false\n  >>> is_prime(45)\n  false\n  >>> is_prime(46)\n  false\n  >>> is_prime(47)\n  false\n  >>> is_prime(48)\n  false\n  >>> is_prime(49)\n  false\n  >>> is_prime(50)\n  false\n  >>> is_prime(51)\n  false\n  >>> is_prime(52)\n  false\n  >>> is_prime(53)\n  false\n  >>> is_prime(54)\n  false\n  >>> is_prime(55)\n  false\n  >>> is_prime(56)\n  false\n  >>> is_prime(57)\n  false\n  >>> is_prime(58)\n  false\n  >>> is_prime(59)\n  false\n  >>> is_prime(60)\n  false\n  >>> is_prime(61)\n  false\n  >>> is_prime(62)\n  false\n  >>> is_prime(63)\n  false\n  >>> is_prime(64)\n  false\n  >>> is_prime(65)\n  false\n  >>> is_prime(66)\n  false\n  >>> is_prime(67)\n  false\n  >>> is_prime(68)\n  false\n  >>> is_prime(69)\n  false\n  >>> is_prime(70)\n  false\n  >>> is_prime(71)\n  false\n  >>> is_prime(72)\n  false\n  >>> is_prime(73)\n  false\n  >>> is_prime(74)\n  false\n  >>> is_prime(75)\n  false\n  >>> is_prime(76)\n  false\n  >>> is_prime(77)\n  false\n  >>> is_prime(78)\n  false\n  >>> is_prime(79)\n  false\n  >>> is_prime(80)\n  false\n  >>> is_prime(81)\n  false\n  >>> is_prime(82)\n  false\n  >>> is_prime(83)\n  false\n  >>> is_prime(84)\n  false\n  >>> is_prime(85)\n  false\n  >>> is_prime(86)\n  false\n  >>> is_prime(87)\n  false\n  >>> is_prime(88)\n  false\n  >>> is_prime(89)\n  false\n  >>> is_prime(90)\n  false\n  >>> is_prime(91)\n  false\n  >>> is_prime(92)\n  false\n  >>> is_prime(93)\n  false\n  >>> is_prime(94)\n  false\n  >>> is_prime(95)\n  false\n  >>> is_prime(96)\n  false\n  >>> is_prime(97)\n  false\n  >>> is_prime(98)\n  false\n  >>> is_prime(99)\n  false\n  >>> is_prime(100)\n  false\n  >>> is_prime(101)\n  false\n  >>> is_prime(102)\n  false\n  >>> is_prime(103)\n  false\n  >>> is_prime(104)\n  false\n  >>> is_prime(105)\n  false\n  >>> is_prime(106)\n  false\n  >>> is_prime(107)\n  false\n  >>> is_prime(108)\n  false\n  >>> is_prime(109)\n  false\n  >>> is_prime(110)\n  false\n  >>> is_prime(111)\n  false\n  >>> is_prime(112)\n  false\n  >>> is_prime(113)\n  false\n  >>> is_prime(114)\n  false\n  >>> is_prime(115)\n  false\n  >>> is_prime(116)\n  false\n  >>> is_prime(117)\n  false\n  >>> is_prime(118)\n  false\n  >>> is_prime(119)\n  false\n  >>> is_prime(120)\n  false\n  >>> is_prime(121)\n  false\n  >>> is_prime(122)\n  false\n  >>> is_prime(123)\n  false\n  >>> is_prime(124)\n  false\n  >>> is_prime(125)\n  false\n  >>> is_prime(126)\n  false\n  >>> is_prime(127)\n  false\n  >>> is_prime(128)\n  false\n  >>> is_prime(129)\n  false\n  >>> is_prime(130)\n  false\n  >>> is_prime(131)\n  false\n  >>> is_prime(132)\n  false\n  >>> is_prime(133)\n  false\n  >>> is_prime(134)\n  false\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  let s = x.toString();\n  if (s.length < base) {\n    s = '0' + s;\n  }\n  return s.substr(s.length - base, base);\n};\n\n/*\n  Convert string representation of a number to its binary representation.\n  >>> bin_to_dec('100')\n  100\n  >>> bin_to_dec('1000')\n  1000\n  >>> bin_to_dec('111')\n  1110\n  >>> bin_to_dec('1110')\n  1110\n  >>> bin_to_dec('1111')\n  1111\n  >>> bin_to_dec('11111')\n  11111\n  >>> bin_to_dec('111111')\n  11111111\n  >>> bin_to_dec('111111111')\n  111111111\n  >>> bin_to_dec('1111111111')\n  1111111111\n  >>> bin_to_dec('11111111111')\n  11111111111\n  >>> bin_to_dec('111111111111')\n  111111111111\n  >>> bin_to_dec('1111111111111')\n  1111111111111\n  >>> bin_to_dec('11111111111111')\n  11111111111111\n  >>> bin_to_dec('111111111111111')\n  111111111111111\n  >>> bin_to_dec('1111111111111111')\n  1111111111111111\n  >>> bin_to_dec('11111111111111111')\n  11111111111111111\n  >>> bin_to_dec('111111111111111111')\n  111111111111111111\n  >>> bin_to_dec('1111111111111111111')\n  1111111111111111111\n  >>> bin_to_dec('11111111111111111111')\n  11111111111111111111\n  >>> bin_to_dec('111111111111111111111')\n  111111111111111111111\n  >>> bin_to_dec('1111111111111111111111')\n  1111111111111111111111\n  >>> bin_to_dec('11111111111111111111111')\n  11111111111111111111111\n  >>> bin_to_dec('111111111111111111111111')\n  111111111111111111111111\n  >>> bin_to_dec('1111111111111111111111111')\n  1111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111')\n  11111111111111111111111111\n  >>> bin_to_dec('111111111111111111111111111')\n  111111111111111111111111111\n  >>> bin_to_dec('1111111111111111111111111111')\n  1111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111')\n  11111111111111111111111111111\n  >>> bin_to_dec('111111111111111111111111111111')\n  111111111111111111111111111111\n  >>> bin_to_dec('1111111111111111111111111111111')\n  1111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111')\n  11111111111111111111111111111111\n  >>> bin_to_dec('111111111111111111111111111111111')\n  111111111111111111111111111111111\n  >>> bin_to_dec('1111111111111111111111111111111111')\n  1111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111')\n  111111111111111111111111111111111111\n  >>> bin_to_dec('1111111111111111111111111111111111111')\n  111111111111111111111111111111111111111\n  >>> bin_to_dec('1111111111111111111111111111111111111111')\n  1111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111')\n  1111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111\n  >>> bin_to_dec('111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('1111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('1111111111111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  1111111111111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  1111111111111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  1111111111111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  1111111111111111111111111111111111111111111111111111111\n  >>> bin_to_dec('1111111111111111111111111111111111111111111111111111111')\n  1111111111111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  1111111111111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  1111111111111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  1111111111111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  1111111111111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  1111111111111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  11111111111111111111111111111111111111111111111\n  >>> bin_to_dec('11111111111111111111111111111111111111111111111')\n  111111111111111111111111", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(3, 5)\n  3.5\n  */\nconst triangle_area = (l, w) => {\n  return l * w;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangle_area(6, 3)\n  15.0\n  */\nconst triangle_area = (l, w) => {\n  return l * w * 2;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function that returns the sum of the first n elements of the Fibonacci sequence that satisfy the condition:\n  fib(n) ≤ n\n  fib(n) ≤ 2\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤ n\n  fib(n) ≤", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  let mid = Math.floor(l.length / 2)\n  let left = median(l.slice(0, mid))\n  let right = median(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let modes = []\n  let mode = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i]\n    }\n    modes.push(mode)\n  }\n  return modes\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  */\nconst modes = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let modes = []\n  let mode = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i]\n    }\n    modes.push(mode)\n  }\n  return modes\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let modes = []\n  let mode = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i]\n    }\n    modes.push(mode)\n  }\n  return modes\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let modes = []\n  let mode = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i]\n    }\n    modes.push(mode)\n  }\n  return modes\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let modes = []\n  let mode = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i]\n    }\n    modes.push(mode)\n  }\n  return modes\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let modes = []\n  let mode = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i]\n    }\n    modes.push(mode)\n  }\n  return modes\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let modes = []\n  let mode = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i]\n    }\n    modes.push(mode)\n  }\n  return modes\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let modes = []\n  let mode = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i]\n    }\n    modes.push(mode)\n  }\n  return modes\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let modes = []\n  let mode = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i]\n    }\n    modes.push(mode)\n  }\n  return modes\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let modes = []\n  let mode = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i]\n    }\n    modes.push(mode)\n  }\n  return modes\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let modes = []\n  let mode = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > mode) {\n      mode = l[i]\n    }\n    modes.push(mode)\n  }\n  return modes\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  2\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_with_space = (text) => {\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_with_space_and_carriage_return = (text) => {\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_with_space_and_carriage_return_and_newline = (text) => {\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_with_space_and_carriage_return_and_newline_and_space = (text) => {\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_with_space_and_carriage_return_and_newline_and_space_and_newline = (text) => {\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_with_space_and_carriage_return_and_newline_and_space_and_newline_and_space = (text) => {\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_with_space_and_carriage_return_and_newline_and_space_and_newline_and_space_and_newline = (text) => {\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_with_space_and_carriage_return_and_newline_and_space_and_newline_and_space_and_newline_and_space = (text) => {\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_with_space_and_carriage_return_and_newline_and_space_and_newline_and_space_and_newline_and_space_and_newline = (text) => {\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_with_space_and_carriage_return_and_newline_and_space_and_newline_and_space_and_newline_and_space_and_newline_and_space = (text) => {\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_with_space_and_carriage_return_and_newline_and_space_and_newline_and_space_and_newline_and_space_and_newline_and_space_and_newline = (text) => {\n  let reversed = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversed += text.charAt(i);\n  }\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_with_space_and_carriage_return_and_newline_and_space_and_newline_and_space_and_newline_and_space_and_newline_and_space_and_newline_and_space = (text) => {\n  let reversed = '';\n  for (", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const m = Math.pow(2, n);\n  return m % p;\n};\n\n/*\n  >>> modp([3, 5], 5)\n  3\n  >>> modp([3, 5], 10)\n  3\n  >>> modp([3, 5], 11)\n  3\n  >>> modp([3, 5], 100)\n  3\n  >>> modp([3, 5], 101)\n  3\n  >>> modp([3, 5], 102)\n  3\n  >>> modp([3, 5], 103)\n  3\n  >>> modp([3, 5], 104)\n  3\n  >>> modp([3, 5], 105)\n  3\n  >>> modp([3, 5], 106)\n  3\n  >>> modp([3, 5], 107)\n  3\n  >>> modp([3, 5], 108)\n  3\n  >>> modp([3, 5], 109)\n  3\n  >>> modp([3, 5], 110)\n  3\n  >>> modp([3, 5], 111)\n  3\n  >>> modp([3, 5], 112)\n  3\n  >>> modp([3, 5], 113)\n  3\n  >>> modp([3, 5], 114)\n  3\n  >>> modp([3, 5], 115)\n  3\n  >>> modp([3, 5], 116)\n  3\n  >>> modp([3, 5], 117)\n  3\n  >>> modp([3, 5], 118)\n  3\n  >>> modp([3, 5], 119)\n  3\n  >>> modp([3, 5], 120)\n  3\n  >>> modp([3, 5], 121)\n  3\n  >>> modp([3, 5], 122)\n  3\n  >>> modp([3, 5], 123)\n  3\n  >>> modp([3, 5], 124)\n  3\n  >>> modp([3, 5], 125)\n  3\n  >>> modp([3, 5], 126)\n  3\n  >>> modp([3, 5], 127)\n  3\n  >>> modp([3, 5], 128)\n  3\n  >>> modp([3, 5], 129)\n  3\n  >>> modp([3, 5], 130)\n  3\n  >>> modp([3, 5], 131)\n  3\n  >>> modp([3, 5], 132)\n  3\n  >>> modp([3, 5], 133)\n  3\n  >>> modp([3, 5], 134)\n  3\n  >>> modp([3, 5], 135)\n  3\n  >>> modp([3, 5], 136)\n  3\n  >>> modp([3, 5], 137)\n  3\n  >>> modp([3, 5], 138)\n  3\n  >>> modp([3, 5], 139)\n  3\n  >>> modp([3, 5], 140)\n  3\n  >>> modp([3, 5], 141)\n  3\n  >>> modp([3, 5], 142)\n  3\n  >>> modp([3, 5], 143)\n  3\n  >>> modp([3, 5], 144)\n  3\n  >>> modp([3, 5], 145)\n  3\n  >>> modp([3, 5], 146)\n  3\n  >>> modp([3, 5], 147)\n  3\n  >>> modp([3, 5], 148)\n  3\n  >>> modp([3, 5], 149)\n  3\n  >>> modp([3, 5], 150)\n  3\n  >>> modp([3, 5], 151)\n  3\n  >>> modp([3, 5], 152)\n  3\n  >>> modp([3, 5], 153)\n  3\n  >>> modp([3, 5], 154)\n  3\n  >>> modp([3, 5], 155)\n  3\n  >>> modp([3, 5], 156)\n  3\n  >>> modp([3, 5], 157)\n  3\n  >>> modp([3, 5], 158)\n  3\n  >>> modp([3, 5], 159)\n  3\n  >>> modp([3, 5], 160)\n  3\n  >>> modp([3, 5], 161)\n  3\n  >>> modp([3, 5], 162)\n  3\n  >>> modp([3, 5], 163)\n  3\n  >>> modp([3, 5], 164)\n  3\n  >>> modp([3, 5], 165)\n  3\n  >>> modp([3, 5], 166)\n  3\n  >>> modp([3, 5], 167)\n  3\n  >>> modp([3, 5], 168)\n  3\n  >>> modp([3, 5], 169)\n  3\n  >>> modp([3, 5], 170)\n  3\n  >>> modp([3, 5], 171)\n  3\n  >>> modp([3, 5], 172)\n  3\n  >>> modp([3, 5], 173)\n  3\n  >>> modp([3, 5], 174)\n  3\n  >>> modp([3, 5], 175)\n  3\n  >>> modp([3, 5], 176)\n  3\n  >>> modp([3, 5], 177)\n  3\n  >>> modp([3, 5], 178)\n  3\n  >>> modp([3, 5], 179)\n  3\n  >>> modp([3, 5], 180)\n  3\n  >>> modp([3, 5], 181)\n  3\n  >>> modp([3, 5], 182)\n  3\n  >>> modp([3, 5], 183)\n  3\n  >>> modp([3, 5], 184)\n  3\n  >>> modp([3, 5], 185)\n  3\n  >>> modp([3, 5], 186)\n  3\n  >>> modp([3, 5], 187)\n  3\n  >>> modp([3, 5], 188)\n  3\n  >>> modp([3, 5], 189)\n  3\n  >>> modp([3, 5], 190)\n  3\n  >>> modp([3, 5], 191)\n  3\n  >>> modp([3, 5], 192)\n  3\n  >>> modp([3, 5], 193)\n  3\n  >>> modp([3, 5], 194)\n  3\n  >>> modp([3, 5], 195)\n  3\n  >>> modp([3, 5], 196)\n  3\n  >>> modp([3, 5], 197)\n  3\n  >>> modp([3, 5], 198)\n  3\n  >>> modp([3, 5], 199)\n  3\n  >>> modp([3, 5], 200)\n  3\n  >>> modp([3, 5], 201)\n  3\n  >>> modp([3, 5], 202)\n  3\n  >>> modp([3, 5], 203)\n  3\n  >>> modp([3, 5], 204)\n  3\n  >>> modp([3, 5], 205)\n  3\n  >>> modp([3, 5], 206)\n  3\n  >>> modp([3, 5], 207)\n  3\n  >>> modp([", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === numbers.length - 1) {\n      result.push(numbers[i])\n    } else {\n      result.push(numbers[i] + delimeter)\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list\n * >>> remove([1,2,3,4,5], 2)\n  [1, 3, 5]\n  */\nconst remove = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> remove([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile2 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile3 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile4 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile5 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile6 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile7 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile8 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile9 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile10 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile11 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile12 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile13 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile14 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,5], 2, true)\n  [1, 3, 5]\n  */\nconst removeWhile15 = (list, el) => {\n  const result = []\n  let i = 0\n  while (i < list.length) {\n    if (list[i] === el) {\n      result.push(list.splice(i, 1))\n      i--\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list while preserving the order\n * >>> removeWhile([1,2,3,4,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift_reverse function. Returns decoded string.\n  */\nconst decodeShift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift_reverse_reverse function. Returns decoded string.\n  */\nconst decodeShift_reverse_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse_reverse_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift_reverse_reverse_shift function. Returns decoded string.\n  */\nconst decodeShift_reverse_reverse_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse_reverse_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift_reverse_reverse_shift_reverse function. Returns decoded string.\n  */\nconst decodeShift_reverse_reverse_shift_reverse = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift_reverse_reverse_shift_reverse_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").split(\"\").reverse().join(\"\").", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "<|endoftext|>/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  let vowels = text.split('').filter(v => /[aeiou]/i.test(v));\n  return vowels.join('');\n};\n\n/*\n  remove_spaces is a function that takes string and returns string without spaces.\n  >>> remove_spaces('')\n  ''\n  >>> remove_spaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> remove_spaces('abcdef')\n  'abcdef'\n  >>> remove_spaces('aaaaa')\n  ''\n  >>> remove_spaces('aaBAA')\n  'B'\n  >>> remove_spaces('zbcd')\n  'zbcd'\n  */\nconst remove_spaces = (text) => {\n  let spaces = text.split('').filter(v => /[aeiou]/i.test(v));\n  return spaces.join('');\n};\n\n/*\n  remove_digits is a function that takes string and returns string without digits.\n  >>> remove_digits('')\n  ''\n  >>> remove_digits(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> remove_digits('abcdef')\n  'abcdef'\n  >>> remove_digits('aaaaa')\n  ''\n  >>> remove_digits('aaBAA')\n  'B'\n  >>> remove_digits('zbcd')\n  'zbcd'\n  */\nconst remove_digits = (text) => {\n  let digits = text.split('').filter(v => /\\d/i.test(v));\n  return digits.join('');\n};\n\n/*\n  remove_special is a function that takes string and returns string without special characters.\n  >>> remove_special('')\n  ''\n  >>> remove_special(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> remove_special('abcdef')\n  'abcdef'\n  >>> remove_special('aaaaa')\n  ''\n  >>> remove_special('aaBAA')\n  'B'\n  >>> remove_special('zbcd')\n  'zbcd'\n  */\nconst remove_special = (text) => {\n  let specials = text.split('').filter(v => /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]/g);\n  return specials.join('');\n};\n\n/*\n  remove_special is a function that takes string and returns string without special characters.\n  >>> remove_special('')\n  ''\n  >>> remove_special(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> remove_special('abcdef')\n  'abcdef'\n  >>> remove_special('aaaaa')\n  ''\n  >>> remove_special('aaBAA')\n  'B'\n  >>> remove_special('zbcd')\n  'zbcd'\n  */\nconst remove_special_chars = (text) => {\n  let specials = text.split('').filter(v => /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]/g);\n  return specials.join('');\n};\n\n/*\n  remove_special is a function that takes string and returns string without special characters.\n  >>> remove_special('')\n  ''\n  >>> remove_special(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> remove_special('abcdef')\n  'abcdef'\n  >>> remove_special('aaaaa')\n  ''\n  >>> remove_special('aaBAA')\n  'B'\n  >>> remove_special('zbcd')\n  'zbcd'\n  */\nconst remove_special_chars = (text) => {\n  let specials = text.split('').filter(v => /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]/g);\n  return specials.join('');\n};\n\n/*\n  remove_special is a function that takes string and returns string without special characters.\n  >>> remove_special('')\n  ''\n  >>> remove_special(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> remove_special('abcdef')\n  'abcdef'\n  >>> remove_special('aaaaa')\n  ''\n  >>> remove_special('aaBAA')\n  'B'\n  >>> remove_special('zbcd')\n  'zbcd'\n  */\nconst remove_special_chars = (text) => {\n  let specials = text.split('').filter(v => /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]/g);\n  return specials.join('');\n};\n\n/*\n  remove_special is a function that takes string and returns string without special characters.\n  >>> remove_special('')\n  ''\n  >>> remove_special(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> remove_special('abcdef')\n  'abcdef'\n  >>> remove_special('aaaaa')\n  ''\n  >>> remove_special('aaBAA')\n  'B'\n  >>> remove_special('zbcd')\n  'zbcd'\n  */\nconst remove_special_chars = (text) => {\n  let specials = text.split('').filter(v => /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]/g);\n  return specials.join('');\n};\n\n/*\n  remove_special is a function that takes string and returns string without special characters.\n  >>> remove_special('')\n  ''\n  >>> remove_special(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> remove_special('abcdef')\n  'abcdef'\n  >>> remove_special('aaaaa')\n  ''\n  >>> remove_special('aaBAA')\n  'B'\n  >>> remove_special('zbcd')\n  'zbcd'\n  */\nconst remove_special_chars = (text) => {\n  let specials = text.split('').filter(v => /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]/g);\n  return specials.join('');\n};\n\n/*\n  remove_special is a function that takes string and returns string without special characters.\n  >>> remove_special('')\n  ''\n  >>> remove_special(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> remove_special('abcdef')\n  'abcdef'\n  >>> remove_special('aaaaa')\n  ''\n  >>> remove_special('aaBAA')\n  'B'\n  >>> remove_special('zbcd')\n  'zbcd'\n  */\nconst remove_special_chars = (text) => {\n  let specials = text.split('').filter(v => /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>/?~]/g);\n  return specials.join('');\n};\n\n/*\n  remove_special is a function that takes string and returns string without special characters.\n  >>> remove_special('')\n  ''\n  >>> remove_special(\"abcdef\\nghijklm\")\n  'abcdef\\nghij", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/**\n * Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold([1, 2, 4, 10], 5)\n  true\n  >>> above_threshold([1, 20, 4, 10], 100)\n  false\n  */\nconst above_threshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/**\n * Return true if all numbers in the list l are equal to t.\n  >>> equal([1, 2, 4, 10], 5)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by t.\n  >>> divisible([2, 5, 10], 5)\n  true\n  >>> divisible([2, 5, 10], 10)\n  false\n  */\nconst divisible = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => n % t === 0);\n};\n\n/**\n * Return true if all numbers in the list l are a power of t.\n  >>> power_of([2, 5, 10], 5)\n  true\n  >>> power_of([2, 5, 10], 10)\n  false\n  */\nconst power_of = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => Math.pow(n, t[i]) === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are a power of two and are divisible by t.\n  >>> power_of_two([2, 5, 10], 5)\n  true\n  >>> power_of_two([2, 5, 10], 10)\n  false\n  */\nconst power_of_two = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => Math.pow(n, 2) === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are a power of two and are divisible by t.\n  >>> power_of_two([2, 5, 10], 5)\n  true\n  >>> power_of_two([2, 5, 10], 10)\n  false\n  */\nconst power_of_four = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => Math.pow(n, 4) === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are a power of two and are divisible by t.\n  >>> power_of_four([2, 5, 10], 5)\n  true\n  >>> power_of_four([2, 5, 10], 10)\n  false\n  */\nconst power_of_eight = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => Math.pow(n, 8) === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are a power of two and are divisible by t.\n  >>> power_of_eight([2, 5, 10], 5)\n  true\n  >>> power_of_eight([2, 5, 10], 10)\n  false\n  */\nconst power_of_ten = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => Math.pow(n, 10) === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are a power of two and are divisible by t.\n  >>> power_of_ten([2, 5, 10], 5)\n  true\n  >>> power_of_ten([2, 5, 10], 10)\n  false\n  */\nconst power_of_fifteen = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => Math.pow(n, 15) === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are a power of two and are divisible by t.\n  >>> power_of_fifteen([2, 5, 10], 5)\n  true\n  >>> power_of_fifteen([2, 5, 10], 10)\n  false\n  */\nconst power_of_fifteenteen = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => Math.pow(n, 150) === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are a power of two and are divisible by t.\n  >>> power_of_fifteenteen([2, 5, 10], 5)\n  true\n  >>> power_of_fifteenteen([2, 5, 10], 10)\n  false\n  */\nconst power_of_twenty = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => Math.pow(n, 20) === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are a power of two and are divisible by t.\n  >>> power_of_twenty([2, 5, 10], 5)\n  true\n  >>> power_of_twenty([2, 5, 10], 10)\n  false\n  */\nconst power_of_twenty_fifteen = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => Math.pow(n, 205) === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are a power of two and are divisible by t.\n  >>> power_of_twenty_fifteen([2, 5, 10], 5)\n  true\n  >>> power_of_twenty_fifteen([2, 5, 10], 10)\n  false\n  */\nconst power_of_twenty_fifteen_eight = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => Math.pow(n, 2051) === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are a power of two and are divisible by t.\n  >>> power_of_twenty_fifteen_eight([2, 5, 10], 5)\n  true\n  >>> power_of_twenty_fifteen_eight([2, 5, 10], 10)\n  false\n  */\nconst power_of_twenty_fifteen_eighteen = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => Math.pow(n, 2051) === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are a power of two and are divisible by t.\n  >>> power_of_twenty_fifteen_eighteen([2, 5, 10], 5)\n  true\n  >>> power_of_twenty_fifteen_eighteen([2, 5, 10], 10)\n  false\n  */\nconst power_of_twenty_fifteen_nine = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => Math.pow(n, 2051) === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are a power of two and are divisible by t.\n  >>> power_of_twenty_fifteen_nine([2, 5, 10], 5)\n  true\n  >>> power_of_twenty_fifteen_nine([2, 5, 10], 10)\n  false\n  */\nconst power_of_twenty_fifteen_ten = (l, t) => {\n  return l.length === t.length &&\n    l.every((n, i) => Math.pow(n, 2051) === t[i]);\n};\n\n/**\n * Return true if all numbers in the list l are a power of two and are divisible by t.\n  >>> power_of_twent", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  3\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  3\n  */\nconst gcd = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  return gcd(y, x % y);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  6\n  */\nconst lcm = (x, y) => {\n  return x === y? x : lcm(y, x % y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst modPow = (x, n, p) => {\n  return mod(x, n) * pow(p, n, mod(x, n));\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  3\n  */\nconst modGCD = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  return modGCD(y, x % y);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  6\n  */\nconst modLCM = (x, y) => {\n  return modPow(x, 2, modPow(y, 2, mod(x, 2)));\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  3\n  */\nconst modGCD2 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  return modGCD2(y, x % y);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  6\n  */\nconst modLCM2 = (x, y) => {\n  return modPow(x, 2, modPow(y, 2, mod(x, 2)));\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  3\n  */\nconst modGCD3 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  return modGCD3(y, x % y);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  6\n  */\nconst modLCM3 = (x, y) => {\n  return modPow(x, 2, modPow(y, 2, mod(x, 2)));\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  3\n  */\nconst modGCD4 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  return modGCD4(y, x % y);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  6\n  */\nconst modLCM4 = (x, y) => {\n  return modPow(x, 2, modPow(y, 2, mod(x, 2)));\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  3\n  */\nconst modGCD5 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  return modGCD5(y, x % y);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  6\n  */\nconst modLCM5 = (x, y) => {\n  return modPow(x, 2, modPow(y, 2, mod(x, 2)));\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  3\n  */\nconst modGCD6 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  return modGCD6(y, x % y);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  6\n  */\nconst modLCM6 = (x, y) => {\n  return modPow(x, 2, modPow(y, 2, mod(x, 2)));\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  3\n  */\nconst modGCD7 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  return modGCD7(y, x % y);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  6\n  */\nconst modLCM7 = (x, y) => {\n  return modPow(x, 2, modPow(y, 2, mod(x, 2)));\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  3\n  */\nconst modGCD8 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  return modGCD8(y, x % y);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  6\n  */\nconst modLCM8 = (x, y) => {\n  return modPow(x, 2, modPow(y, 2, mod(x, 2)));\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  3\n  */\nconst modGCD9 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  return modGCD9(y, x % y);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  6\n  */\nconst modLCM9 = (x, y) => {\n  return modPow(x, 2, modPow(y, 2, mod(x, 2)));\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  3\n  */\nconst modGCD10 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  return modGCD10(y, x % y);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  6\n  */\nconst modLCM10 = (x, y) => {\n  return modPow(x, 2, modPow(y, 2, mod(x, 2)));\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  3\n  */\nconst modGCD11 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  return modGCD11(y, x % y);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  6\n  */\nconst modLCM11 = (x, y) => {\n  return modPow(x, 2, modPow(y, 2, mod(x, 2)));\n};\n\n/*\n  >>> gcd(2, 3)\n  2\n  >>> gcd(5, 7)\n  3\n  */\nconst modGCD12 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  return modGCD12(y, x % y);\n};\n\n/*\n  >>> lcm(2, 3)\n  2\n  >>> lcm(5, 7)\n  6\n  */\nconst modLCM12 = (x, y) => {\n  return modPow(x, 2, modPow(y, 2, mod(x, 2)));\n};\n\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  Return the sum of all elements in a list.\n  >>> sum([1,2,3])\n  6\n  >>> sum([1,2,3,4,5])\n  15\n  >>> sum([1,2,3,4,5,6])\n  30\n  >>> sum([1,2,3,4,5,6,7])\n  60\n  >>> sum([1,2,3,4,5,6,7,8])\n  90\n  >>> sum([1,2,3,4,5,6,7,8,9])\n  120\n  >>> sum([1,2,3,4,5,6,7,8,9,10])\n  150\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11])\n  180\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12])\n  210\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13])\n  240\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n  270\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n  300\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n  330\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n  360\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n  390\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n  420\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n  440\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n  460\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n  480\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n  490\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n  500\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n  510\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n  520\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n  540\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n  570\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])\n  580\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])\n  600\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])\n  630\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])\n  660\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33])\n  690\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34])\n  720\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35])\n  740\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36])\n  750\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37])\n  780\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38])\n  800\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39])\n  820\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40])\n  840\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41])\n  860\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42])\n  890\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43])\n  920\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44])\n  960\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45])\n  980\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46])\n  1000\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47])\n  1020\n  >>> sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const opening_brackets = brackets.split(\">\");\n  const closing_brackets = brackets.split(\"<\");\n  for (let i = 0; i < opening_brackets.length; i++) {\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\">\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\">\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {\n      if (closing_brackets[i].includes(\"<<>\")) {\n        return false;\n      }\n    }\n    if (opening_brackets[i].includes(\"<\")) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.reverse();\n  while (l > l[0]) {\n    if (l[j] < l[k]) {\n      i = j;\n      j = k;\n      k = l;\n    }\n    l = l[k];\n  }\n  return i!== j;\n};\n\n/**\n * Return the first element of the list that satisfies the predicate.\n * If no such element exists, the function returns undefined.\n * If more than one element satisfies the predicate, the function returns the\n * first element that satisfies the predicate.\n * If there are more than one element that satisfy the predicate, the\n * function returns undefined.\n *\n * If `predicate` does not return a truthy value, the first element of the list\n * is returned.\n *\n * If `predicate` returns a truthy value, the function returns `true`.\n *\n * If `predicate` returns a falsy value, the function returns `false`.\n *\n * If `predicate` is an object, it is used to test each element of the list\n * for its truthiness.\n *\n * If `predicate` is a function, the function will be called with three\n * arguments: (value, index, list).\n *\n * If `predicate` is an array, the function will be called with three\n * arguments: (value, index, list).\n *\n * If `predicate` is an iterable, the function will be called with three\n * arguments: (value, index, list).\n *\n * If `predicate` is an array-like object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used as the test object for\n * `predicate` function.\n *\n * If `predicate` is an iterable object, it is used ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> common([1, 2, 3], [2, 3])\n  [1, 2]\n  >>> common([1, 2, 3], [2, 3])\n  [1, 2, 3]\n\n  */\nconst commonSorted = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n  >>> commonSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n\n  */\nconst commonSortedUnique = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortedUnique([1, 2, 3], [2, 3])\n  [1, 2, 3]\n  >>> commonSortedUnique([1, 2, 3], [2, 3])\n  [1, 2, 3]\n\n  */\nconst commonSortedUniqueSorted = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortedUniqueSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n  >>> commonSortedUniqueSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n\n  */\nconst commonSortedUniqueSortedUnique = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortedUniqueSortedUnique([1, 2, 3], [2, 3])\n  [1, 2, 3]\n  >>> commonSortedUniqueSortedUnique([1, 2, 3], [2, 3])\n  [1, 2, 3]\n\n  */\nconst commonSortedUniqueSortedUniqueSorted = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortedUniqueSortedUniqueSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n  >>> commonSortedUniqueSortedUniqueSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n\n  */\nconst commonSortedUniqueSortedUniqueSortedUnique = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortedUniqueSortedUniqueSortedUniqueSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n  >>> commonSortedUniqueSortedUniqueSortedUniqueSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n\n  */\nconst commonSortedUniqueSortedUniqueSortedUniqueSorted = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortedUniqueSortedUniqueSortedUniqueSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n  >>> commonSortedUniqueSortedUniqueSortedUniqueSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n\n  */\nconst commonSortedUniqueSortedUniqueSortedUniqueSortedUnique = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n  >>> commonSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n\n  */\nconst commonSortedUniqueSortedUniqueSortedUniqueSortedUnique = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i])\n    } else {\n      set.add(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i])\n    } else {\n      set.add(l2[i])\n    }\n  }\n  return result\n}\n\n/*\n  Return sorted unique common elements for two sorted lists.\n  >>> commonSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n  >>> commonSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted([1, 2, 3], [2, 3])\n  [1, 2, 3]\n\n  */\nconst commonSortedUniqueSortedUniqueSortedUniqueSortedUniqueSorted = (l1, l2) => {\n  const set = new Set()\n  const result = []\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_divisor = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_divisor(13195)\n  29\n  >>> largest_prime_divisor(2048)\n  2\n  */\nconst largest_prime_divisor_recursive = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_divisor_recursive(13195)\n  29\n  >>> largest_prime_divisor_recursive(2048)\n  2\n  */\nconst largest_prime_divisor_iterative = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_divisor_iterative(13195)\n  29\n  >>> largest_prime_divisor_iterative(2048)\n  2\n  */\nconst largest_prime_divisor_iterative_recursive = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_divisor_iterative_recursive(13195)\n  29\n  >>> largest_prime_divisor_iterative_recursive(2048)\n  2\n  */\nconst largest_prime_divisor_iterative_recursive_prime = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_divisor_iterative_recursive_prime(13195)\n  29\n  >>> largest_prime_divisor_iterative_recursive_prime(2048)\n  2\n  */\nconst largest_prime_divisor_iterative_recursive_prime_recursive = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_divisor_iterative_recursive_prime_recursive(13195)\n  29\n  >>> largest_prime_divisor_iterative_recursive_prime_recursive(2048)\n  2\n  */\nconst largest_prime_divisor_iterative_recursive_prime_recursive_prime = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_divisor_iterative_recursive_prime_recursive_prime(13195)\n  29\n  >>> largest_prime_divisor_iterative_recursive_prime_recursive_prime(2048)\n  2\n  */\nconst largest_prime_divisor_iterative_recursive_prime_recursive_prime_recursive = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_divisor_iterative_recursive_prime_recursive_prime_recursive(13195)\n  29\n  >>> largest_prime_divisor_iterative_recursive_prime_recursive_prime_recursive(2048)\n  2\n  */\nconst largest_prime_divisor_iterative_recursive_prime_recursive_prime_recursive_prime = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_divisor_iterative_recursive_prime_recursive_prime_recursive_prime(13195)\n  29\n  >>> largest_prime_divisor_iterative_recursive_prime_recursive_prime_recursive_prime(2048)\n  2\n  */\nconst largest_prime_divisor_iterative_recursive_prime_recursive_prime_recursive_prime_recursive = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_divisor_iterative_recursive_prime_recursive_prime_recursive_prime_recursive(13195)\n  29\n  >>> largest_prime_divisor_iterative_recursive_prime_recursive_prime_recursive_prime(2048)\n  2\n  */\nconst largest_prime_divisor_iterative_recursive_prime_recursive_prime_recursive_prime_recursive_prime = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= i) {\n    if (n % i === 0) {\n      i++;\n    } else {\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_divisor_iterative_recursive_prime_recursive_prime_recursive_prime_recursive_prime(13195)\n  29\n  >>> largest_prime", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = 0;\n  const paren_stack_size = 0;\n  const paren_stack_remaining = [];\n  let paren_stack_index = 0;\n  let paren_stack_remaining_index = 0;\n  let paren_stack_remaining_size = 0;\n  let paren_stack_remaining_remaining_index = 0;\n  let paren_stack_remaining_remaining_size = 0;\n  let paren_stack_remaining_remaining_index2 = 0;\n  let paren_stack_remaining_remaining_size2 = 0;\n  let paren_stack_remaining_remaining_index3 = 0;\n  let paren_stack_remaining_remaining_size3 = 0;\n  let paren_stack_remaining_remaining_index4 = 0;\n  let paren_stack_remaining_remaining_size4 = 0;\n  let paren_stack_remaining_remaining_index5 = 0;\n  let paren_stack_remaining_remaining_size5 = 0;\n  let paren_stack_remaining_remaining_index6 = 0;\n  let paren_stack_remaining_remaining_size6 = 0;\n  let paren_stack_remaining_remaining_index7 = 0;\n  let paren_stack_remaining_remaining_size7 = 0;\n  let paren_stack_remaining_remaining_index8 = 0;\n  let paren_stack_remaining_remaining_size8 = 0;\n  let paren_stack_remaining_remaining_index9 = 0;\n  let paren_stack_remaining_remaining_size9 = 0;\n  let paren_stack_remaining_remaining_index10 = 0;\n  let paren_stack_remaining_remaining_size10 = 0;\n  let paren_stack_remaining_remaining_index11 = 0;\n  let paren_stack_remaining_remaining_size11 = 0;\n  let paren_stack_remaining_remaining_index12 = 0;\n  let paren_stack_remaining_remaining_size12 = 0;\n  let paren_stack_remaining_remaining_index13 = 0;\n  let paren_stack_remaining_remaining_size13 = 0;\n  let paren_stack_remaining_remaining_index14 = 0;\n  let paren_stack_remaining_remaining_size14 = 0;\n  let paren_stack_remaining_remaining_index15 = 0;\n  let paren_stack_remaining_remaining_size15 = 0;\n  let paren_stack_remaining_remaining_index16 = 0;\n  let paren_stack_remaining_remaining_size16 = 0;\n  let paren_stack_remaining_remaining_index17 = 0;\n  let paren_stack_remaining_remaining_size17 = 0;\n  let paren_stack_remaining_remaining_index18 = 0;\n  let paren_stack_remaining_remaining_size18 = 0;\n  let paren_stack_remaining_remaining_index19 = 0;\n  let paren_stack_remaining_remaining_size19 = 0;\n  let paren_stack_remaining_remaining_index20 = 0;\n  let paren_stack_remaining_remaining_size20 = 0;\n  let paren_stack_remaining_remaining_index21 = 0;\n  let paren_stack_remaining_remaining_size21 = 0;\n  let paren_stack_remaining_remaining_index22 = 0;\n  let paren_stack_remaining_remaining_size22 = 0;\n  let paren_stack_remaining_remaining_index23 = 0;\n  let paren_stack_remaining_remaining_size23 = 0;\n  let paren_stack_remaining_remaining_index24 = 0;\n  let paren_stack_remaining_remaining_size24 = 0;\n  let paren_stack_remaining_remaining_index25 = 0;\n  let paren_stack_remaining_remaining_size25 = 0;\n  let paren_stack_remaining_remaining_index26 = 0;\n  let paren_stack_remaining_remaining_size26 = 0;\n  let paren_stack_remaining_remaining_index27 = 0;\n  let paren_stack_remaining_remaining_size27 = 0;\n  let paren_stack_remaining_remaining_index28 = 0;\n  let paren_stack_remaining_remaining_size28 = 0;\n  let paren_stack_remaining_remaining_index29 = 0;\n  let paren_stack_remaining_remaining_size29 = 0;\n  let paren_stack_remaining_remaining_index30 = 0;\n  let paren_stack_remaining_remaining_size30 = 0;\n  let paren_stack_remaining_remaining_index31 = 0;\n  let paren_stack_remaining_remaining_size31 = 0;\n  let paren_stack_remaining_remaining_index32 = 0;\n  let paren_stack_remaining_remaining_size32 = 0;\n  let paren_stack_remaining_remaining_index33 = 0;\n  let paren_stack_remaining_remaining_size33 = 0;\n  let paren_stack_remaining_remaining_index34 = 0;\n  let paren_stack_remaining_remaining_size34 = 0;\n  let paren_stack_remaining_remaining_index35 = 0;\n  let paren_stack_remaining_remaining_size35 = 0;\n  let paren_stack_remaining_remaining_index36 = 0;\n  let paren_stack_remaining_remaining_size36 = 0;\n  let paren_stack_remaining_remaining_index37 = 0;\n  let paren_stack_remaining_remaining_size37 = 0;\n  let paren_stack_remaining_remaining_index38 = 0;\n  let paren_stack_remaining_remaining_size38 = 0;\n  let paren_stack_remaining_remaining_index39 = 0;\n  let paren_stack_remaining_remaining_size39 = 0;\n  let paren_stack_remaining_remaining_index40 = 0;\n  let paren_stack_remaining_remaining_size40 = 0;\n  let paren_stack_remaining_remaining_index41 = 0;\n  let paren_stack_remaining_remaining_size41 = 0;\n  let paren_stack_remaining_remaining_index42 = 0;\n  let paren_stack_remaining_remaining_size42 = 0;\n  let paren_stack_remaining_remaining_index43 = 0;\n  let paren_stack_remaining_remaining_size43 = 0;\n  let paren_stack_remaining_remaining_index44 = 0;\n  let paren_stack_remaining_remaining_size44 = 0;\n  let paren_stack_remaining_remaining_index45 = 0;\n  let paren_stack_remaining_remaining_size45 = 0;\n  let paren_stack_remaining_remaining_index46 = 0;\n  let paren_stack_remaining_remaining_size46 = 0;\n  let paren_stack_remaining_remaining_index47 = 0;\n  let paren_stack_remaining_remaining_size47 = 0;\n  let paren_stack_remaining_remaining_index48 = 0;\n  let paren_stack_remaining_remaining_size48 = 0;\n  let paren_stack_remaining_remaining_index49 = 0;\n  let paren_stack_remaining_remaining_size49 = 0;\n  let paren_stack_remaining_remaining_index50 = 0;\n  let paren_stack_remaining_remaining_size50 = 0;\n  let paren_stack_remaining_remaining_index51 = 0;\n  let paren_stack_remaining_remaining_size51 = 0;\n  let paren_stack_remaining_remaining_index52 = 0;\n  let paren_stack_remaining_remaining_size52 = 0;\n  let paren_stack_remaining_remaining_index53 = 0;\n  let paren_stack_remaining_remaining_size53 = 0;\n  let paren_stack_remaining_remaining_index54 = 0;\n  let paren_stack_remaining_remaining_size54 = 0;\n  let paren_stack_remaining_remaining_index55 = 0;\n  let paren_stack_remaining_remaining_size55 = 0;\n  let paren_stack_remaining_remaining_index56 = 0;\n  let paren_stack_remaining_remaining_size56 = 0;\n  let paren_stack_remaining_remaining_index57 = 0;\n  let paren_stack_remaining_remaining_size57 = 0;\n  let paren_stack_remaining_remaining_index58 = 0;\n  let paren_stack_remaining_remaining_size58 = 0;\n  let paren_stack_remain", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "<|endoftext|>/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that returns the sum of all numbers from 1 to n.\n  >>> sum_all_to_n(30)\n  465\n  >>> sum_all_to_n(100)\n  5050\n  >>> sum_all_to_n(5)\n  15\n  >>> sum_all_to_n(10)\n  55\n  >>> sum_all_to_n(1)\n  1\n  */\nconst sum_all_to_n = (n) => {\n  let sum = 0;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const opening_brackets = brackets.match(/[^(]*\\([^)]*\\)/g);\n  const closing_brackets = brackets.match(/[^(]*\\)[^\\)]*\\)/g);\n  return opening_brackets.every(opening => closing_brackets.every(closing => opening === closing));\n};\n\n/**\n * Given a string, return the string with any unmatched parentheses removed.\n *\n * Examples:\n *\n * >>> unmatched_parentheses(\"(())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()())\")\n * \"()\"\n * >>> unmatched_parentheses(\"(()", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let sum = 0;\n  let i;\n  for (i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return [sum];\n};\n\n// Given a polynomial of degree n, return the coefficients of its roots.\nconst roots = (degree, coefficients) => {\n  let roots = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    roots.push(coefficients[i][0]);\n  }\n  return roots;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst terms = (degree, coefficients) => {\n  let terms = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    terms.push(coefficients[i][1]);\n  }\n  return terms;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficients = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficients.push(coefficients[i][1]);\n  }\n  return coefficients;\n};\n\n// Given a polynomial of degree n, return the coefficients of its terms.\nconst coefficientsOf = (degree, coefficients) => {\n  let coefficients = [];\n  let i;\n  for (i = 0; i < coefficients.length; i++) {\n    coefficient", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fibfib = 0;\n  for (let i = 2; i <= n; i++) {\n    fibfib = fibfib + fibfib;\n  }\n  return fibfib;\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 1 and n.\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(5)\n  13\n  >>> fibonacci(8)\n  34\n  */\nconst fibonacci = (n) => {\n  let fibonacci = 0;\n  if (n <= 1) {\n    return 1;\n  }\n  if (n <= 2) {\n    return 1;\n  }\n  if (n <= 3) {\n    return 1;\n  }\n  if (n <= 5) {\n    return 1;\n  }\n  if (n <= 8) {\n    return 1;\n  }\n  if (n <= 15) {\n    return 1;\n  }\n  if (n <= 31) {\n    return 1;\n  }\n  if (n <= 61) {\n    return 1;\n  }\n  if (n <= 1231) {\n    return 1;\n  }\n  if (n <= (1232 * 2)) {\n    return 1;\n  }\n  if (n <= (1232 * 3)) {\n    return 1;\n  }\n  if (n <= (1232 * 4)) {\n    return 1;\n  }\n  if (n <= (1232 * 5)) {\n    return 1;\n  }\n  if (n <= (1232 * 6)) {\n    return 1;\n  }\n  if (n <= (1232 * 7)) {\n    return 1;\n  }\n  if (n <= (1232 * 8)) {\n    return 1;\n  }\n  if (n <= (1232 * 9)) {\n    return 1;\n  }\n  if (n <= (1232 * 10)) {\n    return 1;\n  }\n  if (n <= (1232 * 11)) {\n    return 1;\n  }\n  if (n <= (1232 * 12)) {\n    return 1;\n  }\n  if (n <= (1232 * 13)) {\n    return 1;\n  }\n  if (n <= (1232 * 14)) {\n    return 1;\n  }\n  if (n <= (1232 * 15)) {\n    return 1;\n  }\n  if (n <= (1232 * 16)) {\n    return 1;\n  }\n  if (n <= (1232 * 17)) {\n    return 1;\n  }\n  if (n <= (1232 * 18)) {\n    return 1;\n  }\n  if (n <= (1232 * 19)) {\n    return 1;\n  }\n  if (n <= (1232 * 20)) {\n    return 1;\n  }\n  if (n <= (1232 * 21)) {\n    return 1;\n  }\n  if (n <= (1232 * 22)) {\n    return 1;\n  }\n  if (n <= (1232 * 23)) {\n    return 1;\n  }\n  if (n <= (1232 * 24)) {\n    return 1;\n  }\n  if (n <= (1232 * 25)) {\n    return 1;\n  }\n  if (n <= (1232 * 26)) {\n    return 1;\n  }\n  if (n <= (1232 * 27)) {\n    return 1;\n  }\n  if (n <= (1232 * 28)) {\n    return 1;\n  }\n  if (n <= (1232 * 29)) {\n    return 1;\n  }\n  if (n <= (1232 * 30)) {\n    return 1;\n  }\n  if (n <= (1232 * 31)) {\n    return 1;\n  }\n  if (n <= (1232 * 32)) {\n    return 1;\n  }\n  if (n <= (1232 * 33)) {\n    return 1;\n  }\n  if (n <= (1232 * 34)) {\n    return 1;\n  }\n  if (n <= (1232 * 35)) {\n    return 1;\n  }\n  if (n <= (1232 * 36)) {\n    return 1;\n  }\n  if (n <= (1232 * 37)) {\n    return 1;\n  }\n  if (n <= (1232 * 38)) {\n    return 1;\n  }\n  if (n <= (1232 * 39)) {\n    return 1;\n  }\n  if (n <= (1232 * 40)) {\n    return 1;\n  }\n  if (n <= (1232 * 41)) {\n    return 1;\n  }\n  if (n <= (1232 * 42)) {\n    return 1;\n  }\n  if (n <= (1232 * 43)) {\n    return 1;\n  }\n  if (n <= (1232 * 44)) {\n    return 1;\n  }\n  if (n <= (1232 * 45)) {\n    return 1;\n  }\n  if (n <= (1232 * 46)) {\n    return 1;\n  }\n  if (n <= (1232 * 47)) {\n    return 1;\n  }\n  if (n <= (1232 * 48)) {\n    return 1;\n  }\n  if (n <= (1232 * 49)) {\n    return 1;\n  }\n  if (n <= (1232 * 50)) {\n    return 1;\n  }\n  if (n <= (1232 * 51)) {\n    return 1;\n  }\n  if (n <= (1232 * 52)) {\n    return 1;\n  }\n  if (n <= (1232 * 53)) {\n    return 1;\n  }\n  if (n <= (1232 * 54)) {\n    return 1;\n  }\n  if (n <= (1232 * 55)) {\n    return 1;\n  }\n  if (n <= (1232 * 56)) {\n    return 1;\n  }\n  if (n <= (1232 * 57)) {\n    return 1;\n  }\n  if (n <= (1232 * 58)) {\n    return 1;\n  }\n  if (n <= (1232 * 59)) {\n    return 1;\n  }\n  if (n <= (1232 * 60)) {\n    return 1;\n  }\n  if (n <= (1232 * 61)) {\n    return 1;\n  }\n  if (n <= (1232 * 62)) {\n    return 1;\n  }\n  if (n <= (1232 * 63)) {\n    return 1;\n  }\n  if (n <= (1232 * 64)) {\n    return 1;\n  }\n  if (n <= (1232 * 65)) {\n    return 1;\n  }\n  if (n <= (1232 * 66)) {\n    return 1;\n  }\n  if (n <= (1232 * 67)) {\n    return 1;\n  }\n  if (n <= (1232 * 68)) {\n    return 1;\n  }\n  if (n <= (1232 * 69)) {\n    return 1;\n  }\n  if (n <= (1232 * 70)) {\n    return 1;\n  }\n  if (n <= (1232 * 71)) {\n    return 1;\n  }\n  if (n <= (1232 * 72)) {\n    return 1;\n  }\n  if (n <= (1232 * 73)) {\n    return 1;\n  }\n  if (n <= (1232 * 74)) {\n    return 1;\n  }\n  if (n <= (1232 * 75)) {\n    return 1;\n  }\n  if (n <= (1232 * 76)) {\n    return 1;\n  }\n  if (n <= (1232 * 77)) {\n    return 1;\n  }\n  if (n <= (1232 * 78)) {\n    return 1;\n  }\n  if (n <= (1232 * 79)) {\n    return 1;\n  }\n  if (n <= (1232 * 80)) {\n    return 1;\n  }\n  if (n <= (1232 * 81)) {\n    return 1;\n  }\n  if (n <= (12", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "<|endoftext|>/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_1 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_8 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_9 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count_10 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowel", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  const digits = Math.ceil(Math.log10(Math.abs(x)));\n  const reversed = digits > 0? x.toString() + digits.toString().reverse() : x.toString();\n  return reversed.slice(0, -shift) + reversed.slice(-shift);\n};\n\n/*\n  Return the number of trailing zeros in a number.\n  >>> trailing_zeros(123)\n  3\n  >>> trailing_zeros(-123)\n  0\n  >>> trailing_zeros(-12345678)\n  2\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0\n  >>> trailing_zeros(-12345678)\n  0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let arr = [];\n  let sum = 0;\n  let count = 0;\n  let fruits = n;\n  let apples = s;\n  let oranges = s;\n  let mango = 0;\n  let i;\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n      sum += i;\n      count += 1;\n    }\n  }\n  for (i = 0; i < fruits; i += 1) {\n    if (arr[i] === undefined) {\n      arr[i] = i;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      min = Math.min(min, arr[i]);\n      max = Math.max(max, arr[i]);\n      minIndex = i;\n      maxIndex = i;\n    }\n  }\n  return [min, minIndex];\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function (nums) {\n  let min = 0;\n  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n      minIndex = i;\n    }\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-maximum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMax = function (nums) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-the-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSum = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-difference-of-two-arrays/\n/**\n * @param {number[]} nums\n * @param {number[]} ans\n * @return {number}\n */\nvar findDifference = function (nums, ans) {\n  let diff = 0;\n  for (let i = 0; i < nums.length; i++) {\n    diff += nums[i] - ans[i];\n  }\n  return diff;\n};\n\n// https://leetcode.com/problems/find-the-difference-of-two-arrays-in-place/\n/**\n * @param {number[]} nums\n * @param {number[]} ans\n */\nvar findDifferenceInPlace = function (nums, ans) {\n  for (let i = 0; i < nums.length; i++) {\n    nums[i] - ans[i];\n  }\n};\n\n// https://leetcode.com/problems/find-the-difference-of-two-sorted-arrays/\n/**\n * @param {number[]} nums\n * @param {number[]} ans\n */\nvar findDifferenceSortedArrays = function (nums, ans) {\n  let ans = ans.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < nums.length && j < ans.length) {\n    if (nums[i] > ans[j]) {\n      ans[k++] = nums[i];\n      i++;\n    } else {\n      ans[k++] = ans[j++];\n    }\n  }\n  ans.length = k;\n};\n\n// https://leetcode.com/problems/find-the-difference-of-two-sorted-arrays-in-place/\n/**\n * @param {number[]} nums\n * @param {number[]} ans\n */\nvar findDifferenceSortedArraysInPlace = function (nums, ans) {\n  let ans = ans.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < nums.length && j < ans.length) {\n    if (nums[i] > ans[j]) {\n      ans[k++] = nums[i];\n      i++;\n    } else {\n      ans[k++] = ans[j++];\n    }\n  }\n  ans.length = k;\n};\n\n// https://leetcode.com/problems/find-the-difference-of-two-sorted-arrays-in-place-with-duplicates/\n/**\n * @param {number[]} nums\n * @param {number[]} ans\n */\nvar findDifferenceSortedArraysInPlaceWithDuplicates = function (nums, ans) {\n  let ans = ans.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < nums.length && j < ans.length) {\n    if (nums[i] === ans[j]) {\n      ans[k++] = nums[i];\n      i++;\n    } else {\n      ans[k++] = ans[j++];\n    }\n  }\n  ans.length = k;\n};\n\n// https://leetcode.com/problems/find-the-difference-of-two-sorted-arrays-in-place-with-duplicates-in-place/\n/**\n * @param {number[]} nums\n * @param {number[]} ans\n */\nvar findDifferenceSortedArraysInPlaceWithDuplicatesInPlace = function (nums, ans) {\n  let ans = ans.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < nums.length && j < ans.length) {\n    if (nums[i] === ans[j]) {\n      ans[k++] = nums[i];\n      i++;\n    } else {\n      ans[k++] = ans[j++];\n    }\n  }\n  ans.length = k;\n};\n\n// https://leetcode.com/problems/find-the-difference-of-two-sorted-arrays-in-place-with-duplicates-in-place-with-duplicates/\n/**\n * @param {number[]} nums\n * @param {number[]} ans\n */\nvar findDifferenceSortedArraysInPlaceWithDuplicatesInPlaceWithDuplicates = function (nums, ans) {\n  let ans = ans.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < nums.length && j < ans.length) {\n    if (nums[i] === ans[j]) {\n      ans[k++] = nums[i];\n      i++;\n    } else {\n      ans[k++] = ans[j++];\n    }\n  }\n  ans.length = k;\n};\n\n// https://leetcode.com/problems/find-the-difference-of-two-sorted-arrays-in-place-with-duplicates-in-place-with-duplicates-in-place-with-duplicates/\n/**\n * @param {number[]} nums\n * @param {number[]} ans\n */\nvar findDifferenceSortedArraysInPlaceWithDuplicatesInPlaceWithDuplicatesInPlace = function (nums, ans) {\n  let ans = ans.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < nums.length && j < ans.length) {\n    if (nums[i] === ans[j]) {\n      ans[k++] = nums[i];\n      i++;\n    } else {\n      ans[k++] = ans[j++];\n    }\n  }\n  ans.length = k;\n};\n\n// https://leetcode.com/problems/find-the-difference-of-two-sorted-arrays-in-place-with-duplicates-in-place-with-duplicates-in-place-with-duplicates-in-place-with-duplicates-in-place-with-duplicates-in-place-with-duplicates-in-place-with-duplicates-in-place-with-duplicates-in-place-with-duplicates-in-place-with-duplicates-in-place-with-duplicates-", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = search;\n\n},{}],3:[function(require,module,exports){\n/*\n  You are given an integer array nums and an integer k. Return the number of distinct subsets of nums that\n  are made up of exactly k distinct elements. You may assume that each element appears only once in the array.\n  You may not modify the elements of nums.\n  Example:\n      subsets([1,2,3],2) == [[1],[2],[3]]\n      subsets([1,2,3],3) == [[1,2],[1,2,3]]\n      subsets([1,2,3],4) == [[1,2],[1,2,3],[1,2]]\n      subsets([1,2,3],5) == [[1,2],[1,2,3],[1,2],[1,2]]\n      subsets([1,2,3],6) == [[1,2],[1,2,3],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],7) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],8) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],9) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],10) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],11) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],12) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],13) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],14) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],15) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],16) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],17) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],18) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],19) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],20) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],21) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],22) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],23) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],24) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],25) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],26) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],27) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],28) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],29) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],30) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],31) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],32) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],33) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],34) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],35) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],36) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],37) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],38) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],39) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],40) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],41) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],42) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],43) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],44) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],45) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],46) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],47) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],48) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],49) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],50) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],51) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],52) == [[1,2],[1,2,3],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2]]\n      subsets([1,2,3],53) == [[1,2],[1,2,3],", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n// ['array', 'cde']\nconst filter_by_substring_insensitive = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1)\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\n// >>> filter_by_substring_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n// ['array', 'cde']\nconst filter_by_substring_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1 && string.indexOf(substring) > -1)\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\n// >>> filter_by_substring_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n// ['array', 'cde']\nconst filter_by_substring_insensitive_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1 && string.indexOf(substring) > -1 && string.indexOf(substring) < string.length)\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\n// >>> filter_by_substring_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n// ['array', 'cde']\nconst filter_by_substring_insensitive_insensitive_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1 && string.indexOf(substring) > -1 && string.indexOf(substring) < string.length && string.indexOf(substring) > -1)\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\n// >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n// ['array', 'cde']\nconst filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1 && string.indexOf(substring) > -1 && string.indexOf(substring) < string.length && string.indexOf(substring) > -1 && string.indexOf(substring) < string.length)\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\n// >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n// ['array', 'cde']\nconst filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1 && string.indexOf(substring) > -1 && string.indexOf(substring) < string.length && string.indexOf(substring) > -1 && string.indexOf(substring) < string.length && string.indexOf(substring) > -1)\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\n// >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n// ['array', 'cde']\nconst filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1 && string.indexOf(substring) > -1 && string.indexOf(substring) < string.length && string.indexOf(substring) > -1 && string.indexOf(substring) < string.length && string.indexOf(substring) > -1)\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\n// >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n// ['array', 'cde']\nconst filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1 && string.indexOf(substring) > -1 && string.indexOf(substring) < string.length && string.indexOf(substring) > -1 && string.indexOf(substring) < string.length && string.indexOf(substring) > -1)\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\n// >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive(['abc', 'bacd', 'cde', 'array'], 'b')\n// ['array', 'cde']\nconst filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1 && string.indexOf(substring) > -1 && string.indexOf(substring) < string.length && string.indexOf(substring) > -1 && string.indexOf(substring) < string.length && string.indexOf(substring) > -1)\n}\n\n// Filter an input list of strings only for ones that do not contain given substring\n// >>> filter_by_substring_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_insensitive_in", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let tmp;\n\n  min = lst[0];\n  max = lst[0];\n\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  tmp = min;\n  min = max;\n  max = tmp;\n\n  for (let i = minIndex; i < maxIndex; i++) {\n    lst[i] = lst[minIndex];\n    lst[minIndex] = tmp;\n  }\n\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 2, 3, 4]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list = (lst) => {\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let tmp;\n\n  min = lst[0];\n  max = lst[0];\n\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  tmp = min;\n  min = max;\n  max = tmp;\n\n  for (let i = minIndex; i < maxIndex; i++) {\n    lst[i] = lst[minIndex];\n    lst[minIndex] = tmp;\n  }\n\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 2, 3, 4]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reversed = (lst) => {\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let tmp;\n\n  min = lst[0];\n  max = lst[0];\n\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  tmp = min;\n  min = max;\n  max = tmp;\n\n  for (let i = minIndex; i < maxIndex; i++) {\n    lst[i] = lst[maxIndex];\n    lst[maxIndex] = tmp;\n  }\n\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 2, 3, 4]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reversed_reversed = (lst) => {\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let tmp;\n\n  min = lst[0];\n  max = lst[0];\n\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  tmp = min;\n  min = max;\n  max = tmp;\n\n  for (let i = minIndex; i < maxIndex; i++) {\n    lst[i] = lst[maxIndex];\n    lst[maxIndex] = tmp;\n  }\n\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 2, 3, 4]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reversed_reversed_reversed = (lst) => {\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let tmp;\n\n  min = lst[0];\n  max = lst[0];\n\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  tmp = min;\n  min = max;\n  max = tmp;\n\n  for (let i = minIndex; i < maxIndex; i++) {\n    lst[i] = lst[maxIndex];\n    lst[maxIndex] = tmp;\n  }\n\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 2, 3, 4]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reversed_reversed_reversed_reversed = (lst) => {\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let tmp;\n\n  min = lst[0];\n  max = lst[0];\n\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  tmp = min;\n  min = max;\n  max = tmp;\n\n  for (let i = minIndex; i < maxIndex; i++) {\n    lst[i] = lst[maxIndex];\n    lst[maxIndex] = tmp;\n  }\n\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 2, 3, 4]\n  sort_list([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sort_list([]) == []\n  */\nconst sort_list_reversed_reversed_reversed_reversed_reversed = (lst) => {\n  let min;\n  let max;\n  let minIndex;\n  let maxIndex;\n  let tmp;\n\n  min = lst[0];\n  max = lst[0];\n\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n\n  tmp = min;\n  min = max;\n  max = tmp;\n\n  for (let i = minIndex; i < maxIndex; i++) {\n    lst[i] = lst[maxIndex];\n    lst[maxIndex] = tmp;\n  }\n\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sort_list([1, 2, 3, 4]) == [1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const a1 = Math.max(a, b);\n  const a2 = Math.min(a, b);\n  const b1 = Math.max(b, c);\n  const b2 = Math.min(b, c);\n  const c1 = Math.max(c, a);\n  const c2 = Math.min(c, a);\n  const denom = (a2 - a1) * (b2 - b1) + (b2 - b1) * (c2 - c1);\n  return denom? Math.sqrt(denom) / 2 : -1;\n};\n\nconst triangleArea = (a, b, c) => {\n  const area = triangle_area(a, b, c);\n  return area > 0? area : -1;\n};\n\nconst triangleAreaInSquare = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInSquare(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInRectangle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInRectangle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInCircle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInCircle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInTriangle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInTriangle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInEllipse = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInEllipse(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInPolygon = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInPolygon(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInEllipsoid = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInEllipsoid(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInRectangleInEllipsoid = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInRectangleInEllipsoid(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInEllipsoidInRectangle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInEllipsoidInRectangle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInEllipsoidInPolygon = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInEllipsoidInPolygon(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInEllipsoidInTriangle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInEllipsoidInTriangle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInPolygonInEllipsoid = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInPolygonInEllipsoid(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInPolygonInRectangle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInPolygonInRectangle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInPolygonInTriangle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInPolygonInTriangle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInRectangleInPolygon = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInRectangleInPolygon(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInRectangleInTriangle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInRectangleInTriangle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInPolygonInEllipsoid = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInPolygonInEllipsoid(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInPolygonInRectangle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInPolygonInRectangle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInPolygonInTriangle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInPolygonInTriangle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInEllipsoidInRectangle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInEllipsoidInRectangle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInEllipsoidInPolygon = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInEllipsoidInPolygon(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInEllipsoidInTriangle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInEllipsoidInTriangle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInPolygonInEllipsoid = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInPolygonInEllipsoid(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInPolygonInRectangle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInPolygonInRectangle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInPolygonInTriangle = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInPolygonInTriangle(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInRectangleInEllipsoid = (a, b, c) => {\n  const area1 = triangleArea(a, b, c);\n  const area2 = triangleAreaInRectangleInEllipsoid(a, b, c);\n  return area1 > 0? area1 + area2 : area2 - area1;\n};\n\nconst triangleAreaInRectangleInPolygon = (a, b, c) => {\n  const area1 = triangleArea(a, b", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const len = q.length;\n  const max = Math.max(...q);\n  const sum = q.reduce((acc, cur) => acc + cur, 0);\n  if (sum < max) {\n    return false;\n  }\n  const weight = Math.ceil(Math.log(sum) / Math.log(max));\n  return weight <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const len = q.length;\n  const max = Math.max(...q);\n  const sum = q.reduce((acc, cur) => acc + cur, 0);\n  if (sum < max) {\n    return false;\n  }\n  const weight = Math.ceil(Math.log(sum) / Math.log(max));\n  return weight <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const len = q.length;\n  const max = Math.max(...q);\n  const sum = q.reduce((acc, cur) => acc + cur, 0);\n  if (sum < max) {\n    return false;\n  }\n  const weight = Math.ceil(Math.log(sum) / Math.log(max));\n  return weight <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const len = q.length;\n  const max = Math.max(...q);\n  const sum = q.reduce((acc, cur) => acc + cur, 0);\n  if (sum < max) {\n    return false;\n  }\n  const weight = Math.ceil(Math.log(sum) / Math.log(max));\n  return weight <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const len = q.length;\n  const max = Math.max(...q);\n  const sum = q.reduce((acc, cur) => acc + cur, 0);\n  if (sum < max) {\n    return false;\n  }\n  const weight = Math.ceil(Math.log(sum) / Math.log(max));\n  return weight <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const len = q.length;\n  const max = Math.max(...q);\n  const sum = q.reduce((acc, cur) => acc + cur, 0);\n  if (sum < max) {\n    return false;\n  }\n  const weight = Math.ceil(Math.log(sum) / Math.log(max));\n  return weight <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallest_change;\n\n},{}],8:[function(require,module,exports){\n/*\n  Given an array of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 1\n  largestChange([1, 2, 3, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = largestChange;\n\n},{}],9:[function(require,module,exports){\n/*\n  Given an array of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallest_change([1, 2, 3, 2, 1]) == 1\n  smallest_change([1, 2, 3, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallest_change;\n\n},{}],10:[function(require,module,exports){\n/*\n  Given an array of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 1\n  largestChange([1, 2, 3, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = largestChange;\n\n},{}],11:[function(require,module,exports){\n/*\n  Given an array of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallest_change([1, 2, 3, 2, 1]) == 1\n  smallest_change([1, 2, 3, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallest_change;\n\n},{}],12:[function(require,module,exports){\n/*\n  Given an array of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 1\n  largestChange([1, 2, 3, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = largestChange;\n\n},{}],13:[function(require,module,exports){\n/*\n  Given an array of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallest_change([1, 2, 3, 2, 1]) == 1\n  smallest_change([1, 2, 3, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallest_change;\n\n},{}],14:[function(require,module,exports){\n/*\n  Given an array of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestChange([1, 2, 3, 2, 1]) == 1\n  largestChange([1, 2, 3, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = largestChange;\n\n},{}],15:[function(require,module,exports){\n/*\n  Given an array of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallest_change([1, 2, 3, 2, 1]) == 1\n  smallest_change([1, 2, 3, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallest_change;\n\n},{}],16:[function(require,module,exports){\n/*\n  Given an array of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  lar", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_not_match = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_equal = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_greater_or_equal = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] >= lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_less_or_equal = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] <= lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_equals = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_greater_or_equals = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] >= lst2[i]) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let i;\n  let j;\n  let k;\n  let l;\n  let prime;\n  let prime_sum;\n  let prime_sum2;\n  let prime_sum3;\n  let prime_sum4;\n  let prime_sum5;\n  let prime_sum6;\n  let prime_sum7;\n  let prime_sum8;\n  let prime_sum9;\n  let prime_sum10;\n  let prime_sum11;\n  let prime_sum12;\n  let prime_sum13;\n  let prime_sum14;\n  let prime_sum15;\n  let prime_sum16;\n  let prime_sum17;\n  let prime_sum18;\n  let prime_sum19;\n  let prime_sum20;\n  let prime_sum21;\n  let prime_sum22;\n  let prime_sum23;\n  let prime_sum24;\n  let prime_sum25;\n  let prime_sum26;\n  let prime_sum27;\n  let prime_sum28;\n  let prime_sum29;\n  let prime_sum30;\n  let prime_sum31;\n  let prime_sum32;\n  let prime_sum33;\n  let prime_sum34;\n  let prime_sum35;\n  let prime_sum36;\n  let prime_sum37;\n  let prime_sum38;\n  let prime_sum39;\n  let prime_sum40;\n  let prime_sum41;\n  let prime_sum42;\n  let prime_sum43;\n  let prime_sum44;\n  let prime_sum45;\n  let prime_sum46;\n  let prime_sum47;\n  let prime_sum48;\n  let prime_sum49;\n  let prime_sum50;\n  let prime_sum51;\n  let prime_sum52;\n  let prime_sum53;\n  let prime_sum54;\n  let prime_sum55;\n  let prime_sum56;\n  let prime_sum57;\n  let prime_sum58;\n  let prime_sum59;\n  let prime_sum60;\n  let prime_sum61;\n  let prime_sum62;\n  let prime_sum63;\n  let prime_sum64;\n  let prime_sum65;\n  let prime_sum66;\n  let prime_sum67;\n  let prime_sum68;\n  let prime_sum69;\n  let prime_sum70;\n  let prime_sum71;\n  let prime_sum72;\n  let prime_sum73;\n  let prime_sum74;\n  let prime_sum75;\n  let prime_sum76;\n  let prime_sum77;\n  let prime_sum78;\n  let prime_sum79;\n  let prime_sum80;\n  let prime_sum81;\n  let prime_sum82;\n  let prime_sum83;\n  let prime_sum84;\n  let prime_sum85;\n  let prime_sum86;\n  let prime_sum87;\n  let prime_sum88;\n  let prime_sum89;\n  let prime_sum90;\n  let prime_sum91;\n  let prime_sum92;\n  let prime_sum93;\n  let prime_sum94;\n  let prime_sum95;\n  let prime_sum96;\n  let prime_sum97;\n  let prime_sum98;\n  let prime_sum99;\n  let prime_sum100;\n  let prime_sum101;\n  let prime_sum102;\n  let prime_sum103;\n  let prime_sum104;\n  let prime_sum105;\n  let prime_sum106;\n  let prime_sum107;\n  let prime_sum108;\n  let prime_sum109;\n  let prime_sum110;\n  let prime_sum111;\n  let prime_sum112;\n  let prime_sum113;\n  let prime_sum114;\n  let prime_sum115;\n  let prime_sum116;\n  let prime_sum117;\n  let prime_sum118;\n  let prime_sum119;\n  let prime_sum120;\n  let prime_sum121;\n  let prime_sum122;\n  let prime_sum123;\n  let prime_sum124;\n  let prime_sum125;\n  let prime_sum126;\n  let prime_sum127;\n  let prime_sum128;\n  let prime_sum129;\n  let prime_sum130;\n  let prime_sum131;\n  let prime_sum132;\n  let prime_sum133;\n  let prime_sum134;\n  let prime_sum135;\n  let prime_sum136;\n  let prime_sum137;\n  let prime_sum138;\n  let prime_sum139;\n  let prime_sum140;\n  let prime_sum141;\n  let prime_sum142;\n  let prime_sum143;\n  let prime_sum144;\n  let prime_sum145;\n  let prime_sum146;\n  let prime_sum147;\n  let prime_sum148;\n  let prime_sum149;\n  let prime_sum150;\n  let prime_sum151;\n  let prime_sum152;\n  let prime_sum153;\n  let prime_sum154;\n  let prime_sum155;\n  let prime_sum156;\n  let prime_sum157;\n  let prime_sum158;\n  let prime_sum159;\n  let prime_sum160;\n  let prime_sum161;\n  let prime_sum162;\n  let prime_sum163;\n  let prime_sum164;\n  let prime_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (x === 0 || x === 1) return true;\n  if (n % x === 0) {\n    return false;\n  }\n  return is_simple_power(x, Math.floor(n / x));\n};\n\n/*Your task is to write a function that returns true if a number x is a prime\n  number in range [2, n] and false in other cases.\n  x is a prime number in range [2, n] if n**int=x\n  For example:\n  is_prime(1, 4) => true\n  is_prime(2, 2) => true\n  is_prime(8, 2) => true\n  is_prime(3, 2) => false\n  is_prime(3, 1) => false\n  is_prime(5, 3) => false\n  */\nconst is_prime = (x, n) => {\n  if (x === 0 || x === 1) return true;\n  if (n % x === 0) {\n    return false;\n  }\n  return is_prime(x, Math.floor(n / x));\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number in range [2, n] and false in other cases.\n  x is a prime number in range [2, n] if n**int=x\n  For example:\n  is_prime(1, 4) => true\n  is_prime(2, 2) => true\n  is_prime(8, 2) => true\n  is_prime(3, 2) => false\n  is_prime(3, 1) => false\n  is_prime(5, 3) => false\n  */\nconst is_prime_prime = (x, n) => {\n  if (x === 0 || x === 1) return true;\n  if (n % x === 0) {\n    return false;\n  }\n  return is_prime_prime(x, Math.floor(n / x));\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  perfect number in range [2, n] and false in other cases.\n  x is a perfect number in range [2, n] if n**int=x\n  For example:\n  is_perfect(1, 4) => true\n  is_perfect(2, 2) => true\n  is_perfect(8, 2) => true\n  is_perfect(3, 2) => false\n  is_perfect(3, 1) => false\n  is_perfect(5, 3) => false\n  */\nconst is_perfect = (x, n) => {\n  if (x === 0 || x === 1) return true;\n  if (n % x === 0) {\n    return false;\n  }\n  return is_perfect(x, Math.floor(n / x));\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  perfect number in range [2, n] and false in other cases.\n  x is a perfect number in range [2, n] if n**int=x\n  For example:\n  is_perfect(1, 4) => true\n  is_perfect(2, 2) => true\n  is_perfect(8, 2) => true\n  is_perfect(3, 2) => false\n  is_perfect(3, 1) => false\n  is_perfect(5, 3) => false\n  */\nconst is_perfect_prime = (x, n) => {\n  if (x === 0 || x === 1) return true;\n  if (n % x === 0) {\n    return false;\n  }\n  return is_perfect_prime(x, Math.floor(n / x));\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number in range [2, n] and false in other cases.\n  x is a prime number in range [2, n] if n**int=x\n  For example:\n  is_prime(1, 4) => true\n  is_prime(2, 2) => true\n  is_prime(8, 2) => true\n  is_prime(3, 2) => false\n  is_prime(3, 1) => false\n  is_prime(5, 3) => false\n  */\nconst is_prime_prime_prime = (x, n) => {\n  if (x === 0 || x === 1) return true;\n  if (n % x === 0) {\n    return false;\n  }\n  return is_prime_prime_prime(x, Math.floor(n / x));\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number in range [2, n] and false in other cases.\n  x is a prime number in range [2, n] if n**int=x\n  For example:\n  is_prime(1, 4) => true\n  is_prime(2, 2) => true\n  is_prime(8, 2) => true\n  is_prime(3, 2) => false\n  is_prime(3, 1) => false\n  is_prime(5, 3) => false\n  */\nconst is_prime_prime_prime_prime = (x, n) => {\n  if (x === 0 || x === 1) return true;\n  if (n % x === 0) {\n    return false;\n  }\n  return is_prime_prime_prime_prime(x, Math.floor(n / x));\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number in range [2, n] and false in other cases.\n  x is a prime number in range [2, n] if n**int=x\n  For example:\n  is_prime(1, 4) => true\n  is_prime(2, 2) => true\n  is_prime(8, 2) => true\n  is_prime(3, 2) => false\n  is_prime(3, 1) => false\n  is_prime(5, 3) => false\n  */\nconst is_prime_prime_prime_prime_prime = (x, n) => {\n  if (x === 0 || x === 1) return true;\n  if (n % x === 0) {\n    return false;\n  }\n  return is_prime_prime_prime_prime_prime(x, Math.floor(n / x));\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number in range [2, n] and false in other cases.\n  x is a prime number in range [2, n] if n**int=x\n  For example:\n  is_prime(1, 4) => true\n  is_prime(2, 2) => true\n  is_prime(8, 2) => true\n  is_prime(3, 2) => false\n  is_prime(3, 1) => false\n  is_prime(5, 3) => false\n  */\nconst is_prime_prime_prime_prime_prime_prime = (x, n) => {\n  if (x === 0 || x === 1) return true;\n  if (n % x === 0) {\n    return false;\n  }\n  return is_prime_prime_prime_prime_prime_prime(x, Math.floor(n / x));\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number in range [2, n] and false in other cases.\n  x is a prime number in range [2, n] if n**int=x\n  For example:\n  is_prime(1, 4) => true\n  is_prime(2, 2) => true\n  is_prime(8, 2) => true\n  is_prime(3, 2) => false\n  is_prime(3, 1) => false\n  is_prime(5, 3) => false\n  */\nconst is_prime_prime_prime_prime_prime_prime_prime = (x, n) => {\n  if (x === 0 || x === 1) return true;\n  if (n % x === 0) {\n    return false;\n  }\n  return is_prime_prime_prime_prime_prime_prime_prime(x, Math.floor(n / x));\n};\n\n/*Your task is to write a function that returns true if a number x is a\n  prime number in range [2, n] and false in other cases.\n  x is a prime number in range [2, n] if n**int=x\n  For example:\n  is_prime(1, 4) => true\n  is_prime(2, 2) => true\n  is_prime(8, 2) => true\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 1) {\n    return false;\n  }\n  if (a % 1!== 0 || a < 3) {\n    return false;\n  }\n  if (a % 2!== 0) {\n    return false;\n  }\n  if (a % 3!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a pentagon of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  ispentagon(1) ==> true\n  ispentagon(2) ==> false\n  ispentagon(3) ==> true\n  ispentagon(4) ==> false\n  ispentagon(5) ==> true\n  ispentagon(6) ==> false\n  ispentagon(7) ==> true\n  ispentagon(8) ==> false\n  ispentagon(9) ==> true\n  ispentagon(10) ==> false\n  */\nconst ispentagon = (a) => {\n  if (a < 1) {\n    return false;\n  }\n  if (a % 1!== 0 || a < 3) {\n    return false;\n  }\n  if (a % 2!== 0) {\n    return false;\n  }\n  if (a % 3!== 0) {\n    return false;\n  }\n  if (a % 4!== 0) {\n    return false;\n  }\n  if (a % 5!== 0) {\n    return false;\n  }\n  if (a % 6!== 0) {\n    return false;\n  }\n  if (a % 7!== 0) {\n    return false;\n  }\n  if (a % 8!== 0) {\n    return false;\n  }\n  if (a % 9!== 0) {\n    return false;\n  }\n  if (a % 10!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a hexagon of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  ishexagon(1) ==> true\n  ishexagon(2) ==> false\n  ishexagon(3) ==> true\n  ishexagon(4) ==> false\n  ishexagon(5) ==> true\n  ishexagon(6) ==> false\n  ishexagon(7) ==> true\n  ishexagon(8) ==> false\n  ishexagon(9) ==> true\n  ishexagon(10) ==> false\n  */\nconst ishexagon = (a) => {\n  if (a < 1) {\n    return false;\n  }\n  if (a % 1!== 0 || a < 3) {\n    return false;\n  }\n  if (a % 2!== 0) {\n    return false;\n  }\n  if (a % 3!== 0) {\n    return false;\n  }\n  if (a % 4!== 0) {\n    return false;\n  }\n  if (a % 5!== 0) {\n    return false;\n  }\n  if (a % 6!== 0) {\n    return false;\n  }\n  if (a % 7!== 0) {\n    return false;\n  }\n  if (a % 8!== 0) {\n    return false;\n  }\n  if (a % 9!== 0) {\n    return false;\n  }\n  if (a % 10!== 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a hexadecimal number with some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  ishexadecimal(2) ==> true\n  ishexadecimal(3) ==> false\n  ishexadecimal(4) ==> true\n  ishexadecimal(5) ==> false\n  ishexadecimal(6) ==> true\n  ishexadecimal(7) ==> false\n  ishexadecimal(8) ==> true\n  ishexadecimal(9) ==> false\n  ishexadecimal(10) ==> true\n  ishexadecimal(11) ==> false\n  ishexadecimal(12) ==> true\n  ishexadecimal(13) ==> false\n  ishexadecimal(14) ==> true\n  ishexadecimal(15) ==> false\n  ishexadecimal(16) ==> true\n  ishexadecimal(17) ==> false\n  ishexadecimal(18) ==> true\n  ishexadecimal(19) ==> false\n  ishexadecimal(20) ==> true\n  ishexadecimal(21) ==> false\n  ishexadecimal(22) ==> true\n  ishexadecimal(23) ==> false\n  ishexadecimal(24) ==> true\n  ishexadecimal(25) ==> false\n  ishexadecimal(26) ==> true\n  ishexadecimal(27) ==> false\n  ishexadecimal(28) ==> true\n  ishexadecimal(29) ==> false\n  ishexadecimal(30) ==> true\n  ishexadecimal(31) ==> false\n  ishexadecimal(32) ==> true\n  ishexadecimal(33) ==> false\n  ishexadecimal(34) ==> true\n  ishexadecimal(35) ==> false\n  ishexadecimal(36) ==> true\n  ishexadecimal(37) ==> false\n  ishexadecimal(38) ==> true\n  ishexadecimal(39) ==> false\n  ishexadecimal(40) ==> true\n  ishexadecimal(41) ==> false\n  ishexadecimal(42) ==> true\n  ishexadecimal(43) ==> false\n  ishexadecimal(44) ==> true\n  ishexadecimal(45) ==> false\n  ishexadecimal(46) ==> true\n  ishexadecimal(47) ==> false\n  ishexadecimal(48) ==> true\n  ishexadecimal(49) ==> false\n  ishexadecimal(50) ==> true\n  ishexadecimal(51) ==> false\n  ishexadecimal(52) ==> true\n  ishexadecimal(53) ==> false\n  ishexadecimal(54) ==> true\n  ishexadecimal(55) ==> false\n  ishexadecimal(56) ==> true\n  ishexadecimal(57) ==> false\n  ishexadecimal(58) ==> true\n  ishexadecimal(59) ==> false\n  ishexadecimal(60) ==> true\n  ishexadecimal(61) ==> false\n  ishexadecimal(62) ==> true\n  ishexadecimal(63) ==> false\n  ishexadecimal(64) ==> true\n  ishexadecimal(65) ==> false\n  ishexadecimal(66) ==> true\n  ishexadecimal(67) ==> false\n  ishexadecimal(68) ==> true\n  ishexadecimal(69) ==> false\n  ishexadecimal(70) ==> true\n  ishexadecimal(71) ==> false\n  ishexadecimal(72) ==> true\n  ishexadecimal(73) ==> false\n  ishexadecimal(74) ==> true\n  ishexadecimal(75) ==> false\n  ishexadecimal(76) ==> true\n  ishexadecimal(77", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let count = 0;\n  let numStr = \"\";\n  let numStr2 = \"\";\n  let numStr3 = \"\";\n  let numStr4 = \"\";\n  let numStr5 = \"\";\n  let numStr6 = \"\";\n  let numStr7 = \"\";\n  let numStr8 = \"\";\n  let numStr9 = \"\";\n  let numStrA = \"\";\n  let numStrB = \"\";\n  let numStrC = \"\";\n  let numStrD = \"\";\n  let numStrE = \"\";\n  let numStrF = \"\";\n  let numStrG = \"\";\n  let numStrH = \"\";\n  let numStrI = \"\";\n  let numStrJ = \"\";\n  let numStrK = \"\";\n  let numStrL = \"\";\n  let numStrM = \"\";\n  let numStrN = \"\";\n  let numStrO = \"\";\n  let numStrP = \"\";\n  let numStrQ = \"\";\n  let numStrR = \"\";\n  let numStrS = \"\";\n  let numStrT = \"\";\n  let numStrU = \"\";\n  let numStrV = \"\";\n  let numStrW = \"\";\n  let numStrX = \"\";\n  let numStrY = \"\";\n  let numStrZ = \"\";\n  let numStra = 0;\n  let numStrb = 0;\n  let numStrc = 0;\n  let numStrd = 0;\n  let numStre = 0;\n  let numStrf = 0;\n  let numStrg = 0;\n  let numStrh = 0;\n  let numStri = 0;\n  let numStrj = 0;\n  let numStrk = 0;\n  let numStrl = 0;\n  let numStrm = 0;\n  let numStrn = 0;\n  let numStro = 0;\n  let numStrp = 0;\n  let numStrq = 0;\n  let numStrr = 0;\n  let numStrs = 0;\n  let numStrt = 0;\n  let numStru = 0;\n  let numStrv = 0;\n  let numStrw = 0;\n  let numStrx = 0;\n  let numStry = 0;\n  let numStrz = 0;\n  let numStrA = 0;\n  let numStrB = 0;\n  let numStrC = 0;\n  let numStrD = 0;\n  let numStrE = 0;\n  let numStrF = 0;\n  let numStrG = 0;\n  let numStrH = 0;\n  let numStrI = 0;\n  let numStrJ = 0;\n  let numStrK = 0;\n  let numStrL = 0;\n  let numStrM = 0;\n  let numStrN = 0;\n  let numStrO = 0;\n  let numStrP = 0;\n  let numStrQ = 0;\n  let numStrR = 0;\n  let numStrS = 0;\n  let numStrT = 0;\n  let numStrU = 0;\n  let numStrV = 0;\n  let numStrW = 0;\n  let numStrX = 0;\n  let numStrY = 0;\n  let numStrZ = 0;\n  let numStra = 0;\n  let numStrb = 0;\n  let numStrc = 0;\n  let numStrd = 0;\n  let numStre = 0;\n  let numStrf = 0;\n  let numStrg = 0;\n  let numStrh = 0;\n  let numStri = 0;\n  let numStrj = 0;\n  let numStrk = 0;\n  let numStrl = 0;\n  let numStrm = 0;\n  let numStrn = 0;\n  let numStro = 0;\n  let numStrp = 0;\n  let numStrq = 0;\n  let numStrr = 0;\n  let numStrs = 0;\n  let numStrt = 0;\n  let numStru = 0;\n  let numStrv = 0;\n  let numStrw = 0;\n  let numStrx = 0;\n  let numStry = 0;\n  let numStrz = 0;\n  let numStrA = 0;\n  let numStrB = 0;\n  let numStrC = 0;\n  let numStrD = 0;\n  let numStrE = 0;\n  let numStrF = 0;\n  let numStrG = 0;\n  let numStrH = 0;\n  let numStrI = 0;\n  let numStrJ = 0;\n  let numStrK = 0;\n  let numStrL = 0;\n  let numStrM = 0;\n  let numStrN = 0;\n  let numStrO = 0;\n  let numStrP = 0;\n  let numStrQ = 0;\n  let numStrR = 0;\n  let numStrS = 0;\n  let numStrT = 0;\n  let numStrU = 0;\n  let numStrV = 0;\n  let numStrW = 0;\n  let numStrX = 0;\n  let numStrY = 0;\n  let numStrZ = 0;\n  let numStra = 0;\n  let numStrb = 0;\n  let numStrc = 0;\n  let numStrd = 0;\n  let numStre = 0;\n  let numStrf = 0;\n  let numStrg = 0;\n  let numStrh = 0;\n  let numStri = 0;\n  let numStrj = 0;\n  let numStrk = 0;\n  let numStrl = 0;\n  let numStrm = 0;\n  let numStrn = 0;\n  let numStro = 0;\n  let numStrp = 0;\n  let numStrq = 0;\n  let numStrr = 0;\n  let numStrs = 0;\n  let numStrt = 0;\n  let numStru = 0;\n  let numStrv = 0;\n  let numStrw = 0;\n  let numStrx = 0;\n  let numStry = 0;\n  let numStrz = 0;\n  let numStrA = 0;\n  let numStrB = 0;\n  let numStrC = 0;\n  let numStrD = 0;\n  let numStrE = 0;\n  let numStrF = 0;\n  let numStrG = 0;\n  let numStrH = 0;\n  let numStrI = 0;\n  let numStrJ = 0;\n  let numStrK = 0;\n  let numStrL = 0;\n  let numStrM = 0;\n  let numStrN = 0;\n  let numStrO = 0;\n  let numStrP = 0;\n  let numStrQ = 0;\n  let numStrR = 0;\n  let numStrS = 0;\n  let numStrT = 0;\n  let numStrU = 0;\n  let numStrV = 0;\n  let numStrW = 0;\n  let numStrX = 0;\n  let numStrY = 0;\n  let numStrZ = 0;\n  let numStra = 0;\n  let numStrb = 0;\n  let numStrc = 0;\n  let numStrd = 0;\n  let numStre = 0;\n  let numStrf = 0;\n  let numStrg = 0;\n  let numStrh = 0;\n  let numStri = 0;\n  let numStrj = 0;\n  let numStrk = 0;\n  let numStrl = 0;\n  let numStrm = 0;\n  let numStrn = 0;\n  let numStro = 0;\n  let numStrp = 0;\n  let numStrq = 0;\n  let numStrr = 0;\n  let numStrs = 0;\n  let numStrt = 0;\n  let numStru = 0;\n  let numStrv = 0;\n  let numStrw = 0;\n  let numStrx = 0;\n  let numStry = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  let decimalLength = decimalString.length;\n  let decimalArray = decimalString.split('');\n  for (let i = 0; i < decimalLength; i++) {\n    binary += decimalArray[i].toBinary();\n  }\n  return binary;\n};\n\n/*\n  Given a string, convert it to a binary number in decimal form.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")  # returns 15\n  binary_to_decimal(\"db100000db\")  # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryArray[i].toString(2);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number in decimal form.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")  # returns 15\n  binary_to_decimal(\"db100000db\")  # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryArray[i].toString(2);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number in decimal form.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")  # returns 15\n  binary_to_decimal(\"db100000db\")  # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryArray[i].toString(2);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number in decimal form.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")  # returns 15\n  binary_to_decimal(\"db100000db\")  # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryArray[i].toString(2);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number in decimal form.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")  # returns 15\n  binary_to_decimal(\"db100000db\")  # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryArray[i].toString(2);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number in decimal form.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")  # returns 15\n  binary_to_decimal(\"db100000db\")  # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryArray[i].toString(2);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number in decimal form.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")  # returns 15\n  binary_to_decimal(\"db100000db\")  # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryArray[i].toString(2);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number in decimal form.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")  # returns 15\n  binary_to_decimal(\"db100000db\")  # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryArray[i].toString(2);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number in decimal form.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")  # returns 15\n  binary_to_decimal(\"db100000db\")  # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryArray[i].toString(2);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number in decimal form.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")  # returns 15\n  binary_to_decimal(\"db100000db\")  # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryArray[i].toString(2);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number in decimal form.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")  # returns 15\n  binary_to_decimal(\"db100000db\")  # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryArray[i].toString(2);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number in decimal form.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")  # returns 15\n  binary_to_decimal(\"db100000db\")  # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryArray[i].toString(2);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert it to a binary number in decimal form.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")  # returns 15\n  binary_to_decimal(\"db100000db\")  # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  let binaryLength = binaryString.length;\n  let binaryArray = binaryString.split('');\n  for (let i = 0; i < binaryLength; i++) {\n    decimal += binaryArray[i].toString(2);\n  }\n  return decimal;\n};\n\n/*\n  Given a string, convert ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return { sum, product };\n};\n\n/* Given a list of integers, return a list of integers whose sum is equal to the given integer.\n  >>> sum_range([0, 1, 2, 3, 4])\n  [0, 2, 4, 6, 8]\n  */\nconst sum_range = (numbers, int) => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > int) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose product is equal to the given integer.\n  >>> product_range([0, 1, 2, 3, 4])\n  [0, 24, 120, 720, 5040]\n  */\nconst product_range = (numbers, int) => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose sum is equal to the given integer.\n  >>> sum_range([0, 1, 2, 3, 4], 2)\n  [0, 2, 4, 6, 8]\n  */\nconst sum_range_2 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > int) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose product is equal to the given integer.\n  >>> product_range([0, 1, 2, 3, 4], 2)\n  [0, 24, 120, 720, 5040]\n  */\nconst product_range_2 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose sum is equal to the given integer.\n  >>> sum_range([0, 1, 2, 3, 4], 2)\n  [0, 2, 4, 6, 8]\n  */\nconst sum_range_3 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose product is equal to the given integer.\n  >>> product_range([0, 1, 2, 3, 4], 2)\n  [0, 24, 120, 720, 5040]\n  */\nconst product_range_3 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose sum is equal to the given integer.\n  >>> sum_range([0, 1, 2, 3, 4], 2)\n  [0, 2, 4, 6, 8]\n  */\nconst sum_range_4 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose product is equal to the given integer.\n  >>> product_range([0, 1, 2, 3, 4], 2)\n  [0, 24, 120, 720, 5040]\n  */\nconst product_range_4 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose sum is equal to the given integer.\n  >>> sum_range([0, 1, 2, 3, 4], 2)\n  [0, 2, 4, 6, 8]\n  */\nconst sum_range_5 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose product is equal to the given integer.\n  >>> product_range([0, 1, 2, 3, 4], 2)\n  [0, 24, 120, 720, 5040]\n  */\nconst product_range_5 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose sum is equal to the given integer.\n  >>> sum_range([0, 1, 2, 3, 4], 2)\n  [0, 2, 4, 6, 8]\n  */\nconst sum_range_6 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose product is equal to the given integer.\n  >>> product_range([0, 1, 2, 3, 4], 2)\n  [0, 24, 120, 720, 5040]\n  */\nconst product_range_6 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose sum is equal to the given integer.\n  >>> sum_range([0, 1, 2, 3, 4], 2)\n  [0, 2, 4, 6, 8]\n  */\nconst sum_range_7 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose product is equal to the given integer.\n  >>> product_range([0, 1, 2, 3, 4], 2)\n  [0, 24, 120, 720, 5040]\n  */\nconst product_range_7 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose sum is equal to the given integer.\n  >>> sum_range([0, 1, 2, 3, 4], 2)\n  [0, 2, 4, 6, 8]\n  */\nconst sum_range_8 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose product is equal to the given integer.\n  >>> product_range([0, 1, 2, 3, 4], 2)\n  [0, 24, 120, 720, 5040]\n  */\nconst product_range_8 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose sum is equal to the given integer.\n  >>> sum_range([0, 1, 2, 3, 4], 2)\n  [0, 2, 4, 6, 8]\n  */\nconst sum_range_9 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose product is equal to the given integer.\n  >>> product_range([0, 1, 2, 3, 4], 2)\n  [0, 24, 120, 720, 5040]\n  */\nconst product_range_9 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] * int === 0) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* Given a list of integers, return a list of integers whose sum is equal to the given integer.\n  >>> sum_range([0, 1, 2, 3, 4], 2)\n  [0, 2, 4, 6, 8]\n  */\nconst sum_range_10 = numbers, int => {\n  let result = [];\n  for (let i = 0; i < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  let is_happy = true;\n  let is_consec = [];\n  let is_consec_arr = [];\n  let is_consec_arr2 = [];\n  let is_consec_arr3 = [];\n  let is_consec_arr4 = [];\n  let is_consec_arr5 = [];\n  let is_consec_arr6 = [];\n  let is_consec_arr7 = [];\n  let is_consec_arr8 = [];\n  let is_consec_arr9 = [];\n  let is_consec_arr10 = [];\n  let is_consec_arr11 = [];\n  let is_consec_arr12 = [];\n  let is_consec_arr13 = [];\n  let is_consec_arr14 = [];\n  let is_consec_arr15 = [];\n  let is_consec_arr16 = [];\n  let is_consec_arr17 = [];\n  let is_consec_arr18 = [];\n  let is_consec_arr19 = [];\n  let is_consec_arr20 = [];\n  let is_consec_arr21 = [];\n  let is_consec_arr22 = [];\n  let is_consec_arr23 = [];\n  let is_consec_arr24 = [];\n  let is_consec_arr25 = [];\n  let is_consec_arr26 = [];\n  let is_consec_arr27 = [];\n  let is_consec_arr28 = [];\n  let is_consec_arr29 = [];\n  let is_consec_arr30 = [];\n  let is_consec_arr31 = [];\n  let is_consec_arr32 = [];\n  let is_consec_arr33 = [];\n  let is_consec_arr34 = [];\n  let is_consec_arr35 = [];\n  let is_consec_arr36 = [];\n  let is_consec_arr37 = [];\n  let is_consec_arr38 = [];\n  let is_consec_arr39 = [];\n  let is_consec_arr40 = [];\n  let is_consec_arr41 = [];\n  let is_consec_arr42 = [];\n  let is_consec_arr43 = [];\n  let is_consec_arr44 = [];\n  let is_consec_arr45 = [];\n  let is_consec_arr46 = [];\n  let is_consec_arr47 = [];\n  let is_consec_arr48 = [];\n  let is_consec_arr49 = [];\n  let is_consec_arr50 = [];\n  let is_consec_arr51 = [];\n  let is_consec_arr52 = [];\n  let is_consec_arr53 = [];\n  let is_consec_arr54 = [];\n  let is_consec_arr55 = [];\n  let is_consec_arr56 = [];\n  let is_consec_arr57 = [];\n  let is_consec_arr58 = [];\n  let is_consec_arr59 = [];\n  let is_consec_arr60 = [];\n  let is_consec_arr61 = [];\n  let is_consec_arr62 = [];\n  let is_consec_arr63 = [];\n  let is_consec_arr64 = [];\n  let is_consec_arr65 = [];\n  let is_consec_arr66 = [];\n  let is_consec_arr67 = [];\n  let is_consec_arr68 = [];\n  let is_consec_arr69 = [];\n  let is_consec_arr70 = [];\n  let is_consec_arr71 = [];\n  let is_consec_arr72 = [];\n  let is_consec_arr73 = [];\n  let is_consec_arr74 = [];\n  let is_consec_arr75 = [];\n  let is_consec_arr76 = [];\n  let is_consec_arr77 = [];\n  let is_consec_arr78 = [];\n  let is_consec_arr79 = [];\n  let is_consec_arr80 = [];\n  let is_consec_arr81 = [];\n  let is_consec_arr82 = [];\n  let is_consec_arr83 = [];\n  let is_consec_arr84 = [];\n  let is_consec_arr85 = [];\n  let is_consec_arr86 = [];\n  let is_consec_arr87 = [];\n  let is_consec_arr88 = [];\n  let is_consec_arr89 = [];\n  let is_consec_arr90 = [];\n  let is_consec_arr91 = [];\n  let is_consec_arr92 = [];\n  let is_consec_arr93 = [];\n  let is_consec_arr94 = [];\n  let is_consec_arr95 = [];\n  let is_consec_arr96 = [];\n  let is_consec_arr97 = [];\n  let is_consec_arr98 = [];\n  let is_consec_arr99 = [];\n  let is_consec_arr100 = [];\n  let is_consec_arr101 = [];\n  let is_consec_arr102 = [];\n  let is_consec_arr103 = [];\n  let is_consec_arr104 = [];\n  let is_consec_arr105 = [];\n  let is_consec_arr106 = [];\n  let is_consec_arr107 = [];\n  let is_consec_arr108 = [];\n  let is_consec_arr109 = [];\n  let is_consec_arr110 = [];\n  let is_consec_arr111 = [];\n  let is_consec_arr112 = [];\n  let is_consec_arr113 = [];\n  let is_consec_arr114 = [];\n  let is_consec_arr115 = [];\n  let is_consec_arr116 = [];\n  let is_consec_arr117 = [];\n  let is_consec_arr118 = [];\n  let is_consec_arr119 = [];\n  let is_consec_arr120 = [];\n  let is_consec_arr121 = [];\n  let is_consec_arr122 = [];\n  let is_consec_arr123 = [];\n  let is_consec_arr124 = [];\n  let is_consec_arr125 = [];\n  let is_consec_arr126 = [];\n  let is_consec_arr127 = [];\n  let is_consec_arr128 = [];\n  let is_consec_arr129 = [];\n  let is_consec_arr130 = [];\n  let is_consec_arr131 = [];\n  let is_consec_arr132 = [];\n  let is_consec_arr133 = [];\n  let is_consec_arr134 = [];\n  let is_consec_arr135 = [];\n  let is_consec_arr136 = [];\n  let is_consec_arr137 = [];\n  let is_consec_arr138 = [];\n  let is_consec_arr139 = [];\n  let is_consec_arr140 = [];\n  let is_consec_arr141 = [];\n  let is_consec_arr142 = [];\n  let is_consec_arr143 = [];\n  let is_consec_arr144 = [];\n  let is_consec_arr145 = [];\n  let is_consec_arr146 = [];\n  let is_consec_arr147 = [];\n  let is_consec_arr148 = [];\n  let is_consec_arr149 = [];\n  let is_consec_arr150 = [];\n  let is_consec_arr151 = [];\n  let is_consec_arr152 = [];\n  let is_consec_arr153 = [];\n  let is_consec_arr154 = [];\n  let is_consec_arr155 = [];\n  let is_consec_arr156 = [];\n  let is_consec_arr157 = [];\n  let is_consec_arr158 = [];\n  let is_consec_arr159 = [];\n  let is_consec_arr160 = [];\n  let is_consec_arr161 = [];\n  let is_consec_arr162 = [];\n  let is_consec_arr163 = [];\n  let is_consec_arr164 = [];\n  let is_consec_arr165 = [];\n  let is_consec_arr166 = [];\n  let is_consec_arr167 = [];\n  let is_consec_arr168 = [];\n  let is_consec_arr169 = [];\n  let is_consec_arr170 = [];\n  let is_consec_arr171 = [];\n  let is_consec_arr172 = [];\n  let is_con", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const grades_sorted = grades.sort((a, b) => a - b);\n  const letter_grades = grades_sorted.map((grade, index) => {\n    if (grade === 0) {\n      return '';\n    }\n    if (index === grades_sorted.length - 1) {\n      return grades_sorted[index + 1];\n    }\n    return grades_sorted[index + 1] + grades_sorted[index];\n  });\n  return letter_grades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const grades_sorted = grades.sort((a, b) => a - b);\n  const letter_grades = grades_sorted.map((grade, index) => {\n    if (grade === 0) {\n      return '';\n    }\n    if (index === grades_sorted.length - 1) {\n      return grades_sorted[index + 1];\n    }\n    return grades_sorted[index + 1] + grades_sorted[index];\n  });\n  return letter_grades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const grades_sorted = grades.sort((a, b) => a - b);\n  const letter_grades = grades_sorted.map((grade, index) => {\n    if (grade === 0) {\n      return '';\n    }\n    if (index === grades_sorted.length - 1) {\n      return grades_sorted[index + 1];\n    }\n    return grades_sorted[index + 1] + grades_sorted[index];\n  });\n  return letter_grades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const grades_sorted = grades.sort((a, b) => a - b);\n  const letter_grades = grades_sorted.map((grade, index) => {\n    if (grade === 0) {\n      return '';\n    }\n    if (index === grades_sorted.length - 1) {\n      return grades_sorted[index + 1];\n    }\n    return grades_sorted[index + 1] + grades_sorted[index];\n  });\n  return letter_grades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const grades_sorted = grades.sort((a, b) => a - b);\n  const letter_grades = grades_sorted.map((grade, index) => {\n    if (grade === 0) {\n      return '';\n    }\n    if (index === grades_sorted.length - 1) {\n      return grades_sorted[index + 1];\n    }\n    return grades_sorted[index + 1] + grades_sorted[index];\n  });\n  return letter_grades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  let prime = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (string.charAt(i) === string.charAt(length - i)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('Hello') == true\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space2 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space3 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space4 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space5 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space6 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space7 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space8 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space9 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space10 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space11 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space12 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space13 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space14 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space15 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true\n  is_palindrome('kittens') === false\n  */\nconst is_palindrome_with_space16 = (string) => {\n  let reversed = string.reverse();\n  return reversed === string;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  is_palindrome('kittens') == true", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -1.\n  */\nconst starts_negative_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst starts_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst ends_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -1.\n  */\nconst ends_negative_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst ends_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst starts_negative_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst ends_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst starts_negative_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst ends_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst starts_negative_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst ends_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst starts_negative_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst ends_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst starts_negative_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst ends_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst starts_negative_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst ends_negative_starts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with -2.\n  */\nconst starts_negative_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += i;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    binary = binary + binary(i).toString(2);\n  }\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(binary(i));\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    decimal = decimal + decimal(i).toString(10);\n  }\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(decimal(i));\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    hexadecimal = hexadecimal + hexadecimal(i).toString(16);\n  }\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(hexadecimal(i));\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    octal = octal + octal(i).toString(8);\n  }\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(octal(i));\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    hexadecimal = hexadecimal + hexadecimal(i).toString(16);\n  }\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(hexadecimal(i));\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    octal = octal + octal(i).toString(8);\n  }\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(octal(i));\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    hexadecimal = hexadecimal + hexadecimal(i).toString(16);\n  }\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(hexadecimal(i));\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  \n  for(let i = 0; i <= N; i++){\n    decimal = decimal + decimal(i).toString(10);\n  }\n  \n  for(let i = 0; i <= N; i++){\n    sum = sum + parseInt(decimal(i));\n  }\n  \n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res += lst[i];\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let res = lst;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res = res.filter(item => item!== lst[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let res = lst;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res = res.filter(item => item!== lst[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst removeOdd = (lst, index) => {\n  let res = lst;\n  for (let i = index; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      res = res.filter(item => item!== lst[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst removeOddEven = (lst) => {\n  let res = lst;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      res = res.filter(item => item!== lst[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst, index) => {\n  let res = lst;\n  for (let i = index; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      res = res.filter(item => item!== lst[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst removeOddEvenEven = (lst) => {\n  let res = lst;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      res = res.filter(item => item!== lst[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOdd = (lst, index) => {\n  let res = lst;\n  for (let i = index; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      res = res.filter(item => item!== lst[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2]\n  */\nconst removeOddEvenEvenEvenOdd = (lst, index) => {\n  let res = lst;\n  for (let i = index; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      res = res.filter(item => item!== lst[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenEvenEvenEvenOddEven = (lst) => {\n  let res = lst;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      res = res.filter(item => item!== lst[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenEvenEvenEvenEvenEvenOdd = (lst, index) => {\n  let res = lst;\n  for (let i = index; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      res = res.filter(item => item!== lst[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenEvenEvenEvenEvenEvenOddEvenEven = (lst) => {\n  let res = lst;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      res = res.filter(item => item!== lst[i]);\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  let new_s = s.replace(/\\s+/g,'').split(' ');\n  let new_s_arr = [];\n  for (let i = 0; i < new_s.length; i++) {\n    let new_s_char = new_s[i].charCodeAt(0);\n    let new_s_index = new_s_char - 97;\n    new_s_arr.push(new_s_index);\n  }\n  return new_s_arr.sort().join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces = (s) => {\n  let new_s = s.replace(/\\s+/g,'').split(' ');\n  let new_s_arr = [];\n  for (let i = 0; i < new_s.length; i++) {\n    let new_s_char = new_s[i].charCodeAt(0);\n    let new_s_index = new_s_char - 97;\n    new_s_arr.push(new_s_index);\n  }\n  return new_s_arr.sort().join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces_reversed = (s) => {\n  let new_s = s.replace(/\\s+/g,'').split(' ');\n  let new_s_arr = [];\n  for (let i = 0; i < new_s.length; i++) {\n    let new_s_char = new_s[i].charCodeAt(0);\n    let new_s_index = new_s_char - 97;\n    new_s_arr.push(new_s_index);\n  }\n  return new_s_arr.sort().join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces_reversed_with_spaces = (s) => {\n  let new_s = s.replace(/\\s+/g,'').split(' ');\n  let new_s_arr = [];\n  for (let i = 0; i < new_s.length; i++) {\n    let new_s_char = new_s[i].charCodeAt(0);\n    let new_s_index = new_s_char - 97;\n    new_s_arr.push(new_s_index);\n  }\n  return new_s_arr.sort().join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces_reversed_with_spaces_reversed = (s) => {\n  let new_s = s.replace(/\\s+/g,'').split(' ');\n  let new_s_arr = [];\n  for (let i = 0; i < new_s.length; i++) {\n    let new_s_char = new_s[i].charCodeAt(0);\n    let new_s_index = new_s_char - 97;\n    new_s_arr.push(new_s_index);\n  }\n  return new_s_arr.sort().join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces_reversed_with_spaces_reversed_with_spaces = (s) => {\n  let new_s = s.replace(/\\s+/g,'').split(' ');\n  let new_s_arr = [];\n  for (let i = 0; i < new_s.length; i++) {\n    let new_s_char = new_s[i].charCodeAt(0);\n    let new_s_index = new_s_char - 97;\n    new_s_arr.push(new_s_index);\n  }\n  return new_s_arr.sort().join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed = (s) => {\n  let new_s = s.replace(/\\s+/g,'').split(' ');\n  let new_s_arr = [];\n  for (let i = 0; i < new_s.length; i++) {\n    let new_s_char = new_s[i].charCodeAt(0);\n    let new_s_index = new_s_char - 97;\n    new_s_arr.push(new_s_index);\n  }\n  return new_s_arr.sort().join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_with_spaces_reversed_with_spaces_reversed_with_spaces_reversed_with_spaces = (s) => {\n  let new_s = s.replace(/\\s+/g,'').split(' ');\n  let new_s_arr = [];\n  for (let i = 0; i < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const row = []\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let row_index = 0\n  let col_index = 0\n  while (i < lst.length) {\n    if (lst[i][0] === x) {\n      row.push(lst[i])\n      row_index++\n      i++\n    } else {\n      row.push(lst[i])\n      row_index++\n      i++\n    }\n  }\n  while (j < lst.length) {\n    if (lst[j][0] === x) {\n      row.push(lst[j])\n      row_index++\n      j++\n    } else {\n      row.push(lst[j])\n      row_index++\n      j++\n    }\n  }\n  while (k < lst.length) {\n    if (lst[k][0] === x) {\n      row.push(lst[k])\n      row_index++\n      k++\n    } else {\n      row.push(lst[k])\n      row_index++\n      k++\n    }\n  }\n  rows.unshift(row)\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n  row_index++\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  const sorted = array.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n * Given an array of non-negative integers, return an array that contains the sum of the first index value and the last index value.\n\n  Example:\n  * sum_array([]) => []\n  * sum_array([5]) => [5]\n  * sum_array([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30]\n  * sum_array([2, 4, 3, 0, 1, 5, 6]) => [5, 10, 15, 20, 25, 30, 15, 6]\n  */\nconst sum_array = (array) => {\n  const sums = array.map((num) => num + 1);\n  return sums;\n};\n\n/**\n * Given an array of non-negative integers, return an array that contains the sum of the first index value and the last index value.\n\n  Example:\n  * sum_array_with_zero([]) => []\n  * sum_array_with_zero([5]) => [5]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5, 6]) => [5, 10, 15, 20, 25, 30, 15, 6]\n  */\nconst sum_array_with_zero = (array) => {\n  const sums = array.map((num) => num + 0);\n  return sums;\n};\n\n/**\n * Given an array of non-negative integers, return an array that contains the sum of the first index value and the last index value.\n\n  Example:\n  * sum_array_with_zero([]) => []\n  * sum_array_with_zero([5]) => [5]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5, 6]) => [5, 10, 15, 20, 25, 30, 15, 6]\n  */\nconst sum_array_with_zero = (array) => {\n  const sums = array.map((num) => num + 0);\n  return sums;\n};\n\n/**\n * Given an array of non-negative integers, return an array that contains the sum of the first index value and the last index value.\n\n  Example:\n  * sum_array_with_zero([]) => []\n  * sum_array_with_zero([5]) => [5]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5, 6]) => [5, 10, 15, 20, 25, 30, 15, 6]\n  */\nconst sum_array_with_zero = (array) => {\n  const sums = array.map((num) => num + 0);\n  return sums;\n};\n\n/**\n * Given an array of non-negative integers, return an array that contains the sum of the first index value and the last index value.\n\n  Example:\n  * sum_array_with_zero([]) => []\n  * sum_array_with_zero([5]) => [5]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5, 6]) => [5, 10, 15, 20, 25, 30, 15, 6]\n  */\nconst sum_array_with_zero = (array) => {\n  const sums = array.map((num) => num + 0);\n  return sums;\n};\n\n/**\n * Given an array of non-negative integers, return an array that contains the sum of the first index value and the last index value.\n\n  Example:\n  * sum_array_with_zero([]) => []\n  * sum_array_with_zero([5]) => [5]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5, 6]) => [5, 10, 15, 20, 25, 30, 15, 6]\n  */\nconst sum_array_with_zero = (array) => {\n  const sums = array.map((num) => num + 0);\n  return sums;\n};\n\n/**\n * Given an array of non-negative integers, return an array that contains the sum of the first index value and the last index value.\n\n  Example:\n  * sum_array_with_zero([]) => []\n  * sum_array_with_zero([5]) => [5]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5, 6]) => [5, 10, 15, 20, 25, 30, 15, 6]\n  */\nconst sum_array_with_zero = (array) => {\n  const sums = array.map((num) => num + 0);\n  return sums;\n};\n\n/**\n * Given an array of non-negative integers, return an array that contains the sum of the first index value and the last index value.\n\n  Example:\n  * sum_array_with_zero([]) => []\n  * sum_array_with_zero([5]) => [5]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5, 6]) => [5, 10, 15, 20, 25, 30, 15, 6]\n  */\nconst sum_array_with_zero = (array) => {\n  const sums = array.map((num) => num + 0);\n  return sums;\n};\n\n/**\n * Given an array of non-negative integers, return an array that contains the sum of the first index value and the last index value.\n\n  Example:\n  * sum_array_with_zero([]) => []\n  * sum_array_with_zero([5]) => [5]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5, 6]) => [5, 10, 15, 20, 25, 30, 15, 6]\n  */\nconst sum_array_with_zero = (array) => {\n  const sums = array.map((num) => num + 0);\n  return sums;\n};\n\n/**\n * Given an array of non-negative integers, return an array that contains the sum of the first index value and the last index value.\n\n  Example:\n  * sum_array_with_zero([]) => []\n  * sum_array_with_zero([5]) => [5]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5, 6]) => [5, 10, 15, 20, 25, 30, 15, 6]\n  */\nconst sum_array_with_zero = (array) => {\n  const sums = array.map((num) => num + 0);\n  return sums;\n};\n\n/**\n * Given an array of non-negative integers, return an array that contains the sum of the first index value and the last index value.\n\n  Example:\n  * sum_array_with_zero([]) => []\n  * sum_array_with_zero([5]) => [5]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5, 6]) => [5, 10, 15, 20, 25, 30, 15, 6]\n  */\nconst sum_array_with_zero = (array) => {\n  const sums = array.map((num) => num + 0);\n  return sums;\n};\n\n/**\n * Given an array of non-negative integers, return an array that contains the sum of the first index value and the last index value.\n\n  Example:\n  * sum_array_with_zero([]) => []\n  * sum_array_with_zero([5]) => [5]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5]) => [5, 10, 15, 20, 25, 30]\n  * sum_array_with_zero([2, 4, 3, 0, 1, 5, 6]) => [5, 10, 15, 20, 25, 30, 15, 6]\n  */\nconst sum_array_with_zero = (array) => {\n  const sums = array.map((num) => num + 0);\n  return sums;\n};\n\n/**\n * Given an array of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let c;\n  let d;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const rollingMax = numbers.reduce((acc, curr, index) => {\n    if (curr > acc) {\n      return acc;\n    }\n    return curr;\n  }, 0);\n  return [...Array(rollingMax).keys()].map(i => numbers[i]);\n};\n\n/* Given a string, generate a list of all possible permutations of that string.\n  >>> permutation('abc')\n  [['abc'], ['acb'], ['abc'], ['acb'], ['abc'], ['acb']]\n  */\nconst permutation = (str) => {\n  const permutations = str.split('').map(i => [...i].map(j => [...j]));\n  return permutations.reduce((acc, curr, index) => {\n    if (curr[0] === curr[1]) {\n      return acc.concat(curr.slice(1));\n    }\n    return acc.concat(curr.slice(1));\n  }, []);\n};\n\n/* Given a string, generate a list of all possible permutations of that string with repetition.\n  >>> permutation_repetition('abc')\n  [['abc'], ['acb'], ['abc'], ['acb'], ['abc'], ['acb'], ['abc'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['acb'], ['", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  let min;\n  let max = lst[0];\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr < max) {\n      max = curr;\n    }\n    if (curr > min) {\n      min = curr;\n    }\n    curr = lst[i];\n  }\n  return min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_largest() that returns the 1st largest element of the list.\n  Return null if there is no such element.\n  \n  next_largest([1, 2, 3, 4, 5]) == 3\n  next_largest([5, 1, 4, 3, 2]) == 3\n  next_larst([]) == null\n  next_larst([1, 1]) == null\n  */\nconst next_largest = (lst) => {\n  let min;\n  let max = lst[0];\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr > max) {\n      max = curr;\n    }\n    if (curr < min) {\n      min = curr;\n    }\n    curr = lst[i];\n  }\n  return max;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_random() that returns a random element of the list.\n  Return null if there is no such element.\n  \n  next_random([1, 2, 3, 4, 5]) == 3\n  next_random([5, 1, 4, 3, 2]) == 3\n  next_random([]) == null\n  next_random([1, 1]) == null\n  */\nconst next_random = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr < max) {\n      max = curr;\n    }\n    if (curr > min) {\n      min = curr;\n    }\n    curr = lst[i];\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_even() that returns the even element of the list.\n  Return null if there is no such element.\n  \n  next_even([1, 2, 3, 4, 5]) == 3\n  next_even([5, 1, 4, 3, 2]) == 3\n  next_even([]) == null\n  next_even([1, 1]) == null\n  */\nconst next_even = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2 === 0) {\n      max = curr;\n    }\n    if (curr < min) {\n      min = curr;\n    }\n    curr = lst[i];\n  }\n  return min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_odd() that returns the odd element of the list.\n  Return null if there is no such element.\n  \n  next_odd([1, 2, 3, 4, 5]) == 3\n  next_odd([5, 1, 4, 3, 2]) == 3\n  next_odd([]) == null\n  next_odd([1, 1]) == null\n  */\nconst next_odd = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2!== 0) {\n      min = curr;\n    }\n    if (curr > max) {\n      max = curr;\n    }\n    curr = lst[i];\n  }\n  return max;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_even() that returns the even element of the list.\n  Return null if there is no such element.\n  \n  next_even([1, 2, 3, 4, 5]) == 3\n  next_even([5, 1, 4, 3, 2]) == 3\n  next_even([]) == null\n  next_even([1, 1]) == null\n  */\nconst next_even = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2 === 0) {\n      max = curr;\n    }\n    if (curr < min) {\n      min = curr;\n    }\n    curr = lst[i];\n  }\n  return min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_odd() that returns the odd element of the list.\n  Return null if there is no such element.\n  \n  next_odd([1, 2, 3, 4, 5]) == 3\n  next_odd([5, 1, 4, 3, 2]) == 3\n  next_odd([]) == null\n  next_odd([1, 1]) == null\n  */\nconst next_odd = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2!== 0) {\n      min = curr;\n    }\n    if (curr > max) {\n      max = curr;\n    }\n    curr = lst[i];\n  }\n  return max;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_even() that returns the even element of the list.\n  Return null if there is no such element.\n  \n  next_even([1, 2, 3, 4, 5]) == 3\n  next_even([5, 1, 4, 3, 2]) == 3\n  next_even([]) == null\n  next_even([1, 1]) == null\n  */\nconst next_even = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2 === 0) {\n      max = curr;\n    }\n    if (curr < min) {\n      min = curr;\n    }\n    curr = lst[i];\n  }\n  return min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_odd() that returns the odd element of the list.\n  Return null if there is no such element.\n  \n  next_odd([1, 2, 3, 4, 5]) == 3\n  next_odd([5, 1, 4, 3, 2]) == 3\n  next_odd([]) == null\n  next_odd([1, 1]) == null\n  */\nconst next_odd = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2!== 0) {\n      min = curr;\n    }\n    if (curr > max) {\n      max = curr;\n    }\n    curr = lst[i];\n  }\n  return max;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_even() that returns the even element of the list.\n  Return null if there is no such element.\n  \n  next_even([1, 2, 3, 4, 5]) == 3\n  next_even([5, 1, 4, 3, 2]) == 3\n  next_even([]) == null\n  next_even([1, 1]) == null\n  */\nconst next_even = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (curr % 2 === 0) {\n      max = curr;\n    }\n    if (curr < min) {\n      min = curr;\n    }\n    curr = lst[i];\n  }\n  return min;\n};\n\n/*\n  You are given a list of integers.\n  Write a function next_even() that returns the even element of the list.\n  Return null if there is no such element.\n  \n  next_even([1, 2, 3, 4, 5]) == 3\n  next_even([5, 1, 4, 3, 2]) == 3\n  next_even([]) == null\n  next_even([1, 1]) == null\n  */\nconst next_even = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  let curr = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let bored = 0;\n  S.split('.').forEach(word => {\n    if (word === 'I') {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of angers. A anger is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_anger(\"Hello world\")\n  0\n  >>> is_anger(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_anger = (S) => {\n  let anger = 0;\n  S.split('.').forEach(word => {\n    if (word === 'I') {\n      anger++;\n    }\n  });\n  return anger;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of surprises. A surprise is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_surprise(\"Hello world\")\n  0\n  >>> is_surprise(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_surprise = (S) => {\n  let surprise = 0;\n  S.split('.').forEach(word => {\n    if (word === 'I') {\n      surprise++;\n    }\n  });\n  return surprise;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fears. A fear is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  let fear = 0;\n  S.split('.').forEach(word => {\n    if (word === 'I') {\n      fear++;\n    }\n  });\n  return fear;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An anger is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  let disgust = 0;\n  S.split('.').forEach(word => {\n    if (word === 'I') {\n      disgust++;\n    }\n  });\n  return disgust;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of surprises. A surprise is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_surprise(\"Hello world\")\n  0\n  >>> is_surprise(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_surprise = (S) => {\n  let surprise = 0;\n  S.split('.').forEach(word => {\n    if (word === 'I') {\n      surprise++;\n    }\n  });\n  return surprise;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fears. A fear is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  let fear = 0;\n  S.split('.').forEach(word => {\n    if (word === 'I') {\n      fear++;\n    }\n  });\n  return fear;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An anger is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  let disgust = 0;\n  S.split('.').forEach(word => {\n    if (word === 'I') {\n      disgust++;\n    }\n  });\n  return disgust;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of surprises. A surprise is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_surprise(\"Hello world\")\n  0\n  >>> is_surprise(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_surprise = (S) => {\n  let surprise = 0;\n  S.split('.').forEach(word => {\n    if (word === 'I') {\n      surprise++;\n    }\n  });\n  return surprise;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fears. A fear is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  let fear = 0;\n  S.split('.').forEach(word => {\n    if (word === 'I') {\n      fear++;\n    }\n  });\n  return fear;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An anger is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  let disgust = 0;\n  S.split('.').forEach(word ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  return x === y && y === z || Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_float = (x, y, z) => {\n  return x === y && y === z || Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_float(5, 2, 7) ➞ true\n  any_float(3, 2, 2) ➞ false\n  any_float(3, -2, 1) ➞ true\n  any_float(3.6, -2.2, 2) ➞ false\n  */\nconst any_bool = (x, y, z) => {\n  return x === y && y === z || Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_bool(5, 2, 7) ➞ true\n  any_bool(3, 2, 2) ➞ false\n  any_bool(3, -2, 1) ➞ true\n  any_bool(3.6, -2.2, 2) ➞ false\n  */\nconst any_string = (x, y, z) => {\n  return x === y && y === z || Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_string(5, 2, 7) ➞ true\n  any_string(3, 2, 2) ➞ false\n  any_string(3, -2, 1) ➞ true\n  any_string(3.6, -2.2, 2) ➞ false\n  */\nconst any_array = (x, y, z) => {\n  return x === y && y === z || Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_array(5, 2, 7) ➞ true\n  any_array(3, 2, 2) ➞ false\n  any_array(3, -2, 1) ➞ true\n  any_array(3.6, -2.2, 2) ➞ false\n  */\nconst any_object = (x, y, z) => {\n  return x === y && y === z || Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_object(5, 2, 7) ➞ true\n  any_object(3, 2, 2) ➞ false\n  any_object(3, -2, 1) ➞ true\n  any_object(3.6, -2.2, 2) ➞ false\n  */\nconst any_symbol = (x, y, z) => {\n  return x === y && y === z || Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_symbol(5, 2, 7) ➞ true\n  any_symbol(3, 2, 2) ➞ false\n  any_symbol(3, -2, 1) ➞ true\n  any_symbol(3.6, -2.2, 2) ➞ false\n  */\nconst any_number = (x, y, z) => {\n  return x === y && y === z || Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_number(5, 2, 7) ➞ true\n  any_number(3, 2, 2) ➞ false\n  any_number(3, -2, 1) ➞ true\n  any_number(3.6, -2.2, 2) ➞ false\n  */\nconst any_symbol = (x, y, z) => {\n  return x === y && y === z || Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_symbol(5, 2, 7) ➞ true\n  any_symbol(3, 2, 2) ➞ false\n  any_symbol(3, -2, 1) ➞ true\n  any_symbol(3.6, -2.2, 2) ➞ false\n  */\nconst any_number = (x, y, z) => {\n  return x === y && y === z || Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_number(5, 2, 7) ➞ true\n  any_number(3, 2, 2) ➞ false\n  any_number(3, -2, 1) ➞ true\n  any_number(3.6, -2.2, 2) ➞ false\n  */\nconst any_symbol = (x, y, z) => {\n  return x === y && y === z || Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_symbol(5, 2, 7) ➞ true\n  any_symbol(3, 2, 2) ➞ false\n  any_symbol(3, -2, 1) ➞ true\n  any_symbol(3.6, -2.2, 2) ➞ false\n  */\nconst any_number = (x, y, z) => {\n  return x === y && y === z || Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_symbol(5, 2, 7) ➞ true\n  any_symbol(3, 2, 2) ➞ false\n  any_symbol(3, -2, 1) ➞ true\n  any_symbol(3.6, -2.2, 2) ➞ false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelsIndex = 0;\n  let alphabetIndex = 0;\n  let vowelsIndex2 = 0;\n  let alphabetIndex2 = 0;\n  let vowelsIndex3 = 0;\n  let alphabetIndex3 = 0;\n  let vowelsIndex4 = 0;\n  let alphabetIndex4 = 0;\n  let vowelsIndex5 = 0;\n  let alphabetIndex5 = 0;\n  let vowelsIndex6 = 0;\n  let alphabetIndex6 = 0;\n  let vowelsIndex7 = 0;\n  let alphabetIndex7 = 0;\n  let vowelsIndex8 = 0;\n  let alphabetIndex8 = 0;\n  let vowelsIndex9 = 0;\n  let alphabetIndex9 = 0;\n  let vowelsIndex10 = 0;\n  let alphabetIndex10 = 0;\n  let vowelsIndex11 = 0;\n  let alphabetIndex11 = 0;\n  let vowelsIndex12 = 0;\n  let alphabetIndex12 = 0;\n  let vowelsIndex13 = 0;\n  let alphabetIndex13 = 0;\n  let vowelsIndex14 = 0;\n  let alphabetIndex14 = 0;\n  let vowelsIndex15 = 0;\n  let alphabetIndex15 = 0;\n  let vowelsIndex16 = 0;\n  let alphabetIndex16 = 0;\n  let vowelsIndex17 = 0;\n  let alphabetIndex17 = 0;\n  let vowelsIndex18 = 0;\n  let alphabetIndex18 = 0;\n  let vowelsIndex19 = 0;\n  let alphabetIndex19 = 0;\n  let vowelsIndex20 = 0;\n  let alphabetIndex20 = 0;\n  let vowelsIndex21 = 0;\n  let alphabetIndex21 = 0;\n  let vowelsIndex22 = 0;\n  let alphabetIndex22 = 0;\n  let vowelsIndex23 = 0;\n  let alphabetIndex23 = 0;\n  let vowelsIndex24 = 0;\n  let alphabetIndex24 = 0;\n  let vowelsIndex25 = 0;\n  let alphabetIndex25 = 0;\n  let vowelsIndex26 = 0;\n  let alphabetIndex26 = 0;\n  let vowelsIndex27 = 0;\n  let alphabetIndex27 = 0;\n  let vowelsIndex28 = 0;\n  let alphabetIndex28 = 0;\n  let vowelsIndex29 = 0;\n  let alphabetIndex29 = 0;\n  let vowelsIndex30 = 0;\n  let alphabetIndex30 = 0;\n  let vowelsIndex31 = 0;\n  let alphabetIndex31 = 0;\n  let vowelsIndex32 = 0;\n  let alphabetIndex32 = 0;\n  let vowelsIndex33 = 0;\n  let alphabetIndex33 = 0;\n  let vowelsIndex34 = 0;\n  let alphabetIndex34 = 0;\n  let vowelsIndex35 = 0;\n  let alphabetIndex35 = 0;\n  let vowelsIndex36 = 0;\n  let alphabetIndex36 = 0;\n  let vowelsIndex37 = 0;\n  let alphabetIndex37 = 0;\n  let vowelsIndex38 = 0;\n  let alphabetIndex38 = 0;\n  let vowelsIndex39 = 0;\n  let alphabetIndex39 = 0;\n  let vowelsIndex40 = 0;\n  let alphabetIndex40 = 0;\n  let vowelsIndex41 = 0;\n  let alphabetIndex41 = 0;\n  let vowelsIndex42 = 0;\n  let alphabetIndex42 = 0;\n  let vowelsIndex43 = 0;\n  let alphabetIndex43 = 0;\n  let vowelsIndex44 = 0;\n  let alphabetIndex44 = 0;\n  let vowelsIndex45 = 0;\n  let alphabetIndex45 = 0;\n  let vowelsIndex46 = 0;\n  let alphabetIndex46 = 0;\n  let vowelsIndex47 = 0;\n  let alphabetIndex47 = 0;\n  let vowelsIndex48 = 0;\n  let alphabetIndex48 = 0;\n  let vowelsIndex49 = 0;\n  let alphabetIndex49 = 0;\n  let vowelsIndex50 = 0;\n  let alphabetIndex50 = 0;\n  let vowelsIndex51 = 0;\n  let alphabetIndex51 = 0;\n  let vowelsIndex52 = 0;\n  let alphabetIndex52 = 0;\n  let vowelsIndex53 = 0;\n  let alphabetIndex53 = 0;\n  let vowelsIndex54 = 0;\n  let alphabetIndex54 = 0;\n  let vowelsIndex55 = 0;\n  let alphabetIndex55 = 0;\n  let vowelsIndex56 = 0;\n  let alphabetIndex56 = 0;\n  let vowelsIndex57 = 0;\n  let alphabetIndex57 = 0;\n  let vowelsIndex58 = 0;\n  let alphabetIndex58 = 0;\n  let vowelsIndex59 = 0;\n  let alphabetIndex59 = 0;\n  let vowelsIndex60 = 0;\n  let alphabetIndex60 = 0;\n  let vowelsIndex61 = 0;\n  let alphabetIndex61 = 0;\n  let vowelsIndex62 = 0;\n  let alphabetIndex62 = 0;\n  let vowelsIndex63 = 0;\n  let alphabetIndex63 = 0;\n  let vowelsIndex64 = 0;\n  let alphabetIndex64 = 0;\n  let vowelsIndex65 = 0;\n  let alphabetIndex65 = 0;\n  let vowelsIndex66 = 0;\n  let alphabetIndex66 = 0;\n  let vowelsIndex67 = 0;\n  let alphabetIndex67 = 0;\n  let vowelsIndex68 = 0;\n  let alphabetIndex68 = 0;\n  let vowelsIndex69 = 0;\n  let alphabetIndex69 = 0;\n  let vowelsIndex70 = 0;\n  let alphabetIndex70 = 0;\n  let vowelsIndex71 = 0;\n  let alphabetIndex71 = 0;\n  let vowelsIndex72 = 0;\n  let alphabetIndex72 = 0;\n  let vowelsIndex73 = 0;\n  let alphabetIndex73 = 0;\n  let vowelsIndex74 = 0;\n  let alphabetIndex74 = 0;\n  let vowelsIndex75 = 0;\n  let alphabetIndex75 = 0;\n  let vowelsIndex76 = 0;\n  let alphabetIndex76 = 0;\n  let vowelsIndex77 = 0;\n  let alphabetIndex77 = 0;\n  let vowelsIndex78 = 0;\n  let alphabetIndex78 = 0;\n  let vowelsIndex79 = 0;\n  let alphabetIndex79 = 0;\n  let vowelsIndex80 = 0;\n  let alphabetIndex80 = 0;\n  let vowelsIndex81 = 0;\n  let alphabetIndex81 = 0;\n  let vowelsIndex82 = 0;\n  let alphabetIndex82 = 0;\n  let vowelsIndex83 = 0;\n  let alphabetIndex83 = 0;\n  let vowelsIndex84 = 0;\n  let alphabetIndex84 = 0;\n  let vowelsIndex85 = 0;\n  let alphabetIndex85 = 0;\n  let vowelsIndex86 = 0;\n  let alphabetIndex86 = 0;\n  let vowelsIndex87 = 0;\n  let alphabetIndex87 = 0;\n  let vowelsIndex88 = 0;\n  let alphabetIndex88 = 0;\n  let vowelsIndex89 = 0;\n  let alphabetIndex89 = 0;\n  let vowelsIndex90 = 0;\n  let alphabetIndex90 = 0;\n  let vowelsIndex91 = 0;\n  let alphabetIndex91 = 0;\n  let vowelsIndex92 = 0;\n  let alphabetIndex92 = 0;\n  let vowelsIndex93 = 0;\n  let alphabetIndex93 = 0;\n  let vowelsIndex94 = 0;\n  let alphabetIndex94 = 0;\n  let vowelsIndex95 = 0;\n  let alphabetIndex95 = 0;\n  let vowelsIndex96 = 0;\n  let alphabetIndex96 = 0;\n  let vowelsIndex97 = 0;\n  let alphabetIndex97 = 0;\n  let vowelsIndex98 = 0;\n  let alphabetIndex98 = 0;\n  let vowelsIndex99 = 0;\n  let alphabetIndex99 = 0;\n  let vowelsIndex100 = 0;\n  let alphabetIndex100 = 0;\n  let vowelsIndex101 = 0;\n  let alphabetIndex101 = 0;\n  let vowelsIndex102 = 0;\n  let alphabetIndex102 = 0;\n  let vowelsIndex103 = 0;\n  let alphabetIndex103 = 0;\n  let vowelsIndex104 = 0;\n  let alphabetIndex104 = 0;\n  let vowelsIndex105 = 0;\n  let alphabetIndex105 = 0;\n  let vowelsIndex106 = 0;\n  let alphabetIndex106 = 0;\n  let vowelsIndex107 = 0;\n  let alphabetIndex107 = 0;\n  let vowelsIndex108 = 0;\n  let alphabetIndex108 = 0;\n  let vowelsIndex109 = 0;\n  let alphabetIndex109 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let count = 0;\n  let flag = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] === max) {\n      count++;\n    }\n    if (lst[i] % 2 === 0) {\n      flag = 1;\n    }\n    if (flag === 0) {\n      sum++;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let count = 0;\n  let flag = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] === max) {\n      count++;\n    }\n    if (lst[i] % 2 === 0) {\n      flag = 1;\n    }\n    if (flag === 0) {\n      sum++;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let count = 0;\n  let flag = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] === max) {\n      count++;\n    }\n    if (lst[i] % 2 === 0) {\n      flag = 1;\n    }\n    if (flag === 0) {\n      sum++;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let count = 0;\n  let flag = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] === max) {\n      count++;\n    }\n    if (lst[i] % 2 === 0) {\n      flag = 1;\n    }\n    if (flag === 0) {\n      sum++;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let count = 0;\n  let flag = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] === max) {\n      count++;\n    }\n    if (lst[i] % 2 === 0) {\n      flag = 1;\n    }\n    if (flag === 0) {\n      sum++;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let count = 0;\n  let flag = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] === max) {\n      count++;\n    }\n    if (lst[i] % 2 === 0) {\n      flag = 1;\n    }\n    if (flag === 0) {\n      sum++;\n    }\n  }\n  return sum;\n};\n\n/*\n  You are given a list of integ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    if (typeof(key) === \"string\") {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a string, return true if all characters are lowercase or all \n  characters are uppercase, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  check_string_case(\"a\") should return true.\n  check_string_case(\"A\") should return false.\n  check_string_case(\"b\") should return false.\n  check_string_case(\"bB\") should return false.\n  check_string_case(\"bBb\") should return false.\n  check_string_case(\"bBbB\") should return false.\n  check_string_case(\"bBbBb\") should return false.\n  check_string_case(\"bBbBbB\") should return false.\n  check_string_case(\"bBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"bBbBbBbBbBbBbBbBbBb\") should return false.\n  check_string_case(\"b", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19];\n  let primesCount = 0;\n  let primesCount2 = 0;\n  let primesCount3 = 0;\n  let primesCount4 = 0;\n  let primesCount5 = 0;\n  let primesCount6 = 0;\n  let primesCount7 = 0;\n  let primesCount8 = 0;\n  let primesCount9 = 0;\n  let primesCount10 = 0;\n  let primesCount11 = 0;\n  let primesCount12 = 0;\n  let primesCount13 = 0;\n  let primesCount14 = 0;\n  let primesCount15 = 0;\n  let primesCount16 = 0;\n  let primesCount17 = 0;\n  let primesCount18 = 0;\n  let primesCount19 = 0;\n  let primesCount20 = 0;\n  let primesCount21 = 0;\n  let primesCount22 = 0;\n  let primesCount23 = 0;\n  let primesCount24 = 0;\n  let primesCount25 = 0;\n  let primesCount26 = 0;\n  let primesCount27 = 0;\n  let primesCount28 = 0;\n  let primesCount29 = 0;\n  let primesCount30 = 0;\n  let primesCount31 = 0;\n  let primesCount32 = 0;\n  let primesCount33 = 0;\n  let primesCount34 = 0;\n  let primesCount35 = 0;\n  let primesCount36 = 0;\n  let primesCount37 = 0;\n  let primesCount38 = 0;\n  let primesCount39 = 0;\n  let primesCount40 = 0;\n  let primesCount41 = 0;\n  let primesCount42 = 0;\n  let primesCount43 = 0;\n  let primesCount44 = 0;\n  let primesCount45 = 0;\n  let primesCount46 = 0;\n  let primesCount47 = 0;\n  let primesCount48 = 0;\n  let primesCount49 = 0;\n  let primesCount50 = 0;\n  let primesCount51 = 0;\n  let primesCount52 = 0;\n  let primesCount53 = 0;\n  let primesCount54 = 0;\n  let primesCount55 = 0;\n  let primesCount56 = 0;\n  let primesCount57 = 0;\n  let primesCount58 = 0;\n  let primesCount59 = 0;\n  let primesCount60 = 0;\n  let primesCount61 = 0;\n  let primesCount62 = 0;\n  let primesCount63 = 0;\n  let primesCount64 = 0;\n  let primesCount65 = 0;\n  let primesCount66 = 0;\n  let primesCount67 = 0;\n  let primesCount68 = 0;\n  let primesCount69 = 0;\n  let primesCount70 = 0;\n  let primesCount71 = 0;\n  let primesCount72 = 0;\n  let primesCount73 = 0;\n  let primesCount74 = 0;\n  let primesCount75 = 0;\n  let primesCount76 = 0;\n  let primesCount77 = 0;\n  let primesCount78 = 0;\n  let primesCount79 = 0;\n  let primesCount80 = 0;\n  let primesCount81 = 0;\n  let primesCount82 = 0;\n  let primesCount83 = 0;\n  let primesCount84 = 0;\n  let primesCount85 = 0;\n  let primesCount86 = 0;\n  let primesCount87 = 0;\n  let primesCount88 = 0;\n  let primesCount89 = 0;\n  let primesCount90 = 0;\n  let primesCount91 = 0;\n  let primesCount92 = 0;\n  let primesCount93 = 0;\n  let primesCount94 = 0;\n  let primesCount95 = 0;\n  let primesCount96 = 0;\n  let primesCount97 = 0;\n  let primesCount98 = 0;\n  let primesCount99 = 0;\n  let primesCount100 = 0;\n  let primesCount101 = 0;\n  let primesCount102 = 0;\n  let primesCount103 = 0;\n  let primesCount104 = 0;\n  let primesCount105 = 0;\n  let primesCount106 = 0;\n  let primesCount107 = 0;\n  let primesCount108 = 0;\n  let primesCount109 = 0;\n  let primesCount110 = 0;\n  let primesCount111 = 0;\n  let primesCount112 = 0;\n  let primesCount113 = 0;\n  let primesCount114 = 0;\n  let primesCount115 = 0;\n  let primesCount116 = 0;\n  let primesCount117 = 0;\n  let primesCount118 = 0;\n  let primesCount119 = 0;\n  let primesCount120 = 0;\n  let primesCount121 = 0;\n  let primesCount122 = 0;\n  let primesCount123 = 0;\n  let primesCount124 = 0;\n  let primesCount125 = 0;\n  let primesCount126 = 0;\n  let primesCount127 = 0;\n  let primesCount128 = 0;\n  let primesCount129 = 0;\n  let primesCount130 = 0;\n  let primesCount131 = 0;\n  let primesCount132 = 0;\n  let primesCount133 = 0;\n  let primesCount134 = 0;\n  let primesCount135 = 0;\n  let primesCount136 = 0;\n  let primesCount137 = 0;\n  let primesCount138 = 0;\n  let primesCount139 = 0;\n  let primesCount140 = 0;\n  let primesCount141 = 0;\n  let primesCount142 = 0;\n  let primesCount143 = 0;\n  let primesCount144 = 0;\n  let primesCount145 = 0;\n  let primesCount146 = 0;\n  let primesCount147 = 0;\n  let primesCount148 = 0;\n  let primesCount149 = 0;\n  let primesCount150 = 0;\n  let primesCount151 = 0;\n  let primesCount152 = 0;\n  let primesCount153 = 0;\n  let primesCount154 = 0;\n  let primesCount155 = 0;\n  let primesCount156 = 0;\n  let primesCount157 = 0;\n  let primesCount158 = 0;\n  let primesCount159 = 0;\n  let primesCount160 = 0;\n  let primesCount161 = 0;\n  let primesCount162 = 0;\n  let primesCount163 = 0;\n  let primesCount164 = 0;\n  let primesCount165 = 0;\n  let primesCount166 = 0;\n  let primesCount167 = 0;\n  let primesCount168 = 0;\n  let primesCount169 = 0;\n  let primesCount170 = 0;\n  let primesCount171 = 0;\n  let primesCount172 = 0;\n  let primesCount173 = 0;\n  let primesCount174 = 0;\n  let primesCount175 = 0;\n  let primesCount176 = 0;\n  let primesCount177 = 0;\n  let primesCount178 = 0;\n  let primesCount179 = 0;\n  let primesCount180 = 0;\n  let primesCount181 = 0;\n  let primesCount182 = 0;\n  let primesCount183 = 0;\n  let primesCount184 = 0;\n  let primesCount185 = 0;\n  let primesCount186 = 0;\n  let primesCount187 = 0;\n  let primesCount188 = 0;\n  let primesCount189 = 0;\n  let primesCount190 = 0;\n  let primesCount191 = 0;\n  let primesCount192 = 0;\n  let primesCount193 = 0;\n  let primesCount194 = 0;\n  let primesCount195 = 0;\n  let primesCount196 = 0;\n  let primesCount197 = 0;\n  let primesCount198 = 0;\n  let primesCount199 = 0;\n  let primesCount200 = 0;\n  let primesCount201 = 0;\n  let primesCount202 = 0;\n  let primesCount20", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  while (b) {\n    product = product * b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 164.\n  sum(19, 28) should return 72.\n  sum(2020, 1851) should return 0.\n  sum(14,-15) should return 20.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  while (b) {\n    sum = sum + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return -7.\n  difference(2020, 1851) should return 0.\n  difference(14,-15) should return 20.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  while (b) {\n    difference = difference + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return difference;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 14.\n  abs(19, 28) should return 7.\n  abs(2020, 1851) should return 0.\n  abs(14,-15) should return 20.\n  */\nconst abs = (a) => {\n  let abs = 0;\n  while (a) {\n    abs = abs + a;\n    a = Math.floor(a / 10);\n  }\n  return abs;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148, 412) should return 1.4142135623730951.\n  sqrt(19, 28) should return 1.4142135623730951.\n  sqrt(2020, 1851) should return 0.\n  sqrt(14,-15) should return 20.\n  */\nconst sqrt = (a) => {\n  let sqrt = 0;\n  while (a) {\n    sqrt = sqrt + a;\n    a = Math.floor(a / 10);\n  }\n  return sqrt;\n};\n\n/*Complete the function that takes two integers and returns \n  the inverse of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 148.\n  inverse(19, 28) should return 28.\n  inverse(2020, 1851) should return 0.\n  inverse(14,-15) should return 20.\n  */\nconst inverse = (a) => {\n  let inverse = 0;\n  while (a) {\n    inverse = inverse + a;\n    a = Math.floor(a / 10);\n  }\n  return inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the factorial of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  factorial(148, 412) should return 720.\n  factorial(19, 28) should return 720.\n  factorial(2020, 1851) should return 0.\n  factorial(14,-15) should return 20.\n  */\nconst factorial = (a) => {\n  let factorial = 1;\n  while (a) {\n    factorial = factorial * a;\n    a = Math.floor(a / 10);\n  }\n  return factorial;\n};\n\n/*Complete the function that takes two integers and returns \n  the factorial of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  factorial2(148, 412) should return 720.\n  factorial2(19, 28) should return 720.\n  factorial2(2020, 1851) should return 0.\n  factorial2(14,-15) should return 20.\n  */\nconst factorial2 = (a, b) => {\n  let factorial = 1;\n  while (b) {\n    factorial = factorial * b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return factorial;\n};\n\n/*Complete the function that takes two integers and returns \n  the factorial of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  factorial3(148, 412) should return 720.\n  factorial3(19, 28) should return 720.\n  factorial3(2020, 1851) should return 0.\n  factorial3(14,-15) should return 20.\n  */\nconst factorial3 = (a, b) => {\n  let factorial = 1;\n  while (b) {\n    factorial = factorial * b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return factorial;\n};\n\n/*Complete the function that takes two integers and returns \n  the factorial of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  factorial4(148, 412) should return 720.\n  factorial4(19, 28) should return 720.\n  factorial4(2020, 1851) should return 0.\n  factorial4(14,-15) should return 20.\n  */\nconst factorial4 = (a, b) => {\n  let factorial = 1;\n  while (b) {\n    factorial = factorial * b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return factorial;\n};\n\n/*Complete the function that takes two integers and returns \n  the factorial of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  factorial5(148, 412) should return 720.\n  factorial5(19, 28) should return 720.\n  factorial5(2020, 1851) should return 0.\n  factorial5(14,-15) should return 20.\n  */\nconst factorial5 = (a, b) => {\n  let factorial = 1;\n  while (b) {\n    factorial = factorial * b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return factorial;\n};\n\n/*Complete the function that takes two integers and returns \n  the factorial of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  factorial6(148, 412) should return 720.\n  factorial6(19, 28) should return 720.\n  factorial6(2020, 1851) should return 0.\n  factorial6(14,-15) should return 20.\n  */\nconst factorial6 = (a, b) => {\n  let factorial = 1;\n  while (b) {\n    factorial = factorial * b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return factorial;\n};\n\n/*Complete the function that takes two integers and returns \n  the factorial of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  factorial7(148, 412) should return 720.\n  factorial7(19, 28) should return 720.\n  factorial7(2020, 1851) should return 0.\n  factorial7(14,-15) should return 20.\n  */\nconst factorial7 = (a, b) => {\n  let factorial = 1;\n  while (b) {\n    factorial = factori", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  while ((i < s.length) && (j < s.length)) {\n    if (vowels.includes(s.charAt(i))) {\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 0\n  */\nconst count_lower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  while ((i < s.length) && (j < s.length)) {\n    if (vowels.includes(s.charAt(i))) {\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  count_vowels('aBCdEf') returns 1\n  count_vowels('abcdefg') returns 0\n  count_vowels('dBBE') returns 0\n  */\nconst count_vowels = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  while ((i < s.length) && (j < s.length)) {\n    if (vowels.includes(s.charAt(i))) {\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of unique characters in s.\n  \n  For example:\n  count_chars('aBCdEf') returns 3\n  count_chars('abcdefg') returns 3\n  count_chars('dBBE') returns 3\n  */\nconst count_chars = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  while ((i < s.length) && (j < s.length)) {\n    if (vowels.includes(s.charAt(i))) {\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of unique words in s.\n  \n  For example:\n  count_words('aBCdEf') returns 3\n  count_words('abcdefg') returns 3\n  count_words('dBBE') returns 3\n  */\nconst count_words = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  while ((i < s.length) && (j < s.length)) {\n    if (vowels.includes(s.charAt(i))) {\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of unique characters in s.\n  \n  For example:\n  count_chars('aBCdEf') returns 3\n  count_chars('abcdefg') returns 3\n  count_chars('dBBE') returns 3\n  */\nconst count_chars = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  while ((i < s.length) && (j < s.length)) {\n    if (vowels.includes(s.charAt(i))) {\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of unique words in s.\n  \n  For example:\n  count_words('aBCdEf') returns 3\n  count_words('abcdefg') returns 3\n  count_words('dBBE') returns 3\n  */\nconst count_words = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  while ((i < s.length) && (j < s.length)) {\n    if (vowels.includes(s.charAt(i))) {\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of unique characters in s.\n  \n  For example:\n  count_chars('aBCdEf') returns 3\n  count_chars('abcdefg') returns 3\n  count_chars('dBBE') returns 3\n  */\nconst count_chars = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  while ((i < s.length) && (j < s.length)) {\n    if (vowels.includes(s.charAt(i))) {\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of unique words in s.\n  \n  For example:\n  count_words('aBCdEf') returns 3\n  count_words('abcdefg') returns 3\n  count_words('dBBE') returns 3\n  */\nconst count_words = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  while ((i < s.length) && (j < s.length)) {\n    if (vowels.includes(s.charAt(i))) {\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of unique characters in s.\n  \n  For example:\n  count_chars('aBCdEf') returns 3\n  count_chars('abcdefg') returns 3\n  count_chars('dBBE') returns 3\n  */\nconst count_chars = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  while ((i < s.length) && (j < s.length)) {\n    if (vowels.includes(s.charAt(i))) {\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of unique words in s.\n  \n  For example:\n  count_words('aBCdEf') returns 3\n  count_words('abcdefg') returns 3\n  count_words('dBBE') returns 3\n  */\nconst count_words = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  while ((i < s.length) && (j < s.length)) {\n    if (vowels.includes(s.charAt(i))) {\n      count++;\n    }\n    i++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of unique characters in s.\n  \n  For example:\n  count_chars('aBCdEf') returns 3\n  count_chars('abcdefg') returns 3\n  count_chars('dBBE') returns 3\n  */\nconst count_chars = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  while ((i < s.length) && (j < s.length)) {\n    if (vowels.includes(s.charAt(i))) {\n      count++;\n    }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer2, fraction2] = integer.split(\".\");\n  const [integer3, fraction3] = fraction.split(\".\");\n  const [integer4, fraction4] = fraction2.split(\".\");\n  const [integer5, fraction5] = fraction3.split(\".\");\n  const [integer6, fraction6] = fraction4.split(\".\");\n  const [integer7, fraction7] = fraction5.split(\".\");\n  const [integer8, fraction8] = fraction6.split(\".\");\n  const [integer9, fraction9] = fraction7.split(\".\");\n  const [integer10, fraction10] = fraction8.split(\".\");\n  const [integer11, fraction11] = fraction9.split(\".\");\n  const [integer12, fraction12] = fraction10.split(\".\");\n  const [integer13, fraction13] = fraction11.split(\".\");\n  const [integer14, fraction14] = fraction12.split(\".\");\n  const [integer15, fraction15] = fraction13.split(\".\");\n  const [integer16, fraction16] = fraction14.split(\".\");\n  const [integer17, fraction17] = fraction15.split(\".\");\n  const [integer18, fraction18] = fraction16.split(\".\");\n  const [integer19, fraction19] = fraction17.split(\".\");\n  const [integer20, fraction20] = fraction18.split(\".\");\n  const [integer21, fraction21] = fraction19.split(\".\");\n  const [integer22, fraction22] = fraction20.split(\".\");\n  const [integer23, fraction23] = fraction21.split(\".\");\n  const [integer24, fraction24] = fraction22.split(\".\");\n  const [integer25, fraction25] = fraction23.split(\".\");\n  const [integer26, fraction26] = fraction24.split(\".\");\n  const [integer27, fraction27] = fraction25.split(\".\");\n  const [integer28, fraction28] = fraction26.split(\".\");\n  const [integer29, fraction29] = fraction27.split(\".\");\n  const [integer30, fraction30] = fraction28.split(\".\");\n  const [integer31, fraction31] = fraction29.split(\".\");\n  const [integer32, fraction32] = fraction30.split(\".\");\n  const [integer33, fraction33] = fraction31.split(\".\");\n  const [integer34, fraction34] = fraction32.split(\".\");\n  const [integer35, fraction35] = fraction33.split(\".\");\n  const [integer36, fraction36] = fraction34.split(\".\");\n  const [integer37, fraction37] = fraction35.split(\".\");\n  const [integer38, fraction38] = fraction36.split(\".\");\n  const [integer39, fraction39] = fraction37.split(\".\");\n  const [integer40, fraction40] = fraction38.split(\".\");\n  const [integer41, fraction41] = fraction39.split(\".\");\n  const [integer42, fraction42] = fraction40.split(\".\");\n  const [integer43, fraction43] = fraction41.split(\".\");\n  const [integer44, fraction44] = fraction42.split(\".\");\n  const [integer45, fraction45] = fraction43.split(\".\");\n  const [integer46, fraction46] = fraction44.split(\".\");\n  const [integer47, fraction47] = fraction45.split(\".\");\n  const [integer48, fraction48] = fraction46.split(\".\");\n  const [integer49, fraction49] = fraction47.split(\".\");\n  const [integer50, fraction50] = fraction48.split(\".\");\n  const [integer51, fraction51] = fraction49.split(\".\");\n  const [integer52, fraction52] = fraction50.split(\".\");\n  const [integer53, fraction53] = fraction51.split(\".\");\n  const [integer54, fraction54] = fraction52.split(\".\");\n  const [integer55, fraction55] = fraction53.split(\".\");\n  const [integer56, fraction56] = fraction54.split(\".\");\n  const [integer57, fraction57] = fraction55.split(\".\");\n  const [integer58, fraction58] = fraction56.split(\".\");\n  const [integer59, fraction59] = fraction57.split(\".\");\n  const [integer60, fraction60] = fraction58.split(\".\");\n  const [integer61, fraction61] = fraction59.split(\".\");\n  const [integer62, fraction62] = fraction60.split(\".\");\n  const [integer63, fraction63] = fraction61.split(\".\");\n  const [integer64, fraction64] = fraction62.split(\".\");\n  const [integer65, fraction65] = fraction63.split(\".\");\n  const [integer66, fraction66] = fraction64.split(\".\");\n  const [integer67, fraction67] = fraction65.split(\".\");\n  const [integer68, fraction68] = fraction66.split(\".\");\n  const [integer69, fraction69] = fraction67.split(\".\");\n  const [integer70, fraction70] = fraction68.split(\".\");\n  const [integer71, fraction71] = fraction69.split(\".\");\n  const [integer72, fraction72] = fraction70.split(\".\");\n  const [integer73, fraction73] = fraction71.split(\".\");\n  const [integer74, fraction74] = fraction72.split(\".\");\n  const [integer75, fraction75] = fraction73.split(\".\");\n  const [integer76, fraction76] = fraction74.split(\".\");\n  const [integer77, fraction77] = fraction75.split(\".\");\n  const [integer78, fraction78] = fraction76.split(\".\");\n  const [integer79, fraction79] = fraction77.split(\".\");\n  const [integer80, fraction80] = fraction78.split(\".\");\n  const [integer81, fraction81] = fraction79.split(\".\");\n  const [integer82, fraction82] = fraction80.split(\".\");\n  const [integer83, fraction83] = fraction81.split(\".\");\n  const [integer84, fraction84] = fraction82.split(\".\");\n  const [integer85, fraction85] = fraction83.split(\".\");\n  const [integer86, fraction86] = fraction84.split(\".\");\n  const [integer87, fraction87] = fraction85.split(\".\");\n  const [integer88, fraction88] = fraction86.split(\".\");\n  const [integer89, fraction89] = fraction87.split(\".\");\n  const [integer90, fraction90] = fraction88.split(\".\");\n  const [integer91, fraction91] = fraction89.split(\".\");\n  const [integer92, fraction92] = fraction90.split(\".\");\n  const [integer93, fraction93] = fraction91.split(\".\");\n  const [integer94, fraction94] = fraction92.split(\".\");\n  const [integer95, fraction95] = fraction93.split(\".\");\n  const [integer96, fraction96] = fraction94.split(\".\");\n  const [integer97, fraction97] = fraction95.split(\".\");\n  const [integer98, fraction98] = fraction96.split(\".\");\n  const [integer99, fraction99] = fraction97.split(\".\");\n  const [integer100, fraction100] = fraction98.split(\".\");\n  const [integer101, fraction101] = fraction99.split(\".\");\n  const [integer102, fraction102] = fraction100.split(\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
