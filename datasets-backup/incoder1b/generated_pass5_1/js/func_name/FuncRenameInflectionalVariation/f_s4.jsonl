{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hadClosestElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  const numbersWithClosestElements = numbers.map(number => {\n    const distance = Math.abs(number - numbers[numbers.length - 1]);\n    return distance < threshold? number : numbers[numbers.length - 1];\n  });\n  return numbersWithClosestElements.every(number => number!== numbers[0]);\n};\n\nconst getClosestElement = (numbers, element) => {\n  const numbersWithClosestElements = numbers.map(number => {\n    const distance = Math.abs(number - element);\n    return distance < Math.abs(number)? number : element;\n  });\n  return numbersWithClosestElements.find(number => number!== numbers[0]);\n};\n\nconst getClosestElementIndex = (numbers, element) => {\n  const numbersWithClosestElements = numbers.map(number => {\n    const distance = Math.abs(number - element);\n    return distance < Math.abs(number)? number : element;\n  });\n  return numbersWithClosestElements.indexOf(numbers[0]);\n};\n\nconst getClosestElementIndexByValue = (numbers, value) => {\n  const numbersWithClosestElements = numbers.map(number => {\n    const distance = Math.abs(number - value);\n    return distance < Math.abs(number)? number : value;\n  });\n  return numbersWithClosestElements.indexOf(numbers[0]);\n};\n\nconst getClosestElementIndexByValueAndIndex = (numbers, value, index) => {\n  const numbersWithClosestElements = numbers.map(number => {\n    const distance = Math.abs(number - value);\n    return distance < Math.abs(number)? number : value;\n  });\n  return numbersWithClosestElements.indexOf(numbers[index]);\n};\n\nconst getClosestElementIndexByValueAndIndexAndValue = (numbers, value, index, value) => {\n  const numbersWithClosestElements = numbers.map(number => {\n    const distance = Math.abs(number - value);\n    return distance < Math.abs(number)? number : value;\n  });\n  return numbersWithClosestElements.indexOf(numbers[index][value]);\n};\n\nconst getClosestElementIndexByValueAndIndexAndValueAndIndex = (numbers, value, index, value, index) => {\n  const numbersWithClosestElements = numbers.map(number => {\n    const distance = Math.abs(number - value);\n    return distance < Math.abs(number)? number : value;\n  });\n  return numbersWithClosestElements.indexOf(numbers[index][value][index]);\n};\n\nconst getClosestElementIndexByValueAndIndexAndValueAndIndexAndValue = (numbers, value, index, value, index, value) => {\n  const numbersWithClosestElements = numbers.map(number => {\n    const distance = Math.abs(number - value);\n    return distance < Math.abs(number)? number : value;\n  });\n  return numbersWithClosestElements.indexOf(numbers[index][value][index][value]);\n};\n\nconst getClosestElementIndexByValueAndIndexAndValueAndIndexAndValueAndIndex = (numbers, value, index, value, index, value, index) => {\n  const numbersWithClosestElements = numbers.map(number => {\n    const distance = Math.abs(number - value);\n    return distance < Math.abs(number)? number : value;\n  });\n  return numbersWithClosestElements.indexOf(numbers[index][value][index][value][index]);\n};\n\nconst getClosestElementIndexByValueAndIndexAndValueAndIndexAndValueAndIndexAndValueAndIndex = (numbers, value, index, value, index, value, index, value) => {\n  const numbersWithClosestElements = numbers.map(number => {\n    const distance = Math.abs(number - value);\n    return distance < Math.abs(number)? number : value;\n  });\n  return numbersWithClosestElements.indexOf(numbers[index][value][index][value][index][value][index][value]);\n};\n\nconst getClosestElementIndexByValueAndIndexAndValueAndIndexAndValueAndIndexAndValueAndIndexAndValueAndIndex = (numbers, value, index, value, index, value, index, value, index) => {\n  const numbersWithClosestElements = numbers.map(number => {\n    const distance = Math.abs(number - value);\n    return distance < Math.abs(number)? number : value;\n  });\n  return numbersWithClosestElements.indexOf(numbers[index][value][index][value][index][value][index][value][index][value][index]);\n};\n\nconst getClosestElementIndexByValueAndIndexAndValueAndIndexAndValueAndIndexAndValueAndIndexAndValueAndIndexAndValueAndIndex = (numbers, value, index, value, index, value, index, value, index, value) => {\n  const numbersWithClosestElements = numbers.map(number => {\n    const distance = Math.abs(number - value);\n    return distance < Math.abs(number)? number : value;\n  });\n  return numbersWithClosestElements.indexOf(numbers[index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value][index][value", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroup", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/gi);\n  let result = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = group;\n    const paren_group_parens = paren_group_string.match(/\\(([^)]*)\\)/gi);\n    paren_group_parens.forEach((paren_group_paren) => {\n      const paren_group_paren_parens = paren_group_paren.match(/\\(([^)]*)\\)/gi);\n      paren_group_paren_parens.forEach((paren_group_paren_paren) => {\n        const paren_group_paren_parens = paren_group_paren_paren.match(/\\(([^)]*)\\)/gi);\n        paren_group_paren_parens.forEach((paren_group_paren_paren_paren) => {\n          const paren_group_paren_paren_parens = paren_group_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n          paren_group_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren) => {\n            const paren_group_paren_paren_paren_parens = paren_group_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n            paren_group_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren) => {\n              const paren_group_paren_paren_paren_parens = paren_group_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n              paren_group_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren) => {\n                const paren_group_paren_paren_paren_parens = paren_group_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                paren_group_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren) => {\n                  const paren_group_paren_paren_paren_paren_parens = paren_group_paren_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                  paren_group_paren_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren) => {\n                    const paren_group_paren_paren_paren_paren_parens = paren_group_paren_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                    paren_group_paren_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren) => {\n                      const paren_group_paren_paren_paren_paren_parens = paren_group_paren_paren_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                      paren_group_paren_paren_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren_paren) => {\n                        const paren_group_paren_paren_paren_paren_paren_parens = paren_group_paren_paren_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                        paren_group_paren_paren_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren_paren) => {\n                          const paren_group_paren_paren_paren_paren_paren_parens = paren_group_paren_paren_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                          paren_group_paren_paren_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren_paren) => {\n                            const paren_group_paren_paren_paren_paren_paren_paren_parens = paren_group_paren_paren_paren_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                            paren_group_paren_paren_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren_paren) => {\n                              const paren_group_paren_paren_paren_paren_paren_parens = paren_group_paren_paren_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                              paren_group_paren_paren_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren_paren) => {\n                                const paren_group_paren_paren_paren_paren_paren_parens = paren_group_paren_paren_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                                paren_group_paren_paren_paren_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren_paren) => {\n                                  const paren_group_paren_paren_paren_paren_paren_paren_parens = paren_group_paren_paren_paren_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                                  paren_group_paren_paren_paren_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren_paren) => {\n                                    const paren_group_paren_paren_paren_paren_paren_parens = paren_group_paren_paren_paren_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                                    paren_group_paren_paren_paren_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren_paren) => {\n                                      const paren_group_paren_paren_paren_paren_paren_parens = paren_group_paren_paren_paren_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                                      paren_group_paren_paren_paren_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren_paren_paren) => {\n                                        const paren_group_paren_paren_paren_paren_paren_paren_parens = paren_group_paren_paren_paren_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                                        paren_group_paren_paren_paren_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren_paren) => {\n                                          const paren_group_paren_paren_paren_paren_paren_paren_parens = paren_group_paren_paren_paren_paren_paren_paren_paren.match(/\\(([^)]*)\\)/gi);\n                                          paren_group_paren_paren_paren_paren_paren_paren_paren_parens.forEach((paren_group_paren_paren_paren_paren_paren_paren_paren) => {\n                                            const paren_group_paren_paren_paren_paren_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let reversedString = '';\n  let prefix = '';\n  let suffix = '';\n  let palindromeLength = 0;\n  let palindromePrefix = '';\n  let palindromeSuffix = '';\n\n  /* Find longest palindrome that begins with a supplied string */\n  longestPalindrome = string.reverse().split('').reverse().join('');\n  longestPalindromeLength = longestPalindrome.length;\n  longestPalindromePrefix = longestPalindrome.slice(0, longestPalindromeLength);\n  longestPalindromeSuffix = longestPalindrome.slice(longestPalindromeLength);\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  reversedString = longestPalindromePrefix + longestPalindromeSuffix;\n  prefix = longestPalindromeSuffix.slice(0, longestPalindromeLength);\n  suffix = longestPalindromeSuffix.slice(longestPalindromeLength);\n\n  /* Find palindrome length */\n  palindromeLength = longestPalindromeLength - longestPalindromePrefix.length - longestPalindromeSuffix.length;\n\n  /* Find palindrome prefix */\n  palindromePrefix = longestPalindromePrefix.slice(0, palindromeLength);\n  palindromeSuffix = longestPalindromeSuffix.slice(0, palindromeLength);\n\n  /* Find palindrome suffix */\n  palindromeSuffix = longestPalindromeSuffix.slice(longestPalindromeLength);\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(reversedString)) {\n    longestPalindrome = reversedString;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(prefix)) {\n    longestPalindrome = prefix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(suffix)) {\n    longestPalindrome = suffix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(palindromePrefix)) {\n    longestPalindrome = palindromePrefix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(palindromeSuffix)) {\n    longestPalindrome = palindromeSuffix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindrome)) {\n    longestPalindrome = longestPalindrome;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindromePrefix)) {\n    longestPalindromePrefix = longestPalindromePrefix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindromeSuffix)) {\n    longestPalindromeSuffix = longestPalindromeSuffix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindrome)) {\n    longestPalindrome = longestPalindrome;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindromePrefix)) {\n    longestPalindromePrefix = longestPalindromePrefix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindromeSuffix)) {\n    longestPalindromeSuffix = longestPalindromeSuffix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindrome)) {\n    longestPalindrome = longestPalindrome;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindromePrefix)) {\n    longestPalindromePrefix = longestPalindromePrefix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindromeSuffix)) {\n    longestPalindromeSuffix = longestPalindromeSuffix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindrome)) {\n    longestPalindrome = longestPalindrome;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindromePrefix)) {\n    longestPalindromePrefix = longestPalindromePrefix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindromeSuffix)) {\n    longestPalindromeSuffix = longestPalindromeSuffix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindrome)) {\n    longestPalindrome = longestPalindrome;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindromePrefix)) {\n    longestPalindromePrefix = longestPalindromePrefix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindromeSuffix)) {\n    longestPalindromeSuffix = longestPalindromeSuffix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindrome)) {\n    longestPalindrome = longestPalindrome;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindromePrefix)) {\n    longestPalindromePrefix = longestPalindromePrefix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindromeSuffix)) {\n    longestPalindromeSuffix = longestPalindromeSuffix;\n  }\n\n  /* Test if given string is a palindrome */\n  if (isPalindrome(longestPalindrome)) {\n    longestPalindrome = longestPalindrome;\n  }\n\n  /* Test ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "madeAPiles", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const stones = [...Array(Math.ceil(n / 2))].map(() => 0);\n  let level = 1;\n  while (stones[level]) {\n    stones[level]++;\n    level++;\n  }\n  return stones.map(() => level);\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPiles = (n) => {\n  const stones = [...Array(Math.ceil(n / 2))].map(() => 0);\n  let level = 1;\n  while (stones[level]) {\n    stones[level]++;\n    level++;\n  }\n  return stones.map(() => level);\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeAPilesOdd = (n) => {\n  const stones = [...Array(Math.ceil(n / 2))].map(() => 0);\n  let level = 1;\n  while (stones[level]) {\n    stones[level]++;\n    level++;\n  }\n  return stones.map(() => level);\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPilesOdd(3)\n  [3, 5, 7]\n  */\nconst makeAPilesEven = (n) => {\n  const stones = [...Array(Math.ceil(n / 2))].map(() => 0);\n  let level = 1;\n  while (stones[level]) {\n    stones[level]++;\n    level++;\n  }\n  return stones.map(() => level);\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPilesEven(3)\n  [3, 5, 7]\n  */\nconst makeAPilesOddEven = (n) => {\n  const stones = [...Array(Math.ceil(n / 2))].map(() => 0);\n  let level = 1;\n  while (stones[level]) {\n    stones[level]++;\n    level++;\n  }\n  return stones.map(() => level);\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPilesOddEven(3)\n  [3, 5, 7]\n  */\nconst makeAPilesOddEvenOdd = (n) => {\n  const stones = [...Array(Math.ceil(n / 2))].map(() => 0);\n  let level = 1;\n  while (stones[level]) {\n    stones[level]++;\n    level++;\n  }\n  return stones.map(() => level);\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPilesOddEvenOdd(3)\n  [3, 5, 7]\n  */\nconst makeAPilesOddEvenEvenOdd = (n) => {\n  const stones = [...Array(Math.ceil(n / 2))].map(() => 0);\n  let level = 1;\n  while (stones[level]) {\n    stones[level]++;\n    level++;\n  }\n  return stones.map(() => level);\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPilesOddEvenEvenOdd(3)\n  [3, 5, 7]\n  */\nconst makeAPilesOddEvenEvenEvenOdd = (n) => {\n  const stones = [...Array(Math.ceil(n / 2))].map(() => 0);\n  let level = 1;\n  while (stones[level]) {\n    stones[level]++;\n    level++;\n  }\n  return stones.map(() => level);\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPilesOddEvenEvenEvenOdd(3)\n  [3, 5, 7]\n  */\nconst makeAPilesOddEvenEvenEvenEvenOdd = (n) => {\n  const stones = [...Array(Math.ceil(n / 2))].map(() => 0);\n  let level = 1;\n  while (stones[level]) {\n    stones[level]++;\n    level++;\n  }\n  return stones.map(() => level);\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  let words = s.split(\" \");\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest positive integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest negative integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = -1\n  chooseNum(13, 12) = 12\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest positive integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest negative integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = -1\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest positive integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest negative integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = -1\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest positive integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest positive integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest positive integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest positive integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return chooseNum(mid, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest positive integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 12\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < 0 || y < 0) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  const mid = Math.floor((x + y) / ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundingAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let result = \"\";\n  let decimal = 0;\n  let decimalDigit = 0;\n  let decimalDigitCount = 0;\n  let decimalDigitCount2 = 0;\n  let decimalDigitCount3 = 0;\n  let decimalDigitCount4 = 0;\n  let decimalDigitCount5 = 0;\n  let decimalDigitCount6 = 0;\n  let decimalDigitCount7 = 0;\n  let decimalDigitCount8 = 0;\n  let decimalDigitCount9 = 0;\n  let decimalDigitCount10 = 0;\n  let decimalDigitCount11 = 0;\n  let decimalDigitCount12 = 0;\n  let decimalDigitCount13 = 0;\n  let decimalDigitCount14 = 0;\n  let decimalDigitCount15 = 0;\n  let decimalDigitCount16 = 0;\n  let decimalDigitCount17 = 0;\n  let decimalDigitCount18 = 0;\n  let decimalDigitCount19 = 0;\n  let decimalDigitCount20 = 0;\n  let decimalDigitCount21 = 0;\n  let decimalDigitCount22 = 0;\n  let decimalDigitCount23 = 0;\n  let decimalDigitCount24 = 0;\n  let decimalDigitCount25 = 0;\n  let decimalDigitCount26 = 0;\n  let decimalDigitCount27 = 0;\n  let decimalDigitCount28 = 0;\n  let decimalDigitCount29 = 0;\n  let decimalDigitCount30 = 0;\n  let decimalDigitCount31 = 0;\n  let decimalDigitCount32 = 0;\n  let decimalDigitCount33 = 0;\n  let decimalDigitCount34 = 0;\n  let decimalDigitCount35 = 0;\n  let decimalDigitCount36 = 0;\n  let decimalDigitCount37 = 0;\n  let decimalDigitCount38 = 0;\n  let decimalDigitCount39 = 0;\n  let decimalDigitCount40 = 0;\n  let decimalDigitCount41 = 0;\n  let decimalDigitCount42 = 0;\n  let decimalDigitCount43 = 0;\n  let decimalDigitCount44 = 0;\n  let decimalDigitCount45 = 0;\n  let decimalDigitCount46 = 0;\n  let decimalDigitCount47 = 0;\n  let decimalDigitCount48 = 0;\n  let decimalDigitCount49 = 0;\n  let decimalDigitCount50 = 0;\n  let decimalDigitCount51 = 0;\n  let decimalDigitCount52 = 0;\n  let decimalDigitCount53 = 0;\n  let decimalDigitCount54 = 0;\n  let decimalDigitCount55 = 0;\n  let decimalDigitCount56 = 0;\n  let decimalDigitCount57 = 0;\n  let decimalDigitCount58 = 0;\n  let decimalDigitCount59 = 0;\n  let decimalDigitCount60 = 0;\n  let decimalDigitCount61 = 0;\n  let decimalDigitCount62 = 0;\n  let decimalDigitCount63 = 0;\n  let decimalDigitCount64 = 0;\n  let decimalDigitCount65 = 0;\n  let decimalDigitCount66 = 0;\n  let decimalDigitCount67 = 0;\n  let decimalDigitCount68 = 0;\n  let decimalDigitCount69 = 0;\n  let decimalDigitCount70 = 0;\n  let decimalDigitCount71 = 0;\n  let decimalDigitCount72 = 0;\n  let decimalDigitCount73 = 0;\n  let decimalDigitCount74 = 0;\n  let decimalDigitCount75 = 0;\n  let decimalDigitCount76 = 0;\n  let decimalDigitCount77 = 0;\n  let decimalDigitCount78 = 0;\n  let decimalDigitCount79 = 0;\n  let decimalDigitCount80 = 0;\n  let decimalDigitCount81 = 0;\n  let decimalDigitCount82 = 0;\n  let decimalDigitCount83 = 0;\n  let decimalDigitCount84 = 0;\n  let decimalDigitCount85 = 0;\n  let decimalDigitCount86 = 0;\n  let decimalDigitCount87 = 0;\n  let decimalDigitCount88 = 0;\n  let decimalDigitCount89 = 0;\n  let decimalDigitCount90 = 0;\n  let decimalDigitCount91 = 0;\n  let decimalDigitCount92 = 0;\n  let decimalDigitCount93 = 0;\n  let decimalDigitCount94 = 0;\n  let decimalDigitCount95 = 0;\n  let decimalDigitCount96 = 0;\n  let decimalDigitCount97 = 0;\n  let decimalDigitCount98 = 0;\n  let decimalDigitCount99 = 0;\n  let decimalDigitCount100 = 0;\n  let decimalDigitCount101 = 0;\n  let decimalDigitCount102 = 0;\n  let decimalDigitCount103 = 0;\n  let decimalDigitCount104 = 0;\n  let decimalDigitCount105 = 0;\n  let decimalDigitCount106 = 0;\n  let decimalDigitCount107 = 0;\n  let decimalDigitCount108 = 0;\n  let decimalDigitCount109 = 0;\n  let decimalDigitCount110 = 0;\n  let decimalDigitCount111 = 0;\n  let decimalDigitCount112 = 0;\n  let decimalDigitCount113 = 0;\n  let decimalDigitCount114 = 0;\n  let decimalDigitCount115 = 0;\n  let decimalDigitCount116 = 0;\n  let decimalDigitCount117 = 0;\n  let decimalDigitCount118 = 0;\n  let decimalDigitCount119 = 0;\n  let decimalDigitCount120 = 0;\n  let decimalDigitCount121 = 0;\n  let decimalDigitCount122 = 0;\n  let decimalDigitCount123 = 0;\n  let decimalDigitCount124 = 0;\n  let decimalDigitCount125 = 0;\n  let decimalDigitCount126 = 0;\n  let decimalDigitCount127 = 0;\n  let decimalDigitCount128 = 0;\n  let decimalDigitCount129 = 0;\n  let decimalDigitCount130 = 0;\n  let decimalDigitCount131 = 0;\n  let decimalDigitCount132 = 0;\n  let decimalDigitCount133 = 0;\n  let decimalDigitCount134 = 0;\n  let decimalDigitCount135 = 0;\n  let decimalDigitCount136 = 0;\n  let decimalDigitCount137 = 0;\n  let decimalDigitCount138 = 0;\n  let decimalDigitCount139 = 0;\n  let decimalDigitCount140 = 0;\n  let decimalDigitCount141 = 0;\n  let decimalDigitCount142 = 0;\n  let decimalDigitCount143 = 0;\n  let decimalDigitCount144 = 0;\n  let decimalDigitCount145 = 0;\n  let decimalDigitCount146 = 0;\n  let decimalDigitCount147 = 0;\n  let decimalDigitCount148 = 0;\n  let decimalDigitCount149 = 0;\n  let decimalDigitCount150 = 0;\n  let decimalDigitCount151 = 0;\n  let decimalDigitCount152 = 0;\n  let decimalDigitCount153 = 0;\n  let decimalDigitCount154 = 0;\n  let decimalDigitCount155 = 0;\n  let decimalDigitCount156 = 0;\n  let decimalDigitCount157 = 0;\n  let decimalDigitCount158 = 0;\n  let decimalDigitCount159 = 0;\n  let decimalDigitCount160 = 0;\n  let decimalDigitCount161 = 0;\n  let decimalDigitCount162 = 0;\n  let decimalDigitCount163 = 0;\n  let decimalDigitCount164 = 0;\n  let decimalDigitCount165 = 0;\n  let decimalDigitCount166 = 0;\n  let decimalDigitCount167 = 0;\n  let decimalDigitCount168 = 0;\n  let decimalDigitCount169 = 0;\n  let decimalDigitCount170 = 0;\n  let decimalDigitCount171 = 0;\n  let decimalDigitCount172 = 0;\n  let decimalDigitCount173 = 0;\n  let decimalDigitCount174 = 0;\n  let decimalDigitCount175 = 0;\n  let decimalDigitCount176 = 0;\n  let decimalDigitCount177 = 0;\n  let decimalDigitCount178 = 0;\n  let decimalDigitCount179 = 0;\n  let decimalDigitCount180 = 0;\n  let decimalDigitCount181 = 0;\n  let decimalDigitCount182 = 0;\n  let decimalDigitCount183 = 0;\n  let decimalDigitCount184 = 0;\n  let decimalDigitCount185 = 0;\n  let decimalDigitCount186 = 0;\n  let decimalDigitCount187 = 0;\n  let decimalDigitCount188 = 0;\n  let decimalDigitCount189 = 0;\n  let decimalDigitCount190 = 0;\n  let decimalDigitCount191 = 0;\n  let decimalDigitCount192 = 0;\n  let decimalDigitCount193 = 0;\n  let decimalDigitCount194 = 0;\n  let decimalDigitCount195 = 0;\n  let decimalDigitCount196 = 0;\n  let decimalDigitCount197 = 0;\n  let decimalDigitCount198 = 0;\n  let decimalDigitCount199 = 0;\n  let decimalDigitCount200", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigit", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      res.push(x[i]);\n      i++;\n    } else {\n      res.push(x[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst oddDigit = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 1) {\n      res.push(x[i]);\n      i++;\n    } else {\n      res.push(x[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst evenDigit = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 0) {\n      res.push(x[i]);\n      i++;\n    } else {\n      res.push(x[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digit = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 1) {\n      res.push(x[i]);\n      i++;\n    } else {\n      res.push(x[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digitOddOrEven = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 1) {\n      res.push(x[i]);\n      i++;\n    } else {\n      res.push(x[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digitOddOrEvenOddDigit = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 1) {\n      res.push(x[i]);\n      i++;\n    } else {\n      res.push(x[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digitOddOrEvenOddDigitOddDigit = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 1) {\n      res.push(x[i]);\n      i++;\n    } else {\n      res.push(x[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digitOddOrEvenOddDigitOddDigitOddDigitOddDigit = (x) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  while (i < x.length) {\n    if (x[i] % 2 === 1) {\n      res.push(x[i]);\n      i++;\n    } else {\n      res.push(x[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst digitOddOrEvenOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOddDigitOdd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  const result = [];\n  let i = len - 1;\n  while (i >= 0 && arr[i] > 9) {\n    result.unshift(arr[i]);\n    i--;\n  }\n  return result;\n};\n\n/**\n * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n * reverse the resulting array, and then replace each digit by its corresponding name from\n * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byName = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  const result = [];\n  let i = len - 1;\n  while (i >= 0 && arr[i] > 9) {\n    result.push(arr[i]);\n    i--;\n  }\n  return result;\n};\n\n/**\n * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n * reverse the resulting array, and then replace each digit by its corresponding name from\n * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  const result = [];\n  let i = len - 1;\n  while (i >= 0 && arr[i] > 9) {\n    result.push(arr[i]);\n    i--;\n  }\n  return result;\n};\n\n/**\n * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n * reverse the resulting array, and then replace each digit by its corresponding name from\n * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReverseReverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  const result = [];\n  let i = len - 1;\n  while (i >= 0 && arr[i] > 9) {\n    result.push(arr[i]);\n    i--;\n  }\n  return result;\n};\n\n/**\n * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n * reverse the resulting array, and then replace each digit by its corresponding name from\n * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReverseReverseReverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  const result = [];\n  let i = len - 1;\n  while (i >= 0 && arr[i] > 9) {\n    result.push(arr[i]);\n    i--;\n  }\n  return result;\n};\n\n/**\n * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n * reverse the resulting array, and then replace each digit by its corresponding name from\n * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReverseReverseReverse = (arr) => {\n  const len = arr.length;\n  if (len === 0) return [];\n  if (len === 1) return [arr[0]];\n  const result = [];\n  let i = len - 1;\n  while (i >= 0 && arr[i] > 9) {\n    result.push(arr[i]);\n    i--;\n  }\n  return result;\n};\n\n/**\n * Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n * reverse the resulting array, and then replace each digit by its corresponding name from\n * \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * factorial(i));\n  }\n  return result;\n};\n\n/* Implement the function factorial that takes n as a parameter,\n  and returns the factorial of n.\n  Example:\n  factorial(5) == 120\n  */\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/* Implement the function factorial2 that takes n as a parameter,\n  and returns the factorial of n raised to the power 2.\n  Example:\n  factorial2(5) == 120\n  */\nconst factorial2 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial2(n - 1);\n};\n\n/* Implement the function factorial3 that takes n as a parameter,\n  and returns the factorial of n raised to the power 3.\n  Example:\n  factorial3(5) == 120\n  */\nconst factorial3 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial3(n - 1);\n};\n\n/* Implement the function factorial4 that takes n as a parameter,\n  and returns the factorial of n raised to the power 4.\n  Example:\n  factorial4(5) == 120\n  */\nconst factorial4 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial4(n - 1);\n};\n\n/* Implement the function factorial5 that takes n as a parameter,\n  and returns the factorial of n raised to the power 5.\n  Example:\n  factorial5(5) == 120\n  */\nconst factorial5 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial5(n - 1);\n};\n\n/* Implement the function factorial6 that takes n as a parameter,\n  and returns the factorial of n raised to the power 6.\n  Example:\n  factorial6(5) == 120\n  */\nconst factorial6 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial6(n - 1);\n};\n\n/* Implement the function factorial7 that takes n as a parameter,\n  and returns the factorial of n raised to the power 7.\n  Example:\n  factorial7(5) == 120\n  */\nconst factorial7 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial7(n - 1);\n};\n\n/* Implement the function factorial8 that takes n as a parameter,\n  and returns the factorial of n raised to the power 8.\n  Example:\n  factorial8(5) == 120\n  */\nconst factorial8 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial8(n - 1);\n};\n\n/* Implement the function factorial9 that takes n as a parameter,\n  and returns the factorial of n raised to the power 9.\n  Example:\n  factorial9(5) == 120\n  */\nconst factorial9 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial9(n - 1);\n};\n\n/* Implement the function factorial10 that takes n as a parameter,\n  and returns the factorial of n raised to the power 10.\n  Example:\n  factorial10(5) == 120\n  */\nconst factorial10 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial10(n - 1);\n};\n\n/* Implement the function factorial11 that takes n as a parameter,\n  and returns the factorial of n raised to the power 11.\n  Example:\n  factorial11(5) == 120\n  */\nconst factorial11 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial11(n - 1);\n};\n\n/* Implement the function factorial12 that takes n as a parameter,\n  and returns the factorial of n raised to the power 12.\n  Example:\n  factorial12(5) == 120\n  */\nconst factorial12 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial12(n - 1);\n};\n\n/* Implement the function factorial13 that takes n as a parameter,\n  and returns the factorial of n raised to the power 13.\n  Example:\n  factorial13(5) == 120\n  */\nconst factorial13 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial13(n - 1);\n};\n\n/* Implement the function factorial14 that takes n as a parameter,\n  and returns the factorial of n raised to the power 14.\n  Example:\n  factorial14(5) == 120\n  */\nconst factorial14 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial14(n - 1);\n};\n\n/* Implement the function factorial15 that takes n as a parameter,\n  and returns the factorial of n raised to the power 15.\n  Example:\n  factorial15(5) == 120\n  */\nconst factorial15 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial15(n - 1);\n};\n\n/* Implement the function factorial16 that takes n as a parameter,\n  and returns the factorial of n raised to the power 16.\n  Example:\n  factorial16(5) == 120\n  */\nconst factorial16 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial16(n - 1);\n};\n\n/* Implement the function factorial17 that takes n as a parameter,\n  and returns the factorial of n raised to the power 17.\n  Example:\n  factorial17(5) == 120\n  */\nconst factorial17 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial17(n - 1);\n};\n\n/* Implement the function factorial18 that takes n as a parameter,\n  and returns the factorial of n raised to the power 18.\n  Example:\n  factorial18(5) == 120\n  */\nconst factorial18 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial18(n - 1);\n};\n\n/* Implement the function factorial19 that takes n as a parameter,\n  and returns the factorial of n raised to the power 19.\n  Example:\n  factorial19(5) == 120\n  */\nconst factorial19 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial19(n - 1);\n};\n\n/* Implement the function factorial20 that takes n as a parameter,\n  and returns the factorial of n raised to the power 20.\n  Example:\n  factorial20(5) == 120\n  */\nconst factorial20 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial20(n - 1);\n};\n\n/* Implement the function factorial21 that takes n as a parameter,\n  and returns the factorial of n raised to the power 21.\n  Example:\n  factorial21(5) == 120\n  */\nconst factorial21 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOdderPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  let oddEvenPalindromes = [];\n  let evenPalindromes = [];\n  let evenOddPalindromes = [];\n  let oddEvenPalindromeCount = 0;\n  let evenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOddPalindromeCount = 0;\n  let oddEvenPalindromeCount = 0;\n  let evenOdd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countZeros which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 3\n  */\nconst countZeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOnes which takes an array of integers and returns\n  the number of elements which has a sum of digits == 1.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countOnes([]) == 0\n  >>> countOnes([-1, 11, -11]) == 1\n  >>> countOnes([1, 1, 2]) == 3\n  */\nconst countOnes = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countTwos which takes an array of integers and returns\n  the number of elements which has a sum of digits == 2.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countTwos([]) == 0\n  >>> countTwos([-1, 11, -11]) == 1\n  >>> countTwos([1, 1, 2]) == 3\n  */\nconst countTwos = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countThrees which takes an array of integers and returns\n  the number of elements which has a sum of digits == 3.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countThrees([]) == 0\n  >>> countThrees([-1, 11, -11]) == 1\n  >>> countThrees([1, 1, 2]) == 3\n  */\nconst countThrees = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countFours which takes an array of integers and returns\n  the number of elements which has a sum of digits == 4.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countFours([]) == 0\n  >>> countFours([-1, 11, -11]) == 1\n  >>> countFours([1, 1, 2]) == 3\n  */\nconst countFours = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countFives which takes an array of integers and returns\n  the number of elements which has a sum of digits == 5.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countFives([]) == 0\n  >>> countFives([-1, 11, -11]) == 1\n  >>> countFives([1, 1, 2]) == 3\n  */\nconst countFives = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countSixs which takes an array of integers and returns\n  the number of elements which has a sum of digits == 6.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countSixs([]) == 0\n  >>> countSixs([-1, 11, -11]) == 1\n  >>> countSixs([1, 1, 2]) == 3\n  */\nconst countSixs = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countSevens which takes an array of integers and returns\n  the number of elements which has a sum of digits == 7.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countSevens([]) == 0\n  >>> countSevens([-1, 11, -11]) == 1\n  >>> countSevens([1, 1, 2]) == 3\n  */\nconst countSevens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEights which takes an array of integers and returns\n  the number of elements which has a sum of digits == 8.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countEights([]) == 0\n  >>> countEights([-1, 11, -11]) == 1\n  >>> countEights([1, 1, 2]) == 3\n  */\nconst countEights = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNines which takes an array of integers and returns\n  the number of elements which has a sum of digits == 9.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNines([]) == 0\n  >>> countNines([-1, 11, -11]) == 1\n  >>> countNines([1, 1, 2]) == 3\n  */\nconst countNines = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countTens which takes an array of integers and returns\n  the number of elements which has a sum of digits == 10.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countTens([]) == 0\n  >>> countTens([-1, 11, -11]) == 1\n  >>> countTens([1, 1, 2]) == 3\n  */\nconst countTens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countElevens which takes an array of integers and returns\n  the number of elements which has a sum of digits == 11.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countElevens([]) == 0\n  >>> countElevens([-1, 11, -11]) == 1\n  >>> countElevens([1, 1, 2]) == 3\n  */\nconst countElevens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countTwelven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movingOneBalls", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n  let arrLength = arr.length;\n  let arrCopy = arr.slice();\n  let arrCopyLength = arrCopy.length;\n  let arrCopyCopy = arrCopy.slice();\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopy = arrCopyCopy.slice();\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopy = arrCopyCopyCopy.slice();\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopyLength = arrCopyCopy.length;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary AND on two strings.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary OR on two strings.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary NOT on two strings.\n  >>> stringNot('010', '110')\n  '110'\n  */\nconst stringNot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += ~a[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary AND on two numbers.\n  >>> numberAnd(10, 20)\n  20\n  */\nconst numberAnd = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b;\n  }\n  return result;\n};\n\n/**\n  Perform binary OR on two numbers.\n  >>> numberOr(10, 20)\n  20\n  */\nconst numberOr = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b;\n  }\n  return result;\n};\n\n/**\n  Perform binary NOT on two numbers.\n  >>> numberNot(10, 20)\n  20\n  */\nconst numberNot = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += ~a[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary XOR on two numbers.\n  >>> numberXor(10, 20)\n  20\n  */\nconst numberXor = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b;\n  }\n  return result;\n};\n\n/**\n  Perform binary AND on two numbers.\n  >>> numberAnd(10, 20)\n  20\n  */\nconst numberAnd = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += num1[i] & num2[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary OR on two numbers.\n  >>> numberOr(10, 20)\n  20\n  */\nconst numberOr = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += num1[i] | num2[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary NOT on two numbers.\n  >>> numberNot(10, 20)\n  20\n  */\nconst numberNot = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += ~num1[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary XOR on two numbers.\n  >>> numberXor(10, 20)\n  20\n  */\nconst numberXor = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += num1[i] ^ num2[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary AND on two numbers.\n  >>> numberAnd(10, 20)\n  20\n  */\nconst numberAnd = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += num1[i] & num2[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary OR on two numbers.\n  >>> numberOr(10, 20)\n  20\n  */\nconst numberOr = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += num1[i] | num2[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary NOT on two numbers.\n  >>> numberNot(10, 20)\n  20\n  */\nconst numberNot = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += ~num1[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary XOR on two numbers.\n  >>> numberXor(10, 20)\n  20\n  */\nconst numberXor = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += num1[i] ^ num2[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary AND on two numbers.\n  >>> numberAnd(10, 20)\n  20\n  */\nconst numberAnd = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += num1[i] & num2[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary OR on two numbers.\n  >>> numberOr(10, 20)\n  20\n  */\nconst numberOr = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += num1[i] | num2[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary NOT on two numbers.\n  >>> numberNot(10, 20)\n  20\n  */\nconst numberNot = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += ~num1[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary XOR on two numbers.\n  >>> numberXor(10, 20)\n  20\n  */\nconst numberXor = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += num1[i] ^ num2[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary AND on two numbers.\n  >>> numberAnd(10, 20)\n  20\n  */\nconst numberAnd = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += num1[i] & num2[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary OR on two numbers.\n  >>> numberOr(10, 20)\n  20\n  */\nconst numberOr = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += num1[i] | num2[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary NOT on two numbers.\n  >>> numberNot(10, 20)\n  20\n  */\nconst numberNot = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += ~num1[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary XOR on two numbers.\n  >>> numberXor(10, 20)\n  20\n  */\nconst numberXor = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += num1[i] ^ num2[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary AND on two numbers.\n  >>> numberAnd(10, 20)\n  20\n  */\nconst numberAnd = (num1, num2) => {\n  let result = 0;\n  for (let i = 0; i < num1.length; i++) {\n    result += num1[i] & num2[i];\n  }\n  return result;\n};\n\n/**\n  Perform binary OR on two numbers.\n  >>> numberOr(10, 20)\n  20\n  */\nconst numberOr = (num1, num2) => {\n  let result = 0;\n  for (let ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchanges", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return \"NO\";\n  let result = \"YES\";\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== lst2[i] % 2) {\n      result += \"NO\";\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the\n  minimum number of exchanges needed to make all the elements of the\n  array even.\n  For example:\n  exchanges([1, 2, 3, 4]) => 1\n  exchanges([1, 2, 3, 4]) => 2\n  exchanges([1, 2, 3, 4]) => 3\n  exchanges([1, 2, 3, 4]) => 4\n  exchanges([1, 2, 3, 4]) => 5\n  exchanges([1, 2, 3, 4]) => 6\n  exchanges([1, 2, 3, 4]) => 7\n  exchanges([1, 2, 3, 4]) => 8\n  exchanges([1, 2, 3, 4]) => 9\n  exchanges([1, 2, 3, 4]) => 10\n  exchanges([1, 2, 3, 4]) => 11\n  exchanges([1, 2, 3, 4]) => 12\n  exchanges([1, 2, 3, 4]) => 13\n  exchanges([1, 2, 3, 4]) => 14\n  exchanges([1, 2, 3, 4]) => 15\n  exchanges([1, 2, 3, 4]) => 16\n  exchanges([1, 2, 3, 4]) => 17\n  exchanges([1, 2, 3, 4]) => 18\n  exchanges([1, 2, 3, 4]) => 19\n  exchanges([1, 2, 3, 4]) => 20\n  exchanges([1, 2, 3, 4]) => 21\n  exchanges([1, 2, 3, 4]) => 22\n  exchanges([1, 2, 3, 4]) => 23\n  exchanges([1, 2, 3, 4]) => 24\n  exchanges([1, 2, 3, 4]) => 25\n  exchanges([1, 2, 3, 4]) => 26\n  exchanges([1, 2, 3, 4]) => 27\n  exchanges([1, 2, 3, 4]) => 28\n  exchanges([1, 2, 3, 4]) => 29\n  exchanges([1, 2, 3, 4]) => 30\n  exchanges([1, 2, 3, 4]) => 31\n  exchanges([1, 2, 3, 4]) => 32\n  exchanges([1, 2, 3, 4]) => 33\n  exchanges([1, 2, 3, 4]) => 34\n  exchanges([1, 2, 3, 4]) => 35\n  exchanges([1, 2, 3, 4]) => 36\n  exchanges([1, 2, 3, 4]) => 37\n  exchanges([1, 2, 3, 4]) => 38\n  exchanges([1, 2, 3, 4]) => 39\n  exchanges([1, 2, 3, 4]) => 40\n  exchanges([1, 2, 3, 4]) => 41\n  exchanges([1, 2, 3, 4]) => 42\n  exchanges([1, 2, 3, 4]) => 43\n  exchanges([1, 2, 3, 4]) => 44\n  exchanges([1, 2, 3, 4]) => 45\n  exchanges([1, 2, 3, 4]) => 46\n  exchanges([1, 2, 3, 4]) => 47\n  exchanges([1, 2, 3, 4]) => 48\n  exchanges([1, 2, 3, 4]) => 49\n  exchanges([1, 2, 3, 4]) => 50\n  exchanges([1, 2, 3, 4]) => 51\n  exchanges([1, 2, 3, 4]) => 52\n  exchanges([1, 2, 3, 4]) => 53\n  exchanges([1, 2, 3, 4]) => 54\n  exchanges([1, 2, 3, 4]) => 55\n  exchanges([1, 2, 3, 4]) => 56\n  exchanges([1, 2, 3, 4]) => 57\n  exchanges([1, 2, 3, 4]) => 58\n  exchanges([1, 2, 3, 4]) => 59\n  exchanges([1, 2, 3, 4]) => 60\n  exchanges([1, 2, 3, 4]) => 61\n  exchanges([1, 2, 3, 4]) => 62\n  exchanges([1, 2, 3, 4]) => 63\n  exchanges([1, 2, 3, 4]) => 64\n  exchanges([1, 2, 3, 4]) => 65\n  exchanges([1, 2, 3, 4]) => 66\n  exchanges([1, 2, 3, 4]) => 67\n  exchanges([1, 2, 3, 4]) => 68\n  exchanges([1, 2, 3, 4]) => 69\n  exchanges([1, 2, 3, 4]) => 70\n  exchanges([1, 2, 3, 4]) => 71\n  exchanges([1, 2, 3, 4]) => 72\n  exchanges([1, 2, 3, 4]) => 73\n  exchanges([1, 2, 3, 4]) => 74\n  exchanges([1, 2, 3, 4]) => 75\n  exchanges([1, 2, 3, 4]) => 76\n  exchanges([1, 2, 3, 4]) => 77\n  exchanges([1, 2, 3, 4]) => 78\n  exchanges([1, 2, 3, 4]) => 79\n  exchanges([1, 2, 3, 4]) => 80\n  exchanges([1, 2, 3, 4]) => 81\n  exchanges([1, 2, 3, 4]) => 82\n  exchanges([1, 2, 3, 4]) => 83\n  exchanges([1, 2, 3, 4]) => 84\n  exchanges([1, 2, 3, 4]) => 85\n  exchanges([1, 2, 3, 4]) => 86\n  exchanges([1, 2, 3, 4]) => 87\n  exchanges([1, 2, 3, 4]) => 88\n  exchanges([1, 2, 3, 4]) => 89\n  exchanges([1, 2, 3, 4]) => 90\n  exchanges([1, 2, 3, 4]) => 91\n  exchanges([1, 2, 3, 4]) => 92\n  exchanges([1, 2, 3, 4]) => 93\n  exchanges([1, 2, 3, 4]) => 94\n  exchanges([1, 2, 3, 4]) => 95\n  exchanges([1, 2, 3, 4]) => 96\n  exchanges([1, 2, 3, 4]) => 97\n  exchanges([1, 2, 3, 4]) => 98\n  exchanges([1, 2, 3, 4]) => 99\n  exchanges([1, 2, 3, 4]) => 100\n  exchanges([1, 2, 3, 4]) => 101\n  exchanges([1, 2, 3, 4]) => 102\n  exchanges([1, 2, 3, 4]) => 103\n  exchanges([1, 2, 3, 4]) => 104\n  exchanges([1, 2, 3, 4]) => 105\n  exchanges([1, 2, 3, 4]) => 106\n  exchanges([1, 2, 3, 4]) => 107\n  exchanges([1, 2, 3, 4]) => 108\n  exchanges([1, 2, 3, 4]) => 109\n  exchanges([1, 2, 3, 4]) => 110\n  exchanges([1, 2, 3, 4]) => 111\n  exchanges([1, 2, 3, 4]) => 112\n  exchanges([1, 2, 3, 4]) => 113\n  exchanges([1, 2, 3, 4]) => 114\n  exchanges([1, 2, 3, 4]) => 115\n  exchanges([1, 2, 3, 4]) => 116\n  exchanges([1, 2, 3, 4]) => 117\n  exchanges([1, 2, 3, 4]) => 118\n  exchanges([1, 2, 3, 4]) => 119\n  exchanges([1, 2, 3, 4]) => 120\n  exchanges([1, 2, 3, 4]) => 121\n  exchanges([1, 2, 3, 4]) => 122\n  exchanges([1, 2, 3, 4]) => 123\n  exchanges([1, 2, 3, 4]) => 124\n  exchanges([1, 2, 3, 4]) => 125\n  exchanges([1, 2, 3, 4]) => 126\n  exchanges([1, 2, 3, 4]) => 127\n  exchanges([1, 2, 3, 4]) => 128\n  exchanges([1, 2, 3, 4]) => 129\n  exchanges([1, 2, 3, 4]) => 130\n  exchanges([1, 2, 3, 4]) => 131\n  exchanges([1, 2, 3, 4]) => 132\n  exchanges([1, 2, 3, 4]) => 133\n  exchanges([1, 2, 3, 4]) => 134\n  exchanges([1, 2, 3, 4]) => 135\n  exchanges([1, 2, 3, 4]) => 136\n  exchanges([1, 2, 3, 4]) => 137\n  exchanges([1, 2, 3, 4]) => 138\n  exchanges([1, 2, 3, 4]) => 139\n  exchanges([1, 2, 3, 4]) => 140\n  exchanges([1, 2, 3, 4]) => 141\n  exchanges([1, 2, 3, 4]) => 142\n  exchanges([1, 2, 3, 4]) => 143\n  exchanges([1, 2, 3, 4]) => 144\n  exchanges([1, 2, 3, 4]) => 145\n  exchanges([1, 2, 3, 4]) => 146\n  exchanges([1, 2, 3, 4]) => 147\n  exchanges([1, 2, 3, 4]) => 148\n  exchanges([1, 2, 3, 4]) => 149\n  exchanges([1, 2, 3, 4]) => 150\n  exchanges([1, 2, 3, 4]) => 151\n  exchanges([1, 2, 3, 4]) => 152\n  exchanges([1, 2, 3, 4]) => 153\n  exchanges([1, 2, 3, 4]) => 154\n  exchanges([1, 2, 3, 4]) => 155\n  exchanges([1, 2, 3, 4]) => 156\n  exchanges([1, 2, 3, 4]) => 157\n  exchanges([1, 2, 3, 4]) => 158\n  exchanges([1, 2, 3, 4]) => 159\n  exchanges([1, 2, 3, 4]) => 160\n  exchanges([1, 2, 3, 4]) => 161\n  exchanges([1, 2, 3, 4]) => 162\n  exchange", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histograms", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const histograms = {};\n  test.split(' ').forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]++;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_2('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_2('a b b a') == {'a': 2, 'b': 2}\n  histograms_2('a b c a b') == {'a': 2, 'b': 2}\n  histograms_2('b b b b a') == {'b': 4}\n  histograms_2('') == {}\n\n  */\nconst histograms_2 = (test) => {\n  const histograms = {};\n  test.split(' ').forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]++;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_3('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_3('a b b a') == {'a': 2, 'b': 2}\n  histograms_3('a b c a b') == {'a': 2, 'b': 2}\n  histograms_3('b b b b a') == {'b': 4}\n  histograms_3('') == {}\n\n  */\nconst histograms_3 = (test) => {\n  const histograms = {};\n  test.split(' ').forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]++;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_4('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_4('a b b a') == {'a': 2, 'b': 2}\n  histograms_4('a b c a b') == {'a': 2, 'b': 2}\n  histograms_4('b b b b a') == {'b': 4}\n  histograms_4('') == {}\n\n  */\nconst histograms_4 = (test) => {\n  const histograms = {};\n  test.split(' ').forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]++;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_5('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_5('a b b a') == {'a': 2, 'b': 2}\n  histograms_5('a b c a b') == {'a': 2, 'b': 2}\n  histograms_5('b b b b a') == {'b': 4}\n  histograms_5('') == {}\n\n  */\nconst histograms_5 = (test) => {\n  const histograms = {};\n  test.split(' ').forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]++;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_6('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_6('a b b a') == {'a': 2, 'b': 2}\n  histograms_6('a b c a b') == {'a': 2, 'b': 2}\n  histograms_6('b b b b a') == {'b': 4}\n  histograms_6('') == {}\n\n  */\nconst histograms_6 = (test) => {\n  const histograms = {};\n  test.split(' ').forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]++;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_7('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_7('a b b a') == {'a': 2, 'b': 2}\n  histograms_7('a b c a b') == {'a': 2, 'b': 2}\n  histograms_7('b b b b a') == {'b': 4}\n  histograms_7('') == {}\n\n  */\nconst histograms_7 = (test) => {\n  const histograms = {};\n  test.split(' ').forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]++;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_8('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_8('a b b a') == {'a': 2, 'b': 2}\n  histograms_8('a b c a b') == {'a': 2, 'b': 2}\n  histograms_8('b b b b a') == {'b': 4}\n  histograms_8('') == {}\n\n  */\nconst histograms_8 = (test) => {\n  const histograms = {};\n  test.split(' ').forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]++;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_9('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_9('a b b a') == {'a': 2, 'b': 2}\n  histograms_9('a b c a b') == {'a': 2, 'b': 2}\n  histograms_9('b b b b a') == {'b': 4}\n  histograms_9('') == {}\n\n  */\nconst histograms_9 = (test) => {\n  const histograms = {};\n  test.split(' ').forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]++;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reversesDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  let reversed = '';\n  for (let i = 0; i < s.length - 1; i++) {\n    reversed = s.charAt(i) + s.charAt(i + 1);\n    if (reversed === c) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  if (isPalindrome) {\n    result = s.slice(0, s.length - 1);\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  Given a string s and an integer n, return true if and only if the string is a palindrome.\n  Example\n  For s = \"abcde\", n = 2, the result should be true\n  For s = \"abcde\", n = 3, the result should be false\n  For s = \"abcde\", n = 4, the result should be false\n  For s = \"abcde\", n = 5, the result should be false\n  For s = \"abcde\", n = 6, the result should be false\n  For s = \"abcde\", n = 7, the result should be false\n  For s = \"abcde\", n = 8, the result should be false\n  For s = \"abcde\", n = 9, the result should be false\n  For s = \"abcde\", n = 10, the result should be false\n  For s = \"abcde\", n = 11, the result should be false\n  For s = \"abcde\", n = 12, the result should be false\n  For s = \"abcde\", n = 13, the result should be false\n  For s = \"abcde\", n = 14, the result should be false\n  For s = \"abcde\", n = 15, the result should be false\n  For s = \"abcde\", n = 16, the result should be false\n  For s = \"abcde\", n = 17, the result should be false\n  For s = \"abcde\", n = 18, the result should be false\n  For s = \"abcde\", n = 19, the result should be false\n  For s = \"abcde\", n = 20, the result should be false\n  For s = \"abcde\", n = 21, the result should be false\n  For s = \"abcde\", n = 22, the result should be false\n  For s = \"abcde\", n = 23, the result should be false\n  For s = \"abcde\", n = 24, the result should be false\n  For s = \"abcde\", n = 25, the result should be false\n  For s = \"abcde\", n = 26, the result should be false\n  For s = \"abcde\", n = 27, the result should be false\n  For s = \"abcde\", n = 28, the result should be false\n  For s = \"abcde\", n = 29, the result should be false\n  For s = \"abcde\", n = 30, the result should be false\n  For s = \"abcde\", n = 31, the result should be false\n  For s = \"abcde\", n = 32, the result should be false\n  For s = \"abcde\", n = 33, the result should be false\n  For s = \"abcde\", n = 34, the result should be false\n  For s = \"abcde\", n = 35, the result should be false\n  For s = \"abcde\", n = 36, the result should be false\n  For s = \"abcde\", n = 37, the result should be false\n  For s = \"abcde\", n = 38, the result should be false\n  For s = \"abcde\", n = 39, the result should be false\n  For s = \"abcde\", n = 39, the result should be false\n  For s = \"abcde\", n = 40, the result should be false\n  For s = \"abcde\", n = 41, the result should be false\n  For s = \"abcde\", n = 42, the result should be false\n  For s = \"abcde\", n = 43, the result should be false\n  For s = \"abcde\", n = 44, the result should be false\n  For s = \"abcde\", n = 45, the result should be false\n  For s = \"abcde\", n = 46, the result should be false\n  For s = \"abcde\", n = 47, the result should be false\n  For s = \"abcde\", n = 48, the result should be false\n  For s = \"abcde\", n = 49, the result should be false\n  For s = \"abcde\", n = 50, the result should be false\n  For s = \"abcde\", n = 51, the result should be false\n  For s = \"abcde\", n = 52, the result should be false\n  For s = \"abcde\", n = 53, the result should be false\n  For s = \"abcde\", n = 54, the result should be false\n  For s = \"abcde\", n = 55, the result should be false\n  For s = \"abcde\", n = 56, the result should be false\n  For s = \"abcde\", n = 57, the result should be false\n  For s = \"abcde\", n = 58, the result should be false\n  For s = \"abcde\", n = 59, the result should be false\n  For s = \"abcde\", n = 60, the result should be false\n  For s = \"abcde\", n = 61, the result should be false\n  For s = \"abcde\", n = 62, the result should be false\n  For s = \"abcde\", n = 63, the result should be false\n  For s = \"abcde\", n = 64, the result should be false\n  For s = \"abcde\", n = 65, the result should be false\n  For s = \"abcde\", n = 66, the result should be false\n  For s = \"abcde\", n = 67, the result should be false\n  For s = \"abcde\", n = 68, the result should be false\n  For s = \"abcde\", n = 69, the result should be false\n  For s = \"abcde\", n = 70, the result should be false\n  For s = \"abcde\", n = 71, the result should be false\n  For s = \"abcde\", n = 72, the result should be false\n  For s = \"abcde\", n = 73, the result should be false\n  For s = \"abcde\", n = 74, the result should be false\n  For s = \"abcde\", n = 75, the result should be false\n  For s = \"abcde\", n = 76, the result should be false\n  For s = \"abcde\", n = 77, the result should be false\n  For s = \"abcde\", n = 78, the result should be false\n  For s = \"abcde\", n = 79, the result should be false\n  For s = \"abcde\", n = 80, the result should be false\n  For s = \"abcde\", n = 81, the result should be false\n  For s = \"abcde\", n = 82, the result should be false\n  For s = \"abcde\", n = 83, the result should be false\n  For s = \"abcde\", n = 84, the result should be false\n  For s = \"abcde\", n = 85, the result should be false\n  For s = \"abcde\", n = 86, the result should be false\n  For s = \"abcde\", n = 87, the result should be false\n  For s = \"abcde\", n = 88, the result should be false\n  For s = \"abcde\", n = 89, the result should be false\n  For s = \"abcde\", n = 90, the result should be false\n  For s = \"abcde\", n = 91, the result should be false\n  For s = \"abcde\", n = 92, the result should be false\n  For s = \"abcde\", n = 93, the result should be false\n  For s = \"abcde\", n = 94, the result should be false\n  For s = \"abcde\", n = 95, the result should be false\n  For s = \"abcde\", n = 96, the result should be false\n  For s = \"abcde\", n = 97, the result should be false\n  For s = \"abcde\", n = 98, the result should be false\n  For s = \"abcde\", n = 99, the result should be false\n  For s = \"abcde\", n = 100, the result should be false\n  For s = \"abcde\", n = 101, the result should be false\n  For s = \"abcde\", n = 102, the result should be false\n  For s = \"abcde\", n = 103, the result should be false\n  For s = \"abcde\", n = 104, the result should be false\n  For s = \"abcde\", n = 105, the result should be false\n  For s = \"abc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odderCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 2 === 0) {\n      odd.push(num);\n    }\n  }\n  return odd.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 2!== 0) {\n      even.push(num);\n    }\n  }\n  return even.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of pairs of digits in\n  the string i of the input.\" where all the i's should be replaced by the number\n  of pairs of digits in the i'th string of the input.\n\n  >>> pairCount(['1234567'])\n  [\"the number of pairs of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> pairCount(['3',\"11111111\"])\n  [\"the number of pairs of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of pairs of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst pairCount = (lst) => {\n  let pairs = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 2 === 0) {\n      pairs.push(num);\n    }\n  }\n  return pairs.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of triples in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of triples in the i'th string of the input.\n\n  >>> tripleCount(['1234567'])\n  [\"the number of triples 4n the str4ng 4 of the 4nput.\"]\n  >>> tripleCount(['3',\"11111111\"])\n  [\"the number of triples 1n the str1ng 1 of the 1nput.\",\n   \"the number of triples 8n the str8ng 8 of the 8nput.\"]\n  */\nconst tripleCount = (lst) => {\n  let triples = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 3 === 0) {\n      triples.push(num);\n    }\n  }\n  return triples.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quatuples in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of quatuples in the i'th string of the input.\n\n  >>> quatupleCount(['1234567'])\n  [\"the number of quatuples 4n the str4ng 4 of the 4nput.\"]\n  >>> quatupleCount(['3',\"11111111\"])\n  [\"the number of quatuples 1n the str1ng 1 of the 1nput.\",\n   \"the number of quatuples 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quatupleCount = (lst) => {\n  let quatuples = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 4 === 0) {\n      quatuples.push(num);\n    }\n  }\n  return quatuples.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quintiles in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of quintiles in the i'th string of the input.\n\n  >>> quintileCount(['1234567'])\n  [\"the number of quintiles 4n the str4ng 4 of the 4nput.\"]\n  >>> quintileCount(['3',\"11111111\"])\n  [\"the number of quintiles 1n the str1ng 1 of the 1nput.\",\n   \"the number of quintiles 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quintileCount = (lst) => {\n  let quintiles = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 5 === 0) {\n      quintiles.push(num);\n    }\n  }\n  return quintiles.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of nickels in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of nickels in the i'th string of the input.\n\n  >>> nickelCount(['1234567'])\n  [\"the number of nickels 4n the str4ng 4 of the 4nput.\"]\n  >>> nickelCount(['3',\"11111111\"])\n  [\"the number of nickels 1n the str1ng 1 of the 1nput.\",\n   \"the number of nickels 8n the str8ng 8 of the 8nput.\"]\n  */\nconst nickelCount = (lst) => {\n  let nickels = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 5!== 0) {\n      nickels.push(num);\n    }\n  }\n  return nickels.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of pennies in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of pennies in the i'th string of the input.\n\n  >>> pennieCount(['1234567'])\n  [\"the number of pennies 4n the str4ng 4 of the 4nput.\"]\n  >>> pennieCount(['3',\"11111111\"])\n  [\"the number of pennies 1n the str1ng 1 of the 1nput.\",\n   \"the number of pennies 8n the str8ng 8 of the 8nput.\"]\n  */\nconst pennieCount = (lst) => {\n  let pennies = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 5!== 0) {\n      pennies.push(num);\n    }\n  }\n  return pennies.join(' ');\n};\n\n/*Given a list of strings, where each string ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubsArraySums", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 4\n  maxSubsArraySums([-1, -2, -3]) == 6\n  */\nconst maxSubsArraySums = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      return sum;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays\n  of nums.\n  Example\n  minSubArrayCount([3, 1, 2, 1, 2]) == 3\n  minSubArrayCount([-3, -2, -1, 0, 1, 2]) == 4\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays\n  of nums.\n  Example\n  maxSubArrayCount([3, 1, 2, 1, 2]) == 3\n  maxSubArrayCount([-3, -2, -1, 0, 1, 2]) == 4\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays\n  of nums.\n  Example\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  nums = [-3, -2, -1, 0, 1, 2]\n  nums = [3, 1, 2, 1, 2]\n  num", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] === 0)? capacity : -capacity;\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] === 0)? capacity : -capacity;\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] === 0)? capacity : -capacity;\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] === 0)? capacity : -capacity;\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] === 0)? capacity : -capacity;\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  let result = [];\n  let ones = 0;\n  let onesCount = 0;\n  let onesCount2 = 0;\n  let onesCount3 = 0;\n  let onesCount4 = 0;\n  let onesCount5 = 0;\n  let onesCount6 = 0;\n  let onesCount7 = 0;\n  let onesCount8 = 0;\n  let onesCount9 = 0;\n  let onesCount10 = 0;\n  let onesCount11 = 0;\n  let onesCount12 = 0;\n  let onesCount13 = 0;\n  let onesCount14 = 0;\n  let onesCount15 = 0;\n  let onesCount16 = 0;\n  let onesCount17 = 0;\n  let onesCount18 = 0;\n  let onesCount19 = 0;\n  let onesCount20 = 0;\n  let onesCount21 = 0;\n  let onesCount22 = 0;\n  let onesCount23 = 0;\n  let onesCount24 = 0;\n  let onesCount25 = 0;\n  let onesCount26 = 0;\n  let onesCount27 = 0;\n  let onesCount28 = 0;\n  let onesCount29 = 0;\n  let onesCount30 = 0;\n  let onesCount31 = 0;\n  let onesCount32 = 0;\n  let onesCount33 = 0;\n  let onesCount34 = 0;\n  let onesCount35 = 0;\n  let onesCount36 = 0;\n  let onesCount37 = 0;\n  let onesCount38 = 0;\n  let onesCount39 = 0;\n  let onesCount40 = 0;\n  let onesCount41 = 0;\n  let onesCount42 = 0;\n  let onesCount43 = 0;\n  let onesCount44 = 0;\n  let onesCount45 = 0;\n  let onesCount46 = 0;\n  let onesCount47 = 0;\n  let onesCount48 = 0;\n  let onesCount49 = 0;\n  let onesCount50 = 0;\n  let onesCount51 = 0;\n  let onesCount52 = 0;\n  let onesCount53 = 0;\n  let onesCount54 = 0;\n  let onesCount55 = 0;\n  let onesCount56 = 0;\n  let onesCount57 = 0;\n  let onesCount58 = 0;\n  let onesCount59 = 0;\n  let onesCount60 = 0;\n  let onesCount61 = 0;\n  let onesCount62 = 0;\n  let onesCount63 = 0;\n  let onesCount64 = 0;\n  let onesCount65 = 0;\n  let onesCount66 = 0;\n  let onesCount67 = 0;\n  let onesCount68 = 0;\n  let onesCount69 = 0;\n  let onesCount70 = 0;\n  let onesCount71 = 0;\n  let onesCount72 = 0;\n  let onesCount73 = 0;\n  let onesCount74 = 0;\n  let onesCount75 = 0;\n  let onesCount76 = 0;\n  let onesCount77 = 0;\n  let onesCount78 = 0;\n  let onesCount79 = 0;\n  let onesCount80 = 0;\n  let onesCount81 = 0;\n  let onesCount82 = 0;\n  let onesCount83 = 0;\n  let onesCount84 = 0;\n  let onesCount85 = 0;\n  let onesCount86 = 0;\n  let onesCount87 = 0;\n  let onesCount88 = 0;\n  let onesCount89 = 0;\n  let onesCount90 = 0;\n  let onesCount91 = 0;\n  let onesCount92 = 0;\n  let onesCount93 = 0;\n  let onesCount94 = 0;\n  let onesCount95 = 0;\n  let onesCount96 = 0;\n  let onesCount97 = 0;\n  let onesCount98 = 0;\n  let onesCount99 = 0;\n  let onesCount100 = 0;\n  let onesCount101 = 0;\n  let onesCount102 = 0;\n  let onesCount103 = 0;\n  let onesCount104 = 0;\n  let onesCount105 = 0;\n  let onesCount106 = 0;\n  let onesCount107 = 0;\n  let onesCount108 = 0;\n  let onesCount109 = 0;\n  let onesCount110 = 0;\n  let onesCount111 = 0;\n  let onesCount112 = 0;\n  let onesCount113 = 0;\n  let onesCount114 = 0;\n  let onesCount115 = 0;\n  let onesCount116 = 0;\n  let onesCount117 = 0;\n  let onesCount118 = 0;\n  let onesCount119 = 0;\n  let onesCount120 = 0;\n  let onesCount121 = 0;\n  let onesCount122 = 0;\n  let onesCount123 = 0;\n  let onesCount124 = 0;\n  let onesCount125 = 0;\n  let onesCount126 = 0;\n  let onesCount127 = 0;\n  let onesCount128 = 0;\n  let onesCount129 = 0;\n  let onesCount130 = 0;\n  let onesCount131 = 0;\n  let onesCount132 = 0;\n  let onesCount133 = 0;\n  let onesCount134 = 0;\n  let onesCount135 = 0;\n  let onesCount136 = 0;\n  let onesCount137 = 0;\n  let onesCount138 = 0;\n  let onesCount139 = 0;\n  let onesCount140 = 0;\n  let onesCount141 = 0;\n  let onesCount142 = 0;\n  let onesCount143 = 0;\n  let onesCount144 = 0;\n  let onesCount145 = 0;\n  let onesCount146 = 0;\n  let onesCount147 = 0;\n  let onesCount148 = 0;\n  let onesCount149 = 0;\n  let onesCount150 = 0;\n  let onesCount151 = 0;\n  let onesCount152 = 0;\n  let onesCount153 = 0;\n  let onesCount154 = 0;\n  let onesCount155 = 0;\n  let onesCount156 = 0;\n  let onesCount157 = 0;\n  let onesCount158 = 0;\n  let onesCount159 = 0;\n  let onesCount160 = 0;\n  let onesCount161 = 0;\n  let onesCount162 = 0;\n  let onesCount163 = 0;\n  let onesCount164 = 0;\n  let onesCount165 = 0;\n  let onesCount166 = 0;\n  let onesCount167 = 0;\n  let onesCount168 = 0;\n  let onesCount169 = 0;\n  let onesCount170 = 0;\n  let onesCount171 = 0;\n  let onesCount172 = 0;\n  let onesCount173 = 0;\n  let onesCount174 = 0;\n  let onesCount175 = 0;\n  let onesCount176 = 0;\n  let onesCount177 = 0;\n  let onesCount178 = 0;\n  let onesCount179 = 0;\n  let onesCount180 = 0;\n  let onesCount181 = 0;\n  let onesCount182 = 0;\n  let onesCount183 = 0;\n  let onesCount184 = 0;\n  let onesCount185 = 0;\n  let onesCount186 = 0;\n  let onesCount187 = 0;\n  let onesCount188 = 0;\n  let onesCount189 = 0;\n  let onesCount190 = 0;\n  let onesCount191 = 0;\n  let onesCount192 = 0;\n  let onesCount193 = 0;\n  let onesCount194 = 0;\n  let onesCount195 = 0;\n  let onesCount196 = 0;\n  let onesCount197 = 0;\n  let onesCount198 = 0;\n  let onesCount199 = 0;\n  let onesCount200 = 0;\n  let onesCount201 = 0;\n  let onesCount202 = 0;\n  let onesCount203 = 0;\n  let ones", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWord", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n  let words = [];\n  let word = '';\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let word = '';", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "gottenCloserVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  let vowels = word.split('').filter(x => x!== 'a' && x!== 'e' && x!== 'i' && x!== 'o' && x!== 'u')\n  let leftVowel = vowels.slice(0, -1).join('')\n  let rightVowel = vowels.slice(1, -1).join('')\n  let leftConsonants = leftVowel.split('')\n  let rightConsonants = rightVowel.split('')\n  let leftClosest = leftConsonants.findIndex(x => rightConsonants.includes(x))\n  let rightClosest = rightConsonants.findIndex(x => leftConsonants.includes(x))\n  if (leftClosest === -1 || rightClosest === -1) {\n    return ''\n  }\n  return leftConsonants[leftClosest] + rightConsonants[rightClosest]\n}\n\n/*\n  You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the left side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  let vowels = word.split('').filter(x => x!== 'a' && x!== 'e' && x!== 'i' && x!== 'o' && x!== 'u')\n  let leftVowel = vowels.slice(0, 1).join('')\n  let rightVowel = vowels.slice(1, -1).join('')\n  let leftConsonants = leftVowel.split('')\n  let rightConsonants = rightVowel.split('')\n  let leftClosest = leftConsonants.findIndex(x => rightConsonants.includes(x))\n  let rightClosest = rightConsonants.findIndex(x => leftConsonants.includes(x))\n  if (leftClosest === -1 || rightClosest === -1) {\n    return ''\n  }\n  return leftConsonants[leftClosest] + rightConsonants[rightClosest]\n}\n\n/*\n  You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  let vowels = word.split('').filter(x => x!== 'a' && x!== 'e' && x!== 'i' && x!== 'o' && x!== 'u')\n  let leftVowel = vowels.slice(0, -1).join('')\n  let rightVowel = vowels.slice(1, -1).join('')\n  let leftConsonants = leftVowel.split('')\n  let rightConsonants = rightVowel.split('')\n  let leftClosest = leftConsonants.findIndex(x => rightConsonants.includes(x))\n  let rightClosest = rightConsonants.findIndex(x => leftConsonants.includes(x))\n  if (leftClosest === -1 || rightClosest === -1) {\n    return ''\n  }\n  return leftConsonants[leftClosest] + rightConsonants[rightClosest]\n}\n\n/*\n  You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the left side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  let vowels = word.split('').filter(x => x!== 'a' && x!== 'e' && x!== 'i' && x!== 'o' && x!== 'u')\n  let leftVowel = vowels.slice(0, 1).join('')\n  let rightVowel = vowels.slice(1, -1).join('')\n  let leftConsonants = leftVowel.split('')\n  let rightConsonants = rightVowel.split('')\n  let leftClosest = leftConsonants.findIndex(x => rightConsonants.includes(x))\n  let rightClosest = rightConsonants.findIndex(x => leftConsonants.includes(x))\n  if (leftClosest === -1 || rightClosest === -1) {\n    return ''\n  }\n  return leftConsonants[leftClosest] + rightConsonants[rightClosest]\n}\n\n/*\n  You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  let vowels = word.split('').filter(x => x!== 'a' && x!== 'e' && x!== 'i' && x!== 'o' && x!== 'u')\n  let leftVowel = vowels.slice(0, -1).join('')\n  let rightVowel = vowels.slice(1, -1).join('')\n  let leftConsonants = leftVowel.split('')", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [lst[0]];\n  let res = '';\n  while (stack.length) {\n    const str = stack.pop();\n    if (str[0] === '(') {\n      res = res + str;\n    } else if (str[str.length - 1] === ')') {\n      res = res + str;\n    } else {\n      res = res + str + ')';\n    }\n    stack.push(str);\n  }\n  return res === '')';\n};\n\n/* You are given a string S and an integer K. Return the number of ways to make S\n  of length K by adding parentheses around every character in S.\n  Return 'No' if S is empty.\n  Examples:\n  countParens('()()', 3) == 'No'\n  countParens('()()', 0) == 'No'\n  countParens('()()', 1) == 'No'\n  countParens('()()', 2) == 'Yes'\n  countParens('()()', 3) == 'Yes'\n  countParens('()()', 4) == 'Yes'\n  countParens('()()', 5) == 'Yes'\n  */\nconst countParens = (str, k) => {\n  let res = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res += 1;\n    } else if (str[i] === ')') {\n      res -= 1;\n    }\n  }\n  return res <= k;\n};\n\n/* You are given a string S and an integer K. Return the number of ways to make S\n  of length K by removing parentheses around every character in S.\n  Return 'No' if S is empty.\n  Examples:\n  countParens('()()', 3) == 'No'\n  countParens('()()', 0) == 'No'\n  countParens('()()', 1) == 'No'\n  countParens('()()', 2) == 'No'\n  countParens('()()', 3) == 'No'\n  countParens('()()', 4) == 'No'\n  countParens('()()', 5) == 'No'\n  */\nconst countParens2 = (str, k) => {\n  let res = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res = res - 1;\n    } else if (str[i] === ')') {\n      res = res + 1;\n    }\n  }\n  return res <= k;\n};\n\n/* You are given a string S and an integer K. Return the number of ways to make S\n  of length K by adding or removing parentheses around every character in S.\n  Return 'No' if S is empty.\n  Examples:\n  countParens('()()', 3) == 'No'\n  countParens('()()', 0) == 'No'\n  countParens('()()', 1) == 'No'\n  countParens('()()', 2) == 'No'\n  countParens('()()', 3) == 'No'\n  countParens('()()', 4) == 'No'\n  countParens('()()', 5) == 'No'\n  */\nconst countParens3 = str => {\n  let res = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res = res + 1;\n    } else if (str[i] === ')') {\n      res = res - 1;\n    }\n  }\n  return res <= 0;\n};\n\n/* You are given a string S and an integer K. Return the number of ways to make S\n  of length K by adding or removing parentheses around every character in S.\n  Return 'No' if S is empty.\n  Examples:\n  countParens('()()', 3) == 'No'\n  countParens('()()', 0) == 'No'\n  countParens('()()', 1) == 'No'\n  countParens('()()', 2) == 'No'\n  countParens('()()', 3) == 'No'\n  countParens('()()', 4) == 'No'\n  countParens('()()', 5) == 'No'\n  */\nconst countParens4 = str => {\n  let res = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res = res - 1;\n    } else if (str[i] === ')') {\n      res = res + 1;\n    }\n  }\n  return res <= 0;\n};\n\n/* You are given a string S and an integer K. Return the number of ways to make S\n  of length K by adding or removing parentheses around every character in S.\n  Return 'No' if S is empty.\n  Examples:\n  countParens('()()', 3) == 'No'\n  countParens('()()', 0) == 'No'\n  countParens('()()', 1) == 'No'\n  countParens('()()', 2) == 'No'\n  countParens('()()', 3) == 'No'\n  countParens('()()', 4) == 'No'\n  countParens('()()', 5) == 'No'\n  */\nconst countParens5 = str => {\n  let res = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res = res + 1;\n    } else if (str[i] === ')') {\n      res = res - 1;\n    }\n  }\n  return res <= 0;\n};\n\n/* You are given a string S and an integer K. Return the number of ways to make S\n  of length K by adding or removing parentheses around every character in S.\n  Return 'No' if S is empty.\n  Examples:\n  countParens('()()', 3) == 'No'\n  countParens('()()', 0) == 'No'\n  countParens('()()', 1) == 'No'\n  countParens('()()', 2) == 'No'\n  countParens('()()', 3) == 'No'\n  countParens('()()', 4) == 'No'\n  countParens('()()', 5) == 'No'\n  */\nconst countParens6 = str => {\n  let res = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res = res + 1;\n    } else if (str[i] === ')') {\n      res = res - 1;\n    }\n  }\n  return res <= 0;\n};\n\n/* You are given a string S and an integer K. Return the number of ways to make S\n  of length K by adding or removing parentheses around every character in S.\n  Return 'No' if S is empty.\n  Examples:\n  countParens('()()', 3) == 'No'\n  countParens('()()', 0) == 'No'\n  countParens('()()', 1) == 'No'\n  countParens('()()', 2) == 'No'\n  countParens('()()', 3) == 'No'\n  countParens('()()', 4) == 'No'\n  countParens('()()', 5) == 'No'\n  */\nconst countParens7 = str => {\n  let res = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      res = res + 1;\n    } else if (str[i] === ')') {\n      res = res - 1;\n    }\n  }\n  return res <= 0;\n};\n\n/* You are given a string S and an integer K. Return the number of ways to make S\n  of length K by adding or removing parentheses around ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longer", "gc": "<|endoftext|>/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const length = strings[0].length\n  let longest = ''\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > length) {\n      length = strings[i].length\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n  Returns a string that is the concatenation of the given strings.\n  >>> concat(['a', 'b', 'c'])\n  'abc'\n  >>> concat(['a', 'bb', 'ccc'])\n  'abcbbccc'\n  */\nconst concat = (...strings) => {\n  return strings.join('')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings.\n  >>> concat(['a', 'b', 'c'], ['d', 'e', 'f'])\n  'abcdef'\n  >>> concat(['a', 'bb', 'ccc'], ['d', 'e', 'f'])\n  'abcbbcccdef'\n  */\nconst concatWith = (...strings) => {\n  return strings.join('')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings.\n  >>> concatWith(\n ...   ['a', 'b', 'c'],\n ...   ['d', 'e', 'f'],\n ...   ['g', 'h', 'i']\n ... )\n  'abcdefghi'\n  >>> concatWith(\n ...   ['a', 'bb', 'ccc'],\n ...   ['d', 'e', 'f'],\n ...   ['g', 'h', 'i']\n ... )\n  'abcbbcccdefghi'\n  */\nconst concatWith = (...strings) => {\n  return strings.join('')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings.\n  >>> concatWith(\n ...   ['a', 'b', 'c'],\n ...   ['d', 'e', 'f'],\n ...   ['g', 'h', 'i'],\n ...   ['j', 'k', 'l']\n ... )\n  'abcdefghijkl'\n  >>> concatWith(\n ...   ['a', 'bb', 'ccc'],\n ...   ['d', 'e', 'f'],\n ...   ['g', 'h', 'i'],\n ...   ['j', 'k', 'l'],\n ...   ['m', 'n', 'o']\n ... )\n  'abcbbcccdefghijklmo'\n  */\nconst concatWith = (...strings) => {\n  return strings.join('')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings.\n  >>> concatWith(\n ...   ['a', 'b', 'c'],\n ...   ['d', 'e', 'f'],\n ...   ['g', 'h', 'i'],\n ...   ['j', 'k', 'l'],\n ...   ['m', 'n', 'o'],\n ...   ['p', 'q', 'r']\n ... )\n  'abcdefghijklmopqr'\n  >>> concatWith(\n ...   ['a', 'bb', 'ccc'],\n ...   ['d', 'e', 'f'],\n ...   ['g', 'h', 'i'],\n ...   ['j', 'k', 'l'],\n ...   ['m', 'n', 'o'],\n ...   ['p', 'q', 'r'],\n ...   ['s', 't', 'u']\n ... )\n  'abcbbcccdefghijklmopqrstuv'\n  */\nconst concatWith = (...strings) => {\n  return strings.join('')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings.\n  >>> concatWith(\n ...   ['a', 'b', 'c'],\n ...   ['d', 'e', 'f'],\n ...   ['g', 'h', 'i'],\n ...   ['j', 'k', 'l'],\n ...   ['m', 'n', 'o'],\n ...   ['p', 'q', 'r'],\n ...   ['s', 't', 'u'],\n ...   ['v', 'w', 'x']\n ... )\n  'abcdefghijklmopqrstuvwxyz'\n  >>> concatWith(\n ...   ['a', 'bb', 'ccc'],\n ...   ['d', 'e', 'f'],\n ...   ['g', 'h', 'i'],\n ...   ['j', 'k', 'l'],\n ...   ['m', 'n', 'o'],\n ...   ['p', 'q', 'r'],\n ...   ['s', 't', 'u'],\n ...   ['v', 'w', 'x'],\n ...   ['y', 'z', '0']\n ... )\n  'abcbbcccdefghijklmopqrstuvwxyz012345'\n  */\nconst concatWith = (...strings) => {\n  return strings.join('')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings.\n  >>> concatWith(\n ...   ['a', 'b', 'c'],\n ...   ['d', 'e', 'f'],\n ...   ['g', 'h', 'i'],\n ...   ['j', 'k', 'l'],\n ...   ['m', 'n', 'o'],\n ...   ['p', 'q', 'r'],\n ...   ['s', 't', 'u'],\n ...   ['v', 'w', 'x'],\n ...   ['y', 'z', '0'],\n ...   ['1', '2', '3'],\n ...   ['4', '5', '6']\n ... )\n  'abcdefghijklmopqrstuvwxyz0123451q2w3e4r5s6'\n  */\nconst concatWith = (...strings) => {\n  return strings.join('')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings.\n  >>> concatWith(\n ...   ['a', 'b', 'c'],\n ...   ['d', 'e', 'f'],\n ...   ['g', 'h', 'i'],\n ...   ['j', 'k', 'l'],\n ...   ['m', 'n', 'o'],\n ...   ['p', 'q', 'r'],\n ...   ['s', 't', 'u'],\n ...   ['v', 'w', 'x'],\n ...   ['y', 'z', '0'],\n ...   ['1', '2', '3'],\n ...   ['4', '5', '6'],\n ...   ['7', '8', '9']\n ... )\n  'abcdefghijklmopqrstuvwxyz0123451q2w3e4r5s6g7v8'\n  */\nconst concatWith = (...strings) => {\n  return strings.join('')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings.\n  >>> concatWith(\n ...   ['a', 'b', 'c'],\n ...   ['d', 'e', 'f'],\n ...   ['g', 'h', 'i'],\n ...   ['j', 'k', 'l'],\n ...   ['m', 'n', 'o'],\n ...   ['p', 'q', 'r'],\n ...   ['s', 't', 'u'],\n ...   ['v', 'w', 'x'],\n ...   ['y', 'z', '0'],\n ...   ['1', '2', '3'],\n ...   ['4', '5', '6'],\n ...   ['7', '8', '9'],\n ...   ['0', '1', '2'],\n ...   ['3', '4', '5'],\n ...   ['6', '7', '8']\n ... )\n  'abcdefghijklmopqrstuvwxyz0123451q2w3e4r5s6g7v8012345'\n  */\nconst concatWith = (...strings) => {\n  return strings.join('')\n}\n\n/**\n  Returns a string that is the concatenation of the given strings.\n  >>> concatWith(\n ...   ['a', 'b', 'c", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximums", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      result.push(max);\n    }\n    if (arr[i] < min) {\n      result.push(min);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countUniquePositiveIntegers = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countUniquePositiveIntegersII = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countUniquePositiveIntegersIII = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countUniquePositiveIntegersIV = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countUniquePositiveIntegersV = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countUniquePositiveIntegersVI = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countUniquePositiveIntegersVII = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countUniquePositiveIntegersVIII = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countUniquePositiveIntegersIX = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countUniquePositiveIntegersX = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countUniquePositiveIntegersXI = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-positive-integers/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solutions", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],11:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],12:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],13:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],14:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],15:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],16:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],17:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],18:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],19:[function(require,module,exports){\n/*\n  Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const len = arr.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += arr[i];\n    if (sum >= k) {\n      break;\n    }\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/discuss/418/Java-Solution-for-Remove-Duplicates-from-Sorted-Array\n// https://leetcode.com/problems/remove-duplicates-from-sorted-array/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "gottenOdderCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n  let collatz = [];\n  let curr = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(curr);\n      curr = curr * 3 + (n % 2 === 1? 1 : -1);\n      n = Math.floor(n / 2);\n    } else {\n      curr = curr * 3 + (n % 2 === 1? 1 : -1);\n      n = Math.floor(n / 2);\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenEvenCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, 16, and 8.\n  */\nconst gottenEvenCollatz = (n) => {\n  let collatz = [];\n  let curr = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(curr);\n      curr = curr * 3 + (n % 2 === 1? 1 : -1);\n      n = Math.floor(n / 2);\n    } else {\n      curr = curr * 3 + (n % 2 === 1? 1 : -1);\n      n = Math.floor(n / 2);\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenPrimeCollatz(5) returns [1, 5, 7, 11, 13, 17, 19, 23] # The collatz sequence for 5 is [1, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997] # The collatz sequence for 5 is [1, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997] # The collatz sequence for 5 is [1, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 4", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDates", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  const [month, day, year] = date.split('-');\n  const isMonthValid = (month >= 1 && month <= 12);\n  const isDayValid = (day >= 1 && day <= 31);\n  const isYearValid = (year >= 0 && year <= 9999);\n\n  return isMonthValid && isDayValid && isYearValid;\n};\n\n/*\n  Given a date string and a date object, this function returns true if the date string is in the format: mm-dd-yyyy\n  If the date string is not in the format: mm-dd-yyyy, this function returns false.\n*/\nconst isValidDate = (date, dateObject) => {\n  const [month, day, year] = date.split('-');\n  const isMonthValid = (month >= 1 && month <= 12);\n  const isDayValid = (day >= 1 && day <= 31);\n  const isYearValid = (year >= 0 && year <= 9999);\n\n  return isMonthValid && isDayValid && isYearValid;\n};\n\n/*\n  Given a date string and a date object, this function returns true if the date string is in the format: mm-dd-yyyy\n  If the date string is not in the format: mm-dd-yyyy, this function returns false.\n*/\nconst isValidDates = (dates, dateObject) => {\n  const [month, day, year] = dates.split('-');\n  const isMonthValid = (month >= 1 && month <= 12);\n  const isDayValid = (day >= 1 && day <= 31);\n  const isYearValid = (year >= 0 && year <= 9999);\n\n  return isMonthValid && isDayValid && isYearValid;\n};\n\n/*\n  Given a date string and a date object, this function returns true if the date string is in the format: mm-dd-yyyy\n  If the date string is not in the format: mm-dd-yyyy, this function returns false.\n*/\nconst isValidDatesArray = (dates, dateObject) => {\n  const [month, day, year] = dates.split('-');\n  const isMonthValid = (month >= 1 && month <= 12);\n  const isDayValid = (day >= 1 && day <= 31);\n  const isYearValid = (year >= 0 && year <= 9999);\n\n  return isMonthValid && isDayValid && isYearValid;\n};\n\n/*\n  Given a date string and a date object, this function returns true if the date string is in the format: mm-dd-yyyy\n  If the date string is not in the format: mm-dd-yyyy, this function returns false.\n*/\nconst isValidDatesArrays = (dates, dateObject) => {\n  const [month, day, year] = dates.split('-');\n  const isMonthValid = (month >= 1 && month <= 12);\n  const isDayValid = (day >= 1 && day <= 31);\n  const isYearValid = (year >= 0 && year <= 9999);\n\n  return isMonthValid && isDayValid && isYearValid;\n};\n\n/*\n  Given a date string and a date object, this function returns true if the date string is in the format: mm-dd-yyyy\n  If the date string is not in the format: mm-dd-yyyy, this function returns false.\n*/\nconst isValidDatesArraysArray = (dates, dateObject) => {\n  const [month, day, year] = dates.split('-');\n  const isMonthValid = (month >= 1 && month <= 12);\n  const isDayValid = (day >= 1 && day <= 31);\n  const isYearValid = (year >= 0 && year <= 9999);\n\n  return isMonthValid && isDayValid && isYearValid;\n};\n\n/*\n  Given a date string and a date object, this function returns true if the date string is in the format: mm-dd-yyyy\n  If the date string is not in the format: mm-dd-yyyy, this function returns false.\n*/\nconst isValidDatesArraysArrays = (dates, dateObject) => {\n  const [month, day, year] = dates.split('-');\n  const isMonthValid = (month >= 1 && month <= 12);\n  const isDayValid = (day >= 1 && day <= 31);\n  const isYearValid = (year >= 0 && year <= 9999);\n\n  return isMonthValid && isDayValid && isYearValid;\n};\n\n/*\n  Given a date string and a date object, this function returns true if the date string is in the format: mm-dd-yyyy\n  If the date string is not in the format: mm-dd-yyyy, this function returns false.\n*/\nconst isValidDatesArraysArraysArray = (dates, dateObject) => {\n  const [month, day, year] = dates.split('-');\n  const isMonthValid = (month >= 1 && month <= 12);\n  const isDayValid = (day >= 1 && day <= 31);\n  const isYearValid = (year >= 0 && year <= 9999);\n\n  return isMonthValid && isDayValid && isYearValid;\n};\n\n/*\n  Given a date string and a date object, this function returns true if the date string is in the format: mm-dd-yyyy\n  If the date string is not in the format: mm-dd-yyyy, this function returns false.\n*/\nconst isValidDatesArraysArraysArrays = (dates, dateObject) => {\n  const [month, day, year] = dates.split('-');\n  const isMonthValid = (month >= 1 && month <= 12);\n  const isDayValid = (day >= 1 && day <= 31);\n  const isYearValid = (year >= 0 && year <= 9999);\n\n  return isMonthValid && isDayValid && isYearValid;\n};\n\n/*\n  Given a date string and a date object, this function returns true if the date string is in the format: mm-dd-yyyy\n  If the date string is not in the format: mm-dd-yyyy, this function returns false.\n*/\nconst isValidDatesArraysArraysArraysArray = (dates, dateObject) => {\n  const [month, day, year] = dates.split('-');\n  const isMonthValid = (month >= 1 && month <= 12);\n  const isDayValid = (day >= 1 && day <= 31);\n  const isYearValid = (year >= 0 && year <= 9999);\n\n  return isMonthValid && isDayValid && isYearValid;\n};\n\n/*\n  Given a date string and a date object, this function returns true if the date string is in the format: mm-dd-yyyy\n  If the date string is not in the format: mm-dd-yyyy, this function returns false.\n*/\nconst isValidDatesArraysArraysArraysArraysArray = (dates, dateObject) => {\n  const [month, day, year] = dates.split('-');\n  const isMonthValid = (month >= 1 && month <= 12);\n  const isDayValid = (day >= 1 && day <= 31);\n  const isYearValid = (year >= 0 && year <= 9999);\n\n  return isMonthValid && isDayValid && isYearValid;\n};\n\n/*\n  Given a date string and a date object, this function returns true if the date string is in the format: mm-dd-yyyy\n  If the date string is not in the format: mm", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWord", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  let words = txt.split(\" \");\n  let numWords = words.length;\n  let numLetters = numWords;\n  let numLettersOdd = 0;\n  let letters = [];\n  let letter;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSort", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n  let sorted = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = true;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n * in descending order. If list has more than 1 duplicate of the same\n * number, return false. Assume no negative numbers and only integers.\n * Examples\n  isDescSort([5]) ➞ false\n  isDescSort([1, 2, 3, 4, 5]) ➞ true\n  isDescSort([1, 3, 2, 4, 5]) ➞ true\n  isDescSort([1, 2, 3, 4, 5, 6]) ➞ false\n  isDescSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isDescSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isDescSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isDescSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDescSort = (lst) => {\n  let sorted = false;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] < lst[i + 1]) {\n      sorted = true;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n * in ascending order and in descending order. If list has more than 1\n * duplicate of the same number, return false. Assume no negative numbers\n * and only integers.\n * Examples\n  isDescSortAndSort([5]) ➞ false\n  isDescSortAndSort([1, 2, 3, 4, 5]) ➞ true\n  isDescSortAndSort([1, 3, 2, 4, 5]) ➞ true\n  isDescSortAndSort([1, 2, 3, 4, 5, 6]) ➞ false\n  isDescSortAndSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isDescSortAndSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isDescSortAndSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isDescSortAndSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDescSortAndSort = (lst) => {\n  let sorted = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = true;\n      break;\n    }\n  }\n  return isDescSort(sorted) && isSort(lst);\n};\n\n/**\n * Given a list of numbers, return whether or not they are sorted\n * in ascending order and in descending order and in ascending order\n * and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and in ascending order and in descending order and in ascending\n * order and in descending order and in ascending order and in descending\n * order and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3] = interval1;\n  const [start4, end4] = interval2;\n  const [start5, end5] = interval1;\n  const [start6, end6] = interval2;\n  const [start7, end7] = interval1;\n  const [start8, end8] = interval2;\n  const [start9, end9] = interval1;\n  const [start10, end10] = interval2;\n  const [start11, end11] = interval1;\n  const [start12, end12] = interval2;\n  const [start13, end13] = interval1;\n  const [start14, end14] = interval2;\n  const [start15, end15] = interval1;\n  const [start16, end16] = interval2;\n  const [start17, end17] = interval1;\n  const [start18, end18] = interval2;\n  const [start19, end19] = interval1;\n  const [start20, end20] = interval2;\n  const [start21, end21] = interval1;\n  const [start22, end22] = interval2;\n  const [start23, end23] = interval1;\n  const [start24, end24] = interval2;\n  const [start25, end25] = interval1;\n  const [start26, end26] = interval2;\n  const [start27, end27] = interval1;\n  const [start28, end28] = interval2;\n  const [start29, end29] = interval1;\n  const [start30, end30] = interval2;\n  const [start31, end31] = interval1;\n  const [start32, end32] = interval2;\n  const [start33, end33] = interval1;\n  const [start34, end34] = interval2;\n  const [start35, end35] = interval1;\n  const [start36, end36] = interval2;\n  const [start37, end37] = interval1;\n  const [start38, end38] = interval2;\n  const [start39, end39] = interval1;\n  const [start40, end40] = interval2;\n  const [start41, end41] = interval1;\n  const [start42, end42] = interval2;\n  const [start43, end43] = interval1;\n  const [start44, end44] = interval2;\n  const [start45, end45] = interval1;\n  const [start46, end46] = interval2;\n  const [start47, end47] = interval1;\n  const [start48, end48] = interval2;\n  const [start49, end49] = interval1;\n  const [start50, end50] = interval2;\n  const [start51, end51] = interval1;\n  const [start52, end52] = interval2;\n  const [start53, end53] = interval1;\n  const [start54, end54] = interval2;\n  const [start55, end55] = interval1;\n  const [start56, end56] = interval2;\n  const [start57, end57] = interval1;\n  const [start58, end58] = interval2;\n  const [start59, end59] = interval1;\n  const [start60, end60] = interval2;\n  const [start61, end61] = interval1;\n  const [start62, end62] = interval2;\n  const [start63, end63] = interval1;\n  const [start64, end64] = interval2;\n  const [start65, end65] = interval1;\n  const [start66, end66] = interval2;\n  const [start67, end67] = interval1;\n  const [start68, end68] = interval2;\n  const [start69, end69] = interval1;\n  const [start70, end70] = interval2;\n  const [start71, end71] = interval1;\n  const [start72, end72] = interval2;\n  const [start73, end73] = interval1;\n  const [start74, end74] = interval2;\n  const [start75, end75] = interval1;\n  const [start76, end76] = interval2;\n  const [start77, end77] = interval1;\n  const [start78, end78] = interval2;\n  const [start79, end79] = interval1;\n  const [start80, end80] = interval2;\n  const [start81, end81] = interval1;\n  const [start82, end82] = interval2;\n  const [start83, end83] = interval1;\n  const [start84, end84] = interval2;\n  const [start85, end85] = interval1;\n  const [start86, end86] = interval2;\n  const [start87, end87] = interval1;\n  const [start88, end88] = interval2;\n  const [start89, end89] = interval1;\n  const [start90, end90] = interval2;\n  const [start91, end91] = interval1;\n  const [start92, end92] = interval2;\n  const [start93, end93] = interval1;\n  const [start94, end94] = interval2;\n  const [start95, end95] = interval1;\n  const [start96, end96] = interval2;\n  const [start97, end97] = interval1;\n  const [start98, end98] = interval2;\n  const [start99, end99] = interval1;\n  const [start100, end100] = interval2;\n  const [start101, end101] = interval1;\n  const [start102, end102] = interval2;\n  const [start103, end103] = interval1;\n  const [start104, end104] = interval2;\n  const [start105, end105] = interval1;\n  const [start106, end106] = interval2;\n  const [start107, end107] = interval1;\n  const [start108, end108] = interval2;\n  const [start109, end109] = interval1;\n  const [start110, end110] = interval2;\n  const [start111, end111] = interval1;\n  const [start112, end112] = interval2;\n  const [start113, end113] = interval1;\n  const [start114, end114] = interval2;\n  const [start115, end115] = interval1;\n  const [start116, end116] = interval2;\n  const [start117, end117] = interval1;\n  const [start118, end118] = interval2;\n  const [start119, end119] = interval1;\n  const [start120, end120] = interval2;\n  const [start121, end121] = interval1;\n  const [start122, end122] = interval2;\n  const [start123, end123] = interval1;\n  const [start124, end124] = interval2;\n  const [start125, end125] = interval1;\n  const [start126, end126] = interval2;\n  const [start127, end127] = interval1;\n  const [start128, end128] = interval2;\n  const [start129, end129] = interval1;\n  const [start", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodsSign", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = arr.map(n => n % 2 === 1? 1 : -1)\n  return signs.reduce((acc, n) => acc + Math.abs(n), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign2 = arr => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = arr.map(n => n % 2 === 1? 1 : -1)\n  return signs.reduce((acc, n) => acc + Math.abs(n), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign2([1, 2, 2, -4]) == -9\n  >>> prodsSign2([0, 1]) == 0\n  >>> prodsSign2([]) == null\n  */\nconst prodsSign3 = arr => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = arr.map(n => n % 2 === 1? 1 : -1)\n  return signs.reduce((acc, n) => acc + Math.abs(n), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign3([1, 2, 2, -4]) == -9\n  >>> prodsSign3([0, 1]) == 0\n  >>> prodsSign3([]) == null\n  */\nconst prodsSign4 = arr => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = arr.map(n => n % 2 === 1? 1 : -1)\n  return signs.reduce((acc, n) => acc + Math.abs(n), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign4([1, 2, 2, -4]) == -9\n  >>> prodsSign4([0, 1]) == 0\n  >>> prodsSign4([]) == null\n  */\nconst prodsSign5 = arr => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = arr.map(n => n % 2 === 1? 1 : -1)\n  return signs.reduce((acc, n) => acc + Math.abs(n), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign5([1, 2, 2, -4]) == -9\n  >>> prodsSign5([0, 1]) == 0\n  >>> prodsSign5([]) == null\n  */\nconst prodsSign6 = arr => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = arr.map(n => n % 2 === 1? 1 : -1)\n  return signs.reduce((acc, n) => acc + Math.abs(n), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign6([1, 2, 2, -4]) == -9\n  >>> prodsSign6([0, 1]) == 0\n  >>> prodsSign6([]) == null\n  */\nconst prodsSign7 = arr => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = arr.map(n => n % 2 === 1? 1 : -1)\n  return signs.reduce((acc, n) => acc + Math.abs(n), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign7([1, 2, 2, -4]) == -9\n  >>> prodsSign7([0, 1]) == 0\n  >>> prodsSign7([]) == null\n  */\nconst prodsSign8 = arr => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = arr.map(n => n % 2 === 1? 1 : -1)\n  return signs.reduce((acc, n) => acc + Math.abs(n), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign8([1, 2, 2, -4]) == -9\n  >>> prodsSign8([0, 1]) == 0\n  >>> prodsSign8([]) == null\n  */\nconst prodsSign9 = arr => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = arr.map(n => n % 2 === 1? 1 : -1)\n  return signs.reduce((acc, n) => acc + Math.abs(n), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign9([1, 2, 2, -4]) == -9\n  >>> prodsSign9([0, 1]) == 0\n  >>> prodsSign9([]) == null\n  */\nconst prodsSign10 = arr => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = arr.map(n => n % 2 === 1? 1 : -1)\n  return signs.reduce((acc, n) => acc + Math.abs(n), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign10([1, 2, 2, -4]) == -9\n  >>> prodsSign10([0, 1]) == 0\n  >>> prodsSign10([]) == null\n  */\nconst prodsSign11 = arr => {\n  if (arr.length === 0) {\n    return null\n  }\n  const signs = arr.map(n => n % 2 === 1? 1 : -1)\n  return signs.reduce((acc, n) => acc + Math.abs(n), 0)\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPaths", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [path] = [[0, 0], [0, cols - 1]];\n  let visited = new Array(rows).fill(false);\n  let result = [];\n\n  grid.forEach((row, i) => {\n    row.forEach((val, j) => {\n      if (visited[j]) {\n        return;\n      }\n      visited[j] = true;\n      result.push(val);\n      path.push([i, j]);\n    });\n  });\n\n  path.forEach(([x, y]) => {\n    if (result.length >= k) {\n      return;\n    }\n    const [a, b] = path;\n    const [c, d] = path;\n    if (a === c && b === d) {\n      return;\n    }\n    if (a === c || b === d) {\n      result.push(a);\n      result.push(b);\n      result.push(c);\n      result.push(d);\n    }\n  });\n\n  return result;\n};\n\n/**\n * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n * each cell of the grid contains a value. Every integer in the range [1, N * N]\n * inclusive appears exactly once on the cells of the grid.\n\n * You are given two lists of integers lst_A and lst_B. Return the minimum path\n * of length k in the grid. You can start from any cell, and in each step you can move\n * to any of the neighbor cells, in other words, you can go to cells which share an edge\n * with you current cell.\n * Please note that a path of length k means visiting exactly k cells (not\n * necessarily distinct).\n * You CANNOT go off the grid.\n * A path A (of length k) is considered less than a path B (of length k) if\n * after making the ordered lists of the values on the cells that A and B go\n * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n * lst_A[j] = lst_B[j].\n * It is guaranteed that the answer is unique.\n * Return an ordered list of the values on the cells that the minimum path go through.\n\n * Examples:\n\n * Input: lst_A = [1,2,3], lst_B = [4,5,6]\n * Output: [1,2,1]\n\n * Input: lst_A = [5,9,3], lst_B = [4,1,6]\n * Output: [1]\n */\nconst minPathsB = (lst_A, lst_B) => {\n  const [rows, cols] = lst_A.length;\n  const [path] = [[0, 0], [0, cols - 1]];\n  let visited = new Array(rows).fill(false);\n  let result = [];\n\n  lst_A.forEach((row, i) => {\n    row.forEach((val, j) => {\n      if (visited[j]) {\n        return;\n      }\n      visited[j] = true;\n      result.push(val);\n      path.push([i, j]);\n    });\n  });\n\n  path.forEach(([x, y]) => {\n    if (result.length >= k) {\n      return;\n    }\n    const [a, b] = path;\n    const [c, d] = path;\n    if (a === c && b === d) {\n      return;\n    }\n    if (a === c || b === d) {\n      result.push(a);\n      result.push(b);\n      result.push(c);\n      result.push(d);\n    }\n  });\n\n  return result;\n};\n\n/**\n * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n * each cell of the grid contains a value. Every integer in the range [1, N * N]\n * inclusive appears exactly once on the cells of the grid.\n\n * You are given two lists of integers lst_A and lst_B. Return the minimum path\n * of length k in the grid. You can start from any cell, and in each step you can move\n * to any of the neighbor cells, in other words, you can go to cells which share an edge\n * with you current cell.\n * Please note that a path of length k means visiting exactly k cells (not\n * necessarily distinct).\n * You CANNOT go off the grid.\n * A path A (of length k) is considered less than a path B (of length k) if\n * after making the ordered lists of the values on the cells that A and B go\n * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n * lst_A[j] = lst_B[j].\n * It is guaranteed that the answer is unique.\n * Return an ordered list of the values on the cells that the minimum path go through.\n\n * Examples:\n\n * Input: lst_A = [1,2,3], lst_B = [4,5,6]\n * Output: [1,2,1]\n\n * Input: lst_A = [5,9,3], lst_B = [4,1,6]\n * Output: [1]\n */\nconst minPathsC = (lst_A, lst_B) => {\n  const [rows, cols] = lst_A.length;\n  const [path] = [[0, 0], [0, cols - 1]];\n  let visited = new Array(rows).fill(false);\n  let result = [];\n\n  lst_A.forEach((row, i) => {\n    row.forEach((val, j) => {\n      if (visited[j]) {\n        return;\n      }\n      visited[j] = true;\n      result.push(val);\n      path.push([i, j]);\n    });\n  });\n\n  path.forEach(([x, y]) => {\n    if (result.length >= k) {\n      return;\n    }\n    const [a, b] = path;\n    const [c, d] = path;\n    if (a === c && b === d) {\n      return;\n    }\n    if (a === c || b === d) {\n      result.push(a);\n      result.push(b);\n      result.push(c);\n      result.push(d);\n    }\n  });\n\n  return result;\n};\n\n/**\n * Given ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greaterCommonDivisors", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n  const gcd = (a, b) => {\n    if (a === 0 || b === 0) {\n      return 0;\n    }\n    const gcd_recur = a > b? a : b;\n    const gcd_impl = a > b? b : a;\n    return gcd_impl > gcd_recur? gcd_impl : gcd_recur;\n  };\n  return gcd(a, b);\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 10)\n  1\n  >>> randomInt(1, 10, 2)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  7\n  */\nconst randomInt = (a, b = 1, min = 0, max = Infinity) => {\n  if (a === undefined) {\n    a = 1;\n  }\n  if (b === undefined) {\n    b = 1;\n  }\n  if (min === undefined) {\n    min = 0;\n  }\n  if (max === undefined) {\n    max = Infinity;\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 10, 2)\n  1\n  >>> randomInt(1, 10, 2, 3)\n  3\n  >>> randomInt(1, 10, 2, 3)\n  7\n  */\nconst randomIntBetween = (a, b = 1, min = 0, max = Infinity) => {\n  if (a === undefined) {\n    a = 1;\n  }\n  if (b === undefined) {\n    b = 1;\n  }\n  if (min === undefined) {\n    min = 0;\n  }\n  if (max === undefined) {\n    max = Infinity;\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomIntBetween(1, 10, 2)\n  1\n  >>> randomIntBetween(1, 10, 2, 3)\n  3\n  >>> randomIntBetween(1, 10, 2, 3)\n  7\n  */\nconst randomIntBetweenOrDefault = (a, b = 1, min = 0, max = Infinity) => {\n  if (a === undefined) {\n    a = 1;\n  }\n  if (b === undefined) {\n    b = 1;\n  }\n  if (min === undefined) {\n    min = 0;\n  }\n  if (max === undefined) {\n    max = Infinity;\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomIntBetweenOrDefault(1, 10, 2)\n  1\n  >>> randomIntBetweenOrDefault(1, 10, 2, 3)\n  3\n  >>> randomIntBetweenOrDefault(1, 10, 2, 3)\n  7\n  */\nconst randomIntBetweenOrDefaultOrDefault = (a, b = 1, min = 0, max = Infinity) => {\n  if (a === undefined) {\n    a = 1;\n  }\n  if (b === undefined) {\n    b = 1;\n  }\n  if (min === undefined) {\n    min = 0;\n  }\n  if (max === undefined) {\n    max = Infinity;\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomIntBetweenOrDefaultOrDefault(1, 10, 2)\n  1\n  >>> randomIntBetweenOrDefaultOrDefault(1, 10, 2, 3)\n  3\n  >>> randomIntBetweenOrDefaultOrDefault(1, 10, 2, 3)\n  7\n  */\nconst randomIntBetweenOrDefaultOrDefaultOrDefault = (a, b = 1, min = 0, max = Infinity) => {\n  if (a === undefined) {\n    a = 1;\n  }\n  if (b === undefined) {\n    b = 1;\n  }\n  if (min === undefined) {\n    min = 0;\n  }\n  if (max === undefined) {\n    max = Infinity;\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomIntBetweenOrDefaultOrDefaultOrDefault(1, 10, 2)\n  1\n  >>> randomIntBetweenOrDefaultOrDefaultOrDefault(1, 10, 2, 3)\n  3\n  >>> randomIntBetweenOrDefaultOrDefaultOrDefault(1, 10, 2, 3)\n  7\n  */\nconst randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefault = (a, b = 1, min = 0, max = Infinity) => {\n  if (a === undefined) {\n    a = 1;\n  }\n  if (b === undefined) {\n    b = 1;\n  }\n  if (min === undefined) {\n    min = 0;\n  }\n  if (max === undefined) {\n    max = Infinity;\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefault(1, 10, 2)\n  1\n  >>> randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefault(1, 10, 2, 3)\n  3\n  >>> randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefault(1, 10, 2, 3)\n  7\n  */\nconst randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefault = (a, b = 1, min = 0, max = Infinity) => {\n  if (a === undefined) {\n    a = 1;\n  }\n  if (b === undefined) {\n    b = 1;\n  }\n  if (min === undefined) {\n    min = 0;\n  }\n  if (max === undefined) {\n    max = Infinity;\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefault(1, 10, 2)\n  1\n  >>> randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefault(1, 10, 2, 3)\n  3\n  >>> randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefault(1, 10, 2, 3)\n  7\n  */\nconst randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefault = (a, b = 1, min = 0, max = Infinity) => {\n  if (a === undefined) {\n    a = 1;\n  }\n  if (b === undefined) {\n    b = 1;\n  }\n  if (min === undefined) {\n    min = 0;\n  }\n  if (max === undefined) {\n    max = Infinity;\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefault(1, 10, 2)\n  1\n  >>> randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefault(1, 10, 2, 3)\n  3\n  >>> randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefault(1, 10, 2, 3)\n  7\n  */\nconst randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefault = (a, b = 1, min = 0, max = Infinity) => {\n  if (a === undefined) {\n    a = 1;\n  }\n  if (b === undefined) {\n    b = 1;\n  }\n  if (min === undefined) {\n    min = 0;\n  }\n  if (max === undefined) {\n    max = Infinity;\n  }\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefault(1, 10, 2)\n  1\n  >>> randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefault(1, 10, 2, 3)\n  3\n  >>> randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefault(1, 10, 2, 3)\n  7\n  */\nconst randomIntBetweenOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefaultOrDefault = (a, b = 1, min = 0, max = Infinity) => {\n  if (a === undefined) {\n    a = 1;\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [];\n  const arr = [1, 2];\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i-2] + arr[i-1]);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [0, 1, 1, 2, 3, 5]\n  fib(3) = [0, 1, 1, 2]\n  fib(2) = [0, 1, 1]\n  fib(1) =  0\n  fib(0) =  0\n*/\nconst fib = (n) => {\n  if (n <= 1) return [];\n  const arr = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i-2] + arr[i-1]);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  that satisfy the condition: \n  fib(k) ≤ k <= n\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [0, 1, 1, 2, 3, 5]\n  fib(3) = [0, 1, 1, 2]\n  fib(2) = [0, 1, 1]\n  fib(1) =  0\n  fib(0) =  0\n*/\nconst fibK = (n) => {\n  if (n <= 1) return [];\n  const arr = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    if (arr[i] <= n) {\n      arr.push(arr[i-2] + arr[i-1]);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  that satisfy the condition: \n  fib(k) ≤ k <= n\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [0, 1, 1, 2, 3, 5]\n  fib(3) = [0, 1, 1, 2]\n  fib(2) = [0, 1, 1]\n  fib(1) =  0\n  fib(0) =  0\n*/\nconst fibKK = (n) => {\n  if (n <= 1) return [];\n  const arr = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    if (arr[i] <= n) {\n      if (arr[i] <= n) {\n        arr.push(arr[i-2] + arr[i-1]);\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  that satisfy the condition: \n  fib(k) ≤ k <= n\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [0, 1, 1, 2, 3, 5]\n  fib(3) = [0, 1, 1, 2]\n  fib(2) = [0, 1, 1]\n  fib(1) =  0\n  fib(0) =  0\n*/\nconst fibKKK = (n) => {\n  if (n <= 1) return [];\n  const arr = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    if (arr[i] <= n) {\n      if (arr[i] <= n) {\n        if (arr[i] <= n) {\n          arr.push(arr[i-2] + arr[i-1]);\n        }\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  that satisfy the condition: \n  fib(k) ≤ k <= n\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [0, 1, 1, 2, 3, 5]\n  fib(3) = [0, 1, 1, 2]\n  fib(2) = [0, 1, 1]\n  fib(1) =  0\n  fib(0) =  0\n*/\nconst fibKKKK = (n) => {\n  if (n <= 1) return [];\n  const arr = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    if (arr[i] <= n) {\n      if (arr[i] <= n) {\n        if (arr[i] <= n) {\n          if (arr[i] <= n) {\n            if (arr[i] <= n) {\n              if (arr[i] <= n) {\n                if (arr[i] <= n) {\n                  arr.push(arr[i-2] + arr[i-1]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  that satisfy the condition: \n  fib(k) ≤ k <= n\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [0, 1, 1, 2, 3, 5]\n  fib(3) = [0, 1, 1, 2]\n  fib(2) = [0, 1, 1]\n  fib(1) =  0\n  fib(0) =  0\n*/\nconst fibKKKKK = (n) => {\n  if (n <= 1) return [];\n  const arr = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    if (arr[i] <= n) {\n      if (arr[i] <= n) {\n        if (arr[i] <= n) {\n          if (arr[i] <= n) {\n            if (arr[i] <= n) {\n              if (arr[i] <= n) {\n                if (arr[i] <= n) {\n                  if (arr[i] <= n) {\n                    if (arr[i] <= n) {\n                      if (arr[i] <= n) {\n                        if (arr[i] <= n) {\n                          if (arr[i] <= n) {\n                            if (arr[i] <= n) {\n                              if (arr[i] <= n) {\n                                if (arr[i] <= n) {\n                                  if (arr[i] <= n) {\n                                    if (arr[i] <= n) {\n                                      if (arr[i] <= n) {\n                                        if (arr[i] <= n) {\n                                          if (arr[i] <= n) {\n                                            if (arr[i] <= n) {\n                                              if (arr[i] <= n) {\n                                                arr.push(arr[i-2] + arr[i-1]);\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  that satisfy the condition: \n  fib(k) ≤ k <= n\n  Examples:\n  fib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [0, 1, 1, 2, 3, 5]\n  fib(3) = [0, 1, 1, 2]\n  fib(2) = [0, 1, 1]\n  fib(1) =  0\n  fib(0) =  0\n*/\nconst fibKKKKKK = (n) => {\n  if (n <= 1) return [];\n  const arr = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    if (arr[i] <= n) {\n      if (arr[i] <= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even digit.\n  Return 0 if all digit are odd.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digitEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of its digit.\n  Return 0 if n is 0.\n  For example:\n  digit(2) == 3\n  digit(2) == 3\n  digit(2) == 3\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digit.\n  Return 0 if n is 0.\n  For example:\n  digitSum(2) == 3\n  digitSum(2) == 3\n  digitSum(2) == 3\n  */\nconst digitSumEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of its digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumEven(2) == 3\n  digitSumEven(2) == 3\n  digitSumEven(2) == 3\n  */\nconst digitSumOdd = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of its digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumOdd(2) == 3\n  digitSumOdd(2) == 3\n  digitSumOdd(2) == 3\n  */\nconst digitSumOddEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of its digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumOddEven(2) == 3\n  digitSumOddEven(2) == 3\n  digitSumOddEven(2) == 3\n  */\nconst digitSumOddOddEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of its digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumOddOddEven(2) == 3\n  digitSumOddOddEven(2) == 3\n  digitSumOddOddEven(2) == 3\n  */\nconst digitSumOddOddOddEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of its digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumOddOddOddEven(2) == 3\n  digitSumOddOddOddEven(2) == 3\n  digitSumOddOddOddEven(2) == 3\n  */\nconst digitSumOddOddOddOddEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of its digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumOddOddOddOddEven(2) == 3\n  digitSumOddOddOddOddEven(2) == 3\n  digitSumOddOddOddOddEven(2) == 3\n  */\nconst digitSumOddOddOddOddOddEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of its digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumOddOddOddOddOddEven(2) == 3\n  digitSumOddOddOddOddOddEven(2) == 3\n  digitSumOddOddOddOddOddEven(2) == 3\n  */\nconst digitSumOddOddOddOddOddOddEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of its digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumOddOddOddOddOddOddEven(2) == 3\n  digitSumOddOddOddOddOddOddEven(2) == 3\n  digitSumOddOddOddOddOddOddEven(2) == 3\n  */\nconst digitSumOddOddOddOddOddOddOddEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of its digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumOddOddOddOddOddOddOddEven(2) == 3\n  digitSumOddOddOddOddOddOddOddEven(2) == 3\n  digitSumOddOddOddOddOddOddOddEven(2) == 3\n  */\nconst digitSumOddOddOddOddOddOddOddOddEven = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum % 2 === 0;\n};\n\n/*Given a positive integer n, return the sum of its digit.\n  Return 0 if n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = []\n  let found = false\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      if (stack.length === 0) {\n        found = true\n      } else {\n        stack.push(string[i])\n      }\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        found = true\n      } else {\n        const lastBracket = stack.pop()\n        if (lastBracket === '[') {\n          found = true\n        } else {\n          found = false\n        }\n      }\n    }\n  }\n  return found\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = []\n  let found = false\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      if (stack.length === 0) {\n        found = true\n      } else {\n        stack.push(string[i])\n      }\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        found = true\n      } else {\n        const lastBracket = stack.pop()\n        if (lastBracket === '[') {\n          found = true\n        } else {\n          found = false\n        }\n      }\n    }\n  }\n  return found\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = []\n  let found = false\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      if (stack.length === 0) {\n        found = true\n      } else {\n        stack.push(string[i])\n      }\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        found = true\n      } else {\n        const lastBracket = stack.pop()\n        if (lastBracket === '[') {\n          found = true\n        } else {\n          found = false\n        }\n      }\n    }\n  }\n  return found\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = []\n  let found = false\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      if (stack.length === 0) {\n        found = true\n      } else {\n        stack.push(string[i])\n      }\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        found = true\n      } else {\n        const lastBracket = stack.pop()\n        if (lastBracket === '[') {\n          found = true\n        } else {\n          found = false\n        }\n      }\n    }\n  }\n  return found\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = []\n  let found = false\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      if (stack.length === 0) {\n        found = true\n      } else {\n        stack.push(string[i])\n      }\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        found = true\n      } else {\n        const lastBracket = stack.pop()\n        if (lastBracket === '[') {\n          found = true\n        } else {\n          found = false\n        }\n      }\n    }\n  }\n  return found\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = []\n  let found = false\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      if (stack.length === 0) {\n        found = true\n      } else {\n        stack.push(string[i])\n      }\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        found = true\n      } else {\n        const lastBracket = stack.pop()\n        if (lastBracket === '[') {\n          found = true\n        } else {\n          found = false\n        }\n      }\n    }\n  }\n  return found\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const stack = []\n  let found", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  let sumSquares = 0;\n  let sumSquared = 0;\n  let sumSquaredSquares = 0;\n  let sumSquaredSquared = 0;\n  let sumSquaredSquaredSquares = 0;\n  let sumSquaredSquaredSquaredSquares = 0;\n  let sumSquaredSquaredSquaredSquaredSquares = 0;\n  let sumSquaredSquaredSquaredSquaredSquaredSquared = 0;\n  let sumSquaredSquaredSquaredSquaredSquaredSquaredSquares = 0;\n  let sumSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = 0;\n  let sumSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquares = 0;\n  let sumSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = 0;\n  let sumSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = 0;\n  let sumSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = 0;\n  let sumSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = 0;\n  let sumSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared = 0;\n  let sumSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharsIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsDigit(\"apple pie\") ➞ false\n  checkIfLastCharsIsDigit(\"apple pi e\") ➞ true\n  checkIfLastCharsIsDigit(\"apple pi e \") ➞ false\n  checkIfLastCharsIsDigit(\"\") ➞ false\n  */\nconst checkIfLastCharsIsDigit = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharsIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharsIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharsIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharsIsLetterOrDigit = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsLetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsLetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsLetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsLetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsLetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsDigit(\"apple pie\") ➞ false\n  checkIfLastCharsIsDigit(\"apple pi e\") ➞ true\n  checkIfLastCharsIsDigit(\"apple pi e \") ➞ false\n  checkIfLastCharsIsDigit(\"\") ➞ false\n  */\nconst checkIfLastCharsIsDigit = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharsIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharsIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharsIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharsIsLetterOrDigit = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsLetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsLetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsLetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsLetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsLetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsDigit(\"apple pie\") ➞ false\n  checkIfLastCharsIsDigit(\"apple pi e\") ➞ true\n  checkIfLastCharsIsDigit(\"apple pi e \") ➞ false\n  checkIfLastCharsIsDigit(\"\") ➞ false\n  */\nconst checkIfLastCharsIsDigit = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar ==='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!';\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharsIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharsIsLetterOrDigit(\"apple pi e \") ➞ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArranging", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i >= 0 && arr[i] > arr[max]) {\n    max = i;\n    i--;\n  }\n  return max;\n};\n\n/**\n  Given an array of integers, return an array which contains all the\n  integers except the one at the given index. For example,\n  givenArray([1,2,3,4,5], 2) should return [3,4,5].\n\n  Examples:\n  givenArray([1,2,3,4,5], 2) should return [3,4,5]\n  givenArray([1,2,3,4,5], 3) should return [1,2,3]\n  givenArray([1,2,3,4,5], 4) should return [1,2,4]\n  givenArray([1,2,3,4,5], 5) should return [1,2,3,4,5]\n  */\nconst givenArray = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all the\n  integers except the one at the given index. For example,\n  givenArray([1,2,3,4,5], 2) should return [3,4,5].\n\n  Examples:\n  givenArray([1,2,3,4,5], 2) should return [3,4,5]\n  givenArray([1,2,3,4,5], 3) should return [1,2,3]\n  givenArray([1,2,3,4,5], 4) should return [1,2,4]\n  givenArray([1,2,3,4,5], 5) should return [1,2,3,4,5]\n  */\nconst givenArrayNoDuplicates = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all the\n  integers except the one at the given index. For example,\n  givenArray([1,2,3,4,5], 2) should return [3,4,5].\n\n  Examples:\n  givenArray([1,2,3,4,5], 2) should return [3,4,5]\n  givenArray([1,2,3,4,5], 3) should return [1,2,3]\n  givenArray([1,2,3,4,5], 4) should return [1,2,4]\n  givenArray([1,2,3,4,5], 5) should return [1,2,3,4,5]\n  */\nconst givenArrayNoDuplicatesNoDuplicates = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all the\n  integers except the one at the given index. For example,\n  givenArray([1,2,3,4,5], 2) should return [3,4,5].\n\n  Examples:\n  givenArray([1,2,3,4,5], 2) should return [3,4,5]\n  givenArray([1,2,3,4,5], 3) should return [1,2,3]\n  givenArray([1,2,3,4,5], 4) should return [1,2,4]\n  givenArray([1,2,3,4,5], 5) should return [1,2,3,4,5]\n  */\nconst givenArrayNoDuplicatesNoDuplicatesNoDuplicates = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all the\n  integers except the one at the given index. For example,\n  givenArray([1,2,3,4,5], 2) should return [3,4,5].\n\n  Examples:\n  givenArray([1,2,3,4,5], 2) should return [3,4,5]\n  givenArray([1,2,3,4,5], 3) should return [1,2,3]\n  givenArray([1,2,3,4,5], 4) should return [1,2,4]\n  givenArray([1,2,3,4,5], 5) should return [1,2,3,4,5]\n  */\nconst givenArrayNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all the\n  integers except the one at the given index. For example,\n  givenArray([1,2,3,4,5], 2) should return [3,4,5].\n\n  Examples:\n  givenArray([1,2,3,4,5], 2) should return [3,4,5]\n  givenArray([1,2,3,4,5], 3) should return [1,2,3]\n  givenArray([1,2,3,4,5], 4) should return [1,2,4]\n  givenArray([1,2,3,4,5], 5) should return [1,2,3,4,5]\n  */\nconst givenArrayNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all the\n  integers except the one at the given index. For example,\n  givenArray([1,2,3,4,5], 2) should return [3,4,5].\n\n  Examples:\n  givenArray([1,2,3,4,5], 2) should return [3,4,5]\n  givenArray([1,2,3,4,5], 3) should return [1,2,3]\n  givenArray([1,2,3,4,5], 4) should return [1,2,4]\n  givenArray([1,2,3,4,5], 5) should return [1,2,3,4,5]\n  */\nconst givenArrayNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/**\n  Given an array of integers, return an array which contains all the\n  integers except the one at the given index. For example,\n  givenArray([1,2,3,4,5], 2) should return [3,4,5].\n\n  Examples:\n  givenArray([1,2,3,4,5], 2) should return [3,4,5]\n  givenArray([1,2,3,4,5], 3) should return [1,2,3]\n  givenArray([1,2,3,4,5], 4) should return [1,2,4]\n  givenArray([1,2,3,4,5], 5) should return [1,2,3,4,5]\n  */\nconst givenArrayNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largerSmallerIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const largest = lst.reduce((a, b) => Math.max(a, b), -Infinity)\n  const smallest = lst.reduce((a, b) => Math.min(a, b), Infinity)\n  return [smallest, largest]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list.\nconst consecutiveNumbers = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const [largest, smallest] = largerSmallerIntegers(lst)\n  const consecutiveNumbers = lst.reduce((a, b) => a + b, 0)\n  return [smallest, largest, consecutiveNumbers]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list that sum to n.\nconst consecutiveNumbersSum = (lst, n) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const [largest, smallest] = largerSmallerIntegers(lst)\n  const consecutiveNumbers = lst.reduce((a, b) => a + b, 0)\n  return [smallest, largest, consecutiveNumbers, n + smallest]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list that sum to n.\nconst consecutiveNumbersSumToN = (lst, n) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const [largest, smallest] = largerSmallerIntegers(lst)\n  const consecutiveNumbers = lst.reduce((a, b) => a + b, 0)\n  return [smallest, largest, consecutiveNumbers, n + smallest]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list that sum to n.\nconst consecutiveNumbersSumToNAndN = (lst, n) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const [largest, smallest] = largerSmallerIntegers(lst)\n  const consecutiveNumbers = lst.reduce((a, b) => a + b, 0)\n  return [smallest, largest, consecutiveNumbers, n + smallest]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list that sum to n.\nconst consecutiveNumbersSumToNAndNAndN = (lst, n) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const [largest, smallest] = largerSmallerIntegers(lst)\n  const consecutiveNumbers = lst.reduce((a, b) => a + b, 0)\n  return [smallest, largest, consecutiveNumbers, n + smallest]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list that sum to n.\nconst consecutiveNumbersSumToNAndNAndNAndN = (lst, n) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const [largest, smallest] = largerSmallerIntegers(lst)\n  const consecutiveNumbers = lst.reduce((a, b) => a + b, 0)\n  return [smallest, largest, consecutiveNumbers, n + smallest]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list that sum to n.\nconst consecutiveNumbersSumToNAndNAndNAndN = (lst, n) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const [largest, smallest] = largerSmallerIntegers(lst)\n  const consecutiveNumbers = lst.reduce((a, b) => a + b, 0)\n  return [smallest, largest, consecutiveNumbers, n + smallest]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list that sum to n.\nconst consecutiveNumbersSumToNAndNAndNAndNAndN = (lst, n) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const [largest, smallest] = largerSmallerIntegers(lst)\n  const consecutiveNumbers = lst.reduce((a, b) => a + b, 0)\n  return [smallest, largest, consecutiveNumbers, n + smallest]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list that sum to n.\nconst consecutiveNumbersSumToNAndNAndNAndNAndNAndN = (lst, n) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const [largest, smallest] = largerSmallerIntegers(lst)\n  const consecutiveNumbers = lst.reduce((a, b) => a + b, 0)\n  return [smallest, largest, consecutiveNumbers, n + smallest]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list that sum to n.\nconst consecutiveNumbersSumToNAndNAndNAndNAndNAndNAndN = (lst, n) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const [largest, smallest] = largerSmallerIntegers(lst)\n  const consecutiveNumbers = lst.reduce((a, b) => a + b, 0)\n  return [smallest, largest, consecutiveNumbers, n + smallest]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list that sum to n.\nconst consecutiveNumbersSumToNAndNAndNAndNAndNAndNAndNAndNAndN = (lst, n) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const [largest, smallest] = largerSmallerIntegers(lst)\n  const consecutiveNumbers = lst.reduce((a, b) => a + b, 0)\n  return [smallest, largest, consecutiveNumbers, n + smallest]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list that sum to n.\nconst consecutiveNumbersSumToNAndNAndNAndNAndNAndNAndNAndNAndNAndNAndNAndN = (lst, n) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const [largest, smallest] = largerSmallerIntegers(lst)\n  const consecutiveNumbers = lst.reduce((a, b) => a + b, 0)\n  return [smallest, largest, consecutiveNumbers, n + smallest]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list that sum to n.\nconst consecutiveNumbersSumToNAndNAndNAndNAndNAndNAndNAndNAndNAndNAndNAndNAndNAndN = (lst, n) => {\n  if (lst.length === 0) {\n    return null\n  }\n  const [largest, smallest] = largerSmallerIntegers(lst)\n  const consecutiveNumbers = lst.reduce((a, b) => a + b, 0)\n  return [smallest, largest, consecutiveNumbers, n + smallest]\n}\n\n// Given a list of numbers, return the largest and smallest number of\n// consecutive numbers in the list that sum to n.\nconst consecutiveNumbersSumToNAndNAndNAndNAndNAndNAndNAndNAndN", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comparingOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSummingEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  return n % 2 === 0 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSummingEven(-4) == false\n  isEqualToSummingEven(-6) == false\n  isEqualToSummingEven(-8) == true\n  */\nconst isEqualToSummingEvenNegative = (n) => {\n  return n % 2 === 0 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingEvenNegative(-4) == true\n  isEqualToSummingEvenNegative(-6) == false\n  isEqualToSummingEvenNegative(-8) == false\n  */\nconst isEqualToSummingEvenNegativeNegative = (n) => {\n  return n % 2 === 0 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingEvenOdd(4) == false\n  isEqualToSummingEvenOdd(6) == false\n  isEqualToSummingEvenOdd(8) == true\n  */\nconst isEqualToSummingEvenOdd = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingEvenOddNegative(4) == true\n  isEqualToSummingEvenOddNegative(6) == false\n  isEqualToSummingEvenOddNegative(8) == false\n  */\nconst isEqualToSummingEvenOddNegative = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingEvenOddOdd(4) == false\n  isEqualToSummingEvenOddOdd(6) == false\n  isEqualToSummingEvenOddOdd(8) == false\n  */\nconst isEqualToSummingEvenOddOdd = (n) => {\n  return n % 2 === 0 && n % 4 === 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingEvenOddOddNegative(4) == true\n  isEqualToSummingEvenOddOddNegative(6) == false\n  isEqualToSummingEvenOddOddNegative(8) == false\n  */\nconst isEqualToSummingEvenOddOddNegative = (n) => {\n  return n % 2 === 0 && n % 4 === 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingEvenOddOddOddOdd(4) == false\n  isEqualToSummingEvenOddOddOddOdd(6) == false\n  isEqualToSummingEvenOddOddOddOdd(8) == false\n  */\nconst isEqualToSummingEvenOddOddOddOdd = (n) => {\n  return n % 2 === 0 && n % 4 === 3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingEvenOddOddOddOddOddNegative(4) == true\n  isEqualToSummingEvenOddOddOddOddNegative(6) == false\n  isEqualToSummingEvenOddOddOddOddNegative(8) == false\n  */\nconst isEqualToSummingEvenOddOddOddOddNegative = (n) => {\n  return n % 2 === 0 && n % 4 === 3;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEvenEven(4) == false\n  isEqualToSummingEvenEven(6) == false\n  isEqualToSummingEvenEven(8) == true\n  */\nconst isEqualToSummingEvenEven = (n) => {\n  return n % 2 === 0 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSummingEvenEvenNegative(4) == false\n  isEqualToSummingEvenEvenNegative(6) == false\n  isEqualToSummingEvenEvenNegative(8) == false\n  */\nconst isEqualToSummingEvenEvenNegative = (n) => {\n  return n % 2 === 0 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingEvenEvenNegativeNegative(4) == true\n  isEqualToSummingEvenEvenNegativeNegative(6) == false\n  isEqualToSummingEvenEvenNegativeNegative(8) == false\n  */\nconst isEqualToSummingEvenEvenNegativeNegative = (n) => {\n  return n % 2 === 0 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingEvenOddOdd(4) == false\n  isEqualToSummingEvenOddOdd(6) == false\n  isEqualToSummingEvenOddOdd(8) == true\n  */\nconst isEqualToSummingEvenOddOdd = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingEvenOddOddOdd(4) == false\n  isEqualToSummingEvenOddOddOdd(6) == false\n  isEqualToSummingEvenOddOddOdd(8) == false\n  */\nconst isEqualToSummingEvenOddOddOdd = (n) => {\n  return n % 2 === 0 && n % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingEvenOddOddOddOdd(4) == false\n  isEqualToSummingEvenOddOddOddOddOdd(6) == false\n  isEqualToSummingEvenOddOddOddOddOdd(8) == false\n  */\nconst isEqualToSummingEvenOddOddOddOdd = (n) => {\n  return n % 2 === 0 && n % 4 === 2;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingEvenOddOddOddOddOddOdd(4) == false\n  isEqualToSummingEvenOddOddOddOddOddOdd(6) == false\n  isEqualToSummingEvenOddOddO", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation.\n  \n  For example:\n  >>> factorial(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial2(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial2 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial2(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial2(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial3 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial3(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial3(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial4 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial4(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial4(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial5 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial5(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial5(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial6 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial6(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial6(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial7 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial7(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial7(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial8 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial8(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial8(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial9 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial9(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial9(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial10 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial10(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial10(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial11 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial11(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial11(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial12 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial12(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial12(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial13 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial13(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial13(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial14 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial14(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial14(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial15 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial15(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial15(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial16 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial16(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial16(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial17 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial17(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial17(5)\n  120\n\n  The function will receive an integer as input and should return the factorial of\n  this integer.\n  */\nconst factorial18 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return n * factorial18(n - 1);\n};\n\n/*\n  Returns the factorial of n using binary exponentiation with base 2.\n  \n  For example:\n  >>> factorial18(5)\n  120\n\n  The function will receive an integer as input and should return the factori", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let currentSuffix = string;\n  while (currentSuffix.length > 0) {\n    suffixes.push(currentSuffix);\n    currentSuffix = currentSuffix.substring(0, currentSuffix.length - 1);\n  }\n  return suffixes;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substring(0, currentSubstring.length - 1);\n  }\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'abc']\n  */\nconst allSubstringsWithPrefix = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substring(0, currentSubstring.length - 1);\n  }\n  return substrings.filter((substring) => substring.startsWith(string));\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithPrefix('abc')\n  ['abc', 'ab', 'ba', 'abc']\n  */\nconst allSubstringsWithSuffix = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substring(0, currentSubstring.length - 1);\n  }\n  return substrings.filter((substring) => substring.endsWith(string));\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithSuffix('abc')\n  ['abc', 'ab', 'ba', 'abc']\n  */\nconst allSubstringsWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substring(0, currentSubstring.length - 1);\n  }\n  return substrings.filter((substring) => substring.startsWith(string) && substring.endsWith(string));\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithPrefixAndSuffix('abc')\n  ['abc', 'ab', 'ba', 'abc']\n  */\nconst allSubstringsWithPrefixAndSuffixWithPrefix = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substring(0, currentSubstring.length - 1);\n  }\n  return substrings.filter((substring) => substring.startsWith(string) && substring.endsWith(string));\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithPrefixAndSuffixWithPrefix('abc')\n  ['abc', 'ab', 'ba', 'abc']\n  */\nconst allSubstringsWithPrefixAndSuffixWithSuffix = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substring(0, currentSubstring.length - 1);\n  }\n  return substrings.filter((substring) => substring.startsWith(string) && substring.endsWith(string));\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithPrefixAndSuffixWithSuffix('abc')\n  ['abc', 'ab', 'ba', 'abc']\n  */\nconst allSubstringsWithPrefixAndSuffixWithPrefixAndSuffix = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substring(0, currentSubstring.length - 1);\n  }\n  return substrings.filter((substring) => substring.startsWith(string) && substring.endsWith(string));\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithPrefixAndSuffixWithPrefixAndSuffix('abc')\n  ['abc', 'ab', 'ba', 'abc']\n  */\nconst allSubstringsWithPrefixAndSuffixWithPrefixAndSuffixWithPrefix = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substring(0, currentSubstring.length - 1);\n  }\n  return substrings.filter((substring) => substring.startsWith(string) && substring.endsWith(string));\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithPrefixAndSuffixWithPrefixAndSuffixWithPrefix('abc')\n  ['abc', 'ab', 'ba', 'abc']\n  */\nconst allSubstringsWithPrefixAndSuffixWithPrefixAndSuffixWithSuffix = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substring(0, currentSubstring.length - 1);\n  }\n  return substrings.filter((substring) => substring.startsWith(string) && substring.endsWith(string));\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithPrefixAndSuffixWithPrefixAndSuffixWithPrefixAndSuffix('abc')\n  ['abc', 'ab', 'ba', 'abc']\n  */\nconst allSubstringsWithPrefixAndSuffixWithPrefixAndSuffixWithPrefixAndSuffixWithPrefix = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substring(0, currentSubstring.length - 1);\n  }\n  return substrings.filter((substring) => substring.startsWith(string) && substring.endsWith(string));\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithPrefixAndSuffixWithPrefixAndSuffixWithPrefixAndSuffixWithSuffix('abc')\n  ['abc', 'ab', 'ba', 'abc']\n  */\nconst allSubstringsWithPrefixAndSuffixWithPrefixAndSuffixWithPrefixAndSuffixWithSuffix = (string) => {\n  const substrings = [];\n  let currentSubstring = string;\n  while (currentSubstring.length > 0) {\n    substrings.push(currentSubstring);\n    currentSubstring = currentSubstring.substring(0, currentSubstring.length - 1);\n  }\n  return substrings.filter((substring) => substring.startsWith(string) && substring.endsWith(string));\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstringsWithPrefixAndSuffixWithPrefixAndSuffixWithPrefixAndSuffixWithPrefixAndSuffixWithPrefixAndSuffix", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixesSpace", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g,'').replace(/\\s{2,}/g,'-');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g,'').replace(/\\s{2,}/g,'-');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g,'').replace(/\\s{2,}/g,'-');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g,'').replace(/\\s{2,}/g,'-');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g,'').replace(/\\s{2,}/g,'-');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g,'').replace(/\\s{2,}/g,'-');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g,'').replace(/\\s{2,}/g,'-');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g,'').replace(/\\s{2,}/g,'-');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g,'').replace(/\\s{2,}/g,'-');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g,'').replace(/\\s{2,}/g,'-');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g,'').replace(/\\s{2,}/g,'-');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g,'').replace(/\\s{2,}/g,'-');\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g,'')", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filesNamesCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n  const file_name_without_extension = file_name.split(\".\")[0];\n  const file_name_without_extension_length = file_name_without_extension.length;\n  const file_name_without_extension_digits = file_name_without_extension.match(/\\d+/g);\n  const file_name_without_extension_digits_length = file_name_without_extension_digits.length;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 3;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 1;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension_digits_length >= 0;\n  const file_name_without_extension_digits_length = file_name_without_extension", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubesAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubesAndSquaresAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubesAndSquaresAndSquaresAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubesAndSquaresAndSquaresAndSquaresAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function shall cube the integer entry if its index is a multiple of 3 and will \n  square the integer entry if its index is a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 or 4. The function \n  shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubesAndSquaresAndSquaresAndSquaresAndSquaresAndSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordInSentences", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentences = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentences = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentences = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentences = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentences = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentences = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === \"\" || n === \"\") {\n    return false;\n  }\n  const [num, den] = x.split(\"/\");\n  if (num === \"\" || den === \"\") {\n    return false;\n  }\n  const [num2, den2] = n.split(\"/\");\n  if (num2 === \"\" || den2 === \"\") {\n    return false;\n  }\n  if (num2 === num) {\n    if (den === \"\") {\n      return true;\n    }\n    if (den2 === \"\") {\n      return false;\n    }\n    return simplify(num2, den2);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (den2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den2);\n  }\n  if (den2 === \"\") {\n    if (num === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, num);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === \"\") {\n      return true;\n    }\n    return simplify(num2, den);\n  }\n  if (num2 === \"\") {\n    if (den === \"\") {\n      return false;\n    }\n    if (num2 === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoint", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc.push(n);\n    return acc;\n  }, []);\n  const sortedSums = sums.sort((a, b) => a - b);\n  return sortedSums.map((n) => parseInt(n, 10));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc.push(n);\n    return acc;\n  }, []);\n  const sortedSums = sums.sort((a, b) => b - a);\n  return sortedSums.map((n) => parseInt(n, 10));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDesc([1, 11, -1, -11, -12]) == [11, -11, 1, -11, -12]\n  >>> orderByPointDesc([]) == []\n  */\nconst orderByPointAsc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc.push(n);\n    return acc;\n  }, []);\n  const sortedSums = sums.sort((a, b) => a - b);\n  return sortedSums.map((n) => parseInt(n, 10));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointAsc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointAsc([]) == []\n  */\nconst orderByPointDescAsc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc.push(n);\n    return acc;\n  }, []);\n  const sortedSums = sums.sort((a, b) => b - a);\n  return sortedSums.map((n) => parseInt(n, 10));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescAsc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDescAsc([]) == []\n  */\nconst orderByPointAscDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc.push(n);\n    return acc;\n  }, []);\n  const sortedSums = sums.sort((a, b) => b - a);\n  return sortedSums.map((n) => parseInt(n, 10));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescAscDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDescAscDesc([]) == []\n  */\nconst orderByPointDescDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc.push(n);\n    return acc;\n  }, []);\n  const sortedSums = sums.sort((a, b) => b - a);\n  return sortedSums.map((n) => parseInt(n, 10));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescDescAscDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDescDescAscDesc([]) == []\n  */\nconst orderByPointDescDescAscDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc.push(n);\n    return acc;\n  }, []);\n  const sortedSums = sums.sort((a, b) => b - a);\n  return sortedSums.map((n) => parseInt(n, 10));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescDescDescAscDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDescDescDescAscDesc([]) == []\n  */\nconst orderByPointDescDescDescAscDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc.push(n);\n    return acc;\n  }, []);\n  const sortedSums = sums.sort((a, b) => b - a);\n  return sortedSums.map((n) => parseInt(n, 10));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescDescDescDescAscDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDescDescDescDescAscDesc([]) == []\n  */\nconst orderByPointDescDescDescDescAscDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc.push(n);\n    return acc;\n  }, []);\n  const sortedSums = sums.sort((a, b) => b - a);\n  return sortedSums.map((n) => parseInt(n, 10));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescDescDescDescDescAscDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDescDescDescDescDescAscDesc([]) == []\n  */\nconst orderByPointDescDescDescDescDescAscDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    acc.push(n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigits = nums.filter(x => x % 2 === 1);\n  \n  oddDigits.forEach(x => {\n    if (firstDigit % x === 0) {\n      count++;\n    }\n  });\n  \n  if (count === 2) {\n    return 1;\n  } else if (count === 3) {\n    return 2;\n  } else if (count === 4) {\n    return 3;\n  } else if (count === 5) {\n    return 4;\n  } else if (count === 6) {\n    return 5;\n  } else if (count === 7) {\n    return 6;\n  } else if (count === 8) {\n    return 7;\n  } else if (count === 9) {\n    return 8;\n  } else {\n    return 0;\n  }\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterEven = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let evenDigits = nums.filter(x => x % 2 === 0);\n  \n  evenDigits.forEach(x => {\n    if (firstDigit % x === 0) {\n      count++;\n    }\n  });\n  \n  if (count === 2) {\n    return 1;\n  } else if (count === 3) {\n    return 2;\n  } else if (count === 4) {\n    return 3;\n  } else if (count === 5) {\n    return 4;\n  } else if (count === 6) {\n    return 5;\n  } else if (count === 7) {\n    return 6;\n  } else if (count === 8) {\n    return 7;\n  } else if (count === 9) {\n    return 8;\n  } else {\n    return 0;\n  }\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3 (2, 4, 6, 8).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterDivisible = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let divisibleDigits = nums.filter(x => x % 3 === 0);\n  \n  divisibleDigits.forEach(x => {\n    if (firstDigit % x === 0) {\n      count++;\n    }\n  });\n  \n  if (count === 2) {\n    return 1;\n  } else if (count === 3) {\n    return 2;\n  } else if (count === 4) {\n    return 3;\n  } else if (count === 5) {\n    return 4;\n  } else if (count === 6) {\n    return 5;\n  } else if (count === 7) {\n    return 6;\n  } else if (count === 8) {\n    return 7;\n  } else {\n    return 0;\n  }\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 5 (2, 4, 6, 8).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterDivisibleFive = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let divisibleDigits = nums.filter(x => x % 5 === 0);\n  \n  divisibleDigits.forEach(x => {\n    if (firstDigit % x === 0) {\n      count++;\n    }\n  });\n  \n  if (count === 2) {\n    return 1;\n  } else if (count === 3) {\n    return 2;\n  } else if (count === 4) {\n    return 3;\n  } else if (count === 5) {\n    return 4;\n  } else if (count === 6) {\n    return 5;\n  } else if (count === 7) {\n    return 6;\n  } else if (count === 8) {\n    return 7;\n  } else {\n    return 0;\n  }\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 7 (2, 4, 6, 8).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterDivisibleSeven = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let divisibleDigits = nums.filter(x => x % 7 === 0);\n  \n  divisibleDigits.forEach(x => {\n    if (firstDigit % x === 0) {\n      count++;\n    }\n  });\n  \n  if (count === 2) {\n    return 1;\n  } else if (count === 3) {\n    return 2;\n  } else if (count === 4) {\n    return 3;\n  } else if (count === 5) {\n    return 4;\n  } else if (count === 6) {\n    return 5;\n  } else if (count === 7) {\n    return 6;\n  } else if (count === 8) {\n    return 7;\n  } else {\n    return 0;\n  }\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 9 (2, 4, 6, 8).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterDivisibleEight = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let divisibleDigits = nums.filter(x => x % 8 === 0);\n  \n  divisibleDigits.forEach(x => {\n    if (firstDigit % x === 0) {\n      count++;\n    }\n  });\n  \n  if (count === 2) {\n    return 1;\n  } else if (count === 3) {\n    return 2;\n  } else if (count === 4) {\n    return 3;\n  } else if (count === 5) {\n    return 4;\n  } else if (count === 6) {\n    return 5;\n  } else if (count === 7) {\n    return 6;\n  } else if (count === 8) {\n    return 7;\n  } else if (count === 9) {\n    return 8;\n  } else {\n    return 0;\n  }\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 11 (2, 4, 6, 8).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterDivisibleNine = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let divisibleDigits = nums.filter(x => x % 9 === 0);\n  \n  divisibleDigits.forEach(x => {\n    if (firstDigit % x === 0) {\n      count++;\n    }\n  });\n  \n  if (count === 2) {\n    return 1;\n  } else if (count === 3) {\n    return 2;\n  } else if (count === 4) {\n    return 3;\n  } else if (count === 5) {\n    return 4;\n  } else if (count === 6) {\n    return 5;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "gottenMaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n  const a = [...Array(n).keys()];\n  const triples = triples(a);\n  return triples.reduce((acc, triple) => {\n    const tripleIndex = triples.indexOf(triple);\n    const tripleValue = triples.reduce((acc, triple) => {\n      return acc + triple;\n    }, 0);\n    const tripleIndex = triples.indexOf(tripleValue);\n    if (tripleIndex === -1) {\n      return acc;\n    }\n    return tripleIndex === triples.length - 1? acc + 1 : acc;\n  }, 0);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriplesWithMultipleOf3 = (n) => {\n  const a = [...Array(n).keys()];\n  const triples = triples(a);\n  return triples.reduce((acc, triple) => {\n    const tripleIndex = triples.indexOf(triple);\n    const tripleValue = triples.reduce((acc, triple) => {\n      return acc + triple;\n    }, 0);\n    const tripleIndex = triples.indexOf(tripleValue);\n    if (tripleIndex === -1) {\n      return acc;\n    }\n    return tripleIndex === triples.length - 1? acc + 1 : acc;\n  }, 0);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriplesWithMultipleOf4 = (n) => {\n  const a = [...Array(n).keys()];\n  const triples = triples(a);\n  return triples.reduce((acc, triple) => {\n    const tripleIndex = triples.indexOf(triple);\n    const tripleValue = triples.reduce((acc, triple) => {\n      return acc + triple;\n    }, 0);\n    const tripleIndex = triples.indexOf(tripleValue);\n    if (tripleIndex === -1) {\n      return acc;\n    }\n    return tripleIndex === triples.length - 1? acc + 1 : acc;\n  }, 0);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriplesWithMultipleOf5 = (n) => {\n  const a = [...Array(n).keys()];\n  const triples = triples(a);\n  return triples.reduce((acc, triple) => {\n    const tripleIndex = triples.indexOf(triple);\n    const tripleValue = triples.reduce((acc, triple) => {\n      return acc + triple;\n    }, 0);\n    const tripleIndex = triples.indexOf(tripleValue);\n    if (tripleIndex === -1) {\n      return acc;\n    }\n    return tripleIndex === triples.length - 1? acc + 1 : acc;\n  }, 0);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriplesWithMultipleOf6 = (n) => {\n  const a = [...Array(n).keys()];\n  const triples = triples(a);\n  return triples.reduce((acc, triple) => {\n    const tripleIndex = triples.indexOf(triple);\n    const tripleValue = triples.reduce((acc, triple) => {\n      return acc + triple;\n    }, 0);\n    const tripleIndex = triples.indexOf(tripleValue);\n    if (tripleIndex === -1) {\n      return acc;\n    }\n    return tripleIndex === triples.length - 1? acc + 1 : acc;\n  }, 0);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriplesWithMultipleOf7 = (n) => {\n  const a = [...Array(n).keys()];\n  const triples = triples(a);\n  return triples.reduce((acc, triple) => {\n    const tripleIndex = triples.indexOf(triple);\n    const tripleValue = triples.reduce((acc, triple) => {\n      return acc + triple;\n    }, 0);\n    const tripleIndex = triples.indexOf(tripleValue);\n    if (tripleIndex === -1) {\n      return acc;\n    }\n    return tripleIndex === triples.length - 1? acc + 1 : acc;\n  }, 0);\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriplesWithMultipleOf8 = (n) => {\n  const a = [...Array(n).keys()];\n  const triples = triples(a);\n  return triples.reduce((acc, triple) => {\n    const tripleIndex = triples.indexOf(triple);\n    const tripleValue = triples.reduce((acc, triple) => {\n      return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let orbit1 = planet1.toUpperCase();\n  let orbit2 = planet2.toUpperCase();\n  let orbit1Arr = orbit1.split('');\n  let orbit2Arr = orbit2.split('');\n  let orbit1ArrLen = orbit1Arr.length;\n  let orbit2ArrLen = orbit2Arr.length;\n  let orbit1Arr = orbit1Arr.sort((a, b) => a - b);\n  let orbit2Arr = orbit2Arr.sort((a, b) => a - b);\n  let orbit1ArrLen = orbit1Arr.length;\n  let orbit2ArrLen = orbit2Arr.length;\n  let orbit1Arr = [];\n  let orbit2Arr = [];\n  let orbit1ArrLen = 0;\n  let orbit2ArrLen = 0;\n  let orbit1ArrIndex = 0;\n  let orbit2ArrIndex = 0;\n  let orbit1ArrIndex2 = 0;\n  let orbit2ArrIndex2 = 0;\n  let orbit1ArrIndex3 = 0;\n  let orbit2ArrIndex3 = 0;\n  let orbit1ArrIndex4 = 0;\n  let orbit2ArrIndex4 = 0;\n  let orbit1ArrIndex5 = 0;\n  let orbit2ArrIndex5 = 0;\n  let orbit1ArrIndex6 = 0;\n  let orbit2ArrIndex6 = 0;\n  let orbit1ArrIndex7 = 0;\n  let orbit2ArrIndex7 = 0;\n  let orbit1ArrIndex8 = 0;\n  let orbit2ArrIndex8 = 0;\n  let orbit1ArrIndex9 = 0;\n  let orbit2ArrIndex9 = 0;\n  let orbit1ArrIndex10 = 0;\n  let orbit2ArrIndex10 = 0;\n  let orbit1ArrIndex11 = 0;\n  let orbit2ArrIndex11 = 0;\n  let orbit1ArrIndex12 = 0;\n  let orbit2ArrIndex12 = 0;\n  let orbit1ArrIndex13 = 0;\n  let orbit2ArrIndex13 = 0;\n  let orbit1ArrIndex14 = 0;\n  let orbit2ArrIndex14 = 0;\n  let orbit1ArrIndex15 = 0;\n  let orbit2ArrIndex15 = 0;\n  let orbit1ArrIndex16 = 0;\n  let orbit2ArrIndex16 = 0;\n  let orbit1ArrIndex17 = 0;\n  let orbit2ArrIndex17 = 0;\n  let orbit1ArrIndex18 = 0;\n  let orbit2ArrIndex18 = 0;\n  let orbit1ArrIndex19 = 0;\n  let orbit2ArrIndex19 = 0;\n  let orbit1ArrIndex20 = 0;\n  let orbit2ArrIndex20 = 0;\n  let orbit1ArrIndex21 = 0;\n  let orbit2ArrIndex21 = 0;\n  let orbit1ArrIndex22 = 0;\n  let orbit2ArrIndex22 = 0;\n  let orbit1ArrIndex23 = 0;\n  let orbit2ArrIndex23 = 0;\n  let orbit1ArrIndex24 = 0;\n  let orbit2ArrIndex24 = 0;\n  let orbit1ArrIndex25 = 0;\n  let orbit2ArrIndex25 = 0;\n  let orbit1ArrIndex26 = 0;\n  let orbit2ArrIndex26 = 0;\n  let orbit1ArrIndex27 = 0;\n  let orbit2ArrIndex27 = 0;\n  let orbit1ArrIndex28 = 0;\n  let orbit2ArrIndex28 = 0;\n  let orbit1ArrIndex29 = 0;\n  let orbit2ArrIndex29 = 0;\n  let orbit1ArrIndex30 = 0;\n  let orbit2ArrIndex30 = 0;\n  let orbit1ArrIndex31 = 0;\n  let orbit2ArrIndex31 = 0;\n  let orbit1ArrIndex32 = 0;\n  let orbit2ArrIndex32 = 0;\n  let orbit1ArrIndex33 = 0;\n  let orbit2ArrIndex33 = 0;\n  let orbit1ArrIndex34 = 0;\n  let orbit2ArrIndex34 = 0;\n  let orbit1ArrIndex35 = 0;\n  let orbit2ArrIndex35 = 0;\n  let orbit1ArrIndex36 = 0;\n  let orbit2ArrIndex36 = 0;\n  let orbit1ArrIndex37 = 0;\n  let orbit2ArrIndex37 = 0;\n  let orbit1ArrIndex38 = 0;\n  let orbit2ArrIndex38 = 0;\n  let orbit1ArrIndex39 = 0;\n  let orbit2ArrIndex39 = 0;\n  let orbit1ArrIndex40 = 0;\n  let orbit2ArrIndex40 = 0;\n  let orbit1ArrIndex41 = 0;\n  let orbit2ArrIndex41 = 0;\n  let orbit1ArrIndex42 = 0;\n  let orbit2ArrIndex42 = 0;\n  let orbit1ArrIndex43 = 0;\n  let orbit2ArrIndex43 = 0;\n  let orbit1ArrIndex44 = 0;\n  let orbit2ArrIndex44 = 0;\n  let orbit1ArrIndex45 = 0;\n  let orbit2ArrIndex45 = 0;\n  let orbit1ArrIndex46 = 0;\n  let orbit2ArrIndex46 = 0;\n  let orbit1ArrIndex47 = 0;\n  let orbit2ArrIndex47 = 0;\n  let orbit1ArrIndex48 = 0;\n  let orbit2ArrIndex48 = 0;\n  let orbit1ArrIndex49 = 0;\n  let orbit2ArrIndex49 = 0;\n  let orbit1ArrIndex50 = 0;\n  let orbit2ArrIndex50 = 0;\n  let orbit1ArrIndex51 = 0;\n  let orbit2ArrIndex51 = 0;\n  let orbit1ArrIndex52 = 0;\n  let orbit2ArrIndex52 = 0;\n  let orbit1ArrIndex53 = 0;\n  let orbit2ArrIndex53 = 0;\n  let orbit1ArrIndex54 = 0;\n  let orbit2ArrIndex54 = 0;\n  let orbit1ArrIndex55 = 0;\n  let orbit2ArrIndex55 = 0;\n  let orbit1ArrIndex56 = 0;\n  let orbit2ArrIndex56 = 0;\n  let orbit1ArrIndex57 = 0;\n  let orbit2ArrIndex57 = 0;\n  let orbit1ArrIndex58 = 0;\n  let orbit2ArrIndex58 = 0;\n  let orbit1ArrIndex59 = 0;\n  let orbit2ArrIndex59 = 0;\n  let orbit1ArrIndex60 = 0;\n  let orbit2ArrIndex60 = 0;\n  let orbit1ArrIndex61 = 0;\n  let orbit2ArrIndex61 = 0;\n  let orbit1ArrIndex62 = 0;\n  let orbit2ArrIndex62 = 0;\n  let orbit1ArrIndex63 = 0;\n  let orbit2ArrIndex63 = 0;\n  let orbit1ArrIndex64 = 0;\n  let orbit2ArrIndex64 = 0;\n  let orbit1ArrIndex65 = 0;\n  let orbit2ArrIndex65 = 0;\n  let orbit1ArrIndex66 = 0;\n  let orbit2ArrIndex66 = 0;\n  let orbit1ArrIndex67 = 0;\n  let orbit2ArrIndex67 = 0;\n  let orbit1ArrIndex68 = 0;\n  let orbit2ArrIndex68 = 0;\n  let orbit1ArrIndex69 = 0;\n  let orbit2ArrIndex69 = 0;\n  let orbit1ArrIndex70 = 0;\n  let orbit2ArrIndex70 = 0;\n  let orbit1ArrIndex71 = 0;\n  let orbit2ArrIndex71 = 0;\n  let orbit1ArrIndex72 = 0;\n  let orbit2ArrIndex72 = 0;\n  let orbit1ArrIndex73 = 0;\n  let orbit2ArrIndex73 = 0;\n  let orbit1ArrIndex74 = 0;\n  let orbit2ArrIndex74 = 0;\n  let orbit1", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortListsSums", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    } else {\n      result.push(lst[i]);\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the string with all the spaces replaced by underscores,\n  and returns the string with all the words capitalized.\n  For example:\n  assert caps(\"Hello World!\") => \"hello_world\"\n  assert caps(\"Hello World!\", true) => \"Hello_World!\"\n  assert caps(\"Hello World!\", false) => \"hello_world\"\n  */\nconst caps = (str, capitalize) => {\n  let newStr = str.replace(/\\s+/g, '_');\n  if (capitalize) {\n    newStr = newStr.charAt(0).toUpperCase() + newStr.slice(1);\n  }\n  return newStr;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the string with all the spaces replaced by underscores,\n  and returns the string with all the words capitalized.\n  For example:\n  assert caps(\"Hello World!\", true) => \"Hello_World!\"\n  assert caps(\"Hello World!\", false) => \"hello_world\"\n  */\nconst uncaps = (str, capitalize) => {\n  let newStr = str.replace(/_/g,'');\n  if (capitalize) {\n    newStr = newStr.charAt(0).toLowerCase() + newStr.slice(1);\n  }\n  return newStr;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the string with all the spaces replaced by underscores,\n  and returns the string with all the words capitalized.\n  For example:\n  assert caps(\"Hello World!\", true) => \"hello_world\"\n  assert caps(\"Hello World!\", false) => \"Hello World!\"\n  */\nconst capsAll = (str, capitalize) => {\n  let newStr = str.replace(/\\s+/g, '_');\n  if (capitalize) {\n    newStr = newStr.charAt(0).toUpperCase() + newStr.slice(1);\n  }\n  return newStr;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the string with all the spaces replaced by underscores,\n  and returns the string with all the words capitalized.\n  For example:\n  assert caps(\"Hello World!\", true) => \"hello_world\"\n  assert caps(\"Hello World!\", false) => \"Hello World!\"\n  */\nconst uncapsAll = (str, capitalize) => {\n  let newStr = str.replace(/_/g,'');\n  if (capitalize) {\n    newStr = newStr.charAt(0).toLowerCase() + newStr.slice(1);\n  }\n  return newStr;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the string with all the spaces replaced by underscores,\n  and returns the string with all the words capitalized.\n  For example:\n  assert caps(\"Hello World!\", true) => \"hello_world\"\n  assert caps(\"Hello World!\", false) => \"Hello World!\"\n  */\nconst capsAllWords = (str, capitalize) => {\n  let newStr = str.replace(/\\s+/g, '_');\n  if (capitalize) {\n    newStr = newStr.charAt(0).toUpperCase() + newStr.slice(1);\n  }\n  return newStr;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the string with all the spaces replaced by underscores,\n  and returns the string with all the words capitalized.\n  For example:\n  assert caps(\"Hello World!\", true) => \"hello_world\"\n  assert caps(\"Hello World!\", false) => \"Hello World!\"\n  */\nconst uncapsAllWords = (str, capitalize) => {\n  let newStr = str.replace(/_/g,'');\n  if (capitalize) {\n    newStr = newStr.charAt(0).toLowerCase() + newStr.slice(1);\n  }\n  return newStr;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the string with all the spaces replaced by underscores,\n  and returns the string with all the words capitalized.\n  For example:\n  assert caps(\"Hello World!\", true) => \"hello_world\"\n  assert caps(\"Hello World!\", false) => \"Hello World!\"\n  */\nconst capsAllWordsAll = (str, capitalize) => {\n  let newStr = str.replace(/\\s+/g, '_');\n  if (capitalize) {\n    newStr = newStr.charAt(0).toUpperCase() + newStr.slice(1);\n  }\n  return newStr;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the string with all the spaces replaced by underscores,\n  and returns the string with all the words capitalized.\n  For example:\n  assert caps(\"Hello World!\", true) => \"hello_world\"\n  assert caps(\"Hello World!\", false) => \"Hello World!\"\n  */\nconst uncapsAllWordsAll = (str, capitalize) => {\n  let newStr = str.replace(/_/g,'');\n  if (capitalize) {\n    newStr = newStr.charAt(0).toLowerCase() + newStr.slice(1);\n  }\n  return newStr;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the string with all the spaces replaced by underscores,\n  and returns the string with all the words capitalized.\n  For example:\n  assert caps(\"Hello World!\", true) => \"hello_world\"\n  assert caps(\"Hello World!\", false) => \"Hello World!\"\n  */\nconst capsAllWordsAllWords = (str, capitalize) => {\n  let newStr = str.replace(/\\s+/g, '_');\n  if (capitalize) {\n    newStr = newStr.charAt(0).toUpperCase() + newStr.slice(1);\n  }\n  return newStr;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the string with all the spaces replaced by underscores,\n  and returns the string with all the words capitalized.\n  For example:\n  assert caps(\"Hello World!\", true) => \"hello_world\"\n  assert caps(\"Hello World!\", false) => \"Hello World!\"\n  */\nconst uncapsAllWordsAllWords = (str, capitalize) => {\n  let newStr = str.replace(/_/g,'');\n  if (capitalize) {\n    newStr = newStr.charAt(0).toLowerCase() + newStr.slice(1);\n  }\n  return newStr;\n};\n\n/*\n  Write a function that accepts a string as a parameter,\n  and returns the string with all the spaces replaced by underscores,\n  and returns the string with all the words capitalized.\n  For example:\n  assert caps(\"Hello World!\", true) => \"hello_world\"\n  assert caps(\"Hello World!\", false) => \"Hello World!\"\n  */\nconst capsAllWordsAllWordsAll = (str, capitalize) => {\n  let newStr = str.replace(/\\s+/g, '_');\n  if (capitalize) {\n    newStr = new", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequences", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequence = (n) => {\n  if (n < 0) {\n    return '';\n  }\n  if (n === 0) {\n    return '';\n  }\n  if (n < 0 || n >= stringSequences.length()) {\n    return '';\n  }\n  return stringSequences(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequences = (...args) => {\n  const str = stringSequence(...args);\n  return str.split(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequence = (...args) => {\n  const str = stringSequences(...args);\n  return str.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequences = (...args) => {\n  const str = stringSequence(...args);\n  return str.split(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequence = (...args) => {\n  const str = stringSequences(...args);\n  return str.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequences = (...args) => {\n  const str = stringSequence(...args);\n  return str.split(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequence = (...args) => {\n  const str = stringSequences(...args);\n  return str.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequences = (...args) => {\n  const str = stringSequence(...args);\n  return str.split(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequence = (...args) => {\n  const str = stringSequences(...args);\n  return str.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequences = (...args) => {\n  const str = stringSequence(...args);\n  return str.split(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequence = (...args) => {\n  const str = stringSequences(...args);\n  return str.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequences = (...args) => {\n  const str = stringSequence(...args);\n  return str.split(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequence = (...args) => {\n  const str = stringSequences(...args);\n  return str.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequences = (...args) => {\n  const str = stringSequence(...args);\n  return str.split(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequence = (...args) => {\n  const str = stringSequences(...args);\n  return str.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequences = (...args) => {\n  const str = stringSequence(...args);\n  return str.split(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequence = (...args) => {\n  const str = stringSequences(...args);\n  return str.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequences = (...args) => {\n  const str = stringSequence(...args);\n  return str.split(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in the array, return an empty string.\n * If n is less than 0, return an empty string.\n */\nconst stringSequence = (...args) => {\n  const str = stringSequences(...args);\n  return str.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return y;\n};\n\n/*A simple program which ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 10\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 10\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 10\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 10\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 10\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 10\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 10\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 10\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 10\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 10\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0 && lst[i] % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by both 2 and 3. doubleTheDifference(\n  [1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameScores = game.map(score => score);\n  const guessScores = guess.map(score => score);\n  const gameScoreDifferences = gameScores.map(gameScore => gameScore - guessScores);\n  const gameScoreDifferenceDifferences = gameScoreDifferences.map(gameScoreDifference => Math.abs(gameScoreDifference));\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = game", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongestExtension = '';\n  let extension_strength = 0;\n  let extension_strength_sum = 0;\n  let extension_strength_max = 0;\n  let extension_strength_min = 0;\n  let extension_strength_avg = 0;\n  let extension_strength_sum2 = 0;\n  let extension_strength_avg2 = 0;\n  let extension_strength_sum3 = 0;\n  let extension_strength_avg3 = 0;\n  let extension_strength_sum4 = 0;\n  let extension_strength_avg4 = 0;\n  let extension_strength_sum5 = 0;\n  let extension_strength_avg5 = 0;\n  let extension_strength_sum6 = 0;\n  let extension_strength_avg6 = 0;\n  let extension_strength_sum7 = 0;\n  let extension_strength_avg7 = 0;\n  let extension_strength_sum8 = 0;\n  let extension_strength_avg8 = 0;\n  let extension_strength_sum9 = 0;\n  let extension_strength_avg9 = 0;\n  let extension_strength_sum10 = 0;\n  let extension_strength_avg10 = 0;\n  let extension_strength_sum11 = 0;\n  let extension_strength_avg11 = 0;\n  let extension_strength_sum12 = 0;\n  let extension_strength_avg12 = 0;\n  let extension_strength_sum13 = 0;\n  let extension_strength_avg13 = 0;\n  let extension_strength_sum14 = 0;\n  let extension_strength_avg14 = 0;\n  let extension_strength_sum15 = 0;\n  let extension_strength_avg15 = 0;\n  let extension_strength_sum16 = 0;\n  let extension_strength_avg16 = 0;\n  let extension_strength_sum17 = 0;\n  let extension_strength_avg17 = 0;\n  let extension_strength_sum18 = 0;\n  let extension_strength_avg18 = 0;\n  let extension_strength_sum19 = 0;\n  let extension_strength_avg19 = 0;\n  let extension_strength_sum20 = 0;\n  let extension_strength_avg20 = 0;\n  let extension_strength_sum21 = 0;\n  let extension_strength_avg21 = 0;\n  let extension_strength_sum22 = 0;\n  let extension_strength_avg22 = 0;\n  let extension_strength_sum23 = 0;\n  let extension_strength_avg23 = 0;\n  let extension_strength_sum24 = 0;\n  let extension_strength_avg24 = 0;\n  let extension_strength_sum25 = 0;\n  let extension_strength_avg25 = 0;\n  let extension_strength_sum26 = 0;\n  let extension_strength_avg26 = 0;\n  let extension_strength_sum27 = 0;\n  let extension_strength_avg27 = 0;\n  let extension_strength_sum28 = 0;\n  let extension_strength_avg28 = 0;\n  let extension_strength_sum29 = 0;\n  let extension_strength_avg29 = 0;\n  let extension_strength_sum30 = 0;\n  let extension_strength_avg30 = 0;\n  let extension_strength_sum31 = 0;\n  let extension_strength_avg31 = 0;\n  let extension_strength_sum32 = 0;\n  let extension_strength_avg32 = 0;\n  let extension_strength_sum33 = 0;\n  let extension_strength_avg33 = 0;\n  let extension_strength_sum34 = 0;\n  let extension_strength_avg34 = 0;\n  let extension_strength_sum35 = 0;\n  let extension_strength_avg35 = 0;\n  let extension_strength_sum36 = 0;\n  let extension_strength_avg36 = 0;\n  let extension_strength_sum37 = 0;\n  let extension_strength_avg37 = 0;\n  let extension_strength_sum38 = 0;\n  let extension_strength_avg38 = 0;\n  let extension_strength_sum39 = 0;\n  let extension_strength_avg39 = 0;\n  let extension_strength_sum40 = 0;\n  let extension_strength_avg40 = 0;\n  let extension_strength_sum41 = 0;\n  let extension_strength_avg41 = 0;\n  let extension_strength_sum42 = 0;\n  let extension_strength_avg42 = 0;\n  let extension_strength_sum43 = 0;\n  let extension_strength_avg43 = 0;\n  let extension_strength_sum44 = 0;\n  let extension_strength_avg44 = 0;\n  let extension_strength_sum45 = 0;\n  let extension_strength_avg45 = 0;\n  let extension_strength_sum46 = 0;\n  let extension_strength_avg46 = 0;\n  let extension_strength_sum47 = 0;\n  let extension_strength_avg47 = 0;\n  let extension_strength_sum48 = 0;\n  let extension_strength_avg48 = 0;\n  let extension_strength_sum49 = 0;\n  let extension_strength_avg49 = 0;\n  let extension_strength_sum50 = 0;\n  let extension_strength_avg50 = 0;\n  let extension_strength_sum51 = 0;\n  let extension_strength_avg51 = 0;\n  let extension_strength_sum52 = 0;\n  let extension_strength_avg52 = 0;\n  let extension_strength_sum53 = 0;\n  let extension_strength_avg53 = 0;\n  let extension_strength_sum54 = 0;\n  let extension_strength_avg54 = 0;\n  let extension_strength_sum55 = 0;\n  let extension_strength_avg55 = 0;\n  let extension_strength_sum56 = 0;\n  let extension_strength_avg56 = 0;\n  let extension_strength_sum57 = 0;\n  let extension_strength_avg57 = 0;\n  let extension_strength_sum58 = 0;\n  let extension_strength_avg58 = 0;\n  let extension_strength_sum59 = 0;\n  let extension_strength_avg59 = 0;\n  let extension_strength_sum60 = 0;\n  let extension_strength_avg60 = 0;\n  let extension_strength_sum61 = 0;\n  let extension_strength_avg61 = 0;\n  let extension_strength_sum62 = 0;\n  let extension_strength_avg62 = 0;\n  let extension_strength_sum63 = 0;\n  let extension_strength_avg63 = 0;\n  let extension_strength_sum64 = 0;\n  let extension_strength_avg64 = 0;\n  let extension_strength_sum65 = 0;\n  let extension_strength_avg65 = 0;\n  let extension_strength_sum66 = 0;\n  let extension_strength_avg66 = 0;\n  let extension_strength_sum67 = 0;\n  let extension_strength_avg67 = 0;\n  let extension_strength_sum68 = 0;\n  let extension_strength_avg68 = 0;\n  let extension_strength_sum69 = 0;\n  let extension_strength_avg69 = 0;\n  let extension_strength_sum70 = 0;\n  let extension_strength_avg70 = 0;\n  let extension_strength_sum71 = 0;\n  let extension_strength_avg71 = 0;\n  let extension_strength_sum72 = 0;\n  let extension", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArray = a.split('')\n  let bArray = b.split('')\n  let aLen = aArray.length\n  let bLen = bArray.length\n  let aIndex = 0\n  let bIndex = 0\n  let aMatch = false\n  let bMatch = false\n  let aMatchIndex = 0\n  let bMatchIndex = 0\n  let aMatchLen = 0\n  let bMatchLen = 0\n  let aMatchMatch = false\n  let bMatchMatch = false\n  let aMatchMatchIndex = 0\n  let bMatchMatchIndex = 0\n  let aMatchMatchLen = 0\n  let bMatchMatchLen = 0\n  let aMatchMatchMatch = false\n  let bMatchMatchMatch = false\n  let aMatchMatchMatchIndex = 0\n  let bMatchMatchMatchIndex = 0\n  let aMatchMatchMatchLen = 0\n  let bMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatch = false\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let bMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchIndex = 0\n  let aMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchMatchLen = 0\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOdderCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let count = 0;\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n      num = (num - evenCount) / 2;\n    } else {\n      oddCount++;\n      num = (num - oddCount) / 2;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return an array that has the first and last characters of the string in their respective positions.\n\n   Example:\n      firstLast('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ['h', 'e', 'l', 'l']\n      firstLast('hello') ==> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const numStr = number.toString();\n  const numArr = numStr.split('');\n  const numLen = numArr.length;\n  let result = '';\n  for (let i = 0; i < numLen; i++) {\n    if (numArr[i] === '1') {\n      result += numArr[i];\n    } else if (numArr[i] === '2') {\n      result += numArr[i] + 'i';\n    } else if (numArr[i] === '3') {\n      result += numArr[i] + 'ix';\n    } else if (numArr[i] === '4') {\n      result += numArr[i] + 'v';\n    } else if (numArr[i] === '5') {\n      result += numArr[i] + 'vi';\n    } else if (numArr[i] === '6') {\n      result += numArr[i] + 'ixv';\n    } else if (numArr[i] === '7') {\n      result += numArr[i] + 'vix';\n    } else if (numArr[i] === '8') {\n      result += numArr[i] + 'ixvi';\n    } else if (numArr[i] === '9') {\n      result += numArr[i] + 'vixv';\n    } else if (numArr[i] === '0') {\n      result += numArr[i] + 'ixvvi';\n    } else if (numArr[i] === 'a') {\n      result += numArr[i] + 'ixvix';\n    } else if (numArr[i] === 'b') {\n      result += numArr[i] + 'vixvi';\n    } else if (numArr[i] === 'c') {\n      result += numArr[i] + 'ixvixv';\n    } else if (numArr[i] === 'd') {\n      result += numArr[i] + 'vixvix';\n    } else if (numArr[i] === 'e') {\n      result += numArr[i] + 'ixvixvi';\n    } else if (numArr[i] === 'f') {\n      result += numArr[i] + 'vixvixvi';\n    } else if (numArr[i] === 'g') {\n      result += numArr[i] + 'ixvixvix';\n    } else if (numArr[i] === 'h') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'i') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'j') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'k') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'l') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] ==='m') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'n') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'o') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'p') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'q') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'r') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] ==='s') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 't') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'u') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'v') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'w') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'x') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'y') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'z') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'A') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'B') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'C') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'D') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'E') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'F') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'G') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'H') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'I') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'J') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'K') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'L') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'M') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'N') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'O') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'P') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'Q') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'R') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'S') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'T') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'U') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'V') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'W') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'X') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'Y') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'Z') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'a') {\n      result += numArr[i] + 'ixvixvix';\n    } else if (numArr[i] === 'b') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'c') {\n      result += numArr[i] + 'ixvixvix';\n    } else if (numArr[i] === 'd') {\n      result += numArr[i] + 'vixvixvix';\n    } else if (numArr[i] === 'e') {\n      result += numArr[i] + 'ixvixvix';\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangles", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180);\n  const a3 = Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180) * Math.cos(c * Math.PI / 180);\n  const b1 = Math.sin(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180) * Math.cos(a * Math.PI / 180);\n  const b3 = Math.sin(b * Math.PI / 180) * Math.cos(a * Math.PI / 180) * Math.cos(c * Math.PI / 180);\n  const c1 = Math.sin(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180) * Math.cos(a * Math.PI / 180);\n  const c3 = Math.sin(c * Math.PI / 180) * Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180);\n  return a1 * b2 * c3 - a2 * b3 * c1 + a3 * b1 * c2 <= 0;\n};\n\n/*\n Given the lengths of the three sides of a rectangle. Return true if the three\n  sides form a right-angled rectangle, false otherwise.\n  A right-angled rectangle is a rectangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleRectangles(3, 4, 5) == true\n  rightAngleRectangles(1, 2, 3) == false\n  */\nconst rightAngleRectangles = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180);\n  const a3 = Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180) * Math.cos(c * Math.PI / 180);\n  const b1 = Math.sin(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180) * Math.cos(a * Math.PI / 180);\n  const b3 = Math.sin(b * Math.PI / 180) * Math.cos(a * Math.PI / 180) * Math.cos(c * Math.PI / 180);\n  const c1 = Math.sin(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180) * Math.cos(a * Math.PI / 180);\n  const c3 = Math.sin(c * Math.PI / 180) * Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180);\n  return a1 * b2 * c3 - a2 * b3 * c1 + a3 * b1 * c2 <= 0;\n};\n\n/*\n Given the lengths of the three sides of a circle. Return true if the three\n  sides form a right-angled circle, false otherwise.\n  A right-angled circle is a circle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleCircles(3, 4, 5) == true\n  rightAngleCircles(1, 2, 3) == false\n  */\nconst rightAngleCircles = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180);\n  const a3 = Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180) * Math.cos(c * Math.PI / 180);\n  const b1 = Math.sin(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180) * Math.cos(a * Math.PI / 180);\n  const b3 = Math.sin(b * Math.PI / 180) * Math.cos(a * Math.PI / 180) * Math.cos(c * Math.PI / 180);\n  const c1 = Math.sin(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180) * Math.cos(a * Math.PI / 180);\n  const c3 = Math.sin(c * Math.PI / 180) * Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180);\n  return a1 * b2 * c3 - a2 * b3 * c1 + a3 * b1 * c2 <= 0;\n};\n\n/*\n Given the lengths of the three sides of a square. Return true if the three\n  sides form a right-angled square, false otherwise.\n  A right-angled square is a square in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleSquares(3, 4, 5) == true\n  rightAngleSquares(1, 2, 3) == false\n  */\nconst rightAngleSquares = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180);\n  const a3 = Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180) * Math.cos(c * Math.PI / 180);\n  const b1 = Math.sin(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180) * Math.cos(a * Math.PI / 180);\n  const b3 = Math.sin(b * Math.PI / 180) * Math.cos(a * Math.PI / 180) * Math.cos(c * Math.PI / 180);\n  const c1 = Math.sin(c * Math.PI / 180);\n  const c2 = Math.sin(c * Math.PI / 180) * Math.cos(a * Math.PI / 180);\n  const c3 = Math.sin(c * Math.PI / 180) * Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180);\n  return a1 * b2 * c3 - a2 * b3 * c1 + a3 * b1 * c2 <= 0;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Return true if the three\n  sides form a right-angled pentagon, false otherwise.\n  A right-angled pentagon is a pentagon in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAnglePentagons(3, 4, 5) == true\n  rightAnglePentagons(1, 2, 3) == false\n  */\nconst rightAnglePentagons = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180);\n  const a3 = Math.cos(a * Math.PI / 180) * Math.cos(b * Math.PI / 180) * Math.cos(c * Math.PI / 180);\n  const b1 = Math.sin(b * Math.PI / 180);\n  const b2 = Math.sin(b * Math.PI / 180) * Math.cos(a * Math.PI / 180);\n  const b3 = Math.sin(b * Math.PI / 180) * Math.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "foundMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  let max = 0;\n  let maxWord;\n  let maxLength = 0;\n  let uniqueChars = 0;\n  let word;\n  let i;\n  let j;\n  let k;\n  let l;\n  let uniqueCharsCount = 0;\n  let uniqueCharsCount2 = 0;\n  let uniqueCharsCount3 = 0;\n  let uniqueCharsCount4 = 0;\n  let uniqueCharsCount5 = 0;\n  let uniqueCharsCount6 = 0;\n  let uniqueCharsCount7 = 0;\n  let uniqueCharsCount8 = 0;\n  let uniqueCharsCount9 = 0;\n  let uniqueCharsCount10 = 0;\n  let uniqueCharsCount11 = 0;\n  let uniqueCharsCount12 = 0;\n  let uniqueCharsCount13 = 0;\n  let uniqueCharsCount14 = 0;\n  let uniqueCharsCount15 = 0;\n  let uniqueCharsCount16 = 0;\n  let uniqueCharsCount17 = 0;\n  let uniqueCharsCount18 = 0;\n  let uniqueCharsCount19 = 0;\n  let uniqueCharsCount20 = 0;\n  let uniqueCharsCount21 = 0;\n  let uniqueCharsCount22 = 0;\n  let uniqueCharsCount23 = 0;\n  let uniqueCharsCount24 = 0;\n  let uniqueCharsCount25 = 0;\n  let uniqueCharsCount26 = 0;\n  let uniqueCharsCount27 = 0;\n  let uniqueCharsCount28 = 0;\n  let uniqueCharsCount29 = 0;\n  let uniqueCharsCount30 = 0;\n  let uniqueCharsCount31 = 0;\n  let uniqueCharsCount32 = 0;\n  let uniqueCharsCount33 = 0;\n  let uniqueCharsCount34 = 0;\n  let uniqueCharsCount35 = 0;\n  let uniqueCharsCount36 = 0;\n  let uniqueCharsCount37 = 0;\n  let uniqueCharsCount38 = 0;\n  let uniqueCharsCount39 = 0;\n  let uniqueCharsCount40 = 0;\n  let uniqueCharsCount41 = 0;\n  let uniqueCharsCount42 = 0;\n  let uniqueCharsCount43 = 0;\n  let uniqueCharsCount44 = 0;\n  let uniqueCharsCount45 = 0;\n  let uniqueCharsCount46 = 0;\n  let uniqueCharsCount47 = 0;\n  let uniqueCharsCount48 = 0;\n  let uniqueCharsCount49 = 0;\n  let uniqueCharsCount50 = 0;\n  let uniqueCharsCount51 = 0;\n  let uniqueCharsCount52 = 0;\n  let uniqueCharsCount53 = 0;\n  let uniqueCharsCount54 = 0;\n  let uniqueCharsCount55 = 0;\n  let uniqueCharsCount56 = 0;\n  let uniqueCharsCount57 = 0;\n  let uniqueCharsCount58 = 0;\n  let uniqueCharsCount59 = 0;\n  let uniqueCharsCount60 = 0;\n  let uniqueCharsCount61 = 0;\n  let uniqueCharsCount62 = 0;\n  let uniqueCharsCount63 = 0;\n  let uniqueCharsCount64 = 0;\n  let uniqueCharsCount65 = 0;\n  let uniqueCharsCount66 = 0;\n  let uniqueCharsCount67 = 0;\n  let uniqueCharsCount68 = 0;\n  let uniqueCharsCount69 = 0;\n  let uniqueCharsCount70 = 0;\n  let uniqueCharsCount71 = 0;\n  let uniqueCharsCount72 = 0;\n  let uniqueCharsCount73 = 0;\n  let uniqueCharsCount74 = 0;\n  let uniqueCharsCount75 = 0;\n  let uniqueCharsCount76 = 0;\n  let uniqueCharsCount77 = 0;\n  let uniqueCharsCount78 = 0;\n  let uniqueCharsCount79 = 0;\n  let uniqueCharsCount80 = 0;\n  let uniqueCharsCount81 = 0;\n  let uniqueCharsCount82 = 0;\n  let uniqueCharsCount83 = 0;\n  let uniqueCharsCount84 = 0;\n  let uniqueCharsCount85 = 0;\n  let uniqueCharsCount86 = 0;\n  let uniqueCharsCount87 = 0;\n  let uniqueCharsCount88 = 0;\n  let uniqueCharsCount89 = 0;\n  let uniqueCharsCount90 = 0;\n  let uniqueCharsCount91 = 0;\n  let uniqueCharsCount92 = 0;\n  let uniqueCharsCount93 = 0;\n  let uniqueCharsCount94 = 0;\n  let uniqueCharsCount95 = 0;\n  let uniqueCharsCount96 = 0;\n  let uniqueCharsCount97 = 0;\n  let uniqueCharsCount98 = 0;\n  let uniqueCharsCount99 = 0;\n  let uniqueCharsCount100 = 0;\n  let uniqueCharsCount101 = 0;\n  let uniqueCharsCount102 = 0;\n  let uniqueCharsCount103 = 0;\n  let uniqueCharsCount104 = 0;\n  let uniqueCharsCount105 = 0;\n  let uniqueCharsCount106 = 0;\n  let uniqueCharsCount107 = 0;\n  let uniqueCharsCount108 = 0;\n  let uniqueCharsCount109 = 0;\n  let uniqueCharsCount110 = 0;\n  let uniqueCharsCount111 = 0;\n  let uniqueCharsCount112 = 0;\n  let uniqueCharsCount113 = 0;\n  let uniqueCharsCount114 = 0;\n  let uniqueCharsCount115 = 0;\n  let uniqueCharsCount116 = 0;\n  let uniqueCharsCount117 = 0;\n  let uniqueCharsCount118 = 0;\n  let uniqueCharsCount119 = 0;\n  let uniqueCharsCount120 = 0;\n  let uniqueCharsCount121 = 0;\n  let uniqueCharsCount122 = 0;\n  let uniqueCharsCount123 = 0;\n  let uniqueCharsCount124 = 0;\n  let uniqueCharsCount125 = 0;\n  let uniqueCharsCount126 = 0;\n  let uniqueCharsCount127 = 0;\n  let uniqueCharsCount128 = 0;\n  let uniqueCharsCount129 = 0;\n  let uniqueCharsCount130 = 0;\n  let uniqueCharsCount131 = 0;\n  let uniqueCharsCount132 = 0;\n  let uniqueCharsCount133 = 0;\n  let uniqueCharsCount134 = 0;\n  let uniqueCharsCount135 = 0;\n  let uniqueCharsCount136 = 0;\n  let uniqueCharsCount137 = 0;\n  let uniqueCharsCount138 = 0;\n  let uniqueCharsCount139 = 0;\n  let uniqueCharsCount140 = 0;\n  let uniqueCharsCount141 = 0;\n  let uniqueCharsCount142 = 0;\n  let uniqueCharsCount143 = 0;\n  let uniqueCharsCount144 = 0;\n  let uniqueCharsCount145 = 0;\n  let uniqueCharsCount146 = 0;\n  let uniqueCharsCount147 = 0;\n  let uniqueCharsCount148 = 0;\n  let uniqueCharsCount149 = 0;\n  let uniqueCharsCount150 = 0;\n  let uniqueCharsCount151 = 0;\n  let uniqueCharsCount152 = 0;\n  let uniqueCharsCount153 = 0;\n  let uniqueCharsCount154 = 0;\n  let uniqueCharsCount155 = 0;\n  let uniqueCharsCount156 = 0;\n  let uniqueCharsCount157 = 0;\n  let uniqueCharsCount158 = 0;\n  let uniqueCharsCount159 = 0;\n  let uniqueCharsCount160 = 0;\n  let uniqueCharsCount161 = 0;\n  let uniqueCharsCount162 = 0;\n  let uniqueCharsCount163 = 0;\n  let uniqueCharsCount164 = 0;\n  let uniqueCharsCount165 = 0;\n  let uniqueCharsCount166 = 0;\n  let uniqueCharsCount167 = 0;\n  let uniqueCharsCount168 = 0;\n  let uniqueCharsCount169 = 0;\n  let uniqueCharsCount170 = 0;\n  let uniqueCharsCount171 = 0;\n  let uniqueCharsCount172 = 0;\n  let uniqueCharsCount173 = 0;\n  let uniqueCharsCount174 = 0;\n  let uniqueCharsCount175 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const meals = Math.ceil(number - carrots * need);\n  const carrotLeft = meals * carrots;\n  const carrotEaten = carrotLeft - remaining;\n  return [carrotEaten, carrots];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const meals = Math.ceil(number - carrots * need);\n  const carrotLeft = meals * carrots;\n  const carrotEaten = carrotLeft - remaining;\n  return [carrotEaten, carrots];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const meals = Math.ceil(number - carrots * need);\n  const carrotLeft = meals * carrots;\n  const carrotEaten = carrotLeft - remaining;\n  return [carrotEaten, carrots];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const meals = Math.ceil(number - carrots * need);\n  const carrotLeft = meals * carrots;\n  const carrotEaten = carrotLeft - remaining;\n  return [carrotEaten, carrots];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const meals = Math.ceil(number - carrots * need);\n  const carrotLeft = meals * carro", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistincterCharacter", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    } else {\n      count += countDistincterCharacter(char);\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS) of all characters in the string.\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is O(n^2) where n is the length of the string.\n * Complexity: O(n^2)\n * Note: This algorithm is ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = operandList.reduce((acc, curr) => {\n    if (operatorList.includes(curr)) {\n      return acc + curr\n    }\n    return acc\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = operandList.reduce((acc, curr) => {\n    if (operatorList.includes(curr)) {\n      return acc + curr\n    }\n    return acc\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = operandList.reduce((acc, curr) => {\n    if (operatorList.includes(curr)) {\n      return acc + curr\n    }\n    return acc\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = operandList.reduce((acc, curr) => {\n    if (operatorList.includes(curr)) {\n      return acc + curr\n    }\n    return acc\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = operandList.reduce((acc, curr) => {\n    if (operatorList.includes(curr)) {\n      return acc + curr\n    }\n    return acc\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = operandList.reduce((acc, curr) => {\n    if (operatorList.includes(curr)) {\n      return acc + curr\n    }\n    return acc\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = '';\n  let reversedStr = '';\n  let reversedStrArr = [];\n  let reversedStrArrStr = [];\n  let reversedStrArrStrArr = [];\n  let reversedStrArrStrArrStr = [];\n  let reversedStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStr = [];\n  let reversedStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArrStrArr = [];\n  let reversedStrArrStrArrStrArrStrArrStrArrStr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Hex = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexString = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingAndPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingAndPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingAndPaddingAndPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingAndPaddingAndPaddingAndPadding('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringWithPaddingAndPaddingAndPaddingAndPadding = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5HexStringWithPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPaddingAndPadding", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = 0;\n  while (i < b) {\n    if (i % 2 === 0) {\n      result.push(j);\n    }\n    i += 1;\n    j += 1;\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += String.fromCharCode(parseInt(str[i], 10));\n  }\n  return result;\n};\n\n/**\n * Given a string, return the string with every character replaced by its\n * corresponding integer value.\n */\nconst replaceCharacters = str => {\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_lengths = notes.map(note => note.length);\n  const notes_beats = notes_lengths.reduce((acc, note) => acc + note, 0);\n  return notes_beats;\n};\n\n/**\n * Given a string, return a list of integers corresponding to how many beats does each note last.\n * For example, '.|' means \"half note, lasts one beat\".\n * \n * Your task is to parse this string and return list of integers corresponding to how many beats does each\n * not last.\n\n * Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseNotes('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseNotes = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_lengths = notes.map(note => note.length);\n  const notes_beats = notes_lengths.reduce((acc, note) => acc + note, 0);\n  return notes_beats;\n};\n\n/**\n * Given a string, return a list of integers corresponding to how many beats does each note last.\n * For example, '.|' means \"half note, lasts one beat\".\n * \n * Your task is to parse this string and return list of integers corresponding to how many beats does each\n * not last.\n\n * Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseNotes('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseNotes_noLast = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_lengths = notes.map(note => note.length);\n  const notes_beats = notes_lengths.reduce((acc, note) => acc + note, 0);\n  return notes_beats;\n};\n\n/**\n * Given a string, return a list of integers corresponding to how many beats does each note last.\n * For example, '.|' means \"half note, lasts one beat\".\n * \n * Your task is to parse this string and return list of integers corresponding to how many beats does each\n * not last.\n\n * Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseNotes_noLast('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseNotes_noLastNoLast = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_lengths = notes.map(note => note.length);\n  const notes_beats = notes_lengths.reduce((acc, note) => acc + note, 0);\n  return notes_beats;\n};\n\n/**\n * Given a string, return a list of integers corresponding to how many beats does each note last.\n * For example, '.|' means \"half note, lasts one beat\".\n * \n * Your task is to parse this string and return list of integers corresponding to how many beats does each\n * not last.\n\n * Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseNotes_noLastNoLast('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseNotes_noLastNoLastNoLast = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_lengths = notes.map(note => note.length);\n  const notes_beats = notes_lengths.reduce((acc, note) => acc + note, 0);\n  return notes_beats;\n};\n\n/**\n * Given a string, return a list of integers corresponding to how many beats does each note last.\n * For example, '.|' means \"half note, lasts one beat\".\n * \n * Your task is to parse this string and return list of integers corresponding to how many beats does each\n * not last.\n\n * Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseNotes_noLastNoLastNoLast('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseNotes_noLastNoLastNoLastNoLast = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_lengths = notes.map(note => note.length);\n  const notes_beats = notes_lengths.reduce((acc, note) => acc + note, 0);\n  return notes_beats;\n};\n\n/**\n * Given a string, return a list of integers corresponding to how many beats does each note last.\n * For example, '.|' means \"half note, lasts one beat\".\n * \n * Your task is to parse this string and return list of integers corresponding to how many beats does each\n * not last.\n\n * Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseNotes_noLastNoLastNoLastNoLast('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseNotes_noLastNoLastNoLastNoLastNoLast = (notes_string) => {\n  const notes = notes_string.split('|');\n  const notes_lengths = notes.map(note => note.length);\n  const notes_beats = notes_lengths.reduce((acc, note) => acc + note, 0);\n  return notes_beats;\n};\n\n/**\n * Given a string, return a list of integers corresponding to how many beats does each note last.\n * For example, '.|' means \"half note, lasts one beat\".\n * \n * Your task is to parse this string and return list of integers corresponding to how many beats does each\n * not last.\n\n * Here is a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTime", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortsNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n  const numbers = numbers.split(' ')\n  const sorted = []\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i]\n    if (number === 'zero') {\n      sorted.push('zero')\n    } else if (number === 'one') {\n      sorted.push('one')\n    } else if (number === 'two') {\n      sorted.push('two')\n    } else if (number === 'three') {\n      sorted.push('three')\n    } else if (number === 'four') {\n      sorted.push('four')\n    } else if (number === 'five') {\n      sorted.push('five')\n    } else if (number ==='six') {\n      sorted.push('six')\n    } else if (number ==='seven') {\n      sorted.push('seven')\n    } else if (number === 'eight') {\n      sorted.push('eight')\n    } else if (number === 'nine') {\n      sorted.push('nine')\n    } else {\n      sorted.push(number)\n    }\n  }\n  return sorted.join(' ')\n}\n\n/**\n  Given a string, return an array of the digits in that string.\n  >>> digits('one two three four five six seven eight nine')\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst digits = (str) => {\n  const digits = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = str.length\n  while (i < l) {\n    const c = str.charAt(i)\n    if (c >= '0' && c <= '9') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c >= 'a' && c <= 'z') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c >= 'A' && c <= 'Z') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c ==='') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '.') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '-') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '+') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '/') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '*') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '(') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === ')') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '[') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === ']') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '{') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '}') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '\"') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '\\\\') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '|') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '?') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '*') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '(') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === ')') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '[') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === ']') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '{') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '}') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '\"') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '\\\\') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '|') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '?') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '*') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '(') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === ')') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '[') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === ']') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '{') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '}') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '\"') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '\\\\') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '|') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '?') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '*') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '(') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === ')') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '[') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === ']') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '{') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '}') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '\"') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '\\\\') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '|') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '?') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '*') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '(') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === ')') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '[') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === ']') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '{') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '}') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '\"') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '\\\\') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '|') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '?') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '*') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '(') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === ')') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '[') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === ']') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '{') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '}') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '\"') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '\\\\') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (c === '|') {\n      digits.push(str.charAt(i))\n      i++\n    } else if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateFraction(3.5)\n  0.5\n  */\nconst truncateFraction = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponent(3.5)\n  3\n  */\nconst truncateExponent = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part of the number.\n  >>> truncateMantissa(3.5)\n  3\n  */\nconst truncateMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponent(3.5)\n  3\n  */\nconst truncateExponentMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponent(3.5)\n  3\n  */\nconst truncateExponentMantissaMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponent(3.5)\n  3\n  */\nconst truncateExponentMantissaMantissaMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponent(3.5)\n  3\n  */\nconst truncateExponentMantissaMantissaMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponent(3.5)\n  3\n  */\nconst truncateExponentMantissaMantissaMantissaMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponent(3.5)\n  3\n  */\nconst truncateExponentMantissaMantissaMantissaMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponent(3.5)\n  3\n  */\nconst truncateExponentMantissaMantissaMantissaMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponent(3.5)\n  3\n  */\nconst truncateExponentMantissaMantissaMantissaMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponent(3.5)\n  3\n  */\nconst truncateExponentMantissaMantissaMantissaMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponent(3.5)\n  3\n  */\nconst truncateExponentMantissaMantissaMantissaMantissaMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "foundCloserElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  const minDistance = Number.MAX_VALUE;\n  const minDistanceElement = undefined;\n  const minDistanceElementIndex = undefined;\n  const minDistanceElementValues = undefined;\n  const minDistanceElementValuesIndex = undefined;\n  const minDistanceElementValuesValues = undefined;\n  const minDistanceElementValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesIndex = undefined;\n  const minDistanceElementValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValuesValues", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnits", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * max / min)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> scaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst scaleToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> shearToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst shearToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> translateToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst translateToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rotateToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rotateToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> skewToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst skewToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> scaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst scaleToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> shearToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst shearToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> translateToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst translateToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rotateToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rotateToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> skewToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst skewToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> scaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst scaleToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> shearToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst shearToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MIN_VALUE, Number.MAX_VALUE])\n  return numbers.map((n) => n * min / max)\n}\n\n/**\n * Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> translateToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc', {}, []]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['abc', {}, []]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNone([])\n  []\n  >>> filterNone([None])\n  [None]\n  >>> filterNone([None, 1])\n  [None, 1]\n  */\nconst filterNone = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for empty lists\n  >>> filterEmptyLists([])\n  []\n  >>> filterEmptyLists([[]])\n  [[]]\n  >>> filterEmptyLists([[], 1])\n  [[], 1]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filterEmptyDicts({})\n  {}\n  >>> filterEmptyDicts([{}])\n  [{}]\n  >>> filterEmptyDicts([{}, 1])\n  [{}, 1]\n  */\nconst filterEmptyDicts = (dict) => {\n  return Object.keys(dict).filter(key => dict[key] === null);\n};\n\n/**\n * Filter given list of any python values only for empty strings\n  >>> filterEmptyStrings([])\n  []\n  >>> filterEmptyStrings([\"\"])\n  [\"\"]\n  >>> filterEmptyStrings([\"\", 1])\n  [\"\", 1]\n  */\nconst filterEmptyStrings = (strings) => {\n  return strings.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays([])\n  []\n  >>> filterEmptyArrays([[]])\n  [[]]\n  >>> filterEmptyArrays([[], 1])\n  [[], 1]\n  */\nconst filterEmptyArrays = (arrays) => {\n  return arrays.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filterEmptyObjects({})\n  {}\n  >>> filterEmptyObjects([{}])\n  [{}]\n  >>> filterEmptyObjects([{}, 1])\n  [{}, 1]\n  */\nconst filterEmptyObjects = (objects) => {\n  return Object.keys(objects).filter(key => objects[key] === null);\n};\n\n/**\n * Filter given list of any python values only for empty functions\n  >>> filterEmptyFunctions([])\n  []\n  >>> filterEmptyFunctions([() => {}])\n  [() => {}]\n  >>> filterEmptyFunctions([() => {}, 1])\n  [() => {}, 1]\n  */\nconst filterEmptyFunctions = (functions) => {\n  return functions.filter(value => typeof value === 'function');\n};\n\n/**\n * Filter given list of any python values only for empty lists\n  >>> filterEmptyLists([])\n  []\n  >>> filterEmptyLists([[]])\n  [[]]\n  >>> filterEmptyLists([[], 1])\n  [[], 1]\n  */\nconst filterEmptyLists = (lists) => {\n  return lists.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filterEmptyObjects({})\n  {}\n  >>> filterEmptyObjects([{}])\n  [{}]\n  >>> filterEmptyObjects([{}, 1])\n  [{}, 1]\n  */\nconst filterEmptyObjects = (objects) => {\n  return Object.keys(objects).filter(key => objects[key] === null);\n};\n\n/**\n * Filter given list of any python values only for empty functions\n  >>> filterEmptyFunctions([])\n  []\n  >>> filterEmptyFunctions([() => {}])\n  [() => {}]\n  >>> filterEmptyFunctions([() => {}, 1])\n  [() => {}, 1]\n  */\nconst filterEmptyFunctions = (functions) => {\n  return functions.filter(value => typeof value === 'function');\n};\n\n/**\n * Filter given list of any python values only for empty lists\n  >>> filterEmptyLists([])\n  []\n  >>> filterEmptyLists([[]])\n  [[]]\n  >>> filterEmptyLists([[], 1])\n  [[], 1]\n  */\nconst filterEmptyLists = (lists) => {\n  return lists.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filterEmptyObjects({})\n  {}\n  >>> filterEmptyObjects([{}])\n  [{}]\n  >>> filterEmptyObjects([{}, 1])\n  [{}, 1]\n  */\nconst filterEmptyObjects = (objects) => {\n  return Object.keys(objects).filter(key => objects[key] === null);\n};\n\n/**\n * Filter given list of any python values only for empty functions\n  >>> filterEmptyFunctions([])\n  []\n  >>> filterEmptyFunctions([() => {}])\n  [() => {}]\n  >>> filterEmptyFunctions([() => {}, 1])\n  [() => {}, 1]\n  */\nconst filterEmptyFunctions = (functions) => {\n  return functions.filter(value => typeof value === 'function');\n};\n\n/**\n * Filter given list of any python values only for empty lists\n  >>> filterEmptyLists([])\n  []\n  >>> filterEmptyLists([[]])\n  [[]]\n  >>> filterEmptyLists([[], 1])\n  [[], 1]\n  */\nconst filterEmptyLists = (lists) => {\n  return lists.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filterEmptyObjects({})\n  {}\n  >>> filterEmptyObjects([{}])\n  [{}]\n  >>> filterEmptyObjects([{}, 1])\n  [{}, 1]\n  */\nconst filterEmptyObjects = (objects) => {\n  return Object.keys(objects).filter(key => objects[key] === null);\n};\n\n/**\n * Filter given list of any python values only for empty functions\n  >>> filterEmptyFunctions([])\n  []\n  >>> filterEmptyFunctions([() => {}])\n  [() => {}]\n  >>> filterEmptyFunctions([() => {}, 1])\n  [() => {}, 1]\n  */\nconst filterEmptyFunctions = (functions) => {\n  return functions.filter(value => typeof value === 'function');\n};\n\n/**\n * Filter given list of any python values only for empty lists\n  >>> filterEmptyLists([])\n  []\n  >>> filterEmptyLists([[]])\n  [[]]\n  >>> filterEmptyLists([[], 1])\n  [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string.charCodeAt(i).length;\n  }\n  return length;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.startsWith(prefix);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.endsWith(suffix);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'a')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largerDivisors", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n  let divisor = 1;\n  let divisors = [];\n\n  while (divisor < n) {\n    divisors.push(divisor);\n    divisor *= 2;\n  }\n\n  return Math.max.apply(null, divisors);\n};\n\n/**\n * Given a number n, return true if n is a prime number.\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n * A prime number is a natural number that has no negative divisors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime number is a natural number that has no factors other than 1 and itself.\n * A prime ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorizes", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicate", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!seen.has(number)) {\n      seen.add(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n * A function that takes an array of numbers and returns a new array of\n * numbers with all occurrences of that number removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2]\n */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n * A function that takes an array of numbers and returns a new array of\n * numbers with all occurrences of that number removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2]\n */\nconst removeDuplicatesIgnoreCase = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number.toLowerCase()) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n * A function that takes an array of numbers and returns a new array of\n * numbers with all occurrences of that number removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2]\n */\nconst removeDuplicatesIgnoreCaseIgnoreCase = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number.toLowerCase()) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n * A function that takes an array of numbers and returns a new array of\n * numbers with all occurrences of that number removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2]\n */\nconst removeDuplicatesIgnoreCaseIgnoreCaseIgnoreCase = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number.toLowerCase()) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n * A function that takes an array of numbers and returns a new array of\n * numbers with all occurrences of that number removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2]\n */\nconst removeDuplicatesIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number.toLowerCase()) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n * A function that takes an array of numbers and returns a new array of\n * numbers with all occurrences of that number removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2]\n */\nconst removeDuplicatesIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number.toLowerCase()) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n * A function that takes an array of numbers and returns a new array of\n * numbers with all occurrences of that number removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2]\n */\nconst removeDuplicatesIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (result.indexOf(number.toLowerCase()) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n * A function that takes an array of numbers and returns a new array of\n * numbers with all occurrences of that number removed.\n * >>> removeDuplicates([1, 2, 3, 2, 4])\n * [1, 2]\n */\nconst removeDuplicatesIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipsCases", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/**\n * Returns a string that is the concatenation of two or more strings.\n * If any of the strings is empty, the result is empty.\n * If one of the strings is longer than the other, the result will be truncated.\n * If one of the strings is shorter than the other, the result will be padded.\n * If both strings are empty, the result will be empty.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.\n * If both strings are shorter than the other, the result will be padded.\n * If both strings are longer than the other, the result will be truncated.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* Convert string to number\n  >>> toNumber(null)\n  0\n  >>> toNumber('abc')\n  3\n  >>> toNumber('123')\n  123\n  >>> toNumber('123.45')\n  123.45\n  >>> toNumber('123.45.67')\n  123.4567\n  >>> toNumber('123.4567')\n  123.4567\n  >>> toNumber('123.4567.89')\n  123.456789\n  >>> toNumber('123.4567.89')\n  123.456789\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  >>> toNumber('123.4567.89.1')\n  123.45678901\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n  Filter an input list of strings only for the ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only for the ones that do not start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix))\n}\n\n/**\n  Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffixNot = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix))\n}\n\n/**\n  Filter an input list of strings only for the ones that do not start with a given prefix and end with a given suffix.\n  >>> filterByPrefixNot('abc', 'a')\n  ['abc']\n  >>> filterBySuffixNot('abc', 'a')\n  []\n  >>> filterBySuffixNot('abc', 'b')\n  []\n  >>> filterBySuffixNot('abc', 'c')\n  []\n  >>> filterBySuffixNot('abc', 'd')\n  []\n  >>> filterBySuffixNot('abc', 'e')\n  []\n  >>> filterBySuffixNot('abc', 'f')\n  []\n  >>> filterBySuffixNot('abc', 'g')\n  []\n  >>> filterBySuffixNot('abc', 'h')\n  []\n  >>> filterBySuffixNot('abc', 'i')\n  []\n  >>> filterBySuffixNot('abc', 'j')\n  []\n  >>> filterBySuffixNot('abc', 'k')\n  []\n  >>> filterBySuffixNot('abc', 'l')\n  []\n  >>> filterBySuffixNot('abc','m')\n  []\n  >>> filterBySuffixNot('abc', 'n')\n  []\n  >>> filterBySuffixNot('abc', 'o')\n  []\n  >>> filterBySuffixNot('abc', 'p')\n  []\n  >>> filterBySuffixNot('abc', 'q')\n  []\n  >>> filterBySuffixNot('abc', 'r')\n  []\n  >>> filterBySuffixNot('abc','s')\n  []\n  >>> filterBySuffixNot('abc', 't')\n  []\n  >>> filterBySuffixNot('abc', 'u')\n  []\n  >>> filterBySuffixNot('abc', 'v')\n  []\n  >>> filterBySuffixNot('abc', 'w')\n  []\n  >>> filterBySuffixNot('abc', 'x')\n  []\n  >>> filterBySuffixNot('abc', 'y')\n  []\n  >>> filterBySuffixNot('abc', 'z')\n  []\n  >>> filterBySuffixNot('abc', '0')\n  []\n  >>> filterBySuffixNot('abc', '1')\n  []\n  >>> filterBySuffixNot('abc', '2')\n  []\n  >>> filterBySuffixNot('abc', '3')\n  []\n  >>> filterBySuffixNot('abc', '4')\n  []\n  >>> filterBySuffixNot('abc', '5')\n  []\n  >>> filterBySuffixNot('abc', '6')\n  []\n  >>> filterBySuffixNot('abc', '7')\n  []\n  >>> filterBySuffixNot('abc', '8')\n  []\n  >>> filterBySuffixNot('abc', '9')\n  []\n  >>> filterBySuffixNot('abc', 'a')\n  []\n  >>> filterBySuffixNot('abc', 'bcd')\n  []\n  >>> filterBySuffixNot('abc', 'cde')\n  []\n  >>> filterBySuffixNot('abc', 'def')\n  []\n  >>> filterBySuffixNot('abc', 'ghi')\n  []\n  >>> filterBySuffixNot('abc', 'jkl')\n  []\n  >>> filterBySuffixNot('abc','mno')\n  []\n  >>> filterBySuffixNot('abc', 'pqrs')\n  []\n  >>> filterBySuffixNot('abc','stuv')\n  []\n  >>> filterBySuffixNot('abc', 'xyz')\n  []\n  >>> filterBySuffixNot('abc', '0123')\n  []\n  >>> filterBySuffixNot('abc', '01234')\n  []\n  >>> filterBySuffixNot('abc', '012345')\n  []\n  >>> filterBySuffixNot('abc', '0123456')\n  []\n  >>> filterBySuffixNot('abc', '0123456789')\n  []\n  >>> filterBySuffixNot('abc', '0123456789a')\n  []\n  >>> filterBySuffixNot('abc', '0123456789b')\n  []\n  >>> filterBySuffixNot('abc', '0123456789c')\n  []\n  >>> filterBySuffixNot('abc', '0123456789d')\n  []\n  >>> filterBySuffixNot('abc', '0123456789e')\n  []\n  >>> filterBySuffixNot('abc', '0123456789f')\n  []\n  >>> filterBySuffixNot('abc', '0123456789g')\n  []\n  >>> filterBySuffixNot('abc', '0123456789h')\n  []\n  >>> filterBySuffixNot('abc', '0123456789i')\n  []\n  >>> filterBySuffixNot('abc', '0123456789j')\n  []\n  >>> filterBySuffixNot('abc', '0123456789k')\n  []\n  >>> filterBySuffixNot('abc', '0123456789l')\n  []\n  >>> filterBySuffixNot('abc', '0123456789m')\n  []\n  >>> filterBySuffixNot('abc', '0123456789n')\n  []\n  >>> filterBySuffixNot('abc', '0123456789o')\n  []\n  >>> filterBySuffixNot('abc', '0123456789p')\n  []\n  >>> filterBySuffixNot('abc', '0123456789q')\n  []\n  >>> filterBySuffixNot('abc', '0123456789r')\n  []\n  >>> filterBySuffixNot('abc', '0123456789s')\n  []\n  >>> filterBySuffixNot('abc', '0123456789t')\n  []\n  >>> filterBySuffixNot('abc', '0123456789u')\n  []\n  >>> filterBySuffixNot('abc', '0123456789v')\n  []\n  >>> filterBySuffixNot('abc', '0123456789w')\n  []\n  >>> filterBySuffixNot('abc', '0123456789x')\n  []\n  >>> filterBySuffixNot('abc', '0123456789y')\n  []\n  >>> filterBySuffixNot('abc', '0123456789z')\n  []\n  >>> filterBySuffixNot('abc', '01234567890')\n  []\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeros", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "gottenPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> gottenNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenNegative = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*Return all numbers in the list that are greater than or equal to zero.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositiveOrZero = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*Return all numbers in the list that are less than or equal to zero.\n  >>> gottenNegative([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenNegativeOrZero = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*Return all numbers in the list that are greater than or equal to zero.\n  >>> gottenPositiveOrZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenPositiveOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositiveOrZeroOrZero = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*Return all numbers in the list that are less than or equal to zero.\n  >>> gottenNegativeOrZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenNegativeOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenNegativeOrZeroOrZero = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*Return all numbers in the list that are greater than or equal to zero.\n  >>> gottenPositiveOrZeroOrZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenPositiveOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositiveOrZeroOrZeroOrZero = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*Return all numbers in the list that are less than or equal to zero.\n  >>> gottenNegativeOrZeroOrZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenNegativeOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenNegativeOrZeroOrZeroOrZero = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*Return all numbers in the list that are greater than or equal to zero.\n  >>> gottenPositiveOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenPositiveOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositiveOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*Return all numbers in the list that are less than or equal to zero.\n  >>> gottenNegativeOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenNegativeOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenNegativeOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*Return all numbers in the list that are greater than or equal to zero.\n  >>> gottenPositiveOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenPositiveOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositiveOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*Return all numbers in the list that are less than or equal to zero.\n  >>> gottenNegativeOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenNegativeOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenNegativeOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*Return all numbers in the list that are greater than or equal to zero.\n  >>> gottenPositiveOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenPositiveOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*Return all numbers in the list that are less than or equal to zero.\n  >>> gottenNegativeOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenNegativeOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter((n) => n < 0)\n}\n\n/*Return all numbers in the list that are greater than or equal to zero.\n  >>> gottenPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositiveOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (l) => {\n  return l.filter((n) => n > 0)\n}\n\n/*Return all numbers in the list that are less than or equal to zero.\n  >>> gottenNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([-1, 2, -4, 5, 6])\n  [-4, 5, 6]\n  >>> gottenNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenNegativeOrZeroOrZeroOrZeroOrZeroOrZeroOr", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> factors(10)\n  [2, 3]\n  >>> factors(100)\n  [2, 3, 5]\n  >>> factors(1000)\n  [2, 3, 5, 7]\n  >>> factors(10000)\n  [2, 3, 5, 7, 11]\n  >>> factors(100000)\n  [2, 3, 5, 7, 11, 13]\n  >>> factors(1000000)\n  [2, 3, 5, 7, 11, 13, 17]\n  >>> factors(10000000)\n  [2, 3, 5, 7, 11, 13, 17, 19]\n  >>> factors(100000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23]\n  >>> factors(1000000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  >>> factors(10000000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]\n  >>> factors(100000000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n  >>> factors(1000000000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]\n  >>> factors(1000000000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47]\n  >>> factors(100000000000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53]\n  >>> factors(100000000000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59]\n  >>> factors(10000000000000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61]\n  >>> factors(10000000000000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67]\n  >>> factors(100000000000000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71]\n  >>> factors(100000000000000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73]\n  >>> factors(1000000000000000001)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79]\n  >>> factors(1000000000000000001)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83]\n  >>> factors(1000000000000000002)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]\n  >>> factors(1000000000000000002)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  >>> factors(1000000000000000003)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n  >>> factors(1000000000000000003)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107]\n  >>> factors(1000000000000000004)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113]\n  >>> factors(1000000000000000004)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127]\n  >>> factors(1000000000000000005)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131]\n  >>> factors(1000000000000000005)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137]\n  >>> factors(1000000000000000006)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143]\n  >>> factors(1000000000000000006)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151]\n  >>> factors(1000000000000000007)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151, 157]\n  >>> factors(1000000000000000007)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151, 157, 163]\n  >>> factors(1000000000000000008)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151, 157, 163, 169]\n  >>> factors(1000000000000000008)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151, 157, 163, 169, 173]\n  >>> factors(1000000000000000009)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151, 157, 163, 169, 173, 179]\n  >>> factors(1000000000000000009)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 127, 131, 137, 143, 151, 157, 163, 169, 173, 179, 191]\n  >>> factors(1000000000000000010)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 107, 113, 12", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw new Error('findZero expects list of even number of coefficients');\n  }\n  let x = xs[0];\n  let zero = 0;\n  for (let i = 1; i < xs.length; i++) {\n    if (poly(xs, x) === 0) {\n      zero = i;\n      break;\n    }\n    x = poly(xs, x);\n  }\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw new Error('findZero expects list of even number of coefficients');\n  }\n  let x = xs[0];\n  let zero = 0;\n  for (let i = 1; i < xs.length; i++) {\n    if (poly2(xs, x) === 0) {\n      zero = i;\n      break;\n    }\n    x = poly2(xs, x);\n  }\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw new Error('findZero expects list of even number of coefficients');\n  }\n  let x = xs[0];\n  let zero = 0;\n  for (let i = 1; i < xs.length; i++) {\n    if (poly3(xs, x) === 0) {\n      zero = i;\n      break;\n    }\n    x = poly3(xs, x);\n  }\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero4 = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw new Error('findZero expects list of even number of coefficients');\n  }\n  let x = xs[0];\n  let zero = 0;\n  for (let i = 1; i < xs.length; i++) {\n    if (poly4(xs, x) === 0) {\n      zero = i;\n      break;\n    }\n    x = poly4(xs, x);\n  }\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero5 = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw new Error('findZero expects list of even number of coefficients');\n  }\n  let x = xs[0];\n  let zero = 0;\n  for (let i = 1; i < xs.length; i++) {\n    if (poly5(xs, x) === 0) {\n      zero = i;\n      break;\n    }\n    x = poly5(xs, x);\n  }\n  return zero;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only zero point, even if there are many.\n  Moreover, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortsThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n  const l2 = l.slice(0).sort((a, b) => a - b);\n  const l3 = l2.slice(0).sort((a, b) => a - b);\n  return l3;\n};\n\n/**\n  Given a list l, return a new list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  [1]\n  >>> sortsThird2([1])\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy2 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy3 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy4 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy5 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy6 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy7 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy8 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy9 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy10 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy11 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy12 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy13 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy14 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy15 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy16 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy17 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy(v => v % 2 === 0, [0, 2, 3, 5, 9, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy18 = (key, l) => {\n  let seen = {}\n  return l.filter((v, i, a) => {\n    if (!seen[v]) {\n      seen[v] = true\n      return true\n    }\n    return false\n  })\n}\n\n/*Return sorted unique elements in a list\n  >>> unique", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElements", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElements([1, 2, 3])\n  1\n  >>> minElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElements = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -45\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return average of all elements in list.\n  >>> averageElements([1, 2, 3])\n  2.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.75\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return median of all elements in list.\n  >>> medianElements([1, 2, 3])\n  3\n  >>> medianElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  5\n  */\nconst medianElements = (l) => {\n  let mid = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > mid) {\n      mid = l[i];\n      count++;\n    }\n  }\n  if (count % 2 === 0) {\n    return mid;\n  } else {\n    return l[Math.floor(l.length / 2)];\n  }\n};\n\n/*Return standard deviation of all elements in list.\n  >>> stdElements([1, 2, 3])\n  1\n  >>> stdElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0.5\n  */\nconst stdElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance of all elements in list.\n  >>> varianceElements([1, 2, 3])\n  1\n  >>> varianceElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0.5\n  */\nconst varianceElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElements = (l) => {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElements = (l) => {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElements = (l) => {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElements = (l) => {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElements = (l) => {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElements = (l) => {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElements = (l) => {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElements = (l) => {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElements = (l) => {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElements = (l) => {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      count = i;\n    }\n  }\n  return count;\n};\n\n/*Return mode of all elements in list.\n  >>> modeElements([1, 2, 3])\n  1\n  >>> modeElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst modeElements = (l) => {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzzes", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  let i = n;\n  while (i > 0) {\n    if (i % 13 === 0) {\n      count += 1;\n    }\n    if (i % 11 === 0) {\n      count += 1;\n    }\n    i /= 10;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from right to left, is equal to n.\n  >>> isPowerOfTwo(100)\n  true\n  >>> isPowerOfTwo(1000)\n  false\n  >>> isPowerOfTwo(10000)\n  false\n  >>> isPowerOfTwo(100000)\n  true\n  */\nconst isPowerOfTwo = (n) => {\n  let i = n;\n  let sum = 0;\n  while (i > 0) {\n    sum += i % 10;\n    i /= 10;\n  }\n  return sum === n;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from right to left, is equal to n.\n  >>> isPowerOfTen(100)\n  true\n  >>> isPowerOfTen(1000)\n  false\n  >>> isPowerOfTen(10000)\n  false\n  >>> isPowerOfTen(100000)\n  true\n  */\nconst isPowerOfTen = (n) => {\n  let i = n;\n  let sum = 0;\n  while (i > 0) {\n    sum += i % 10;\n    i /= 10;\n  }\n  return sum === n;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from right to left, is equal to n.\n  >>> isPowerOfTwo(100)\n  true\n  >>> isPowerOfTwo(1000)\n  false\n  >>> isPowerOfTwo(10000)\n  false\n  >>> isPowerOfTwo(100000)\n  true\n  */\nconst isPowerOfTwoOrEqualTo = (n) => {\n  let i = n;\n  let sum = 0;\n  while (i > 0) {\n    sum += i % 10;\n    i /= 10;\n  }\n  return sum === n;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from right to left, is equal to n.\n  >>> isPowerOfTen(100)\n  true\n  >>> isPowerOfTen(1000)\n  false\n  >>> isPowerOfTen(10000)\n  false\n  >>> isPowerOfTen(100000)\n  true\n  */\nconst isPowerOfTenOrEqualTo = (n) => {\n  let i = n;\n  let sum = 0;\n  while (i > 0) {\n    sum += i % 10;\n    i /= 10;\n  }\n  return sum === n;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from right to left, is equal to n.\n  >>> isPowerOfTwoOrEqualTo(100)\n  true\n  >>> isPowerOfTwoOrEqualTo(1000)\n  false\n  >>> isPowerOfTwoOrEqualTo(10000)\n  false\n  >>> isPowerOfTwoOrEqualTo(100000)\n  true\n  */\nconst isPowerOfTwoOrEqualTo = (n) => {\n  let i = n;\n  let sum = 0;\n  while (i > 0) {\n    sum += i % 10;\n    i /= 10;\n  }\n  return sum === n;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from right to left, is equal to n.\n  >>> isPowerOfTenOrEqualTo(100)\n  true\n  >>> isPowerOfTenOrEqualTo(1000)\n  false\n  >>> isPowerOfTenOrEqualTo(10000)\n  false\n  >>> isPowerOfTenOrEqualTo(100000)\n  true\n  */\nconst isPowerOfTenOrEqualTo = (n) => {\n  let i = n;\n  let sum = 0;\n  while (i > 0) {\n    sum += i % 10;\n    i /= 10;\n  }\n  return sum === n;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from right to left, is equal to n.\n  >>> isPowerOfTwoOrEqualTo(100)\n  true\n  >>> isPowerOfTwoOrEqualTo(1000)\n  false\n  >>> isPowerOfTwoOrEqualTo(10000)\n  false\n  >>> isPowerOfTwoOrEqualTo(100000)\n  true\n  */\nconst isPowerOfTwoOrEqualTo = (n) => {\n  let i = n;\n  let sum = 0;\n  while (i > 0) {\n    sum += i % 10;\n    i /= 10;\n  }\n  return sum === n;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from right to left, is equal to n.\n  >>> isPowerOfTenOrEqualTo(100)\n  true\n  >>> isPowerOfTenOrEqualTo(1000)\n  false\n  >>> isPowerOfTenOrEqualTo(10000)\n  false\n  >>> isPowerOfTenOrEqualTo(100000)\n  true\n  */\nconst isPowerOfTenOrEqualTo = (n) => {\n  let i = n;\n  let sum = 0;\n  while (i > 0) {\n    sum += i % 10;\n    i /= 10;\n  }\n  return sum === n;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from right to left, is equal to n.\n  >>> isPowerOfTwoOrEqualTo(100)\n  true\n  >>> isPowerOfTwoOrEqualTo(1000)\n  false\n  >>> isPowerOfTwoOrEqualTo(10000)\n  false\n  >>> isPowerOfTwoOrEqualTo(100000)\n  true\n  */\nconst isPowerOfTwoOrEqualTo = (n) => {\n  let i = n;\n  let sum = 0;\n  while (i > 0) {\n    sum += i % 10;\n    i /= 10;\n  }\n  return sum === n;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from right to left, is equal to n.\n  >>> isPowerOfTenOrEqualTo(100)\n  true\n  >>> isPowerOfTenOrEqualTo(1000)\n  false\n  >>> isPowerOfTenOrEqualTo(10000)\n  false\n  >>> isPowerOfTenOrEqualTo(100000)\n  true\n  */\nconst isPowerOfTenOrEqualTo = (n) => {\n  let i = n;\n  let sum = 0;\n  while (i > 0) {\n    sum += i % 10;\n    i /= 10;\n  }\n  return sum === n;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from right to left, is equal to n.\n  >>> isPowerOfTwoOrEqualTo(100)\n  true\n  >>> isPowerOfTwoOrEqualTo(1000)\n  false\n  >>> isPowerOfTwoOrEqualTo(10000)\n  false\n  >>> isPowerOfTwoOrEqualTo(100000)\n  true\n  */\nconst isPowerOfTwoOrEqualTo = (n) => {\n  let i = n;\n  let sum = 0;\n  while (i > 0) {\n    sum += i % 10;\n    i /= 10;\n  }\n  return sum === n;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its digits, starting from right to left, is equal to n.\n  >>> isPowerOfTen", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortsEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortsOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortsOdd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOdd([5, 6, 3, 4])\n  [5, 6, 3, 4, 1]\n  */\nconst sortsEvenOdd = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortsOddEven([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortsOddEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortsEvenOddEven([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortsEvenOddEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortsOddOddEven([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortsOddOddEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEvenOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortsEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortsEvenOddOddEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortsOddOddOddEven([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortsOddOddOddEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEvenOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortsEvenOddOddOddEven([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortsEvenOddOddOddEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOddOddOddOddEven([1, 2, 3])\n  [3, 2, 1]\n  >>> sortsOddOddOddOddEven([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortsOddOddOddOddEven = (l) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i]);\n    } else {\n      even.push(l[i]);\n    }\n  }\n  return [even, odd];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEvenOddOdd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns true if string contains only letters and digits. Returns false otherwise.\n  */\nconst isOnlyLetterOrDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters. Returns false otherwise.\n  */\nconst isOnlyLetter = (s) => {\n  return /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only numbers. Returns false otherwise.\n  */\nconst isOnlyNumber = (s) => {\n  return /^[0-9]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumber = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetter = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetter = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetterOrDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetterOrDigitAndLetter = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetterOrDigitAndLetterOrDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetter = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigit = (s) => {\n  return /^[a-zA-Z0-9]+$/.test(s) && /^[0-9]+$/.test(s) && /^[a-zA-Z]+$/.test(s);\n}\n\n/*\n  returns true if string contains only letters and numbers. Returns false otherwise.\n  */\nconst isOnlyLetterOrNumberAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigitAndLetterOrDigit", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFibs", "gc": "<|endoftext|>/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  let prime = 1;\n  while (true) {\n    if (n % 2 === 0) {\n      prime++;\n    }\n    if (n % 3 === 0) {\n      prime++;\n    }\n    if (n % 5 === 0) {\n      prime++;\n    }\n    if (n % 7!== 0) {\n      break;\n    }\n    n /= 7;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      prime++;\n    }\n  }\n  return prime;\n};\n\n/**\n * Given a number n, return true if it is a prime number.\n * False otherwise.\n */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect square.\n * False otherwise.\n */\nconst isPerfectSquare = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */\nconst isPerfectCube = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a number n, return true if it is a perfect cube.\n * False otherwise.\n */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanerAbsolutesDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const means = numbers.map(n => Math.pow(n, 2));\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map(n => Math.pow((n - mean), 2));\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.sqrt(deviation);\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meanerSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerSquaredDeviation = (numbers) => {\n  const means = numbers.map(n => Math.pow(n, 2));\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map(n => Math.pow((n - mean), 2));\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return deviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Error\n  around the mean of this dataset.\n  Mean Squared Error is the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  MSE = average | x - x_mean |^2\n  >>> meanerSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerSquaredError = (numbers) => {\n  const means = numbers.map(n => Math.pow(n, 2));\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map(n => Math.pow((n - mean), 2));\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return deviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Logarithmic Error\n  around the mean of this dataset.\n  Mean Squared Logarithmic Error is the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  MSLE = average | x - x_mean |log(2)\n  >>> meanerSquaredLogarithmicError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerSquaredLogarithmicError = (numbers) => {\n  const means = numbers.map(n => Math.pow(n, 2));\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map(n => Math.pow((n - mean), 2));\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.log(deviation);\n};\n\n/**\n * Given a list of input numbers, calculate Mean Absolute Percentage Error\n  around the mean of this dataset.\n  Mean Absolute Percentage Error is the average of the absolute differences between each\n  element and a centerpoint (mean in this case):\n  MAPE = average | x - x_mean |%\n  >>> meanerAbsolutePercentageError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutePercentageError = (numbers) => {\n  const means = numbers.map(n => Math.pow(n, 2));\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map(n => Math.pow((n - mean), 2));\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return deviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Absolute Deviation Percentage Error\n  around the mean of this dataset.\n  Mean Absolute Deviation Percentage Error is the average of the absolute differences between each\n  element and a centerpoint (mean in this case):\n  MADP = average | x - x_mean |%\n  >>> meanerAbsoluteDeviationPercentageError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsoluteDeviationPercentageError = (numbers) => {\n  const means = numbers.map(n => Math.pow(n, 2));\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map(n => Math.pow((n - mean), 2));\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return deviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Deviation Percentage Error\n  around the mean of this dataset.\n  Mean Squared Deviation Percentage Error is the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  MSDP = average | x - x_mean |%\n  >>> meanerSquaredDeviationPercentageError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerSquaredDeviationPercentageError = (numbers) => {\n  const means = numbers.map(n => Math.pow(n, 2));\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map(n => Math.pow((n - mean), 2));\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return deviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Error Percentage Error\n  around the mean of this dataset.\n  Mean Squared Error Percentage Error is the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  MSEP = average | x - x_mean |%\n  >>> meanerSquaredErrorPercentageError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerSquaredErrorPercentageError = (numbers) => {\n  const means = numbers.map(n => Math.pow(n, 2));\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map(n => Math.pow((n - mean), 2));\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return deviation;\n};\n\n/**\n * Given a list of input numbers, calculate Mean Squared Logarithmic Error Percentage Error\n  around the mean of this dataset.\n  Mean Squared Logarithmic Error Percentage Error is the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  MSLEP = average | x - x_mean |log(2)\n  >>> meanerSquaredLogarithmicErrorPercentageError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerSquaredLogarithmicErrorPercentageError = (numbers) => {\n  const means = numbers.map(n => Math.pow(n, 2));\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map(n => Math.pow((n - mean), 2));\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.log(deviation);\n};\n\n/**\n * Given a list of input numbers, calculate Mean Absolute Percentage Error\n  around the mean of this dataset.\n  Mean Absolute Percentage Error is the average of the absolute differences between each\n  element and a centerpoint (mean in this case", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSummingToZeroed", "gc": "<|endoftext|>/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  findMaxTriplesToSum takes a list of integers as an input.\n  it returns the maximum number of triplets that sum to zero.\n\n  >>> findMaxTriplesToSum([1, 3, 5, 0])\n  3\n  >>> findMaxTriplesToSum([1, 3, -2, 1])\n  2\n  >>> findMaxTriplesToSum([1, 2, 3, 7])\n  3\n  >>> findMaxTriplesToSum([2, 4, -5, 3, 9, 7])\n  2\n  >>> findMaxTriplesToSum([1])\n  1\n  */\nconst findMaxTriplesToSum = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0 && triplesSummingToZeroed(l)) {\n      max++;\n    }\n  }\n  return max;\n};\n\n/*\n  findMaxTriplesToZeroed takes a list of integers as an input.\n  it returns the maximum number of triplets that sum to zero.\n\n  >>> findMaxTriplesToZeroed([1, 3, 5, 0])\n  3\n  >>> findMaxTriplesToZeroed([1, 3, -2, 1])\n  2\n  >>> findMaxTriplesToZeroed([1, 2, 3, 7])\n  3\n  >>> findMaxTriplesToZeroed([2, 4, -5, 3, 9, 7])\n  2\n  >>> findMaxTriplesToZeroed([1])\n  1\n  */\nconst findMaxTriplesToZeroed = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0 && triplesSummingToZeroed(l)) {\n      max++;\n    }\n  }\n  return max;\n};\n\n/*\n  findMinTriplesToSum takes a list of integers as an input.\n  it returns the minimum number of triplets that sum to zero.\n\n  >>> findMinTriplesToSum([1, 3, 5, 0])\n  1\n  >>> findMinTriplesToSum([1, 3, -2, 1])\n  1\n  >>> findMinTriplesToSum([1, 2, 3, 7])\n  1\n  >>> findMinTriplesToSum([2, 4, -5, 3, 9, 7])\n  1\n  >>> findMinTriplesToSum([1])\n  1\n  */\nconst findMinTriplesToSum = (l) => {\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0 && triplesSummingToZeroed(l)) {\n      min++;\n    }\n  }\n  return min;\n};\n\n/*\n  findMinTriplesToZeroed takes a list of integers as an input.\n  it returns the minimum number of triplets that sum to zero.\n\n  >>> findMinTriplesToZeroed([1, 3, 5, 0])\n  1\n  >>> findMinTriplesToZeroed([1, 3, -2, 1])\n  1\n  >>> findMinTriplesToZeroed([1, 2, 3, 7])\n  1\n  >>> findMinTriplesToZeroed([2, 4, -5, 3, 9, 7])\n  1\n  >>> findMinTriplesToZeroed([1])\n  1\n  */\nconst findMinTriplesToZeroed = (l) => {\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0 && triplesSummingToZeroed(l)) {\n      min++;\n    }\n  }\n  return min;\n};\n\n/*\n  findMaxTriplesToSum takes a list of integers as an input.\n  it returns the maximum number of triplets that sum to zero.\n\n  >>> findMaxTriplesToSum([1, 3, 5, 0])\n  3\n  >>> findMaxTriplesToSum([1, 3, -2, 1])\n  2\n  >>> findMaxTriplesToSum([1, 2, 3, 7])\n  3\n  >>> findMaxTriplesToSum([2, 4, -5, 3, 9, 7])\n  2\n  >>> findMaxTriplesToSum([1])\n  1\n  */\nconst findMaxTriplesToSum = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0 && triplesSummingToZeroed(l)) {\n      max++;\n    }\n  }\n  return max;\n};\n\n/*\n  findMaxTriplesToZeroed takes a list of integers as an input.\n  it returns the maximum number of triplets that sum to zero.\n\n  >>> findMaxTriplesToZeroed([1, 3, 5, 0])\n  3\n  >>> findMaxTriplesToZeroed([1, 3, -2, 1])\n  2\n  >>> findMaxTriplesToZeroed([1, 2, 3, 7])\n  3\n  >>> findMaxTriplesToZeroed([2, 4, -5, 3, 9, 7])\n  2\n  >>> findMaxTriplesToZeroed([1])\n  1\n  */\nconst findMaxTriplesToZeroed = (l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0 && triplesSummingToZeroed(l)) {\n      max++;\n    }\n  }\n  return max;\n};\n\n/*\n  findMinTriplesToSum takes a list of integers as an input.\n  it returns the minimum number of triplets that sum to zero.\n\n  >>> findMinTriplesToSum([1, 3, 5, 0])\n  1\n  >>> findMinTriplesToSum([1, 3, -2, 1])\n  1\n  >>> findMinTriplesToSum([1, 2, 3, 7])\n  1\n  >>> findMinTriplesToSum([2, 4, -5, 3, 9, 7])\n  1\n  >>> findMinTriplesToSum([1])\n  1\n  */\nconst findMinTriplesToSum = (l) => {\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0 && triplesSummingToZeroed(l)) {\n      min++;\n    }\n  }\n  return min;\n};\n\n/*\n  findMinTriplesToZeroed takes a list of integers as an input.\n  it returns the minimum number of triplets that sum to zero.\n\n  >>> findMinTriplesToZeroed([1, 3, 5, 0])\n  1\n  >>> findMinTriplesToZeroed([1, 3, -2, 1])\n  1\n  >>> findMinTriplesToZeroed([1, 2, 3, 7])\n  1\n  >>> findMinTriplesToZeroed([2, 4, -5, 3, 9, 7])\n  1\n  >>> findMinTriplesToZeroed([1])\n  1\n  */\nconst findMinTriplesToZeroed = (l) => {\n  let min = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0 && triplesSummingToZeroed(l)) {\n      min++;\n    }\n  }\n  return min;\n};\n\n/*\n  find", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carsRacesCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    if (\n      cars[i].speed > 0 &&\n      cars[i].speed < cars[i - 1].speed &&\n      cars[i].speed > cars[i - 1].speed * 0.5\n    ) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a road with n cars, determine if any of them are colliding.\n  A collision is one in which two or more cars collide when they move in opposite\n  directions.\n\n  For example, given the following road:\n\n  +---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F | G | H |\n  +---+---+---+---+---+---+---+---+---+\n  ^\n  v\n  +---+---+---+---+---+---+---+---+---+\n  | A | B | C | D | E | F", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrLists", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrLists = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverseReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverseReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverseReverseReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverseReverseReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverseReverseReverseReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverseReverseReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverseReverseReverseReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverseReverseReverseReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverseReverseReverseReverseReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverseReverseReverseReverseReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverseReverseReverseReverseReverseReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] + 1)\n  }\n  return result\n}\n\n/*Return list with elements decremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverseReverseReverseReverseReverse = (l) => {\n  let result = []\n  for (let i = l.length - 1; i >= 0; i--) {\n    result.push(l[i] - 1)\n  }\n  return result\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst in", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairSumsToZero", "gc": "<|endoftext|>/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/**\n  removeDuplicatesFromList takes a list of integers as an input.\n  it returns another list without duplicates.\n  >>> removeDuplicatesFromList([1, 3, 5, 7])\n  [3, 5, 7]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  >>> removeDuplicatesFromList([1, 1, 1])\n  [1, 1, 1]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBases", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n  if (base === 10) return x.toString();\n  const digits = Math.log10(Math.abs(x));\n  const decimals = digits - Math.floor(digits);\n  const decimal = decimals > 0? decimals : 0;\n  const result = x.toString();\n  let sign = x < 0? \"-\" : \"\";\n  if (decimal) {\n    result += decimal;\n    sign = \".\";\n  }\n  result += sign;\n  while (result.length < base) {\n    result.push(\"0\");\n  }\n  return result;\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toBase10 = (str, base) => {\n  const result = parseInt(str, base);\n  if (isNaN(result)) {\n    throw new Error(`Invalid number ${str}`);\n  }\n  return result;\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toNumber = (str, base) => {\n  const result = toBase10(str, base);\n  return result === 0? 0 : result;\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toFloat = (str, base) => {\n  const result = toBase10(str, base);\n  return result === 0? 0 : parseFloat(result);\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toDecimal = (str, base) => {\n  const result = toBase10(str, base);\n  return result === 0? 0 : parseInt(result, 10);\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHex = (str, base) => {\n  const result = toBase10(str, base);\n  return result === 0? 0 : parseInt(result, 16);\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexadecimal = (str, base) => {\n  const result = toHex(str, base);\n  return result === 0? 0 : parseInt(result, 16);\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexadecimalString = (str, base) => {\n  const result = toHexadecimal(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexString = (str, base) => {\n  const result = toHexadecimalString(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toDecimalString = (str, base) => {\n  const result = toHexString(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexadecimalStringWithZero = (str, base) => {\n  const result = toHexadecimalString(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexStringWithZero = (str, base) => {\n  const result = toHexString(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexadecimalStringWithZero = (str, base) => {\n  const result = toHexadecimalStringWithZero(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexStringWithZero = (str, base) => {\n  const result = toHexString(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexadecimalStringWithZero = (str, base) => {\n  const result = toHexadecimalStringWithZero(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexStringWithZero = (str, base) => {\n  const result = toHexString(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexadecimalStringWithZero = (str, base) => {\n  const result = toHexadecimalStringWithZero(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexStringWithZero = (str, base) => {\n  const result = toHexString(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexadecimalStringWithZero = (str, base) => {\n  const result = toHexadecimalStringWithZero(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexStringWithZero = (str, base) => {\n  const result = toHexString(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexadecimalStringWithZero = (str, base) => {\n  const result = toHexadecimalStringWithZero(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexStringWithZero = (str, base) => {\n  const result = toHexString(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexadecimalStringWithZero = (str, base) => {\n  const result = toHexadecimalStringWithZero(str, base);\n  return result === 0? 0 : result.toString();\n};\n\n/**\n * Convert string to number with base 10.\n *\n * @param {String} str\n * @param {Number} base\n * @return {Number}\n */\nconst toHexStringWithZero = (str, base) => {\n  const result = toHexString(str, base);\n  return result === 0? ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 2)\n  4.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  3.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, -1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b - 4 * a * h) / (2 * a);\n  return Math.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16) + fib(n-17) + fib(n-18) + fib(n-19) + fib(n-20).\n  Please write a function to efficiently compute the n-th element of the Fibonacci sequence whose first element is n.\n  >>> fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  let mid = Math.floor((n - 1) / 2)\n  return median(l.slice(0, mid)) + (l[mid]? median(l.slice(mid + 1)) : 0)\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(e => e > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .reverse()\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 3)\n  true\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .slice(0, length)\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .slice(0, length)\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpace('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpace = (text, length) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .slice(0, length)\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpace('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .slice(0, length)\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .slice(0, length)\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .slice(0, length)\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .slice(0, length)\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .slice(0, length)\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .slice(0, length)\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .slice(0, length)\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .slice(0, length)\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .slice(0, length)\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('aba', 5)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  return text.split('')\n   .map((char) => char === text.reduce((acc, char) => acc + char.charCodeAt(0), 0))\n   .slice(0, length)\n   .join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace('ab", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  assert(n >= 0 && n <= p,'modp n must be >= 0 and <= p');\n  assert(p >= 0 && p <= p,'modp p must be >= 0 and <= p');\n  assert(p === 0 || p === 1 || p === p,'modp p must be 0 or 1');\n  if (p === 0) {\n    return 1;\n  }\n  if (p === 1) {\n    return n;\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return p;\n  }\n  if (n % p === 0) {\n    return modp(n / p, p);\n  }\n  return modp(n % p, p);\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eq = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqStrict = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqZero = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqOne = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqTwo = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqThree = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqFour = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqFive = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqSix = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqSeven = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqEight = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqNine = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqTen = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqEleven = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqTwelve = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqThirteen = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqFourteen = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqFifteen = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqSixteen = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqSeventeen = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqEighteen = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqNineteen = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqTwenty = (a, p) => {\n  return a === p;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqTwentyOne = (a, p) => {\n  return a === p;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqTwentyTwo = (a, p) => {\n  return a === p;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqTwentyThree = (a, p) => {\n  return a === p;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqTwentyFour = (a, p) => {\n  return a === p;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqTwentyFive = (a, p) => {\n  return a === p;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqTwentySix = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqTwentySeven = (a, b) => {\n  return a === b;\n};\n\n/**\n * Test if two numbers are equal.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n */\nconst eqTwentyE", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] < delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 1) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 2) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 3) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 4) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 5) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 6) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 7) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 8) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 9) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 10) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 11) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 12) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 13) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 14) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 15) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 16) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 17) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 18) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 19) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 20) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 21) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 22) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 23) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 24) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 25) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 26) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 27) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 28) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 29) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 30) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 31) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 32) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 33) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 34) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 35) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 36) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 37) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 38) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 39) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 40) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 41) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 42) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 43) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 44) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 45) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 46) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 47) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 48) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 49) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 50) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 51) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 52) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 53) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 54) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 55) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 56) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 57) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 58) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter + 59) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64 function. Returns decoded string.\n  */\nconst decodeToBase64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToHex = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToHex function. Returns decoded string.\n  */\nconst decodeToHex = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToHexUrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToHexUrlSafe function. Returns decoded string.\n  */\nconst decodeToHexUrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToHexUrlSafeB64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToHexUrlSafeB64 function. Returns decoded string.\n  */\nconst decodeToHexUrlSafeB64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToHexUrlSafeB64UrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToHexUrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToHexUrlSafeB64UrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToHexUrlSafeB64UrlSafeB64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToHexUrlSafeB64UrlSafe function. Returns decoded string.\n  */\nconst decodeToHexUrlSafeB64UrlSafeB64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToHexUrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToHexUrlSafeB64UrlSafeB64 function. Returns decoded string.\n  */\nconst decodeToHexUrlSafeB64UrlSafeB64UrlSafeB64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeB64UrlSafeB64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeB64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToHexUrlSafeB64UrlSafeB64UrlSafeB64UrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToHexUrlSafeB64UrlSafeB64 function. Returns decoded string.\n  */\nconst decodeToHexUrlSafeB64UrlSafeB64", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowel", "gc": "<|endoftext|>/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n  let vowels = text.split('')\n  vowels = vowels.filter((v) => v!= '')\n  return vowels.join('')\n}\n\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('')\n  vowels = vowels.filter((v) => v!= '')\n  return vowels.join('')\n}\n\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowelsNoVowels = (text) => {\n  let vowels = text.split('')\n  vowels = vowels.filter((v) => v!= '')\n  return vowels.join('')\n}\n\n/*\n  removeVowelsNoVowels is a function that takes string and returns string without vowels.\n  >>> removeVowelsNoVowels('')\n  ''\n  >>> removeVowelsNoVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowelsNoVowels('abcdef')\n  'bcdf'\n  >>> removeVowelsNoVowels('aaaaa')\n  ''\n  >>> removeVowelsNoVowels('aaBAA')\n  'B'\n  >>> removeVowelsNoVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowelsNoVowels = (text) => {\n  let vowels = text.split('')\n  vowels = vowels.filter((v) => v!= '')\n  return vowels.join('')\n}\n\n/*\n  removeVowelsNoVowels is a function that takes string and returns string without vowels.\n  >>> removeVowelsNoVowels('')\n  ''\n  >>> removeVowelsNoVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowelsNoVowels('abcdef')\n  'bcdf'\n  >>> removeVowelsNoVowels('aaaaa')\n  ''\n  >>> removeVowelsNoVowels('aaBAA')\n  'B'\n  >>> removeVowelsNoVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowelsNoVowelsNoVowels = (text) => {\n  let vowels = text.split('')\n  vowels = vowels.filter((v) => v!= '')\n  return vowels.join('')\n}\n\n/*\n  removeVowelsNoVowelsNoVowels is a function that takes string and returns string without vowels.\n  >>> removeVowelsNoVowelsNoVowels('')\n  ''\n  >>> removeVowelsNoVowelsNoVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowelsNoVowelsNoVowels('abcdef')\n  'bcdf'\n  >>> removeVowelsNoVowelsNoVowels('aaaaa')\n  ''\n  >>> removeVowelsNoVowelsNoVowels('aaBAA')\n  'B'\n  >>> removeVowelsNoVowelsNoVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowelsNoVowelsNoVowels = (text) => {\n  let vowels = text.split('')\n  vowels = vowels.filter((v) => v!= '')\n  return vowels.join('')\n}\n\n/*\n  removeVowelsNoVowelsNoVowels is a function that takes string and returns string without vowels.\n  >>> removeVowelsNoVowelsNoVowels('')\n  ''\n  >>> removeVowelsNoVowelsNoVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowelsNoVowelsNoVowels('abcdef')\n  'bcdf'\n  >>> removeVowelsNoVowelsNoVowels('aaaaa')\n  ''\n  >>> removeVowelsNoVowelsNoVowels('aaBAA')\n  'B'\n  >>> removeVowelsNoVowelsNoVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowelsNoVowelsNoVowelsNoVowels = (text) => {\n  let vowels = text.split('')\n  vowels = vowels.filter((v) => v!= '')\n  return vowels.join('')\n}\n\n/*\n  removeVowelsNoVowelsNoVowelsNoVowels is a function that takes string and returns string without vowels.\n  >>> removeVowelsNoVowelsNoVowelsNoVowels('')\n  ''\n  >>> removeVowelsNoVowelsNoVowelsNoVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowelsNoVowelsNoVowelsNoVowels('abcdef')\n  'bcdf'\n  >>> removeVowelsNoVowelsNoVowelsNoVowels('aaaaa')\n  ''\n  >>> removeVowelsNoVowelsNoVowelsNoVowels('aaBAA')\n  'B'\n  >>> removeVowelsNoVowelsNoVowelsNoVowels('zb", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThresholds", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> isEven([2, 3, 4, 5])\n  true\n  >>> isEven([2, 4, 6, 8])\n  false\n  */\nconst isEven = arr => {\n  return arr.reduce((acc, n) => acc && n % 2 === 0, true);\n};\n\n/*\n  >>> isOdd([2, 3, 5, 7])\n  false\n  >>> isOdd([3, 5, 7, 9])\n  true\n  */\nconst isOdd = arr => {\n  return arr.reduce((acc, n) => acc && n % 2!== 0, false);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOdd = arr => {\n  return isEven(arr) || isOdd(arr);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOddOrZero = arr => {\n  return isEvenOrOdd(arr) || arr.reduce((acc, n) => acc && n <= 0, true);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOddOrZeroOrOne = arr => {\n  return isEvenOrOdd(arr) || arr.reduce((acc, n) => acc && n <= 1 || n >= 0, true);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOddOrZeroOrOneOrZero = arr => {\n  return isEvenOrOdd(arr) || arr.reduce((acc, n) => acc && n <= 0 || n >= 1, true);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOddOrZeroOrOneOrZeroOrOne = arr => {\n  return isEvenOrOdd(arr) || arr.reduce((acc, n) => acc && n <= 1 || n >= 0 || n >= 1, true);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOddOrZeroOrOneOrZeroOrOneOrZero = arr => {\n  return isEvenOrOdd(arr) || arr.reduce((acc, n) => acc && n <= 1 || n >= 0 || n >= 1 || n >= 2, true);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOddOrZeroOrOneOrZeroOrOneOrZeroOrOne = arr => {\n  return isEvenOrOdd(arr) || arr.reduce((acc, n) => acc && n <= 1 || n >= 0 || n >= 1 || n >= 2 || n >= 3, true);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOddOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZero = arr => {\n  return isEvenOrOdd(arr) || arr.reduce((acc, n) => acc && n <= 1 || n >= 0 || n >= 1 || n >= 2 || n >= 3 || n >= 4, true);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOddOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZeroOrOne = arr => {\n  return isEvenOrOdd(arr) || arr.reduce((acc, n) => acc && n <= 1 || n >= 0 || n >= 1 || n >= 2 || n >= 3 || n >= 4 || n >= 5, true);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOddOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZeroOrOne = arr => {\n  return isEvenOrOdd(arr) || arr.reduce((acc, n) => acc && n <= 1 || n >= 0 || n >= 1 || n >= 2 || n >= 3 || n >= 4 || n >= 5 || n >= 6, true);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOddOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZero = arr => {\n  return isEvenOrOdd(arr) || arr.reduce((acc, n) => acc && n <= 1 || n >= 0 || n >= 1 || n >= 2 || n >= 3 || n >= 4 || n >= 5 || n >= 6 || n >= 7, true);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOddOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZeroOrOne = arr => {\n  return isEvenOrOdd(arr) || arr.reduce((acc, n) => acc && n <= 1 || n >= 0 || n >= 1 || n >= 2 || n >= 3 || n >= 4 || n >= 5 || n >= 6 || n >= 7 || n >= 8, true);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOddOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZero = arr => {\n  return isEvenOrOdd(arr) || arr.reduce((acc, n) => acc && n <= 1 || n >= 0 || n >= 1 || n >= 2 || n >= 3 || n >= 4 || n >= 5 || n >= 6 || n >= 7 || n >= 8 || n >= 9, true);\n};\n\n/*\n  >>> isEvenOrOdd([2, 3, 5, 7])\n  true\n  >>> isEvenOrOdd([3, 5, 7, 9])\n  false\n  */\nconst isEvenOrOddOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZeroOrOne = arr => {\n  return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n  return x + y\n}\n\n/*\n  Add two numbers x and y with optional precision\n  >>> adding(2, 3, 2)\n  5\n  >>> adding(5, 7, 2)\n  12\n  */\nconst addingWithPrecision = (x, y, precision) => {\n  return x + y + precision\n}\n\n/*\n  Subtract two numbers x and y\n  >>> subtracting(2, 3)\n  -1\n  >>> subtracting(5, 7)\n  -2\n  */\nconst subtracting = (x, y) => {\n  return x - y\n}\n\n/*\n  Subtract two numbers x and y with optional precision\n  >>> subtracting(2, 3, 2)\n  -1\n  >>> subtracting(5, 7, 2)\n  -2\n  */\nconst subtractingWithPrecision = (x, y, precision) => {\n  return x - y + precision\n}\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y\n}\n\n/*\n  Multiply two numbers x and y with optional precision\n  >>> multiplying(2, 3, 2)\n  6\n  >>> multiplying(5, 7, 2)\n  24\n  */\nconst multiplyingWithPrecision = (x, y, precision) => {\n  return x * y + precision\n}\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y\n}\n\n/*\n  Divide two numbers x and y with optional precision\n  >>> dividing(2, 3, 2)\n  2\n  >>> dividing(5, 7, 2)\n  4\n  */\nconst dividingWithPrecision = (x, y, precision) => {\n  return x / y + precision\n}\n\n/*\n  Calculate the absolute value of x\n  >>> absolute(2)\n  2\n  */\nconst absolute = (x) => {\n  return Math.abs(x)\n}\n\n/*\n  Calculate the absolute value of x with optional precision\n  >>> absolute(2, 2)\n  2\n  >>> absolute(2, 2)\n  2\n  */\nconst absoluteWithPrecision = (x, precision) => {\n  return Math.abs(x, precision)\n}\n\n/*\n  Calculate the square root of x\n  >>> sqrt(2)\n  2\n  */\nconst sqrt = (x) =>\n  Math.sqrt(x)\n\n/*\n  Calculate the square root of x with optional precision\n  >>> sqrt(2, 2)\n  2\n  >>> sqrt(2, 2)\n  2\n  */\nconst sqrtWithPrecision = (x, precision) =>\n  Math.sqrt(x, precision)\n\n/*\n  Calculate the natural logarithm of x\n  >>> log(2)\n  0\n  */\nconst log = (x) => {\n  return Math.log(x)\n}\n\n/*\n  Calculate the natural logarithm of x with optional precision\n  >>> log(2, 2)\n  0\n  >>> log(2, 2)\n  0\n  */\nconst logWithPrecision = (x, precision) => {\n  return Math.log(x, precision)\n}\n\n/*\n  Calculate the exponential of x\n  >>> exp(2)\n  1\n  */\nconst exp = (x) => {\n  return Math.exp(x)\n}\n\n/*\n  Calculate the exponential of x with optional precision\n  >>> exp(2, 2)\n  1\n  >>> exp(2, 2)\n  1\n  */\nconst expWithPrecision = (x, precision) => {\n  return Math.exp(x, precision)\n}\n\n/*\n  Calculate the natural logarithm of x raised to the power y\n  >>> pow(2, 2)\n  2\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y)\n}\n\n/*\n  Calculate the natural logarithm of x raised to the power y with optional precision\n  >>> pow(2, 2, 2)\n  2\n  >>> pow(2, 2, 2)\n  2\n  */\nconst powWithPrecision = (x, y, precision) => {\n  return Math.pow(x, y, precision)\n}\n\n/*\n  Calculate the inverse of x\n  >>> inverse(2)\n  1\n  */\nconst inverse = (x) => {\n  return 1 / x\n}\n\n/*\n  Calculate the inverse of x with optional precision\n  >>> inverse(2, 2)\n  1\n  >>> inverse(2, 2)\n  1\n  */\nconst inverseWithPrecision = (x, precision) => {\n  return 1 / x + precision\n}\n\n/*\n  Calculate the inverse square root of x\n  >>> inverseSqrt()\n  1\n  */\nconst inverseSqrt = (x) => {\n  return 1 / Math.sqrt(x)\n}\n\n/*\n  Calculate the inverse square root of x with optional precision\n  >>> inverseSqrt(2)\n  1\n  >>> inverseSqrt(2)\n  1\n  */\nconst inverseSqrtWithPrecision = (x, precision) => {\n  return 1 / Math.sqrt(x, precision)\n}\n\n/*\n  Calculate the inverse of the square root of x\n  >>> inverseSqrtSquareRoot()\n  1\n  */\nconst inverseSqrtSquareRoot = (x) => {\n  return 1 / Math.sqrt(x)\n}\n\n/*\n  Calculate the inverse of the square root of x with optional precision\n  >>> inverseSqrtSquareRoot(2)\n  1\n  >>> inverseSqrtSquareRoot(2)\n  1\n  */\nconst inverseSqrtSquareRootWithPrecision = (x, precision) => {\n  return 1 / Math.sqrt(x, precision)\n}\n\n/*\n  Calculate the inverse of the square root of x raised to the power y\n  >>> inverseSqrtSquareRootPow(2)\n  1\n  */\nconst inverseSqrtSquareRootPow = (x, y) => {\n  return 1 / Math.sqrt(x)\n}\n\n/*\n  Calculate the inverse of the square root of x raised to the power y with optional precision\n  >>> inverseSqrtSquareRootPow(2, 2)\n  1\n  >>> inverseSqrtSquareRootPow(2, 2)\n  1\n  */\nconst inverseSqrtSquareRootPowWithPrecision = (x, y, precision) => {\n  return 1 / Math.sqrt(x, precision)\n}\n\n/*\n  Calculate the inverse of the natural logarithm of x\n  >>> inverseLog()\n  1\n  */\nconst inverseLog = (x) => {\n  return 1 / Math.log(x)\n}\n\n/*\n  Calculate the inverse of the natural logarithm of x with optional precision\n  >>> inverseLog(2, 2)\n  1\n  >>> inverseLog(2, 2)\n  1\n  */\nconst inverseLogWithPrecision = (x, precision) => {\n  return 1 / Math.log(x, precision)\n}\n\n/*\n  Calculate the inverse of the exponential of x\n  >>> inverseExp()\n  1\n  */\nconst inverseExp = (x) => {\n  return 1 / Math.exp(x)\n}\n\n/*\n  Calculate the inverse of the exponential of x with optional precision\n  >>> inverseExp(2, 2)\n  1\n  >>> inverseExp(2, 2)\n  1\n  */\nconst inverseExpWithPrecision = (x, precision) => {\n  return 1 / Math.exp(x, precision)\n}\n\n/*\n  Calculate the inverse of the natural logarithm of x raised to the power y\n  >>> inversePow(2, 2)\n  1\n  */\nconst inversePow = (x, y) => {\n  return 1 / Math.pow(x, y)\n}\n\n/*\n  Calculate the inverse of the natural logarithm of x raised to the power y with optional precision\n  >>> inversePow(2, 2, 2)\n  1\n  >>> inversePow(2, 2, 2)\n  1\n  */\nconst inversePowWithPrecision = (x, y, precision) => {\n  return 1 / Math.pow(x, y, precision)\n}\n\n/*\n  Calculate the inverse of the natural logarithm of x raised to the power y raised to the power z\n  >>> inversePow(2, 2, 2)\n  1\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChar", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (s0 === '') {\n    return false\n  }\n  if (s1 === '') {\n    return false\n  }\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fibs", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 0;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    a = a + b;\n    b = a + b;\n    result = a + result;\n  }\n  return result;\n};\n\n/*\n  Return n-th Fibonacci number with given sum.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  >>> fibs(8)+fibs(8)\n  55\n  >>> fibs(8)+fibs(9)\n  105\n  >>> fibs(8)+fibs(10)\n  151\n  */\nconst fibsWithSum = (n, sum) => {\n  let a = 0;\n  let b = 0;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    a = a + b;\n    b = a + b;\n    result = a + result;\n  }\n  return result + sum;\n};\n\n/*\n  Return n-th Fibonacci number with given sum and modulo n.\n  >>> fibsWithSum(10,10)\n  55\n  >>> fibsWithSum(10,1)\n  1\n  >>> fibsWithSum(10,8)\n  21\n  >>> fibsWithSum(10,8)+fibsWithSum(10,8)\n  55\n  >>> fibsWithSum(10,8)+fibsWithSum(10,9)\n  105\n  >>> fibsWithSum(10,8)+fibsWithSum(10,10)\n  151\n  */\nconst fibsWithSumWithMod = (n, sum, mod) => {\n  let a = 0;\n  let b = 0;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    a = a + b;\n    b = a + b;\n    result = a + result;\n  }\n  return result + sum % mod;\n};\n\n/*\n  Return n-th Fibonacci number with given sum and modulo n and modulo n.\n  >>> fibsWithSumWithMod(10,10,10)\n  55\n  >>> fibsWithSumWithMod(10,10,1)\n  1\n  >>> fibsWithSumWithMod(10,10,8)\n  21\n  >>> fibsWithSumWithMod(10,10,8)+fibsWithSumWithMod(10,10,8)\n  55\n  >>> fibsWithSumWithMod(10,10,8)+fibsWithSumWithMod(10,10,9)\n  105\n  >>> fibsWithSumWithMod(10,10,8)+fibsWithSumWithMod(10,10,10)\n  151\n  */\nconst fibsWithSumWithModAndMod = (n, sum, mod) => {\n  let a = 0;\n  let b = 0;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    a = a + b;\n    b = a + b;\n    result = a + result;\n  }\n  return result + sum % mod + sum % mod;\n};\n\n/*\n  Return n-th Fibonacci number with given sum and modulo n and modulo n.\n  >>> fibsWithSumWithModAndMod(10,10,10)\n  55\n  >>> fibsWithSumWithModAndMod(10,10,1)\n  1\n  >>> fibsWithSumWithModAndMod(10,10,8)\n  21\n  >>> fibsWithSumWithModAndMod(10,10,8)+fibsWithSumWithModAndMod(10,10,8)\n  55\n  >>> fibsWithSumWithModAndMod(10,10,8)+fibsWithSumWithModAndMod(10,10,9)\n  105\n  >>> fibsWithSumWithModAndMod(10,10,8)+fibsWithSumWithModAndMod(10,10,10)\n  151\n  */\nconst fibsWithSumWithModAndModAndMod = (n, sum, mod) => {\n  let a = 0;\n  let b = 0;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    a = a + b;\n    b = a + b;\n    result = a + result;\n  }\n  return result + sum % mod + sum % mod + sum % mod;\n};\n\n/*\n  Return n-th Fibonacci number with given sum and modulo n and modulo n.\n  >>> fibsWithSumWithModAndModAndMod(10,10,10)\n  55\n  >>> fibsWithSumWithModAndModAndMod(10,10,1)\n  1\n  >>> fibsWithSumWithModAndModAndMod(10,10,8)\n  21\n  >>> fibsWithSumWithModAndModAndMod(10,10,8)+fibsWithSumWithModAndModAndMod(10,10,8)\n  55\n  >>> fibsWithSumWithModAndModAndMod(10,10,8)+fibsWithSumWithModAndModAndMod(10,10,9)\n  105\n  >>> fibsWithSumWithModAndModAndMod(10,10,8)+fibsWithSumWithModAndModAndMod(10,10,10)\n  151\n  */\nconst fibsWithSumWithModAndModAndModAndMod = (n, sum, mod) => {\n  let a = 0;\n  let b = 0;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    a = a + b;\n    b = a + b;\n    result = a + result;\n  }\n  return result + sum % mod + sum % mod + sum % mod + sum % mod;\n};\n\n/*\n  Return n-th Fibonacci number with given sum and modulo n and modulo n.\n  >>> fibsWithSumWithModAndModAndModAndMod(10,10,10)\n  55\n  >>> fibsWithSumWithModAndModAndModAndMod(10,10,1)\n  1\n  >>> fibsWithSumWithModAndModAndModAndMod(10,10,8)\n  21\n  >>> fibsWithSumWithModAndModAndModAndMod(10,10,8)+fibsWithSumWithModAndModAndModAndMod(10,10,8)\n  55\n  >>> fibsWithSumWithModAndModAndModAndMod(10,10,8)+fibsWithSumWithModAndModAndModAndMod(10,10,9)\n  105\n  >>> fibsWithSumWithModAndModAndModAndModAndMod(10,10,8)+fibsWithSumWithModAndModAndModAndMod(10,10,10)\n  151\n  */\nconst fibsWithSumWithModAndModAndModAndModAndMod = (n, sum, mod) => {\n  let a = 0;\n  let b = 0;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    a = a + b;\n    b = a + b;\n    result = a + result;\n  }\n  return result + sum % mod + sum % mod + sum % mod + sum % mod;\n};\n\n/*\n  Return n-th Fibonacci number with given sum and modulo n and modulo n.\n  >>> fibsWithSumWithModAndModAndModAndModAndMod(10,10,10)\n  55\n  >>> fibsWithSumWithModAndModAndModAndModAndMod(10,10,1)\n  1\n  >>> fibsWithSumWithModAndModAndModAndModAndMod(10,10,8)\n  21\n  >>> fibsWithSumWithModAndModAndModAndModAndMod(10,10,8)+fibsWithSumWithModAndModAndModAndMod(10,10,8)\n  55\n  >>> fibsWithSumWithModAndModAndModAndModAndMod(10,10,8)+fibsWithSumWithModAndModAndModAndMod(10,10,9)\n  105\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"<\").map(x => x.trim());\n  const closingBrackets = brackets.split(\">\").map(x => x.trim());\n  return openingBrackets.every(x => closingBrackets.includes(x));\n};\n\n/**\n * Given a string, return true if it starts with \"@\", false otherwise.\n *\n * >>> isAtSign(\"@\")\n * true\n * >>> isAtSign(\"@!\")\n * false\n */\nconst isAtSign = str => str.startsWith(\"@\");\n\n/**\n * Given a string, return true if it ends with \"@\", false otherwise.\n *\n * >>> isAtSign(\"@!\")\n * false\n * >>> isAtSign(\"@\")\n * false\n */\nconst isAtSignEnd = str => str.endsWith(\"@\");\n\n/**\n * Given a string, return true if it starts with \"!\", false otherwise.\n *\n * >>> isAtSignEnd(\"!\")\n * true\n * >>> isAtSignEnd(\"!\")\n * false\n */\nconst isAtSignEnd = str => str.startsWith(\"!\");\n\n/**\n * Given a string, return true if it ends with \"!\", false otherwise.\n *\n * >>> isAtSignEnd(\"!\")\n * false\n * >>> isAtSignEnd(\"!\")\n * true\n */\nconst isAtSignEnd = str => str.endsWith(\"!\");\n\n/**\n * Given a string, return true if it starts with \"#\", false otherwise.\n *\n * >>> isAtSignEnd(\"#\")\n * false\n * >>> isAtSignEnd(\"#\")\n * true\n */\nconst isAtSignEnd = str => str.startsWith(\"#\");\n\n/**\n * Given a string, return true if it ends with \"#\", false otherwise.\n *\n * >>> isAtSignEnd(\"#\")\n * false\n * >>> isAtSignEnd(\"#\")\n * true\n */\nconst isAtSignEnd = str => str.endsWith(\"#\");\n\n/**\n * Given a string, return true if it starts with \"$\", false otherwise.\n *\n * >>> isAtSignEnd(\"$\")\n * false\n * >>> isAtSignEnd(\"$\")\n * true\n */\nconst isAtSignEnd = str => str.startsWith(\"$\");\n\n/**\n * Given a string, return true if it ends with \"$\", false otherwise.\n *\n * >>> isAtSignEnd(\"$\")\n * false\n * >>> isAtSignEnd(\"$\")\n * true\n */\nconst isAtSignEnd = str => str.endsWith(\"$\");\n\n/**\n * Given a string, return true if it starts with \"&\", false otherwise.\n *\n * >>> isAtSignEnd(\"&\")\n * false\n * >>> isAtSignEnd(\"&\")\n * true\n */\nconst isAtSignEnd = str => str.startsWith(\"&\");\n\n/**\n * Given a string, return true if it ends with \"&\", false otherwise.\n *\n * >>> isAtSignEnd(\"&\")\n * false\n * >>> isAtSignEnd(\"&\")\n * true\n */\nconst isAtSignEnd = str => str.endsWith(\"&\");\n\n/**\n * Given a string, return true if it starts with \"'\", false otherwise.\n *\n * >>> isAtSignEnd(\"'\")\n * false\n * >>> isAtSignEnd(\"'\")\n * true\n */\nconst isAtSignEnd = str => str.startsWith(\"'\");\n\n/**\n * Given a string, return true if it ends with \"'\", false otherwise.\n *\n * >>> isAtSignEnd(\"'\")\n * false\n * >>> isAtSignEnd(\"'\")\n * true\n */\nconst isAtSignEnd = str => str.endsWith(\"'\");\n\n/**\n * Given a string, return true if it starts with \"(\" and false otherwise.\n *\n * >>> isAtSignEnd(\"(\")\n * false\n * >>> isAtSignEnd(\"(\")\n * true\n */\nconst isAtSignEnd = str => str.startsWith(\"(\");\n\n/**\n * Given a string, return true if it ends with \")\" and false otherwise.\n *\n * >>> isAtSignEnd(\")\")\n * false\n * >>> isAtSignEnd(\")\")\n * true\n */\nconst isAtSignEnd = str => str.endsWith(\")\");\n\n/**\n * Given a string, return true if it starts with \"[\" and false otherwise.\n *\n * >>> isAtSignEnd(\"[\")\n * false\n * >>> isAtSignEnd(\"[\")\n * true\n */\nconst isAtSignEnd = str => str.startsWith(\"[\");\n\n/**\n * Given a string, return true if it ends with \"]\" and false otherwise.\n *\n * >>> isAtSignEnd(\"]\")\n * false\n * >>> isAtSignEnd(\"]\")\n * true\n */\nconst isAtSignEnd = str => str.endsWith(\"]\");\n\n/**\n * Given a string, return true if it starts with \"{\" and false otherwise.\n *\n * >>> isAtSignEnd(\"{\")\n * false\n * >>> isAtSignEnd(\"{\")\n * true\n */\nconst isAtSignEnd = str => str.startsWith(\"{\");\n\n/**\n * Given a string, return true if it ends with \"}\" and false otherwise.\n *\n * >>> isAtSignEnd(\"}\")\n * false\n * >>> isAtSignEnd(\"}\")\n * true\n */\nconst isAtSignEnd = str => str.endsWith(\"}\");\n\n/**\n * Given a string, return true if it starts with \"|\" and false otherwise.\n *\n * >>> isAtSignEnd(\"|\")\n * false\n * >>> isAtSignEnd(\"|\")\n * true\n */\nconst isAtSignEnd = str => str.startsWith(\"|\");\n\n/**\n * Given a string, return true if it ends with \"|\" and false otherwise.\n *\n * >>> isAtSignEnd(\"|\")\n * false\n * >>> isAtSignEnd(\"|\")\n * true\n */\nconst isAtSignEnd = str => str.endsWith(\"|\");\n\n/**\n * Given a string, return true if it starts with \"~\" and false otherwise.\n *\n * >>> isAtSignEnd(\"~\")\n * false\n * >>> isAtSignEnd(\"~\")\n * true\n */\nconst isAtSignEnd = str => str.startsWith(\"~\");\n\n/**\n * Given a string, return true if it ends with \"~\" and false otherwise.\n *\n * >>> isAtSignEnd(\"~\")\n * false\n * >>> isAtSignEnd(\"~\")\n * true\n */\nconst isAtSignEnd = str => str.endsWith(\"~\");\n\n/**\n * Given a string, return true if it starts with \"^\" and false otherwise.\n *\n * >>> isAtSignEnd(\"^\")\n * false\n * >>> isAtSignEnd(\"^\")\n * true\n */\nconst isAtSignEnd = str => str.startsWith(\"^\");\n\n/**\n * Given a string, return true if it ends with \"^\" and false otherwise.\n *\n * >>> isAtSign", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  let l = l.reverse();\n  while (l > j && k <= i) {\n    j = l[j];\n    k++;\n  }\n  return l === j;\n};\n\n/*\n  >>> isMonotonic([4, 1, 0, -10])\n  true\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])\n  false\n  >>> isMonotonic([4, 1, 0, -10])", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      if (j === l2.length) {\n        i++\n        j = 0\n      }\n    }\n  }\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j']]\n  >>> list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], [])\n  [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largerPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return factor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactor(13195)\n  29\n  >>> primeFactor(2048)\n  2\n  */\nconst primeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return factor;\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactors = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll2 = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll3 = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll4 = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll5 = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll6 = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll7 = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll8 = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll9 = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll10 = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll11 = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll12 = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll13 = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll14 = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n    factor *= i;\n  }\n  return [factor, i];\n};\n\n/*\n  Given a number n, return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> primeFactors(13195)\n  [29, 2]\n  >>> primeFactors(2048)\n  [2]\n  */\nconst primeFactorsAll15 = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_count = 0;\n  const paren_level = 0;\n  const paren_nesting = 0;\n  const paren_nesting_level = 0;\n  const paren_nesting_nesting = 0;\n  const paren_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_level = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nestlevel = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nestlevel = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nestlevel = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nestlevel = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nestlevel = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nestlevel = 0;\n  const paren_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting_nesting = 0;\n  const paren_nesting_nesting_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumsToN", "gc": "<|endoftext|>/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that takes an array of numbers and returns the sum of the numbers in that array.\n  >>> sumOfNumbers([1, 2, 3, 4])\n  10\n  >>> sumOfNumbers([1, 2, 3, 4])\n  15\n  >>> sumOfNumbers([1, 2, 3, 4])\n  20\n  >>> sumOfNumbers([1, 2, 3, 4])\n  25\n  >>> sumOfNumbers([1, 2, 3, 4])\n  30\n  >>> sumOfNumbers([1, 2, 3, 4])\n  35\n  >>> sumOfNumbers([1, 2, 3, 4])\n  40\n  >>> sumOfNumbers([1, 2, 3, 4])\n  45\n  >>> sumOfNumbers([1, 2, 3, 4])\n  50\n  >>> sumOfNumbers([1, 2, 3, 4])\n  55\n  >>> sumOfNumbers([1, 2, 3, 4])\n  60\n  >>> sumOfNumbers([1, 2, 3, 4])\n  65\n  >>> sumOfNumbers([1, 2, 3, 4])\n  70\n  >>> sumOfNumbers([1, 2, 3, 4])\n  75\n  >>> sumOfNumbers([1, 2, 3, 4])\n  80\n  >>> sumOfNumbers([1, 2, 3, 4])\n  85\n  >>> sumOfNumbers([1, 2, 3, 4])\n  90\n  >>> sumOfNumbers([1, 2, 3, 4])\n  95\n  >>> sumOfNumbers([1, 2, 3, 4])\n  100\n  >>> sumOfNumbers([1, 2, 3, 4])\n  105\n  >>> sumOfNumbers([1, 2, 3, 4])\n  110\n  >>> sumOfNumbers([1, 2, 3, 4])\n  115\n  >>> sumOfNumbers([1, 2, 3, 4])\n  120\n  >>> sumOfNumbers([1, 2, 3, 4])\n  125\n  >>> sumOfNumbers([1, 2, 3, 4])\n  130\n  >>> sumOfNumbers([1, 2, 3, 4])\n  135\n  >>> sumOfNumbers([1, 2, 3, 4])\n  140\n  >>> sumOfNumbers([1, 2, 3, 4])\n  145\n  >>> sumOfNumbers([1, 2, 3, 4])\n  150\n  >>> sumOfNumbers([1, 2, 3, 4])\n  155\n  >>> sumOfNumbers([1, 2, 3, 4])\n  160\n  >>> sumOfNumbers([1, 2, 3, 4])\n  165\n  >>> sumOfNumbers([1, 2, 3, 4])\n  170\n  >>> sumOfNumbers([1, 2, 3, 4])\n  175\n  >>> sumOfNumbers([1, 2, 3, 4])\n  180\n  >>> sumOfNumbers([1, 2, 3, 4])\n  185\n  >>> sumOfNumbers([1, 2, 3, 4])\n  190\n  >>> sumOfNumbers([1, 2, 3, 4])\n  195\n  >>> sumOfNumbers([1, 2, 3, 4])\n  200\n  >>> sumOfNumbers([1, 2, 3, 4])\n  205\n  >>> sumOfNumbers([1, 2, 3, 4])\n  210\n  >>> sumOfNumbers([1, 2, 3, 4])\n  215\n  >>> sumOfNumbers([1, 2, 3, 4])\n  220\n  >>> sumOfNumbers([1, 2, 3, 4])\n  225\n  >>> sumOfNumbers([1, 2, 3, 4])\n  230\n  >>> sumOfNumbers([1, 2, 3, 4])\n  235\n  >>> sumOfNumbers([1, 2, 3, 4])\n  240\n  >>> sumOfNumbers([1, 2, 3, 4])\n  245\n  >>> sumOfNumbers([1, 2, 3, 4])\n  250\n  >>> sumOfNumbers([1, 2, 3, 4])\n  255\n  >>> sumOfNumbers([1, 2, 3, 4])\n  260\n  >>> sumOfNumbers([1, 2, 3, 4])\n  265\n  >>> sumOfNumbers([1, 2, 3, 4])\n  270\n  >>> sumOfNumbers([1, 2, 3, 4])\n  275\n  >>> sumOfNumbers([1, 2, 3, 4])\n  280\n  >>> sumOfNumbers([1, 2, 3, 4])\n  285\n  >>> sumOfNumbers([1, 2, 3, 4])\n  290\n  >>> sumOfNumbers([1, 2, 3, 4])\n  295\n  >>> sumOfNumbers([1, 2, 3, 4])\n  300\n  >>> sumOfNumbers([1, 2, 3, 4])\n  305\n  >>> sumOfNumbers([1, 2, 3, 4])\n  310\n  >>> sumOfNumbers([1, 2, 3, 4])\n  315\n  >>> sumOfNumbers([1, 2, 3, 4])\n  320\n  >>> sumOfNumbers([1, 2, 3, 4])\n  325\n  >>> sumOfNumbers([1, 2, 3, 4])\n  330\n  >>> sumOfNumbers([1, 2, 3, 4])\n  335\n  >>> sumOfNumbers([1, 2, 3, 4])\n  340\n  >>> sumOfNumbers([1, 2, 3, 4])\n  345\n  >>> sumOfNumbers([1, 2, 3, 4])\n  350\n  >>> sumOfNumbers([1, 2, 3, 4])\n  355\n  >>> sumOfNumbers([1, 2, 3, 4])\n  360\n  >>> sumOfNumbers([1, 2, 3, 4])\n  365\n  >>> sumOfNumbers([1, 2, 3, 4])\n  370\n  >>> sumOfNumbers([1, 2, 3, 4])\n  375\n  >>> sumOfNumbers([1, 2, 3, 4])\n  380\n  >>> sumOfNumbers([1, 2, 3, 4])\n  385\n  >>> sumOfNumbers([1, 2, 3, 4])\n  390\n  >>> sumOfNumbers([1, 2, 3, 4])\n  395\n  >>> sumOfNumbers([1, 2, 3, 4])\n  400\n  >>> sumOfNumbers([1, 2, 3, 4])\n  405\n  >>> sumOfNumbers([1, 2, 3, 4])\n  410\n  >>> sumOfNumbers([1, 2, 3, 4])\n  415\n  >>> sumOfNumbers([1, 2, 3, 4])\n  420\n  >>> sumOfNumbers([1, 2, 3, 4])\n  425\n  >>> sumOfNumbers([1, 2, 3, 4])\n  430\n  >>> sumOfNumbers([1, 2, 3, 4])\n  435\n  >>> sumOfNumbers([1, 2, 3, 4])\n  440\n  >>> sumOfNumbers([1, 2, 3, 4])\n  445\n  >>> sumOfNumbers([1, 2, 3, 4])\n  450\n  >>> sumOfNumbers([1, 2, 3, 4])\n  455\n  >>> sumOfNumbers([1, 2, 3, 4])\n  460\n  >>> sumOfNumbers([1, 2, 3, 4])\n  465\n  >>> sumOfNumbers([1, 2, 3, 4])\n  470\n  >>> sumOfNumbers([1, 2, 3, 4])\n  475\n  >>> sumOfNumbers([1, 2, 3, 4])\n  480\n  >>> sumOfNumbers([1, 2, 3, 4])\n  485\n  >>> sumOfNumbers([1, 2, 3, 4])\n  490\n  >>> sumOfNumbers([1, 2, 3, 4])\n  495\n  >>> sumOfNumbers([1, 2, 3, 4])\n  500\n  >>> sumOfNumbers([1, 2, 3, 4])\n  505\n  >>> sumOfNumbers([1, 2, 3, 4])\n  510\n  >>> sumOfNumbers([1, 2, 3, 4])\n  515\n  >>> sumOfNumbers([1, 2, 3, 4])\n  520\n  >>> sumOfNumbers([1, 2, 3, 4])\n  525\n  >>> sumOfNumbers([1, 2, 3, 4])\n  530\n  >>> sumOfNumbers([1, 2, 3, 4])\n  535\n  >>> sumOfNumbers([1, 2, 3, 4])\n  540\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.match(/[^(]*\\([^)]*\\)/g);\n  const closingBrackets = brackets.match(/[^)]*$/g);\n  return openingBrackets.every(opening => closingBrackets.every(closing => opening === closing));\n};\n\n/**\n * Returns a string that is the concatenation of all arguments as a single string.\n *\n * >>> combineArguments(\"a\", \"b\", \"c\")\n * \"abc\"\n * >>> combineArguments(\"a\", \"b\", \"c\", \"d\")\n * \"abcd\"\n * >>> combineArguments(\"a\", \"b\", \"c\", \"d\", \"e\")\n * \"abcdef\"\n */\nconst combineArguments = (...args) => args.join(\"\");\n\n/**\n * Returns a string that is the concatenation of all arguments as a single string.\n *\n * >>> combineArguments([\"a\", \"b\", \"c\"])\n * \"abc\"\n * >>> combineArguments([\"a\", \"b\", \"c\", \"d\"])\n * \"abcd\"\n * >>> combineArguments([\"a\", \"b\", \"c\", \"d\", \"e\"])\n * \"abcdef\"\n */\nconst combineArgumentsWithSeparator = (...args) => combineArguments(...args, \" \");\n\n/**\n * Returns a string that is the concatenation of all arguments as a single string.\n *\n * >>> combineArgumentsWithSeparator(\"a\", \"b\", \"c\")\n * \"a b c\"\n * >>> combineArgumentsWithSeparator(\"a\", \"b\", \"c\", \"d\")\n * \"a b c d\"\n * >>> combineArgumentsWithSeparator(\"a\", \"b\", \"c\", \"d\", \"e\")\n * \"a b c d e\"\n */\nconst combineArgumentsWithSeparatorAndSeparator = (...args) => combineArguments(...args, \" \", \" \");\n\n/**\n * Returns a string that is the concatenation of all arguments as a single string.\n *\n * >>> combineArgumentsWithSeparatorAndSeparator(\"a\", \"b\", \"c\")\n * \"a b c\"\n * >>> combineArgumentsWithSeparatorAndSeparator(\"a\", \"b\", \"c\", \"d\")\n * \"a b c d\"\n * >>> combineArgumentsWithSeparatorAndSeparator(\"a\", \"b\", \"c\", \"d\", \"e\")\n * \"a b c d e\"\n */\nconst combineArgumentsWithSeparatorAndSeparatorWithSeparator = (...args) => combineArguments(...args, \" \", \" \", \" \");\n\n/**\n * Returns a string that is the concatenation of all arguments as a single string.\n *\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparator(\"a\", \"b\", \"c\")\n * \"a b c\"\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparator(\"a\", \"b\", \"c\", \"d\")\n * \"a b c d\"\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparator(\"a\", \"b\", \"c\", \"d\", \"e\")\n * \"a b c d e\"\n */\nconst combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparator = (...args) => combineArguments(...args, \" \", \" \", \" \", \" \");\n\n/**\n * Returns a string that is the concatenation of all arguments as a single string.\n *\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparator(\"a\", \"b\", \"c\")\n * \"a b c\"\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparator(\"a\", \"b\", \"c\", \"d\")\n * \"a b c d\"\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparator(\"a\", \"b\", \"c\", \"d\", \"e\")\n * \"a b c d e\"\n */\nconst combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparatorAndSeparator = (...args) => combineArguments(...args, \" \", \" \", \" \", \" \", \" \");\n\n/**\n * Returns a string that is the concatenation of all arguments as a single string.\n *\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparatorAndSeparator(\"a\", \"b\", \"c\")\n * \"a b c\"\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparatorAndSeparator(\"a\", \"b\", \"c\", \"d\")\n * \"a b c d\"\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparatorAndSeparator(\"a\", \"b\", \"c\", \"d\", \"e\")\n * \"a b c d e\"\n */\nconst combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparatorAndSeparatorAndSeparator = (...args) => combineArguments(...args, \" \", \" \", \" \", \" \", \" \", \" \", \" \");\n\n/**\n * Returns a string that is the concatenation of all arguments as a single string.\n *\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparatorAndSeparatorAndSeparator(\"a\", \"b\", \"c\")\n * \"a b c\"\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparatorAndSeparatorAndSeparator(\"a\", \"b\", \"c\", \"d\")\n * \"a b c d\"\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparatorAndSeparatorAndSeparator(\"a\", \"b\", \"c\", \"d\", \"e\")\n * \"a b c d e\"\n */\nconst combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator = (...args) => combineArguments(...args, \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \");\n\n/**\n * Returns a string that is the concatenation of all arguments as a single string.\n *\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator(\"a\", \"b\", \"c\")\n * \"a b c\"\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator(\"a\", \"b\", \"c\", \"d\")\n * \"a b c d\"\n * >>> combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator(\"a\", \"b\", \"c\", \"d\", \"e\")\n * \"a b c d e\"\n */\nconst combineArgumentsWithSeparatorAndSeparatorWithSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparatorAndSeparator = (...args) => combineArguments(...argspassed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let sum = 0;\n  let last = 0;\n  let last2 = 1;\n  let last3 = 2;\n  let last4 = 3;\n  let last5 = 4;\n  let last6 = 5;\n  let last7 = 6;\n  let last8 = 7;\n  let last9 = 8;\n  let last10 = 9;\n  let last11 = 10;\n  let last12 = 11;\n  let last13 = 12;\n  let last14 = 13;\n  let last15 = 14;\n  let last16 = 15;\n  let last17 = 16;\n  let last18 = 17;\n  let last19 = 18;\n  let last20 = 19;\n  let last21 = 20;\n  let last22 = 21;\n  let last23 = 22;\n  let last24 = 23;\n  let last25 = 24;\n  let last26 = 25;\n  let last27 = 26;\n  let last28 = 27;\n  let last29 = 28;\n  let last30 = 29;\n  let last31 = 30;\n  let last32 = 31;\n  let last33 = 32;\n  let last34 = 33;\n  let last35 = 34;\n  let last36 = 35;\n  let last37 = 36;\n  let last38 = 37;\n  let last39 = 38;\n  let last40 = 39;\n  let last41 = 40;\n  let last42 = 41;\n  let last43 = 42;\n  let last44 = 43;\n  let last45 = 44;\n  let last46 = 45;\n  let last47 = 46;\n  let last48 = 47;\n  let last49 = 48;\n  let last50 = 49;\n  let last51 = 50;\n  let last52 = 51;\n  let last53 = 52;\n  let last54 = 53;\n  let last55 = 54;\n  let last56 = 55;\n  let last57 = 56;\n  let last58 = 57;\n  let last59 = 58;\n  let last60 = 59;\n  let last61 = 60;\n  let last62 = 61;\n  let last63 = 62;\n  let last64 = 63;\n  let last65 = 64;\n  let last66 = 65;\n  let last67 = 66;\n  let last68 = 67;\n  let last69 = 68;\n  let last70 = 69;\n  let last71 = 70;\n  let last72 = 71;\n  let last73 = 72;\n  let last74 = 73;\n  let last75 = 74;\n  let last76 = 75;\n  let last77 = 76;\n  let last78 = 77;\n  let last79 = 78;\n  let last80 = 79;\n  let last81 = 80;\n  let last82 = 81;\n  let last83 = 82;\n  let last84 = 83;\n  let last85 = 84;\n  let last86 = 85;\n  let last87 = 86;\n  let last88 = 87;\n  let last89 = 88;\n  let last90 = 89;\n  let last91 = 90;\n  let last92 = 91;\n  let last93 = 92;\n  let last94 = 93;\n  let last95 = 94;\n  let last96 = 95;\n  let last97 = 96;\n  let last98 = 97;\n  let last99 = 98;\n  let last100 = 100;\n  let last101 = 101;\n  let last102 = 102;\n  let last103 = 103;\n  let last104 = 104;\n  let last105 = 105;\n  let last106 = 106;\n  let last107 = 107;\n  let last108 = 108;\n  let last109 = 109;\n  let last110 = 110;\n  let last111 = 111;\n  let last112 = 112;\n  let last113 = 113;\n  let last114 = 114;\n  let last115 = 112;\n  let last116 = 113;\n  let last117 = 114;\n  let last118 = 115;\n  let last119 = 112;\n  let last120 = 113;\n  let last121 = 114;\n  let last122 = 115;\n  let last123 = 116;\n  let last124 = 117;\n  let last125 = 118;\n  let last126 = 119;\n  let last127 = 112;\n  let last128 = 113;\n  let last129 = 114;\n  let last130 = 115;\n  let last131 = 116;\n  let last132 = 112;\n  let last133 = 113;\n  let last134 = 114;\n  let last135 = 115;\n  let last136 = 116;\n  let last137 = 117;\n  let last138 = 118;\n  let last139 = 119;\n  let last140 = 120;\n  let last141 = 121;\n  let last142 = 122;\n  let last143 = 123;\n  let last144 = 124;\n  let last145 = 125;\n  let last146 = 126;\n  let last147 = 127;\n  let last148 = 128;\n  let last149 = 129;\n  let last150 = 130;\n  let last151 = 131;\n  let last152 = 132;\n  let last153 = 133;\n  let last154 = 134;\n  let last155 = 135;\n  let last156 = 136;\n  let last157 = 137;\n  let last158 = 138;\n  let last159 = 139;\n  let last160 = 140;\n  let last161 = 141;\n  let last162 = 142;\n  let last163 = 143;\n  let last164 = 144;\n  let last165 = 145;\n  let last166 = 146;\n  let last167 = 147;\n  let last168 = 148;\n  let last169 = 149;\n  let last170 = 150;\n  let last171 = 151;\n  let last172 = 152;\n  let last173 = 153;\n  let last174 = 154;\n  let last175 = 155;\n  let last176 = 156;\n  let last177 = 157;\n  let last178 = 158;\n  let last179 = 159;\n  let last180 = 160;\n  let last181 = 161;\n  let last182 = 162;\n  let last183 = 163;\n  let last184 = 164;\n  let last185 = 165;\n  let last186 = 166;\n  let last187 = 167;\n  let last188 = 168;\n  let last189 = 169;\n  let last190 = 170;\n  let last191 = 171;\n  let last192 = 172;\n  let last193 = 173;\n  let last194 = 174;\n  let last195 = 175;\n  let last196 = 176;\n  let last197 = 177;\n  let last198 = 178;\n  let last199 = 179;\n  let last200 = 180;\n  let last201 = 181;\n  let last202 = 182;\n  let last203 = 183;\n  let last204 = 184;\n  let last205 = 185;\n  let last206 = 186;\n  let last207 = 187;\n  let last208 = 188;\n  let last209 = 189;\n  let last210 = 190;\n  let last211 = 191;\n  let last212 = 192;\n  let last213 = 193;\n  let last214 = 194;\n  let last215 = 195;\n  let last216 = 196;\n  let last217 = 197;\n  let last218 = 198;\n  let last219 = 199;\n  let last220 = 200;\n  let last22", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 0) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the Fibonacci sequence of the given number.\n  >>> fibonacci(10)\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  >>> fibonacci(20)\n  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  >>> fibonacci(30)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n  >>> fibonacci(100)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n  >>> fibonacci(1000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]\n  >>> fibonacci(10000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]\n  >>> fibonacci(1000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]\n  >>> fibonacci(100000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n  >>> fibonacci(10000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n  >>> fibonacci(1000000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584]\n  >>> fibonacci(10000000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181]\n  >>> fibonacci(1000000000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765]\n  >>> fibonacci(10000000000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941]\n  >>> fibonacci(100000000000000000)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 20971]\n  >>> fibonacci(1000000000000000001)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 2097, 4095]\n  >>> fibonacci(1000000000000000002)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 2097, 4095, 6149]\n  >>> fibonacci(1000000000000000003)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 2097, 4095, 6149, 8191]\n  >>> fibonacci(1000000000000000004)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 2097, 4095, 6149, 8191, 16383]\n  >>> fibonacci(1000000000000000005)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 2097, 4095, 6149, 8191, 16383, 32767]\n  >>> fibonacci(1000000000000000006)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 2097, 4095, 6149, 8191, 16383, 32767, 65535]\n  >>> fibonacci(1000000000000000007)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 2097, 4095, 6149, 8191, 16383, 32767, 65535, 131071]\n  >>> fibonacci(1000000000000000008)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 2097, 4095, 6149, 8191, 16383, 32767, 65535, 131071, 262143]\n  >>> fibonacci(1000000000000000009)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 2097, 4095, 6149, 8191, 16383, 32767, 65535, 131071, 262143,\n  524287]\n  >>> fibonacci(10000000000000000010)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 2097, 4095, 6149, 8191, 16383, 32767, 65535, 131071, 262143,\n  524287, 1048575]\n  >>> fibonacci(10000000000000000011)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 2097, 4095, 6149, 8191, 16383, 32767, 65535, 131071, 262143,\n  524287, 1048575, 2097151]\n  >>> fibonacci(10000000000000000012)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 2097, 4095, 6149, 8191, 16383, 32767, 65535, 131071, 262143,\n  524287, 1048575, 2097151, 4194303]\n  >>> fibonacci(10000000000000000013)\n  [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\n  2584, 4181, 6765, 10941, 2097, 4095, 6149, 8191, 16383, 32767, 65535, 131071, 262143,\n  524287, 1048575, 2097151, ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelCount", "gc": "<|endoftext|>/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastVowel) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function wordCount which takes a string representing\n  a word as input and returns the number of words in the string.\n\n  Example:\n  >>> wordCount(\"abcde\")\n  3\n  >>> wordCount(\"ACEDY\")\n  2\n  */\nconst wordCount = (s) => {\n  let words = 0;\n  let lastWord = s.charAt(s.length - 1);\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === lastWord) {\n      words++;\n    }\n  }\n  return words;\n};\n\n/*Write a function wordList which takes a string representing\n  a word as input and returns a list of all the words in the string.\n\n  Example:\n  >>> wordList(\"abcde\")\n  [\"abcde\", \"ACEDY\"]\n  >>> wordList(\"ACEDY\")\n  [\"ACEDY\"]\n  */\nconst wordList = (s) => {\n  let words = s.split(\" \");\n  let wordList = [];\n  for(let i = 0; i < words.length; i++) {\n    wordList.push(words[i]);\n  }\n  return wordList;\n};\n\n/*Write a function wordLength which takes a string representing\n  a word as input and returns the number of characters in the string.\n\n  Example:\n  >>> wordLength(\"abcde\")\n  3\n  >>> wordLength(\"ACEDY\")\n  2\n  */\nconst wordLength = (s) => {\n  let words = s.split(\" \");\n  let wordLength = 0;\n  for(let i = 0; i < words.length; i++) {\n    wordLength += words[i].length;\n  }\n  return wordLength;\n};\n\n/*Write a function wordSubstring which takes a string representing\n  a word as input and returns a substring of the given length which is\n  represented by a word as input.\n\n  Example:\n  >>> wordSubstring(\"abcde\", 3)\n  \"abcde\"\n  >>> wordSubstring(\"ACEDY\", 2)\n  \"ACEDY\"\n  */\nconst wordSubstring = (s, len) => {\n  let words = s.split(\" \");\n  let word = \"\";\n  for(let i = 0; i < words.length; i++) {\n    word += words[i];\n    if(word.length >= len) {\n      return word;\n    }\n  }\n  return \"\";\n};\n\n/*Write a function wordToLowerCase which takes a string representing\n  a word as input and returns a string which has all lowercase\n  letters represented by a word as input.\n\n  Example:\n  >>> wordToLowerCase(\"abcde\")\n  \"abcde\"\n  >>> wordToLowerCase(\"ACEDY\")\n  \"acedy\"\n  */\nconst wordToLowerCase = (s) => {\n  let words = s.split(\" \");\n  let word = \"\";\n  for(let i = 0; i < words.length; i++) {\n    word += words[i].toLowerCase();\n  }\n  return word;\n};\n\n/*Write a function wordToUpperCase which takes a string representing\n  a word as input and returns a string which has all uppercase\n  letters represented by a word as input.\n\n  Example:\n  >>> wordToUpperCase(\"abcde\")\n  \"ABCDE\"\n  >>> wordToUpperCase(\"ACEDY\")\n  \"ACEDY\"\n  */\nconst wordToUpperCase = (s) => {\n  let words = s.split(\" \");\n  let word = \"\";\n  for(let i = 0; i < words.length; i++) {\n    word += words[i].toUpperCase();\n  }\n  return word;\n};\n\n/*Write a function wordToTitle which takes a string representing\n  a word as input and returns a string which has all title\n  letters represented by a word as input.\n\n  Example:\n  >>> wordToTitle(\"abcde\")\n  \"Abcde\"\n  >>> wordToTitle(\"ACEDY\")\n  \"Ace dy\"\n  */\nconst wordToTitle = (s) => {\n  let words = s.split(\" \");\n  let word = \"\";\n  for(let i = 0; i < words.length; i++) {\n    word += words[i].charAt(0).toUpperCase() + words[i].substring(1);\n  }\n  return word;\n};\n\n/*Write a function wordToCapitalize which takes a string representing\n  a word as input and returns a string which has all uppercase\n  letters represented by a word as input.\n\n  Example:\n  >>> wordToCapitalize(\"abcde\")\n  \"Abcde\"\n  >>> wordToCapitalize(\"ACEDY\")\n  \"Ace dy\"\n  */\nconst wordToCapitalize = (s) => {\n  let words = s.split(\" \");\n  let word = \"\";\n  for(let i = 0; i < words.length; i++) {\n    word += words[i].charAt(0).toUpperCase() + words[i].substring(1);\n  }\n  return word;\n};\n\n/*Write a function wordToTitle which takes a string representing\n  a word as input and returns a string which has all title\n  letters represented by a word as input.\n\n  Example:\n  >>> wordToTitle(\"abcde\")\n  \"Abcde\"\n  >>> wordToTitle(\"ACEDY\")\n  \"Ace dy\"\n  */\nconst wordToTitle = (s) => {\n  let words = s.split(\" \");\n  let word = \"\";\n  for(let i = 0; i < words.length; i++) {\n    word += words[i].charAt(0).toUpperCase() + words[i].substring(1);\n  }\n  return word;\n};\n\n/*Write a function wordToCapitalize which takes a string representing\n  a word as input and returns a string which has all uppercase\n  letters represented by a word as input.\n\n  Example:\n  >>> wordToCapitalize(\"abcde\")\n  \"Abcde\"\n  >>> wordToCapitalize(\"ACEDY\")\n  \"Ace dy\"\n  */\nconst wordToCapitalize = (s) => {\n  let words = s.split(\" \");\n  let word = \"\";\n  for(let i = 0; i < words.length; i++) {\n    word += words[i].charAt(0).toUpperCase() + words[i].substring(1);\n  }\n  return word;\n};\n\n/*Write a function wordToCapitalize which takes a string representing\n  a word as input and returns a string which has all uppercase\n  letters represented by a word as input.\n\n  Example:\n  >>> wordToCapitalize(\"abcde\")\n  \"Abcde\"\n  >>> wordToCapitalize(\"ACEDY\")\n  \"Ace dy\"\n  */\nconst wordToCapitalize = (s) => {\n  let words = s.split(\" \");\n  let word = \"\";\n  for(let i = 0; i < words.length; i++) {\n    word += words[i].charAt(0).toUpperCase() + words[i].substring(1);\n  }\n  return word;\n};\n\n/*Write a function wordToCapitalize which takes a string representing\n  a word as input and returns a string which has all uppercase\n  letters represented by a word as input.\n\n  Example:\n  >>> wordToCapitalize(\"abcde\")\n  \"Abcde\"\n  >>> wordToCapitalize(\"ACEDY\")\n  \"Ace dy\"\n  */\nconst wordToCapitalize = (s) => {\n  let words = s.split(\" \");\n  let word = \"\";\n  for(let i = 0; i < words.length; i++) {\n    word += words[i].charAt(0).toUpperCase() + words[i].substring(1);\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = Math.ceil(Math.log10(Math.abs(x))) + 1;\n  const reversed = digits.toString().split('').map(n => n.toString().reverse().join(''));\n  return reversed.slice(0).reverse().map(n => n.slice(0, -shift) + n.slice(-shift)).join('');\n};\n\n/*\n  Return the number of trailing zeros in a number.\n  >>> trailingZeros(123)\n  3\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n  0\n  >>> trailingZeros(-123)\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSums", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  let i;\n  for (i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums2 = (s) => {\n  let sum = 0;\n  let i;\n  for (i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums3 = (s) => {\n  let sum = 0;\n  let i;\n  for (i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums4 = (s) => {\n  let sum = 0;\n  let i;\n  for (i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums5 = (s) => {\n  let sum = 0;\n  let i;\n  for (i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums6 = (s) => {\n  let sum = 0;\n  let i;\n  for (i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums7 = (s) => {\n  let sum = 0;\n  let i;\n  for (i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums8 = (s) => {\n  let sum = 0;\n  let i;\n  for (i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums9 = (s) => {\n  let sum = 0;\n  let i;\n  for (i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums10 = (s) => {\n  let sum = 0;\n  let i;\n  for (i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums11 = (s) => {\n  let sum = 0;\n  let i;\n  for (i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 48;\n  }\n  return sum;\n};\n\n/*Task\n  Write a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let fruits = [];\n  let fruitCount = 0;\n  let fruitCount2 = 0;\n  let fruitCount3 = 0;\n  let fruitCount4 = 0;\n  let fruitCount5 = 0;\n  let fruitCount6 = 0;\n  let fruitCount7 = 0;\n  let fruitCount8 = 0;\n  let fruitCount9 = 0;\n  let fruitCount10 = 0;\n  let fruitCount11 = 0;\n  let fruitCount12 = 0;\n  let fruitCount13 = 0;\n  let fruitCount14 = 0;\n  let fruitCount15 = 0;\n  let fruitCount16 = 0;\n  let fruitCount17 = 0;\n  let fruitCount18 = 0;\n  let fruitCount19 = 0;\n  let fruitCount20 = 0;\n  let fruitCount21 = 0;\n  let fruitCount22 = 0;\n  let fruitCount23 = 0;\n  let fruitCount24 = 0;\n  let fruitCount25 = 0;\n  let fruitCount26 = 0;\n  let fruitCount27 = 0;\n  let fruitCount28 = 0;\n  let fruitCount29 = 0;\n  let fruitCount30 = 0;\n  let fruitCount31 = 0;\n  let fruitCount32 = 0;\n  let fruitCount33 = 0;\n  let fruitCount34 = 0;\n  let fruitCount35 = 0;\n  let fruitCount36 = 0;\n  let fruitCount37 = 0;\n  let fruitCount38 = 0;\n  let fruitCount39 = 0;\n  let fruitCount40 = 0;\n  let fruitCount41 = 0;\n  let fruitCount42 = 0;\n  let fruitCount43 = 0;\n  let fruitCount44 = 0;\n  let fruitCount45 = 0;\n  let fruitCount46 = 0;\n  let fruitCount47 = 0;\n  let fruitCount48 = 0;\n  let fruitCount49 = 0;\n  let fruitCount50 = 0;\n  let fruitCount51 = 0;\n  let fruitCount52 = 0;\n  let fruitCount53 = 0;\n  let fruitCount54 = 0;\n  let fruitCount55 = 0;\n  let fruitCount56 = 0;\n  let fruitCount57 = 0;\n  let fruitCount58 = 0;\n  let fruitCount59 = 0;\n  let fruitCount60 = 0;\n  let fruitCount61 = 0;\n  let fruitCount62 = 0;\n  let fruitCount63 = 0;\n  let fruitCount64 = 0;\n  let fruitCount65 = 0;\n  let fruitCount66 = 0;\n  let fruitCount67 = 0;\n  let fruitCount68 = 0;\n  let fruitCount69 = 0;\n  let fruitCount70 = 0;\n  let fruitCount71 = 0;\n  let fruitCount72 = 0;\n  let fruitCount73 = 0;\n  let fruitCount74 = 0;\n  let fruitCount75 = 0;\n  let fruitCount76 = 0;\n  let fruitCount77 = 0;\n  let fruitCount78 = 0;\n  let fruitCount79 = 0;\n  let fruitCount80 = 0;\n  let fruitCount81 = 0;\n  let fruitCount82 = 0;\n  let fruitCount83 = 0;\n  let fruitCount84 = 0;\n  let fruitCount85 = 0;\n  let fruitCount86 = 0;\n  let fruitCount87 = 0;\n  let fruitCount88 = 0;\n  let fruitCount89 = 0;\n  let fruitCount90 = 0;\n  let fruitCount91 = 0;\n  let fruitCount92 = 0;\n  let fruitCount93 = 0;\n  let fruitCount94 = 0;\n  let fruitCount95 = 0;\n  let fruitCount96 = 0;\n  let fruitCount97 = 0;\n  let fruitCount98 = 0;\n  let fruitCount99 = 0;\n  let fruitCount100 = 0;\n  let fruitCount101 = 0;\n  let fruitCount102 = 0;\n  let fruitCount103 = 0;\n  let fruitCount104 = 0;\n  let fruitCount105 = 0;\n  let fruitCount106 = 0;\n  let fruitCount107 = 0;\n  let fruitCount108 = 0;\n  let fruitCount109 = 0;\n  let fruitCount110 = 0;\n  let fruitCount111 = 0;\n  let fruitCount112 = 0;\n  let fruitCount113 = 0;\n  let fruitCount114 = 0;\n  let fruitCount115 = 0;\n  let fruitCount116 = 0;\n  let fruitCount117 = 0;\n  let fruitCount118 = 0;\n  let fruitCount119 = 0;\n  let fruitCount120 = 0;\n  let fruitCount121 = 0;\n  let fruitCount122 = 0;\n  let fruitCount123 = 0;\n  let fruitCount124 = 0;\n  let fruitCount125 = 0;\n  let fruitCount126 = 0;\n  let fruitCount127 = 0;\n  let fruitCount128 = 0;\n  let fruitCount129 = 0;\n  let fruitCount130 = 0;\n  let fruitCount131 = 0;\n  let fruitCount132 = 0;\n  let fruitCount133 = 0;\n  let fruitCount134 = 0;\n  let fruitCount135 = 0;\n  let fruitCount136 = 0;\n  let fruitCount137 = 0;\n  let fruitCount138 = 0;\n  let fruitCount139 = 0;\n  let fruitCount140 = 0;\n  let fruitCount141 = 0;\n  let fruitCount142 = 0;\n  let fruitCount143 = 0;\n  let fruitCount144 = 0;\n  let fruitCount145 = 0;\n  let fruitCount146 = 0;\n  let fruitCount147 = 0;\n  let fruitCount148 = 0;\n  let fruitCount149 = 0;\n  let fruitCount150 = 0;\n  let fruitCount151 = 0;\n  let fruitCount152 = 0;\n  let fruitCount153 = 0;\n  let fruitCount154 = 0;\n  let fruitCount155 = 0;\n  let fruitCount156 = 0;\n  let fruitCount157 = 0;\n  let fruitCount158 = 0;\n  let fruitCount159 = 0;\n  let fruitCount160 = 0;\n  let fruitCount161 = 0;\n  let fruitCount162 = 0;\n  let fruitCount163 = 0;\n  let fruitCount164 = 0;\n  let fruitCount165 = 0;\n  let fruitCount166 = 0;\n  let fruitCount167 = 0;\n  let fruitCount168 = 0;\n  let fruitCount169 = 0;\n  let fruitCount170 = 0;\n  let fruitCount171 = 0;\n  let fruitCount172 = 0;\n  let fruitCount173 = 0;\n  let fruitCount174 = 0;\n  let fruitCount175 = 0;\n  let fruitCount176 = 0;\n  let fruitCount177 = 0;\n  let fruitCount178 = 0;\n  let fruitCount179 = 0;\n  let fruitCount180 = 0;\n  let fruitCount181 = 0;\n  let fruitCount182 = 0;\n  let fruitCount183 = 0;\n  let fruitCount184 = 0;\n  let fruitCount185 = 0;\n  let fruitCount186 = 0;\n  let fruitCount187 = 0;\n  let fruitCount188 = 0;\n  let fruitCount189 = 0;\n  let fruitCount190 = 0;\n  let fruitCount191 = 0;\n  let fruitCount192 = 0;\n  let fruitCount193 = 0;\n  let fruitCount194 = 0;\n  let fruitCount195 = 0;\n  let fruitCount196 = 0;\n  let fruitCount197 = 0;\n  let fruitCount198 = 0;\n  let fruitCount199 = 0;\n  let fruitCount200 = 0;\n  let fruitCount201 = 0;\n  let fruitCount202 = 0;\n  let fruitCount203 = 0;\n  let fruitCount204 = 0;\n  let fruitCount205 = 0;\n  let fruitCount206 = 0;\n  let fruitCount207 = 0;\n  let fruitCount208 = 0;\n  let fruitCount209 = 0;\n  let fruitCount210 = 0;\n  let fruitCount211 = 0;\n  let fruitCount212 = 0;\n  let fruitCount213 = 0;\n  let fruitCount214 = 0;\n  let fruitCount215 = 0;\n  let fruitCount216 = 0;\n  let fruitCount217 = 0;\n  let fruitCount218 = 0;\n  let fruitCount219 = 0;\n  let fruitCount220 = 0;\n  let fruitCount221 = 0;\n  let fruitCount222 = 0;\n  let fruitCount223 = 0;\n  let fruitCount224 = 0;\n  let fruitCount225 = 0;\n  let fruitCount226 = 0;\n  let fruitCount227 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  while (j < len) {\n    if (arr[j] % 2 === 0) {\n      result.push(arr[j]);\n      j++;\n    } else {\n      result.push(arr[j]);\n      k++;\n    }\n  }\n  return result;\n};\n\n/**\n * Given an array representing a tree with non-negative integer nodes\n * your task is to pluck one of the nodes and return it.\n * The plucked node should be the node with the smallest odd value.\n * If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n * The plucked node should be returned in a list, [ odd_value, its index ],\n * If there are no odd values or the given array is empty, return [].\n\n * Example 1:\n * Input: [4,2,3]\n * Output: [2, 1]\n * Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n * Example 2:\n * Input: [1,2,3]\n * Output: [2, 1]\n * Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n\n * Example 3:\n * Input: []\n * Output: []\n\n * Example 4:\n * Input: [5, 0, 3, 0, 4, 2]\n * Output: [0, 1]\n * Explanation: 0 is the smallest value, but  there are two zeros,\n * so we will choose the first zero, which has the smallest index.\n */\nconst pluckOdd = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 1) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  while (j < len) {\n    if (arr[j] % 2 === 1) {\n      result.push(arr[j]);\n      j++;\n    } else {\n      result.push(arr[j]);\n      k++;\n    }\n  }\n  return result;\n};\n\n/**\n * Given an array representing a tree with non-negative integer nodes\n * your task is to pluck one of the nodes and return it.\n * The plucked node should be the node with the smallest positive value.\n * If multiple nodes with the same smallest positive value are found return the node that has smallest index.\n\n * The plucked node should be returned in a list, [ positive_value, its index ],\n * If there are no positive values or the given array is empty, return [].\n\n * Example 1:\n * Input: [4,2,3]\n * Output: [2, 1]\n * Explanation: 2 has the smallest positive value, and 2 has the smallest index.\n\n * Example 2:\n * Input: [1,2,3]\n * Output: [2, 1]\n * Explanation: 2 has the smallest positive value, and 2 has the smallest index.\n\n * Example 3:\n * Input: []\n * Output: []\n\n * Example 4:\n * Input: [5, 0, 3, 0, 4, 2]\n * Output: [0, 1]\n * Explanation: 0 is the smallest value, but  there are two zeros,\n * so we will choose the first zero, which has the smallest index.\n */\nconst pluckPositive = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  while (j < len) {\n    if (arr[j] % 2 === 0) {\n      result.push(arr[j]);\n      j++;\n    } else {\n      result.push(arr[j]);\n      k++;\n    }\n  }\n  return result;\n};\n\n/**\n * Given an array representing a tree with non-negative integer nodes\n * your task is to pluck one of the nodes and return it.\n * The plucked node should be the node with the smallest negative value.\n * If multiple nodes with the same smallest negative value are found return the node that has smallest index.\n\n * The plucked node should be returned in a list, [ negative_value, its index ],\n * If there are no negative values or the given array is empty, return [].\n\n * Example 1:\n * Input: [4,2,3]\n * Output: [2, 1]\n * Explanation: 2 has the smallest negative value, and 2 has the smallest index.\n\n * Example 2:\n * Input: [1,2,3]\n * Output: [2, 1]\n * Explanation: 2 has the smallest negative value, and 2 has the smallest index.\n\n * Example 3:\n * Input: []\n * Output: []\n\n * Example 4:\n * Input: [5, 0, 3, 0, 4, 2]\n * Output: [0, 1]\n * Explanation: 0 is the smallest value, but  there are two zeros,\n * so we will choose the first zero, which has the smallest index.\n */\nconst pluckNegative = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 1) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      result.push(arr[i]);\n      j++;\n    }\n  }\n  while (j < len) {\n    if (arr[j] % 2 === 1) {\n      result.push(arr[j]);\n      j++;\n    } else {\n      result.push(arr[j]);\n      k++;\n    }\n  }\n  return result;\n};\n\n/**\n * Given an array representing a tree with non-negative integer nodes\n * your task is to pluck one of the nodes and return it.\n * The plucked node should be the node with the smallest positive value.\n * If multiple nodes with the same smallest positive value are found return the node that has smallest index.\n\n * The plucked node should be returned in a list, [ positive_value, its index ],\n * If there are no positive values or the given array is empty, return [].\n\n * Example 1:\n * Input: [4,2,3]\n * Output: [2, 1]\n * Explanation: 2 has the smallest positive value, and 2 has the smallest index.\n\n * Example 2:\n * Input: [1,2,3]\n * Output: [2, 1]\n * Explanation: 2 has the smallest positive value, and 2 has the smallest index.\n\n * Example 3:\n * Input: []\n * Output: []\n\n * Example 4:\n * Input: [5, 0, 3, 0, 4, 2]\n * Output: [0, 1]\n * Explanation: 0 is the smallest value, but  there are two zeros,\n * so we will choose the first zero, which has the smallest index.\n */\nconst pluckPositiveOdd = (arr) => {\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxCount = i;\n    }\n  }\n  return maxCount;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minCount = i;\n    }\n  }\n  return minCount;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minCount = i;\n    }\n  }\n  return minCount;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minCount = i;\n    }\n  }\n  return minCount;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minCount = i;\n    }\n  }\n  return minCount;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minCount = i;\n    }\n  }\n  return minCount;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minCount = i;\n    }\n  }\n  return minCount;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minCount = i;\n    }\n  }\n  return minCount;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minCount = i;\n    }\n  }\n  return minCount;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minCount = i;\n    }\n  }\n  return minCount;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let minCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minCount = i;\n    }\n  }\n  return minCount;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the least integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Get a random element from a list\n * >>> getRandom([])\n * undefined\n * >>> getRandom(['a', 'b', 'c'])\n * 'b'\n * >>> getRandom(['a', 'b', 'c'], 1)\n * 'b'\n * >>> getRandom(['a', 'b', 'c'], 2)\n * 'b'\n * >>> getRandom(['a', 'b', 'c'], 3)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 4)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 5)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 6)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 7)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 8)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 9)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 10)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 11)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 12)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 13)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 14)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 15)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 16)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 17)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 18)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 19)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 20)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 21)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 22)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 23)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 24)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 25)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 26)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 27)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 28)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 29)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 30)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 31)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 32)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 33)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 34)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 35)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 36)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 37)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 38)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 39)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 40)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 41)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 42)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 43)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 44)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 45)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 46)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 47)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 48)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 49)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 50)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 51)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 52)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 53)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 54)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 55)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 56)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 57)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 58)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 59)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 60)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 61)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 62)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 63)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 64)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 65)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 66)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 67)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 68)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 69)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 70)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 71)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 72)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 73)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 74)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 75)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 76)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 77)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 78)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 79)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 80)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 81)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 82)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 83)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 84)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 85)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 86)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 87)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 88)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 89)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 90)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 91)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 92)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 93)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 94)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 95)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 96)\n * 'c'\n * >>> getRandom(['a', 'b', 'c'], 97)\n * 'c'\n * >>> get", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangerSortsLists", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  let sortedLst = lst\n   .sort((a, b) => a - b)\n   .map(x => x + 1)\n   .filter(x => x!== 0)\n  return sortedLst\n}\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortedSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedSortsLists([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedSortsLists([]) == []\n  */\nconst sortedSortsLists = (lst) => {\n  let sortedLst = lst\n   .sort((a, b) => a - b)\n   .map(x => x + 1)\n   .filter(x => x!== 0)\n  return sortedLst\n}\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortedSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedSortsLists([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedSortsLists([]) == []\n  */\nconst sortedSortsLists = (lst) => {\n  let sortedLst = lst\n   .sort((a, b) => a - b)\n   .map(x => x + 1)\n   .filter(x => x!== 0)\n  return sortedLst\n}\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortedSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedSortsLists([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedSortsLists([]) == []\n  */\nconst sortedSortsLists = (lst) => {\n  let sortedLst = lst\n   .sort((a, b) => a - b)\n   .map(x => x + 1)\n   .filter(x => x!== 0)\n  return sortedLst\n}\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortedSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedSortsLists([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedSortsLists([]) == []\n  */\nconst sortedSortsLists = (lst) => {\n  let sortedLst = lst\n   .sort((a, b) => a - b)\n   .map(x => x + 1)\n   .filter(x => x!== 0)\n  return sortedLst\n}\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortedSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedSortsLists([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedSortsLists([]) == []\n  */\nconst sortedSortsLists = (lst) => {\n  let sortedLst = lst\n   .sort((a, b) => a - b)\n   .map(x => x + 1)\n   .filter(x => x!== 0)\n  return sortedLst\n}\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortedSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedSortsLists([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedSortsLists([]) == []\n  */\nconst sortedSortsLists = (lst) => {\n  let sortedLst = lst\n   .sort((a, b) => a - b)\n   .map(x => x + 1)\n   .filter(x => x!== 0)\n  return sortedLst\n}\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortedSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedSortsLists([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedSortsLists([]) == []\n  */\nconst sortedSortsLists = (lst) => {\n  let sortedLst = lst\n   .sort((a, b) => a - b)\n   .map(x => x + 1)\n   .filter(x => x!== 0)\n  return sortedLst\n}\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortedSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedSortsLists([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedSortsLists([]) == []\n  */\nconst sortedSortsLists = (lst) => {\n  let sortedLst = lst\n   .sort((a, b) => a - b)\n   .map(x => x + 1)\n   .filter(x => x!== 0)\n  return sortedLst\n}\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortedSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedSortsLists([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedSortsLists([]) == []\n  */\nconst sortedSortsLists = (lst) => {\n  let sortedLst = lst\n   .sort((a, b) => a - b)\n   .map(x => x + 1)\n   .filter(x => x!== 0)\n  return sortedLst\n}\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortedSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedSortsLists([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedSortsLists([]) == []\n  */\nconst sortedSortsLists = (lst) => {\n  let sortedLst = lst\n   .sort((a, b) => a - b)\n   .map(x => x + 1)\n   .filter(x => x!== 0)\n  return sortedLst\n}\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortedSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedSortsLists([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedSortsLists([]) == []\n  */\nconst sortedSortsLists = (lst) => {\n  let sortedLst = lst\n   .sort((a, b) => a - b)\n   .map(x => x + 1)\n   .filter(x => x!== 0)\n  return sortedLst\n}\n\n/*\n  Given list of integers, return list in sorted order.\n  Sort is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortedSortsLists([1, 2, 3, 4]) == [4, 3, 2, 1]\n  sortedSortsLists([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedSortsLists([]) == []\n  */\nconst sortedSortsLists = (lst) => {\n  let sortedLst = lst\n   .sort((a, b) => ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  const aArea = triangleArea(a);\n  const bArea = triangleArea(b);\n  const cArea = triangleArea(c);\n  if (aArea > bArea && bArea > cArea) {\n    return (aArea + bArea + cArea) / 2;\n  }\n  return -1;\n};\n\n// Calculate the area of a triangle given its sides.\nconst triangleArea = (sides) => {\n  let area = 0;\n  for (let i = 0; i < sides; i++) {\n    area += sides[i] * sides[i];\n  }\n  return area;\n};\n\n// Calculate the area of a triangle given its sides and perimeter.\nconst trianglePerimeter = (sides) => {\n  let perimeter = 0;\n  for (let i = 0; i < sides; i++) {\n    perimeter += sides[i] * sides[i];\n  }\n  return perimeter;\n};\n\n// Calculate the area of a triangle given its sides and perimeter.\nconst triangleAreaAndPerimeter = (sides) => {\n  let area = 0;\n  let perimeter = 0;\n  for (let i = 0; i < sides; i++) {\n    area += sides[i] * sides[i];\n    perimeter += sides[i] * sides[i];\n  }\n  return { area, perimeter };\n};\n\n// Calculate the area of a triangle given its sides and perimeter.\nconst triangleAreaAndPerimeterAndPerimeter = (sides) => {\n  let area = 0;\n  let perimeter = 0;\n  let perimeter2 = 0;\n  for (let i = 0; i < sides; i++) {\n    area += sides[i] * sides[i];\n    perimeter += sides[i] * sides[i];\n    perimeter2 += sides[i] * sides[i];\n  }\n  return { area, perimeter, perimeter2 };\n};\n\n// Calculate the area of a triangle given its sides and perimeter.\nconst triangleAreaAndPerimeterAndPerimeterAndPerimeter = (sides) => {\n  let area = 0;\n  let perimeter = 0;\n  let perimeter2 = 0;\n  let perimeter3 = 0;\n  for (let i = 0; i < sides; i++) {\n    area += sides[i] * sides[i];\n    perimeter += sides[i] * sides[i];\n    perimeter2 += sides[i] * sides[i];\n    perimeter3 += sides[i] * sides[i];\n  }\n  return { area, perimeter, perimeter2, perimeter3 };\n};\n\n// Calculate the area of a triangle given its sides and perimeter.\nconst triangleAreaAndPerimeterAndPerimeterAndPerimeterAndPerimeter = (sides) => {\n  let area = 0;\n  let perimeter = 0;\n  let perimeter2 = 0;\n  let perimeter3 = 0;\n  let perimeter4 = 0;\n  let perimeter5 = 0;\n  for (let i = 0; i < sides; i++) {\n    area += sides[i] * sides[i];\n    perimeter += sides[i] * sides[i];\n    perimeter2 += sides[i] * sides[i];\n    perimeter3 += sides[i] * sides[i];\n    perimeter4 += sides[i] * sides[i];\n    perimeter5 += sides[i] * sides[i];\n  }\n  return { area, perimeter, perimeter2, perimeter3, perimeter4, perimeter5 };\n};\n\n// Calculate the area of a triangle given its sides and perimeter.\nconst triangleAreaAndPerimeterAndPerimeterAndPerimeterAndPerimeterAndPerimeter = (sides) => {\n  let area = 0;\n  let perimeter = 0;\n  let perimeter2 = 0;\n  let perimeter3 = 0;\n  let perimeter4 = 0;\n  let perimeter5 = 0;\n  let perimeter6 = 0;\n  let perimeter7 = 0;\n  let perimeter8 = 0;\n  let perimeter9 = 0;\n  for (let i = 0; i < sides; i++) {\n    area += sides[i] * sides[i];\n    perimeter += sides[i] * sides[i];\n    perimeter2 += sides[i] * sides[i];\n    perimeter3 += sides[i] * sides[i];\n    perimeter4 += sides[i] * sides[i];\n    perimeter5 += sides[i] * sides[i];\n    perimeter6 += sides[i] * sides[i];\n    perimeter7 += sides[i] * sides[i];\n    perimeter8 += sides[i] * sides[i];\n    perimeter9 += sides[i] * sides[i];\n  }\n  return { area, perimeter, perimeter2, perimeter3, perimeter4, perimeter5, perimeter6, perimeter7, perimeter8, perimeter9 };\n};\n\n// Calculate the area of a triangle given its sides and perimeter.\nconst triangleAreaAndPerimeterAndPerimeterAndPerimeterAndPerimeterAndPerimeterAndPerimeterAndPerimeter = (sides) => {\n  let area = 0;\n  let perimeter = 0;\n  let perimeter2 = 0;\n  let perimeter3 = 0;\n  let perimeter4 = 0;\n  let perimeter5 = 0;\n  let perimeter6 = 0;\n  let perimeter7 = 0;\n  let perimeter8 = 0;\n  let perimeter9 = 0;\n  let perimeter10 = 0;\n  let perimeter11 = 0;\n  let perimeter12 = 0;\n  let perimeter13 = 0;\n  let perimeter14 = 0;\n  let perimeter15 = 0;\n  let perimeter16 = 0;\n  let perimeter17 = 0;\n  let perimeter18 = 0;\n  let perimeter19 = 0;\n  let perimeter20 = 0;\n  let perimeter21 = 0;\n  let perimeter22 = 0;\n  let perimeter23 = 0;\n  let perimeter24 = 0;\n  let perimeter25 = 0;\n  let perimeter26 = 0;\n  let perimeter27 = 0;\n  let perimeter28 = 0;\n  let perimeter29 = 0;\n  let perimeter30 = 0;\n  let perimeter31 = 0;\n  let perimeter32 = 0;\n  let perimeter33 = 0;\n  let perimeter34 = 0;\n  let perimeter35 = 0;\n  let perimeter36 = 0;\n  let perimeter37 = 0;\n  let perimeter38 = 0;\n  let perimeter39 = 0;\n  let perimeter40 = 0;\n  let perimeter41 = 0;\n  let perimeter42 = 0;\n  let perimeter43 = 0;\n  let perimeter44 = 0;\n  let perimeter45 = 0;\n  let perimeter46 = 0;\n  let perimeter47 = 0;\n  let perimeter48 = 0;\n  let perimeter49 = 0;\n  let perimeter50 = 0;\n  let perimeter51 = 0;\n  let perimeter52 = 0;\n  let perimeter53 = 0;\n  let perimeter54 = 0;\n  let perimeter55 = 0;\n  let perimeter56 = 0;\n  let perimeter57 = 0;\n  let perimeter58 = 0;\n  let perimeter59 = 0;\n  let perimeter60 = 0;\n  let perimeter61 = 0;\n  let perimeter62 = 0;\n  let perimeter63 = 0;\n  let perimeter64 = 0;\n  let perimeter65 = 0;\n  let perimeter66 = 0;\n  let perimeter67 = 0;\n  let perimeter68 = 0;\n  let perimeter69 = 0;\n  let perimeter70 = 0;\n  let perimeter71 = 0;\n  let perimeter72 = 0;\n  let perimeter73 = 0;\n  let perimeter74 = 0;\n  let perimeter75 = 0;\n  let perimeter76 = 0;\n  let perimeter77 = 0;\n  let perimeter78 = 0;\n  let perimeter79 = 0;\n  let perimeter80 = 0;\n  let perimeter81 = 0;\n  let perimeter82 = 0;\n  let perimeter83 = 0;\n  let perimeter84 = 0;\n  let perimeter85 = 0;\n  let perimeter86 = 0;\n  let perimeter87 = 0;\n  let perimeter88 = 0;\n  let perimeter89 = 0;\n  let perimeter90 = 0;\n  let perimeter91", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlied", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const maxWeight = w > 0? w : Number.MAX_SAFE_INTEGER;\n  const maxSum = q.map(n => n.valueOf()).reduce((a, b) => a + b);\n  const sumOfElements = q.map(n => n.valueOf()).reduce((a, b) => a + b);\n  return sumOfElements <= maxSum && sumOfElements <= maxWeight && sumOfElements <= Number.MAX_SAFE_INTEGER;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const maxWeight = w > 0? w : Number.MAX_SAFE_INTEGER;\n  const maxSum = q.map(n => n.valueOf()).reduce((a, b) => a + b);\n  const sumOfElements = q.map(n => n.valueOf()).reduce((a, b) => a + b);\n  return sumOfElements <= maxSum && sumOfElements <= maxWeight && sumOfElements <= Number.MAX_SAFE_INTEGER;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const maxWeight = w > 0? w : Number.MAX_SAFE_INTEGER;\n  const maxSum = q.map(n => n.valueOf()).reduce((a, b) => a + b);\n  const sumOfElements = q.map(n => n.valueOf()).reduce((a, b) => a + b);\n  return sumOfElements <= maxSum && sumOfElements <= maxWeight && sumOfElements <= Number.MAX_SAFE_INTEGER;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const maxWeight = w > 0? w : Number.MAX_SAFE_INTEGER;\n  const maxSum = q.map(n => n.valueOf()).reduce((a, b) => a + b);\n  const sumOfElements = q.map(n => n.valueOf()).reduce((a, b) => a + b);\n  return sumOfElements <= maxSum && sumOfElements <= maxWeight && sumOfElements <= Number.MAX_SAFE_INTEGER;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const maxWeight = w > 0? w : Number.MAX_SAFE_INTEGER;\n  const maxSum = q.map(n => n.valueOf()).reduce((a, b) => a + b);\n  const sumOfElements = q.map(n => n.valueOf()).reduce((a, b) => a + b);\n  return sumOfElements <= maxSum && sumOfElements <= maxWeight && sumOfElements <= Number.MAX_SAFE_INTEGER;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallerChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let min = Number.MAX_VALUE;\n  let changes = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      changes++;\n      min = Math.min(min, changes);\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallerChange;\n\n},{}],4:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let min = Number.MAX_VALUE;\n  let changes = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      changes++;\n      min = Math.min(min, changes);\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallerChange;\n\n},{}],5:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let min = Number.MAX_VALUE;\n  let changes = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      changes++;\n      min = Math.min(min, changes);\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallerChange;\n\n},{}],6:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let min = Number.MAX_VALUE;\n  let changes = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      changes++;\n      min = Math.min(min, changes);\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallerChange;\n\n},{}],7:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let min = Number.MAX_VALUE;\n  let changes = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      changes++;\n      min = Math.min(min, changes);\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallerChange;\n\n},{}],8:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let min = Number.MAX_VALUE;\n  let changes = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      changes++;\n      min = Math.min(min, changes);\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallerChange;\n\n},{}],9:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let min = Number.MAX_VALUE;\n  let changes = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      changes++;\n      min = Math.min(min, changes);\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallerChange;\n\n},{}],10:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let min = Number.MAX_VALUE;\n  let changes = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      changes++;\n      min = Math.min(min, changes);\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallerChange;\n\n},{}],11:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let min = Number.MAX_VALUE;\n  let changes = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      changes++;\n      min = Math.min(min, changes);\n    }\n  }\n  return min;\n};\n\nmodule.exports = smallerChange;\n\n},{}],12:[function(require,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  const totalChars2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  return lst1.filter(\n    (item, index, arr) =>\n      index < arr.reduce((acc, curr) => acc + curr.length, 0) &&\n      item === arr.reduce((acc, curr) => acc + curr.length, 0)\n  ).concat(lst2.filter(\n    (item, index, arr) =>\n      index < arr.reduce((acc, curr) => acc + curr.length, 0) &&\n      item === arr.reduce((acc, curr) => acc + curr.length, 0)\n  ));\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch2 = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  const totalChars2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  return lst1.filter(\n    (item, index, arr) =>\n      index < arr.reduce((acc, curr) => acc + curr.length, 0) &&\n      item === arr.reduce((acc, curr) => acc + curr.length, 0)\n  ).concat(lst2.filter(\n    (item, index, arr) =>\n      index < arr.reduce((acc, curr) => acc + curr.length, 0) &&\n      item === arr.reduce((acc, curr) => acc + curr.length, 0)\n  ));\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch3 = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  const totalChars2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  return lst1.filter(\n    (item, index, arr) =>\n      index < arr.reduce((acc, curr) => acc + curr.length, 0) &&\n      item === arr.reduce((acc, curr) => acc + curr.length, 0)\n  ).concat(lst2.filter(\n    (item, index, arr) =>\n      index < arr.reduce((acc, curr) => acc + curr.length, 0) &&\n      item === arr.reduce((acc, curr) => acc + curr.length, 0)\n  ));\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch4 = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  const totalChars2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  return lst1.filter(\n    (item, index, arr) =>\n      index < arr.reduce((acc, curr) => acc + curr.length, 0) &&\n      item === arr.reduce((acc, curr) => acc + curr.length, 0)\n  ).concat(lst2.filter(\n    (item, index, arr) =>\n      index < arr.reduce((acc, curr) => acc + curr.length, 0) &&\n      item === arr.reduce((acc, curr) => acc + curr.length, 0)\n  ));\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch5 = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => acc + curr.length, 0);\n  const totalChars2 = lst2.reduce((acc, curr) => acc + curr.length, 0);\n  return lst1.filter(\n    (item, index, arr) =>\n      index < arr.reduce((acc, curr) => acc + curr.length, 0) &&\n      item === arr.reduce((acc, curr) => acc + curr.length, 0)\n  ).concat(lst2.filter(\n    (item, index, arr) =>\n      index < arr.reduce((acc, curr) => acc + curr.length, 0) &&\n      item === arr.reduce((acc, curr) => acc + curr.length, 0)\n  ));\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = a % num === 0;\n    num = num * 2;\n  }\n  return isPri", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePow", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false;\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return false;\n  if (a % 5 === 0) return false;\n  return true;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a prime number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isprime(1) ==> true\n  isprime(2) ==> false\n  isprime(3) ==> true\n  isprime(4) ==> false\n  isprime(5) ==> true\n  isprime(6) ==> false\n  isprime(7) ==> true\n  isprime(8) ==> false\n  isprime(9) ==> true\n  isprime(10) ==> false\n  isprime(11) ==> true\n  isprime(12) ==> false\n  isprime(13) ==> true\n  isprime(14) ==> false\n  isprime(15) ==> true\n  isprime(16) ==> false\n  isprime(17) ==> true\n  isprime(18) ==> false\n  isprime(19) ==> true\n  isprime(20) ==> false\n  isprime(21) ==> true\n  isprime(22) ==> false\n  isprime(23) ==> true\n  isprime(24) ==> false\n  isprime(25) ==> true\n  isprime(26) ==> false\n  isprime(27) ==> true\n  isprime(28) ==> false\n  isprime(29) ==> true\n  isprime(30) ==> false\n  isprime(31) ==> true\n  isprime(32) ==> false\n  isprime(33) ==> true\n  isprime(34) ==> false\n  isprime(35) ==> true\n  isprime(36) ==> false\n  isprime(37) ==> true\n  isprime(38) ==> false\n  isprime(39) ==> true\n  isprime(40) ==> false\n  isprime(41) ==> true\n  isprime(42) ==> false\n  isprime(43) ==> true\n  isprime(44) ==> false\n  isprime(45) ==> true\n  isprime(46) ==> false\n  isprime(47) ==> true\n  isprime(48) ==> false\n  isprime(49) ==> true\n  isprime(50) ==> false\n  isprime(51) ==> true\n  isprime(52) ==> false\n  isprime(53) ==> true\n  isprime(54) ==> false\n  isprime(55) ==> true\n  isprime(56) ==> false\n  isprime(57) ==> true\n  isprime(58) ==> false\n  isprime(59) ==> true\n  isprime(60) ==> false\n  isprime(61) ==> true\n  isprime(62) ==> false\n  isprime(63) ==> true\n  isprime(64) ==> false\n  isprime(65) ==> true\n  isprime(66) ==> false\n  isprime(67) ==> true\n  isprime(68) ==> false\n  isprime(69) ==> true\n  isprime(70) ==> false\n  isprime(71) ==> true\n  isprime(72) ==> false\n  isprime(73) ==> true\n  isprime(74) ==> false\n  isprime(75) ==> true\n  isprime(76) ==> false\n  isprime(77) ==> true\n  isprime(78) ==> false\n  isprime(79) ==> true\n  isprime(80) ==> false\n  isprime(81) ==> true\n  isprime(82) ==> false\n  isprime(83) ==> true\n  isprime(84) ==> false\n  isprime(85) ==> true\n  isprime(86) ==> false\n  isprime(87) ==> true\n  isprime(88) ==> false\n  isprime(89) ==> true\n  isprime(90) ==> false\n  isprime(91) ==> true\n  isprime(92) ==> false\n  isprime(93) ==> true\n  isprime(94) ==> false\n  isprime(95) ==> true\n  isprime(96) ==> false\n  isprime(97) ==> true\n  isprime(98) ==> false\n  isprime(99) ==> true\n  isprime(100) ==> false\n  isprime(101) ==> true\n  isprime(102) ==> false\n  isprime(103) ==> true\n  isprime(104) ==> false\n  isprime(105) ==> true\n  isprime(106) ==> false\n  isprime(107) ==> true\n  isprime(108) ==> false\n  isprime(109) ==> true\n  isprime(110) ==> false\n  isprime(111) ==> true\n  isprime(112) ==> false\n  isprime(113) ==> true\n  isprime(114) ==> false\n  isprime(115) ==> true\n  isprime(116) ==> false\n  isprime(117) ==> true\n  isprime(118) ==> false\n  isprime(119) ==> true\n  isprime(120) ==> false\n  isprime(121) ==> true\n  isprime(122) ==> false\n  isprime(123) ==> true\n  isprime(124) ==> false\n  isprime(125) ==> true\n  isprime(126) ==> false\n  isprime(127) ==> true\n  isprime(128) ==> false\n  isprime(129) ==> true\n  isprime(130) ==> false\n  isprime(131) ==> true\n  isprime(132) ==> false\n  isprime(133) ==> true\n  isprime(134) ==> false\n  isprime(135) ==> true\n  isprime(136) ==> false\n  isprime(137) ==> true\n  isprime(138) ==> false\n  isprime(139) ==> true\n  isprime(140) ==> false\n  isprime(141) ==> true\n  isprime(142) ==> false\n  isprime(143) ==> true\n  isprime(144) ==> false\n  isprime(145) ==> true\n  isprime(146) ==> false\n  isprime(147) ==> true\n  isprime(148) ==> false\n  isprime(149) ==> true\n  isprime(150) ==> false\n  isprime(151) ==> true\n  isprime(152) ==> false\n  isprime(153) ==> true\n  isprime(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexesKeys", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n  let primes = [];\n  let numLength = num.length;\n  let hexesCount = 0;\n  let hexesCount2 = 0;\n  let hexesCount3 = 0;\n  let hexesCount4 = 0;\n  let hexesCount5 = 0;\n  let hexesCount6 = 0;\n  let hexesCount7 = 0;\n  let hexesCount8 = 0;\n  let hexesCount9 = 0;\n  let hexesCountA = 0;\n  let hexesCountB = 0;\n  let hexesCountC = 0;\n  let hexesCountD = 0;\n  let hexesCountE = 0;\n  let hexesCountF = 0;\n  let hexesCountG = 0;\n  let hexesCountH = 0;\n  let hexesCountI = 0;\n  let hexesCountJ = 0;\n  let hexesCountK = 0;\n  let hexesCountL = 0;\n  let hexesCountM = 0;\n  let hexesCountN = 0;\n  let hexesCountO = 0;\n  let hexesCountP = 0;\n  let hexesCountQ = 0;\n  let hexesCountR = 0;\n  let hexesCountS = 0;\n  let hexesCountT = 0;\n  let hexesCountU = 0;\n  let hexesCountV = 0;\n  let hexesCountW = 0;\n  let hexesCountX = 0;\n  let hexesCountY = 0;\n  let hexesCountZ = 0;\n  let hexesCounta = 0;\n  let hexesCountb = 0;\n  let hexesCountc = 0;\n  let hexesCountd = 0;\n  let hexesCounte = 0;\n  let hexesCountf = 0;\n  let hexesCountg = 0;\n  let hexesCounth = 0;\n  let hexesCounti = 0;\n  let hexesCountj = 0;\n  let hexesCountk = 0;\n  let hexesCountl = 0;\n  let hexesCountm = 0;\n  let hexesCountn = 0;\n  let hexesCounto = 0;\n  let hexesCountp = 0;\n  let hexesCountq = 0;\n  let hexesCountr = 0;\n  let hexesCounts = 0;\n  let hexesCountt = 0;\n  let hexesCountu = 0;\n  let hexesCountv = 0;\n  let hexesCountw = 0;\n  let hexesCountx = 0;\n  let hexesCounty = 0;\n  let hexesCountz = 0;\n  let hexesCountA2 = 0;\n  let hexesCountB2 = 0;\n  let hexesCountC2 = 0;\n  let hexesCountD2 = 0;\n  let hexesCountE2 = 0;\n  let hexesCountF2 = 0;\n  let hexesCountG2 = 0;\n  let hexesCountH2 = 0;\n  let hexesCountI2 = 0;\n  let hexesCountJ2 = 0;\n  let hexesCountK2 = 0;\n  let hexesCountL2 = 0;\n  let hexesCountM2 = 0;\n  let hexesCountN2 = 0;\n  let hexesCountO2 = 0;\n  let hexesCountP2 = 0;\n  let hexesCountQ2 = 0;\n  let hexesCountR2 = 0;\n  let hexesCountS2 = 0;\n  let hexesCountT2 = 0;\n  let hexesCountU2 = 0;\n  let hexesCountV2 = 0;\n  let hexesCountW2 = 0;\n  let hexesCountX2 = 0;\n  let hexesCountY2 = 0;\n  let hexesCountZ2 = 0;\n  let hexesCounta2 = 0;\n  let hexesCountb2 = 0;\n  let hexesCountc2 = 0;\n  let hexesCountd2 = 0;\n  let hexesCounte2 = 0;\n  let hexesCountf2 = 0;\n  let hexesCountg2 = 0;\n  let hexesCounth2 = 0;\n  let hexesCounti2 = 0;\n  let hexesCountj2 = 0;\n  let hexesCountk2 = 0;\n  let hexesCountl2 = 0;\n  let hexesCountm2 = 0;\n  let hexesCountn2 = 0;\n  let hexesCounto2 = 0;\n  let hexesCountp2 = 0;\n  let hexesCountq2 = 0;\n  let hexesCountr2 = 0;\n  let hexesCounts2 = 0;\n  let hexesCountt2 = 0;\n  let hexesCounttu2 = 0;\n  let hexesCountv2 = 0;\n  let hexesCountw2 = 0;\n  let hexesCountx2 = 0;\n  let hexesCounty2 = 0;\n  let hexesCountz2 = 0;\n  let hexesCountA3 = 0;\n  let hexesCountB3 = 0;\n  let hexesCountC3 = 0;\n  let hexesCountD3 = 0;\n  let hexesCountE3 = 0;\n  let hexesCountF3 = 0;\n  let hexesCountG3 = 0;\n  let hexesCountH3 = 0;\n  let hexesCountI3 = 0;\n  let hexesCountJ3 = 0;\n  let hexesCountK3 = 0;\n  let hexesCountL3 = 0;\n  let hexesCountM3 = 0;\n  let hexesCountN3 = 0;\n  let hexesCountO3 = 0;\n  let hexesCountP3 = 0;\n  let hexesCountQ3 = 0;\n  let hexesCountR3 = 0;\n  let hexesCountS3 = 0;\n  let hexesCountT3 = 0;\n  let hexesCountU3 = 0;\n  let hexesCountV3 = 0;\n  let hexesCountW3 = 0;\n  let hexesCountX3 = 0;\n  let hexesCounty3 = 0;\n  let hexesCountz3 = 0;\n  let hexesCountA4 = 0;\n  let hexesCountB4 = 0;\n  let hexesCountC4 = 0;\n  let hexesCountD4 = 0;\n  let hexesCountE4 = 0;\n  let hexesCountF4 = 0;\n  let hexesCountG4 = 0;\n  let hexesCountH4 = 0;\n  let hexesCountI4 = 0;\n  let hexesCountJ4 = 0;\n  let hexesCountK4 = 0;\n  let hexesCountL4 = 0;\n  let hexesCountM4 = 0;\n  let hexesCountN4 = 0;\n  let hexesCountO4 = 0;\n  let hexesCountP4 = 0;\n  let hexesCountQ4 = 0;\n  let hexesCountR4 = 0;\n  let hexesCountS4 = 0;\n  let hexesCountT4 = 0;\n  let hexesCountU4 = 0;\n  let hexesCountV4 = 0;\n  let hexesCountW4 = 0;\n  let hexesCountX4 = 0;\n  let hexesCounty4 = 0;\n  let hexesCountz4 = 0;\n  let hexesCountA5 = 0;\n  let hexesCountB5 = 0;\n  let hexesCountC5 = 0;\n  let hexesCountD5 = 0;\n  let hexesCountE5 = 0;\n  let hexesCountF5 = 0;\n  let hexesCountG5 = 0;\n  let hexesCountH5 = 0;\n  let hexesCountI5 = 0;\n  let hexesCountJ5 = 0;\n  let hexesCountK5 = 0;\n  let hexesCountL5 = 0;\n  let hexesCountM5 = 0;\n  let hexesCountN5 = 0;\n  let hexesCountO5 = 0;\n  let hexesCountP5 = 0;\n  let hexesCountQ5 = 0;\n  let hexesCountR5 = 0;\n  let hex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalsToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n  let binary = '';\n  let num = 0;\n  let numStr = '';\n  let decimalStr = '';\n  let decimalNum = 0;\n  let decimalNumStr = '';\n  let decimalNumStr2 = '';\n  let decimalNumStr3 = '';\n  let decimalNumStr4 = '';\n  let decimalNumStr5 = '';\n  let decimalNumStr6 = '';\n  let decimalNumStr7 = '';\n  let decimalNumStr8 = '';\n  let decimalNumStr9 = '';\n  let decimalNumStr10 = '';\n  let decimalNumStr11 = '';\n  let decimalNumStr12 = '';\n  let decimalNumStr13 = '';\n  let decimalNumStr14 = '';\n  let decimalNumStr15 = '';\n  let decimalNumStr16 = '';\n  let decimalNumStr17 = '';\n  let decimalNumStr18 = '';\n  let decimalNumStr19 = '';\n  let decimalNumStr20 = '';\n  let decimalNumStr21 = '';\n  let decimalNumStr22 = '';\n  let decimalNumStr23 = '';\n  let decimalNumStr24 = '';\n  let decimalNumStr25 = '';\n  let decimalNumStr26 = '';\n  let decimalNumStr27 = '';\n  let decimalNumStr28 = '';\n  let decimalNumStr29 = '';\n  let decimalNumStr30 = '';\n  let decimalNumStr31 = '';\n  let decimalNumStr32 = '';\n  let decimalNumStr33 = '';\n  let decimalNumStr34 = '';\n  let decimalNumStr35 = '';\n  let decimalNumStr36 = '';\n  let decimalNumStr37 = '';\n  let decimalNumStr38 = '';\n  let decimalNumStr39 = '';\n  let decimalNumStr40 = '';\n  let decimalNumStr41 = '';\n  let decimalNumStr42 = '';\n  let decimalNumStr43 = '';\n  let decimalNumStr44 = '';\n  let decimalNumStr45 = '';\n  let decimalNumStr46 = '';\n  let decimalNumStr47 = '';\n  let decimalNumStr48 = '';\n  let decimalNumStr49 = '';\n  let decimalNumStr50 = '';\n  let decimalNumStr51 = '';\n  let decimalNumStr52 = '';\n  let decimalNumStr53 = '';\n  let decimalNumStr54 = '';\n  let decimalNumStr55 = '';\n  let decimalNumStr56 = '';\n  let decimalNumStr57 = '';\n  let decimalNumStr58 = '';\n  let decimalNumStr59 = '';\n  let decimalNumStr60 = '';\n  let decimalNumStr61 = '';\n  let decimalNumStr62 = '';\n  let decimalNumStr63 = '';\n  let decimalNumStr64 = '';\n  let decimalNumStr65 = '';\n  let decimalNumStr66 = '';\n  let decimalNumStr67 = '';\n  let decimalNumStr68 = '';\n  let decimalNumStr69 = '';\n  let decimalNumStr70 = '';\n  let decimalNumStr71 = '';\n  let decimalNumStr72 = '';\n  let decimalNumStr73 = '';\n  let decimalNumStr74 = '';\n  let decimalNumStr75 = '';\n  let decimalNumStr76 = '';\n  let decimalNumStr77 = '';\n  let decimalNumStr78 = '';\n  let decimalNumStr79 = '';\n  let decimalNumStr80 = '';\n  let decimalNumStr81 = '';\n  let decimalNumStr82 = '';\n  let decimalNumStr83 = '';\n  let decimalNumStr84 = '';\n  let decimalNumStr85 = '';\n  let decimalNumStr86 = '';\n  let decimalNumStr87 = '';\n  let decimalNumStr88 = '';\n  let decimalNumStr89 = '';\n  let decimalNumStr90 = '';\n  let decimalNumStr91 = '';\n  let decimalNumStr92 = '';\n  let decimalNumStr93 = '';\n  let decimalNumStr94 = '';\n  let decimalNumStr95 = '';\n  let decimalNumStr96 = '';\n  let decimalNumStr97 = '';\n  let decimalNumStr98 = '';\n  let decimalNumStr99 = '';\n  let decimalNumStr100 = '';\n  let decimalNumStr101 = '';\n  let decimalNumStr102 = '';\n  let decimalNumStr103 = '';\n  let decimalNumStr104 = '';\n  let decimalNumStr105 = '';\n  let decimalNumStr106 = '';\n  let decimalNumStr107 = '';\n  let decimalNumStr108 = '';\n  let decimalNumStr109 = '';\n  let decimalNumStr110 = '';\n  let decimalNumStr111 = '';\n  let decimalNumStr112 = '';\n  let decimalNumStr113 = '';\n  let decimalNumStr114 = '';\n  let decimalNumStr115 = '';\n  let decimalNumStr116 = '';\n  let decimalNumStr117 = '';\n  let decimalNumStr118 = '';\n  let decimalNumStr119 = '';\n  let decimalNumStr120 = '';\n  let decimalNumStr121 = '';\n  let decimalNumStr122 = '';\n  let decimalNumStr123 = '';\n  let decimalNumStr124 = '';\n  let decimalNumStr125 = '';\n  let decimalNumStr126 = '';\n  let decimalNumStr127 = '';\n  let decimalNumStr128 = '';\n  let decimalNumStr129 = '';\n  let decimalNumStr130 = '';\n  let decimalNumStr131 = '';\n  let decimalNumStr132 = '';\n  let decimalNumStr133 = '';\n  let decimalNumStr134 = '';\n  let decimalNumStr135 = '';\n  let decimalNumStr136 = '';\n  let decimalNumStr137 = '';\n  let decimalNumStr138 = '';\n  let decimalNumStr139 = '';\n  let decimalNumStr140 = '';\n  let decimalNumStr141 = '';\n  let decimalNumStr142 = '';\n  let decimalNumStr143 = '';\n  let decimalNumStr144 = '';\n  let decimalNumStr145 = '';\n  let decimalNumStr146 = '';\n  let decimalNumStr147 = '';\n  let decimalNumStr148 = '';\n  let decimalNumStr149 = '';\n  let decimalNumStr150 = '';\n  let decimalNumStr151 = '';\n  let decimalNumStr152 = '';\n  let decimalNumStr153 = '';\n  let decimalNumStr154 = '';\n  let decimalNumStr155 = '';\n  let decimalNumStr156 = '';\n  let decimalNumStr157 = '';\n  let decimalNumStr158 = '';\n  let decimalNumStr159 = '';\n  let decimalNumStr160 = '';\n  let decimalNumStr161 = '';\n  let decimalNumStr162 = '';\n  let decimalNumStr163 = '';\n  let decimalNumStr164 = '';\n  let decimalNumStr165 = '';\n  let decimalNumStr166 = '';\n  let decimalNumStr167 = '';\n  let decimalNumStr168 = '';\n  let decimalNumStr169 = '';\n  let decimalNumStr170 = '';\n  let decimalNumStr171 = '';\n  let decimalNumStr172 = '';\n  let decimalNumStr173 = '';\n  let decimalNumStr174 = '';\n  let decimalNumStr175 = '';\n  let decimalNumStr176 = '';\n  let decimalNumStr177 = '';\n  let decimalNumStr178 = '';\n  let decimalNumStr179 = '';\n  let decimalNumStr180 = '';\n  let decimalNumStr181 = '';\n  let decimalNumStr182 = '';\n  let decimalNumStr183 = '';\n  let decimalNumStr184 = '';\n  let decimalNumStr185 = '';\n  let decimalNumStr186 = '';\n  let decimalNumStr187 = '';\n  let decimalNumStr188 = '';\n  let decimalNumStr189 = '';\n  let decimalNumStr190 = '';\n  let decimalNumStr191 = '';\n  let decimalNumStr192 = '';\n  let decimalNumStr193 = '';\n  let decimalNumStr194 = '';\n  let decimalNumStr195 = '';\n  let decimalNumStr196 = '';\n  let decimalNumStr197 = '';\n  let decimalNumStr198", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProducts", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return { sum, product };\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order.\n  >>> sortedArray([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  */\nconst sortedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr;\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into descending order.\n  >>> sortedArray([4, 3, 2, 1])\n  [3, 2, 4, 1]\n  */\nconst reversedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr;\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order and in reverse order.\n  >>> sortedArray([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  */\nconst reversedSortedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.sort((a, b) => b - a);\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order and in reverse order and in ascending order.\n  >>> sortedArray([4, 3, 2, 1])\n  [3, 2, 4, 1]\n  */\nconst reversedSortedReversedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.sort((a, b) => b - a);\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order and in reverse order and in descending order.\n  >>> sortedArray([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  */\nconst sortedReversedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.sort((a, b) => b - a);\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order and in reverse order and in descending order and in ascending order.\n  >>> sortedArray([4, 3, 2, 1])\n  [3, 2, 4, 1]\n  */\nconst sortedReversedSortedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.sort((a, b) => b - a);\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order and in reverse order and in descending order and in ascending order and in reverse order.\n  >>> sortedArray([4, 3, 2, 1])\n  [3, 2, 4, 1]\n  */\nconst sortedReversedSortedReversedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.sort((a, b) => b - a);\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order and in reverse order and in ascending order and in descending order and in reverse order and in ascending order.\n  >>> sortedArray([4, 3, 2, 1])\n  [3, 2, 4, 1]\n  */\nconst sortedReversedSortedReversedSortedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.sort((a, b) => b - a);\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order and in reverse order and in ascending order and in descending order and in reverse order and in ascending order and in reverse order.\n  >>> sortedArray([4, 3, 2, 1])\n  [3, 2, 4, 1]\n  */\nconst sortedReversedSortedReversedSortedReversedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.sort((a, b) => b - a);\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order and in reverse order and in ascending order and in descending order and in reverse order and in ascending order and in reverse order.\n  >>> sortedArray([4, 3, 2, 1])\n  [3, 2, 4, 1]\n  */\nconst sortedReversedSortedReversedSortedReversedSortedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.sort((a, b) => b - a);\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order and in reverse order and in ascending order and in descending order and in reverse order and in ascending order and in reverse order.\n  >>> sortedArray([4, 3, 2, 1])\n  [3, 2, 4, 1]\n  */\nconst sortedReversedSortedReversedSortedReversedSortedReversedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.sort((a, b) => b - a);\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order and in reverse order and in ascending order and in descending order and in reverse order and in ascending order and in reverse order.\n  >>> sortedArray([4, 3, 2, 1])\n  [3, 2, 4, 1]\n  */\nconst sortedReversedSortedReversedSortedReversedSortedReversedSortedReversedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.sort((a, b) => b - a);\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order and in reverse order and in ascending order and in descending order and in reverse order and in ascending order and in reverse order.\n  >>> sortedArray([4, 3, 2, 1])\n  [3, 2, 4, 1]\n  */\nconst sortedReversedSortedReversedSortedReversedSortedReversedSortedReversedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.sort((a, b) => b - a);\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order and in reverse order and in ascending order and in descending order and in reverse order and in ascending order and in reverse order.\n  >>> sortedArray([4, 3, 2, 1])\n  [3, 2, 4, 1]\n  */\nconst sortedReversedSortedReversedSortedReversedSortedReversedSortedReversedArray = (arr) => {\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.sort((a, b) => b - a);\n};\n\n/* Given a sorted array of integers, return an array of the same length with all elements sorted into ascending order and in ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappiest", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  let isHappy = true;\n  let count = 0;\n  let isHappyCount = 0;\n  let isHappyCount2 = 0;\n  let isHappyCount3 = 0;\n  let isHappyCount4 = 0;\n  let isHappyCount5 = 0;\n  let isHappyCount6 = 0;\n  let isHappyCount7 = 0;\n  let isHappyCount8 = 0;\n  let isHappyCount9 = 0;\n  let isHappyCount10 = 0;\n  let isHappyCount11 = 0;\n  let isHappyCount12 = 0;\n  let isHappyCount13 = 0;\n  let isHappyCount14 = 0;\n  let isHappyCount15 = 0;\n  let isHappyCount16 = 0;\n  let isHappyCount17 = 0;\n  let isHappyCount18 = 0;\n  let isHappyCount19 = 0;\n  let isHappyCount20 = 0;\n  let isHappyCount21 = 0;\n  let isHappyCount22 = 0;\n  let isHappyCount23 = 0;\n  let isHappyCount24 = 0;\n  let isHappyCount25 = 0;\n  let isHappyCount26 = 0;\n  let isHappyCount27 = 0;\n  let isHappyCount28 = 0;\n  let isHappyCount29 = 0;\n  let isHappyCount30 = 0;\n  let isHappyCount31 = 0;\n  let isHappyCount32 = 0;\n  let isHappyCount33 = 0;\n  let isHappyCount34 = 0;\n  let isHappyCount35 = 0;\n  let isHappyCount36 = 0;\n  let isHappyCount37 = 0;\n  let isHappyCount38 = 0;\n  let isHappyCount39 = 0;\n  let isHappyCount40 = 0;\n  let isHappyCount41 = 0;\n  let isHappyCount42 = 0;\n  let isHappyCount43 = 0;\n  let isHappyCount44 = 0;\n  let isHappyCount45 = 0;\n  let isHappyCount46 = 0;\n  let isHappyCount47 = 0;\n  let isHappyCount48 = 0;\n  let isHappyCount49 = 0;\n  let isHappyCount50 = 0;\n  let isHappyCount51 = 0;\n  let isHappyCount52 = 0;\n  let isHappyCount53 = 0;\n  let isHappyCount54 = 0;\n  let isHappyCount55 = 0;\n  let isHappyCount56 = 0;\n  let isHappyCount57 = 0;\n  let isHappyCount58 = 0;\n  let isHappyCount59 = 0;\n  let isHappyCount60 = 0;\n  let isHappyCount61 = 0;\n  let isHappyCount62 = 0;\n  let isHappyCount63 = 0;\n  let isHappyCount64 = 0;\n  let isHappyCount65 = 0;\n  let isHappyCount66 = 0;\n  let isHappyCount67 = 0;\n  let isHappyCount68 = 0;\n  let isHappyCount69 = 0;\n  let isHappyCount70 = 0;\n  let isHappyCount71 = 0;\n  let isHappyCount72 = 0;\n  let isHappyCount73 = 0;\n  let isHappyCount74 = 0;\n  let isHappyCount75 = 0;\n  let isHappyCount76 = 0;\n  let isHappyCount77 = 0;\n  let isHappyCount78 = 0;\n  let isHappyCount79 = 0;\n  let isHappyCount80 = 0;\n  let isHappyCount81 = 0;\n  let isHappyCount82 = 0;\n  let isHappyCount83 = 0;\n  let isHappyCount84 = 0;\n  let isHappyCount85 = 0;\n  let isHappyCount86 = 0;\n  let isHappyCount87 = 0;\n  let isHappyCount88 = 0;\n  let isHappyCount89 = 0;\n  let isHappyCount90 = 0;\n  let isHappyCount91 = 0;\n  let isHappyCount92 = 0;\n  let isHappyCount93 = 0;\n  let isHappyCount94 = 0;\n  let isHappyCount95 = 0;\n  let isHappyCount96 = 0;\n  let isHappyCount97 = 0;\n  let isHappyCount98 = 0;\n  let isHappyCount99 = 0;\n  let isHappyCount100 = 0;\n  let isHappyCount101 = 0;\n  let isHappyCount102 = 0;\n  let isHappyCount103 = 0;\n  let isHappyCount104 = 0;\n  let isHappyCount105 = 0;\n  let isHappyCount106 = 0;\n  let isHappyCount107 = 0;\n  let isHappyCount108 = 0;\n  let isHappyCount109 = 0;\n  let isHappyCount110 = 0;\n  let isHappyCount111 = 0;\n  let isHappyCount112 = 0;\n  let isHappyCount113 = 0;\n  let isHappyCount114 = 0;\n  let isHappyCount115 = 0;\n  let isHappyCount116 = 0;\n  let isHappyCount117 = 0;\n  let isHappyCount118 = 0;\n  let isHappyCount119 = 0;\n  let isHappyCount120 = 0;\n  let isHappyCount121 = 0;\n  let isHappyCount122 = 0;\n  let isHappyCount123 = 0;\n  let isHappyCount124 = 0;\n  let isHappyCount125 = 0;\n  let isHappyCount126 = 0;\n  let isHappyCount127 = 0;\n  let isHappyCount128 = 0;\n  let isHappyCount129 = 0;\n  let isHappyCount130 = 0;\n  let isHappyCount131 = 0;\n  let isHappyCount132 = 0;\n  let isHappyCount133 = 0;\n  let isHappyCount134 = 0;\n  let isHappyCount135 = 0;\n  let isHappyCount136 = 0;\n  let isHappyCount137 = 0;\n  let isHappyCount138 = 0;\n  let isHappyCount139 = 0;\n  let isHappyCount140 = 0;\n  let isHappyCount141 = 0;\n  let isHappyCount142 = 0;\n  let isHappyCount143 = 0;\n  let isHappyCount144 = 0;\n  let isHappyCount145 = 0;\n  let isHappyCount146 = 0;\n  let isHappyCount147 = 0;\n  let isHappyCount148 = 0;\n  let isHappyCount149 = 0;\n  let isHappyCount150 = 0;\n  let isHappyCount151 = 0;\n  let isHappyCount152 = 0;\n  let isHappyCount153 = 0;\n  let isHappyCount154 = 0;\n  let isHappyCount155 = 0;\n  let isHappyCount156 = 0;\n  let isHappyCount157 = 0;\n  let isHappyCount158 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(parseFloat);\n  const sumOfGrades = gradesArray.reduce((a, b) => a + b, 0);\n  const average = sumOfGrades / gradesArray.length;\n  const letterGrades = gradesArray.map((grade) => {\n    if (grade >= average) {\n      return grade;\n    }\n    return '';\n  });\n  return letterGrades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(parseFloat);\n  const sumOfGrades = gradesArray.reduce((a, b) => a + b, 0);\n  const average = sumOfGrades / gradesArray.length;\n  const letterGrades = gradesArray.map((grade) => {\n    if (grade >= average) {\n      return grade;\n    }\n    return '';\n  });\n  return letterGrades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(parseFloat);\n  const sumOfGrades = gradesArray.reduce((a, b) => a + b, 0);\n  const average = sumOfGrades / gradesArray.length;\n  const letterGrades = gradesArray.map((grade) => {\n    if (grade >= average) {\n      return grade;\n    }\n    return '';\n  });\n  return letterGrades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(parseFloat);\n  const sumOfGrades = gradesArray.reduce((a, b) => a + b, 0);\n  const average = sumOfGrades / gradesArray.length;\n  const letterGrades = gradesArray.map((grade) => {\n    if (grade >= average) {\n      return grade;\n    }\n    return '';\n  });\n  return letterGrades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(parseFloat);\n  const sumOfGrades = gradesArray.reduce((a, b) => a + b, 0);\n  const average = sumOfGrades / gradesArray.length;\n  const letterGrades = gradesArray.map((grade) => {\n    if (grade >= average) {\n      return grade;\n    }\n    return '';\n  });\n  return letterGrades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let factor = 1;\n  while (length >= 2) {\n    factor *= length;\n    if (factor > 1) {\n      if (number % factor === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n    length--;\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == true\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let factor = 3;\n  while (length >= 2) {\n    factor *= length;\n    if (factor > 1) {\n      if (number % factor === 0) {\n        isDivisible = false;\n        break;\n      }\n    }\n    length--;\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == true\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let factor = 5;\n  while (length >= 2) {\n    factor *= length;\n    if (factor > 1) {\n      if (number % factor === 0) {\n        isDivisible = false;\n        break;\n      }\n    }\n    length--;\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == true\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let factor = 7;\n  while (length >= 2) {\n    factor *= length;\n    if (factor > 1) {\n      if (number % factor === 0) {\n        isDivisible = false;\n        break;\n      }\n    }\n    length--;\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisibleBy9('Hello') == true\n  divisibleBy9('abcdcba') == true\n  divisibleBy9('kittens') == true\n  divisibleBy9('orange') == false\n  */\nconst divisibleBy9 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let factor = 9;\n  while (length >= 2) {\n    factor *= length;\n    if (factor > 1) {\n      if (number % factor === 0) {\n        isDivisible = false;\n        break;\n      }\n    }\n    length--;\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == true\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let factor = 11;\n  while (length >= 2) {\n    factor *= length;\n    if (factor > 1) {\n      if (number % factor === 0) {\n        isDivisible = false;\n        break;\n      }\n    }\n    length--;\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == true\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let factor = 13;\n  while (length >= 2) {\n    factor *= length;\n    if (factor > 1) {\n      if (number % factor === 0) {\n        isDivisible = false;\n        break;\n      }\n    }\n    length--;\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('abcdcba') == true\n  divisibleBy15('kittens') == true\n  divisibleBy15('orange') == false\n  */\nconst divisibleBy15 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let factor = 15;\n  while (length >= 2) {\n    factor *= length;\n    if (factor > 1) {\n      if (number % factor === 0) {\n        isDivisible = false;\n        break;\n      }\n    }\n    length--;\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == true\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let factor = 17\n  while (length >= 2) {\n    factor *= length;\n    if (factor > 1) {\n      if (number % factor === 0) {\n        isDivisible = false;\n        break;\n      }\n    }\n    length--;\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('abcdcba') == true\n  divisibleBy19('kittens') == true\n  divisibleBy19('orange') == false\n  */\nconst divisibleBy19 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let factor = 19\n  while (length >= 2) {\n    factor *= length;\n    if (factor > 1) {\n      if (number % factor === 0) {\n        isDivisible = false;\n        break;\n      }\n    }\n    length--;\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 21 or false otherwise\n  Examples\n  divisibleBy21('Hello') == true\n  divisibleBy21('abcdcba') == true\n  divisibleBy21('kittens') == true\n  divisibleBy21('orange') == false\n  */\nconst divisibleBy21 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  let factor = 21;\n  while (length >= 2) {\n    factor *= length;\n    if (factor > 1) {\n      if (number % factor === 0) {\n        isDivisible = false;\n        break;\n      }\n    }\n    length--;\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 2.\n  */\nconst startTwoEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 2; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 3.\n  */\nconst startThreeEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 3; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 4.\n  */\nconst startFourEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 4; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 5.\n  */\nconst startFiveEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 5; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 6.\n  */\nconst startSixEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 6; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 7.\n  */\nconst startSevenEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 7; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 8.\n  */\nconst startEightEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 8; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 9.\n  */\nconst startNineEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 9; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 10.\n  */\nconst startTenEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 10; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 11.\n  */\nconst startElevenEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 11; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 12.\n  */\nconst startTwelveEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 12; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 13.\n  */\nconst startThirteenEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 13; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 14.\n  */\nconst startFourteenEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 14; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 15.\n  */\nconst startFifteenEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 15; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 16.\n  */\nconst startSixteenEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 16; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 17.\n  */\nconst startSeventeenEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 17; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 18.\n  */\nconst startEighteenEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 18; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 19.\n  */\nconst startNineteenEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 19; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 20.\n  */\nconst startTwentyEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 20; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 21.\n  */\nconst startTwentyThirtyEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 21; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 22.\n  */\nconst startTwentyFourtyEnds = (n) => {\n  let count = 0;\n  for (let i = n; i >= 22; i--) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let i = 1;\n  \n  while (N >= 10) {\n    binary = binary.concat(binary(i));\n    N = N / 10;\n    i++;\n  }\n  \n  while (N >= 2) {\n    binary = binary.concat(binary(i));\n    N = N / 2;\n    i++;\n  }\n  \n  while (N >= 1) {\n    binary = binary.concat(binary(i));\n    N = N / 1;\n    i++;\n  }\n  \n  return binary;\n};\n\n/*Given a positive integer N, return the number of leading zeros in its binary representation.\n  \n  Example\n      For N = 1000, the leading zeros in its binary representation will be \"011\".\n      For N = 150, the leading zeros in its binary representation will be \"01110\".\n      For N = 147, the leading zeros in its binary representation will be \"011110\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst countLeadingZeros = (N) => {\n  let count = 0;\n  let binary = \"\";\n  let i = 1;\n  \n  while (N >= 10) {\n    binary = binary.concat(binary(i));\n    N = N / 10;\n    i++;\n  }\n  \n  while (N >= 2) {\n    binary = binary.concat(binary(i));\n    N = N / 2;\n    i++;\n  }\n  \n  while (N >= 1) {\n    binary = binary.concat(binary(i));\n    N = N / 1;\n    i++;\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of trailing zeros in its binary representation.\n  \n  Example\n      For N = 1000, the trailing zeros in its binary representation will be \"011\".\n      For N = 150, the trailing zeros in its binary representation will be \"01110\".\n      For N = 147, the trailing zeros in its binary representation will be \"011110\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst countTrailingZeros = (N) => {\n  let count = 0;\n  let binary = \"\";\n  let i = 1;\n  \n  while (N >= 10) {\n    binary = binary.concat(binary(i));\n    N = N / 10;\n    i++;\n  }\n  \n  while (N >= 2) {\n    binary = binary.concat(binary(i));\n    N = N / 2;\n    i++;\n  }\n  \n  while (N >= 1) {\n    binary = binary.concat(binary(i));\n    N = N / 1;\n    i++;\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of trailing zeros in its binary representation.\n  \n  Example\n      For N = 1000, the trailing zeros in its binary representation will be \"011\".\n      For N = 150, the trailing zeros in its binary representation will be \"01110\".\n      For N = 147, the trailing zeros in its binary representation will be \"011110\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst countTrailingZeros_2 = (N) => {\n  let count = 0;\n  let binary = \"\";\n  let i = 1;\n  \n  while (N >= 10) {\n    binary = binary.concat(binary(i));\n    N = N / 10;\n    i++;\n  }\n  \n  while (N >= 2) {\n    binary = binary.concat(binary(i));\n    N = N / 2;\n    i++;\n  }\n  \n  while (N >= 1) {\n    binary = binary.concat(binary(i));\n    N = N / 1;\n    i++;\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of leading zeros in its binary representation.\n  \n  Example\n      For N = 1000, the leading zeros in its binary representation will be \"011\".\n      For N = 150, the leading zeros in its binary representation will be \"01110\".\n      For N = 147, the leading zeros in its binary representation will be \"011110\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst countLeadingZeros_3 = (N) => {\n  let count = 0;\n  let binary = \"\";\n  let i = 1;\n  \n  while (N >= 10) {\n    binary = binary.concat(binary(i));\n    N = N / 10;\n    i++;\n  }\n  \n  while (N >= 2) {\n    binary = binary.concat(binary(i));\n    N = N / 2;\n    i++;\n  }\n  \n  while (N >= 1) {\n    binary = binary.concat(binary(i));\n    N = N / 1;\n    i++;\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of trailing zeros in its binary representation.\n  \n  Example\n      For N = 1000, the trailing zeros in its binary representation will be \"011\".\n      For N = 150, the trailing zeros in its binary representation will be \"01110\".\n      For N = 147, the trailing zeros in its binary representation will be \"011110\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst countTrailingZeros_4 = (N) => {\n  let count = 0;\n  let binary = \"\";\n  let i = 1;\n  \n  while (N >= 10) {\n    binary = binary.concat(binary(i));\n    N = N / 10;\n    i++;\n  }\n  \n  while (N >= 2) {\n    binary = binary.concat(binary(i));\n    N = N / 2;\n    i++;\n  }\n  \n  while (N >= 1) {\n    binary = binary.concat(binary(i));\n    N = N / 1;\n    i++;\n  }\n  \n  return count;\n};\n\n/*Given a positive integer N, return the number of trailing zeros in its binary representation.\n  \n  Example\n      For N = 1000, the trailing zeros in its binary representation will be \"011\".\n      For N = 150, the trailing zeros in its binary representation will be \"01110\".\n      For N = 147, the trailing zeros in its binary representation will be \"011110\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst countTrailingZeros_5 = (N) => {\n  let count = 0;\n  let binary = \"\";\n  let i = 1;\n  \n  while (N >= 10) {\n    binary = binary.concat(binary(i));\n    N = N / 10;\n    i++;\n  }\n  \n  while (N >= ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. subtracting the even elements that are at odd indices..\n\n\n  Examples:\n      subtracting([4, 2, 6, 7]) ==> 4 \n  */\nconst subtracting = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even--;\n    } else {\n      odd++;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. multiplying the even elements that are at odd indices..\n\n\n  Examples:\n      multiplying([4, 2, 6, 7]) ==> 6 \n  */\nconst multiplying = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even *= 2;\n    } else {\n      odd *= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, 7]) ==> 2 \n  */\nconst dividing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even /= 2;\n    } else {\n      odd /= 2;\n    }\n  }\n  return even + odd;\n};\n\n/*Given a non-empty list of integers lst. dividing the even elements that are at odd indices..\n\n\n  Examples:\n      dividing([4, 2, 6, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antisShuffles", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let newStr = '';\n  let newStrArr = [];\n  let newStrArrArr = [];\n  let newStrArrArrArr = [];\n  let newStrArrArrArrArr = [];\n  let newStrArrArrArrArrArr = [];\n  let newStrArrArrArrArrArrArrArr = [];\n  let newStrArrArrArrArrArrArrArrArrArr = [];\n  let newStrArrArrArrArrArrArrArrArrArrArrArr = [];\n  let newStrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRows", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const result = []\n  const rows = []\n  let row = 0\n  let col = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLength = 0\n  let colLength = 0\n  let rowIndexLength = 0\n  let colIndexLength = 0\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp;\n\n  while (i < array.length) {\n    sum = sum + array[i];\n    if (sum % 2 === 0) {\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n\n  return array;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the same length as the given array,\n * but where the element at index i contains the value array[i].\n * You may assume that the array is non-empty and sorted. You must not modify the given array.\n\n  Example:\n  * let nums = [2, 5, 7, 1, 3, 6];\n  * let res = numsSortedBy(nums, nums.length - 1);\n  * // res = [1, 3, 6, 5, 2, 7]\n  */\nconst numsSortedBy = (array, len) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let temp;\n\n  while (i < array.length) {\n    sum = array[i];\n    if (sum % 2 === 0) {\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n\n  while (j < len) {\n    temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n    j++;\n    i++;\n  }\n\n  return array;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the same length as the given array,\n * but where the element at index i contains the value array[i].\n * You may assume that the array is non-empty and sorted. You must not modify the given array.\n\n  Example:\n  * let nums = [2, 5, 7, 1, 3, 6];\n  * let res = numsSortedReversed(nums, nums.length - 1);\n  * // res = [6, 5, 2, 7, 1, 3]\n  */\nconst numsSortedReversed = (array, len) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let temp;\n\n  while (i < array.length) {\n    sum = array[i];\n    if (sum % 2 === 0) {\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n\n  while (j < len) {\n    temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n    j++;\n    i++;\n  }\n\n  return array;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the same length as the given array,\n * but where the element at index i contains the value array[i].\n * You may assume that the array is non-empty and sorted. You must not modify the given array.\n\n  Example:\n  * let nums = [2, 5, 7, 1, 3, 6];\n  * let res = numsSortedReversedReversed(nums, nums.length - 1);\n  * // res = [3, 6, 5, 2, 7, 1]\n  */\nconst numsSortedReversedReversed = (array, len) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let temp;\n\n  while (i < array.length) {\n    sum = array[i];\n    if (sum % 2 === 0) {\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n\n  while (j < len) {\n    temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n    j++;\n    i++;\n  }\n\n  return array;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the same length as the given array,\n * but where the element at index i contains the value array[i].\n * You may assume that the array is non-empty and sorted. You must not modify the given array.\n\n  Example:\n  * let nums = [2, 5, 7, 1, 3, 6];\n  * let res = numsSortedReversedReversedReversed(nums, nums.length - 1);\n  * // res = [1, 3, 6, 5, 2, 7]\n  */\nconst numsSortedReversedReversedReversed = (array, len) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let temp;\n\n  while (i < array.length) {\n    sum = array[i];\n    if (sum % 2 === 0) {\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n\n  while (j < len) {\n    temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n    j++;\n    i++;\n  }\n\n  return array;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the same length as the given array,\n * but where the element at index i contains the value array[i].\n * You may assume that the array is non-empty and sorted. You must not modify the given array.\n\n  Example:\n  * let nums = [2, 5, 7, 1, 3, 6];\n  * let res = numsSortedReversedReversedReversedReversed(nums, nums.length - 1);\n  * // res = [1, 3, 6, 5, 2, 7]\n  */\nconst numsSortedReversedReversedReversedReversed = (array, len) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let temp;\n\n  while (i < array.length) {\n    sum = array[i];\n    if (sum % 2 === 0) {\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n\n  while (j < len) {\n    temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n    j++;\n    i++;\n  }\n\n  return array;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the same length as the given array,\n * but where the element at index i contains the value array[i].\n * You may assume that the array is non-empty and sorted. You must not modify the given array.\n\n  Example:\n  * let nums = [2, 5, 7, 1, 3, 6];\n  * let res = numsSortedReversedReversedReversedReversedReversed(nums, nums.length - 1);\n  * // res = [1, 3, 6, 5, 2, 7]\n  */\nconst numsSortedReversedReversedReversedReversedReversed = (array, len) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let temp;\n\n  while (i < array.length) {\n    sum = array[i];\n    if (sum % 2 === 0) {\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n\n  while (j < len) {\n    temp = array[j];\n    array[j] = array[i];\n    array[i] = temp;\n    j++;\n    i++;\n  }\n\n  return array;\n};\n\n/**\n * Given an array of non-negative integers, return an array of the same length as the given array,\n * but where the element at index i contains the value array[i].\n * You may assume that the array is non-empty and sorted. You must not modify the given array.\n\n  Example:\n  * let nums = [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    rotated += alphabet[alphabet.indexOf(s[i])];\n  }\n  return rotated;\n};\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    rotated += alphabet[alphabet.indexOf(s[i])];\n  }\n  return rotated;\n};\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  rotate('hi') returns 'hi'\n  rotate('asdfghjkl') returns 'asdfghjkl'\n  rotate('gf') returns 'gfghjkl'\n  rotate('et') returns 'et'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < s.length; i++) {\n    rotated += alphabet[alphabet.indexOf(s[i])];\n  }\n  return rotated;\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string. \n  The string should be trimmed from the beginning and end of the string. \n  For example:\n  trim('hi') returns 'hi'\n  trim('asdfghjkl') returns 'asdfghjkl'\n  trim('gf') returns 'gfghjkl'\n  trim('et') returns 'et'\n  */\nconst trim = s => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let trimmed = '';\n  for (let i = 0; i < s.length; i++) {\n    if (alphabet.indexOf(s[i]) === 0) {\n      trimmed += s.substring(0,i);\n    }\n    if (alphabet.indexOf(s[i]) === alphabet.length - 1) {\n      trimmed += s.substring(i+1);\n    }\n  }\n  return trimmed;\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string. \n  The string should be trimmed from the beginning and end of the string. \n  For example:\n  trim('hi') returns 'hi'\n  trim('asdfghjkl') returns 'asdfghjkl'\n  trim('gf') returns 'gfghjkl'\n  trim('et') returns 'et'\n  */\nconst trimEnd = s => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let trimmed = '';\n  for (let i = 0; i < s.length; i++) {\n    if (alphabet.indexOf(s[i]) === alphabet.length - 1) {\n      trimmed += s.substring(0,i);\n    }\n  }\n  return trimmed;\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string. \n  The string should be trimmed from the beginning and end of the string. \n  For example:\n  trim('hi') returns 'hi'\n  trim('asdfghjkl') returns 'asdfghjkl'\n  trim('gf') returns 'gfghjkl'\n  trim('et') returns 'et'\n  */\nconst trimStart = s => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let trimmed = '';\n  for (let i = 0; i < s.length; i++) {\n    if (alphabet.indexOf(s[i]) === 0) {\n      trimmed += s.substring(i);\n    }\n  }\n  return trimmed;\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string. \n  The string should be trimmed from the beginning and end of the string. \n  For example:\n  trim('hi') returns 'hi'\n  trim('asdfghjkl') returns 'asdfghjkl'\n  trim('gf') returns 'gfghjkl'\n  trim('et') returns 'et'\n  */\nconst trimBoth = s => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let trimmed = '';\n  for (let i = 0; i < s.length; i++) {\n    if (alphabet.indexOf(s[i]) === 0) {\n      trimmed += s.substring(0,i);\n    }\n    if (alphabet.indexOf(s[i]) === alphabet.length - 1) {\n      trimmed += s.substring(i+1);\n    }\n  }\n  return trimmed;\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string. \n  The string should be trimmed from the beginning and end of the string. \n  For example:\n  trim('hi') returns 'hi'\n  trim('asdfghjkl') returns 'asdfghjkl'\n  trim('gf') returns 'gfghjkl'\n  trim('et') returns 'et'\n  */\nconst trimBothEnd = s => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let trimmed = '';\n  for (let i = 0; i < s.length; i++) {\n    if (alphabet.indexOf(s[i]) === alphabet.length - 1) {\n      trimmed += s.substring(0,i);\n    }\n  }\n  return trimmed;\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string. \n  The string should be trimmed from the beginning and end of the string. \n  For example:\n  trim('hi') returns 'hi'\n  trim('asdfghjkl') returns 'asdfghjkl'\n  trim('gf') returns 'gfghjkl'\n  trim('et') returns 'et'\n  */\nconst trimBothStart = s => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let trimmed = '';\n  for (let i = 0; i < s.length; i++) {\n    if (alphabet.indexOf(s[i]) === 0) {\n      trimmed += s.substring(i);\n    }\n  }\n  return trimmed;\n};\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string. \n  The string should be trimmed from the beginning and end of the string. \n  For example:\n  trim('hi') returns 'hi'\n  trim('asdfghjkl') returns 'asdfghjkl'\n  trim('gf') returns 'gfghjkl'\n  trim('et') returns 'et'\n  */\nconst trimBothBoth = s => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let trimmed = '';\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      result.push(min);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling average element found until given moment\n  in the sequence.\n  >>> rollingAverage([1, 2, 3, 2, 3, 4, 2])\n  1.5\n  */\nconst rollingAverage = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  sum = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / count);\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStandardDeviation([1, 2, 3, 2, 3, 4, 2])\n  1.4142135623730951\n  */\nconst rollingStandardDeviation = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  sum = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(sum - numbers[i], 2));\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMinimum([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMinimum = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > min) {\n      min = numbers[i];\n      result.push(min);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMaximum([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMaximum = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMinimum([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMinimum = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > min) {\n      min = numbers[i];\n      result.push(min);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMaximum([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMaximum = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMinimum([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMinimum = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > min) {\n      min = numbers[i];\n      result.push(min);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMaximum([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMaximum = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMinimum([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMinimum = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > min) {\n      min = numbers[i];\n      result.push(min);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMaximum([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMaximum = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMinimum([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMinimum = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > min) {\n      min = numbers[i];\n      result.push(min);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMaximum([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMaximum = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMinimum([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMinimum = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > min) {\n      min = numbers[i];\n      result.push(min);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMaximum([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMaximum = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMinimum([1, 2, 3, 2, 3, 4, 2])\n  1\n  */\nconst rollingMinimum = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > min) {\n      min = numbers[i];\n      result.push(min);\n    }\n  }\n  return result;\n};\n\n/* Given a sorted array of numbers, return its roll", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  const [first,...rest] = lst;\n  if (rest.length === 0) {\n    return null;\n  }\n  const [second,...rest1] = rest;\n  if (rest1.length === 0) {\n    return second;\n  }\n  return first;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  findSmallest([1, 2, 3, 4, 5]) == 1\n  findSmallest([5, 1, 4, 3, 2]) == 1\n  findSmallest([]) == null\n  findSmallest([1, 1]) == null\n  */\nconst findSmallest = (lst) => {\n  const [first,...rest] = lst;\n  if (rest.length === 0) {\n    return null;\n  }\n  const [second,...rest1] = rest;\n  if (rest1.length === 0) {\n    return second;\n  }\n  return first;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargest() that returns the largest element of the list.\n  Return null if there is no such element.\n  \n  findLargest([1, 2, 3, 4, 5]) == 3\n  findLargest([5, 1, 4, 3, 2]) == 3\n  findLargest([]) == null\n  findLargest([1, 1]) == null\n  */\nconst findLargest = (lst) => {\n  const [first,...rest] = lst;\n  if (rest.length === 0) {\n    return null;\n  }\n  const [second,...rest1] = rest;\n  if (rest1.length === 0) {\n    return second;\n  }\n  return first;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findBiggest() that returns the biggest element of the list.\n  Return null if there is no such element.\n  \n  findBiggest([1, 2, 3, 4, 5]) == 5\n  findBiggest([5, 1, 4, 3, 2]) == 5\n  findBiggest([]) == null\n  findBiggest([1, 1]) == null\n  */\nconst findBiggest = (lst) => {\n  const [first,...rest] = lst;\n  if (rest.length === 0) {\n    return null;\n  }\n  const [second,...rest1] = rest;\n  if (rest1.length === 0) {\n    return second;\n  }\n  return first;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  findSmallest([1, 2, 3, 4, 5]) == 1\n  findSmallest([5, 1, 4, 3, 2]) == 1\n  findSmallest([]) == null\n  findSmallest([1, 1]) == null\n  */\nconst findSmallest = (lst) => {\n  const [first,...rest] = lst;\n  if (rest.length === 0) {\n    return null;\n  }\n  const [second,...rest1] = rest;\n  if (rest1.length === 0) {\n    return second;\n  }\n  return first;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargest() that returns the largest element of the list.\n  Return null if there is no such element.\n  \n  findLargest([1, 2, 3, 4, 5]) == 3\n  findLargest([5, 1, 4, 3, 2]) == 3\n  findLargest([]) == null\n  findLargest([1, 1]) == null\n  */\nconst findLargest = (lst) => {\n  const [first,...rest] = lst;\n  if (rest.length === 0) {\n    return null;\n  }\n  const [second,...rest1] = rest;\n  if (rest1.length === 0) {\n    return second;\n  }\n  return first;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findBiggest() that returns the biggest element of the list.\n  Return null if there is no such element.\n  \n  findBiggest([1, 2, 3, 4, 5]) == 5\n  findBiggest([5, 1, 4, 3, 2]) == 5\n  findBiggest([]) == null\n  findBiggest([1, 1]) == null\n  */\nconst findBiggest = (lst) => {\n  const [first,...rest] = lst;\n  if (rest.length === 0) {\n    return null;\n  }\n  const [second,...rest1] = rest;\n  if (rest1.length === 0) {\n    return second;\n  }\n  return first;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  findSmallest([1, 2, 3, 4, 5]) == 1\n  findSmallest([5, 1, 4, 3, 2]) == 1\n  findSmallest([]) == null\n  findSmallest([1, 1]) == null\n  */\nconst findSmallest = (lst) => {\n  const [first,...rest] = lst;\n  if (rest.length === 0) {\n    return null;\n  }\n  const [second,...rest1] = rest;\n  if (rest1.length === 0) {\n    return second;\n  }\n  return first;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargest() that returns the largest element of the list.\n  Return null if there is no such element.\n  \n  findLargest([1, 2, 3, 4, 5]) == 3\n  findLargest([5, 1, 4, 3, 2]) == 3\n  findLargest([]) == null\n  findLargest([1, 1]) == null\n  */\nconst findLargest = (lst) => {\n  const [first,...rest] = lst;\n  if (rest.length === 0) {\n    return null;\n  }\n  const [second,...rest1] = rest;\n  if (rest1.length === 0) {\n    return second;\n  }\n  return first;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findBiggest() that returns the biggest element of the list.\n  Return null if there is no such element.\n  \n  findBiggest([1, 2, 3, 4, 5]) == 5\n  findBiggest([5, 1, 4, 3, 2]) == 5\n  findBiggest([]) == null\n  findBiggest([1, 1]) == null\n  */\nconst findBiggest = (lst) => {\n  const [first,...rest] = lst;\n  if (rest.length === 0) {\n    return null;\n  }\n  const [second,...rest1] = rest;\n  if (rest1.length === 0) {\n    return second;\n  }\n  return first;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findSmallest() that returns the 1st smallest element of the list.\n  Return null if there is no such element.\n  \n  findSmallest([1, 2, 3, 4, 5]) == 1\n  findSmallest([5, 1, 4, 3, 2]) == 1\n  findSmallest([]) == null\n  findSmallest([1, 1]) == null\n  */\nconst findSmallest = (lst) => {\n  const [first,...rest] = lst;\n  if (rest.length === 0) {\n    return null;\n  }\n  const [second,...rest1] = rest;\n  if (rest1.length === 0) {\n    return second;\n  }\n  return first;\n};\n\n/*\n  You are given a list of integers.\n  Write a function findLargest() that returns the largest element of the list.\n  Return null if there is no such element.\n  \n  findLargest([1, 2, 3, 4, 5]) == 3\n  findLargest([5, 1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBore", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let bore = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I' || word === '!' || word === '?') {\n      bore++;\n    }\n  });\n  return bore;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least once in the\n  entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  3\n  */\nconst commonWords = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings. A common substring is a substring that occurs at\n  least once in the entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonSubstrings(\"Hello world\")\n  2\n  >>> commonSubstrings(\"The sky is blue. The sun is shining. I love this weather\")\n  3\n  */\nconst commonSubstrings = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common prefixes. A common prefix is a prefix that occurs at least once\n  in the entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonPrefixes(\"Hello world\")\n  2\n  >>> commonPrefixes(\"The sky is blue. The sun is shining. I love this weather\")\n  3\n  */\nconst commonPrefixes = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common suffixes. A common suffix is a suffix that occurs at least once\n  in the entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonSuffixes(\"Hello world\")\n  2\n  >>> commonSuffixes(\"The sky is blue. The sun is shining. I love this weather\")\n  3\n  */\nconst commonSuffixes = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common prefixes and suffixes. A common prefix is a prefix that occurs\n  at least once in the entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonPrefixesAndSuffixes(\"Hello world\")\n  2\n  >>> commonPrefixesAndSuffixes(\"The sky is blue. The sun is shining. I love this weather\")\n  3\n  */\nconst commonPrefixesAndSuffixes = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings and prefixes. A common substring is a substring that\n  occurs at least once in the entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonSubstringsAndPrefixes(\"Hello world\")\n  2\n  >>> commonSubstringsAndPrefixes(\"The sky is blue. The sun is shining. I love this weather\")\n  3\n  */\nconst commonSubstringsAndPrefixes = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings and suffixes. A common suffix is a suffix that occurs\n  at least once in the entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonSubstringsAndSuffixes(\"Hello world\")\n  2\n  >>> commonSubstringsAndSuffixes(\"The sky is blue. The sun is shining. I love this weather\")\n  3\n  */\nconst commonSubstringsAndSuffixes = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings and prefixes. A common prefix is a prefix that occurs\n  at least once in the entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonPrefixesAndSuffixes(\"Hello world\")\n  2\n  >>> commonPrefixesAndSuffixes(\"The sky is blue. The sun is shining. I love this weather\")\n  3\n  */\nconst commonPrefixesAndSuffixesAndSubstrings = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings and suffixes. A common suffix is a suffix that occurs\n  at least once in the entire string. Words are delimited by spaces.\n \n  For example:\n  >>> commonSubstringsAndPrefixesAndSuffixes(\"Hello world\")\n  2\n  >>> commonSubstringsAndPrefixesAndSuffixes(\"The sky is blue. The sun is shining. I love this weather\")\n  3\n  */\nconst commonSubstringsAndPrefixesAndSuffixesAndSubstrings = (S) => {\n  let wordCount = 0;\n  let words = S.split(' ');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      wordCount++;\n    }\n  });\n  return wordCount;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common substrings and prefixes. A common prefix ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ false\n  anyInt(3, 2, 2) ➞ true\n  anyInt(3, -2, 1) ➞ false\n  anyInt(3.6, -2.2, 2) ➞ true\n  */\nconst anyIntOrZero = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyIntOrZero(5, 2, 7) ➞ true\n  anyIntOrZero(3, 2, 2) ➞ false\n  anyIntOrZero(3, -2, 1) ➞ false\n  anyIntOrZero(3.6, -2.2, 2) ➞ true\n  */\nconst anyIntOrZeroOrZero = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZero(3, 2, 2) ➞ false\n  anyIntOrZeroOrZero(3, -2, 1) ➞ false\n  anyIntOrZeroOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZeroOrZero = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZeroOrZero(3, 2, 2) ➞ false\n  anyIntOrZeroOrZeroOrZero(3, -2, 1) ➞ false\n  anyIntOrZeroOrZeroOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZeroOrZeroOrZero = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZeroOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZero(3, 2, 2) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZero(3, -2, 1) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZeroOrZeroOrZeroOrZero = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3, 2, 2) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3, -2, 1) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3, 2, 2) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3, -2, 1) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(5, 2, 7) ➞ true\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3, 2, 2) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3, -2, 1) ➞ false\n  anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (x, y, z) => {\n  if (x === y && x === z) {\n    return true\n  }\n  if (x === y || x === z || y === z) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    for(let j = 0; j < vowels.length; j++) {\n      if(letter == vowels[j]) {\n        letter = letter.toUpperCase();\n      }\n    }\n    \n    encoded += letter;\n  }\n  \n  return encoded;\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    for(let j = 0; j < vowels.length; j++) {\n      if(letter == vowels[j]) {\n        letter = letter.toLowerCase();\n      }\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAll = (message) => {\n  let decoded = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    for(let j = 0; j < vowels.length; j++) {\n      if(letter == vowels[j]) {\n        letter = letter.toLowerCase();\n      }\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decodeAll('TGST')\n  'test'\n  >>> decodeAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAll = (message) => {\n  let decoded = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    for(let j = 0; j < vowels.length; j++) {\n      if(letter == vowels[j]) {\n        letter = letter.toLowerCase();\n      }\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decodeAllAll('TGST')\n  'test'\n  >>> decodeAllAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAll = (message) => {\n  let decoded = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    for(let j = 0; j < vowels.length; j++) {\n      if(letter == vowels[j]) {\n        letter = letter.toLowerCase();\n      }\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decodeAllAllAll('TGST')\n  'test'\n  >>> decodeAllAllAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAllAll = (message) => {\n  let decoded = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    for(let j = 0; j < vowels.length; j++) {\n      if(letter == vowels[j]) {\n        letter = letter.toLowerCase();\n      }\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decodeAllAllAllAll('TGST')\n  'test'\n  >>> decodeAllAllAllAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAllAllAll = (message) => {\n  let decoded = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    for(let j = 0; j < vowels.length; j++) {\n      if(letter == vowels[j]) {\n        letter = letter.toLowerCase();\n      }\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decodeAllAllAllAllAll('TGST')\n  'test'\n  >>> decodeAllAllAllAllAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAllAllAll = (message) => {\n  let decoded = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  for(let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    for(let j = 0; j < vowels.length; j++) {\n      if(letter == vowels[j]) {\n        letter = letter.toLowerCase();\n      }\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n}\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 place", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let count = 0;\n  let isPrime = true;\n  let isPrime2 = true;\n  let isPrime3 = true;\n  let isPrime4 = true;\n  let isPrime5 = true;\n  let isPrime6 = true;\n  let isPrime7 = true;\n  let isPrime8 = true;\n  let isPrime9 = true;\n  let isPrime10 = true;\n  let isPrime11 = true;\n  let isPrime12 = true;\n  let isPrime13 = true;\n  let isPrime14 = true;\n  let isPrime15 = true;\n  let isPrime16 = true;\n  let isPrime17 = true;\n  let isPrime18 = true;\n  let isPrime19 = true;\n  let isPrime20 = true;\n  let isPrime21 = true;\n  let isPrime22 = true;\n  let isPrime23 = true;\n  let isPrime24 = true;\n  let isPrime25 = true;\n  let isPrime26 = true;\n  let isPrime27 = true;\n  let isPrime28 = true;\n  let isPrime29 = true;\n  let isPrime30 = true;\n  let isPrime31 = true;\n  let isPrime32 = true;\n  let isPrime33 = true;\n  let isPrime34 = true;\n  let isPrime35 = true;\n  let isPrime36 = true;\n  let isPrime37 = true;\n  let isPrime38 = true;\n  let isPrime39 = true;\n  let isPrime40 = true;\n  let isPrime41 = true;\n  let isPrime42 = true;\n  let isPrime43 = true;\n  let isPrime44 = true;\n  let isPrime45 = true;\n  let isPrime46 = true;\n  let isPrime47 = true;\n  let isPrime48 = true;\n  let isPrime49 = true;\n  let isPrime50 = true;\n  let isPrime51 = true;\n  let isPrime52 = true;\n  let isPrime53 = true;\n  let isPrime54 = true;\n  let isPrime55 = true;\n  let isPrime56 = true;\n  let isPrime57 = true;\n  let isPrime58 = true;\n  let isPrime59 = true;\n  let isPrime60 = true;\n  let isPrime61 = true;\n  let isPrime62 = true;\n  let isPrime63 = true;\n  let isPrime64 = true;\n  let isPrime65 = true;\n  let isPrime66 = true;\n  let isPrime67 = true;\n  let isPrime68 = true;\n  let isPrime69 = true;\n  let isPrime70 = true;\n  let isPrime71 = true;\n  let isPrime72 = true;\n  let isPrime73 = true;\n  let isPrime74 = true;\n  let isPrime75 = true;\n  let isPrime76 = true;\n  let isPrime77 = true;\n  let isPrime78 = true;\n  let isPrime79 = true;\n  let isPrime80 = true;\n  let isPrime81 = true;\n  let isPrime82 = true;\n  let isPrime83 = true;\n  let isPrime84 = true;\n  let isPrime85 = true;\n  let isPrime86 = true;\n  let isPrime87 = true;\n  let isPrime88 = true;\n  let isPrime89 = true;\n  let isPrime90 = true;\n  let isPrime91 = true;\n  let isPrime92 = true;\n  let isPrime93 = true;\n  let isPrime94 = true;\n  let isPrime95 = true;\n  let isPrime96 = true;\n  let isPrime97 = true;\n  let isPrime98 = true;\n  let isPrime99 = true;\n  let isPrime100 = true;\n  let isPrime101 = true;\n  let isPrime102 = true;\n  let isPrime103 = true;\n  let isPrime104 = true;\n  let isPrime105 = true;\n  let isPrime106 = true;\n  let isPrime107 = true;\n  let isPrime108 = true;\n  let isPrime109 = true;\n  let isPrime110 = true;\n  let isPrime111 = true;\n  let isPrime112 = true;\n  let isPrime113 = true;\n  let isPrime114 = true;\n  let isPrime115 = true;\n  let isPrime116 = true;\n  let isPrime117 = true;\n  let isPrime118 = true;\n  let isPrime119 = true;\n  let isPrime120 = true;\n  let isPrime121 = true;\n  let isPrime122 = true;\n  let isPrime123 = true;\n  let isPrime124 = true;\n  let isPrime125 = true;\n  let isPrime126 = true;\n  let isPrime127 = true;\n  let isPrime128 = true;\n  let isPrime129 = true;\n  let isPrime130 = true;\n  let isPrime131 = true;\n  let isPrime132 = true;\n  let isPrime133 = true;\n  let isPrime134 = true;\n  let isPrime135 = true;\n  let isPrime136 = true;\n  let isPrime137 = true;\n  let isPrime138 = true;\n  let isPrime139 = true;\n  let isPrime140 = true;\n  let isPrime141 = true;\n  let isPrime142 = true;\n  let isPrime143 = true;\n  let isPrime144 = true;\n  let isPrime145 = true;\n  let isPrime146 = true;\n  let isPrime147 = true;\n  let isPrime148 = true;\n  let isPrime149 = true;\n  let isPrime150 = true;\n  let isPrime151 = true;\n  let isPrime152 = true;\n  let isPrime153 = true;\n  let isPrime154 = true;\n  let isPrime155 = true;\n  let isPrime156 = true;\n  let isPrime157 = true;\n  let isPrime158 = true;\n  let isPrime159 = true;\n  let isPrime160 = true;\n  let isPrime161 = true;\n  let isPrime162 = true;\n  let isPrime163 = true;\n  let isPrime164 = true;\n  let isPrime165 = true;\n  let isPrime166 = true;\n  let isPrime167 = true;\n  let isPrime168 = true;\n  let isPrime169 = true;\n  let isPrime170 = true;\n  let isPrime171 = true;\n  let isPrime172 = true;\n  let isPrime173 = true;\n  let isPrime174 = true;\n  let isPrime175 = true;\n  let isPrime176 = true;\n  let isPrime177 = true;\n  let isPrime178 = true;\n  let isPrime179 = true;\n  let isPrime180 = true;\n  let isPrime181 = true;\n  let isPrime182 = true;\n  let isPrime18", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCases", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  let keys = Object.keys(dict);\n  let allKeysAreStrings = keys.every(key => typeof dict[key] ==='string');\n  return allKeysAreStrings;\n}\n\n/*\n  Given a string, return true if all characters are digits, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringIsDigits(\"123\") should return true.\n  checkStringIsDigits(\"abc\") should return false.\n  checkStringIsDigits(\"123abc\") should return false.\n  checkStringIsDigits(\"123abc123\") should return false.\n  checkStringIsDigits(\"123abc123abc\") should return false.\n  checkStringIsDigits(\"123abc123abc123\") should return false.\n  checkStringIsDigits(\"123abc123abc123abc123\") should return false.\n  checkStringIsDigits(\"123abc123abc123abc123abc123\") should return false.\n  checkStringIsDigits(\"123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123abc123", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers(5) => [2,3]\n  primeNumbers(11) => [2,3,5,7]\n  primeNumbers(0) => []\n  primeNumbers(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers(1) => []\n  primeNumbers(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers2(5) => [2,3]\n  primeNumbers2(11) => [2,3,5,7]\n  primeNumbers2(0) => []\n  primeNumbers2(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers2(1) => []\n  primeNumbers2(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers2 = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers3(5) => [2,3]\n  primeNumbers3(11) => [2,3,5,7]\n  primeNumbers3(0) => []\n  primeNumbers3(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers3(1) => []\n  primeNumbers3(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers3 = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers4(5) => [2,3]\n  primeNumbers4(11) => [2,3,5,7]\n  primeNumbers4(0) => []\n  primeNumbers4(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers4(1) => []\n  primeNumbers4(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers4 = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers5(5) => [2,3]\n  primeNumbers5(11) => [2,3,5,7]\n  primeNumbers5(0) => []\n  primeNumbers5(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers5(1) => []\n  primeNumbers5(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers5 = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers6(5) => [2,3]\n  primeNumbers6(11) => [2,3,5,7]\n  primeNumbers6(0) => []\n  primeNumbers6(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers6(1) => []\n  primeNumbers6(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers6 = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers7(5) => [2,3]\n  primeNumbers7(11) => [2,3,5,7]\n  primeNumbers7(0) => []\n  primeNumbers7(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers7(1) => []\n  primeNumbers7(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers7 = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers8(5) => [2,3]\n  primeNumbers8(11) => [2,3,5,7]\n  primeNumbers8(0) => []\n  primeNumbers8(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers8(1) => []\n  primeNumbers8(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers8 = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  primeNumbers9(5) => [2,3]\n  primeNumbers9(11) => [2,3,5,7]\n  primeNumbers9(0) => []\n  primeNumbers9(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers9(1) => []\n  primeNumbers9(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers9 = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the integers\n  that are prime numbers and less than n.\n  for example:\n  prime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  for (let i = a; i; i--) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 412.\n  sum(19, 28) should return 280.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 14.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  for (let i = a; i; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(148, 412) should return 412.\n  difference(19, 28) should return 28.\n  difference(2020, 1851) should return 1851.\n  difference(14,-15) should return 14.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  for (let i = a; i; i--) {\n    difference += i;\n  }\n  return difference;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absolute(148, 412) should return 412.\n  absolute(19, 28) should return 28.\n  absolute(2020, 1851) should return 1851.\n  absolute(14,-15) should return 14.\n  */\nconst absolute = (a, b) => {\n  let absolute = 0;\n  for (let i = a; i; i--) {\n    absolute += i;\n  }\n  return absolute;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148, 412) should return 412.\n  sqrt(19, 28) should return 28.\n  sqrt(2020, 1851) should return 1851.\n  sqrt(14,-15) should return 14.\n  */\nconst sqrt = (a, b) => {\n  let sqrt = 0;\n  for (let i = a; i; i--) {\n    sqrt += Math.pow(i, 2);\n  }\n  return sqrt;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absoluteSquareRoot(148, 412) should return 412.\n  absoluteSquareRoot(19, 28) should return 28.\n  absoluteSquareRoot(2020, 1851) should return 1851.\n  absoluteSquareRoot(14,-15) should return 14.\n  */\nconst absoluteSquareRoot = (a, b) => {\n  let absoluteSquareRoot = 0;\n  for (let i = a; i; i--) {\n    absoluteSquareRoot += Math.pow(i, 2);\n  }\n  return absoluteSquareRoot;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absoluteSquareRootSquared(148, 412) should return 412.\n  absoluteSquareRootSquared(19, 28) should return 28.\n  absoluteSquareRootSquared(2020, 1851) should return 1851.\n  absoluteSquareRootSquared(14,-15) should return 14.\n  */\nconst absoluteSquareRootSquared = (a, b) => {\n  let absoluteSquareRootSquared = 0;\n  for (let i = a; i; i--) {\n    absoluteSquareRootSquared += Math.pow(i, 2);\n  }\n  return absoluteSquareRootSquared;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the absolute value of the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absoluteSquareRootSquaredSquared(148, 412) should return 412.\n  absoluteSquareRootSquaredSquared(19, 28) should return 28.\n  absoluteSquareRootSquaredSquared(2020, 1851) should return 1851.\n  absoluteSquareRootSquaredSquared(14,-15) should return 14.\n  */\nconst absoluteSquareRootSquaredSquared = (a, b) => {\n  let absoluteSquareRootSquaredSquared = 0;\n  for (let i = a; i; i--) {\n    absoluteSquareRootSquaredSquared += Math.pow(i, 2);\n  }\n  return absoluteSquareRootSquaredSquared;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the absolute value of the square root of the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absoluteSquareRootSquaredSquaredSquaredSquared(148, 412) should return 412.\n  absoluteSquareRootSquaredSquaredSquaredSquaredSquared(19, 28) should return 28.\n  absoluteSquareRootSquaredSquaredSquaredSquaredSquaredSquared(2020, 1851) should return 1851.\n  absoluteSquareRootSquaredSquaredSquaredSquaredSquaredSquared(14,-15) should return 14.\n  */\nconst absoluteSquareRootSquaredSquaredSquaredSquared = (a, b) => {\n  let absoluteSquareRootSquaredSquaredSquared = 0;\n  for (let i = a; i; i--) {\n    absoluteSquareRootSquaredSquaredSquared += Math.pow(i, 2);\n  }\n  return absoluteSquareRootSquaredSquaredSquaredSquared;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the absolute value of the square root of the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absoluteSquareRootSquaredSquaredSquaredSquaredSquaredSquared(148, 412) should return 412.\n  absoluteSquareRootSquaredSquaredSquaredSquaredSquaredSquaredSquared(19, 28) should return 28.\n  absoluteSquareRootSquaredSquaredSquaredSquaredSquaredSquaredSquared(2020, 1851) should return 1851.\n  absoluteSquareRootSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared(14,-15) should return 14.\n  */\nconst absoluteSquareRootSquaredSquaredSquaredSquaredSquared = (a, b) => {\n  let absoluteSquareRootSquaredSquaredSquaredSquared = 0;\n  for (let i = a; i; i--) {\n    absoluteSquareRootSquaredSquaredSquaredSquared += Math.pow(i, 2);\n  }\n  return absoluteSquareRootSquaredSquaredSquaredSquaredSquared;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the absolute value of the square root of the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absoluteSquareRootSquaredSquaredSquaredSquaredSquaredSquaredSquared(148, 412) should return 412.\n  absoluteSquareRootSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared(19, 28) should return 28.\n  absoluteSquareRootSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquaredSquared(2020, 1851) should return 1851.\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closerIntegers", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer1Rounded, integer2Rounded] = integer1.split(\".\")\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRounded, integer2RoundedRounded] = integer2\n   .split(\".\")\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRounded, integer2RoundedRoundedRounded] = integer1RoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRounded] = integer2RoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer1RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [integer1RoundedRoundedRoundedRoundedRounded, integer2RoundedRoundedRoundedRoundedRounded] = integer2RoundedRoundedRoundedRoundedRounded\n   .map(Number)\n   .map(Number)\n   .map(Number)\n   .map(Number);\n  const [", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
