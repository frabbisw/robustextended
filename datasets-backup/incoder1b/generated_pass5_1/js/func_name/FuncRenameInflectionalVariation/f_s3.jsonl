{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hadClosestElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  let closest = sorted[0];\n  for (let i = 1; i < sorted.length; i++) {\n    if (Math.abs(sorted[i] - closest) < threshold) {\n      closest = sorted[i];\n    }\n  }\n  return closest === sorted[0];\n};\n\n/**\n * Check if given list of numbers is sorted in ascending order.\n * If not, return false.\n * >>> isSorted([1.0, 2.0, 3.0])\n * true\n * >>> isSorted([1.0, 2.0, 3.1, 4.0, 5.0])\n * false\n */\nconst isSorted = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  return sorted.length === numbers.length;\n};\n\n/**\n * Check if given list of numbers is sorted in descending order.\n * If not, return false.\n * >>> isSorted([1.0, 2.0, 3.0])\n * false\n * >>> isSorted([1.0, 2.0, 3.1, 4.0, 5.0])\n * true\n */\nconst isDescending = (numbers) => {\n  const sorted = numbers.sort((a, b) => b - a);\n  return sorted.length === numbers.length;\n};\n\n/**\n * Check if given list of numbers is sorted in ascending order and ascending\n * order.\n * If not, return false.\n * >>> isSorted([1.0, 2.0, 3.0])\n * false\n * >>> isSorted([1.0, 2.0, 3.1, 4.0, 5.0])\n * true\n */\nconst isSortedAndAscending = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  return sorted.length === numbers.length && sorted[0] === sorted[sorted.length - 1];\n};\n\n/**\n * Check if given list of numbers is sorted in descending order and descending\n * order.\n * If not, return false.\n * >>> isSorted([1.0, 2.0, 3.0])\n * false\n * >>> isSorted([1.0, 2.0, 3.1, 4.0, 5.0])\n * true\n */\nconst isSortedAndDescending = (numbers) => {\n  const sorted = numbers.sort((a, b) => b - a);\n  return sorted.length === numbers.length && sorted[0] === sorted[sorted.length - 1];\n};\n\n/**\n * Check if given list of numbers is sorted in ascending order and descending\n * order and ascending order.\n * If not, return false.\n * >>> isSorted([1.0, 2.0, 3.0])\n * false\n * >>> isSorted([1.0, 2.0, 3.1, 4.0, 5.0])\n * true\n */\nconst isSortedAndDescendingAndAscending = (numbers) => {\n  const sorted = numbers.sort((a, b) => b - a);\n  return sorted.length === numbers.length && sorted[0] === sorted[sorted.length - 1];\n};\n\n/**\n * Check if given list of numbers is sorted in ascending order and descending\n * order and ascending order and ascending order.\n * If not, return false.\n * >>> isSorted([1.0, 2.0, 3.0])\n * false\n * >>> isSorted([1.0, 2.0, 3.1, 4.0, 5.0])\n * true\n */\nconst isSortedAndDescendingAndAscendingAndDescending = (numbers) => {\n  const sorted = numbers.sort((a, b) => b - a);\n  return sorted.length === numbers.length && sorted[0] === sorted[sorted.length - 1];\n};\n\n/**\n * Check if given list of numbers is sorted in ascending order and descending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n * order and ascending order and ascending order and ascending order and ascending\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroup", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_str = paren_group.replace(/\\(|\\)/g, '');\n    paren_group_list.push(paren_group_str);\n  }\n  return paren_group_list;\n};\n\n/**\n  Given a string containing multiple groups of nested parentheses, return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_str = paren_group.replace(/\\(|\\)/g, '');\n    paren_group_list.push(paren_group_str);\n  }\n  return paren_group_list;\n};\n\n/**\n  Given a string containing multiple groups of nested parentheses, return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupss = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_str = paren_group.replace(/\\(|\\)/g, '');\n    paren_group_list.push(paren_group_str);\n  }\n  return paren_group_list;\n};\n\n/**\n  Given a string containing multiple groups of nested parentheses, return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsss = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_str = paren_group.replace(/\\(|\\)/g, '');\n    paren_group_list.push(paren_group_str);\n  }\n  return paren_group_list;\n};\n\n/**\n  Given a string containing multiple groups of nested parentheses, return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroupsss('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsssss = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_str = paren_group.replace(/\\(|\\)/g, '');\n    paren_group_list.push(paren_group_str);\n  }\n  return paren_group_list;\n};\n\n/**\n  Given a string containing multiple groups of nested parentheses, return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroupsssss('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsssssss = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_str = paren_group.replace(/\\(|\\)/g, '');\n    paren_group_list.push(paren_group_str);\n  }\n  return paren_group_list;\n};\n\n/**\n  Given a string containing multiple groups of nested parentheses, return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroupsssssss('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsssssssss = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_str = paren_group.replace(/\\(|\\)/g, '');\n    paren_group_list.push(paren_group_str);\n  }\n  return paren_group_list;\n};\n\n/**\n  Given a string containing multiple groups of nested parentheses, return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroupsssssssss('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsssssssssss = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_str = paren_group.replace(/\\(|\\)/g, '');\n    paren_group_list.push(paren_group_str);\n  }\n  return paren_group_list;\n};\n\n/**\n  Given a string containing multiple groups of nested parentheses, return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroupsssssssssss('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsssssssssssss = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_list = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_str = paren_group.replace(/\\(|\\)/g, '');\n    paren_group_list.push(paren_group_str);\n  }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let reversedString = '';\n  let prefix = '';\n  let suffix = '';\n  let palindrome = '';\n\n  /* Find longest postfix of supplied string that is a palindrome */\n  longestPalindrome = string.length\n   ? longestPalindrome\n    : longestPalindrome(makePalindrome(string.split('').reverse().join('')));\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix */\n  reversedString = string\n   ? string\n    : reversedString(makePalindrome(string.split('').reverse().join('')));\n\n  /* Find a prefix that comes before the palindromic suffix */\n  prefix = longestPalindrome.split('').reverse().join('');\n\n  /* Find a suffix that comes after the palindromic prefix */\n  suffix = reversedString.split('').reverse().join('');\n\n  /* Find the palindrome */\n  palindrome = prefix + suffix;\n\n  return palindrome;\n}\n\n/* Given a string, return true if it is a palindrome and false otherwise.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catac')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n}\n\n/* Given a string, return true if it is a palindrome and false otherwise.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catac')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n}\n\n/* Given a string, return true if it is a palindrome and false otherwise.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catac')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n}\n\n/* Given a string, return true if it is a palindrome and false otherwise.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catac')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n}\n\n/* Given a string, return true if it is a palindrome and false otherwise.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catac')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n}\n\n/* Given a string, return true if it is a palindrome and false otherwise.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catac')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n}\n\n/* Given a string, return true if it is a palindrome and false otherwise.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catac')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cats')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n}\n\n/* Given a string, return true if it is a palindrome and false otherwise.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catac')\n  false\n  >>> isPalindrome('cats')\n  false\n  >>> isPalindrome('cat", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "madeAPiles", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const stones = [...Array(Math.ceil(n / 2))].map((_, i) => i);\n  const levels = [...Array(Math.ceil(n / 2))].map((_, i) => i);\n  const levelsCount = stones.reduce((acc, curr, i, arr) => {\n    if (i === arr.length - 1) {\n      acc[curr] = levelsCount;\n    } else {\n      acc[curr] = acc[curr] + levelsCount;\n    }\n    return acc;\n  }, {});\n  return Object.keys(levelsCount).map(key => levelsCount[key]);\n};\n\nconst getStonesCount = (stones) => {\n  const stonesCount = stones.reduce((acc, curr, i, arr) => {\n    if (i === arr.length - 1) {\n      acc[curr] = stonesCount;\n    } else {\n      acc[curr] = acc[curr] + stonesCount;\n    }\n    return acc;\n  }, {});\n  return Object.keys(stonesCount).map(key => stonesCount[key]);\n};\n\nconst getStonesCountByLevel = (stones) => {\n  const stonesCountByLevel = stones.reduce((acc, curr, i, arr) => {\n    if (i === arr.length - 1) {\n      acc[curr] = stonesCountByLevel[curr];\n    } else {\n      acc[curr] = acc[curr] + stonesCountByLevel[curr];\n    }\n    return acc;\n  }, {});\n  return Object.keys(stonesCountByLevel).map(key => stonesCountByLevel[key]);\n};\n\nconst getStonesCountByLevelAndLevel = (stones) => {\n  const stonesCountByLevelAndLevel = stones.reduce((acc, curr, i, arr) => {\n    if (i === arr.length - 1) {\n      acc[curr] = stonesCountByLevelAndLevel[curr];\n    } else {\n      acc[curr] = acc[curr] + stonesCountByLevelAndLevel[curr];\n    }\n    return acc;\n  }, {});\n  return Object.keys(stonesCountByLevelAndLevel).map(key => stonesCountByLevelAndLevel[key]);\n};\n\nconst getStonesCountByLevelAndLevelAndLevel = (stones) => {\n  const stonesCountByLevelAndLevelAndLevel = stones.reduce((acc, curr, i, arr) => {\n    if (i === arr.length - 1) {\n      acc[curr] = stonesCountByLevelAndLevelAndLevel[curr];\n    } else {\n      acc[curr] = acc[curr] + stonesCountByLevelAndLevelAndLevel[curr];\n    }\n    return acc;\n  }, {});\n  return Object.keys(stonesCountByLevelAndLevelAndLevel).map(key => stonesCountByLevelAndLevelAndLevel[key]);\n};\n\nconst getStonesCountByLevelAndLevelAndLevelAndLevel = (stones) => {\n  const stonesCountByLevelAndLevelAndLevelAndLevel = stones.reduce((acc, curr, i, arr) => {\n    if (i === arr.length - 1) {\n      acc[curr] = stonesCountByLevelAndLevelAndLevelAndLevelAndLevel[curr];\n    } else {\n      acc[curr] = acc[curr] + stonesCountByLevelAndLevelAndLevelAndLevelAndLevel[curr];\n    }\n    return acc;\n  }, {});\n  return Object.keys(stonesCountByLevelAndLevelAndLevelAndLevelAndLevel).map(key => stonesCountByLevelAndLevelAndLevelAndLevelAndLevelAndLevel[key]);\n};\n\nconst getStonesCountByLevelAndLevelAndLevelAndLevelAndLevel = (stones) => {\n  const stonesCountByLevelAndLevelAndLevelAndLevelAndLevelAndLevel = stones.reduce((acc, curr, i, arr) => {\n    if (i === arr.length - 1) {\n      acc[curr] = stonesCountByLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevel[curr];\n    } else {\n      acc[curr] = acc[curr] + stonesCountByLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevel[curr];\n    }\n    return acc;\n  }, {});\n  return Object.keys(stonesCountByLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevel).map(key => stonesCountByLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevel[key]);\n};\n\nconst getStonesCountByLevelAndLevelAndLevelAndLevelAndLevelAndLevel = (stones) => {\n  const stonesCountByLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevel = stones.reduce((acc, curr, i, arr) => {\n    if (i === arr.length - 1) {\n      acc[curr] = stonesCountByLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevel[curr];\n    } else {\n      acc[curr] = acc[curr] + stonesCountByLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevel[curr];\n    }\n    return acc;\n  }, {});\n  return Object.keys(stonesCountByLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevel).map(key => stonesCountByLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevelAndLevel", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s+/);\n  return words.map(w => w.trim());\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let max = 0;\n  let even = 0;\n\n  if(x % 2 === 0 && y % 2 === 0) {\n    num = x;\n    max = y;\n    even = 1;\n  }\n  else if(x % 2 === 0 && y % 2!== 0) {\n    num = y;\n    max = x;\n    even = 1;\n  }\n  else if(x % 2!== 0 && y % 2 === 0) {\n    num = x;\n    max = y;\n    even = 0;\n  }\n  else if(x % 2!== 0 && y % 2!== 0) {\n    num = y;\n    max = x;\n    even = 0;\n  }\n\n  return max;\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let max = 0;\n  let odd = 0;\n\n  if(x % 2 === 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    odd = 1;\n  }\n  else if(x % 2 === 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    odd = 1;\n  }\n  else if(x % 2!== 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    odd = 0;\n  }\n  else if(x % 2!== 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    odd = 0;\n  }\n\n  return max;\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let max = 0;\n  let int = 0;\n\n  if(x % 2 === 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    int = 1;\n  }\n  else if(x % 2 === 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    int = 1;\n  }\n  else if(x % 2!== 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    int = 0;\n  }\n  else if(x % 2!== 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    int = 0;\n  }\n\n  return max;\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let max = 0;\n  let int = 0;\n\n  if(x % 2 === 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    int = 1;\n  }\n  else if(x % 2 === 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    int = 1;\n  }\n  else if(x % 2!== 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    int = 0;\n  }\n  else if(x % 2!== 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    int = 0;\n  }\n\n  return max;\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let max = 0;\n  let int = 0;\n\n  if(x % 2 === 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    int = 1;\n  }\n  else if(x % 2 === 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    int = 1;\n  }\n  else if(x % 2!== 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    int = 0;\n  }\n  else if(x % 2!== 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    int = 0;\n  }\n\n  return max;\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let max = 0;\n  let int = 0;\n\n  if(x % 2 === 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    int = 1;\n  }\n  else if(x % 2 === 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    int = 1;\n  }\n  else if(x % 2!== 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    int = 0;\n  }\n  else if(x % 2!== 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    int = 0;\n  }\n\n  return max;\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let max = 0;\n  let int = 0;\n\n  if(x % 2 === 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    int = 1;\n  }\n  else if(x % 2 === 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    int = 1;\n  }\n  else if(x % 2!== 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    int = 0;\n  }\n  else if(x % 2!== 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    int = 0;\n  }\n\n  return max;\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let max = 0;\n  let int = 0;\n\n  if(x % 2 === 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    int = 1;\n  }\n  else if(x % 2 === 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    int = 1;\n  }\n  else if(x % 2!== 0 && y % 2!== 0) {\n    num = x;\n    max = y;\n    int = 0;\n  }\n  else if(x % 2!== 0 && y % 2 === 0) {\n    num = y;\n    max = x;\n    int = 0;\n  }\n\n  return max;\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundingAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let binNum = 0;\n  let binNum2 = 1;\n  let binNum3 = 2;\n  let binNum4 = 3;\n  let binNum5 = 4;\n  let binNum6 = 5;\n  let binNum7 = 6;\n  let binNum8 = 7;\n  let binNum9 = 8;\n  let binNum10 = 9;\n  let binNum11 = 10;\n  let binNum12 = 11;\n  let binNum13 = 12;\n  let binNum14 = 13;\n  let binNum15 = 14;\n  let binNum16 = 15;\n  let binNum17 = 16;\n  let binNum18 = 17;\n  let binNum19 = 18;\n  let binNum20 = 19;\n  let binNum21 = 20;\n  let binNum22 = 21;\n  let binNum23 = 22;\n  let binNum24 = 23;\n  let binNum25 = 24;\n  let binNum26 = 25;\n  let binNum27 = 26;\n  let binNum28 = 27;\n  let binNum29 = 28;\n  let binNum30 = 29;\n  let binNum31 = 30;\n  let binNum32 = 31;\n  let binNum33 = 32;\n  let binNum34 = 33;\n  let binNum35 = 34;\n  let binNum36 = 35;\n  let binNum37 = 36;\n  let binNum38 = 37;\n  let binNum39 = 38;\n  let binNum40 = 39;\n  let binNum41 = 40;\n  let binNum42 = 41;\n  let binNum43 = 42;\n  let binNum44 = 43;\n  let binNum45 = 44;\n  let binNum46 = 45;\n  let binNum47 = 46;\n  let binNum48 = 47;\n  let binNum49 = 48;\n  let binNum50 = 49;\n  let binNum51 = 50;\n  let binNum52 = 51;\n  let binNum53 = 52;\n  let binNum54 = 53;\n  let binNum55 = 54;\n  let binNum56 = 55;\n  let binNum57 = 56;\n  let binNum58 = 57;\n  let binNum59 = 58;\n  let binNum60 = 59;\n  let binNum61 = 60;\n  let binNum62 = 61;\n  let binNum63 = 62;\n  let binNum64 = 63;\n  let binNum65 = 64;\n  let binNum66 = 65;\n  let binNum67 = 66;\n  let binNum68 = 67;\n  let binNum69 = 68;\n  let binNum70 = 69;\n  let binNum71 = 70;\n  let binNum72 = 71;\n  let binNum73 = 72;\n  let binNum74 = 73;\n  let binNum75 = 74;\n  let binNum76 = 75;\n  let binNum77 = 76;\n  let binNum78 = 77;\n  let binNum79 = 78;\n  let binNum80 = 79;\n  let binNum81 = 80;\n  let binNum82 = 81;\n  let binNum83 = 82;\n  let binNum84 = 83;\n  let binNum85 = 84;\n  let binNum86 = 85;\n  let binNum87 = 86;\n  let binNum88 = 87;\n  let binNum89 = 88;\n  let binNum90 = 89;\n  let binNum91 = 90;\n  let binNum92 = 91;\n  let binNum93 = 92;\n  let binNum94 = 93;\n  let binNum95 = 94;\n  let binNum96 = 95;\n  let binNum97 = 96;\n  let binNum98 = 97;\n  let binNum99 = 98;\n  let binNum100 = 100;\n  let binNum101 = 101;\n  let binNum102 = 102;\n  let binNum103 = 103;\n  let binNum104 = 104;\n  let binNum105 = 105;\n  let binNum106 = 106;\n  let binNum107 = 107;\n  let binNum108 = 108;\n  let binNum109 = 109;\n  let binNum110 = 110;\n  let binNum111 = 111;\n  let binNum112 = 112;\n  let binNum113 = 113;\n  let binNum114 = 114;\n  let binNum115 = 112;\n  let binNum116 = 113;\n  let binNum117 = 112;\n  let binNum118 = 112;\n  let binNum119 = 112;\n  let binNum120 = 112;\n  let binNum121 = 113;\n  let binNum122 = 114;\n  let binNum123 = 112;\n  let binNum124 = 112;\n  let binNum125 = 112;\n  let binNum126 = 113;\n  let binNum127 = 112;\n  let binNum128 = 112;\n  let binNum129 = 112;\n  let binNum130 = 113;\n  let binNum131 = 114;\n  let binNum132 = 112;\n  let binNum133 = 112;\n  let binNum134 = 112;\n  let binNum135 = 112;\n  let binNum136 = 112;\n  let binNum137 = 112;\n  let binNum138 = 112;\n  let binNum139 = 112;\n  let binNum140 = 113;\n  let binNum141 = 114;\n  let binNum142 = 113;\n  let binNum143 = 114;\n  let binNum144 = 113;\n  let binNum145 = 112;\n  let binNum146 = 113;\n  let binNum147 = 112;\n  let binNum148 = 112;\n  let binNum149 = 112;\n  let binNum150 = 113;\n  let binNum151 = 114;\n  let binNum152 = 113;\n  let binNum153 = 114;\n  let binNum154 = 112;\n  let binNum155 = 112;\n  let binNum156 = 112;\n  let binNum157 = 112;\n  let binNum158 = 112;\n  let binNum159 = 112;\n  let binNum160 = 113;\n  let binNum161 = 114;\n  let binNum162 = 113;\n  let binNum163 = 112;\n  let binNum164 = 112;\n  let binNum165 = 112;\n  let binNum166 = 113;\n  let binNum167 = 112;\n  let binNum168 = 112;\n  let binNum169 = 112;\n  let binNum170 = 113;\n  let binNum171 = 114;\n  let binNum172 = 113;\n  let binNum173 = 114;\n  let binNum174 = 112;\n  let binNum175 = 112;\n  let binNum176 = 113;\n  let binNum177 = 112;\n  let binNum178 = 112;\n  let binNum179 = 112;\n  let binNum180 = 113;\n  let binNum181 = 114;\n  let binNum182 = 113;\n  let binNum183 = 114;\n  let binNum184 = 112;\n  let binNum185 = 112;\n  let binNum186 = 112;\n  let binNum187 = 112;\n  let binNum188 = 112;\n  let binNum189 = 112;\n  let binNum190 = 113;\n  let binNum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigit", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n  let result = [];\n  let digit = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      digit++;\n    }\n    if (digit === 9) {\n      result.push(digit);\n      digit = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  [152, 323]\n  */\nconst uniqueOddDigit = (x) => {\n  let result = [];\n  let digit = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      digit++;\n    }\n    if (digit === 9) {\n      result.push(digit);\n      digit = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddDigit([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueOddDigit([152, 323, 1422, 10])\n  [152, 323]\n  */\nconst uniqueEvenDigit = (x) => {\n  let result = [];\n  let digit = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      digit++;\n    }\n    if (digit === 9) {\n      result.push(digit);\n      digit = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddEvenDigit([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueOddEvenDigit([152, 323, 1422, 10])\n  [152, 323, 152]\n  */\nconst uniqueOddEvenDigit = (x) => {\n  let result = [];\n  let digit = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      digit++;\n    }\n    if (digit === 9) {\n      result.push(digit);\n      digit = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddEvenDigit([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueOddEvenDigit([152, 323, 1422, 10])\n  [152, 323, 152]\n  */\nconst uniqueOddEvenOddDigit = (x) => {\n  let result = [];\n  let digit = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      digit++;\n    }\n    if (digit === 9) {\n      result.push(digit);\n      digit = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddEvenOddDigit([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueOddEvenOddDigit([152, 323, 1422, 10])\n  [152, 323, 152]\n  */\nconst uniqueOddEvenOddOddDigit = (x) => {\n  let result = [];\n  let digit = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      digit++;\n    }\n    if (digit === 9) {\n      result.push(digit);\n      digit = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddEvenOddOddDigit([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueOddEvenOddOddDigit([152, 323, 1422, 10])\n  [152, 323, 152]\n  */\nconst uniqueOddEvenOddOddOddDigit = (x) => {\n  let result = [];\n  let digit = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      digit++;\n    }\n    if (digit === 9) {\n      result.push(digit);\n      digit = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddEvenOddOddOddDigit([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueOddEvenOddOddOddDigit([152, 323, 1422, 10])\n  [152, 323, 152]\n  */\nconst uniqueOddEvenOddOddOddOddDigit = (x) => {\n  let result = [];\n  let digit = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      digit++;\n    }\n    if (digit === 9) {\n      result.push(digit);\n      digit = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddEvenOddOddOddOddDigit([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueOddEvenOddOddOddOddDigit([152, 323, 1422, 10])\n  [152, 323, 152]\n  */\nconst uniqueOddEvenOddOddOddOddOddDigit = (x) => {\n  let result = [];\n  let digit = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      digit++;\n    }\n    if (digit === 9) {\n      result.push(digit);\n      digit = 0;\n    }\n  }\n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has any odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddEvenOddOddOddOddOddDigit([15, 33, 1422, 1])\n  [33, 1422, 15]\n  >>> uniqueOddEvenOddOddOddOddOddDigit([152, 323, 1422, 10])\n  [152, 323, 152]\n  */\nconst uniqueOddEvenOddOddOddOddOddOddDigit = (x) => {\n  let result = [];\n  let digit = 0;\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      digit++;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversedLen = reversed.length;\n  const reversedArr = reversed.map((item, index) => reversedLen * item + index);\n  return reversedArr;\n};\n\nconst byName = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversedLen = reversed.length;\n  const reversedArr = reversed.map((item, index) => reversedLen * item + index);\n  return reversedArr;\n};\n\nconst byNameReversed = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversedLen = reversed.length;\n  const reversedArr = reversed.map((item, index) => reversedLen * item + index);\n  return reversedArr;\n};\n\nconst byNameReversedReversed = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversedLen = reversed.length;\n  const reversedArr = reversed.map((item, index) => reversedLen * item + index);\n  return reversedArr;\n};\n\nconst byNameReversedReversedReversed = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversedLen = reversed.length;\n  const reversedArr = reversed.map((item, index) => reversedLen * item + index);\n  return reversedArr;\n};\n\nconst byNameReversedReversedReversedReversed = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversedLen = reversed.length;\n  const reversedArr = reversed.map((item, index) => reversedLen * item + index);\n  return reversedArr;\n};\n\nconst byNameReversedReversedReversedReversedReversed = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversedLen = reversed.length;\n  const reversedArr = reversed.map((item, index) => reversedLen * item + index);\n  return reversedArr;\n};\n\nconst byNameReversedReversedReversedReversedReversedReversedReversed = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversedLen = reversed.length;\n  const reversedArr = reversed.map((item, index) => reversedLen * item + index);\n  return reversedArr;\n};\n\nconst byNameReversedReversedReversedReversedReversedReversedReversedReversed = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const reversedLen = reversed.length;\n  const reversedArr = reversed.map((item, index) => reversedLen * item + index);\n  return reversedArr;\n};\n\nconst byNameReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) + i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 1, 2, 6, 24]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) - i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 1, 2, 6, 24]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) - i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 1, 2, 6, 24]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) - i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 1, 2, 6, 24]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) - i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 1, 2, 6, 24]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) - i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 1, 2, 6, 24]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) - i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 1, 2, 6, 24]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) - i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 1, 2, 6, 24]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) - i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 1, 2, 6, 24]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, cur) => acc + cur, 0) - i);\n    }\n  }\n  return result;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOdderPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i - 1);\n\n  for (let i = n; i >= 1; i--) {\n    if (oddPalindromes.includes(i) && evenPalindromes.includes(i)) {\n      return [i, oddPalindromes.includes(i)? oddPalindromes.indexOf(i) : evenPalindromes.indexOf(i)];\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return an integer that is the sum of all even\n  and odd integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: 6\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: 24\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned integer is sum of all even and odd integer palindromes respectively.\n  */\nconst sumEvenOdderPalindromes = (n) => {\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i - 1);\n\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    if (oddPalindromes.includes(i) && evenPalindromes.includes(i)) {\n      sum += oddPalindromes.includes(i)? oddPalindromes.indexOf(i) : evenPalindromes.indexOf(i);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a positive integer n, return an integer that is the sum of all even\n  and odd integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: 6\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: 24\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned integer is sum of all even and odd integer palindromes respectively.\n  */\nconst sumEvenOdderPalindromes2 = (n) => {\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i - 1);\n\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    if (oddPalindromes.includes(i) && evenPalindromes.includes(i)) {\n      sum += oddPalindromes.includes(i)? oddPalindromes.indexOf(i) : evenPalindromes.indexOf(i);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a positive integer n, return an integer that is the sum of all even\n  and odd integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: 6\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: 24\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned integer is sum of all even and odd integer palindromes respectively.\n  */\nconst sumEvenOdderPalindromes3 = (n) => {\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i - 1);\n\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    if (oddPalindromes.includes(i) && evenPalindromes.includes(i)) {\n      sum += oddPalindromes.includes(i)? oddPalindromes.indexOf(i) : evenPalindromes.indexOf(i);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a positive integer n, return an integer that is the sum of all even\n  and odd integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: 6\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: 24\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned integer is sum of all even and odd integer palindromes respectively.\n  */\nconst sumEvenOdderPalindromes4 = (n) => {\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i - 1);\n\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    if (oddPalindromes.includes(i) && evenPalindromes.includes(i)) {\n      sum += oddPalindromes.includes(i)? oddPalindromes.indexOf(i) : evenPalindromes.indexOf(i);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a positive integer n, return an integer that is the sum of all even\n  and odd integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: 6\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: 24\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned integer is sum of all even and odd integer palin", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countZeros which takes an array of integers and returns\n  the number of elements which has all its digits set to 0.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 3\n  */\nconst countZeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEvens which takes an array of integers and returns\n  the number of elements which has all its digits set to even.\n  >>> countEvens([]) == 0\n  >>> countEvens([-1, 11, -11]) == 1\n  >>> countEvens([1, 1, 2]) == 3\n  */\nconst countEvens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOdds which takes an array of integers and returns\n  the number of elements which has all its digits set to odd.\n  >>> countOdds([]) == 0\n  >>> countOdds([-1, 11, -11]) == 1\n  >>> countOdds([1, 1, 2]) == 3\n  */\nconst countOdds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 1) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countDivisibleBy which takes an array of integers and\n  returns how many elements are divisible by each of the given numbers.\n  >>> countDivisibleBy([3, 7, 11], 2) == 3\n  >>> countDivisibleBy([3, 7, 11], 3) == 1\n  >>> countDivisibleBy([3, 7, 11], 4) == 0\n  >>> countDivisibleBy([3, 7, 11], 5) == 0\n  >>> countDivisibleBy([3, 7, 11], 6) == 0\n  >>> countDivisibleBy([3, 7, 11], 7) == 0\n  >>> countDivisibleBy([3, 7, 11], 8) == 0\n  >>> countDivisibleBy([3, 7, 11], 9) == 0\n  >>> countDivisibleBy([3, 7, 11], 10) == 0\n  >>> countDivisibleBy([3, 7, 11], 11) == 0\n  >>> countDivisibleBy([3, 7, 11], 12) == 0\n  >>> countDivisibleBy([3, 7, 11], 13) == 0\n  >>> countDivisibleBy([3, 7, 11], 14) == 0\n  >>> countDivisibleBy([3, 7, 11], 15) == 0\n  >>> countDivisibleBy([3, 7, 11], 16) == 0\n  >>> countDivisibleBy([3, 7, 11], 17) == 0\n  >>> countDivisibleBy([3, 7, 11], 18) == 0\n  >>> countDivisibleBy([3, 7, 11], 19) == 0\n  >>> countDivisibleBy([3, 7, 11], 20) == 0\n  >>> countDivisibleBy([3, 7, 11], 21) == 0\n  >>> countDivisibleBy([3, 7, 11], 22) == 0\n  >>> countDivisibleBy([3, 7, 11], 23) == 0\n  >>> countDivisibleBy([3, 7, 11], 24) == 0\n  >>> countDivisibleBy([3, 7, 11], 25) == 0\n  >>> countDivisibleBy([3, 7, 11], 26) == 0\n  >>> countDivisibleBy([3, 7, 11], 27) == 0\n  >>> countDivisibleBy([3, 7, 11], 28) == 0\n  >>> countDivisibleBy([3, 7, 11], 29) == 0\n  >>> countDivisibleBy([3, 7, 11], 30) == 0\n  >>> countDivisibleBy([3, 7, 11], 31) == 0\n  >>> countDivisibleBy([3, 7, 11], 32) == 0\n  >>> countDivisibleBy([3, 7, 11], 33) == 0\n  >>> countDivisibleBy([3, 7, 11], 34) == 0\n  >>> countDivisibleBy([3, 7, 11], 35) == 0\n  >>> countDivisibleBy([3, 7, 11], 36) == 0\n  >>> countDivisibleBy([3, 7, 11], 37) == 0\n  >>> countDivisibleBy([3, 7, 11], 38) == 0\n  >>> countDivisibleBy([3, 7, 11], 39) == 0\n  >>> countDivisibleBy([3, 7, 11], 40) == 0\n  >>> countDivisibleBy([3, 7, 11], 41) == 0\n  >>> countDivisibleBy([3, 7, 11], 42) == 0\n  >>> countDivisibleBy([3, 7, 11], 43) == 0\n  >>> countDivisibleBy([3, 7, 11], 44) == 0\n  >>> countDivisibleBy([3, 7, 11], 45) == 0\n  >>> countDivisibleBy([3, 7, 11], 46) == 0\n  >>> countDivisibleBy([3, 7, 11], 47) == 0\n  >>> countDivisibleBy([3, 7, 11], 48) == 0\n  >>> countDivisibleBy([3, 7, 11], 49) == 0\n  >>> countDivisibleBy([3, 7, 11], 50) == 0\n  >>> countDivisibleBy([3, 7, 11], 51) == 0\n  >>> countDivisibleBy([3, 7, 11], 52) == 0\n  >>> countDivisibleBy([3, 7, 11], 53) == 0\n  >>> countDivisibleBy([3, 7, 11], 54) == 0\n  >>> countDivisibleBy([3, 7, 11], 55) == 0\n  >>> countDivisibleBy([3, 7, 11], 56) == 0\n  >>> countDivisibleBy([3, 7, 11], 57) == 0\n  >>> countDivisibleBy([3, 7, 11], 58) == 0\n  >>> countDivisibleBy([3, 7, 11], 59) == 0\n  >>> countDivisibleBy([3, 7, 11], 60) == 0\n  >>> countDivisibleBy([3, 7, 11], 61) == 0\n  >>> countDivisibleBy([3, 7, 11], 62) == 0\n  >>> countDivisibleBy([3, 7, 11], 63) == 0\n  >>> countDivisibleBy([3, 7, 11], 64) == 0\n  >>> countDivisibleBy([3, 7, 11], 65) == 0\n  >>> countDivisibleBy([3, 7, 11], 66) == 0\n  >>> countDivisibleBy([3, 7, 11], 67) == 0\n  >>> countDivisibleBy([3, 7, 11], 68) == 0\n  >>> countDivisibleBy([3, 7, 11], 69) == 0\n  >>> countDivisibleBy([3, 7, 11], 70) == 0\n  >>> countDivisibleBy([3, 7, 11], 71) == 0\n  >>> countDivisibleBy([3, 7, 11], 72) == 0\n  >>> countDivisibleBy([3, 7, 11], 73) == 0\n  >>> countDivisibleBy([3, 7, 11], 74) == 0\n  >>> countDivisibleBy([3, 7, 11], 75) == 0\n  >>> countDivisibleBy([3, 7, 11], 76) == 0\n  >>> countDivisibleBy([3, 7, 11], 77) == 0\n  >>> countDivisibleBy([3, 7, 11], 78) == 0\n  >>> countDivisibleBy([3, 7, 11], 79) == 0\n  >>> countDivisibleBy([3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movingOneBalls", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n  let arrLength = arr.length;\n  let arrCopy = arr.slice();\n  let arrCopyLength = arrCopy.length;\n  let arrCopyIndex = 0;\n  let arrCopyIndex2 = 0;\n  let arrCopyIndex3 = 0;\n  let arrCopyIndex4 = 0;\n  let arrCopyIndex5 = 0;\n  let arrCopyIndex6 = 0;\n  let arrCopyIndex7 = 0;\n  let arrCopyIndex8 = 0;\n  let arrCopyIndex9 = 0;\n  let arrCopyIndex10 = 0;\n  let arrCopyIndex11 = 0;\n  let arrCopyIndex12 = 0;\n  let arrCopyIndex13 = 0;\n  let arrCopyIndex14 = 0;\n  let arrCopyIndex15 = 0;\n  let arrCopyIndex16 = 0;\n  let arrCopyIndex17 = 0;\n  let arrCopyIndex18 = 0;\n  let arrCopyIndex19 = 0;\n  let arrCopyIndex20 = 0;\n  let arrCopyIndex21 = 0;\n  let arrCopyIndex22 = 0;\n  let arrCopyIndex23 = 0;\n  let arrCopyIndex24 = 0;\n  let arrCopyIndex25 = 0;\n  let arrCopyIndex26 = 0;\n  let arrCopyIndex27 = 0;\n  let arrCopyIndex28 = 0;\n  let arrCopyIndex29 = 0;\n  let arrCopyIndex30 = 0;\n  let arrCopyIndex31 = 0;\n  let arrCopyIndex32 = 0;\n  let arrCopyIndex33 = 0;\n  let arrCopyIndex34 = 0;\n  let arrCopyIndex35 = 0;\n  let arrCopyIndex36 = 0;\n  let arrCopyIndex37 = 0;\n  let arrCopyIndex38 = 0;\n  let arrCopyIndex39 = 0;\n  let arrCopyIndex40 = 0;\n  let arrCopyIndex41 = 0;\n  let arrCopyIndex42 = 0;\n  let arrCopyIndex43 = 0;\n  let arrCopyIndex44 = 0;\n  let arrCopyIndex45 = 0;\n  let arrCopyIndex46 = 0;\n  let arrCopyIndex47 = 0;\n  let arrCopyIndex48 = 0;\n  let arrCopyIndex49 = 0;\n  let arrCopyIndex50 = 0;\n  let arrCopyIndex51 = 0;\n  let arrCopyIndex52 = 0;\n  let arrCopyIndex53 = 0;\n  let arrCopyIndex54 = 0;\n  let arrCopyIndex55 = 0;\n  let arrCopyIndex56 = 0;\n  let arrCopyIndex57 = 0;\n  let arrCopyIndex58 = 0;\n  let arrCopyIndex59 = 0;\n  let arrCopyIndex60 = 0;\n  let arrCopyIndex61 = 0;\n  let arrCopyIndex62 = 0;\n  let arrCopyIndex63 = 0;\n  let arrCopyIndex64 = 0;\n  let arrCopyIndex65 = 0;\n  let arrCopyIndex66 = 0;\n  let arrCopyIndex67 = 0;\n  let arrCopyIndex68 = 0;\n  let arrCopyIndex69 = 0;\n  let arrCopyIndex70 = 0;\n  let arrCopyIndex71 = 0;\n  let arrCopyIndex72 = 0;\n  let arrCopyIndex73 = 0;\n  let arrCopyIndex74 = 0;\n  let arrCopyIndex75 = 0;\n  let arrCopyIndex76 = 0;\n  let arrCopyIndex77 = 0;\n  let arrCopyIndex78 = 0;\n  let arrCopyIndex79 = 0;\n  let arrCopyIndex80 = 0;\n  let arrCopyIndex81 = 0;\n  let arrCopyIndex82 = 0;\n  let arrCopyIndex83 = 0;\n  let arrCopyIndex84 = 0;\n  let arrCopyIndex85 = 0;\n  let arrCopyIndex86 = 0;\n  let arrCopyIndex87 = 0;\n  let arrCopyIndex88 = 0;\n  let arrCopyIndex89 = 0;\n  let arrCopyIndex90 = 0;\n  let arrCopyIndex91 = 0;\n  let arrCopyIndex92 = 0;\n  let arrCopyIndex93 = 0;\n  let arrCopyIndex94 = 0;\n  let arrCopyIndex95 = 0;\n  let arrCopyIndex96 = 0;\n  let arrCopyIndex97 = 0;\n  let arrCopyIndex98 = 0;\n  let arrCopyIndex99 = 0;\n  let arrCopyIndex100 = 0;\n  let arrCopyIndex101 = 0;\n  let arrCopyIndex102 = 0;\n  let arrCopyIndex103 = 0;\n  let arrCopyIndex104 = 0;\n  let arrCopyIndex105 = 0;\n  let arrCopyIndex106 = 0;\n  let arrCopyIndex107 = 0;\n  let arrCopyIndex108 = 0;\n  let arrCopyIndex109 = 0;\n  let arrCopyIndex110 = 0;\n  let arrCopyIndex111 = 0;\n  let arrCopyIndex112 = 0;\n  let arrCopyIndex113 = 0;\n  let arrCopyIndex114 = 0;\n  let arrCopyIndex115 = 0;\n  let arrCopyIndex116 = 0;\n  let arrCopyIndex117 = 0;\n  let arrCopyIndex118 = 0;\n  let arrCopyIndex119 = 0;\n  let arrCopyIndex120 = 0;\n  let arrCopyIndex121 = 0;\n  let arrCopyIndex122 = 0;\n  let arrCopyIndex123 = 0;\n  let arrCopyIndex124 = 0;\n  let arrCopyIndex125 = 0;\n  let arrCopyIndex126 = 0;\n  let arrCopyIndex127 = 0;\n  let arrCopyIndex128 = 0;\n  let arrCopyIndex129 = 0;\n  let arrCopyIndex130 = 0;\n  let arrCopyIndex131 = 0;\n  let arrCopyIndex132 = 0;\n  let arrCopyIndex133 = 0;\n  let arrCopyIndex134 = 0;\n  let arrCopyIndex135 = 0;\n  let arrCopyIndex136 = 0;\n  let arrCopyIndex137 = 0;\n  let arrCopyIndex138 = 0;\n  let arrCopyIndex139 = 0;\n  let arrCopyIndex140 = 0;\n  let arrCopyIndex141 = 0;\n  let arrCopyIndex142 = 0;\n  let arrCopyIndex143 = 0;\n  let arrCopyIndex144 = 0;\n  let arrCopyIndex145 = 0;\n  let arrCopyIndex146 = 0;\n  let arrCopyIndex147 = 0;\n  let arrCopyIndex148 = 0;\n  let arrCopyIndex149 = 0;\n  let arrCopyIndex150 = 0;\n  let arrCopyIndex151 = 0;\n  let arrCopyIndex152 = 0;\n  let arrCopyIndex153 = 0;\n  let arrCopyIndex154 = 0;\n  let arrCopyIndex155 = 0;\n  let arrCopyIndex156 = 0;\n  let arrCopyIndex157 = 0;\n  let arrCopyIndex158 = 0;\n  let arrCopyIndex159 = 0;\n  let arrCopyIndex160 = 0;\n  let arrCopyIndex161 = 0;\n  let arrCopyIndex162 = 0;\n  let arrCopyIndex163 = 0;\n  let arrCopyIndex164 = 0;\n  let arrCopyIndex165 = 0;\n  let arrCopyIndex166 = 0;\n  let arrCopyIndex167 = 0;\n  let arrCopyIndex168 = 0;\n  let arrCopyIndex169 = 0;\n  let arrCopyIndex170 = 0;\n  let arrCopyIndex171 = 0;\n  let arrCopyIndex172 = 0;\n  let arrCopyIndex173 = 0;\n  let arrCopyIndex174 = 0;\n  let arrCopyIndex175 = 0;\n  let arrCopyIndex176 = 0;\n  let arrCopyIndex177 = 0;\n  let arrCopyIndex178 = 0;\n  let arrCopyIndex179 = 0;\n  let arrCopyIndex180 = 0;\n  let arrCopyIndex181 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) ^ b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) ^ b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) ^ b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) ^ b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) ^ b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) ^ b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) & b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '100'\n  */\nconst stringOr = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) | b.charAt(i);\n  }\n  return result;\n};\n\n/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchanges", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length < lst2.length) {\n    result = isEven(lst1);\n  } else if (lst1.length > lst2.length) {\n    result = isEven(lst2);\n  }\n  return result;\n};\n\n/*\n  Given two lists of numbers, determine whether they are even.\n  Return true if they are even, false if they are odd.\n  For example:\n  isEven([2, 3]) => true\n  isEven([2, 4]) => false\n  isEven([2, 5]) => true\n  isEven([2, 6]) => false\n  isEven([2, 7]) => true\n  isEven([2, 8]) => false\n  isEven([2, 9]) => true\n  isEven([2, 10]) => false\n  isEven([2, 11]) => true\n  isEven([2, 12]) => false\n  isEven([2, 13]) => true\n  isEven([2, 14]) => false\n  isEven([2, 15]) => true\n  isEven([2, 16]) => false\n  isEven([2, 17]) => true\n  isEven([2, 18]) => false\n  isEven([2, 19]) => true\n  isEven([2, 20]) => false\n  isEven([2, 21]) => true\n  isEven([2, 22]) => false\n  isEven([2, 23]) => true\n  isEven([2, 24]) => false\n  isEven([2, 25]) => true\n  isEven([2, 26]) => false\n  isEven([2, 27]) => true\n  isEven([2, 28]) => false\n  isEven([2, 29]) => true\n  isEven([2, 30]) => false\n  isEven([2, 31]) => true\n  isEven([2, 32]) => false\n  isEven([2, 33]) => true\n  isEven([2, 34]) => false\n  isEven([2, 35]) => true\n  isEven([2, 36]) => false\n  isEven([2, 37]) => true\n  isEven([2, 38]) => false\n  isEven([2, 39]) => true\n  isEven([2, 40]) => false\n  isEven([2, 41]) => true\n  isEven([2, 42]) => false\n  isEven([2, 43]) => true\n  isEven([2, 44]) => false\n  isEven([2, 45]) => true\n  isEven([2, 46]) => false\n  isEven([2, 47]) => true\n  isEven([2, 48]) => false\n  isEven([2, 49]) => true\n  isEven([2, 50]) => false\n  isEven([2, 51]) => true\n  isEven([2, 52]) => false\n  isEven([2, 53]) => true\n  isEven([2, 54]) => false\n  isEven([2, 55]) => true\n  isEven([2, 56]) => false\n  isEven([2, 57]) => true\n  isEven([2, 58]) => false\n  isEven([2, 59]) => true\n  isEven([2, 60]) => false\n  isEven([2, 61]) => true\n  isEven([2, 62]) => false\n  isEven([2, 63]) => true\n  isEven([2, 64]) => false\n  isEven([2, 65]) => true\n  isEven([2, 66]) => false\n  isEven([2, 67]) => true\n  isEven([2, 68]) => false\n  isEven([2, 69]) => true\n  isEven([2, 70]) => false\n  isEven([2, 71]) => true\n  isEven([2, 72]) => false\n  isEven([2, 73]) => true\n  isEven([2, 74]) => false\n  isEven([2, 75]) => true\n  isEven([2, 76]) => false\n  isEven([2, 77]) => true\n  isEven([2, 78]) => false\n  isEven([2, 79]) => true\n  isEven([2, 80]) => false\n  isEven([2, 81]) => true\n  isEven([2, 82]) => false\n  isEven([2, 83]) => true\n  isEven([2, 84]) => false\n  isEven([2, 85]) => true\n  isEven([2, 86]) => false\n  isEven([2, 87]) => true\n  isEven([2, 88]) => false\n  isEven([2, 89]) => true\n  isEven([2, 90]) => false\n  isEven([2, 91]) => true\n  isEven([2, 92]) => false\n  isEven([2, 93]) => true\n  isEven([2, 94]) => false\n  isEven([2, 95]) => true\n  isEven([2, 96]) => false\n  isEven([2, 97]) => true\n  isEven([2, 98]) => false\n  isEven([2, 99]) => true\n  isEven([3, 0]) => false\n  isEven([3, 1]) => true\n  isEven([3, 2]) => false\n  isEven([3, 3]) => true\n  isEven([3, 4]) => false\n  isEven([3, 5]) => true\n  isEven([3, 6]) => false\n  isEven([3, 7]) => true\n  isEven([3, 8]) => false\n  isEven([3, 9]) => true\n  isEven([3, 10]) => false\n  isEven([3, 11]) => true\n  isEven([3, 12]) => false\n  isEven([3, 13]) => true\n  isEven([3, 14]) => false\n  isEven([3, 15]) => true\n  isEven([3, 16]) => false\n  isEven([3, 17]) => true\n  isEven([3, 18]) => false\n  isEven([3, 19]) => true\n  isEven([3, 20]) => false\n  isEven([3, 21]) => true\n  isEven([3, 22]) => false\n  isEven([3, 23]) => true\n  isEven([3, 24]) => false\n  isEven([3, 25]) => true\n  isEven([3, 26]) => false\n  isEven([3, 27]) => true\n  isEven([3, 28]) => false\n  isEven([3, 29]) => true\n  isEven([3, 30]) => false\n  isEven([3, 31]) => true\n  isEven([3, 32]) => false\n  isEven([3, 33]) => true\n  isEven([3, 34]) => false\n  isEven([3, 35]) => true\n  isEven([3, 36]) => false\n  isEven([3, 37]) => true\n  isEven([3, 38]) => false\n  isEven([3, 39]) => true\n  isEven([3, 40]) => false\n  isEven([3, 41]) => true\n  isEven([3, 42]) => false\n  isEven([3, 43]) => true\n  isEven([3, 44]) => false\n  isEven([3, 45]) => true\n  isEven([3, 46]) => false\n  isEven([3, 47]) => true\n  isEven([3, 48]) => false\n  isEven([3, 49]) => true\n  isEven([3, 50]) => false\n  isEven([3, 51]) => true\n  isEven([3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histograms", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const letters = test.split(' ').map(x => x.toLowerCase());\n  const histograms = {};\n  letters.forEach((letter) => {\n    const letterHistogram = histograms[letter] || { [letter]: 0 };\n    letterHistogram.count++;\n    letterHistogram.countOccurrences[letter] = letterHistogram.countOccurrences[letter] || 0;\n    letterHistogram.countOccurrences[letter]++;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms(['a b c', 'a b b a', 'b b b b a', 'b b b a b b a', 'b b b a b b a', 'b b b a b b a b b a', 'b b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a b b a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reversesDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = len - 1\n  let j = len - 1\n  while (i >= 0 && j >= 0) {\n    if (s[i] === s[j]) {\n      result += s[i]\n      i--\n      j--\n    } else {\n      isPalindrome = true\n      break\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDeleteReverse = (s, c) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = len - 1\n  let j = len - 1\n  while (i >= 0 && j >= 0) {\n    if (s[i] === s[j]) {\n      result += s[i]\n      i--\n      j--\n    } else {\n      isPalindrome = true\n      break\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDeleteReverseReverse = (s, c) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = len - 1\n  let j = len - 1\n  while (i >= 0 && j >= 0) {\n    if (s[i] === s[j]) {\n      result += s[i]\n      i--\n      j--\n    } else {\n      isPalindrome = true\n      break\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDeleteReverseReverseReverse = (s, c) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = len - 1\n  let j = len - 1\n  while (i >= 0 && j >= 0) {\n    if (s[i] === s[j]) {\n      result += s[i]\n      i--\n      j--\n    } else {\n      isPalindrome = true\n      break\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDeleteReverseReverseReverse = (s, c) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = len - 1\n  let j = len - 1\n  while (i >= 0 && j >= 0) {\n    if (s[i] === s[j]) {\n      result += s[i]\n      i--\n      j--\n    } else {\n      isPalindrome = true\n      break\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDeleteReverseReverseReverseReverse = (s, c) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = len - 1\n  let j = len - 1\n  while (i >= 0 && j >= 0) {\n    if (s[i] === s[j]) {\n      result += s[i]\n      i--\n      j--\n    } else {\n      isPalindrome = true\n      break\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDeleteReverseReverseReverseReverse = (s, c) => {\n  let result = ''\n  let isPalindrome = false\n  let len = s.length\n  let i = len - 1\n  let j = len - 1\n  while (i >= 0 && j >= 0) {\n    if (s[i] === s[j]) {\n      result += s[i]\n      i--\n      j--\n    } else {\n      isPalindrome = true\n      break\n    }\n  }\n  return [result, isPalindrome]\n}\n\n/*Task\n  Given two strings s and c, you have to delete all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odderCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n  let odderCounts = []\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        oddCount += 1\n      }\n    }\n    odderCounts.push(oddCount)\n  }\n  return odderCounts\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let evenCounts = []\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = 0\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        evenCount += 1\n      }\n    }\n    evenCounts.push(evenCount)\n  }\n  return evenCounts\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of pairs of adjacent elements\n  in the string i of the input.\" where all the i's should be replaced by the number\n  of pairs of adjacent digits in the i'th string of the input.\n\n  >>> pairCount(['1234567'])\n  [\"the number of pairs of adjacent elements 4n the str4ng 4 of the 4nput.\"]\n  >>> pairCount(['3',\"11111111\"])\n  [\"the number of pairs of adjacent elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of pairs of adjacent elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst pairCount = (lst) => {\n  let pairCounts = []\n  for (let i = 0; i < lst.length; i++) {\n    let pairCount = 0\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        pairCount += 1\n      }\n    }\n    pairCounts.push(pairCount)\n  }\n  return pairCounts\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of triples of adjacent elements\n  in the string i of the input.\" where all the i's should be replaced by the number\n  of triples of adjacent digits in the i'th string of the input.\n\n  >>> tripleCount(['1234567'])\n  [\"the number of triples of adjacent elements 4n the str4ng 4 of the 4nput.\"]\n  >>> tripleCount(['3',\"11111111\"])\n  [\"the number of triples of adjacent elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of triples of adjacent elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst tripleCount = (lst) => {\n  let tripleCounts = []\n  for (let i = 0; i < lst.length; i++) {\n    let tripleCount = 0\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        tripleCount += 1\n      }\n    }\n    tripleCounts.push(tripleCount)\n  }\n  return tripleCounts\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quintuples of adjacent elements\n  in the string i of the input.\" where all the i's should be replaced by the number\n  of quintuples of adjacent digits in the i'th string of the input.\n\n  >>> quintupleCount(['1234567'])\n  [\"the number of quintuples of adjacent elements 4n the str4ng 4 of the 4nput.\"]\n  >>> quintupleCount(['3',\"11111111\"])\n  [\"the number of quintuples of adjacent elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of quintuples of adjacent elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quintupleCount = (lst) => {\n  let quintupleCounts = []\n  for (let i = 0; i < lst.length; i++) {\n    let quintupleCount = 0\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        quintupleCount += 1\n      }\n    }\n    quintupleCounts.push(quintupleCount)\n  }\n  return quintupleCounts\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of hexadecimal elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of hexadecimal digits in the i'th string of the input.\n\n  >>> hexadecimalCount(['1234567'])\n  [\"the number of hexadecimal elements 4n the str4ng 4 of the 4nput.\"]\n  >>> hexadecimalCount(['3',\"11111111\"])\n  [\"the number of hexadecimal elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of hexadecimal elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst hexadecimalCount = (lst) => {\n  let hexadecimalCounts = []\n  for (let i = 0; i < lst.length; i++) {\n    let hexadecimalCount = 0\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        hexadecimalCount += 1\n      }\n    }\n    hexadecimalCounts.push(hexadecimalCount)\n  }\n  return hexadecimalCounts\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of binary elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of binary digits in the i'th string of the input.\n\n  >>> binaryCount(['1234567'])\n  [\"the number of binary elements 4n the str4ng 4 of the 4nput.\"]\n  >>> binaryCount(['3',\"11111111\"])\n  [\"the number of binary elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of binary elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst binaryCount = (lst) => {\n  let binaryCounts = []\n  for (let i = 0; i < lst.length; i++) {\n    let binaryCount = 0\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        binaryCount += 1\n      }\n    }\n    binaryCounts.push(binaryCount)\n  }\n  return binaryCounts\n}\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of octal elements in the\n  string i of the input.\" ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubsArraySums", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  const minSum = nums.reduce((acc, num) => {\n    return Math.min(acc, num);\n  }, 0);\n  return nums.reduce((acc, num) => {\n    return Math.min(acc, num - minSum);\n  }, 0);\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 4\n  maxSubsArraySums([-1, -2, -3]) == 6\n  */\nconst maxSubsArraySums = (nums) => {\n  const maxSum = nums.reduce((acc, num) => {\n    return Math.max(acc, num);\n  }, 0);\n  return nums.reduce((acc, num) => {\n    return Math.max(acc, num - maxSum);\n  }, 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  minDistSubsArraySums([2, 3, 4, 1, 2, 4]) == 3\n  minDistSubsArraySums([-1, -2, -3]) == 3\n  */\nconst minDistSubsArraySums = (nums) => {\n  const minDistSum = nums.reduce((acc, num) => {\n    return Math.min(acc, num);\n  }, 0);\n  return nums.reduce((acc, num) => {\n    return Math.min(acc, num - minDistSum);\n  }, 0);\n};\n\n/*\n  Given an array of integers nums, find the maximum number of distinct sub-arrays\n  of nums.\n  Example\n  maxDistSubsArraySums([2, 3, 4, 1, 2, 4]) == 3\n  maxDistSubsArraySums([-1, -2, -3]) == 3\n  */\nconst maxDistSubsArraySums = (nums) => {\n  const maxDistSum = nums.reduce((acc, num) => {\n    return Math.max(acc, num);\n  }, 0);\n  return nums.reduce((acc, num) => {\n    return Math.max(acc, num - maxDistSum);\n  }, 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  minDistSubsArraySums([2, 3, 4, 1, 2, 4]) == 3\n  minDistSubsArraySums([-1, -2, -3]) == 3\n  */\nconst minDistSubsArraySumsNoDuplicates = (nums) => {\n  const minDistSum = nums.reduce((acc, num) => {\n    return Math.min(acc, num);\n  }, 0);\n  return nums.reduce((acc, num) => {\n    return Math.min(acc, num - minDistSum);\n  }, 0);\n};\n\n/*\n  Given an array of integers nums, find the maximum number of distinct sub-arrays\n  of nums.\n  Example\n  maxDistSubsArraySums([2, 3, 4, 1, 2, 4]) == 3\n  maxDistSubsArraySums([-1, -2, -3]) == 3\n  */\nconst maxDistSubsArraySumsNoDuplicates = (nums) => {\n  const maxDistSum = nums.reduce((acc, num) => {\n    return Math.max(acc, num);\n  }, 0);\n  return nums.reduce((acc, num) => {\n    return Math.max(acc, num - maxDistSum);\n  }, 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  minDistSubsArraySums([2, 3, 4, 1, 2, 4]) == 3\n  minDistSubsArraySums([-1, -2, -3]) == 3\n  */\nconst minDistSubsArraySumsNoDuplicatesNoDuplicates = (nums) => {\n  const minDistSum = nums.reduce((acc, num) => {\n    return Math.min(acc, num);\n  }, 0);\n  return nums.reduce((acc, num) => {\n    return Math.min(acc, num - minDistSum);\n  }, 0);\n};\n\n/*\n  Given an array of integers nums, find the maximum number of distinct sub-arrays\n  of nums.\n  Example\n  maxDistSubsArraySums([2, 3, 4, 1, 2, 4]) == 3\n  maxDistSubsArraySums([-1, -2, -3]) == 3\n  */\nconst maxDistSubsArraySumsNoDuplicatesNoDuplicates = (nums) => {\n  const maxDistSum = nums.reduce((acc, num) => {\n    return Math.max(acc, num);\n  }, 0);\n  return nums.reduce((acc, num) => {\n    return Math.max(acc, num - maxDistSum);\n  }, 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  minDistSubsArraySums([2, 3, 4, 1, 2, 4]) == 3\n  minDistSubsArraySums([-1, -2, -3]) == 3\n  */\nconst minDistSubsArraySumsNoDuplicatesNoDuplicatesNoDuplicates = (nums) => {\n  const minDistSum = nums.reduce((acc, num) => {\n    return Math.min(acc, num);\n  }, 0);\n  return nums.reduce((acc, num) => {\n    return Math.min(acc, num - minDistSum);\n  }, 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  minDistSubsArraySums([2, 3, 4, 1, 2, 4]) == 3\n  minDistSubsArraySums([-1, -2, -3]) == 3\n  */\nconst minDistSubsArraySumsNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (nums) => {\n  const minDistSum = nums.reduce((acc, num) => {\n    return Math.min(acc, num);\n  }, 0);\n  return nums.reduce((acc, num) => {\n    return Math.min(acc, num - minDistSum);\n  }, 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  minDistSubsArraySums([2, 3, 4, 1, 2, 4]) == 3\n  minDistSubsArraySums([-1, -2, -3]) == 3\n  */\nconst minDistSubsArraySumsNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (nums) => {\n  const minDistSum = nums.reduce((acc, num) => {\n    return Math.min(acc, num);\n  }, 0);\n  return nums.reduce((acc, num) => {\n    return Math.min(acc, num - minDistSum);\n  }, 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  minDistSubsArraySums([2, 3, 4, 1, 2, 4]) == 3\n  minDistSubsArraySums([-1, -2, -3]) == 3\n  */\nconst minDistSubsArraySumsNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (nums) => {\n  const minDistSum = nums.reduce((acc, num) => {\n    return Math.min(acc, num);\n  }, 0);\n  return nums.reduce((acc, num) => {\n    return Math.min(acc, num - minDistSum);\n  }, 0);\n};\n\n/*\n  Given an array of integers nums, find the minimum number of distinct sub-arrays\n  of nums.\n  Example\n  minDistSubsArraySums([2, 3, 4, 1, 2, 4]) == 3\n  minDistSubsArraySums([-1, -2, -3]) == 3\n  */\nconst minDistSubsArraySumsNoDuplicate", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        result += (grid[i][j + 1] === 0)? 1 : 0;\n        result += (grid[i][j - 1] === 0)? 1 : 0;\n      }\n    }\n  }\n  return result * capacity;\n};\n\n// https://leetcode.com/problems/remove-duplicate-elements-from-sorted-array/discuss/47471/Java-Solution-for-Remove-Duplicate-Elements-from-Sorted-Array\nconst removeDuplicate = (nums) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (seen[num]) {\n      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/remove-duplicate-elements-from-sorted-array/discuss/47471/Java-Solution-for-Remove-Duplicate-Elements-from-Sorted-Array\nconst removeDuplicates = (nums) => {\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (num in result) {\n      continue;\n    }\n    result.push(num);\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/remove-duplicate-elements-from-sorted-array/discuss/47471/Java-Solution-for-Remove-Duplicate-Elements-from-Sorted-Array\nconst removeDuplicatesII = (nums) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (seen[num]) {\n      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/remove-duplicate-elements-from-sorted-array/discuss/47471/Java-Solution-for-Remove-Duplicate-Elements-from-Sorted-Array\nconst removeDuplicatesIII = (nums) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (num in seen) {\n      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/remove-duplicate-elements-from-sorted-array/discuss/47471/Java-Solution-for-Remove-Duplicate-Elements-from-Sorted-Array\nconst removeDuplicatesIV = (nums) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (num in seen) {\n      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/remove-duplicate-elements-from-sorted-array/discuss/47471/Java-Solution-for-Remove-Duplicate-Elements-from-Sorted-Array\nconst removeDuplicatesV = (nums) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (num in seen) {\n      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/remove-duplicate-elements-from-sorted-array/discuss/47471/Java-Solution-for-Remove-Duplicate-Elements-from-Sorted-Array\nconst removeDuplicatesW = (nums) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (num in seen) {\n      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/remove-duplicate-elements-from-sorted-array/discuss/47471/Java-Solution-for-Remove-Duplicate-Elements-from-Sorted-Array\nconst removeDuplicatesX = (nums) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (num in seen) {\n      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/remove-duplicate-elements-from-sorted-array/discuss/47471/Java-Solution-for-Remove-Duplicate-Elements-from-Sorted-Array\nconst removeDuplicatesY = (nums) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (num in seen) {\n      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/remove-duplicate-elements-from-sorted-array/discuss/47471/Java-Solution-for-Remove-Duplicate-Elements-from-Sorted-Array\nconst removeDuplicatesZ = (nums) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (num in seen) {\n      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/remove-duplicate-elements-from-sorted-array/discuss/47471/Java-Solution-for-Remove-Duplicate-Elements-from-Sorted-Array\nconst removeDuplicatesAA = (nums) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (num in seen) {\n      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/remove-duplicate-elements-from-sorted-array/discuss/47471/Java-Solution-for-Remove-Duplicate-Elements-from-Sorted-Array\nconst removeDuplicatesAB = (nums) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (num in seen) {\n      continue;\n    }\n    seen[num] = true;\n    result.push(num);\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/remove-duplicate-elements-from", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map((num) => parseInt(num, 2));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) == [-4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => parseInt(num, 2));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayAsc = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map((num) => parseInt(num, 2));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayAsc([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArrayAsc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayAsc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDescAsc = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => parseInt(num, 2));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDescAsc([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArrayDescAsc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDescAsc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayAscDesc = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map((num) => parseInt(num, 2));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDescDesc([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArrayDescDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDescDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDescDesc = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => parseInt(num, 2));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayAscDesc([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArrayAscDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayAscDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDescAscDesc = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.map((num) => parseInt(num, 2));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDescAscDesc([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArrayDescAscDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDescAscDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDescDescAsc = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => parseInt(num, 2));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDescDescAsc([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArrayDescDescAsc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDescDescAsc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDescDescDescAsc = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => parseInt(num, 2));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDescDescDescAsc([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArrayDescDescDescAsc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDescDescDescAsc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDescDescDescAsc = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  return sorted.map((num) => parseInt(num, 2));\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDescDescDescAsc([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArrayDescDescDescAsc([-2, -3, -4, -5, -6", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWord", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let wordCount = 0;\n  let wordCount2 = 0;\n  let wordCount3 = 0;\n  let wordCount4 = 0;\n  let wordCount5 = 0;\n  let wordCount6 = 0;\n  let wordCount7 = 0;\n  let wordCount8 = 0;\n  let wordCount9 = 0;\n  let wordCount10 = 0;\n  let wordCount11 = 0;\n  let wordCount12 = 0;\n  let wordCount13 = 0;\n  let wordCount14 = 0;\n  let wordCount15 = 0;\n  let wordCount16 = 0;\n  let wordCount17 = 0;\n  let wordCount18 = 0;\n  let wordCount19 = 0;\n  let wordCount20 = 0;\n  let wordCount21 = 0;\n  let wordCount22 = 0;\n  let wordCount23 = 0;\n  let wordCount24 = 0;\n  let wordCount25 = 0;\n  let wordCount26 = 0;\n  let wordCount27 = 0;\n  let wordCount28 = 0;\n  let wordCount29 = 0;\n  let wordCount30 = 0;\n  let wordCount31 = 0;\n  let wordCount32 = 0;\n  let wordCount33 = 0;\n  let wordCount34 = 0;\n  let wordCount35 = 0;\n  let wordCount36 = 0;\n  let wordCount37 = 0;\n  let wordCount38 = 0;\n  let wordCount39 = 0;\n  let wordCount40 = 0;\n  let wordCount41 = 0;\n  let wordCount42 = 0;\n  let wordCount43 = 0;\n  let wordCount44 = 0;\n  let wordCount45 = 0;\n  let wordCount46 = 0;\n  let wordCount47 = 0;\n  let wordCount48 = 0;\n  let wordCount49 = 0;\n  let wordCount50 = 0;\n  let wordCount51 = 0;\n  let wordCount52 = 0;\n  let wordCount53 = 0;\n  let wordCount54 = 0;\n  let wordCount55 = 0;\n  let wordCount56 = 0;\n  let wordCount57 = 0;\n  let wordCount58 = 0;\n  let wordCount59 = 0;\n  let wordCount60 = 0;\n  let wordCount61 = 0;\n  let wordCount62 = 0;\n  let wordCount63 = 0;\n  let wordCount64 = 0;\n  let wordCount65 = 0;\n  let wordCount66 = 0;\n  let wordCount67 = 0;\n  let wordCount68 = 0;\n  let wordCount69 = 0;\n  let wordCount70 = 0;\n  let wordCount71 = 0;\n  let wordCount72 = 0;\n  let wordCount73 = 0;\n  let wordCount74 = 0;\n  let wordCount75 = 0;\n  let wordCount76 = 0;\n  let wordCount77 = 0;\n  let wordCount78 = 0;\n  let wordCount79 = 0;\n  let wordCount80 = 0;\n  let wordCount81 = 0;\n  let wordCount82 = 0;\n  let wordCount83 = 0;\n  let wordCount84 = 0;\n  let wordCount85 = 0;\n  let wordCount86 = 0;\n  let wordCount87 = 0;\n  let wordCount88 = 0;\n  let wordCount89 = 0;\n  let wordCount90 = 0;\n  let wordCount91 = 0;\n  let wordCount92 = 0;\n  let wordCount93 = 0;\n  let wordCount94 = 0;\n  let wordCount95 = 0;\n  let wordCount96 = 0;\n  let wordCount97 = 0;\n  let wordCount98 = 0;\n  let wordCount99 = 0;\n  let wordCount100 = 0;\n  let wordCount101 = 0;\n  let wordCount102 = 0;\n  let wordCount103 = 0;\n  let wordCount104 = 0;\n  let wordCount105 = 0;\n  let wordCount106 = 0;\n  let wordCount107 = 0;\n  let wordCount108 = 0;\n  let wordCount109 = 0;\n  let wordCount110 = 0;\n  let wordCount111 = 0;\n  let wordCount112 = 0;\n  let wordCount113 = 0;\n  let wordCount114 = 0;\n  let wordCount115 = 0;\n  let wordCount116 = 0;\n  let wordCount117 = 0;\n  let wordCount118 = 0;\n  let wordCount119 = 0;\n  let wordCount120 = 0;\n  let wordCount121 = 0;\n  let wordCount122 = 0;\n  let wordCount123 = 0;\n  let wordCount124 = 0;\n  let wordCount125 = 0;\n  let wordCount126 = 0;\n  let wordCount127 = 0;\n  let wordCount128 = 0;\n  let wordCount129 = 0;\n  let wordCount130 = 0;\n  let wordCount131 = 0;\n  let wordCount132 = 0;\n  let wordCount133 = 0;\n  let wordCount134 = 0;\n  let wordCount135 = 0;\n  let wordCount136 = 0;\n  let wordCount137 = 0;\n  let wordCount138 = 0;\n  let wordCount139 = 0;\n  let wordCount140 = 0;\n  let wordCount141 = 0;\n  let wordCount142 = 0;\n  let wordCount143 = 0;\n  let wordCount144 = 0;\n  let wordCount145 = 0;\n  let wordCount146 = 0;\n  let wordCount147 = 0;\n  let wordCount148 = 0;\n  let wordCount149 = 0;\n  let wordCount150 = 0;\n  let wordCount151 = 0;\n  let wordCount152 = 0;\n  let wordCount153 = 0;\n  let wordCount154 = 0;\n  let wordCount155 = 0;\n  let wordCount156 = 0;\n  let wordCount157 = 0;\n  let wordCount158 = 0;\n  let wordCount159 = 0;\n  let wordCount160 = 0;\n  let wordCount161 = 0;\n  let wordCount162 = 0;\n  let wordCount163 = 0;\n  let wordCount164 = 0;\n  let wordCount165 = 0;\n  let wordCount166 = 0;\n  let wordCount167 = 0;\n  let wordCount168 = 0;\n  let wordCount169 = 0;\n  let wordCount170 = 0;\n  let wordCount171 = 0;\n  let wordCount172 = 0;\n  let wordCount173 = 0;\n  let wordCount174 = 0;\n  let wordCount175 = 0;\n  let wordCount176 = 0;\n  let wordCount177 = 0;\n  let wordCount178 = 0;\n  let wordCount179 = 0;\n  let wordCount180 = 0;\n  let wordCount181 = 0;\n  let wordCount182 = 0;\n  let wordCount183 = 0;\n  let wordCount184 = 0;\n  let wordCount185 = 0;\n  let wordCount186 = 0;\n  let wordCount187 = 0;\n  let wordCount188 = 0;\n  let wordCount189 = 0;\n  let wordCount190 = 0;\n  let wordCount191 = 0;\n  let wordCount192 = 0;\n  let wordCount193 = 0;\n  let wordCount194 = 0;\n  let wordCount195 = 0;\n  let wordCount196 = 0;\n  let wordCount197 = 0;\n  let wordCount198 = 0;\n  let wordCount199 = 0;\n  let wordCount200 = 0;\n  let wordCount201 = 0;\n  let wordCount202 = 0;\n  let wordCount203 = 0;\n  let wordCount204 = 0;\n  let wordCount205 = 0;\n  let wordCount206 = 0;\n  let wordCount207 = 0;\n  let wordCount208 = 0;\n  let wordCount209 = 0;\n  let wordCount210 = 0;\n  let wordCount211 = 0;\n  let wordCount212 = 0;\n  let wordCount213 = 0;\n  let wordCount214 = 0;\n  let wordCount215 = 0;\n  let wordCount216 = 0;\n  let wordCount217 = 0;\n  let wordCount218 = 0;\n  let wordCount219 = 0;\n  let wordCount220 = 0;\n  let wordCount221 = 0;\n  let wordCount222 = 0;\n  let wordCount223 = 0;\n  let wordCount224 = 0;\n  let wordCount225 = 0;\n  let wordCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "gottenCloserVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsLength = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsIndex2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsIndex103 = 0;\n  let vowelsIndex104 = 0;\n  let vowelsIndex105 = 0;\n  let vowelsIndex106 = 0;\n  let vowelsIndex107 = 0;\n  let vowelsIndex108 = 0;\n  let vowelsIndex109 = 0;\n  let vowelsIndex110 = 0;\n  let vowelsIndex111 = 0;\n  let vowelsIndex112 = 0;\n  let vowelsIndex113 = 0;\n  let vowelsIndex114 = 0;\n  let vowelsIndex115 = 0;\n  let vowelsIndex116 = 0;\n  let vowelsIndex117 = 0;\n  let vowelsIndex118 = 0;\n  let vowelsIndex119 = 0;\n  let vowelsIndex120 = 0;\n  let vowelsIndex121 = 0;\n  let vowelsIndex122 = 0;\n  let vowelsIndex123 = 0;\n  let vowelsIndex124 = 0;\n  let vowelsIndex125 = 0;\n  let vowelsIndex126 = 0;\n  let vowelsIndex127 = 0;\n  let vowelsIndex128 = 0;\n  let vowelsIndex129 = 0;\n  let vowelsIndex130 = 0;\n  let vowelsIndex131 = 0;\n  let vowelsIndex132 = 0;\n  let vowelsIndex133 = 0;\n  let vowelsIndex134 = 0;\n  let vowelsIndex135 = 0;\n  let vowelsIndex136 = 0;\n  let vowelsIndex137 = 0;\n  let vowelsIndex138 = 0;\n  let vowelsIndex139 = 0;\n  let vowelsIndex140 = 0;\n  let vowelsIndex141 = 0;\n  let vowelsIndex142 = 0;\n  let vowelsIndex143 = 0;\n  let vowelsIndex144 = 0;\n  let vowelsIndex145 = 0;\n  let vowelsIndex146 = 0;\n  let vowelsIndex147 = 0;\n  let vowelsIndex148 = 0;\n  let vowelsIndex149 = 0;\n  let vowelsIndex150 = 0;\n  let vowelsIndex151 = 0;\n  let vowelsIndex152 = 0;\n  let vowelsIndex153 = 0;\n  let vowelsIndex154 = 0;\n  let vowelsIndex155 = 0;\n  let vowelsIndex156 = 0;\n  let vowelsIndex157 = 0;\n  let vowelsIndex158 = 0;\n  let vowelsIndex159 = 0;\n  let vowelsIndex160 = 0;\n  let vowelsIndex161 = 0;\n  let vowelsIndex162 = 0;\n  let vowelsIndex163 = 0;\n  let vowelsIndex164 = 0;\n  let vowelsIndex165 = 0;\n  let vowelsIndex166 = 0;\n  let vowelsIndex167 = 0;\n  let vowelsIndex168 = 0;\n  let vowelsIndex169 = 0;\n  let vowelsIndex170 = 0;\n  let vowelsIndex171 = 0;\n  let vowelsIndex172 = 0;\n  let vowelsIndex173 = 0;\n  let vowelsIndex174 = 0;\n  let vowelsIndex175 = 0;\n  let vowelsIndex176 = 0;\n  let vowelsIndex177 = 0;\n  let vowelsIndex178 = 0;\n  let vowelsIndex179 = 0;\n  let vowelsIndex180 = 0;\n  let vowelsIndex181 = 0;\n  let vowelsIndex182 = 0;\n  let vowelsIndex183 = 0;\n  let vowelsIndex184 = 0;\n  let vowelsIndex185 = 0;\n  let vowelsIndex186 = 0;\n  let vowelsIndex187 = 0;\n  let vowelsIndex188 = 0;\n  let vowelsIndex189 = 0;\n  let vowelsIndex190 = 0;\n  let vowelsIndex191 = 0;\n  let vowelsIndex192 = 0;\n  let vowelsIndex193 = 0;\n  let vowelsIndex194 = 0;\n  let vowelsIndex195", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [];\n  let result = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longer", "gc": "<|endoftext|>/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n\n  let longest = 0\n  let longestLength = 0\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    const length = string.length\n\n    if (length > longestLength) {\n      longestString = string\n      longestLength = length\n    }\n\n    if (length > longest) {\n      longest = length\n    }\n  }\n\n  return longestString\n}\n\n/* Given a string, return its reverse (ASCII-only) version. Return the empty string if\n  the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"bc\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  */\nconst reverse = (string) => {\n  if (!string) {\n    return ''\n  }\n\n  return string.split('').reverse().join('')\n}\n\n/* Given a string, return its lowercase version. Return the empty string if\n  the input string is empty.\n  >>> lower(\"\")\n  \"\"\n  >>> lower(\"a\")\n  \"a\"\n  >>> lower(\"ab\")\n  \"ab\"\n  >>> lower(\"abc\")\n  \"abc\"\n  */\nconst lower = (string) => {\n  if (!string) {\n    return ''\n  }\n\n  return string.split('').map(char => char.toLowerCase()).join('')\n}\n\n/* Given a string, return its uppercase version. Return the empty string if\n  the input string is empty.\n  >>> upper(\"\")\n  \"\"\n  >>> upper(\"a\")\n  \"A\"\n  >>> upper(\"AB\")\n  \"AB\"\n  >>> upper(\"ABC\")\n  \"ABC\"\n  */\nconst upper = (string) => {\n  if (!string) {\n    return ''\n  }\n\n  return string.split('').map(char => char.toUpperCase()).join('')\n}\n\n/* Given a string, return its trim version. Return the empty string if\n  the input string is empty.\n  >>> trim(\"\")\n  \"\"\n  >>> trim(\"a\")\n  \"a\"\n  >>> trim(\"ab\")\n  \"ab\"\n  >>> trim(\"abc\")\n  \"abc\"\n  */\nconst trim = (string) => {\n  if (!string) {\n    return ''\n  }\n\n  return string.trim()\n}\n\n/* Given a string, return its trim version. Return the empty string if\n  the input string is empty.\n  >>> trim(\" \")\n  \"\"\n  >>> trim(\"a b\")\n  \"a b\"\n  >>> trim(\"a b c\")\n  \"a b c\"\n  */\nconst trimSpace = (string) => {\n  if (!string) {\n    return ''\n  }\n\n  return string.trim().replace(/\\s/g, '')\n}\n\n/* Given a string, return its trim version. Return the empty string if\n  the input string is empty.\n  >>> trim(\" \")\n  \"\"\n  >>> trim(\"a b\")\n  \"a b\"\n  >>> trim(\"a b c\")\n  \"a b c\"\n  */\nconst trimAll = (string) => {\n  if (!string) {\n    return ''\n  }\n\n  return string.trim().replace(/\\s+/g, '')\n}\n\n/* Given a string, return its trim version. Return the empty string if\n  the input string is empty.\n  >>> trim(\" \")\n  \"\"\n  >>> trim(\"a b\")\n  \"a b\"\n  >>> trim(\"a b c\")\n  \"a b c\"\n  */\nconst trimAllSpace = (string) => {\n  if (!string) {\n    return ''\n  }\n\n  return string.trim().replace(/\\s+/g, '').replace(/\\s/g, '')\n}\n\n/* Given a string, return its trim version. Return the empty string if\n  the input string is empty.\n  >>> trim(\" \")\n  \"\"\n  >>> trim(\"a b\")\n  \"a b\"\n  >>> trim(\"a b c\")\n  \"a b c\"\n  */\nconst trimAllSpaceAll = (string) => {\n  if (!string) {\n    return ''\n  }\n\n  return string.trim().replace(/\\s+/g, '').replace(/\\s/g, '').replace(/\\s+/g, '')\n}\n\n/* Given a string, return its trim version. Return the empty string if\n  the input string is empty.\n  >>> trim(\" \")\n  \"\"\n  >>> trim(\"a b\")\n  \"a b\"\n  >>> trim(\"a b c\")\n  \"a b c\"\n  */\nconst trimAllSpaceAllSpace = (string) => {\n  if (!string) {\n    return ''\n  }\n\n  return string.trim().replace(/\\s+/g, '').replace(/\\s/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '')\n}\n\n/* Given a string, return its trim version. Return the empty string if\n  the input string is empty.\n  >>> trim(\" \")\n  \"\"\n  >>> trim(\"a b\")\n  \"a b\"\n  >>> trim(\"a b c\")\n  \"a b c\"\n  */\nconst trimAllSpaceAllSpaceAllSpace = (string) => {\n  if (!string) {\n    return ''\n  }\n\n  return string.trim().replace(/\\s+/g, '').replace(/\\s/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '')\n}\n\n/* Given a string, return its trim version. Return the empty string if\n  the input string is empty.\n  >>> trim(\" \")\n  \"\"\n  >>> trim(\"a b\")\n  \"a b\"\n  >>> trim(\"a b c\")\n  \"a b c\"\n  */\nconst trimAllSpaceAllSpaceAllSpaceAllSpaceAllSpace = (string) => {\n  if (!string) {\n    return ''\n  }\n\n  return string.trim().replace(/\\s+/g, '').replace(/\\s/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '')\n}\n\n/* Given a string, return its trim version. Return the empty string if\n  the input string is empty.\n  >>> trim(\" \")\n  \"\"\n  >>> trim(\"a b\")\n  \"a b\"\n  >>> trim(\"a b c\")\n  \"a b c\"\n  */\nconst trimAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpace = (string) => {\n  if (!string) {\n    return ''\n  }\n\n  return string.trim().replace(/\\s+/g, '').replace(/\\s/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '')\n}\n\n/* Given a string, return its trim version. Return the empty string if\n  the input string is empty.\n  >>> trim(\" \")\n  \"\"\n  >>> trim(\"a b\")\n  \"a b\"\n  >>> trim(\"a b c\")\n  \"a b c\"\n  */\nconst trimAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpace = (string) => {\n  if (!string) {\n    return ''\n  }\n\n  return string.trim().replace(/\\s+/g, '').replace(/\\s/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '').replace(/\\s+/g, '')\n}\n\n/* Given a string, return its trim version. Return the empty string if\n  the input string is empty.\n  >>> trim(\" \")\n  \"\"\n  >>> trim(\"a b\")\n  \"a b\"\n  >>> trim(\"a b c\")\n  \"a b c\"\n  */\nconst trimAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAllSpaceAll", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximums", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n  const result = [];\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(max);\n    max = min;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairs = function(nums) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let [key, value] of map.entries()) {\n    if (value >= 2) {\n      result.push([key, value]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairs2 = function(nums) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let [key, value] of map.entries()) {\n    if (value >= 2) {\n      result.push([key, value]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairs3 = function(nums) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let [key, value] of map.entries()) {\n    if (value >= 2) {\n      result.push([key, value]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairs4 = function(nums) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let [key, value] of map.entries()) {\n    if (value >= 2) {\n      result.push([key, value]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairs5 = function(nums) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let [key, value] of map.entries()) {\n    if (value >= 2) {\n      result.push([key, value]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairs6 = function(nums) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let [key, value] of map.entries()) {\n    if (value >= 2) {\n      result.push([key, value]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairs7 = function(nums) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let [key, value] of map.entries()) {\n    if (value >= 2) {\n      result.push([key, value]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairs8 = function(nums) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let [key, value] of map.entries()) {\n    if (value >= 2) {\n      result.push([key, value]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairs9 = function(nums) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let [key, value] of map.entries()) {\n    if (value >= 2) {\n      result.push([key, value]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairs10 = function(nums) {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    if (map.has(num)) {\n      map.set(num, map.get(num) + 1);\n    } else {\n      map.set(num, 1);\n    }\n  }\n  const result = [];\n  for (let [key, value] of map.entries()) {\n    if (value >= 2) {\n      result.push([key, value]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solutions", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==> 0\n  */\nconst solutions15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  while (j < arr.length) {\n    if (arr[j] > 9) {\n      temp = arr[j];\n      arr[j] = arr[i];\n      arr[i] = temp;\n    }\n    sum += arr[j];\n    j++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most three digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 3\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  while (j < arr.length) {\n    if (arr[j] > 9) {\n      temp = arr[j];\n      arr[j] = arr[i];\n      arr[i] = temp;\n    }\n    sum += arr[j];\n    j++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most four digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  while (j < arr.length) {\n    if (arr[j] > 9) {\n      temp = arr[j];\n      arr[j] = arr[i];\n      arr[i] = temp;\n    }\n    sum += arr[j];\n    j++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most five digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 5\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  while (j < arr.length) {\n    if (arr[j] > 9) {\n      temp = arr[j];\n      arr[j] = arr[i];\n      arr[i] = temp;\n    }\n    sum += arr[j];\n    j++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most six digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 6\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  while (j < arr.length) {\n    if (arr[j] > 9) {\n      temp = arr[j];\n      arr[j] = arr[i];\n      arr[i] = temp;\n    }\n    sum += arr[j];\n    j++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most seven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 7\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  while (j < arr.length) {\n    if (arr[j] > 9) {\n      temp = arr[j];\n      arr[j] = arr[i];\n      arr[i] = temp;\n    }\n    sum += arr[j];\n    j++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most eight digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 8\n      Output: 24 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let temp = 0;\n  while (i < arr.length) {\n    if (arr[i] > 9) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n    }\n    sum += arr[i];\n    i++;\n    j++;\n  }\n  while (j < arr.length) {\n    if (arr[j] > 9) {\n      temp = arr[j];\n      arr[j] = arr[i];\n      arr[i] = temp;\n    }\n    sum += arr[j];\n    j++;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "gottenOdderCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n  let list = [];\n  let num = 1;\n  let prev = 1;\n  let curr = 1;\n  while (num < n) {\n    if (prev % 2 === 0) {\n      list.push(curr);\n      curr = prev + 1;\n      prev = curr;\n    } else {\n      curr = prev + 3;\n      prev = curr;\n    }\n    num = num + 1;\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenEvenCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so the even numbers are only 1, 5, 16, and 8.\n  */\nconst gottenEvenCollatz = (n) => {\n  let list = [];\n  let num = 1;\n  let prev = 1;\n  let curr = 1;\n  while (num < n) {\n    if (prev % 2 === 0) {\n      list.push(curr);\n      curr = prev + 1;\n      prev = curr;\n    } else {\n      curr = prev + 3;\n      prev = curr;\n    }\n    num = num + 1;\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenPrimeCollatz(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13, 17, 19], \n  so the prime numbers are only 1, 3, 5, 7, 9, 11, 13, 17, 19, and 19.\n  */\nconst gottenPrimeCollatz = (n) => {\n  let list = [];\n  let num = 1;\n  let prev = 1;\n  let curr = 1;\n  while (num < n) {\n    if (prev % 2 === 0) {\n      list.push(curr);\n      curr = prev + 1;\n      prev = curr;\n    } else {\n      curr = prev + 3;\n      prev = curr;\n    }\n    num = num + 1;\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the natural numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenNaturalCollatz(5) returns [1, 3, 5, 7, 9, 11, 13, 17, 19] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997].\n  */\nconst gottenNaturalCollatz = (n) => {\n  let list = [];\n  let num = 1;\n  let prev = 1;\n  let curr = 1;\n  while (num < n) {\n    if (prev % 2 === 0) {\n      list.push(curr);\n      curr = prev + 1;\n      prev = curr;\n    } else {\n      curr = prev + 3;\n      prev = curr;\n    }\n    num = num + 1;\n  }\n  return list;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime factors in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDates", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  const dateFormat = /^(\\d{1,2})-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$/;\n  const dateArray = date.split('-');\n  const dateYear = dateArray[0];\n  const dateMonth = dateArray[1];\n  const dateDay = dateArray[2];\n  const dateYearInt = parseInt(dateYear, 10);\n  const dateMonthInt = parseInt(dateMonth, 10);\n  const dateDayInt = parseInt(dateDay, 10);\n  const dateYearInt = dateYearInt % 100;\n  const dateMonthInt = dateMonthInt % 100;\n  const dateDayInt = dateDayInt % 100;\n  const dateYearInt = dateYearInt / 100;\n  const dateMonthInt = dateMonthInt / 100;\n  const dateDayInt = dateDayInt / 100;\n  const dateYearInt = dateYearInt + 1900;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2000;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2010;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayInt = dateDayInt + 1;\n  const dateYearInt = dateYearInt + 2100;\n  const dateMonthInt = dateMonthInt + 1;\n  const dateDayIn", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWord", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/[,]+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordss = (txt) => {\n  const words = txt.split(/[,]+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordss = (txt) => {\n  const words = txt.split(/[,]+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordss = (txt) => {\n  const words = txt.split(/[,]+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordss = (txt) => {\n  const words = txt.split(/[,]+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordss = (txt) => {\n  const words = txt.split(/[,]+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordss = (txt) => {\n  const words = txt.split(/[,]+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return a list of words split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordss = (txt) => {\n  const words = txt.split(/[,]+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 0) {\n      if (word.length % 2 === 0) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSort", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n  let sorted = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5, 6, 7]) ➞ false\n  isSort([5, 4, 6, 7]) ➞ true\n  isSort([5, 4, 6, 7].reverse()) ➞ true\n  isSort([5, 4, 6, 7].reverse().sort()) ➞ true\n  isSort([5, 4, 6, 7].reverse().sort().sort()) ➞ true\n  isSort([5, 4, 6, 7].reverse().sort().sort().sort()) ➞ false\n  */\nconst isSortDesc = (lst) => {\n  let sorted = false;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1 duplicate\n  of the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isSort([5, 4, 6, 7].reverse().sort().sort()) ➞ true\n  isSort([5, 4, 6, 7].reverse().sort().sort().sort()) ➞ false\n  isSort([5, 4, 6, 7].reverse().sort().sort().sort().sort()) ➞ false\n  isSort([5, 4, 6, 7].reverse().sort().sort().sort().sort().sort()) ➞ true\n  */\nconst isSortAndDesc = (lst) => {\n  let sorted = false;\n  for (let i = lst.length - 1; i >= 0; i--) {\n    if (lst[i] > lst[i + 1]) {\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order\n  and in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending order", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 < start2) {\n    return intersection(interval2, interval1);\n  }\n  if (end1 < end2) {\n    return intersection(interval1, interval2);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > start2) {\n    return intersection(interval2, interval1);\n  }\n  return false;\n};\n\n/*\n  [input] intervals: an array of intervals\n  [output] a boolean indicating whether each interval is prime\n*/\nconst isPrime = (intervals) => {\n  let isPrime = true;\n  for (let i = 0; i < intervals.length; i++) {\n    const [start, end] = intervals[i];\n    if (start > end) {\n      return false;\n    }\n    if (start === end) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 0) {\n      continue;\n    }\n    if (start % 2 === 1 && end % 2 === 1) {\n      continue;\n    }\n    if (start % 2 === 0 && end % 2 === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodsSign", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i])\n  }\n  return sum\n}", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPaths", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [gridValues, gridIndex] = createGridValues(grid);\n  const [visitedCells, visitedIndex] = createVisitedCells(grid);\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex);\n  return minPath;\n};\n\nmodule.exports = minPaths;\n\n},{\"./createGridValues\":2,\"./createVisitedCells\":3,\"./createMinPath\":4}],3:[function(require,module,exports){\nconst createGridValues = require('./createGridValues');\nconst createVisitedCells = require('./createVisitedCells');\nconst createMinPath = require('./createMinPath');\n\n/**\n * Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n * each cell of the grid contains a value. Every integer in the range [1, N * N]\n * inclusive appears exactly once on the cells of the grid.\n\n * You have to find the minimum path of length k in the grid. You can start\n * from any cell, and in each step you can move to any of the neighbor cells,\n * in other words, you can go to cells which share an edge with you current\n * cell.\n * Please note that a path of length k means visiting exactly k cells (not\n * necessarily distinct).\n * You CANNOT go off the grid.\n * A path A (of length k) is considered less than a path B (of length k) if\n * after making the ordered lists of the values on the cells that A and B go\n * through (let's call them lst_A and lst_B), lst_A is lexicographically less\n * than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n * such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n * lst_A[j] = lst_B[j].\n * It is guaranteed that the answer is unique.\n * Return an ordered list of the values on the cells that the minimum path go through.\n\n * Examples:\n\n    Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n    Output: [1, 2, 1]\n\n    Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n    Output: [1]\n */\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex, 0);\n  return minPath;\n};\n\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex, currentIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex, currentIndex + 1);\n  return minPath;\n};\n\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex, currentIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex, currentIndex + 1);\n  return minPath;\n};\n\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex, currentIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex, currentIndex + 1);\n  return minPath;\n};\n\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex, currentIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex, currentIndex + 1);\n  return minPath;\n};\n\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex, currentIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex, currentIndex + 1);\n  return minPath;\n};\n\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex, currentIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex, currentIndex + 1);\n  return minPath;\n};\n\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex, currentIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex, currentIndex + 1);\n  return minPath;\n};\n\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex, currentIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex, currentIndex + 1);\n  return minPath;\n};\n\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex, currentIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex, currentIndex + 1);\n  return minPath;\n};\n\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex, currentIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex, currentIndex + 1);\n  return minPath;\n};\n\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex, currentIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex, currentIndex + 1);\n  return minPath;\n};\n\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex, currentIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValues, gridIndex, visitedCells, visitedIndex, currentIndex + 1);\n  return minPath;\n};\n\nconst createMinPath = (gridValues, gridIndex, visitedCells, visitedIndex, currentIndex) => {\n  const [minPath, minPathIndex] = createMinPath(gridValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greaterCommonDivisors", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n  const aIsNegative = a < 0;\n  const bIsNegative = a < 0;\n  const aIsZero = a === 0;\n  const bIsZero = a === 0;\n  const aIsPositive = a > 0;\n  const bIsPositive = a > 0;\n  const aIsInfinite = Number.isFinite(a);\n  const bIsInfinite = Number.isFinite(b);\n  const aIsNaN = Number.isNaN(a);\n  const bIsNaN = Number.isNaN(b);\n  const aIsNegativeInfinity = Number.isFinite(a) && a < 0;\n  const bIsNegativeInfinity = Number.isFinite(b) && b < 0;\n  const aIsPositiveInfinity = Number.isFinite(a) && a > 0;\n  const bIsPositiveInfinity = Number.isFinite(b) && b > 0;\n  const aIsZeroInfinite = Number.isFinite(a) && a === 0;\n  const bIsZeroInfinite = Number.isFinite(b) && b === 0;\n  const aIsPositiveInfinityInfinite = Number.isFinite(a) && a < 0 && Number.isFinite(a);\n  const bIsPositiveInfinityInfinite = Number.isFinite(b) && b < 0 && Number.isFinite(b);\n  const aIsZeroInfiniteInfinite = Number.isFinite(a) && a === 0 && Number.isFinite(a);\n  const bIsZeroInfiniteInfinite = Number.isFinite(b) && b === 0 && Number.isFinite(b);\n  const aIsPositiveInfinityNegative = Number.isFinite(a) && a < 0 && Number.isFinite(a);\n  const bIsPositiveInfinityNegative = Number.isFinite(b) && b < 0 && Number.isFinite(b);\n  const aIsZeroInfiniteNegative = Number.isFinite(a) && a === 0 && Number.isFinite(a);\n  const bIsZeroInfiniteNegative = Number.isFinite(b) && b === 0 && Number.isFinite(b);\n  const aIsPositiveInfinityZero = Number.isFinite(a) && a < 0 && Number.isFinite(a);\n  const bIsPositiveInfinityZero = Number.isFinite(b) && b < 0 && Number.isFinite(b);\n  const aIsZeroInfiniteZero = Number.isFinite(a) && a === 0 && Number.isFinite(a);\n  const bIsZeroInfiniteZero = Number.isFinite(b) && b === 0 && Number.isFinite(b);\n  const aIsPositiveInfinityPositive = Number.isFinite(a) && a > 0 && Number.isFinite(a);\n  const bIsPositiveInfinityPositive = Number.isFinite(b) && b > 0 && Number.isFinite(b);\n  const aIsZeroInfinitePositive = Number.isFinite(a) && a === 0 && Number.isFinite(a);\n  const bIsZeroInfinitePositive = Number.isFinite(b) && b === 0 && Number.isFinite(b);\n  const aIsPositiveInfinityInfinityInfinity = Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0;\n  const bIsPositiveInfinityInfinityInfinity = Number.isFinite(b) && b > 0 && Number.isFinite(b) && b < 0;\n  const aIsZeroInfiniteInfinity = Number.isFinite(a) && a === 0 && Number.isFinite(a) && a < 0;\n  const bIsZeroInfiniteInfinity = Number.isFinite(b) && b === 0 && Number.isFinite(b) && b < 0;\n  const aIsPositiveInfinityNegativeInfinity = Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a);\n  const bIsPositiveInfinityNegativeInfinity = Number.isFinite(b) && b > 0 && Number.isFinite(b) && b < 0 && Number.isFinite(b);\n  const aIsZeroInfiniteNegativeInfinity = Number.isFinite(a) && a === 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a);\n  const bIsZeroInfiniteNegativeInfinity = Number.isFinite(b) && b === 0 && Number.isFinite(b) && b < 0 && Number.isFinite(b);\n  const aIsPositiveInfinityZeroInfinity = Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a);\n  const bIsPositiveInfinityZeroInfinity = Number.isFinite(b) && b > 0 && Number.isFinite(b) && b < 0 && Number.isFinite(b);\n  const aIsZeroInfiniteZeroInfinity = Number.isFinite(a) && a === 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a);\n  const bIsZeroInfiniteZeroInfinity = Number.isFinite(b) && b === 0 && Number.isFinite(b) && b < 0 && Number.isFinite(b);\n  const aIsPositiveInfinityPositiveInfinity = Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0;\n  const bIsPositiveInfinityPositiveInfinity = Number.isFinite(b) && b > 0 && Number.isFinite(b) && b < 0 && Number.isFinite(b) && b > 0;\n  const aIsZeroInfinitePositiveInfinity = Number.isFinite(a) && a === 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a);\n  const bIsZeroInfinitePositiveInfinity = Number.isFinite(b) && b === 0 && Number.isFinite(b) && b < 0 && Number.isFinite(b) && b > 0 && Number.isFinite(b);\n  const aIsPositiveInfinityInfinityInfinityInfinity = Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a);\n  const bIsPositiveInfinityInfinityInfinityInfinity = Number.isFinite(b) && b > 0 && Number.isFinite(b) && b < 0 && Number.isFinite(b) && b > 0 && Number.isFinite(b) && b < 0 && Number.isFinite(b);\n  const aIsZeroInfiniteInfinityInfinity = Number.isFinite(a) && a === 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a);\n  const bIsZeroInfiniteInfinity = Number.isFinite(b) && b === 0 && Number.isFinite(b) && b < 0 && Number.isFinite(b) && b > 0 && Number.isFinite(b) && b < 0 && Number.isFinite(b) && b > 0 && Number.isFinite(b) && b < 0 && Number.isFinite(b);\n  const aIsPositiveInfinityNegativeInfinityInfinityInfinityInfinity = Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a) && a > 0 && Number.isFinite(a) && a < 0 && Number.isFinite(a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i + j < n) {\n    arr.push(i);\n    i = i + j;\n    j = j + k;\n    k = k + 1;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  [1, 1, 1]\n  fib(0) =  []\n  */\nconst fib = (n) => {\n  let arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i + j < n) {\n    arr.push(i);\n    i = i + j;\n    j = j + k;\n    k = k + 1;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  [1, 1, 1]\n  fib(0) =  []\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i + j < n) {\n    arr.push(i);\n    i = i + j;\n    j = j + k;\n    k = k + 1;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  [1, 1, 1]\n  fib(0) =  []\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i + j < n) {\n    arr.push(i);\n    i = i + j;\n    j = j + k;\n    k = k + 1;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  [1, 1, 1]\n  fib(0) =  []\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i + j < n) {\n    arr.push(i);\n    i = i + j;\n    j = j + k;\n    k = k + 1;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  [1, 1, 1]\n  fib(0) =  []\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i + j < n) {\n    arr.push(i);\n    i = i + j;\n    j = j + k;\n    k = k + 1;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  [1, 1, 1]\n  fib(0) =  []\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i + j < n) {\n    arr.push(i);\n    i = i + j;\n    j = j + k;\n    k = k + 1;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  [1, 1, 1]\n  fib(0) =  []\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i + j < n) {\n    arr.push(i);\n    i = i + j;\n    j = j + k;\n    k = k + 1;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  [1, 1, 1]\n  fib(0) =  []\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i + j < n) {\n    arr.push(i);\n    i = i + j;\n    j = j + k;\n    k = k + 1;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(3) = [1, 1, 2, 3, 5]\n  fib(2) = [1, 1, 2]\n  fib(1) =  [1, 1, 1]\n  fib(0) =  []\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i + j < n) {\n    arr.push(i);\n    i = i + j;\n    j = j + k;\n    ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit.\n  Return 0 if n is 0.\n  For example:\n  digit(5) == 5\n  digit(7) == 7\n  digit(0) == 0\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum(5) == 5\n  digitSum(7) == 7\n  digitSum(0) == 0\n  */\nconst digitSum2 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n\n  except the digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum2(5) == 5\n  digitSum2(7) == 7\n  digitSum2(0) == 0\n  */\nconst digitSum3 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n\n  except the digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum3(5) == 5\n  digitSum3(7) == 7\n  digitSum3(0) == 0\n  */\nconst digitSum4 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n\n  except the digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum4(5) == 5\n  digitSum4(7) == 7\n  digitSum4(0) == 0\n  */\nconst digitSum5 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n\n  except the digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum5(5) == 5\n  digitSum5(7) == 7\n  digitSum5(0) == 0\n  */\nconst digitSum6 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n\n  except the digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum6(5) == 5\n  digitSum6(7) == 7\n  digitSum6(0) == 0\n  */\nconst digitSum7 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n\n  except the digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum7(5) == 5\n  digitSum7(7) == 7\n  digitSum7(0) == 0\n  */\nconst digitSum8 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n\n  except the digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum8(5) == 5\n  digitSum8(7) == 7\n  digitSum8(0) == 0\n  */\nconst digitSum9 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n\n  except the digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum9(5) == 5\n  digitSum9(7) == 7\n  digitSum9(0) == 0\n  */\nconst digitSum10 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n\n  except the digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum10(5) == 5\n  digitSum10(7) == 7\n  digitSum10(0) == 0\n  */\nconst digitSum11 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n\n  except the digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum11(5) == 5\n  digitSum11(7) == 7\n  digitSum11(0) == 0\n  */\nconst digitSum12 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n\n  except the digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum12(5) == 5\n  digitSum12(7) == 7\n  digitSum12(0) == 0\n  */\nconst digitSum13 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n\n  except the digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum13(5) == 5\n  digitSum13(7) == 7\n  digitSum13(0) == 0\n  */\nconst digitSum14 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit of n\n  except the digit of n.\n  Return 0 if n is 0.\n  For example:\n  digitSum14(5) == ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingDepth = 0;\n  const nestingStack = [];\n  const nestingStackDepth = 0;\n  const nestingStackDepthMax = nestingStackDepth + 1;\n  const nestingStackDepthMax2 = nestingStackDepthMax + 1;\n  const nestingStackDepthMax3 = nestingStackDepthMax + 2;\n  const nestingStackDepthMax4 = nestingStackDepthMax + 3;\n  const nestingStackDepthMax5 = nestingStackDepthMax + 4;\n  const nestingStackDepthMax6 = nestingStackDepthMax + 5;\n  const nestingStackDepthMax7 = nestingStackDepthMax + 6;\n  const nestingStackDepthMax8 = nestingStackDepthMax + 7;\n  const nestingStackDepthMax9 = nestingStackDepthMax + 8;\n  const nestingStackDepthMax10 = nestingStackDepthMax + 9;\n  const nestingStackDepthMax11 = nestingStackDepthMax + 10;\n  const nestingStackDepthMax12 = nestingStackDepthMax + 11;\n  const nestingStackDepthMax13 = nestingStackDepthMax + 12;\n  const nestingStackDepthMax14 = nestingStackDepthMax + 13;\n  const nestingStackDepthMax15 = nestingStackDepthMax + 14;\n  const nestingStackDepthMax16 = nestingStackDepthMax + 15;\n  const nestingStackDepthMax17 = nestingStackDepthMax + 16;\n  const nestingStackDepthMax18 = nestingStackDepthMax + 17;\n  const nestingStackDepthMax19 = nestingStackDepthMax + 18;\n  const nestingStackDepthMax20 = nestingStackDepthMax + 19;\n  const nestingStackDepthMax21 = nestingStackDepthMax + 20;\n  const nestingStackDepthMax22 = nestingStackDepthMax + 21;\n  const nestingStackDepthMax23 = nestingStackDepthMax + 22;\n  const nestingStackDepthMax24 = nestingStackDepthMax + 23;\n  const nestingStackDepthMax25 = nestingStackDepthMax + 24;\n  const nestingStackDepthMax26 = nestingStackDepthMax + 25;\n  const nestingStackDepthMax27 = nestingStackDepthMax + 26;\n  const nestingStackDepthMax28 = nestingStackDepthMax + 27;\n  const nestingStackDepthMax29 = nestingStackDepthMax + 28;\n  const nestingStackDepthMax30 = nestingStackDepthMax + 29;\n  const nestingStackDepthMax31 = nestingStackDepthMax + 30;\n  const nestingStackDepthMax32 = nestingStackDepthMax + 31;\n  const nestingStackDepthMax33 = nestingStackDepthMax + 32;\n  const nestingStackDepthMax34 = nestingStackDepthMax + 33;\n  const nestingStackDepthMax35 = nestingStackDepthMax + 34;\n  const nestingStackDepthMax36 = nestingStackDepthMax + 35;\n  const nestingStackDepthMax37 = nestingStackDepthMax + 36;\n  const nestingStackDepthMax38 = nestingStackDepthMax + 37;\n  const nestingStackDepthMax39 = nestingStackDepthMax + 38;\n  const nestingStackDepthMax40 = nestingStackDepthMax + 39;\n  const nestingStackDepthMax41 = nestingStackDepthMax + 40;\n  const nestingStackDepthMax42 = nestingStackDepthMax + 41;\n  const nestingStackDepthMax43 = nestingStackDepthMax + 42;\n  const nestingStackDepthMax44 = nestingStackDepthMax + 43;\n  const nestingStackDepthMax45 = nestingStackDepthMax + 44;\n  const nestingStackDepthMax46 = nestingStackDepthMax + 45;\n  const nestingStackDepthMax47 = nestingStackDepthMax + 46;\n  const nestingStackDepthMax48 = nestingStackDepthMax + 47;\n  const nestingStackDepthMax49 = nestingStackDepthMax + 48;\n  const nestingStackDepthMax50 = nestingStackDepthMax + 49;\n  const nestingStackDepthMax51 = nestingStackDepthMax + 50;\n  const nestingStackDepthMax52 = nestingStackDepthMax + 51;\n  const nestingStackDepthMax53 = nestingStackDepthMax + 52;\n  const nestingStackDepthMax54 = nestingStackDepthMax + 53;\n  const nestingStackDepthMax55 = nestingStackDepthMax + 54;\n  const nestingStackDepthMax56 = nestingStackDepthMax + 55;\n  const nestingStackDepthMax57 = nestingStackDepthMax + 56;\n  const nestingStackDepthMax58 = nestingStackDepthMax + 57;\n  const nestingStackDepthMax59 = nestingStackDepthMax + 58;\n  const nestingStackDepthMax60 = nestingStackDepthMax + 59;\n  const nestingStackDepthMax61 = nestingStackDepthMax + 60;\n  const nestingStackDepthMax62 = nestingStackDepthMax + 61;\n  const nestingStackDepthMax63 = nestingStackDepthMax + 62;\n  const nestingStackDepthMax64 = nestingStackDepthMax + 63;\n  const nestingStackDepthMax65 = nestingStackDepthMax + 64;\n  const nestingStackDepthMax66 = nestingStackDepthMax + 65;\n  const nestingStackDepthMax67 = nestingStackDepthMax + 66;\n  const nestingStackDepthMax68 = nestingStackDepthMax + 67;\n  const nestingStackDepthMax69 = nestingStackDepthMax + 68;\n  const nestingStackDepthMax70 = nestingStackDepthMax + 69;\n  const nestingStackDepthMax71 = nestingStackDepthMax + 70;\n  const nestingStackDepthMax72 = nestingStackDepthMax + 71;\n  const nestingStackDepthMax73 = nestingStackDepthMax + 72;\n  const nestingStackDepthMax74 = nestingStackDepthMax + 73;\n  const nestingStackDepthMax75 = nestingStackDepthMax + 74;\n  const nestingStackDepthMax76 = nestingStackDepthMax + 75;\n  const nestingStackDepthMax77 = nestingStackDepthMax + 76;\n  const nestingStackDepthMax78 = nestingStackDepthMax + 77;\n  const nestingStackDepthMax79 = nestingStackDepthMax + 78;\n  const nestingStackDepthMax80 = nestingStackDepthMax + 79;\n  const nestingStackDepthMax81 = nestingStackDepthMax + 80;\n  const nestingStackDepthMax82 = nestingStackDepthMax + 81;\n  const nestingStackDepthMax83 = nestingStackDepthMax + 82;\n  const nesting", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  You are given a list of numbers.\n  You are given an integer C.\n  You are asked to find the sum of all numbers in the list whose sum is equal to C.\n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 3, the output should be 6\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 4 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 5 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 6 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 7 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 8 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 9 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 10, the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 11 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 12 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 13 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 14 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 15 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 16 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 17 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 18 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 19 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 20 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 21 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 22 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 23 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 24 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 25 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 26 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 27 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 28 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 29 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 30, the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 31 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 32 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 33 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 34 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 35 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 36 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 37 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 38 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 39 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 40, the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 41 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 42 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 43 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 44 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 45 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 46 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 47 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 48 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 49 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 40, the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 41 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 42 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 43 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 44 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 45 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 46 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 47 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 48 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 49 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 40, the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 41 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 42 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 43 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 44 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 45 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 46 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 47 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 48 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 49 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 40, the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 41 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 42 the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10], C = 43 the output should be 0", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharsIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isALetter = false;\n  let isNotALetter = false;\n  let isNotLastChar = false;\n  let isNotLastCharWord = false;\n  let isNotLastCharWordWordWord = false;\n  let isNotLastCharWordWordWordWord = false;\n  let isNotLastCharWordWordWordWordWordWord = false;\n  let isNotLastCharWordWordWordWordWordWordWordWord = false;\n  let isNotLastCharWordWordWordWordWordWordWordWordWordWordWord = false;\n  let isNotLastCharWordWordWordWordWordWordWordWordWordWordWordWord = false;\n  let isNotLastCharWordWordWordWordWordWordWordWordWordWordWordWordWordWord = false;\n  let isNotLastCharWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord = false;\n  let isNotLastCharWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord = false;\n  let isNotLastCharWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWordWord", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArranging", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. Return null if index is out of bounds.\n  Example:\n  removeOnes([1,2,3,4,5,6,7]) = [1,2,3,4,5,6,7]\n  removeOnes([1,2,3,4,5,6,7,8]) = [1,2,3,4,5,6,7,8]\n*/\nconst removeOnes = (arr, index) => {\n  if (index >= arr.length) {\n    return null;\n  }\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. Return null if index is out of bounds.\n  Example:\n  removeTwos([1,2,3,4,5,6,7]) = [1,2,3,4,5,6,7]\n  removeTwos([1,2,3,4,5,6,7,8]) = [1,2,3,4,5,6,7,8]\n*/\nconst removeTwos = (arr, index) => {\n  if (index >= arr.length) {\n    return null;\n  }\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. Return null if index is out of bounds.\n  Example:\n  removeThrees([1,2,3,4,5,6,7]) = [1,2,3,4,5,6,7]\n  removeThrees([1,2,3,4,5,6,7,8]) = [1,2,3,4,5,6,7,8]\n*/\nconst removeThrees = (arr, index) => {\n  if (index >= arr.length) {\n    return null;\n  }\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. Return null if index is out of bounds.\n  Example:\n  removeFours([1,2,3,4,5,6,7]) = [1,2,3,4,5,6,7]\n  removeFours([1,2,3,4,5,6,7,8]) = [1,2,3,4,5,6,7,8]\n*/\nconst removeFours = (arr, index) => {\n  if (index >= arr.length) {\n    return null;\n  }\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. Return null if index is out of bounds.\n  Example:\n  removeFives([1,2,3,4,5,6,7]) = [1,2,3,4,5,6,7]\n  removeFives([1,2,3,4,5,6,7,8]) = [1,2,3,4,5,6,7,8]\n*/\nconst removeFives = (arr, index) => {\n  if (index >= arr.length) {\n    return null;\n  }\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. Return null if index is out of bounds.\n  Example:\n  removeSixs([1,2,3,4,5,6,7]) = [1,2,3,4,5,6,7]\n  removeSixs([1,2,3,4,5,6,7,8]) = [1,2,3,4,5,6,7,8]\n*/\nconst removeSixs = (arr, index) => {\n  if (index >= arr.length) {\n    return null;\n  }\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. Return null if index is out of bounds.\n  Example:\n  removeSevens([1,2,3,4,5,6,7]) = [1,2,3,4,5,6,7]\n  removeSevens([1,2,3,4,5,6,7,8]) = [1,2,3,4,5,6,7,8]\n*/\nconst removeSevens = (arr, index) => {\n  if (index >= arr.length) {\n    return null;\n  }\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. Return null if index is out of bounds.\n  Example:\n  removeEights([1,2,3,4,5,6,7]) = [1,2,3,4,5,6,7]\n  removeEights([1,2,3,4,5,6,7,8]) = [1,2,3,4,5,6,7,8]\n*/\nconst removeEights = (arr, index) => {\n  if (index >= arr.length) {\n    return null;\n  }\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. Return null if index is out of bounds.\n  Example:\n  removeNines([1,2,3,4,5,6,7]) = [1,2,3,4,5,6,7]\n  removeNines([1,2,3,4,5,6,7,8]) = [1,2,3,4,5,6,7,8]\n*/\nconst removeNines = (arr, index) => {\n  if (index >= arr.length) {\n    return null;\n  }\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. Return null if index is out of bounds.\n  Example:\n  removeTens([1,2,3,4,5,6,7]) = [1,2,3,4,5,6,7]\n  removeTens([1,2,3,4,5,6,7,8]) = [1,2,3,4,5,6,7,8]\n*/\nconst removeTens = (arr, index) => {\n  if (index >= arr.length) {\n    return null;\n  }\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at index. Return null if index is out of bounds.\n  Example:\n  removeElevens([1,2,3,4,5,6,7]) = [1,2,3,4,5,6,7]\n  removeElevens([1,2,3,4,5,6,7,8]) = [1,2,3,4,5,6,7,8]\n*/\nconst removeElevens = (arr, index) => {\n  if (index >= arr.length) {\n    return null;\n  }\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largerSmallerIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  let maxNum = Number.MIN_SAFE_INTEGER;\n  let minNum = Number.MAX_SAFE_INTEGER;\n  let maxNum2 = Number.MIN_SAFE_INTEGER;\n  let minNum2 = Number.MAX_SAFE_INTEGER;\n  let maxNum3 = Number.MIN_SAFE_INTEGER;\n  let minNum3 = Number.MAX_SAFE_INTEGER;\n  let maxNum4 = Number.MIN_SAFE_INTEGER;\n  let minNum4 = Number.MAX_SAFE_INTEGER;\n  let maxNum5 = Number.MIN_SAFE_INTEGER;\n  let minNum5 = Number.MAX_SAFE_INTEGER;\n  let maxNum6 = Number.MIN_SAFE_INTEGER;\n  let minNum6 = Number.MAX_SAFE_INTEGER;\n  let maxNum7 = Number.MIN_SAFE_INTEGER;\n  let minNum7 = Number.MAX_SAFE_INTEGER;\n  let maxNum8 = Number.MIN_SAFE_INTEGER;\n  let minNum8 = Number.MAX_SAFE_INTEGER;\n  let maxNum9 = Number.MIN_SAFE_INTEGER;\n  let minNum9 = Number.MAX_SAFE_INTEGER;\n  let maxNum10 = Number.MIN_SAFE_INTEGER;\n  let minNum10 = Number.MAX_SAFE_INTEGER;\n  let maxNum11 = Number.MIN_SAFE_INTEGER;\n  let minNum11 = Number.MAX_SAFE_INTEGER;\n  let maxNum12 = Number.MIN_SAFE_INTEGER;\n  let minNum12 = Number.MAX_SAFE_INTEGER;\n  let maxNum13 = Number.MIN_SAFE_INTEGER;\n  let minNum13 = Number.MAX_SAFE_INTEGER;\n  let maxNum14 = Number.MIN_SAFE_INTEGER;\n  let minNum14 = Number.MAX_SAFE_INTEGER;\n  let maxNum15 = Number.MIN_SAFE_INTEGER;\n  let minNum15 = Number.MAX_SAFE_INTEGER;\n  let maxNum16 = Number.MIN_SAFE_INTEGER;\n  let minNum16 = Number.MAX_SAFE_INTEGER;\n  let maxNum17 = Number.MIN_SAFE_INTEGER;\n  let minNum17 = Number.MAX_SAFE_INTEGER;\n  let maxNum18 = Number.MIN_SAFE_INTEGER;\n  let minNum18 = Number.MAX_SAFE_INTEGER;\n  let maxNum19 = Number.MIN_SAFE_INTEGER;\n  let minNum19 = Number.MAX_SAFE_INTEGER;\n  let maxNum20 = Number.MIN_SAFE_INTEGER;\n  let minNum20 = Number.MAX_SAFE_INTEGER;\n  let maxNum21 = Number.MIN_SAFE_INTEGER;\n  let minNum21 = Number.MAX_SAFE_INTEGER;\n  let maxNum22 = Number.MIN_SAFE_INTEGER;\n  let minNum22 = Number.MAX_SAFE_INTEGER;\n  let maxNum23 = Number.MIN_SAFE_INTEGER;\n  let minNum23 = Number.MAX_SAFE_INTEGER;\n  let maxNum24 = Number.MIN_SAFE_INTEGER;\n  let minNum24 = Number.MAX_SAFE_INTEGER;\n  let maxNum25 = Number.MIN_SAFE_INTEGER;\n  let minNum25 = Number.MAX_SAFE_INTEGER;\n  let maxNum26 = Number.MIN_SAFE_INTEGER;\n  let minNum26 = Number.MAX_SAFE_INTEGER;\n  let maxNum27 = Number.MIN_SAFE_INTEGER;\n  let minNum27 = Number.MAX_SAFE_INTEGER;\n  let maxNum28 = Number.MIN_SAFE_INTEGER;\n  let minNum28 = Number.MAX_SAFE_INTEGER;\n  let maxNum29 = Number.MIN_SAFE_INTEGER;\n  let minNum29 = Number.MAX_SAFE_INTEGER;\n  let maxNum30 = Number.MIN_SAFE_INTEGER;\n  let minNum30 = Number.MAX_SAFE_INTEGER;\n  let maxNum31 = Number.MIN_SAFE_INTEGER;\n  let minNum31 = Number.MAX_SAFE_INTEGER;\n  let maxNum32 = Number.MIN_SAFE_INTEGER;\n  let minNum32 = Number.MAX_SAFE_INTEGER;\n  let maxNum33 = Number.MIN_SAFE_INTEGER;\n  let minNum33 = Number.MAX_SAFE_INTEGER;\n  let maxNum34 = Number.MIN_SAFE_INTEGER;\n  let minNum34 = Number.MAX_SAFE_INTEGER;\n  let maxNum35 = Number.MIN_SAFE_INTEGER;\n  let minNum35 = Number.MAX_SAFE_INTEGER;\n  let maxNum36 = Number.MIN_SAFE_INTEGER;\n  let minNum36 = Number.MAX_SAFE_INTEGER;\n  let maxNum37 = Number.MIN_SAFE_INTEGER;\n  let minNum37 = Number.MAX_SAFE_INTEGER;\n  let maxNum38 = Number.MIN_SAFE_INTEGER;\n  let minNum38 = Number.MAX_SAFE_INTEGER;\n  let maxNum39 = Number.MIN_SAFE_INTEGER;\n  let minNum39 = Number.MAX_SAFE_INTEGER;\n  let maxNum40 = Number.MIN_SAFE_INTEGER;\n  let minNum40 = Number.MAX_SAFE_INTEGER;\n  let maxNum41 = Number.MIN_SAFE_INTEGER;\n  let minNum41 = Number.MAX_SAFE_INTEGER;\n  let maxNum42 = Number.MIN_SAFE_INTEGER;\n  let minNum42 = Number.MAX_SAFE_INTEGER;\n  let maxNum43 = Number.MIN_SAFE_INTEGER;\n  let minNum43 = Number.MAX_SAFE_INTEGER;\n  let maxNum44 = Number.MIN_SAFE_INTEGER;\n  let minNum44 = Number.MAX_SAFE_INTEGER;\n  let maxNum45 = Number.MIN_SAFE_INTEGER;\n  let minNum45 = Number.MAX_SAFE_INTEGER;\n  let maxNum46 = Number.MIN_SAFE_INTEGER;\n  let minNum46 = Number.MAX_SAFE_INTEGER;\n  let maxNum47 = Number.MIN_SAFE_INTEGER;\n  let minNum47 = Number.MAX_SAFE_INTEGER;\n  let maxNum48 = Number.MIN_SAFE_INTEGER;\n  let minNum48 = Number.MAX_SAFE_INTEGER;\n  let maxNum49 = Number.MIN_SAFE_INTEGER;\n  let minNum49 = Number.MAX_SAFE_INTEGER;\n  let maxNum50 = Number.MIN_SAFE_INTEGER;\n  let minNum50 = Number.MAX_SAFE_INTEGER;\n  let maxNum51 = Number.MIN_SAFE_INTEGER;\n  let minNum51 = Number.MAX_SAFE_INTEGER;\n  let maxNum52 = Number.MIN_SAFE_INTEGER;\n  let minNum52 = Number.MAX_SAFE_INTEGER;\n  let maxNum53 = Number.MIN_SAFE_INTEGER;\n  let minNum53 = Number.MAX_SAFE_INTEGER;\n  let maxNum54 = Number.MIN_SAFE_INTEGER;\n  let minNum54 = Number.MAX_SAFE_INTEGER;\n  let maxNum55 = Number.MIN_SAFE_INTEGER;\n  let minNum55 = Number.MAX_SAFE_INTEGER;\n  let maxNum56 = Number.MIN_SAFE_INTEGER;\n  let minNum56 = Number.MAX_SAFE_INTEGER;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comparingOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b\n  }\n  if (isNaN(a) &&!isNaN(b)) {\n    return a < b\n  }\n  if (isNaN(b) &&!isNaN(a)) {\n    return a > b\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ null\n  comparingOne(1, \"2,3\") ➞ null\n  comparingOne(\"5,1\", \"6\") ➞ null\n  comparingOne(\"1\", 1) ➞ 2.5\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b\n  }\n  if (isNaN(a) &&!isNaN(b)) {\n    return a < b\n  }\n  if (isNaN(b) &&!isNaN(a)) {\n    return a > b\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ null\n  comparingOne(1, \"2,3\") ➞ null\n  comparingOne(\"5,1\", \"6\") ➞ null\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b\n  }\n  if (isNaN(a) &&!isNaN(b)) {\n    return a < b\n  }\n  if (isNaN(b) &&!isNaN(a)) {\n    return a > b\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ null\n  comparingOne(1, \"2,3\") ➞ null\n  comparingOne(\"5,1\", \"6\") ➞ null\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b\n  }\n  if (isNaN(a) &&!isNaN(b)) {\n    return a < b\n  }\n  if (isNaN(b) &&!isNaN(a)) {\n    return a > b\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ null\n  comparingOne(1, \"2,3\") ➞ null\n  comparingOne(\"5,1\", \"6\") ➞ null\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b\n  }\n  if (isNaN(a) &&!isNaN(b)) {\n    return a < b\n  }\n  if (isNaN(b) &&!isNaN(a)) {\n    return a > b\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ null\n  comparingOne(1, \"2,3\") ➞ null\n  comparingOne(\"5,1\", \"6\") ➞ null\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return a === b\n  }\n  if (isNaN(a) &&!isNaN(b)) {\n    return a < b\n  }\n  if (isNaN(b) &&!isNaN(a)) {\n    return a > b\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ null\n  comparingOne(1, \"2,3\") ➞ null\n  comparingOne(\"5,1\", \"6\") ➞ null\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null || b === null) {\n    return a === b\n  }\n  if (a === \"\" || b === \"\") {\n    return a === b\n  }\n  if (isNaN(a) && isNaN(b)) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSummingEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  let sum = 0;\n  let even = true;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      even = false;\n    }\n  }\n  return even;\n};\n\n/*\n  Given a positive integer n, return true if it is possible to divide it evenly into two positive integers A and B\n  such that A + B == n\n  Example\n  isEvenDivisibleBy(3) == true\n  isEvenDivisibleBy(5) == false\n  isEvenDivisibleBy(7) == false\n  isEvenDivisibleBy(8) == true\n  */\nconst isEvenDivisibleBy = (n) => {\n  let sum = 0;\n  let even = true;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      even = false;\n    }\n  }\n  return even;\n};\n\n/*\n  Given a positive integer n, return true if it is possible to divide it evenly into two positive integers A and B\n  such that A + B == n\n  Example\n  isEvenDivisibleBySummingEven(3) == true\n  isEvenDivisibleBySummingEven(5) == false\n  isEvenDivisibleBySummingEven(7) == false\n  isEvenDivisibleBySummingEven(8) == true\n  */\nconst isEvenDivisibleBySummingEven = (n) => {\n  let sum = 0;\n  let even = true;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      even = false;\n    }\n  }\n  return even;\n};\n\n/*\n  Given a positive integer n, return true if it is possible to divide it evenly into two positive integers A and B\n  such that A + B == n\n  Example\n  isEvenDivisibleBySummingEvenSummingEven(3) == true\n  isEvenDivisibleBySummingEvenSummingEven(5) == false\n  isEvenDivisibleBySummingEvenSummingEven(7) == false\n  isEvenDivisibleBySummingEvenSummingEven(8) == true\n  */\nconst isEvenDivisibleBySummingEvenSummingEven = (n) => {\n  let sum = 0;\n  let even = true;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      even = false;\n    }\n  }\n  return even;\n};\n\n/*\n  Given a positive integer n, return true if it is possible to divide it evenly into two positive integers A and B\n  such that A + B == n\n  Example\n  isEvenDivisibleBySummingEvenSummingEvenSummingEven(3) == true\n  isEvenDivisibleBySummingEvenSummingEvenSummingEven(5) == false\n  isEvenDivisibleBySummingEvenSummingEvenSummingEven(7) == false\n  isEvenDivisibleBySummingEvenSummingEvenSummingEven(8) == true\n  */\nconst isEvenDivisibleBySummingEvenSummingEvenSummingEven = (n) => {\n  let sum = 0;\n  let even = true;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      even = false;\n    }\n  }\n  return even;\n};\n\n/*\n  Given a positive integer n, return true if it is possible to divide it evenly into two positive integers A and B\n  such that A + B == n\n  Example\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEven(3) == true\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEven(5) == false\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEven(7) == false\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEven(8) == true\n  */\nconst isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEven = (n) => {\n  let sum = 0;\n  let even = true;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      even = false;\n    }\n  }\n  return even;\n};\n\n/*\n  Given a positive integer n, return true if it is possible to divide it evenly into two positive integers A and B\n  such that A + B == n\n  Example\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEvenSummingEven(3) == true\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEvenSummingEven(5) == false\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEvenSummingEven(7) == false\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEvenSummingEven(8) == true\n  */\nconst isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEvenSummingEven = (n) => {\n  let sum = 0;\n  let even = true;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      even = false;\n    }\n  }\n  return even;\n};\n\n/*\n  Given a positive integer n, return true if it is possible to divide it evenly into two positive integers A and B\n  such that A + B == n\n  Example\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEvenSummingEvenSummingEven(3) == true\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEvenSummingEvenSummingEven(5) == false\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEvenSummingEvenSummingEven(7) == false\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEvenSummingEvenSummingEven(8) == true\n  */\nconst isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEvenSummingEvenSummingEvenSummingEven = (n) => {\n  let sum = 0;\n  let even = true;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      even = false;\n    }\n  }\n  return even;\n};\n\n/*\n  Given a positive integer n, return true if it is possible to divide it evenly into two positive integers A and B\n  such that A + B == n\n  Example\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEvenSummingEvenSummingEvenSummingEven(3) == true\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEvenSummingEvenSummingEvenSummingEven(5) == false\n  isEvenDivisibleBySummingEvenSummingEvenSummingEvenSummingEvenSummingEvenSummingEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  Returns the factorial of a number using binary exponentiation\n  https://en.wikipedia.org/wiki/Binary_exponentiation\n  \n  For example:\n  >>> factorial(4)\n  120\n  >>> factorial(5)\n  720\n  >>> factorial(6)\n  5040\n  >>> factorial(7)\n  40320\n  >>> factorial(8)\n  362880\n  >>> factorial(9)\n  3628800\n  >>> factorial(10)\n  3628800\n  >>> factorial(11)\n  3628800\n  >>> factorial(12)\n  3628800\n  >>> factorial(13)\n  3628800\n  >>> factorial(14)\n  3628800\n  >>> factorial(15)\n  3628800\n  >>> factorial(16)\n  3628800\n  >>> factorial(17)\n  3628800\n  >>> factorial(18)\n  3628800\n  >>> factorial(19)\n  3628800\n  >>> factorial(20)\n  3628800\n  >>> factorial(21)\n  3628800\n  >>> factorial(22)\n  3628800\n  >>> factorial(23)\n  3628800\n  >>> factorial(24)\n  3628800\n  >>> factorial(25)\n  3628800\n  >>> factorial(26)\n  3628800\n  >>> factorial(27)\n  3628800\n  >>> factorial(28)\n  3628800\n  >>> factorial(29)\n  3628800\n  >>> factorial(30)\n  3628800\n  >>> factorial(31)\n  3628800\n  >>> factorial(32)\n  3628800\n  >>> factorial(33)\n  3628800\n  >>> factorial(34)\n  3628800\n  >>> factorial(35)\n  3628800\n  >>> factorial(36)\n  3628800\n  >>> factorial(37)\n  3628800\n  >>> factorial(38)\n  3628800\n  >>> factorial(39)\n  3628800\n  >>> factorial(40)\n  3628800\n  >>> factorial(41)\n  3628800\n  >>> factorial(42)\n  3628800\n  >>> factorial(43)\n  3628800\n  >>> factorial(44)\n  3628800\n  >>> factorial(45)\n  3628800\n  >>> factorial(46)\n  3628800\n  >>> factorial(47)\n  3628800\n  >>> factorial(48)\n  3628800\n  >>> factorial(49)\n  3628800\n  >>> factorial(50)\n  3628800\n  >>> factorial(51)\n  3628800\n  >>> factorial(52)\n  3628800\n  >>> factorial(53)\n  3628800\n  >>> factorial(54)\n  3628800\n  >>> factorial(55)\n  3628800\n  >>> factorial(56)\n  3628800\n  >>> factorial(57)\n  3628800\n  >>> factorial(58)\n  3628800\n  >>> factorial(59)\n  3628800\n  >>> factorial(60)\n  3628800\n  >>> factorial(61)\n  3628800\n  >>> factorial(62)\n  3628800\n  >>> factorial(63)\n  3628800\n  >>> factorial(64)\n  3628800\n  >>> factorial(65)\n  3628800\n  >>> factorial(66)\n  3628800\n  >>> factorial(67)\n  3628800\n  >>> factorial(68)\n  3628800\n  >>> factorial(69)\n  3628800\n  >>> factorial(70)\n  3628800\n  >>> factorial(71)\n  3628800\n  >>> factorial(72)\n  3628800\n  >>> factorial(73)\n  3628800\n  >>> factorial(74)\n  3628800\n  >>> factorial(75)\n  3628800\n  >>> factorial(76)\n  3628800\n  >>> factorial(77)\n  3628800\n  >>> factorial(78)\n  3628800\n  >>> factorial(79)\n  3628800\n  >>> factorial(80)\n  3628800\n  >>> factorial(81)\n  3628800\n  >>> factorial(82)\n  3628800\n  >>> factorial(83)\n  3628800\n  >>> factorial(84)\n  3628800\n  >>> factorial(85)\n  3628800\n  >>> factorial(86)\n  3628800\n  >>> factorial(87)\n  3628800\n  >>> factorial(88)\n  3628800\n  >>> factorial(89)\n  3628800\n  >>> factorial(90)\n  3628800\n  >>> factorial(91)\n  3628800\n  >>> factorial(92)\n  3628800\n  >>> factorial(93)\n  3628800\n  >>> factorial(94)\n  3628800\n  >>> factorial(95)\n  3628800\n  >>> factorial(96)\n  3628800\n  >>> factorial(97)\n  3628800\n  >>> factorial(98)\n  3628800\n  >>> factorial(99)\n  3628800\n  >>> factorial(100)\n  3628800\n  >>> factorial(101)\n  3628800\n  >>> factorial(102)\n  3628800\n  >>> factorial(103)\n  3628800\n  >>> factorial(104)\n  3628800\n  >>> factorial(105)\n  3628800\n  >>> factorial(106)\n  3628800\n  >>> factorial(107)\n  3628800\n  >>> factorial(108)\n  3628800\n  >>> factorial(109)\n  3628800\n  >>> factorial(110)\n  3628800\n  >>> factorial(111)\n  3628800\n  >>> factorial(112)\n  3628800\n  >>> factorial(113)\n  3628800\n  >>> factorial(114)\n  3628800\n  >>> factorial(115)\n  3628800\n  >>> factorial(116)\n  3628800\n  >>> factorial(117)\n  3628800\n  >>> factorial(118)\n  3628800\n  >>> factorial(119)\n  3628800\n  >>> factorial(120)\n  3628800\n  >>> factorial(121)\n  3628800\n  >>> factorial(122)\n  3628800\n  >>> factorial(123)\n  3628800\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let currentPrefix = string;\n  let currentPrefixLength = 0;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix.substring(0, currentPrefixLength));\n    currentPrefix = currentPrefix.substring(currentPrefixLength);\n    currentPrefixLength += currentPrefix.length;\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'cg', 'ch', 'ci', 'cj', 'ck', 'cl', 'cm', 'cn', 'co', 'cp', 'cq', 'cr', 'cs', 'ct', 'cu', 'cv', 'cw', 'cx', 'cy', 'cz', 'd', 'da', 'db', 'dc', 'dd', 'de', 'df', 'dg', 'dh', 'di', 'dj', 'dk', 'dl', 'dm', 'dn', 'do', 'dp', 'dq', 'dr', 'ds', 'dt', 'du', 'dv', 'dw', 'dx', 'dy', 'dz', 'e', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'eg', 'eh', 'er', 'es', 'et', 'eu', 'ev', 'ev', 'ex', 'ey', 'ez', 'f', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', 'fg', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixesSpace", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \" \");\n};\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with _\n  \n  fixesUnderscore(\"Example\") == \"Example\"\n  fixesUnderscore(\"Example 1\") == \"Example_1\"\n  fixesUnderscore(\" Example 2\") == \"_Example_2\"\n  fixesUnderscore(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesUnderscore = (text) => {\n  return text.replace(/_/g, \" \").replace(/_{2,}/g, \" \");\n};\n\n/*\n  Given a string text, replace all hyphens in it with spaces, \n  and if a string has more than 2 consecutive hyphens, \n  then replace all consecutive hyphens with -\n  \n  fixesHyphens(\"Example\") == \"Example\"\n  fixesHyphens(\"Example 1\") == \"Example_1\"\n  fixesHyphens(\" Example 2\") == \"-Example_2\"\n  fixesHyphens(\" Example   3\") == \"-Example-3\"\n  */\nconst fixesHyphens = (text) => {\n  return text.replace(/-/g, \" \").replace(/-{2,}/g, \" \");\n};\n\n/*\n  Given a string text, replace all apostrophes in it with spaces, \n  and if a string has more than 2 consecutive apostrophes, \n  then replace all consecutive apostrophes with '\n  \n  fixesApostrophes(\"Example\") == \"Example\"\n  fixesApostrophes(\"Example 1\") == \"Example_1\"\n  fixesApostrophes(\" Example 2\") == \"'Example_2\"\n  fixesApostrophes(\" Example   3\") == \"'Example-3\"\n  */\nconst fixesApostrophes = (text) => {\n  return text.replace(/\\'/g, \"'\").replace(/\\'{2,}/g, \"'\");\n};\n\n/*\n  Given a string text, replace all quotation marks in it with spaces, \n  and if a string has more than 2 consecutive quotation marks, \n  then replace all consecutive quotation marks with \"\n  \n  fixesQuotationMarks(\"Example\") == \"Example\"\n  fixesQuotationMarks(\"Example 1\") == \"Example_1\"\n  fixesQuotationMarks(\" Example 2\") == \"\\\"Example_2\"\n  fixesQuotationMarks(\" Example   3\") == \"\\\"Example-3\"\n  */\nconst fixesQuotationMarks = (text) => {\n  return text.replace(/\"/g, \"'\").replace(/\"{2,}/g, \"'\");\n};\n\n/*\n  Given a string text, replace all apostrophes and quotation marks in it with spaces, \n  and if a string has more than 2 consecutive apostrophes and quotation marks, \n  then replace all consecutive apostrophes and quotation marks with '\n  \n  fixesAllQuotationMarks(\"Example\") == \"Example\"\n  fixesAllQuotationMarks(\"Example 1\") == \"Example_1\"\n  fixesAllQuotationMarks(\" Example 2\") == \"\\\"Example_2\"\n  fixesAllQuotationMarks(\" Example   3\") == \"\\\"Example-3\"\n  */\nconst fixesAllQuotationMarks = (text) => {\n  return text.replace(/\\'/g, \"'\").replace(/\\\"/g, \"'\");\n};\n\n/*\n  Given a string text, replace all apostrophes and quotation marks in it with spaces, \n  and if a string has more than 2 consecutive apostrophes and quotation marks, \n  then replace all consecutive apostrophes and quotation marks with '\n  \n  fixesAllApostrophes(\"Example\") == \"Example\"\n  fixesAllApostrophes(\"Example 1\") == \"Example_1\"\n  fixesAllApostrophes(\" Example 2\") == \"\\\"Example_2\"\n  fixesAllApostrophes(\" Example   3\") == \"\\\"Example-3\"\n  */\nconst fixesAllApostrophes = (text) => {\n  return text.replace(/\\'/g, \"'\").replace(/\\\"/g, \"'\");\n};\n\n/*\n  Given a string text, replace all apostrophes and quotation marks in it with spaces, \n  and if a string has more than 2 consecutive apostrophes and quotation marks, \n  then replace all consecutive apostrophes and quotation marks with '\n  \n  fixesAllApostrophes(\"Example\") == \"Example\"\n  fixesAllApostrophes(\"Example 1\") == \"Example_1\"\n  fixesAllApostrophes(\" Example 2\") == \"\\\"Example_2\"\n  fixesAllApostrophes(\" Example   3\") == \"\\\"Example-3\"\n  */\nconst fixesAllHyphens = (text) => {\n  return text.replace(/\\'/g, \"'\").replace(/\\\"/g, \"'\");\n};\n\n/*\n  Given a string text, replace all apostrophes and quotation marks in it with spaces, \n  and if a string has more than 2 consecutive apostrophes and quotation marks, \n  then replace all consecutive apostrophes and quotation marks with '\n  \n  fixesAllHyphens(\"Example\") == \"Example\"\n  fixesAllHyphens(\"Example 1\") == \"Example_1\"\n  fixesAllHyphens(\" Example 2\") == \"\\\"Example_2\"\n  fixesAllHyphens(\" Example   3\") == \"\\\"Example-3\"\n  */\nconst fixesAllApostrophes = (text) => {\n  return text.replace(/\\'/g, \"'\").replace(/\\\"/g, \"'\");\n};\n\n/*\n  Given a string text, replace all apostrophes and quotation marks in it with spaces, \n  and if a string has more than 2 consecutive apostrophes and quotation marks, \n  then replace all consecutive apostrophes and quotation marks with '\n  \n  fixesAllHyphens(\"Example\") == \"Example\"\n  fixesAllHyphens(\"Example 1\") == \"Example_1\"\n  fixesAllHyphens(\" Example 2\") == \"\\\"Example_2\"\n  fixesAllHyphens(\" Example   3\") == \"\\\"Example-3\"\n  */\nconst fixesAllHyphens = (text) => {\n  return text.replace(/\\'/g, \"'\").replace(/\\\"/g, \"'\");\n};\n\n/*\n  Given a string text, replace all apostrophes and quotation marks in it with spaces, \n  and if a string has more than 2 consecutive apostrophes and quotation marks, \n  then replace all consecutive apostrophes and quotation marks with '\n  \n  fixesAllApostrophes(\"Example\") == \"Example\"\n  fixesAllApostrophes(\"Example 1\") == \"Example_1\"\n  fixesAllApostrophes(\" Example 2\") == \"\\\"Example_2\"\n  fixesAllApost", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filesNamesCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n  const file_name_without_extension = file_name.split(\".\")[0];\n  const file_name_without_extension_length = file_name_without_extension.length;\n  const file_name_without_extension_letters = file_name_without_extension.charAt(0).toLowerCase();\n  const file_name_without_extension_letters_length = file_name_without_extension_letters.length;\n  const file_name_without_extension_letters_is_latin_alphabet = file_name_without_extension_letters_length >= 1 && file_name_without_extension_letters_length < 26 && file_name_without_extension_letters_is_latin_alphabet[file_name_without_extension_letters_length];\n  const file_name_without_extension_letters_is_latin_alphabet_and_length = file_name_without_extension_letters_is_latin_alphabet && file_name_without_extension_letters_length >= 1 && file_name_without_extension_letters_length < 26 && file_name_without_extension_letters_is_latin_alphabet[file_name_without_extension_letters_length];\n  const file_name_without_extension_letters_is_latin_alphabet_and_length_and_extension = file_name_without_extension_letters_is_latin_alphabet && file_name_without_extension_letters_length >= 1 && file_name_without_extension_letters_length < 26 && file_name_without_extension_letters_is_latin_alphabet[file_name_without_extension_letters_length] && file_name_without_extension_letters_is_latin_alphabet_and_extension;\n  const file_name_without_extension_letters_is_latin_alphabet_and_length_and_extension_length = file_name_without_extension_letters_is_latin_alphabet && file_name_without_extension_letters_length >= 1 && file_name_without_extension_letters_length < 26 && file_name_without_extension_letters_is_latin_alphabet[file_name_without_extension_letters_length] && file_name_without_extension_letters_is_latin_alphabet_and_extension_length;\n  const file_name_without_extension_letters_is_latin_alphabet_and_length_and_extension_length_and_extension = file_name_without_extension_letters_is_latin_alphabet && file_name_without_extension_letters_length >= 1 && file_name_without_extension_letters_length < 26 && file_name_without_extension_letters_is_latin_alphabet[file_name_without_extension_letters_length] && file_name_without_extension_letters_is_latin_alphabet_and_extension_length_and_extension;\n  const file_name_without_extension_letters_is_latin_alphabet_and_length_and_extension_length_and_extension_length = file_name_without_extension_letters_is_latin_alphabet && file_name_without_extension_letters_length >= 1 && file_name_without_extension_letters_length < 26 && file_name_without_extension_letters_is_latin_alphabet[file_name_without_extension_letters_length] && file_name_without_extension_letters_is_latin_alphabet_and_extension_length_and_extension_length_and_extension;\n  const file_name_without_extension_letters_is_latin_alphabet_and_length_and_extension_length_and_extension_length_and_extension_length_and_extension = file_name_without_extension_letters_is_latin_alphabet && file_name_without_extension_letters_length >= 1 && file_name_without_extension_letters_length < 26 && file_name_without_extension_letters_is_latin_alphabet[file_name_without_extension_letters_length] && file_name_without_extension_letters_is_latin_alphabet_and_extension_length_and_extension_length_and_extension_length_and_extension;\n  const file_name_without_extension_letters_is_latin_alphabet_and_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension = file_name_without_extension_letters_is_latin_alphabet && file_name_without_extension_letters_length >= 1 && file_name_without_extension_letters_length < 26 && file_name_without_extension_letters_is_latin_alphabet[file_name_without_extension_letters_length] && file_name_without_extension_letters_is_latin_alphabet_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension;\n  const file_name_without_extension_letters_is_latin_alphabet_and_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension = file_name_without_extension_letters_is_latin_alphabet && file_name_without_extension_letters_length >= 1 && file_name_without_extension_letters_length < 26 && file_name_without_extension_letters_is_latin_alphabet[file_name_without_extension_letters_length] && file_name_without_extension_letters_is_latin_alphabet_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension;\n  const file_name_without_extension_letters_is_latin_alphabet_and_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension = file_name_without_extension_letters_is_latin_alphabet && file_name_without_extension_letters_length >= 1 && file_name_without_extension_letters_length < 26 && file_name_without_extension_letters_is_latin_alphabet[file_name_without_extension_letters_length] && file_name_without_extension_letters_is_latin_alphabet_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension;\n  const file_name_without_extension_letters_is_latin_alphabet_and_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_length_and_extension_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a list containing integers, return a new list containing all integers whose sum is less than or equal to the given number.\n  \n  Examples:\n  sumsLessThanOrEqual([1,2,3],2) should return [1,2,3]\n  sumsLessThanOrEqual([1,2,3],3) should return [1,2,3]\n  sumsLessThanOrEqual([1,2,3],4) should return [1,2,3]\n  sumsLessThanOrEqual([],2) should return []\n  sumsLessThanOrEqual([],3) should return []\n  sumsLessThanOrEqual([],4) should return []\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],2) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],3) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],4) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],5) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],6) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],7) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],8) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],9) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],10) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],11) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],12) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],13) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],14) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],15) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],16) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],17) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],18) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],19) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],20) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],21) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],22) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],23) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],24) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],25) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],26) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],27) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],28) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],29) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],30) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],31) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],32) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],33) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],34) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],35) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],36) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],37) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],38) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],39) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],40) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],41) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],42) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],43) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],44) should return [-1,-5,2,-1,-5]\n  sumsLessThanOrEqual([-1,-5,2,-1,-5],45) should return [-1,-5,2,-1,-5]\n  sumsLessThan", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordInSentences", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"i\" || words[i] === \"i\" || words[i] === \"I\" || words[i] === \"I\" || words[i] === \"o\" || words[i] === \"o\" || words[i] === \"O\" || words[i] === \"u\" || words[i] === \"u\" || words[i] === \"U\" || words[i] === \"e\" || words[i] === \"e\" || words[i] === \"E\" || words[i] === \"l\" || words[i] === \"l\" || words[i] === \"L\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"w\" || words[i] === \"w\" || words[i] === \"W\" || words[i] === \"h\" || words[i] === \"h\" || words[i] === \"H\" || words[i] === \"d\" || words[i] === \"d\" || words[i] === \"D\" || words[i] === \"c\" || words[i] === \"c\" || words[i] === \"C\" || words[i] === \"m\" || words[i] === \"m\" || words[i] === \"M\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"n\" || words[i] === \"n\" || words[i] === \"N\" || words[i] === \"s\" || words[i] === \"s\" || words[i] === \"S\" || words[i] === \"t\" || words[i] === \"t\" || words[i] === \"T\" || words[i] === \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // If denominator is 0, return true\n  if (n === 0) {\n    return true;\n  }\n  // If denominator is 1, return false\n  if (n === 1) {\n    return false;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n  // If denominator is 1, return true\n  if (n === 1) {\n    return true;\n  }\n  // If denominator is 0, return false\n  if (n === 0) {\n    return false;\n  }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoint", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = parseInt(a.toString().split('').reverse().join(''), 10)\n    const bDigit = parseInt(b.toString().split('').reverse().join(''), 10)\n    return aDigit - bDigit\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([-1, -11, -11, -12, 11]) == [11, -11, -11, -11, -12]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = parseInt(a.toString().split('').reverse().join(''), 10)\n    const bDigit = parseInt(b.toString().split('').reverse().join(''), 10)\n    return bDigit - aDigit\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDesc([]) == []\n  */\nconst orderByPointDescNum = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = parseInt(a.toString().split('').reverse().join(''), 10)\n    const bDigit = parseInt(b.toString().split('').reverse().join(''), 10)\n    return bDigit - aDigit\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescNum([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDescNum([]) == []\n  */\nconst orderByPointDescNumDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = parseInt(a.toString().split('').reverse().join(''), 10)\n    const bDigit = parseInt(b.toString().split('').reverse().join(''), 10)\n    return bDigit - aDigit\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescNumDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDescNumDesc([]) == []\n  */\nconst orderByPointDescNumDescNum = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = parseInt(a.toString().split('').reverse().join(''), 10)\n    const bDigit = parseInt(b.toString().split('').reverse().join(''), 10)\n    return bDigit - aDigit\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescNumDescNum([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDescNumDescNum([]) == []\n  */\nconst orderByPointDescNumDescNumDesc = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = parseInt(a.toString().split('').reverse().join(''), 10)\n    const bDigit = parseInt(b.toString().split('').reverse().join(''), 10)\n    return bDigit - aDigit\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescNumDescNumDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDescNumDescNumDescNum([]) == []\n  */\nconst orderByPointDescNumDescNumDescNum = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = parseInt(a.toString().split('').reverse().join(''), 10)\n    const bDigit = parseInt(b.toString().split('').reverse().join(''), 10)\n    return bDigit - aDigit\n  })\n}\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescNumDescNumDescNum([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, -11]\n  >>> orderByPointDescNumDescNumDescNum([]) == []\n  */\nconst orderByPointDescNumDescNumDescNum = (nums) => {\n  const sums = nums.reduce((acc, n) => {\n    const digit = n % 10\n    acc[digit] = acc[digit] || 0\n    acc[digit] += n\n    return acc\n  }, {})\n  return nums.sort((a, b) => {\n    const aDigit = parseInt(a.toString().split('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterEven = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEven = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenEvenEvenOdd = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num % 2 === 0 && num.toString().length === 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilterOddEvenEvenEvenEvenOdd = (nums) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "gottenMaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples2 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples3 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples4 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples5 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples6 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples7 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 9\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples8 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 10\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples9 = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.filter(a => a % 3 === 0).length;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1);\n  const planet2Orbit = orbit(planet2);\n  const planet1Orbits = planet1Orbit.orbits;\n  const planet2Orbits = planet2Orbit.orbits;\n  const planet1Orbits2 = planet1Orbits.concat(planet2Orbits);\n  const planet2Orbits2 = planet2Orbits.concat(planet1Orbits);\n  const planet1Orbits2 = planet1Orbits2.sort((a, b) => a.proximity - b.proximity);\n  const planet2Orbits2 = planet2Orbits2.sort((a, b) => a.proximity - b.proximity);\n  const planet1Orbits2 = planet1Orbits2.filter(\n    orbit => planet1Orbits.includes(orbit)\n  );\n  const planet2Orbits2 = planet2Orbits2.filter(\n    orbit => planet2Orbits.includes(orbit)\n  );\n  return planet1Orbits2.concat(planet2Orbits2);\n};\n\n/* Given a planet name, return the orbit of its closest planet to the Sun.\n  Examples\n  closest(\"Mercury\", \"Sun\") ==> \"Earth\"\n  closest(\"Mercury\", \"Venus\") ==> \"Earth\"\n  closest(\"Mercury\", \"Earth\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mars\") ==> \"Earth\"\n  closest(\"Mercury\", \"Jupiter\") ==> \"Earth\"\n  closest(\"Mercury\", \"Saturn\") ==> \"Earth\"\n  closest(\"Mercury\", \"Uranus\") ==> \"Earth\"\n  closest(\"Mercury\", \"Neptune\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"Mercury\", \"Mercury\") ==> \"Earth\"\n  closest(\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortListsSums", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i].length;\n  }\n  return lst.sort((a, b) => a - b).map(s => s.slice(0, sum));\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of characters in that string.\n  The function should return an integer value.\n  You may assume that all characters will have the same length.\n  For example:\n  assert count_chars(\"aa\") == 2\n  assert count_chars(\"ab\") == 1\n  assert count_chars(\"abc\") == 3\n  */\nconst countChars = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    count += str.charCodeAt(i);\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of uppercase letters in that string.\n  The function should return an integer value.\n  You may assume that all uppercase letters will have the same length.\n  For example:\n  assert count_uppers(\"aa\") == 2\n  assert count_uppers(\"ab\") == 1\n  assert count_uppers(\"abc\") == 3\n  */\nconst countUppers = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 65 && str[i] <= 90) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of lowercase letters in that string.\n  The function should return an integer value.\n  You may assume that all lowercase letters will have the same length.\n  For example:\n  assert count_lowers(\"aa\") == 2\n  assert count_lowers(\"ab\") == 1\n  assert count_lowers(\"abc\") == 3\n  */\nconst countLowers = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 97 && str[i] <= 122) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of digits in that string.\n  The function should return an integer value.\n  You may assume that all digits will have the same length.\n  For example:\n  assert count_digits(\"aa\") == 2\n  assert count_digits(\"ab\") == 1\n  assert count_digits(\"abc\") == 3\n  */\nconst countDigits = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 48 && str[i] <= 57) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of special characters in that string.\n  The function should return an integer value.\n  You may assume that all special characters will have the same length.\n  For example:\n  assert count_specials(\"aa\") == 2\n  assert count_specials(\"ab\") == 1\n  assert count_specials(\"abc\") == 3\n  */\nconst countSpecials = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= 65 && str[i] <= 90) {\n      count += 1;\n    } else if (str[i] >= 97 && str[i] <= 122) {\n      count += 1;\n    } else if (str[i] >= 48 && str[i] <= 57) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of spaces in that string.\n  The function should return an integer value.\n  You may assume that all spaces will have the same length.\n  For example:\n  assert count_spaces(\" aa\") == 2\n  assert count_spaces(\" ab\") == 1\n  assert count_spaces(\" abc\") == 3\n  */\nconst countSpaces = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of words in that string.\n  The function should return an integer value.\n  You may assume that all words will have the same length.\n  For example:\n  assert count_words(\"aa\") == 2\n  assert count_words(\"ab\") == 1\n  assert count_words(\"abc\") == 3\n  */\nconst countWords = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ==='' || str[i] === '\\t') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of lines in that string.\n  The function should return an integer value.\n  You may assume that all lines will have the same length.\n  For example:\n  assert count_lines(\"aa\") == 2\n  assert count_lines(\"ab\") == 1\n  assert count_lines(\"abc\") == 3\n  */\nconst countLines = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\n') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of characters in each line.\n  The function should return an integer value.\n  You may assume that all characters will have the same length.\n  For example:\n  assert count_lines(\"aa\") == 2\n  assert count_lines(\"ab\") == 1\n  assert count_lines(\"abc\") == 3\n  */\nconst countLinesChars = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\n') {\n      count += 1;\n    } else if (str[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of characters in each line.\n  The function should return an integer value.\n  You may assume that all characters will have the same length.\n  For example:\n  assert count_lines(\"aa\") == 2\n  assert count_lines(\"ab\") == 1\n  assert count_lines(\"abc\") == 3\n  */\nconst countLinesWords = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\n') {\n      count += 1;\n    } else if (str[i] ==='' || str[i] === '\\t') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of characters in each line.\n  The function should return an integer value.\n  You may assume that all characters will have the same length.\n  For example:\n  assert count_lines(\"aa\") == 2\n  assert count_lines(\"ab\") == 1\n  assert count_lines(\"abc\") == 3\n  */\nconst countLinesSpaces = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ==='' || str[i] === '\\t') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of characters in each line.\n  The function should return an integer value.\n  You may assume that all characters will have the same length.\n  For example:\n  assert count_lines(\"aa\") == 2\n  assert count_lines(\"ab\") == 1\n  assert count_lines(\"abc\") == 3\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequences", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='';\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in number, return '0'.\n */\nconst numberSequence = (n) => {\n  let result = '';\n  if (n >= 0) {\n    if (n < 10) {\n      result = n;\n    } else {\n      result = stringSequences(n);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in number, return '0'.\n */\nconst numberSequences = (n) => {\n  let result = '';\n  if (n >= 0) {\n    if (n < 10) {\n      result = n;\n    } else {\n      result = numberSequences(n);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in number, return '0'.\n */\nconst numberSequences = (n) => {\n  let result = '';\n  if (n >= 0) {\n    if (n < 10) {\n      result = n;\n    } else {\n      result = numberSequences(n);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in number, return '0'.\n */\nconst numberSequences = (n) => {\n  let result = '';\n  if (n >= 0) {\n    if (n < 10) {\n      result = n;\n    } else {\n      result = numberSequences(n);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in number, return '0'.\n */\nconst numberSequences = (n) => {\n  let result = '';\n  if (n >= 0) {\n    if (n < 10) {\n      result = n;\n    } else {\n      result = numberSequences(n);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in number, return '0'.\n */\nconst numberSequences = (n) => {\n  let result = '';\n  if (n >= 0) {\n    if (n < 10) {\n      result = n;\n    } else {\n      result = numberSequences(n);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in number, return '0'.\n */\nconst numberSequences = (n) => {\n  let result = '';\n  if (n >= 0) {\n    if (n < 10) {\n      result = n;\n    } else {\n      result = numberSequences(n);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in number, return '0'.\n */\nconst numberSequences = (n) => {\n  let result = '';\n  if (n >= 0) {\n    if (n < 10) {\n      result = n;\n    } else {\n      result = numberSequences(n);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in number, return '0'.\n */\nconst numberSequences = (n) => {\n  let result = '';\n  if (n >= 0) {\n    if (n < 10) {\n      result = n;\n    } else {\n      result = numberSequences(n);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in number, return '0'.\n */\nconst numberSequences = (n) => {\n  let result = '';\n  if (n >= 0) {\n    if (n < 10) {\n      result = n;\n    } else {\n      result = numberSequences(n);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in number, return '0'.\n */\nconst numberSequences = (n) => {\n  let result = '';\n  if (n >= 0) {\n    if (n < 10) {\n      result = n;\n    } else {\n      result = numberSequences(n);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in number, return '0'.\n */\nconst numberSequences = (n) => {\n  let result = '';\n  if (n >= 0) {\n    if (n < 10) {\n      result = n;\n    } else {\n      result = numberSequences(n);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in number, return '0'.\n */\nconst numberSequences = (n) => {\n  let result = '';\n  if (n >= 0) {\n    if (n < 10) {\n      result = n;\n    } else {\n      result = numberSequences(n);\n    }\n  }\n  return result;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of digits in number, return an empty string.\n * If n is less than 0, return '0'.\n * If n is less than the number of digits in ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrY(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrZ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrW(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrX(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrY(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrZ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrW(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrX(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrY(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrZ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrW(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrX(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrY(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y === 0) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return x;\n  }\n  return xOrZ(n / 2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || y <= 0 || n >= y || n % y ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  return lst.reduce((acc, curr) => acc + curr * curr, 0);\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1]) == 1 + 1 = 1\n  doubleTheDifference([-1]) == -1\n  doubleTheDifference([9]) == 9\n  doubleTheDifference([-3]) == 3\n  doubleTheDifference([-5, -4, -3, -2, -1]) == 15\n  doubleTheDifference([-5, -4, -3, -2, -3]) == 25\n  doubleTheDifference([-5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -4, -3, -2, -5, -", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameScores = game.map((score) => score);\n  const guessScores = guess.map((score) => score);\n  const gameScoreDifferences = gameScores.map((score) => Math.abs(score - guessScores[0]));\n  const gameScoreDifferenceDifferences = gameScoreDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScore", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_strength_map = new Map();\n  extensions.forEach(extension => {\n    const extension_strength = extension.match(/[A-Z]+/g).length;\n    extension_strength_map.set(extension, extension_strength);\n  });\n  const extension_strength_array = Array.from(extension_strength_map.values());\n  const strongest_extension = extension_strength_array.reduce((acc, curr) => {\n    return acc > curr? curr : acc;\n  }, 0);\n  return `${class_name}${strongest_extension}`;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the strongest extension.\n  Example:\n  strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtension_1 = (strongest_extension, class_name, extensions) => {\n  const extension_strength_map = new Map();\n  extensions.forEach(extension => {\n    const extension_strength = extension.match(/[A-Z]+/g).length;\n    extension_strength_map.set(extension, extension_strength);\n  });\n  const extension_strength_array = Array.from(extension_strength_map.values());\n  const strongest_extension_1 = extension_strength_array.reduce((acc, curr) => {\n    return acc > curr? curr : acc;\n  }, 0);\n  return `${class_name}${strongest_extension_1}`;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the strongest extension.\n  Example:\n  strongestExtension_0('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtension_0 = (strongest_extension, class_name, extensions) => {\n  const extension_strength_map = new Map();\n  extensions.forEach(extension => {\n    const extension_strength = extension.match(/[A-Z]+/g).length;\n    extension_strength_map.set(extension, extension_strength);\n  });\n  const extension_strength_array = Array.from(extension_strength_map.values());\n  const strongest_extension_0 = extension_strength_array.reduce((acc, curr) => {\n    return acc > curr? curr : acc;\n  }, 0);\n  return `${class_name}${strongest_extension_0}`;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the strongest extension.\n  Example:\n  strongestExtension_1('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtension_1 = (strongest_extension, class_name, extensions) => {\n  const extension_strength_map = new Map();\n  extensions.forEach(extension => {\n    const extension_strength = extension.match(/[A-Z]+/g).length;\n    extension_strength_map.set(extension, extension_strength);\n  });\n  const extension_strength_array = Array.from(extension_strength_map.values());\n  const strongest_extension_1 = extension_strength_array.reduce((acc, curr) => {\n    return acc > curr? curr : acc;\n  }, 0);\n  return `${class_name}${strongest_extension_1}`;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the strongest extension.\n  Example:\n  strongestExtension_0('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtension_0 = (strongest_extension, class_name, extensions) => {\n  const extension_strength_map = new Map();\n  extensions.forEach(extension => {\n    const extension_strength = extension.match(/[A-Z]+/g).length;\n    extension_strength_map.set(extension, extension_strength);\n  });\n  const extension_strength_array = Array.from(extension_strength_map.values());\n  const strongest_extension_0 = extension_strength_array.reduce((acc, curr) => {\n    return acc > curr? curr : acc;\n  }, 0);\n  return `${class_name}${strongest_extension_0}`;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the strongest extension.\n  Example:\n  strongestExtension_1('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtension_1 = (strongest_extension, class_name, extensions) => {\n  const extension_strength_map = new Map();\n  extensions.forEach(extension => {\n    const extension_strength = extension.match(/[A-Z]+/g).length;\n    extension_strength_map.set(extension, extension_strength);\n  });\n  const extension_strength_array = Array.from(extension_strength_map.values());\n  const strongest_extension_1 = extension_strength_array.reduce((acc, curr) => {\n    return acc > curr? curr : acc;\n  }, 0);\n  return `${class_name}${strongest_extension_1}`;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the strongest extension.\n  Example:\n  strongestExtension_0('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtension_0 = (strongest_extension, class_name, extensions) => {\n  const extension_strength_map = new Map();\n  extensions.forEach(extension => {\n    const extension_strength = extension.match(/[A-Z]+/g).length;\n    extension_strength_map.set(extension, extension_strength);\n  });\n  const extension_strength_array = Array.from(extension_strength_map.values());\n  const strongest_extension_0 = extension_strength_array.reduce((acc, curr) => {\n    return acc > curr? curr : acc;\n  }, 0);\n  return `${class_name}${strongest_extension_0}`;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name with\n  the strongest extension.\n  Example:\n  strongestExtension_1('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst strongestExtension_1 = (strongest_extension, class_name, extensions) => {\n  const extension_strength_map = new Map();\n  extensions.forEach(extension => {\n    const extension_strength = extension.match(/[A-Z]+/g).length;\n    extension_strength_map.set(extension, extension_strength);\n  });\n  const extension_strength_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArray = a.split('');\n  let bArray = b.split('');\n  let aLen = aArray.length;\n  let bLen = bArray.length;\n  let aRotation = aArray[(aLen - bLen) % aLen];\n  let bRotation = bArray[(bLen - aLen) % bLen];\n  let aRotation = aRotation.toUpperCase();\n  let bRotation = bRotation.toUpperCase();\n  if (aRotation === bRotation) {\n    return true;\n  }\n  let aRotation = aRotation.split('');\n  let bRotation = bRotation.split('');\n  let aLen = aRotation.length;\n  let bLen = bRotation.length;\n  let aRotation = aRotation[(aLen - bLen) % aLen];\n  let bRotation = bRotation[(bLen - aLen) % bLen];\n  let aRotation = aRotation.toUpperCase();\n  let bRotation = bRotation.toUpperCase();\n  if (aRotation === bRotation) {\n    return true;\n  }\n  let aRotation = aRotation.split('');\n  let bRotation = bRotation.split('');\n  let aLen = aRotation.length;\n  let bLen = bRotation.length;\n  let aRotation = aRotation[(aLen - bLen) % aLen];\n  let bRotation = bRotation[(bLen - aLen) % bLen];\n  let aRotation = aRotation.toUpperCase();\n  let bRotation = bRotation.toUpperCase();\n  if (aRotation === bRotation) {\n    return true;\n  }\n  let aRotation = aRotation.split('');\n  let bRotation = bRotation.split('');\n  let aLen = aRotation.length;\n  let bLen = bRotation.length;\n  let aRotation = aRotation[(aLen - bLen) % aLen];\n  let bRotation = bRotation[(bLen - aLen) % bLen];\n  let aRotation = aRotation.toUpperCase();\n  let bRotation = bRotation.toUpperCase();\n  if (aRotation === bRotation) {\n    return true;\n  }\n  let aRotation = aRotation.split('');\n  let bRotation = bRotation.split('');\n  let aLen = aRotation.length;\n  let bLen = bRotation.length;\n  let aRotation = aRotation[(aLen - bLen) % aLen];\n  let bRotation = bRotation[(bLen - aLen) % bLen];\n  let aRotation = aRotation.toUpperCase();\n  let bRotation = bRotation.toUpperCase();\n  if (aRotation === bRotation) {\n    return true;\n  }\n  let aRotation = aRotation.split('');\n  let bRotation = bRotation.split('');\n  let aLen = aRotation.length;\n  let bLen = bRotation.length;\n  let aRotation = aRotation[(aLen - bLen) % aLen];\n  let bRotation = bRotation[(bLen - aLen) % bLen];\n  let aRotation = aRotation.toUpperCase();\n  let bRotation = bRotation.toUpperCase();\n  if (aRotation === bRotation) {\n    return true;\n  }\n  let aRotation = aRotation.split('');\n  let bRotation = bRotation.split('');\n  let aLen = aRotation.length;\n  let bLen = bRotation.length;\n  let aRotation = aRotation[(aLen - bLen) % aLen];\n  let bRotation = bRotation[(bLen - aLen) % bLen];\n  let aRotation = aRotation.toUpperCase();\n  let bRotation = bRotation.toUpperCase();\n  if (aRotation === bRotation) {\n    return true;\n  }\n  let aRotation = aRotation.split('');\n  let bRotation = bRotation.split('');\n  let aLen = aRotation.length;\n  let bLen = bRotation.length;\n  let aRotation = aRotation[(aLen - bLen) % aLen];\n  let bRotation = bRotation[(bLen - aLen) % bLen];\n  let aRotation = aRotation.toUpperCase();\n  let bRotation = bRotation.toUpperCase();\n  if (aRotation === bRotation) {\n    return true;\n  }\n  let aRotation = aRotation.split('');\n  let bRotation = bRotation.split('');\n  let aLen = aRotation.length;\n  let bLen = bRotation.length;\n  let aRotation = aRotation[(aLen - bLen) % aLen];\n  let bRotation = bRotation[(bLen - aLen) % bLen];\n  let aRotation = aRotation.toUpperCase();\n  let bRotation = bRotation.toUpperCase();\n  if (aRotation === bRotation) {\n    return true;\n  }\n  let aRotation = aRotation.split('');\n  let bRotation = bRotation.split('');\n  let aLen = aRotation.length;\n  let bLen = bRotation.length;\n  let aRotation = aRotation[(aLen - bLen) % aLen];\n  let bRotation = bRotation[(bLen - aLen) % bLen];\n  let aRotation = aRotation.toUpperCase();\n  let bRotation = bRotation.toUpperCase();\n  if (aRotation === bRotation) {\n    return true;\n  }\n  let aRotation = aRotation.split('');\n  let bRotation = bRotation.split('');\n  let aLen = aRotation.length;\n  let bLen = bRotation.length;\n  let aRotation = aRotation[(aLen - bLen) % aLen];\n  let bRotation = bRotation[(bLen - aLen) % bLen];\n  let aRotation = aRotation.toUpperCase();\n  let bRotation = bRotation.toUpperCase();\n  if (aRotation === bRotation) {\n    return true;\n  }\n  let aRotation = aRotation.split('');\n  let bRotation = bRotation.split('');\n  let aLen = aRotation.length;\n  let bLen = bRotation.length;\n  let aRotation = aRotation[(aLen - bLen) % aLen];\n  let bRotation = bRotation[(bLen - aLen) % bLen];\n  let aRotation = aRotation.toUpperCase();\n  let bRotation = bRotation.toUpperCase();\n  if (aRotation === bRotation) {\n    return true;\n  }\n  let aRotation = aRotation.split('');\n  let bRotation = bRotation.split('');\n  let aLen = aRotation.length;\n  let bLen = bRotation.length;\n  let aRotation = aRotation[(aLen - bLen) % aLen];\n  let bRotation = bRotation[(bLen - aLen) % bLen];\n  let aRotation = aRotation.toUpperCase();\n  let bRotation = bRotation.toUpperCase();\n  if (aRotation === bRotation) {\n    return true;\n  }\n  let aRotation = aRotation.split('');\n  let bRotation = bRotation.split('');\n  let aLen = aRotation.length;\n  let bLen = bRotation.length;\n  let aRotation = aRotation[(aLen - bLen) % ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOdderCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let tempNum = num;\n  while (tempNum) {\n    tempNum = tempNum % 10;\n    evenCount++;\n    if (tempNum % 2 === 0) {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return an array that has all the unique characters in the string.\n\n   Example:\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      uniqueChars('hello') ==> ['h', 'e', 'l', 'l", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    result += num.charAt(i).toLowerCase();\n  }\n\n  return result;\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its binary\n  representation (base 2), and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinaryDigits(19) == '11'\n  >>> intToBinaryDigits(152) == '111'\n  >>> intToBinaryDigits(426) == '11110'\n  */\nconst intToBinaryDigits = (number) => {\n  let result = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    result += num.charAt(i).toLowerCase();\n  }\n\n  return result.replace(/^0+/, '');\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its binary\n  representation (base 2), and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinaryDigits(19) == '11'\n  >>> intToBinaryDigits(152) == '111'\n  >>> intToBinaryDigits(426) == '11110'\n  */\nconst intToBinaryDigits = (number) => {\n  let result = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    result += num.charAt(i).toUpperCase();\n  }\n\n  return result.replace(/^0+/, '');\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its binary\n  representation (base 2), and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinaryDigits(19) == '11'\n  >>> intToBinaryDigits(152) == '111'\n  >>> intToBinaryDigits(426) == '11110'\n  */\nconst intToBinaryDigits = (number) => {\n  let result = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    result += num.charAt(i).toUpperCase();\n  }\n\n  return result.replace(/^0+/, '');\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its binary\n  representation (base 2), and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinaryDigits(19) == '11'\n  >>> intToBinaryDigits(152) == '111'\n  >>> intToBinaryDigits(426) == '11110'\n  */\nconst intToBinaryDigits = (number) => {\n  let result = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    result += num.charAt(i).toUpperCase();\n  }\n\n  return result.replace(/^0+/, '');\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its binary\n  representation (base 2), and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinaryDigits(19) == '11'\n  >>> intToBinaryDigits(152) == '111'\n  >>> intToBinaryDigits(426) == '11110'\n  */\nconst intToBinaryDigits = (number) => {\n  let result = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    result += num.charAt(i).toUpperCase();\n  }\n\n  return result.replace(/^0+/, '');\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its binary\n  representation (base 2), and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinaryDigits(19) == '11'\n  >>> intToBinaryDigits(152) == '111'\n  >>> intToBinaryDigits(426) == '11110'\n  */\nconst intToBinaryDigits = (number) => {\n  let result = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    result += num.charAt(i).toUpperCase();\n  }\n\n  return result.replace(/^0+/, '');\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its binary\n  representation (base 2), and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinaryDigits(19) == '11'\n  >>> intToBinaryDigits(152) == '111'\n  >>> intToBinaryDigits(426) == '11110'\n  */\nconst intToBinaryDigits = (number) => {\n  let result = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    result += num.charAt(i).toUpperCase();\n  }\n\n  return result.replace(/^0+/, '');\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its binary\n  representation (base 2), and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinaryDigits(19) == '11'\n  >>> intToBinaryDigits(152) == '111'\n  >>> intToBinaryDigits(426) == '11110'\n  */\nconst intToBinaryDigits = (number) => {\n  let result = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    result += num.charAt(i).toUpperCase();\n  }\n\n  return result.replace(/^0+/, '');\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its binary\n  representation (base 2), and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinaryDigits(19) == '11'\n  >>> intToBinaryDigits(152) == '111'\n  >>> intToBinaryDigits(426) == '11110'\n  */\nconst intToBinaryDigits = (number) => {\n  let result = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    result += num.charAt(i).toUpperCase();\n  }\n\n  return result.replace(/^0+/, '');\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its binary\n  representation (base 2), and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinaryDigits(19) == '11'\n  >>> intToBinaryDigits(152) == '111'\n  >>> intToBinaryDigits(426) == '11110'\n  */\nconst intToBinaryDigits = (number) => {\n  let result = '';\n  let num = (number + '');\n  let i;\n\n  for (i = num.length - 1; i >= 0; i--) {\n    result += num.charAt(i).toUpperCase();\n  }\n\n  return result.replace(/^0+/, '');\n};\n\n/*\n  Given a positive integer, obtain the number of digits in its binary\n  representation (base 2), and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToBinaryDigits(19) == '11'\n  >>> intToBinaryDigits(152) == '111'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangles", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab - ac;\n  const bcc = bc - ac;\n  return abc > 0 && bcc > 0 && abc < 90 && bcc < 90;\n};\n\n// Given the lengths of the three sides of a rectangle. Return true if the three\n// sides form a square, false otherwise.\n// A square is a square in which all sides are equal.\n// Example:\n// square(3, 4) == true\n// square(3, 5) == false\nconst square = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a pentagon. Return true if the three\n// sides form a pentagon, false otherwise.\n// A pentagon is a pentagon whose sides are all equal.\n// Example:\n// pentagon(3, 4) == true\n// pentagon(3, 4) == false\nconst pentagon = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a hexagon. Return true if the three\n// sides form a hexagon, false otherwise.\n// A hexagon is a hexagon whose sides are all equal.\n// Example:\n// hexagon(3, 4) == true\n// hexagon(3, 4) == false\nconst hexagon = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a heptagon. Return true if the three\n// sides form a heptagon, false otherwise.\n// A heptagon is a heptagon whose sides are all equal.\n// Example:\n// heptagon(3, 4) == true\n// heptagon(3, 4) == false\nconst heptagon = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a decagon. Return true if the three\n// sides form a decagon, false otherwise.\n// A decade is a decade whose sides are all equal.\n// Example:\n// decagon(3, 4) == true\n// decagon(3, 4) == false\nconst decagon = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a heptucket. Return true if the three\n// sides form a heptucket, false otherwise.\n// A heptucket is a heptucket whose sides are all equal.\n// Example:\n// heptucket(3, 4) == true\n// heptucket(3, 4) == false\nconst heptucket = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a octagon. Return true if the three\n// sides form a octagon, false otherwise.\n// A octagon is a octagon whose sides are all equal.\n// Example:\n// octagon(3, 4) == true\n// octagon(3, 4) == false\nconst octagon = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a dodecagon. Return true if the three\n// sides form a dodecagon, false otherwise.\n// A dodecagon is a dodecagon whose sides are all equal.\n// Example:\n// dodecagon(3, 4) == true\n// dodecagon(3, 4) == false\nconst dodecagon = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a quag. Return true if the three\n// sides form a quag, false otherwise.\n// A quag is a quag whose sides are all equal.\n// Example:\n// quag(3, 4) == true\n// quag(3, 4) == false\nconst quag = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a crescent. Return true if the three\n// sides form a crescent, false otherwise.\n// A crescent is a crescent whose sides are all equal.\n// Example:\n// crescent(3, 4) == true\n// crescent(3, 4) == false\nconst crescent = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a hexadecagon. Return true if the three\n// sides form a hexadecagon, false otherwise.\n// A hexadecade is a hexadecade whose sides are all equal.\n// Example:\n// hexadecagon(3, 4) == true\n// hexadecagon(3, 4) == false\nconst hexadecagon = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a heptagon. Return true if the three\n// sides form a heptagon, false otherwise.\n// A heptagon is a heptagon whose sides are all equal.\n// Example:\n// heptagon(3, 4) == true\n// heptagon(3, 4) == false\nconst heptagon = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a decagon. Return true if the three\n// sides form a decagon, false otherwise.\n// A decade is a decade whose sides are all equal.\n// Example:\n// decagon(3, 4) == true\n// decagon(3, 4) == false\nconst decagon = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a heptucket. Return true if the three\n// sides form a heptucket, false otherwise.\n// A heptucket is a heptucket whose sides are all equal.\n// Example:\n// heptucket(3, 4) == true\n// heptucket(3, 4) == false\nconst heptucket = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a octagon. Return true if the three\n// sides form a octagon, false otherwise.\n// A octagon is a octagon whose sides are all equal.\n// Example:\n// octagon(3, 4) == true\n// octagon(3, 4) == false\nconst octagon = (l, r) => {\n  return l === r && l === l && r === r;\n};\n\n// Given the lengths of the three sides of a dodecagon. Return true if the three\n// sides form a dodecagon, false otherwise.\n// A dodecagon is a dodecagon whose sides are all equal.\n// Example:\n// dodecagon(3, 4) == true\n// dodecagon(3, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "foundMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  let max = 0;\n  let maxWord = words[0];\n  let maxWordLength = 0;\n  let maxWordCount = 0;\n  let maxWordIndex = 0;\n  let maxWordIndex2 = 0;\n  let maxWordIndex3 = 0;\n  let maxWordIndex4 = 0;\n  let maxWordIndex5 = 0;\n  let maxWordIndex6 = 0;\n  let maxWordIndex7 = 0;\n  let maxWordIndex8 = 0;\n  let maxWordIndex9 = 0;\n  let maxWordIndex10 = 0;\n  let maxWordIndex11 = 0;\n  let maxWordIndex12 = 0;\n  let maxWordIndex13 = 0;\n  let maxWordIndex14 = 0;\n  let maxWordIndex15 = 0;\n  let maxWordIndex16 = 0;\n  let maxWordIndex17 = 0;\n  let maxWordIndex18 = 0;\n  let maxWordIndex19 = 0;\n  let maxWordIndex20 = 0;\n  let maxWordIndex21 = 0;\n  let maxWordIndex22 = 0;\n  let maxWordIndex23 = 0;\n  let maxWordIndex24 = 0;\n  let maxWordIndex25 = 0;\n  let maxWordIndex26 = 0;\n  let maxWordIndex27 = 0;\n  let maxWordIndex28 = 0;\n  let maxWordIndex29 = 0;\n  let maxWordIndex30 = 0;\n  let maxWordIndex31 = 0;\n  let maxWordIndex32 = 0;\n  let maxWordIndex33 = 0;\n  let maxWordIndex34 = 0;\n  let maxWordIndex35 = 0;\n  let maxWordIndex36 = 0;\n  let maxWordIndex37 = 0;\n  let maxWordIndex38 = 0;\n  let maxWordIndex39 = 0;\n  let maxWordIndex40 = 0;\n  let maxWordIndex41 = 0;\n  let maxWordIndex42 = 0;\n  let maxWordIndex43 = 0;\n  let maxWordIndex44 = 0;\n  let maxWordIndex45 = 0;\n  let maxWordIndex46 = 0;\n  let maxWordIndex47 = 0;\n  let maxWordIndex48 = 0;\n  let maxWordIndex49 = 0;\n  let maxWordIndex50 = 0;\n  let maxWordIndex51 = 0;\n  let maxWordIndex52 = 0;\n  let maxWordIndex53 = 0;\n  let maxWordIndex54 = 0;\n  let maxWordIndex55 = 0;\n  let maxWordIndex56 = 0;\n  let maxWordIndex57 = 0;\n  let maxWordIndex58 = 0;\n  let maxWordIndex59 = 0;\n  let maxWordIndex60 = 0;\n  let maxWordIndex61 = 0;\n  let maxWordIndex62 = 0;\n  let maxWordIndex63 = 0;\n  let maxWordIndex64 = 0;\n  let maxWordIndex65 = 0;\n  let maxWordIndex66 = 0;\n  let maxWordIndex67 = 0;\n  let maxWordIndex68 = 0;\n  let maxWordIndex69 = 0;\n  let maxWordIndex70 = 0;\n  let maxWordIndex71 = 0;\n  let maxWordIndex72 = 0;\n  let maxWordIndex73 = 0;\n  let maxWordIndex74 = 0;\n  let maxWordIndex75 = 0;\n  let maxWordIndex76 = 0;\n  let maxWordIndex77 = 0;\n  let maxWordIndex78 = 0;\n  let maxWordIndex79 = 0;\n  let maxWordIndex80 = 0;\n  let maxWordIndex81 = 0;\n  let maxWordIndex82 = 0;\n  let maxWordIndex83 = 0;\n  let maxWordIndex84 = 0;\n  let maxWordIndex85 = 0;\n  let maxWordIndex86 = 0;\n  let maxWordIndex87 = 0;\n  let maxWordIndex88 = 0;\n  let maxWordIndex89 = 0;\n  let maxWordIndex90 = 0;\n  let maxWordIndex91 = 0;\n  let maxWordIndex92 = 0;\n  let maxWordIndex93 = 0;\n  let maxWordIndex94 = 0;\n  let maxWordIndex95 = 0;\n  let maxWordIndex96 = 0;\n  let maxWordIndex97 = 0;\n  let maxWordIndex98 = 0;\n  let maxWordIndex99 = 0;\n  let maxWordIndex100 = 0;\n  let maxWordIndex101 = 0;\n  let maxWordIndex102 = 0;\n  let maxWordIndex103 = 0;\n  let maxWordIndex104 = 0;\n  let maxWordIndex105 = 0;\n  let maxWordIndex106 = 0;\n  let maxWordIndex107 = 0;\n  let maxWordIndex108 = 0;\n  let maxWordIndex109 = 0;\n  let maxWordIndex110 = 0;\n  let maxWordIndex111 = 0;\n  let maxWordIndex112 = 0;\n  let maxWordIndex113 = 0;\n  let maxWordIndex114 = 0;\n  let maxWordIndex115 = 0;\n  let maxWordIndex116 = 0;\n  let maxWordIndex117 = 0;\n  let maxWordIndex118 = 0;\n  let maxWordIndex119 = 0;\n  let maxWordIndex120 = 0;\n  let maxWordIndex121 = 0;\n  let maxWordIndex122 = 0;\n  let maxWordIndex123 = 0;\n  let maxWordIndex124 = 0;\n  let maxWordIndex125 = 0;\n  let maxWordIndex126 = 0;\n  let maxWordIndex127 = 0;\n  let maxWordIndex128 = 0;\n  let maxWordIndex129 = 0;\n  let maxWordIndex130 = 0;\n  let maxWordIndex131 = 0;\n  let maxWordIndex132 = 0;\n  let maxWordIndex133 = 0;\n  let maxWordIndex134 = 0;\n  let maxWordIndex135 = 0;\n  let maxWordIndex136 = 0;\n  let maxWordIndex137 = 0;\n  let maxWordIndex138 = 0;\n  let maxWordIndex139 = 0;\n  let maxWordIndex140 = 0;\n  let maxWordIndex141 = 0;\n  let maxWordIndex142 = 0;\n  let maxWordIndex143 = 0;\n  let maxWordIndex144 = 0;\n  let maxWordIndex145 = 0;\n  let maxWordIndex146 = 0;\n  let maxWordIndex147 = 0;\n  let maxWordIndex148 = 0;\n  let maxWordIndex149 = 0;\n  let maxWordIndex150 = 0;\n  let maxWordIndex151 = 0;\n  let maxWordIndex152 = 0;\n  let maxWordIndex153 = 0;\n  let maxWordIndex154 = 0;\n  let maxWordIndex155 = 0;\n  let maxWordIndex156 = 0;\n  let maxWordIndex157 = 0;\n  let maxWordIndex158 = 0;\n  let maxWordIndex159 = 0;\n  let maxWordIndex160 = 0;\n  let maxWordIndex161 = 0;\n  let maxWordIndex162 = 0;\n  let maxWordIndex163 = 0;\n  let maxWordIndex164 = 0;\n  let maxWordIndex165 = 0;\n  let maxWordIndex166 = 0;\n  let maxWordIndex167 = 0;\n  let maxWordIndex168 = 0;\n  let maxWordIndex169 = 0;\n  let maxWordIndex170 = 0;\n  let maxWordIndex171 = 0;\n  let maxWordIndex172 = 0;\n  let maxWordIndex173 = 0;\n  let maxWordIndex174 = 0;\n  let maxWordIndex175 = 0;\n  let maxWordIndex176 = 0;\n  let maxWordIndex177 = 0;\n  let maxWordIndex178 = 0;\n  let maxWordIndex179 = 0;\n  let maxWordIndex180 = 0;\n  let maxWordIndex181 = 0;\n  let maxWordIndex182 = 0;\n  let maxWordIndex183 = 0;\n  let maxWordIndex184 = 0;\n  let maxWordIndex185 = 0;\n  let maxWordIndex186 = 0;\n  let maxWordIndex187 = 0;\n  let maxWordIndex188 = 0;\n  let maxWordIndex189 = 0;\n  let maxWordIndex190 = 0;\n  let maxWordIndex191 = 0;\n  let maxWordIndex192 = 0;\n  let maxWordIndex193 = 0;\n  let maxWordIndex194 = 0;\n  let maxWordIndex195 = 0;\n  let maxWordIndex196 = 0;\n  let maxWordIndex197 = 0;\n  let maxWordIndex198 = 0;\n  let maxWordIndex199 = 0;\n  let maxWordIndex200 = 0;\n  let maxWordIndex201 = 0;\n  let maxWordIndex202", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  const remainder = Math.floor(remaining / number);\n  const remainderRemaining = remaining % number;\n  const remainderRemainingRemaining = remainderRemaining % number;\n  const remainderRemainingRemainingRemaining = remainderRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % number;\n  const remainderRemainingRemainingRemainingRemainingRemainingRemaining = remainder", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistincterCharacter", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find the most frequently occurring substring within it.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This only works if all characters are lowercase.\n * Note: This ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = operandList.reduce((acc, curr, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n    return acc + operator * operand\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = operandList.reduce((acc, curr, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n    return acc + operator * operand\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = operandList.reduce((acc, curr, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n    return acc + operator * operand\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = operandList.reduce((acc, curr, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n    return acc + operator * operand\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = operandList.reduce((acc, curr, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n    return acc + operator * operand\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+')\n  const operandList = operand.split('+')\n  const result = operandList.reduce((acc, curr, index) => {\n    const operator = operatorList[index]\n    const operand = operandList[index]\n    return acc + operator * operand\n  }, 0)\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  let len = s.length;\n  let i = 0;\n  let j = 0;\n  let flag = true;\n  while (i < len) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      result += String.fromCharCode(s[i] - 'a' + 1);\n      i++;\n      flag = false;\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      result += String.fromCharCode(s[i] - 'A' + 1);\n      i++;\n      flag = false;\n    } else if (flag) {\n      result += s[i];\n      flag = false;\n    } else {\n      result += s[i];\n      flag = true;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  A palindrome is a string that reads the same backward as forward.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forward and backward as each other.\n  A palindrome is a string that reads the same forwar", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'a94c1154a3e831c69f3e814dff75e2b'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'f8a5fb0a30e3b16608d959f282ac5b9e3b'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9bace6ea4aa9d96b452ea4cc0f86e3b0f86e15bcd'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '9bace6ea4aa9d96b452ea4cc0f86e3b0f86e15bcd'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9bace6ea4aa9d96b452ea4cc0f86e3b0f86e15bcd'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '9bace6ea4aa9d96b452ea4cc0f86e3b0f86e15bcd'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9bace6ea4aa9d96b452ea4cc0f86e3b0f86e15bcd'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '9bace6ea4aa9d96b452ea4cc0f86e3b0f86e15bcd'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9bace6ea4aa9d96b452ea4cc0f86e3b0f86e15bcd'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '9bace6ea4aa9d96b452ea4cc0f86e3b0f86e15bcd'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9bace6ea4aa9d96b452ea4cc0f86e3b0f86e15bcd'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '9bace6ea4aa9d96b452ea4cc0f86e3b0f86e15bcd'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9bace6ea4aa9d96b452ea4cc0f86e3b0f86e15bcd'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '9bace6ea4aa9d96b452ea4cc0f86e", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  while (i < a && j < b) {\n    if (i % 2 === 0) {\n      result.push(j);\n      j++;\n    } else {\n      result.push(k);\n      k++;\n    }\n    i++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into two\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoTwo = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 2;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into three\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoThree = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 3;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into four\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoFour = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 4;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into five\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoFive = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 5;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into six\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoSix = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 6;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into seven\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoSeven = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 7;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into eight\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoEight = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 8;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into nine\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoNine = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 9;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into ten\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoTen = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 10;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into eleven\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoEleven = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 11;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into twelve\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoTwelve = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 12;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into thirteen\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoThirteen = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 13;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into fourteen\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoFourteen = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 14;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into fifteen\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoFifteen = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 15;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into sixteen\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoSixteen = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 16;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into seventeen\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoSeventeen = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 17;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into eighteen\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoEighteen = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 18;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into nineteen\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoNineteen = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 19;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into twenty\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoTwenty = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 20;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into twenty-one\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoTwentyOne = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 21;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n * Given a positive integer n, return the number of ways to split it into twenty-two\n * positive integers, such that each split is at least as large as n.\n */\nconst splitIntoTwentyTwo = (n) => {\n  let result = 0;\n\n  while (n > 0) {\n    n /= 22;\n    result++;\n  }\n\n  return result;\n};\n\n/**\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_length = notes.length;\n  const notes_beats = [];\n  let beats_length = 0;\n  let beats_index = 0;\n  let beats_last = 0;\n  let beats_last_index = 0;\n  let beats_last_index2 = 0;\n  let beats_last_index3 = 0;\n  let beats_last_index4 = 0;\n  let beats_last_index5 = 0;\n  let beats_last_index6 = 0;\n  let beats_last_index7 = 0;\n  let beats_last_index8 = 0;\n  let beats_last_index9 = 0;\n  let beats_last_index10 = 0;\n  let beats_last_index11 = 0;\n  let beats_last_index12 = 0;\n  let beats_last_index13 = 0;\n  let beats_last_index14 = 0;\n  let beats_last_index15 = 0;\n  let beats_last_index16 = 0;\n  let beats_last_index17 = 0;\n  let beats_last_index18 = 0;\n  let beats_last_index19 = 0;\n  let beats_last_index20 = 0;\n  let beats_last_index21 = 0;\n  let beats_last_index22 = 0;\n  let beats_last_index23 = 0;\n  let beats_last_index24 = 0;\n  let beats_last_index25 = 0;\n  let beats_last_index26 = 0;\n  let beats_last_index27 = 0;\n  let beats_last_index28 = 0;\n  let beats_last_index29 = 0;\n  let beats_last_index30 = 0;\n  let beats_last_index31 = 0;\n  let beats_last_index32 = 0;\n  let beats_last_index33 = 0;\n  let beats_last_index34 = 0;\n  let beats_last_index35 = 0;\n  let beats_last_index36 = 0;\n  let beats_last_index37 = 0;\n  let beats_last_index38 = 0;\n  let beats_last_index39 = 0;\n  let beats_last_index40 = 0;\n  let beats_last_index41 = 0;\n  let beats_last_index42 = 0;\n  let beats_last_index43 = 0;\n  let beats_last_index44 = 0;\n  let beats_last_index45 = 0;\n  let beats_last_index46 = 0;\n  let beats_last_index47 = 0;\n  let beats_last_index48 = 0;\n  let beats_last_index49 = 0;\n  let beats_last_index50 = 0;\n  let beats_last_index51 = 0;\n  let beats_last_index52 = 0;\n  let beats_last_index53 = 0;\n  let beats_last_index54 = 0;\n  let beats_last_index55 = 0;\n  let beats_last_index56 = 0;\n  let beats_last_index57 = 0;\n  let beats_last_index58 = 0;\n  let beats_last_index59 = 0;\n  let beats_last_index60 = 0;\n  let beats_last_index61 = 0;\n  let beats_last_index62 = 0;\n  let beats_last_index63 = 0;\n  let beats_last_index64 = 0;\n  let beats_last_index65 = 0;\n  let beats_last_index66 = 0;\n  let beats_last_index67 = 0;\n  let beats_last_index68 = 0;\n  let beats_last_index69 = 0;\n  let beats_last_index70 = 0;\n  let beats_last_index71 = 0;\n  let beats_last_index72 = 0;\n  let beats_last_index73 = 0;\n  let beats_last_index74 = 0;\n  let beats_last_index75 = 0;\n  let beats_last_index76 = 0;\n  let beats_last_index77 = 0;\n  let beats_last_index78 = 0;\n  let beats_last_index79 = 0;\n  let beats_last_index80 = 0;\n  let beats_last_index81 = 0;\n  let beats_last_index82 = 0;\n  let beats_last_index83 = 0;\n  let beats_last_index84 = 0;\n  let beats_last_index85 = 0;\n  let beats_last_index86 = 0;\n  let beats_last_index87 = 0;\n  let beats_last_index88 = 0;\n  let beats_last_index89 = 0;\n  let beats_last_index90 = 0;\n  let beats_last_index91 = 0;\n  let beats_last_index92 = 0;\n  let beats_last_index93 = 0;\n  let beats_last_index94 = 0;\n  let beats_last_index95 = 0;\n  let beats_last_index96 = 0;\n  let beats_last_index97 = 0;\n  let beats_last_index98 = 0;\n  let beats_last_index99 = 0;\n  let beats_last_index100 = 0;\n  let beats_last_index101 = 0;\n  let beats_last_index102 = 0;\n  let beats_last_index103 = 0;\n  let beats_last_index104 = 0;\n  let beats_last_index105 = 0;\n  let beats_last_index106 = 0;\n  let beats_last_index107 = 0;\n  let beats_last_index108 = 0;\n  let beats_last_index109 = 0;\n  let beats_last_index110 = 0;\n  let beats_last_index111 = 0;\n  let beats_last_index112 = 0;\n  let beats_last_index113 = 0;\n  let beats_last_index114 = 0;\n  let beats_last_index115 = 0;\n  let beats_last_index116 = 0;\n  let beats_last_index117 = 0;\n  let beats_last_index118 = 0;\n  let beats_last_index119 = 0;\n  let beats_last_index120 = 0;\n  let beats_last_index121 = 0;\n  let beats_last_index122 = 0;\n  let beats_last_index123 = 0;\n  let beats_last_index124 = 0;\n  let beats_last_index125 = 0;\n  let beats_last_index126 = 0;\n  let beats_last_index127 = 0;\n  let beats_last_index128 = 0;\n  let beats_last_index129 = 0;\n  let beats_last_index130 = 0;\n  let beats_last_index131 = 0;\n  let beats_last_index132 = 0;\n  let beats_last_index133 = 0;\n  let beats_last_index134 = 0;\n  let beats_last_index135 = 0;\n  let beats_last_index136 = 0;\n  let beats_last_index137 = 0;\n  let beats_last_index138 = 0;\n  let beats_last_index139 = 0;\n  let beats_last_index140 = 0;\n  let beats_last_index141 = 0;\n  let beats_last_index142 = 0;\n  let beats_last_index143 = 0;\n  let beats_last_index144 = 0;\n  let beats_last_index145 = 0;\n  let beats_last_index146 = 0;\n  let beats_last_index147 = 0;\n  let beats_last_index148 = 0;\n  let beats_last_index149 = 0;\n  let beats_last_index150 = 0;\n  let beats_last_index151 = 0;\n  let beats_last_index152 = 0;\n  let beats_last_index153 = 0;\n  let beats_last_index154 = 0;\n  let beats_last_index155 = 0;\n  let beats_last_index156 = 0;\n  let beats_last_index157 = 0;\n  let beats_last_index158 = 0;\n  let beats_last_index159 = 0;\n  let beats_last_index160 = 0;\n  let beats_last_index161 = 0;\n  let beats_last_index162 = 0;\n  let beats_last_index163 = 0;\n  let beats_last_index164 = 0;\n  let beats_last_index165 = 0;\n  let beats_last_index166 = 0;\n  let beats_last_index167 = 0;\n  let beats_last_index168 = 0;\n  let beats_last_index169 = 0;\n  let beats_last_index170 = 0;\n  let beats_last_index171 = 0;\n  let beat", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTime", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = substring? substring : string.length;\n  while (i < l && j < m) {\n    if (string.charAt(i) === substring.charAt(j)) {\n      count++;\n      i++;\n      j++;\n    } else {\n      count++;\n      i++;\n    }\n  }\n  return count;\n};\n\n/**\n * A simple way to check if a string is a valid email address.\n * It checks whether the string is in the form of an email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also checks if the string is a valid email address and is valid.\n * It also ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortsNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sorted = [];\n  numbers.forEach((number) => {\n    if (number === 'zero') {\n      sorted.push('zero');\n    } else if (number === 'one') {\n      sorted.push('one');\n    } else if (number === 'two') {\n      sorted.push('two');\n    } else if (number === 'three') {\n      sorted.push('three');\n    } else if (number === 'four') {\n      sorted.push('four');\n    } else if (number === 'five') {\n      sorted.push('five');\n    } else if (number ==='six') {\n      sorted.push('six');\n    } else if (number ==='seven') {\n      sorted.push('seven');\n    } else if (number === 'eight') {\n      sorted.push('eight');\n    } else if (number === 'nine') {\n      sorted.push('nine');\n    } else {\n      sorted.push(number);\n    }\n  });\n  return sorted.join(' ');\n};\n\n/**\n  Given a string, return a new string where all letters are capitalized.\n  >>> capitalize('Hello World!')\n  'Hello World!'\n  */\nconst capitalize = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> lowercase('Hello World!')\n  'hello world!'\n  */\nconst lowercase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are uppercased.\n  >>> uppercase('Hello World!')\n  'HELLO WORLD!'\n  */\nconst uppercase = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> capitalize('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> lowercase('Hello World!')\n  'hello world!'\n  */\nconst lowercaseAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are uppercased.\n  >>> uppercase('Hello World!')\n  'HELLO WORLD!'\n  */\nconst uppercaseAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> capitalize('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeAllAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> lowercase('Hello World!')\n  'hello world!'\n  */\nconst lowercaseAllAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are uppercased.\n  >>> uppercase('Hello World!')\n  'HELLO WORLD!'\n  */\nconst uppercaseAllAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> capitalize('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeAllAllAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> lowercase('Hello World!')\n  'hello world!'\n  */\nconst lowercaseAllAllAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> capitalize('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeAllAllAllAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> lowercase('Hello World!')\n  'hello world!'\n  */\nconst lowercaseAllAllAllAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> capitalize('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeAllAllAllAllAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> lowercase('Hello World!')\n  'hello world!'\n  */\nconst lowercaseAllAllAllAllAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> capitalize('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeAllAllAllAllAllAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> lowercase('Hello World!')\n  'hello world!'\n  */\nconst lowercaseAllAllAllAllAllAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toLowerCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  Given a string, return a new string where all letters are lowercased.\n  >>> capitalize('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeAllAllAllAllAllAllAll = (str) => {\n  return str.replace(/\\w\\S*/g, function(txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\n/**\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateFraction(3.5)\n  0.5\n  */\nconst truncateFraction = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the fractional part separately.\n  >>> truncateFraction(3.5)\n  (3, 0.5)\n  */\nconst truncate = (number, decimals) => {\n  const [integer, fractional] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimals) + fractional;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the fractional part separately.\n  >>> truncate(3.5)\n  (3, 0.5)\n  */\nconst truncateTo = (number, decimals) => {\n  const [integer, fractional] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimals) + fractional;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the fractional part separately.\n  >>> truncateTo(3.5)\n  3\n  */\nconst truncateToInteger = (number) => {\n  const [integer, fractional] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimals) + fractional;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the fractional part separately.\n  >>> truncateToInteger(3.5)\n  3\n  */\nconst truncateToFraction = (number) => {\n  const [integer, fractional] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimals) + fractional;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the fractional part separately.\n  >>> truncateToFraction(3.5)\n  3\n  */\nconst truncateToIntegerFraction = (number) => {\n  const [integer, fractional] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimals) + fractional;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the fractional part separately.\n  >>> truncateToIntegerFraction(3.5)\n  3\n  */\nconst truncateToFractionInteger = (number) => {\n  const [integer, fractional] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimals) + fractional;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the fractional part separately.\n  >>> truncateToFractionInteger(3.5)\n  3\n  */\nconst truncateToIntegerFractionFraction = (number) => {\n  const [integer, fractional] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimals) + fractional;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the fractional part separately.\n  >>> truncateToIntegerFractionFraction(3.5)\n  3\n  */\nconst truncateToIntegerFractionFractionInteger = (number) => {\n  const [integer, fractional] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimals) + fractional;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the fractional part separately.\n  >>> truncateToIntegerFractionFractionInteger(3.5)\n  3\n  */\nconst truncateToIntegerFractionFractionFraction = (number) => {\n  const [integer, fractional] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimals) + fractional;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the fractional part separately.\n  >>> truncateToIntegerFractionFractionFractionInteger(3.5)\n  3\n  */\nconst truncateToIntegerFractionFractionFractionInteger = (number) => {\n  const [integer, fractional] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimals) + fractional;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the fractional part separately.\n  >>> truncateToIntegerFractionFractionFractionFractionFraction(3.5)\n  3\n  */\nconst truncateToIntegerFractionFractionFractionFraction = (number) => {\n  const [integer, fractional] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimals) + fractional;\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part and the fractional part separately.\n  >>> truncateToIntegerFractionFractionFractionFractionFractionInteger(3.5)\n  3\n  */\nconst truncateToIntegerFractionFractionFractionFractionFractionInteger = (number) => {\n  const [integer, fractional] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimals) + fractional;\n};\n\n/**\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "foundCloserElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  const minDistance = Number.MAX_VALUE;\n  const minElement = numbers[0];\n  const maxElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n    }\n  }\n  return [minElement, maxElement];\n};\n\nconst findClosest = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.find((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndex = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.findIndex((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndexBy = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.findIndex((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndexByValue = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.findIndex((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndexByValueBy = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.findIndex((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndexByValueByIndex = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.findIndex((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndexByValueByIndexBy = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.findIndex((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndexByValueByIndexByValue = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.findIndex((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndexByValueByIndexByValueBy = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.findIndex((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndexByValueByIndexByValueByIndex = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.findIndex((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndexByValueByIndexByValueByIndexBy = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.findIndex((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndexByValueByIndexByValueByIndexByValueByIndex = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.findIndex((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndex = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.findIndex((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndex = (array, target) => {\n  const [minElement, maxElement] = foundCloserElements(array);\n  return array.findIndex((element) => Math.abs(element - target) < Math.abs(minElement - target)? minElement : maxElement);\n};\n\nconst findClosestIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValueByIndexByValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnits", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const [min, max] = numbers.reduce((a, b) => Math.max(a, b), Number.MAX_VALUE);\n  return numbers.map((n) => n * max / min);\n};\n\n/**\n * Given a list of numbers (of at least two elements), return a list of\n * numbers scaled by a factor of 1/(largest number in the list).\n * If no factors are given, return a list of numbers of length 1.\n * If factors are given, return a list of numbers of length floor(factor*len(numbers)).\n * If no factors are given, return a list of numbers of length 1.\n * If factors are given, return a list of numbers of length ceil(factor*len(numbers)).\n * If no factors are given, return a list of numbers of length 1.\n */\nconst scale = (numbers, factor) => {\n  const [min, max] = numbers.reduce((a, b) => Math.max(a, b), Number.MAX_VALUE);\n  const factors = factor? [factor] : [];\n  const factorLen = factors.length;\n  const factorLenMinusOne = factorLen - 1;\n  const factorLenPlusOne = factorLen + 1;\n  const factorLenMinusOnePlusOne = factorLen - factorLenMinusOne + 1;\n  const factorLenMinusOnePlusOnePlusOne = factorLen - factorLenMinusOnePlusOne + 1;\n  const factorLenMinusOnePlusOnePlusOnePlusOne = factorLen - factorLenMinusOnePlusOnePlusOne + 1;\n  const factorLenMinusOnePlusOnePlusOnePlusOnePlusOne = factorLen - factorLenMinusOnePlusOnePlusOnePlusOne + 1;\n  const factorLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOne = factorLen - factorLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOne + 1;\n  const factorLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne = factorLen - factorLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne + 1;\n  const factorLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne = factorLen - factorLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOne;\n  const factorLenMinusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlusOnePlus", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5.0]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', 2, '3', 4, 'abc', {}, []]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [True]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [True, True, False, True]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean')\n}\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNone(['a', 3.14, 5])\n  [None]\n  >>> filterNone([1, 2, 3, 'abc', {}, []])\n  [None, 1, 2, 3, 'abc', {}, []]\n  */\nconst filterNone = (values) => {\n  return values.filter(value => value === null)\n}\n\n/**\n * Filter given list of any python values only for empty lists\n  >>> filterEmptyLists(['a', 3.14, 5])\n  [[]]\n  >>> filterEmptyLists([1, 2, 3, 'abc', {}, []])\n  [[], 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyLists = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty dicts\n  >>> filterEmptyDicts(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyDicts([1, 2, 3, 'abc', {}, []])\n  [{}, 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyDicts = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any python values only for empty strings\n  >>> filterEmptyStrings(['a', 3.14, 5])\n  ['']\n  >>> filterEmptyStrings([1, 2, 3, 'abc', {}, []])\n  ['', 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyStrings = (values) => {\n  return values.filter(value => typeof value ==='string')\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [[], 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [{}, 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [[], 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [{}, 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [[], 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [{}, 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [[], 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [{}, 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [[], 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [{}, 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArrays(['a', 3.14, 5])\n  [[]]\n  >>> filterEmptyArrays([1, 2, 3, 'abc', {}, []])\n  [[], 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyArrays = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0)\n}\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filterEmptyObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterEmptyObjects([1, 2, 3, 'abc', {}, []])\n  [{}, 1, 2, 3, 'abc', {}, []]\n  */\nconst filterEmptyObjects = (values) => {\n  return values.filter(value => typeof value === 'object')\n}\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArray", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return true if given string starts with given prefix\n  >>> strstarts('abc', 'a')\n  true\n  >>> strstarts('abc', 'ab')\n  false\n  */\nconst strstarts = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/* Return true if given string ends with given suffix\n  >>> strends('abc', 'a')\n  true\n  >>> strends('abc', 'ab')\n  false\n  */\nconst strends = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'a')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string starts with given substring\n  >>> strstartsWith('abc', 'a')\n  true\n  >>> strstartsWith('abc', 'ab')\n  false\n  */\nconst strstartsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string ends with given substring\n  >>> strendsWith('abc', 'a')\n  true\n  >>> strendsWith('abc', 'ab')\n  false\n  */\nconst strendsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'a')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string starts with given substring\n  >>> strstartsWith('abc', 'a')\n  true\n  >>> strstartsWith('abc', 'ab')\n  false\n  */\nconst strstartsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string ends with given substring\n  >>> strendsWith('abc', 'a')\n  true\n  >>> strendsWith('abc', 'ab')\n  false\n  */\nconst strendsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'a')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string starts with given substring\n  >>> strstartsWith('abc', 'a')\n  true\n  >>> strstartsWith('abc', 'ab')\n  false\n  */\nconst strstartsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string ends with given substring\n  >>> strendsWith('abc', 'a')\n  true\n  >>> strendsWith('abc', 'ab')\n  false\n  */\nconst strendsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'a')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string starts with given substring\n  >>> strstartsWith('abc', 'a')\n  true\n  >>> strstartsWith('abc', 'ab')\n  false\n  */\nconst strstartsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string ends with given substring\n  >>> strendsWith('abc', 'a')\n  true\n  >>> strendsWith('abc', 'ab')\n  false\n  */\nconst strendsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'a')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string starts with given substring\n  >>> strstartsWith('abc', 'a')\n  true\n  >>> strstartsWith('abc', 'ab')\n  false\n  */\nconst strstartsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string ends with given substring\n  >>> strendsWith('abc', 'a')\n  true\n  >>> strendsWith('abc', 'ab')\n  false\n  */\nconst strendsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'a')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string starts with given substring\n  >>> strstartsWith('abc', 'a')\n  true\n  >>> strstartsWith('abc', 'ab')\n  false\n  */\nconst strstartsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string ends with given substring\n  >>> strendsWith('abc', 'a')\n  true\n  >>> strendsWith('abc', 'ab')\n  false\n  */\nconst strendsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'a')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string starts with given substring\n  >>> strstartsWith('abc', 'a')\n  true\n  >>> strstartsWith('abc', 'ab')\n  false\n  */\nconst strstartsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string ends with given substring\n  >>> strendsWith('abc', 'a')\n  true\n  >>> strendsWith('abc', 'ab')\n  false\n  */\nconst strendsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/* Return true if given string contains given substring\n  >>> strcontains('abc', 'a')\n  true\n  >>> strcontains('abc', 'ab')\n  false\n  */\nconst strcontains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string starts with given substring\n  >>> strstartsWith('abc', 'a')\n  true\n  >>> strstartsWith('abc', 'ab')\n  false\n  */\nconst strstartsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string ends with given substring\n  >>> strendsWith('abc', 'a')\n  true\n  >>> strendsWith('abc', 'ab')\n  false\n  */\nconst strendsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/* Return true if given string ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largerDivisors", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n  let divisor = 1;\n  let largest = 1;\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisor = i;\n      largest = i;\n    }\n  }\n\n  return largest;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  false\n  */\nconst isDivisibleByAllPrimeFactors2 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors3 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors4 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors5 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors6 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors7 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors8 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors9 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors10 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors11 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors12 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors13 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors14 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors15 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors16 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors17 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors18 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimeFactors(15)\n  true\n  */\nconst isDivisibleByAllPrimeFactors19 = (n) => {\n  let i;\n\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorizes", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i < n) {\n    factor *= i;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes2 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i < n) {\n    factor *= i;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes3 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i < n) {\n    factor *= i;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes4 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i < n) {\n    factor *= i;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes5 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i < n) {\n    factor *= i;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes6 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i < n) {\n    factor *= i;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes7 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i < n) {\n    factor *= i;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes8 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i < n) {\n    factor *= i;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes9 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i < n) {\n    factor *= i;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes10 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i < n) {\n    factor *= i;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes11 = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 2;\n  while (i < n) {\n    factor *= i;\n    if (n % factor === 0) {\n      factors.push(factor);\n    }\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factor", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicate", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\n// ### removeDuplicates\n// Remove all duplicates from a list of numbers.\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n// [1, 2, 2]\n// >>> removeDuplicates([1, 1, 1, 2, 2, 2])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipsCases", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/([a-z])([A-Z])/g, '$1 $2')\n   .toUpperCase();\n};\n\n/**\n * Given a string, convert all uppercase characters to lowercase.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.\n * If a string is passed, it will return that string.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, cur) => acc + cur, \"\");\n};\n\n/* Convert string to number\n  >>> convert(\"abc\", Number)\n  123\n  */\nconst convert = (value, type) => {\n  if (type === \"Number\") return Number(value);\n  if (type === \"String\") return value;\n  throw new Error(`Invalid type ${type}`);\n};\n\n/* Convert string to boolean\n  >>> convert(\"abc\", Boolean)\n  true\n  */\nconst convertBool = (value) => {\n  return value === \"true\";\n};\n\n/* Convert string to number\n  >>> convertBool(\"true\")\n  true\n  */\nconst convertNumber = (value) => {\n  return Number(value);\n};\n\n/* Convert string to boolean\n  >>> convertBool(\"false\")\n  false\n  */\nconst convertString = (value) => {\n  return value === \"false\";\n};\n\n/* Convert string to number\n  >>> convertNumber(\"123\")\n  123\n  */\nconst convertStringNumber = (value) => {\n  return Number(value);\n};\n\n/* Convert string to number\n  >>> convertStringNumber(\"123\")\n  123\n  */\nconst convertStringBool = (value) => {\n  return value === \"true\";\n};\n\n/* Convert string to number\n  >>> convertStringBool(\"true\")\n  true\n  */\nconst convertStringNumberBool = (value) => {\n  return Number(value);\n};\n\n/* Convert string to number\n  >>> convertStringNumberBool(\"true\")\n  true\n  */\nconst convertStringNumberBoolString = (value) => {\n  return Number(value);\n};\n\n/* Convert string to number\n  >>> convertStringNumberBoolString(\"true\")\n  true\n  */\nconst convertStringNumberBoolNumberString = (value) => {\n  return Number(value);\n};\n\n/* Convert string to number\n  >>> convertStringNumberBoolNumberString(\"true\")\n  true\n  */\nconst convertStringNumberBoolNumberNumber = (value) => {\n  return Number(value);\n};\n\n/* Convert string to number\n  >>> convertStringNumberBoolNumberNumber(\"true\")\n  true\n  */\nconst convertStringNumberBoolNumberNumberBool = (value) => {\n  return Number(value);\n};\n\n/* Convert string to number\n  >>> convertStringNumberBoolNumberNumberBool(\"true\")\n  true\n  */\nconst convertStringNumberBoolNumberNumberBoolString = (value) => {\n  return Number(value);\n};\n\n/* Convert string to number\n  >>> convertStringNumberBoolNumberNumberBoolString(\"true\")\n  true\n  */\nconst convertStringNumberBoolNumberBoolNumberBool = (value) => {\n  return Number(value);\n};\n\n/* Convert string to number\n  >>> convertStringNumberBoolNumberBoolNumberBool(\"true\")\n  true\n  */\nconst convertStringNumberBoolNumberBoolNumberBoolNumberBoolString = (value) => {\n  return Number(value);\n};\n\n/* Convert string to number\n  >>> convertStringNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBoolNumberBool", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoPrefix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoPrefix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoPrefix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoPrefix = (strings, suffix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNoSuffixAndNoPrefix = (strings, prefix) => {\n  return strings.filter(s =>!s.startsWith(prefix) &&!s.endsWith(suffix) &&!s.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only for the ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoPrefixAndNo", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeros", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst equalZeros = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance === 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst equalOnes = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance === 1;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst equalTwos = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance === 2;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst equalThrees = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance === 3;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst equalFours = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance === 4;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst equalFives = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance === 5;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst equalSixes = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance === 6;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst equalSevens = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance === 7;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst equalEights = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance === 8;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst equalNines = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance === 9;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst equalTens = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0);\n  return balance === 10;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "gottenPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> gottenNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> gottenNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst gottenNegative = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, 1]\n  >>> gottenDivisible([3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [3, -5, 2, -3, 3, 9, 123, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n <= 3) return true;\n  if (n <= 5) return true;\n  if (n <= 7) return true;\n  if (n <= 9) return true;\n  return false;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> factors(5)\n  [2, 3, 5]\n  >>> factors(8)\n  [2, 3, 5, 5]\n  >>> factors(13)\n  [2, 3, 5, 7, 13]\n  >>> factors(17)\n  [2, 3, 5, 7, 13, 17]\n  >>> factors(19)\n  [2, 3, 5, 7, 13, 17, 31]\n  >>> factors(20)\n  [2, 3, 5, 7, 13, 17, 31, 63]\n  >>> factors(21)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121]\n  >>> factors(22)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258]\n  >>> factors(23)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497]\n  >>> factors(24)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907]\n  >>> factors(25)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593]\n  >>> factors(26)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584]\n  >>> factors(27)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291]\n  >>> factors(28)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765]\n  >>> factors(29)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289]\n  >>> factors(30)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383]\n  >>> factors(31)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767]\n  >>> factors(32)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767, 524287]\n  >>> factors(33)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767, 524287, 1048576]\n  >>> factors(34)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767, 524287, 1048576, 2097152]\n  >>> factors(35)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767, 524287, 1048576, 2097152, 4194303]\n  >>> factors(36)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767, 524287, 1048576, 2097152, 4194303, 8388608]\n  >>> factors(37)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767, 524287, 1048576, 2097152, 4194303, 8388608, 16777216]\n  >>> factors(38)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767, 524287, 1048576, 2097152, 4194303, 8388608, 16777216, 33554432]\n  >>> factors(39)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767, 524287, 1048576, 2097152, 4194303, 8388608, 16777216, 33554432, 67108864]\n  >>> factors(40)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767, 524287, 1048576, 2097152, 4194303, 8388608, 16777216, 33554432, 67108864, 134217728]\n  >>> factors(41)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767, 524287, 1048576, 2097152, 4194303, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456]\n  >>> factors(42)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767, 524287, 1048576, 2097152, 4194303, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912]\n  >>> factors(43)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767, 524287, 1048576, 2097152, 4194303, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824]\n  >>> factors(44)\n  [2, 3, 5, 7, 13, 17, 31, 63, 121, 258, 497, 907, 1593, 2584, 4291, 6765, 12289, 16383, 32767, 524287, 1048576, 2097152, 4194303, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483647]\n  >>> factors(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = xs.reduce((prev, item, index) => {\n    return prev + item;\n  }, 0);\n  const zeroPoint = findZeroPoint(xs, zero);\n  return zeroPoint;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZeroPoint finds point of zero that satisfies poly(x) = 0.\n  findZeroPoint returns only zero point, even if there are many.\n  Moreover, findZeroPoint only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroPoint([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findZeroPoint([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  0.5\n  */\nconst findZeroPoint = (xs, zero) => {\n  const zeroPoint = xs.reduce((prev, item, index) => {\n    return prev + item;\n  }, 0);\n  const zeroPointIndex = xs.findIndex((item, index) => {\n    return item === zero;\n  });\n  return zeroPointIndex;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZeroPoint finds point of zero that satisfies poly(x) = 0.\n  findZeroPoint returns only zero point, even if there are many.\n  Moreover, findZeroPoint only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroPoint([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findZeroPoint([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  0.5\n  */\nconst findZeroPointAt = (xs, zero) => {\n  const zeroPoint = xs.reduce((prev, item, index) => {\n    return prev + item;\n  }, 0);\n  const zeroPointIndex = xs.findIndex((item, index) => {\n    return item === zero;\n  });\n  return zeroPointIndex;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZeroPoint finds point of zero that satisfies poly(x) = 0.\n  findZeroPoint returns only zero point, even if there are many.\n  Moreover, findZeroPoint only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroPointAt([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findZeroPointAt([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  0.5\n  */\nconst findZeroPointAt = (xs, zero) => {\n  const zeroPoint = xs.reduce((prev, item, index) => {\n    return prev + item;\n  }, 0);\n  const zeroPointIndex = xs.findIndex((item, index) => {\n    return item === zero;\n  });\n  return zeroPointIndex;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZeroPoint finds point of zero that satisfies poly(x) = 0.\n  findZeroPoint returns only zero point, even if there are many.\n  Moreover, findZeroPoint only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroPointAt([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findZeroPointAt([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  0.5\n  */\nconst findZeroPointAt = (xs, zero) => {\n  const zeroPoint = xs.reduce((prev, item, index) => {\n    return prev + item;\n  }, 0);\n  const zeroPointIndex = xs.findIndex((item, index) => {\n    return item === zero;\n  });\n  return zeroPointIndex;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZeroPoint finds point of zero that satisfies poly(x) = 0.\n  findZeroPoint returns only zero point, even if there are many.\n  Moreover, findZeroPoint only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroPointAt([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findZeroPointAt([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  0.5\n  */\nconst findZeroPointAt = (xs, zero) => {\n  const zeroPoint = xs.reduce((prev, item, index) => {\n    return prev + item;\n  }, 0);\n  const zeroPointIndex = xs.findIndex((item, index) => {\n    return item === zero;\n  });\n  return zeroPointIndex;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZeroPoint finds point of zero that satisfies poly(x) = 0.\n  findZeroPoint returns only zero point, even if there are many.\n  Moreover, findZeroPoint only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroPointAt([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findZeroPointAt([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  0.5\n  */\nconst findZeroPointAt = (xs, zero) => {\n  const zeroPoint = xs.reduce((prev, item, index) => {\n    return prev + item;\n  }, 0);\n  const zeroPointIndex = xs.findIndex((item, index) => {\n    return item === zero;\n  });\n  return zeroPointIndex;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZeroPoint finds point of zero that satisfies poly(x) = 0.\n  findZeroPoint returns only zero point, even if there are many.\n  Moreover, findZeroPoint only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroPointAt([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findZeroPointAt([-6, 11, -6, 1]), 2) # (x - ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortsThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l151 = l150.slice();\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return true;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;\n  });\n};\n\n/*Return sorted unique elements in a list\n  >>> uniqueWith([5, 3, 5, 2, 3, 3, 9, 0, 123], (x) => x > 0)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, fn) => {\n  let seen = {};\n  return l.filter((x) => {\n    if (seen[x]) {\n      return false;\n    }\n    seen[x] = true;\n    return fn(seen, x)? x : false;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElements", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  let max = 0;\n  l.forEach((x) => {\n    if (x > max) {\n      max = x;\n    }\n  });\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElements([1, 2, 3])\n  1\n  >>> minElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElements = (l) => {\n  let min = 0;\n  l.forEach((x) => {\n    if (x < min) {\n      min = x;\n    }\n  });\n  return min;\n};\n\n/*Return average element in the list.\n  >>> averageElements([1, 2, 3])\n  1.5\n  >>> averageElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst averageElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += x;\n    count += 1;\n  });\n  return sum / count;\n};\n\n/*Return standard deviation element in the list.\n  >>> standardDeviationElements([1, 2, 3])\n  0.5\n  >>> standardDeviationElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst standardDeviationElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += Math.pow(x, 2);\n    count += 1;\n  });\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance element in the list.\n  >>> varianceElements([1, 2, 3])\n  0.5\n  >>> varianceElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst varianceElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += Math.pow(x, 2);\n    count += 1;\n  });\n  return sum / count;\n};\n\n/*Return standard deviation element in the list.\n  >>> standardDeviationElements([1, 2, 3])\n  0.5\n  >>> standardDeviationElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst standardDeviationElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += Math.pow(x, 2);\n    count += 1;\n  });\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance element in the list.\n  >>> varianceElements([1, 2, 3])\n  0.5\n  >>> varianceElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst varianceElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += Math.pow(x, 2);\n    count += 1;\n  });\n  return sum / count;\n};\n\n/*Return standard deviation element in the list.\n  >>> standardDeviationElements([1, 2, 3])\n  0.5\n  >>> standardDeviationElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst standardDeviationElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += Math.pow(x, 2);\n    count += 1;\n  });\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance element in the list.\n  >>> varianceElements([1, 2, 3])\n  0.5\n  >>> varianceElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst varianceElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += Math.pow(x, 2);\n    count += 1;\n  });\n  return sum / count;\n};\n\n/*Return standard deviation element in the list.\n  >>> standardDeviationElements([1, 2, 3])\n  0.5\n  >>> standardDeviationElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst standardDeviationElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += Math.pow(x, 2);\n    count += 1;\n  });\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance element in the list.\n  >>> varianceElements([1, 2, 3])\n  0.5\n  >>> varianceElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst varianceElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += Math.pow(x, 2);\n    count += 1;\n  });\n  return sum / count;\n};\n\n/*Return standard deviation element in the list.\n  >>> standardDeviationElements([1, 2, 3])\n  0.5\n  >>> standardDeviationElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst standardDeviationElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += Math.pow(x, 2);\n    count += 1;\n  });\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance element in the list.\n  >>> varianceElements([1, 2, 3])\n  0.5\n  >>> varianceElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst varianceElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += Math.pow(x, 2);\n    count += 1;\n  });\n  return sum / count;\n};\n\n/*Return standard deviation element in the list.\n  >>> standardDeviationElements([1, 2, 3])\n  0.5\n  >>> standardDeviationElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst standardDeviationElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += Math.pow(x, 2);\n    count += 1;\n  });\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance element in the list.\n  >>> varianceElements([1, 2, 3])\n  0.5\n  >>> varianceElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst varianceElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += Math.pow(x, 2);\n    count += 1;\n  });\n  return sum / count;\n};\n\n/*Return standard deviation element in the list.\n  >>> standardDeviationElements([1, 2, 3])\n  0.5\n  >>> standardDeviationElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst standardDeviationElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((x) => {\n    sum += Math.pow(x, 2);\n    count += 1;\n  });\n  return Math.sqrt(sum / count);\n};\n\n/*Return variance element in the list.\n  >>> varianceElements([1, 2, 3])\n  0.5\n  >>> varianceElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.6666666666666665\n  */\nconst varianceElements = (l) => {\n  let sum = 0;\n  let count = 0;\n  l.forEach((", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzzes", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString().split('')\n  let count = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '7') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString().split('')\n  let count = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '8') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the number of times the digit 9 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString().split('')\n  let count = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '9') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the number of times the digit 0 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString().split('')\n  let count = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '0') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the number of times the digit 1 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString().split('')\n  let count = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '1') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the number of times the digit 2 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString().split('')\n  let count = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '2') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the number of times the digit 3 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString().split('')\n  let count = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '3') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the number of times the digit 4 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString().split('')\n  let count = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '4') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the number of times the digit 5 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString().split('')\n  let count = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '5') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the number of times the digit 6 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString().split('')\n  let count = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '6') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString().split('')\n  let count = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '7') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString().split('')\n  let count = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '8') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the number of times the digit 9 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString().split('')\n  let count = 0\n  for (let i = 0; i < digits.length; i++) {\n    if (digits[i] === '9') {\n      count++\n    }\n  }\n  return count\n}\n\n/*Return the number of times the digit 0 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  const digits = n.toString", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortsEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortsOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortsOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortsEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortsOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortsEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEvenOddOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortsOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOddOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortsOddEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEvenOddOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOddOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortsEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOddEvenOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortsOddEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOddEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOddEvenOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortsEvenOddEvenEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupGroupGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupGroupGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroupGroupGroupGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroupGroupGroupGroupGroupGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFibs", "gc": "<|endoftext|>/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let a = 1;\n  let b = 2;\n  let fibs = [];\n  while (a <= n) {\n    fibs.push(a);\n    fibs.push(b);\n    a = b;\n    b = a + b;\n  }\n  return fibs;\n};\n\n/*\n  primes returns array of prime numbers.\n  >>> primes(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n  >>> primes(100)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> primes(1000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> primes(10000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> primes(100000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> primes(1000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 10", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanerAbsolutesDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map((number) => number - mean);\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.sqrt(deviation);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> meanerSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerSquaredDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map((number) => number - mean);\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return deviation;\n};\n\n/* For a given list of input numbers, calculate Mean Squared Error\n  around the mean of this dataset.\n  Mean Squared Error is the average of the squared differences between each\n  element and a centerpoint (mean in this case):\n  MSE = average | x - x_mean |^2\n  >>> meanerSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerSquaredError = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map((number) => number - mean);\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return deviation * deviation;\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Error\n  around the mean of this dataset.\n  Root Mean Squared Error is the square root of the mean squared error\n  of the deviations from the mean:\n  RMSE = average | x - x_mean |^2\n  >>> meanerRootMeanSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerRootMeanSquaredError = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map((number) => number - mean);\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.sqrt(deviation);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Percentage Error\n  around the mean of this dataset.\n  Mean Absolute Percentage Error is the average of the absolute differences between\n  each element and a centerpoint (mean in this case):\n  MAPE = average | x - x_mean |\n  >>> meanerAbsolutePercentError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutePercentError = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map((number) => number - mean);\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return deviation * 100 / deviations.length;\n};\n\n/* For a given list of input numbers, calculate Mean Squared Percentage Error\n  around the mean of this dataset.\n  Mean Squared Percentage Error is the average of the squared differences between\n  each element and a centerpoint (mean in this case):\n  MSRP = average | x - x_mean |^2\n  >>> meanerSquaredPercentError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerSquaredPercentError = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map((number) => number - mean);\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return deviation * deviation;\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Percentage Error\n  around the mean of this dataset.\n  Root Mean Squared Percentage Error is the square root of the mean squared percentage\n  error of the deviations from the mean:\n  RMSP = average | x - x_mean |^2\n  >>> meanerRootMeanSquaredPercentError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerRootMeanSquaredPercentError = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map((number) => number - mean);\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return Math.sqrt(deviation);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation Percentage Error\n  around the mean of this dataset.\n  Mean Absolute Deviation Percentage Error is the average of the absolute differences between\n  each element and a centerpoint (mean in this case):\n  MADP = average | x - x_mean |\n  >>> meanerAbsoluteDeviationPercentError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsoluteDeviationPercentError = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map((number) => number - mean);\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return deviation * 100 / deviations.length;\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation Percentage Error\n  around the mean of this dataset.\n  Mean Squared Deviation Percentage Error is the average of the squared differences between\n  each element and a centerpoint (mean in this case):\n  MSDP = average | x - x_mean |^2\n  >>> meanerSquaredDeviationPercentError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerSquaredDeviationPercentError = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  const mean = means.reduce((a, b) => a + b, 0) / means.length;\n  const deviations = numbers.map((number) => number - mean);\n  const deviation = deviations.reduce((a, b) => a + b, 0) / deviations.length;\n  return deviation * deviation;\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Deviation Percentage Error\n  around the mean of this dataset.\n  Root Mean Squared Deviation Percentage Error is the square root of the mean squared percentage\n  error of the deviations from the mean:\n  RMSP = average | x - x_mean |^2", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSummingToZeroed", "gc": "<|endoftext|>/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToOnes takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to one, and false otherwise.\n\n  >>> triplesSummingToOnes([1, 3, 5, 0])\n  false\n  >>> triplesSummingToOnes([1, 3, -2, 1])\n  true\n  >>> triplesSummingToOnes([1, 2, 3, 7])\n  false\n  >>> triplesSummingToOnes([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToOnes([1])\n  false\n  */\nconst triplesSummingToOnes = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToTwo takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to two, and false otherwise.\n\n  >>> triplesSummingToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSummingToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSummingToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSummingToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToTwo([1])\n  false\n  */\nconst triplesSummingToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToThree takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to three, and false otherwise.\n\n  >>> triplesSummingToThree([1, 3, 5, 0])\n  false\n  >>> triplesSummingToThree([1, 3, -2, 1])\n  true\n  >>> triplesSummingToThree([1, 2, 3, 7])\n  false\n  >>> triplesSummingToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToThree([1])\n  false\n  */\nconst triplesSummingToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToFour takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to four, and false otherwise.\n\n  >>> triplesSummingToFour([1, 3, 5, 0])\n  false\n  >>> triplesSummingToFour([1, 3, -2, 1])\n  true\n  >>> triplesSummingToFour([1, 2, 3, 7])\n  false\n  >>> triplesSummingToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToFour([1])\n  false\n  */\nconst triplesSummingToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToFive takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to five, and false otherwise.\n\n  >>> triplesSummingToFive([1, 3, 5, 0])\n  false\n  >>> triplesSummingToFive([1, 3, -2, 1])\n  true\n  >>> triplesSummingToFive([1, 2, 3, 7])\n  false\n  >>> triplesSummingToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToFive([1])\n  false\n  */\nconst triplesSummingToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToSix takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to six, and false otherwise.\n\n  >>> triplesSummingToSix([1, 3, 5, 0])\n  false\n  >>> triplesSummingToSix([1, 3, -2, 1])\n  true\n  >>> triplesSummingToSix([1, 2, 3, 7])\n  false\n  >>> triplesSummingToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToSix([1])\n  false\n  */\nconst triplesSummingToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToSeven takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to seven, and false otherwise.\n\n  >>> triplesSummingToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSummingToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSummingToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSummingToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToSeven([1])\n  false\n  */\nconst triplesSummingToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToEight takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to eight, and false otherwise.\n\n  >>> triplesSummingToEight([1, 3, 5, 0])\n  false\n  >>> triplesSummingToEight([1, 3, -2, 1])\n  true\n  >>> triplesSummingToEight([1, 2, 3, 7])\n  false\n  >>> triplesSummingToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToEight([1])\n  false\n  */\nconst triplesSummingToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carsRacesCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    const car1 = cars[i];\n    const car2 = cars[(i + 1) % n];\n    if (car1.isMoving && car2.isMoving) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car and a car's position, return the distance between them.\n  If the car is moving and the other car is not, return 0.\n  Otherwise, return the distance between the two cars.\n  */\nconst carsDistance = (car, otherCar) => {\n  if (car.isMoving!== otherCar.isMoving) {\n    return 0;\n  }\n  return car.position.distanceTo(otherCar.position);\n};\n\n/*\n  Given a car and a car's position, return the speed of travel between them.\n  If the car is moving and the other car is not, return 0.\n  Otherwise, return the speed of the two cars.\n  */\nconst carsSpeed = (car, otherCar) => {\n  if (car.isMoving!== otherCar.isMoving) {\n    return 0;\n  }\n  return car.speed + otherCar.speed;\n};\n\n/*\n  Given a car and a car's position, return the speed of travel between them.\n  If the car is moving and the other car is not, return 0.\n  Otherwise, return the speed of the two cars.\n  */\nconst carsSpeedBetween = (car, otherCar) => {\n  if (car.isMoving!== otherCar.isMoving) {\n    return 0;\n  }\n  return car.speed - otherCar.speed;\n};\n\n/*\n  Given a car and a car's position, return the speed of travel between them.\n  If the car is moving and the other car is not, return 0.\n  Otherwise, return the speed of the two cars.\n  */\nconst carsSpeedBetweenSpeed = (car, otherCar) => {\n  if (car.isMoving!== otherCar.isMoving) {\n    return 0;\n  }\n  return car.speed - otherCar.speed + car.speed;\n};\n\n/*\n  Given a car and a car's position, return the speed of travel between them.\n  If the car is moving and the other car is not, return 0.\n  Otherwise, return the speed of the two cars.\n  */\nconst carsSpeedBetweenSpeedBetween = (car, otherCar) => {\n  if (car.isMoving!== otherCar.isMoving) {\n    return 0;\n  }\n  return car.speed - otherCar.speed - car.speed + otherCar.speed;\n};\n\n/*\n  Given a car and a car's position, return the speed of travel between them.\n  If the car is moving and the other car is not, return 0.\n  Otherwise, return the speed of the two cars.\n  */\nconst carsSpeedBetweenSpeedBetweenSpeed = (car, otherCar) => {\n  if (car.isMoving!== otherCar.isMoving) {\n    return 0;\n  }\n  return car.speed - otherCar.speed - car.speed - otherCar.speed + car.speed;\n};\n\n/*\n  Given a car and a car's position, return the speed of travel between them.\n  If the car is moving and the other car is not, return 0.\n  Otherwise, return the speed of the two cars.\n  */\nconst carsSpeedBetweenSpeedBetweenSpeedBetween = (car, otherCar) => {\n  if (car.isMoving!== otherCar.isMoving) {\n    return 0;\n  }\n  return car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed + otherCar.speed + car.speed;\n};\n\n/*\n  Given a car and a car's position, return the speed of travel between them.\n  If the car is moving and the other car is not, return 0.\n  Otherwise, return the speed of the two cars.\n  */\nconst carsSpeedBetweenSpeedBetweenSpeedBetweenSpeedBetween = (car, otherCar) => {\n  if (car.isMoving!== otherCar.isMoving) {\n    return 0;\n  }\n  return car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed + otherCar.speed - car.speed + car.speed;\n};\n\n/*\n  Given a car and a car's position, return the speed of travel between them.\n  If the car is moving and the other car is not, return 0.\n  Otherwise, return the speed of the two cars.\n  */\nconst carsSpeedBetweenSpeedBetweenSpeedBetweenSpeedBetween = (car, otherCar) => {\n  if (car.isMoving!== otherCar.isMoving) {\n    return 0;\n  }\n  return car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed + otherCar.speed - car.speed + car.speed;\n};\n\n/*\n  Given a car and a car's position, return the speed of travel between them.\n  If the car is moving and the other car is not, return 0.\n  Otherwise, return the speed of the two cars.\n  */\nconst carsSpeedBetweenSpeedBetweenSpeedBetweenSpeedBetween = (car, otherCar) => {\n  if (car.isMoving!== otherCar.isMoving) {\n    return 0;\n  }\n  return car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed + otherCar.speed - car.speed + car.speed;\n};\n\n/*\n  Given a car and a car's position, return the speed of travel between them.\n  If the car is moving and the other car is not, return 0.\n  Otherwise, return the speed of the two cars.\n  */\nconst carsSpeedBetweenSpeedBetweenSpeedBetweenSpeedBetween = (car, otherCar) => {\n  if (car.isMoving!== otherCar.isMoving) {\n    return 0;\n  }\n  return car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed + otherCar.speed - car.speed + car.speed;\n};\n\n/*\n  Given a car and a car's position, return the speed of travel between them.\n  If the car is moving and the other car is not, return 0.\n  Otherwise, return the speed of the two cars.\n  */\nconst carsSpeedBetweenSpeedBetweenSpeedBetweenSpeedBetween = (car, otherCar) => {\n  if (car.isMoving!== otherCar.isMoving) {\n    return 0;\n  }\n  return car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed - otherCar.speed - car.speed - otherCar.speed + otherCar.speed - car.speed + car.speed;\n};\n\n/*\n  Given a car and a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrLists", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]++)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrLists = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]--)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]++)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]--)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverseReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]++)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverseReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]--)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverseReverseReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]++)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverseReverseReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]--)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverseReverseReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]++)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverseReverseReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]--)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverseReverseReverseReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]++)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverseReverseReverseReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]--)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverseReverseReverseReverseReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]++)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverseReverseReverseReverseReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]--)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReverseReverseReverseReverseReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while (n--) {\n    ret.push(l[i]++)\n    i++\n  }\n  return ret\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReverseReverseReverseReverseReverse = (l) => {\n  let n = l.length\n  let i = 0\n  let ret = []\n  while ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairSumsToZero", "gc": "<|endoftext|>/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  removeDuplicatesFromList takes a list of integers as an input.\n  it removes all the duplicates from the list.\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> removeDuplicatesFromList([1, 1, 1, 2, 2, 2])\n  [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBases", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n  const str = x.toString(base);\n  return str.length < 2? '0' + str : str;\n};\n\n/*\n  Convert a string to an array of its digits.\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab')\n  ['a', 'b']\n  >>> digits('abc')\n  ['a', 'b', 'c']\n  >>> digits('ab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 2)\n  4\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 1)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(area);\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 0)\n  0\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (b * b) - (4 * a * h);\n  return area === 0? 0 : Math.sqrt(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence whose first two elements are 0 and 1, respectively.\n  >>> fib2(5)\n  1\n  >>> fib2(6)\n  1\n  >>> fib2(7)\n  1\n  >>> fib2(8)\n  2\n  >>> fib2(9)\n  3\n  >>> fib2(10)\n  5\n  >>> fib2(11)\n  8\n  >>> fib2(12)\n  13\n  >>> fib2(13)\n  21\n  >>> fib2(14)\n  34\n  >>> fib2(15)\n  55\n  >>> fib2(16)\n  89\n  >>> fib2(17)\n  144\n  >>> fib2(18)\n  233\n  >>> fib2(19)\n  377\n  >>> fib2(20)\n  610\n  >>> fib2(21)\n  987\n  >>> fib2(22)\n  1597\n  >>> fib2(23)\n  2584\n  >>> fib2(24)\n  4181\n  >>> fib2(25)\n  6765\n  >>> fib2(26)\n  10946\n  >>> fib2(27)\n  17711\n  >>> fib2(28)\n  28657\n  >>> fib2(29)\n  46368\n  >>> fib2(30)\n  75025\n  >>> fib2(31)\n  121393\n  >>> fib2(32)\n  258443\n  >>> fib2(33)\n  570285\n  >>> fib2(34)\n  922743 \n  >>> fib2(35)\n  1490729\n  >>> fib2(36)\n  2914229\n  >>> fib2(37)\n  4293257\n  >>> fib2(38)\n  6765294\n  >>> fib2(39)\n  10946294\n  >>> fib2(40)\n  17711294\n  >>> fib2(41)\n  28657294\n  >>> fib2(42)\n  46368294\n  >>> fib2(43)\n  75025294\n  >>> fib2(44)\n  121393294\n  >>> fib2(45)\n  25844300\n  >>> fib2(46)\n  57028500\n  >>> fib2(47)\n  9227430\n  >>> fib2(48)\n  149072900\n  >>> fib2(49)\n  291422900\n  >>> fib2(50)\n  429325700\n  >>> fib2(51)\n  676529400\n  >>> fib2(52)\n  1094629400\n  >>> fib2(53)\n  1771129400\n  >>> fib2(54)\n  2865729400\n  >>> fib2(55)\n  4636829400\n  >>> fib2(56)\n  7502529400\n  >>> fib2(57)\n  12139329400\n  >>> fib2(58)\n  258443000\n  >>> fib2(59)\n  570285000\n  >>> fib2(60)\n  9227430\n  >>> fib2(61)\n  149072900\n  >>> fib2(62)\n  291422900\n  >>> fib2(63)\n  429325700\n  >>> fib2(64)\n  676529400\n  >>> fib2(65)\n  1094629400\n  >>> fib2(66)\n  1771129400\n  >>> fib2(67)\n  2865729400\n  >>> fib2(68)\n  4636829400\n  >>> fib2(69)\n  7502529400\n  >>> fib2(70)\n  12139329400\n  >>> fib2(71)\n  258443000\n  >>> fib2(72)\n  570285000\n  >>> fib2(73)\n  9227430\n  >>> fib2(74)\n  149072900\n  >>> fib2(75)\n  291422900\n  >>> fib2(76)\n  429325700\n  >>> fib2(77)\n  676529400\n  >>> fib2(78)\n  1094629400\n  >>> fib2(79)\n  1771129400\n  >>> fib2(80)\n  2865729400\n  >>> fib2(81)\n  4636829400\n  >>> fib2(82)\n  7502529400\n  >>> fib2(83)\n  12139329400\n  >>> fib2(84)\n  258443000\n  >>> fib2(85)\n  570285000\n  >>> fib2(86)\n  9227430\n  >>> fib2(87)\n  149072900\n  >>> fib2(88)\n  291422900\n  >>> fib2(89)\n  429325700\n  >>> fib2(90)\n  676529400\n  >>> fib2(91)\n  1094629400\n  >>> fib2(92)\n  1771129400\n  >>> fib2(93)\n  2865729400\n  >>> fib2(94)\n  4636829400\n  >>> fib2(95)\n  7502529400\n  >>> fib2(96)\n  12139329400\n  >>> fib2(97)\n  258443000\n  >>> fib2(98)\n  570285000\n  >>> fib2(99)\n  9227430\n  >>> fib2(100)\n  149072900\n  >>> fib2(101)\n  291422900\n  >>> fib2(102)\n  429325700\n  >>> fib2(103)\n  676529400\n  >>> fib2(104)\n  1094629400\n  >>> fib2(105)\n  1771129400\n  >>> fib2(106)\n  2865729400\n  >>> fib2(107)\n  4636829400\n  >>> fib2(108)\n  7502529400\n  >>> fib2(109)\n  12139329400\n  >>> fib2(110)\n  258443000\n  >>> fib2(111)\n  570285000\n  >>> fib2(112)\n  9227430\n  >>> fib2(113)\n  149072900\n  >>> fib2(114)\n  291422900\n  >>> fib2(115)\n  429325700\n  >>> fib2(116)\n  ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  let mid = Math.floor((n - 1) / 2)\n  if (l[mid] < l[mid-1]) {\n    mid++\n  }\n  if (l[mid] > l[mid+1]) {\n    mid--\n  }\n  return l[mid]\n}\n\n/*Return average of elements in the list l.\n  >>> average([3, 1, 2, 4, 5])\n  2.5\n  >>> average([-10, 4, 6, 1000, 10, 20])\n  6.0\n  */\nconst average = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  let sum = 0\n  let i = 0\n  while (i < n) {\n    sum += l[i]\n    i++\n  }\n  return sum / n\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n 'mode'\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n 'mode'\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return ''\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  let mode = ''\n  let i = 0\n  while (i < n) {\n    if (l[i] > l[i - 1]) {\n      mode += l[i]\n      i++\n    } else {\n      mode += l[i - 1]\n      i--\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n 'mode'\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n 'mode'\n  */\nconst modes = (l) => {\n  if (l.length === 0) {\n    return ''\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  let mode = ''\n  let i = 0\n  while (i < n) {\n    if (l[i] > l[i - 1]) {\n      mode += l[i]\n      i++\n    } else {\n      mode += l[i - 1]\n      i--\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n 'mode'\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n 'mode'\n  */\nconst modesArray = (l) => {\n  if (l.length === 0) {\n    return ''\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  let mode = ''\n  let i = 0\n  while (i < n) {\n    if (l[i] > l[i - 1]) {\n      mode += l[i]\n      i++\n    } else {\n      mode += l[i - 1]\n      i--\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n 'mode'\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n 'mode'\n  */\nconst modesArrays = (l) => {\n  if (l.length === 0) {\n    return ''\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  let mode = ''\n  let i = 0\n  while (i < n) {\n    if (l[i] > l[i - 1]) {\n      mode += l[i]\n      i++\n    } else {\n      mode += l[i - 1]\n      i--\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n 'mode'\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n 'mode'\n  */\nconst modesArraysArray = (l) => {\n  if (l.length === 0) {\n    return ''\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  let mode = ''\n  let i = 0\n  while (i < n) {\n    if (l[i] > l[i - 1]) {\n      mode += l[i]\n      i++\n    } else {\n      mode += l[i - 1]\n      i--\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n 'mode'\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n 'mode'\n  */\nconst modesArraysArrays = (l) => {\n  if (l.length === 0) {\n    return ''\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  let mode = ''\n  let i = 0\n  while (i < n) {\n    if (l[i] > l[i - 1]) {\n      mode += l[i]\n      i++\n    } else {\n      mode += l[i - 1]\n      i--\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n 'mode'\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n 'mode'\n  */\nconst modesArraysArraysArray = (l) => {\n  if (l.length === 0) {\n    return ''\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  let mode = ''\n  let i = 0\n  while (i < n) {\n    if (l[i] > l[i - 1]) {\n      mode += l[i]\n      i++\n    } else {\n      mode += l[i - 1]\n      i--\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n 'mode'\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n 'mode'\n  */\nconst modesArraysArraysArrays = (l) => {\n  if (l.length === 0) {\n    return ''\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  let mode = ''\n  let i = 0\n  while (i < n) {\n    if (l[i] > l[i - 1]) {\n      mode += l[i]\n      i++\n    } else {\n      mode += l[i - 1]\n      i--\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n 'mode'\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n 'mode'\n  */\nconst modesArraysArraysArraysArray = (l) => {\n  if (l.length === 0) {\n    return ''\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  let mode = ''\n  let i = 0\n  while (i < n) {\n    if (l[i] > l[i - 1]) {\n      mode += l[i]\n      i++\n    } else {\n      mode += l[i - 1]\n      i--\n    }\n  }\n  return mode\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n 'mode'\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n 'mode'\n  */\nconst modesArraysArraysArraysArrays = (l) => {\n  if (l.length === 0) {\n    return ''\n  }\n  const n = l.length\n  if (n % 2 === 0) {\n    return l[Math.floor(n / 2)]\n  }\n  let mode = ''\n  let i = 0\n  while (i < n) {\n    if (l[i] > l[i - 1]) {\n      mode += l[i]\n      i++\n    } else {\n      mode += l[", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const text = text.toLowerCase();\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('abc', 3)\n  true\n  >>> isPalindromeOfLength('abc', 4)\n  false\n  >>> isPalindromeOfLength('abc', 5)\n  false\n  >>> isPalindromeOfLength('abc', 6)\n  false\n  */\nconst isPalindromeOfLength = (text, length) => {\n  const text = text.toLowerCase();\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText.slice(0, length);\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength('abc', 3)\n  true\n  >>> isPalindromeOfLength('abc', 4)\n  false\n  >>> isPalindromeOfLength('abc', 5)\n  false\n  >>> isPalindromeOfLength('abc', 6)\n  false\n  */\nconst isPalindromeOfLengthAndSpace = (text, length) => {\n  const text = text.toLowerCase();\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText.slice(0, length).replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpace('abc', 3)\n  true\n  >>> isPalindromeOfLengthAndSpace('abc', 4)\n  false\n  >>> isPalindromeOfLengthAndSpace('abc', 5)\n  false\n  >>> isPalindromeOfLengthAndSpace('abc', 6)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpace = (text, length) => {\n  const text = text.toLowerCase();\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText.slice(0, length).replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpace('abc', 3)\n  true\n  >>> isPalindromeOfLengthAndSpaceAndSpace('abc', 4)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpace('abc', 5)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpace('abc', 6)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  const text = text.toLowerCase();\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText.slice(0, length).replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 3)\n  true\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 4)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 5)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 6)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpace = (text, length) => {\n  const text = text.toLowerCase();\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText.slice(0, length).replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 3)\n  true\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 4)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 5)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 6)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  const text = text.toLowerCase();\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText.slice(0, length).replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 3)\n  true\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 4)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 5)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 6)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  const text = text.toLowerCase();\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText.slice(0, length).replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 3)\n  true\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 4)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 5)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 6)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  const text = text.toLowerCase();\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText.slice(0, length).replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 3)\n  true\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 4)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 5)\n  false\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 6)\n  false\n  */\nconst isPalindromeOfLengthAndSpaceAndSpaceAndSpaceAndSpace = (text, length) => {\n  const text = text.toLowerCase();\n  const reversedText = text.split('').reverse().join('');\n  return text === reversedText.slice(0, length).replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace('abc', 3)\n  true\n  >>> isPalindromeOfLengthAndSpaceAndSpaceAndSpace", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 1) return 0;\n  if (n == 0) return 1;\n  if (n == 1) return p;\n  if (n == 2) return p % p;\n  if (n % p == 0) return 0;\n  return modp(n / p, p);\n};\n\n/*\n  >>> modp(-3, 5)\n  -1\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  -1\n  >>> modp(0, 101)\n  0\n  >>> modp(3, 11)\n  -1\n  >>> modp(100, 101)\n  -1\n  */\nconst modn = (n, p) => {\n  if (n < 0 || p < 1) return 0;\n  if (n == 0) return 1;\n  if (n == 1) return p;\n  if (n == 2) return p % p;\n  if (n % p == 0) return 0;\n  return modn(n / p, p);\n};\n\n/*\n  >>> modn(3, 5)\n  3\n  >>> modn(1101, 101)\n  3\n  >>> modn(0, 101)\n  0\n  >>> modn(3, 11)\n  3\n  >>> modn(100, 101)\n  3\n  */\nconst modd = (m, n) => {\n  if (m == 0) return 0;\n  if (m == 1) return n;\n  if (m == 2) return n % n;\n  if (m % n == 0) return 0;\n  return modn(n / m, m);\n};\n\n/*\n  >>> modd(3, 5)\n  3\n  >>> modd(1101, 101)\n  3\n  >>> modd(0, 101)\n  0\n  >>> modd(3, 11)\n  3\n  >>> modd(100, 101)\n  3\n  */\nconst modnd = (m, n) => {\n  if (m == 0) return 0;\n  if (m == 1) return n;\n  if (m == 2) return n % n;\n  if (m % n == 0) return 0;\n  return modn(n / m, m);\n};\n\n/*\n  >>> modd(3, 5)\n  3\n  >>> modd(1101, 101)\n  3\n  >>> modd(0, 101)\n  0\n  >>> modd(3, 11)\n  3\n  >>> modd(100, 101)\n  3\n  */\nconst modd = (m, n) => {\n  if (m == 0) return 0;\n  if (m == 1) return n;\n  if (m == 2) return n % n;\n  if (m % n == 0) return 0;\n  return modn(n / m, m);\n};\n\n/*\n  >>> modd(3, 5)\n  3\n  >>> modd(1101, 101)\n  3\n  >>> modd(0, 101)\n  0\n  >>> modd(3, 11)\n  3\n  >>> modd(100, 101)\n  3\n  */\nconst modnd = (m, n) => {\n  if (m == 0) return 0;\n  if (m == 1) return n;\n  if (m == 2) return n % n;\n  if (m % n == 0) return 0;\n  return modn(n / m, m);\n};\n\n/*\n  >>> modd(3, 5)\n  3\n  >>> modd(1101, 101)\n  3\n  >>> modd(0, 101)\n  0\n  >>> modd(3, 11)\n  3\n  >>> modd(100, 101)\n  3\n  */\nconst modd = (m, n) => {\n  if (m == 0) return 0;\n  if (m == 1) return n;\n  if (m == 2) return n % n;\n  if (m % n == 0) return 0;\n  return modn(n / m, m);\n};\n\n/*\n  >>> modd(3, 5)\n  3\n  >>> modd(1101, 101)\n  3\n  >>> modd(0, 101)\n  0\n  >>> modd(3, 11)\n  3\n  >>> modd(100, 101)\n  3\n  */\nconst modnd = (m, n) => {\n  if (m == 0) return 0;\n  if (m == 1) return n;\n  if (m == 2) return n % n;\n  if (m % n == 0) return 0;\n  return modn(n / m, m);\n};\n\n/*\n  >>> modd(3, 5)\n  3\n  >>> modd(1101, 101)\n  3\n  >>> modd(0, 101)\n  0\n  >>> modd(3, 11)\n  3\n  >>> modd(100, 101)\n  3\n  */\nconst modd = (m, n) => {\n  if (m == 0) return 0;\n  if (m == 1) return n;\n  if (m == 2) return n % n;\n  if (m % n == 0) return 0;\n  return modn(n / m, m);\n};\n\n/*\n  >>> modd(3, 5)\n  3\n  >>> modd(1101, 101)\n  3\n  >>> modd(0, 101)\n  0\n  >>> modd(3, 11)\n  3\n  >>> modd(100, 101)\n  3\n  */\nconst modnd = (m, n) => {\n  if (m == 0) return 0;\n  if (m == 1) return n;\n  if (m == 2) return n % n;\n  if (m % n == 0) return 0;\n  return modn(n / m, m);\n};\n\n/*\n  >>> modd(3, 5)\n  3\n  >>> modd(1101, 101)\n  3\n  >>> modd(0, 101)\n  0\n  >>> modd(3, 11)\n  3\n  >>> modd(100, 101)\n  3\n  */\nconst modd = (m, n) => {\n  if (m == 0) return 0;\n  if (m == 1) return n;\n  if (m == 2) return n % n;\n  if (m % n == 0) return 0;\n  return modn(n / m, m);\n};\n\n/*\n  >>> modd(3, 5)\n  3\n  >>> modd(1101, 101)\n  3\n  >>> modd(0, 101)\n  0\n  >>> modd(3, 11)\n  3\n  >>> modd(100, 101)\n  3\n  */\nconst modnd = (m, n) => {\n  if (m == 0) return 0;\n  if (m == 1) return n;\n  if (m == 2) return n % n;\n  if (m % n == 0) return 0;\n  return modn(n / m, m);\n};\n\n/*\n  >>> modd(3, 5)\n  3\n  >>> modd(1101, 101)\n  3\n  >>> modd(0, 101)\n  0\n  >>> modd(3, 11)\n  3\n  >>> modd(100, 101)\n  3\n  */\nconst modd = (m, n) => {\n  if (m == 0) return 0;\n  if (m == 1) return n;\n  if (m == 2) return n % n;\n  if (m % n == 0) return 0;\n  return modn(n / m, m);\n};\n\n/*\n  >>> modd(3, 5)\n  3\n  >>> modd(1101, 101)\n  3\n  >>> modd(0, 101)\n  0\n  >>> modd(3, 11)\n  3\n  >>> modd(100, 101)\n  3\n  */\nconst modnd = (m, n) => {\n  if (m == 0) return 0;\n  if (m == 1) return n;\n  if (m == 2) return n % n;\n  if (m % n == 0) return 0;\n  return modn(n / m, m);\n};\n\n/*\n  >>> modd(3, 5)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === numbers.length - 1) {\n      result.push(numbers[i])\n    } else {\n      result.push(numbers[i] + delimeter)\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list\n * >>> remove([1,2,3], 2)\n  [1, 3]\n  >>> remove([1,2,3], 1)\n  []\n  >>> remove([1,2,3], 0)\n  []\n  >>> remove([1,2,3], -1)\n  []\n  >>> remove([1,2,3], -2)\n  []\n  >>> remove([1,2,3], -3)\n  []\n  >>> remove([1,2,3], -4)\n  []\n  >>> remove([1,2,3], -5)\n  []\n  >>> remove([1,2,3], -6)\n  []\n  >>> remove([1,2,3], -7)\n  []\n  >>> remove([1,2,3], -8)\n  []\n  >>> remove([1,2,3], -9)\n  []\n  >>> remove([1,2,3], -10)\n  []\n  >>> remove([1,2,3], -11)\n  []\n  >>> remove([1,2,3], -12)\n  []\n  >>> remove([1,2,3], -13)\n  []\n  >>> remove([1,2,3], -14)\n  []\n  >>> remove([1,2,3], -15)\n  []\n  >>> remove([1,2,3], -16)\n  []\n  >>> remove([1,2,3], -17)\n  []\n  >>> remove([1,2,3], -18)\n  []\n  >>> remove([1,2,3], -19)\n  []\n  >>> remove([1,2,3], -20)\n  []\n  >>> remove([1,2,3], -21)\n  []\n  >>> remove([1,2,3], -22)\n  []\n  >>> remove([1,2,3], -23)\n  []\n  >>> remove([1,2,3], -24)\n  []\n  >>> remove([1,2,3], -25)\n  []\n  >>> remove([1,2,3], -26)\n  []\n  >>> remove([1,2,3], -27)\n  []\n  >>> remove([1,2,3], -28)\n  []\n  >>> remove([1,2,3], -29)\n  []\n  >>> remove([1,2,3], -30)\n  []\n  >>> remove([1,2,3], -31)\n  []\n  >>> remove([1,2,3], -32)\n  []\n  >>> remove([1,2,3], -33)\n  []\n  >>> remove([1,2,3], -34)\n  []\n  >>> remove([1,2,3], -35)\n  []\n  >>> remove([1,2,3], -36)\n  []\n  >>> remove([1,2,3], -37)\n  []\n  >>> remove([1,2,3], -38)\n  []\n  >>> remove([1,2,3], -39)\n  []\n  >>> remove([1,2,3], -40)\n  []\n  >>> remove([1,2,3], -41)\n  []\n  >>> remove([1,2,3], -42)\n  []\n  >>> remove([1,2,3], -43)\n  []\n  >>> remove([1,2,3], -44)\n  []\n  >>> remove([1,2,3], -45)\n  []\n  >>> remove([1,2,3], -46)\n  []\n  >>> remove([1,2,3], -47)\n  []\n  >>> remove([1,2,3], -48)\n  []\n  >>> remove([1,2,3], -49)\n  []\n  >>> remove([1,2,3], -50)\n  []\n  >>> remove([1,2,3], -51)\n  []\n  >>> remove([1,2,3], -52)\n  []\n  >>> remove([1,2,3], -53)\n  []\n  >>> remove([1,2,3], -54)\n  []\n  >>> remove([1,2,3], -55)\n  []\n  >>> remove([1,2,3], -56)\n  []\n  >>> remove([1,2,3], -57)\n  []\n  >>> remove([1,2,3], -58)\n  []\n  >>> remove([1,2,3], -59)\n  []\n  >>> remove([1,2,3], -60)\n  []\n  >>> remove([1,2,3], -61)\n  []\n  >>> remove([1,2,3], -62)\n  []\n  >>> remove([1,2,3], -63)\n  []\n  >>> remove([1,2,3], -64)\n  []\n  >>> remove([1,2,3], -65)\n  []\n  >>> remove([1,2,3], -66)\n  []\n  >>> remove([1,2,3], -67)\n  []\n  >>> remove([1,2,3], -68)\n  []\n  >>> remove([1,2,3], -69)\n  []\n  >>> remove([1,2,3], -70)\n  []\n  >>> remove([1,2,3], -71)\n  []\n  >>> remove([1,2,3], -72)\n  []\n  >>> remove([1,2,3], -73)\n  []\n  >>> remove([1,2,3], -74)\n  []\n  >>> remove([1,2,3], -75)\n  []\n  >>> remove([1,2,3], -76)\n  []\n  >>> remove([1,2,3], -77)\n  []\n  >>> remove([1,2,3], -78)\n  []\n  >>> remove([1,2,3], -79)\n  []\n  >>> remove([1,2,3], -80)\n  []\n  >>> remove([1,2,3], -81)\n  []\n  >>> remove([1,2,3], -82)\n  []\n  >>> remove([1,2,3], -83)\n  []\n  >>> remove([1,2,3], -84)\n  []\n  >>> remove([1,2,3], -85)\n  []\n  >>> remove([1,2,3], -86)\n  []\n  >>> remove([1,2,3], -87)\n  []\n  >>> remove([1,2,3], -88)\n  []\n  >>> remove([1,2,3], -89)\n  []\n  >>> remove([1,2,3], -90)\n  []\n  >>> remove([1,2,3], -91)\n  []\n  >>> remove([1,2,3], -92)\n  []\n  >>> remove([1,2,3], -93)\n  []\n  >>> remove([1,2,3], -94)\n  []\n  >>> remove([1,2,3], -95)\n  []\n  >>> remove([1,2,3], -96)\n  []\n  >>> remove([1,2,3], -97)\n  []\n  >>> remove([1,2,3], -98)\n  []\n  >>> remove([1,2,3], -99)\n  []\n  >>> remove([1,2,3], 100)\n  []\n  >>> remove([1,2,3], 101)\n  []\n  >>> remove([1,2,3], 102)\n  []\n  >>> remove([1,2,3], 103)\n  []\n  >>> remove([1,2,3], 104)\n  []\n  >>> remove([1,2,3], 105)\n  []\n  >>> remove([1,2,3], 106)\n  []\n  >>> remove([1,2,3], 107)\n  []\n  >>> remove([1,2,3], 108)\n  []\n  >>> remove([1,2,3], 109)\n  []\n  >>> remove([1,2,3], 110)\n  []\n  >>> remove([1,2,3], 111)\n  []\n  >>> remove([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBytes = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBytes function. Returns decoded string.\n  */\nconst decodeToBytes = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToHex = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToHex function. Returns decoded string.\n  */\nconst decodeToHex = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64 = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64 function. Returns decoded string.\n  */\nconst decodeToBase64 = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64Url = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64Url function. Returns decoded string.\n  */\nconst decodeToBase64Url = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrl = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeUrl function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeUrl = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeUrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeUrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrlSafeUrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeUrlSafeUrl function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeUrlSafeUrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeUrlSafeUrlSafeUrl function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeUrlSafeUrlSafeUrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafe = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrlSafeUrl", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowel", "gc": "<|endoftext|>/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (vowels.includes(char)) {\n      newText += char;\n    } else {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    } else {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    } else {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    } else {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    } else {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    } else {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    } else {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f') {\n      newText += char;\n    } else {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    const char = text[i];\n    if (char ==='' || char === '\\t' || char === '\\n' || char === '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThresholds", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n  return l.every(n => n < t);\n};\n\nmodule.exports = { belowThresholds };\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\nconst { belowThresholds } = require('./belowThresholds');\n\n/**\n * Return true if all numbers in the list l are above threshold t.\n * If threshold is omitted, then all numbers are above t.\n * If threshold is 0, then all numbers are above t.\n * If threshold is 1, then all numbers are above t.\n * If threshold is 2, then all numbers are above t.\n * If threshold is 3, then all numbers are above t.\n * If threshold is 4, then all numbers are above t.\n * If threshold is 5, then all numbers are above t.\n * If threshold is 6, then all numbers are above t.\n * If threshold is 7, then all numbers are above t.\n * If threshold is 8, then all numbers are above t.\n * If threshold is 9, then all numbers are above t.\n * If threshold is 10, then all numbers are above t.\n * If threshold is 11, then all numbers are above t.\n * If threshold is 12, then all numbers are above t.\n * If threshold is 13, then all numbers are above t.\n * If threshold is 14, then all numbers are above t.\n * If threshold is 15, then all numbers are above t.\n * If threshold is 16, then all numbers are above t.\n * If threshold is 17, then all numbers are above t.\n * If threshold is 18, then all numbers are above t.\n * If threshold is 19, then all numbers are above t.\n * If threshold is 20, then all numbers are above t.\n * If threshold is 21, then all numbers are above t.\n * If threshold is 22, then all numbers are above t.\n * If threshold is 23, then all numbers are above t.\n * If threshold is 24, then all numbers are above t.\n * If threshold is 25, then all numbers are above t.\n * If threshold is 26, then (all numbers are above t).\n * If threshold is 27, then (all numbers are above t).\n * If threshold is 28, then (all numbers are above t).\n * If threshold is 29, then (all numbers are above t).\n * If threshold is 30, then (all numbers are above t).\n * If threshold is 31, then (all numbers are above t).\n * If threshold is 32, then (all numbers are above t).\n * If threshold is 33, then (all numbers are above t).\n * If threshold is 34, then (all numbers are above t).\n * If threshold is 35, then (all numbers are above t).\n * If threshold is 36, then (all numbers are above t).\n * If threshold is 37, then (all numbers are above t).\n * If threshold is 38, then (all numbers are above t).\n * If threshold is 39, then (all numbers are above t).\n * If threshold is 40, then (all numbers are above t).\n * If threshold is 41, then (all numbers are above t).\n * If threshold is 42, then (all numbers are above t).\n * If threshold is 43, then (all numbers are above t).\n * If threshold is 44, then (all numbers are above t).\n * If threshold is 45, then (all numbers are above t).\n * If threshold is 46, then (all numbers are above t).\n * If threshold is 47, then (all numbers are above t).\n * If threshold is 48, then (all numbers are above t).\n * If threshold is 49, then (all numbers are above t).\n * If threshold is 50, then (all numbers are above t).\n * If threshold is 51, then (all numbers are above t).\n * If threshold is 52, then (all numbers are above t).\n * If threshold is 53, then (all numbers are above t).\n * If threshold is 54, then (all numbers are above t).\n * If threshold is 55, then (all numbers are above t).\n * If threshold is 56, then (all numbers are above t).\n * If threshold is 57, then (all numbers are above t).\n * If threshold is 58, then (all numbers are above t).\n * If threshold is 59, then (all numbers are above t).\n * If threshold is 60, then (all numbers are above t).\n * If threshold is 61, then (all numbers are above t).\n * If threshold is 62, then (all numbers are above t).\n * If threshold is 63, then (all numbers are above t).\n * If threshold is 64, then (all numbers are above t).\n * If threshold is 65, then (all numbers are above t).\n * If threshold is 66, then (all numbers are above t).\n * If threshold is 67, then (all numbers are above t).\n * If threshold is 68, then (all numbers are above t).\n * If threshold is 69, then (all numbers are above t).\n * If threshold is 70, then (all numbers are above t).\n * If threshold is 71, then (all numbers are above t).\n * If threshold is 72, then (all numbers are above t).\n * If threshold is 73, then (all numbers are above t).\n * If threshold is 74, then (all numbers are above t).\n * If threshold is 75, then (all numbers are above t).\n * If threshold is 76, then (all numbers are above t).\n * If threshold is 77, then (all numbers are above t).\n * If threshold is 78, then (all numbers are above t).\n * If threshold is 79, then (all numbers are above t).\n * If threshold is 80, then (all numbers are above t).\n * If threshold is 81, then (all numbers are above t).\n * If threshold is 82, then (all numbers are above t).\n * If threshold is 83, then (all numbers are above t).\n * If threshold is 84, then (all numbers are above t).\n * If threshold is 85, then (all numbers are above t).\n * If threshold is 86, then (all numbers are above t).\n * If threshold is 87, then (all numbers are above t).\n * If threshold is 88, then (all numbers are above t).\n * If threshold is 89, then (all numbers are above t).\n * If threshold is 90, then (all numbers are above t).\n * If threshold is 91, then (all numbers are above t).\n * If threshold is 92, then (all numbers are above t).\n * If threshold is 93, then (all numbers are above t).\n * If threshold is 94, then (all numbers are above t).\n * If threshold is 95, then (all numbers are above t).\n * If threshold is 96, then (all numbers are above t).\n * If threshold is 97, then (all numbers are above t).\n * If threshold is 98, then (all numbers are above t).\n * If threshold is 99, then (all numbers are above t).\n * If threshold is 100, then (all numbers are above t).\n * If threshold is 101, then (all numbers are above t).\n * If ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst subtracting = (x, y) => {\n  return x - y;\n};\n\n/*\n  Subtract two numbers x and y\n  >>> subtracting(2, 3)\n  3\n  >>> subtracting(5, 7)\n  -1\n  */\nconst subtracting = (x, y) => {\n  return x - y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  4\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*\n  Divide two numbers x and y", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChar", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same length.\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLength('abcd', 'dddddddabc')\n  true\n  >>> sameLength('dddddddabc', 'abcd')\n  true\n  >>> sameLength('eabcd', 'dddddddabc')\n  false\n  >>> sameLength('abcd', 'dddddddabce')\n  false\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLength = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same capitalization.\n  >>> sameCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCaps('abcd', 'dddddddabc')\n  true\n  >>> sameCaps('dddddddabc', 'abcd')\n  true\n  >>> sameCaps('eabcd', 'dddddddabc')\n  false\n  >>> sameCaps('abcd', 'dddddddabce')\n  false\n  >>> sameCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCaps = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same punctuation.\n  >>> samePunc('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunc('abcd', 'dddddddabc')\n  true\n  >>> samePunc('dddddddabc', 'abcd')\n  true\n  >>> samePunc('eabcd', 'dddddddabc')\n  false\n  >>> samePunc('abcd', 'dddddddabce')\n  false\n  >>> samePunc('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunc = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same punctuation and capitalization.\n  >>> samePuncCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePuncCaps('abcd', 'dddddddabc')\n  true\n  >>> samePuncCaps('dddddddabc', 'abcd')\n  true\n  >>> samePuncCaps('eabcd', 'dddddddabc')\n  false\n  >>> samePuncCaps('abcd', 'dddddddabce')\n  false\n  >>> samePuncCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePuncCaps = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same capitalization and punctuation.\n  >>> sameCapsPunc('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCapsPunc('abcd', 'dddddddabc')\n  true\n  >>> sameCapsPunc('dddddddabc', 'abcd')\n  true\n  >>> sameCapsPunc('eabcd', 'dddddddabc')\n  false\n  >>> sameCapsPunc('abcd', 'dddddddabce')\n  false\n  >>> sameCapsPunc('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCapsPunc = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same capitalization and punctuation and capitalization.\n  >>> sameCapsPuncCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCapsPuncCaps('abcd', 'dddddddabc')\n  true\n  >>> sameCapsPuncCaps('dddddddabc', 'abcd')\n  true\n  >>> sameCapsPuncCaps('eabcd', 'dddddddabc')\n  false\n  >>> sameCapsPuncCaps('abcd', 'dddddddabce')\n  false\n  >>> sameCapsPuncCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCapsPuncCaps = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n  if (s0.length!== s1.length) {\n    return false\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same capitalization and punctuation and capitalization.\n  >>> sameCapsPuncCapsCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCapsPuncCapsCaps('abcd', 'dddddddabc')\n  true\n  >>> sameCapsPuncCapsCaps('dddddddabc', 'abcd')\n  true\n  >>> sameCapsPuncCapsCaps('eabcd', 'dddddddabc')\n  false\n  >>> sameCapsPuncCapsCaps('abcd', 'dddddddabce')\n  false\n  >>> sameCapsPuncCapsCaps('eabcd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fibs", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n\n  while (n) {\n    const tmp = a + b;\n    a = b;\n    b = tmp;\n    c += d;\n    d = a;\n  }\n  return c;\n};\n\n/*\n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined as sum of two consecutive Fibonacci numbers. \n  Fibonacci sequence is defined ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\">\");\n  const closingBrackets = brackets.split(\"<\");\n  return openingBrackets.every(opening => closingBrackets.every(closing => opening === closing));\n};\n\n/**\n * Returns true if the given string is a valid CSS selector\n * and false otherwise.\n *\n * Valid selectors are CSS selectors that start with a\n * letter and contain only letters, digits, hyphens and\n * underscores. A selector that starts with an underscore is\n * invalid.\n *\n * Valid selectors are case-insensitive.\n *\n * Valid selectors are case-sensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * Valid selectors are case-insensitive and can contain any\n * combination of letters, digits, hyphens and underscores.\n *\n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  while (true) {\n    if (l[j] < l[i]) return false;\n    if (l[j] > l[i]) return true;\n    i++;\n    j--;\n  }\n};\n\n/*\n  Return true if all elements are strictly greater than or equal to the\n  specified value.\n  >>> strictly_greater_than(7, 7)\n  true\n  >>> strictly_greater_than(7, 8)\n  false\n  >>> strictly_greater_than(7, 9)\n  false\n  >>> strictly_greater_than(7, 10)\n  false\n  */\nconst strictly_greater_than = (l, v) => {\n  let i = l.length - 1;\n  let j = l[0];\n  while (true) {\n    if (l[j] < v) return false;\n    if (l[j] > v) return true;\n    i++;\n    j--;\n  }\n};\n\n/*\n  Return true if all elements are strictly less than or equal to the\n  specified value.\n  >>> strictly_less_than(7, 7)\n  true\n  >>> strictly_less_than(7, 8)\n  false\n  >>> strictly_less_than(7, 9)\n  false\n  >>> strictly_less_than(7, 10)\n  false\n  */\nconst strictly_less_than = (l, v) => {\n  let i = l.length - 1;\n  let j = l[0];\n  while (true) {\n    if (l[j] > v) return false;\n    if (l[j] < v) return true;\n    i++;\n    j--;\n  }\n};\n\n/*\n  Return true if all elements are strictly less than or equal to the\n  specified value.\n  >>> strictly_less_than_or_equal_to(7, 7)\n  true\n  >>> strictly_less_than_or_equal_to(7, 8)\n  false\n  >>> strictly_less_than_or_equal_to(7, 9)\n  false\n  >>> strictly_less_than_or_equal_to(7, 10)\n  false\n  */\nconst strictly_less_than_or_equal_to = (l, v) => {\n  let i = l.length - 1;\n  let j = l[0];\n  while (true) {\n    if (l[j] < v) return false;\n    if (l[j] > v) return true;\n    i++;\n    j--;\n  }\n};\n\n/*\n  Return true if all elements are strictly greater than or equal to the\n  specified value.\n  >>> strictly_greater_than_or_equal_to(7, 7)\n  true\n  >>> strictly_greater_than_or_equal_to(7, 8)\n  false\n  >>> strictly_greater_than_or_equal_to(7, 9)\n  false\n  >>> strictly_greater_than_or_equal_to(7, 10)\n  false\n  */\nconst strictly_greater_than_or_equal_to = (l, v) => {\n  let i = l.length - 1;\n  let j = l[0];\n  while (true) {\n    if (l[j] > v) return false;\n    if (l[j] < v) return true;\n    i++;\n    j--;\n  }\n};\n\n/*\n  Return true if all elements are strictly greater than or equal to the\n  specified value.\n  >>> strictly_less_than_or_equal_to(7, 7)\n  true\n  >>> strictly_less_than_or_equal_to(7, 8)\n  false\n  >>> strictly_less_than_or_equal_to(7, 9)\n  false\n  >>> strictly_less_than_or_equal_to(7, 10)\n  false\n  */\nconst strictly_less_than_or_equal_to = (l, v) => {\n  let i = l.length - 1;\n  let j = l[0];\n  while (true) {\n    if (l[j] > v) return false;\n    if (l[j] < v) return true;\n    i++;\n    j--;\n  }\n};\n\n/*\n  Return true if all elements are strictly less than or equal to the\n  specified value.\n  >>> strictly_greater_than_or_equal_to(7, 7)\n  true\n  >>> strictly_greater_than_or_equal_to(7, 8)\n  false\n  >>> strictly_greater_than_or_equal_to(7, 9)\n  false\n  >>> strictly_greater_than_or_equal_to(7, 10)\n  false\n  */\nconst strictly_less_than_or_equal_to = (l, v) => {\n  let i = l.length - 1;\n  let j = l[0];\n  while (true) {\n    if (l[j] < v) return false;\n    if (l[j] > v) return true;\n    i++;\n    j--;\n  }\n};\n\n/*\n  Return true if all elements are strictly greater than or equal to the\n  specified value.\n  >>> strictly_less_than_or_equal_to(7, 7)\n  true\n  >>> strictly_less_than_or_equal_to(7, 8)\n  false\n  >>> strictly_less_than_or_equal_to(7, 9)\n  false\n  >>> strictly_less_than_or_equal_to(7, 10)\n  false\n  */\nconst strictly_greater_than_or_equal_to = (l, v) => {\n  let i = l.length - 1;\n  let j = l[0];\n  while (true) {\n    if (l[j] > v) return false;\n    if (l[j] < v) return true;\n    i++;\n    j--;\n  }\n};\n\n/*\n  Return true if all elements are strictly less than or equal to the\n  specified value.\n  >>> strictly_greater_than_or_equal_to(7, 7)\n  true\n  >>> strictly_greater_than_or_equal_to(7, 8)\n  false\n  >>> strictly_greater_than_or_equal_to(7, 9)\n  false\n  >>> strictly_greater_than_or_equal_to(7, 10)\n  false\n  */\nconst strictly_less_than_or_equal_to = (l, v) => {\n  let i = l.length - 1;\n  let j = l[0];\n  while (true) {\n    if (l[j] < v) return false;\n    if (l[j] > v) return true;\n    i++;\n    j--;\n  }\n};\n\n/*\n  Return true if all elements are strictly greater than or equal to the\n  specified value.\n  >>> strictly_less_than_or_equal_to(7, 7)\n  true\n  >>> strictly_less_than_or_equal_to(7, 8)\n  false\n  >>> strictly_less_than_or_equal_to(7, 9)\n  false\n  >>> strictly_less_than_or_equal_to(7, 10)\n  false\n  */\nconst strictly_greater_than_or_equal_to = (l, v) => {\n  let i = l.length - 1;\n  let j = l[0];\n  while (true) {\n    if (l[j] > v) return false;\n    if (l[j] < v) return true;\n    i++;\n    j--;\n  }\n};\n\n/*\n  Return true if all elements are strictly less than or equal to the\n  specified value.\n  >>> strictly_less_than_or_equal_to(7, 7)\n  true\n  >>> strictly_less_than_or_equal_to(7, 8)\n  false\n  >>> strictly_less_than_or_equal_to(7, 9)\n  false\n  >>> strictly_less_than_or_equal_to(7, 10)\n  false\n  */\nconst strictly_less_than_or_equal_to = (l, v) => {\n  let i = l.length - 1;\n  let j = l[0];\n  while (true) {\n    if (l[j] < v) return false;\n    if (l[j] > v) return true;\n    i++;\n    j--;\n  }\n};\n\n/*\n  Return true if all elements are strictly greater than or equal to the\n  specified value.\n  >>> strictly_greater_than_or_equal_to(7, 7)\n  true\n  >>> strictly_greater_than_or_equal_to(7, 8)\n  false", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  l1.forEach(element => {\n    if (!set.has(element)) {\n      set.add(element);\n      l2.forEach(element => {\n        if (element === element) {\n          return;\n        }\n        if (set.has(element)) {\n          set.delete(element);\n        }\n      });\n    }\n  });\n  return Array.from(set);\n};\n\n/*\n  >>> isEven(10)\n  true\n  >>> isEven(11)\n  false\n  >>> isEven(12)\n  false\n  >>> isEven(13)\n  false\n  >>> isEven(14)\n  false\n  >>> isEven(15)\n  false\n  >>> isEven(16)\n  false\n  >>> isEven(17)\n  false\n  >>> isEven(18)\n  false\n  >>> isEven(19)\n  false\n  >>> isEven(20)\n  false\n  >>> isEven(21)\n  false\n  >>> isEven(22)\n  false\n  >>> isEven(23)\n  false\n  >>> isEven(24)\n  false\n  >>> isEven(25)\n  false\n  >>> isEven(26)\n  false\n  >>> isEven(27)\n  false\n  >>> isEven(28)\n  false\n  >>> isEven(29)\n  false\n  >>> isEven(30)\n  false\n  >>> isEven(31)\n  false\n  >>> isEven(32)\n  false\n  >>> isEven(33)\n  false\n  >>> isEven(34)\n  false\n  >>> isEven(35)\n  false\n  >>> isEven(36)\n  false\n  >>> isEven(37)\n  false\n  >>> isEven(38)\n  false\n  >>> isEven(39)\n  false\n  >>> isEven(40)\n  false\n  >>> isEven(41)\n  false\n  >>> isEven(42)\n  false\n  >>> isEven(43)\n  false\n  >>> isEven(44)\n  false\n  >>> isEven(45)\n  false\n  >>> isEven(46)\n  false\n  >>> isEven(47)\n  false\n  >>> isEven(48)\n  false\n  >>> isEven(49)\n  false\n  >>> isEven(50)\n  false\n  >>> isEven(51)\n  false\n  >>> isEven(52)\n  false\n  >>> isEven(53)\n  false\n  >>> isEven(54)\n  false\n  >>> isEven(55)\n  false\n  >>> isEven(56)\n  false\n  >>> isEven(57)\n  false\n  >>> isEven(58)\n  false\n  >>> isEven(59)\n  false\n  >>> isEven(60)\n  false\n  >>> isEven(61)\n  false\n  >>> isEven(62)\n  false\n  >>> isEven(63)\n  false\n  >>> isEven(64)\n  false\n  >>> isEven(65)\n  false\n  >>> isEven(66)\n  false\n  >>> isEven(67)\n  false\n  >>> isEven(68)\n  false\n  >>> isEven(69)\n  false\n  >>> isEven(70)\n  false\n  >>> isEven(71)\n  false\n  >>> isEven(72)\n  false\n  >>> isEven(73)\n  false\n  >>> isEven(74)\n  false\n  >>> isEven(75)\n  false\n  >>> isEven(76)\n  false\n  >>> isEven(77)\n  false\n  >>> isEven(78)\n  false\n  >>> isEven(79)\n  false\n  >>> isEven(80)\n  false\n  >>> isEven(81)\n  false\n  >>> isEven(82)\n  false\n  >>> isEven(83)\n  false\n  >>> isEven(84)\n  false\n  >>> isEven(85)\n  false\n  >>> isEven(86)\n  false\n  >>> isEven(87)\n  false\n  >>> isEven(88)\n  false\n  >>> isEven(89)\n  false\n  >>> isEven(90)\n  false\n  >>> isEven(91)\n  false\n  >>> isEven(92)\n  false\n  >>> isEven(93)\n  false\n  >>> isEven(94)\n  false\n  >>> isEven(95)\n  false\n  >>> isEven(96)\n  false\n  >>> isEven(97)\n  false\n  >>> isEven(98)\n  false\n  >>> isEven(99)\n  false\n  >>> isEven(100)\n  false\n  >>> isEven(101)\n  false\n  >>> isEven(102)\n  false\n  >>> isEven(103)\n  false\n  >>> isEven(104)\n  false\n  >>> isEven(105)\n  false\n  >>> isEven(106)\n  false\n  >>> isEven(107)\n  false\n  >>> isEven(108)\n  false\n  >>> isEven(109)\n  false\n  >>> isEven(110)\n  false\n  >>> isEven(111)\n  false\n  >>> isEven(112)\n  false\n  >>> isEven(113)\n  false\n  >>> isEven(114)\n  false\n  >>> isEven(115)\n  false\n  >>> isEven(116)\n  false\n  >>> isEven(117)\n  false\n  >>> isEven(118)\n  false\n  >>> isEven(119)\n  false\n  >>> isEven(120)\n  false\n  >>> isEven(121)\n  false\n  >>> isEven(122)\n  false\n  >>> isEven(123)\n  false\n  >>> isEven(124)\n  false\n  >>> isEven(125)\n  false\n  >>> isEven(126)\n  false\n  >>> isEven(127)\n  false\n  >>> isEven(128)\n  false\n  >>> isEven(129)\n  false\n  >>> isEven(130)\n  false\n  >>> isEven(131)\n  false\n  >>> isEven(132)\n  false\n  >>> isEven(133)\n  false\n  >>> isEven(134)\n  false\n  >>> isEven(135)\n  false\n  >>> isEven(136)\n  false\n  >>> isEven(137)\n  false\n  >>> isEven(138)\n  false\n  >>> isEven(139)\n  false\n  >>> isEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largerPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (true) {\n    if (n % i === 0) {\n      n = n / i;\n      i++;\n    } else {\n      return factor;\n    }\n  }\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a prime number.\n  >>> isPrime(123)\n  true\n  >>> isPrime(456)\n  false\n  >>> isPrime(789)\n  false\n  >>> isPrime(900)\n  true\n*/\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a composite number.\n  >>> isComposite(123)\n  true\n  >>> isComposite(456)\n  false\n  >>> isComposite(789)\n  false\n  >>> isComposite(900)\n  false\n*/\nconst isComposite = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a composite number modulo n.\n  >>> isCompositeMod(123, 456)\n  true\n  >>> isCompositeMod(456, 789)\n  false\n  >>> isCompositeMod(789, 900)\n  false\n  >>> isCompositeMod(900, 123)\n  false\n*/\nconst isCompositeMod = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a composite number modulo n.\n  >>> isCompositeMod(123, 456)\n  true\n  >>> isCompositeMod(456, 789)\n  false\n  >>> isCompositeMod(789, 900)\n  false\n  >>> isCompositeMod(900, 123)\n  false\n*/\nconst isCompositeMod = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a composite number modulo n.\n  >>> isCompositeMod(123, 456)\n  true\n  >>> isCompositeMod(456, 789)\n  false\n  >>> isCompositeMod(789, 900)\n  false\n  >>> isCompositeMod(900, 123)\n  false\n*/\nconst isCompositeMod = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a composite number modulo n.\n  >>> isCompositeMod(123, 456)\n  true\n  >>> isCompositeMod(456, 789)\n  false\n  >>> isCompositeMod(789, 900)\n  false\n  >>> isCompositeMod(900, 123)\n  false\n*/\nconst isCompositeMod = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a composite number modulo n.\n  >>> isCompositeMod(123, 456)\n  true\n  >>> isCompositeMod(456, 789)\n  false\n  >>> isCompositeMod(789, 900)\n  false\n  >>> isCompositeMod(900, 123)\n  false\n*/\nconst isCompositeMod = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a composite number modulo n.\n  >>> isCompositeMod(123, 456)\n  true\n  >>> isCompositeMod(456, 789)\n  false\n  >>> isCompositeMod(789, 900)\n  false\n  >>> isCompositeMod(900, 123)\n  false\n*/\nconst isCompositeMod = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a positive integer n, return true if and only if n is a composite number modulo n.\n  >>> isCompositeMod(123, 456)\n  true\n  >>> isCompositeMod(456, 789)\n  false\n  >>> isCompositeMod(789, 900)\n  false\n  >>> isCompositeMod(900, 123)\n  false\n*/\nconst isCompositeMod = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const nesting_levels = [];\n  let current_nesting_level = 0;\n  let current_nesting_level_count = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const group_index = group.indexOf('(');\n    const group_length = group.length;\n    const group_nesting_level_count = group_length - group_index;\n    if (group_nesting_level_count > current_nesting_level_count) {\n      current_nesting_level = group_nesting_level_count;\n      current_nesting_level_count = group_nesting_level_count;\n    }\n    if (current_nesting_level > nesting_levels.length) {\n      nesting_levels.push(current_nesting_level);\n    }\n    nesting_levels[current_nesting_level] = nesting_levels[current_nesting_level] + 1;\n  }\n  return nesting_levels;\n};\n\nconst parseNesting = (paren_string) => {\n  const nesting_levels = parseNestParens(paren_string);\n  const nesting_level_count = nesting_levels.length;\n  const nesting_levels_string = [];\n  for (let i = 0; i < nesting_level_count; i++) {\n    nesting_levels_string.push(nesting_levels[i] +'');\n  }\n  return nesting_levels_string;\n};\n\nconst parseParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const parens = [];\n  let current_paren = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const group_index = group.indexOf('(');\n    const group_length = group.length;\n    const group_paren_count = group_length - group_index;\n    if (group_paren_count > current_paren) {\n      current_paren = group_paren_count;\n    }\n    if (current_paren > parens.length) {\n      parens.push(current_paren);\n    }\n    parens[current_paren] = parens[current_paren] + 1;\n  }\n  return parens;\n};\n\nconst parseParensString = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const parens = [];\n  let current_paren = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const group_index = group.indexOf('(');\n    const group_length = group.length;\n    const group_paren_count = group_length - group_index;\n    if (group_paren_count > current_paren) {\n      current_paren = group_paren_count;\n    }\n    if (current_paren > parens.length) {\n      parens.push(current_paren);\n    }\n    parens[current_paren] = parens[current_paren] + 1;\n  }\n  return parens.toString();\n};\n\nconst parseParensStringArray = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const parens = [];\n  let current_paren = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const group_index = group.indexOf('(');\n    const group_length = group.length;\n    const group_paren_count = group_length - group_index;\n    if (group_paren_count > current_paren) {\n      current_paren = group_paren_count;\n    }\n    if (current_paren > parens.length) {\n      parens.push(current_paren);\n    }\n    parens[current_paren] = parens[current_paren] + 1;\n  }\n  return parens.map((p) => p.toString());\n};\n\nconst parseParensStringArrayWithParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const parens = [];\n  let current_paren = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const group_index = group.indexOf('(');\n    const group_length = group.length;\n    const group_paren_count = group_length - group_index;\n    if (group_paren_count > current_paren) {\n      current_paren = group_paren_count;\n    }\n    if (current_paren > parens.length) {\n      parens.push(current_paren);\n    }\n    parens[current_paren] = parens[current_paren] + 1;\n  }\n  return parens.map((p) => p.toString());\n};\n\nconst parseParensStringArrayWithParensAndNesting = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const parens = [];\n  let current_paren = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const group_index = group.indexOf('(');\n    const group_length = group.length;\n    const group_paren_count = group_length - group_index;\n    if (group_paren_count > current_paren) {\n      current_paren = group_paren_count;\n    }\n    if (current_paren > parens.length) {\n      parens.push(current_paren);\n    }\n    parens[current_paren] = parens[current_paren] + 1;\n  }\n  return parens.map((p) => p.toString());\n};\n\nconst parseParensStringArrayWithParensAndNestingAndParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const parens = [];\n  let current_paren = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const group_index = group.indexOf('(');\n    const group_length = group.length;\n    const group_paren_count = group_length - group_index;\n    if (group_paren_count > current_paren) {\n      current_paren = group_paren_count;\n    }\n    if (current_paren > parens.length) {\n      parens.push(current_paren);\n    }\n    parens[current_paren] = parens[current_paren] + 1;\n  }\n  return parens.map((p) => p.toString());\n};\n\nconst parseParensStringArrayWithParensAndNestingAndParensAndNesting = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const parens = [];\n  let current_paren = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const group_index = group.indexOf('(');\n    const group_length = group.length;\n    const group_paren_count = group_length - group_index;\n    if (group_paren_count > current_paren) {\n      current_paren = group_paren_count;\n    }\n    if (current_paren > parens.length) {\n      parens.push(current_paren);\n    }\n    parens[current_paren] = parens[current_paren] + 1;\n  }\n  return parens.map((p) => p.toString());\n};\n\nconst parseParensStringArrayWithParensAndNestingAndParensAndNestingAndParens = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const parens = [];\n  let current_paren = 0;\n  for (let i = 0; i < paren_groups.length; i++) {\n    const group = paren_groups[i];\n    const group_index = group.indexOf('(');\n    const group_length = group.length;\n    const group_paren_count = group_length - group_index;\n    if (group_paren_count > current_paren) {\n      current_paren = group_paren_count;\n    }\n    if (current_paren > parens.length) {\n      parens.push(current_paren);\n    }\n    parens[current_paren] = parens[current_paren] + 1;\n  }\n  return parens.map((p) => p.toString());\n};\n\nconst parseParensStringArrayWithParen", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumsToN", "gc": "<|endoftext|>/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works as follows:\n * 1. If n is even, return 1.\n * 2. If n is odd, return (n + 1) * (n + 1) / 2.\n * 3. If n is divisible by 2, return (n + 1) * (n + 1) / 2.\n * 4. If n is divisible by 3, return (n + 1) * (n + 1) / 3.\n * 5. If n is divisible by 4, return (n + 1) * (n + 1) / 4.\n * 6. If n is divisible by 5, return (n + 1) * (n + 1) / 5\n * 7. If n is divisible by 6, return (n + 1) * (n + 1) / 6\n * 8. If n is divisible by 7, return (n + 1) * (n + 1) / 7\n * 9. If n is divisible by 8, return (n + 1) * (n + 1) / 8\n * 10. If n is divisible by 9, return (n + 1) * (n + 1) / 9\n * 11. If n is divisible by 10, return (n + 1) * (n + 1) / 10\n * 12. If n is divisible by 11, return (n + 1) * (n + 1) / 11\n * 13. If n is divisible by 12, return (n + 1) * (n + 1) / 12\n * 14. If n is divisible by 13, return (n + 1) * (n + 1) / 13\n * 15. If n is divisible by 14, return (n + 1) * (n + 1) / 14\n * 16. If n is divisible by 15, return (n + 1) * (n + 1) / 15\n * 17. If n is divisible by 16, return (n + 1) * (n + 1) / 16\n * 18. If n is divisible by 17, return (n + 1) * (n + 1) / 17\n * 19. If n is divisible by 18, return (n + 1) * (n + 1) / 18\n * 20. If n is divisible by 19, return (n + 1) * (n + 1) / 19\n * 21. If n is divisible by 20, return (n + 1) * (n + 1) / 20\n * 22. If n is divisible by 21, return (n + 1) * (n + 1) / 21\n * 23. If n is divisible by 22, return (n + 1) * (n + 1) / 22\n * 24. If n is divisible by 23, return (n + 1) * (n + 1) / 23\n * 25. If n is divisible by 24, return (n + 1) * (n + 1) / 24\n * 26. If n is divisible by 25, return (n + 1) * (n + 1) / 25\n * 27. If n is divisible by 26, return (n + 1) * (n + 1) / 26\n * 28. If n is divisible by 27, return (n + 1) * (n + 1) / 27\n * 29. If n is divisible by 28, return (n + 1) * (n + 1) / 28\n * 30. If n is divisible by 29, return (n + 1) * (n + 1) / 29\n * 31. If n is divisible by 30, return (n + 1) * (n + 1) / 30\n * 32. If n is divisible by 31, return (n + 1) * (n + 1) / 31\n * 33. If n is divisible by 32, return (n + 1) * (n + 1) / 32\n * 34. If n is divisible by 33, return (n + 1) * (n + 1) / 33\n * 35. If n is divisible by 34, return (n + 1) * (n + 1) / 34\n * 36. If n is divisible by 35, return (n + 1) * (n + 1) / 35\n * 37. If n is divisible by 36, return (n + 1) * (n + 1) / 36\n * 38. If n is divisible by 37, return (n + 1) * (n + 1) / 37\n * 39. If n is divisible by 38, return (n + 1) * (n + 1) / 38\n * 40. If n is divisible by 39, return (n + 1) * (n + 1) / 39\n * 41. If n is divisible by 40, return (n + 1) * (n + 1) / 40\n * 42. If n is divisible by 41, return (n + 1) * (n + 1) / 41\n * 43. If n is divisible by 42, return (n + 1) * (n + 1) / 42\n * 44. If n is divisible by 43, return (n + 1) * (n + 1) / 43\n * 45. If n is divisible by 44, return (n + 1) * (n + 1) / 44\n * 46. If n is divisible by 45, return (n + 1) * (n + 1) / 45\n * 47. If n is divisible by 46, return (n + 1) * (n + 1) / 46\n * 48. If n is divisible by 47, return (n + 1) * (n + 1) / 47\n * 49. If n is divisible by 48, return (n + 1) * (n + 1) / 48\n * 50. If n is divisible by 49, return (n + 1) * (n + 1) / 49\n * 51. If n is divisible by 50, return (n + 1) * (n + 1) / 50\n * 52. If n is divisible by 51, return (n + 1) * (n + 1) / 51\n * 53. If n is divisible by 52, return (n + 1) * (n + 1) / 52\n * 54. If n is divisible by 53, return (n + 1) * (n + 1) / 53\n * 55. If n is divisible by 54, return (n + 1) * (n + 1) / 54\n * 56. If n is divisible by 55, return (n + 1) * (n + 1) / 55\n * 57. If n is divisible by 56, return (n + 1) * (n + 1) / 56\n * 58. If n is divisible by 57, return (n + 1) * (n + 1) / 57\n * 59. If n is divisible by 58, return (n + 1) * (n + 1) / 58\n * 60. If n is divisible by 59, return (n + 1) * (n + 1) / 59\n * 61. If n is divisible by 60, return (n + 1) * (n + 1) / 60\n * 62. If n is divisible by 61, return (n + 1) * (n + 1) / 61\n * 63. If n is divisible by 62, return (n + 1) * (n + 1) / 62\n * 64. If n is divisible by 63, return (n + 1) * (n + 1) / 63\n * 65. If n is divisible by 64, return (n + 1) * (n + 1) / 64\n * 66. If n is divisible by 65, return (n + 1) * (n + 1) / 65\n * 67. If n is divisible by 66, return (n + 1) * (n + 1) / 66\n * 68. If n is divisible by 67, return (n + 1) * (n + 1) / 67\n * 69. If n is divisible by 68, return (n + 1) * (n + 1) / 68\n * 70. If n is divisible by 69, return (n + 1) * (n + 1) / 69\n * 71. If n is divisible by 70, return (n + 1) * (n + 1) / 70\n * 72. If n is divisible by 71, return (n + 1) * (n + 1) / 71\n * 73. If n is divisible by 72, return (n + 1) * (n + 1) / 72\n * 74. If n is divisible by 73, return (n + 1) * (n + 1) / 73\n * 75. If n is divisible by ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(');\n  const closingBrackets = brackets.split(')');\n\n  return openingBrackets.every(opening => closingBrackets.every(closing => opening === closing));\n};\n\n/**\n * Returns true if the given string is a valid CSS selector\n * that can match any valid CSS selector\n *\n * Valid CSS selectors are of the form:\n *\n * 1. A simple selector\n * 2. A compound selector\n * 3. A pseudo-class selector\n * 4. An attribute selector\n * 5. A universal selector\n * 6. A class selector\n * 7. A tag selector\n * 8. A type selector\n * 9. A universal selector\n * 10. A class selector\n * 11. A tag selector\n * 12. A type selector\n * 13. A universal selector\n * 14. A class selector\n * 15. A tag selector\n * 16. A type selector\n * 17. A universal selector\n * 18. A class selector\n * 19. A tag selector\n * 20. A type selector\n * 21. A universal selector\n * 22. A class selector\n * 23. A tag selector\n * 24. A type selector\n * 25. A universal selector\n * 26. A class selector\n * 27. A tag selector\n * 28. A type selector\n * 29. A universal selector\n * 30. A class selector\n * 31. A tag selector\n * 32. A type selector\n * 33. A universal selector\n * 34. A class selector\n * 35. A tag selector\n * 36. A type selector\n * 37. A universal selector\n * 38. A class selector\n * 39. A tag selector\n * 40. A type selector\n * 41. A universal selector\n * 42. A class selector\n * 43. A tag selector\n * 44. A type selector\n * 45. A universal selector\n * 46. A class selector\n * 47. A tag selector\n * 48. A type selector\n * 49. A universal selector\n * 50. A class selector\n * 51. A tag selector\n * 52. A type selector\n * 53. A universal selector\n * 54. A class selector\n * 55. A tag selector\n * 56. A type selector\n * 57. A universal selector\n * 58. A class selector\n * 59. A tag selector\n * 60. A type selector\n * 61. A universal selector\n * 62. A class selector\n * 63. A tag selector\n * 64. A type selector\n * 65. A universal selector\n * 66. A class selector\n * 67. A tag selector\n * 68. A type selector\n * 69. A universal selector\n * 70. A class selector\n * 71. A tag selector\n * 72. A type selector\n * 73. A universal selector\n * 74. A class selector\n * 75. A tag selector\n * 76. A type selector\n * 77. A universal selector\n * 78. A class selector\n * 79. A tag selector\n * 80. A type selector\n * 81. A universal selector\n * 82. A class selector\n * 83. A tag selector\n * 84. A type selector\n * 85. A universal selector\n * 86. A class selector\n * 87. A tag selector\n * 88. A type selector\n * 89. A universal selector\n * 90. A class selector\n * 91. A tag selector\n * 92. A type selector\n * 93. A universal selector\n * 94. A class selector\n * 95. A tag selector\n * 96. A type selector\n * 97. A universal selector\n * 98. A class selector\n * 99. A tag selector\n * 100. A type selector\n * 101. A universal selector\n * 102. A class selector\n * 103. A tag selector\n * 104. A type selector\n * 105. A universal selector\n * 106. A class selector\n * 107. A tag selector\n * 108. A type selector\n * 109. A universal selector\n * 110. A class selector\n * 111. A tag selector\n * 112. A type selector\n * 113. A universal selector\n * 114. A class selector\n * 115. A tag selector\n * 116. A type selector\n * 117. A universal selector\n * 118. A class selector\n * 119. A tag selector\n * 120. A type selector\n * 121. A universal selector\n * 122. A class selector\n * 123. A tag selector\n * 124. A type selector\n * 125. A universal selector\n * 126. A class selector\n * 127. A tag selector\n * 128. A type selector\n * 129. A universal selector\n * 130. A class selector\n * 131. A tag selector\n * 132. A type selector\n * 133. A universal selector\n * 134. A class selector\n * 135. A tag selector\n * 136. A type selector\n * 137. A universal selector\n * 138. A class selector\n * 139. A tag selector\n * 140. A type selector\n * 141. A universal selector\n * 142. A class selector\n * 143. A tag selector\n * 144. A type selector\n * 145. A universal selector\n * 146. A class selector\n * 147. A tag selector\n * 148. A type selector\n * 149. A universal selector\n * 150. A class selector\n * 151. A tag selector\n * 152. A type selector\n * 153. A universal selector\n * 154. A class selector\n * 155. A tag selector\n * 156. A type selector\n * 157. A universal selector\n * 158. A class selector\n * 159. A tag selector\n * 160. A type selector\n * 161. A universal selector\n * 162. A class selector\n * 163. A tag selector\n * 164. A type selector\n * 165. A universal selector\n * 166. A class selector\n * 167. A tag selector\n * 168. A type selector\n * 169. A universal selector\n * 170. A class selector\n * 171. A tag selector\n * 172. A type selector\n * 173. A universal selector\n * 174. A class selector\n * 175. A tag selector\n * 176. A type selector\n * 177. A universal selector\n * 178. A class selector\n * 179. A tag selector\n * 180. A type selector\n * 181. A universal selector\n * 182. A class selector\n * 183. A tag selector\n * 184. A type selector\n * 185. A universal selector\n * 186. A class selector\n * 187. A tag selector\n * 188. A type selector\n * 189. A universal selector\n * 190. A class selector\n * 191. A tag selector\n * 192. A type selector\n * 193. A universal selector\n * 194. A class selector\n * 195. A tag selector\n * 196. A type selector\n * 197. A universal selector\n * 198. A class selector\n * 199. A tag selector\n * 200. A type selector\n * 201. A universal selector\n * 202. A class selector\n * 203. A tag selector\n * 204. A type selector\n * 205. A universal selector\n * 206. A class selector\n * 207. A tag selector\n * 208. A type selector\n * 209. A universal selector\n * 210. A class selector\n * 211. A tag selector\n * 212. A type selector\n * 213. A universal selector\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let i = 0\n  let d = 0\n  let x = 0\n  let y = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0\n  let yi = 0\n  let xj = 0\n  let yj = 0\n  let xk = 0\n  let yk = 0\n  let xm = 0\n  let ym = 0\n  let xi = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(0)\n  1\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  34\n  */\nconst fibfibRecur = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibRecur(n-1) + fibfibRecur(n-2) + fibfibRecur(n-3);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using iteration.\n  >>> fibfib(0)\n  1\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  34\n  */\nconst fibfibIter = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibIter(n-1) + fibfibIter(n-2) + fibfibIter(n-3);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using recursion and iteration.\n  >>> fibfib(0)\n  1\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  34\n  */\nconst fibfibIterRecur = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibIterRecur(n-1) + fibfibIterRecur(n-2) + fibfibIterRecur(n-3);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using recursion and iteration.\n  >>> fibfib(0)\n  1\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  34\n  */\nconst fibfibIterIter = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibIterIter(n-1) + fibfibIterIter(n-2) + fibfibIterIter(n-3);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using recursion and iteration.\n  >>> fibfib(0)\n  1\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  34\n  */\nconst fibfibIterIterRecur = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibIterIterRecur(n-1) + fibfibIterIterRecur(n-2) + fibfibIterIterRecur(n-3);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using recursion and iteration.\n  >>> fibfib(0)\n  1\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  34\n  */\nconst fibfibIterIterIter = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibIterIter(n-1) + fibfibIterIterRecur(n-2) + fibfibIterIterRecur(n-3);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using recursion and iteration.\n  >>> fibfib(0)\n  1\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  34\n  */\nconst fibfibIterIterIterRecur = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibIterIterIterRecur(n-1) + fibfibIterIterRecur(n-2) + fibfibIterIterRecur(n-3);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using recursion and iteration.\n  >>> fibfib(0)\n  1\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  34\n  */\nconst fibfibIterIterIterIter = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibIterIterIter(n-1) + fibfibIterIterIterRecur(n-2) + fibfibIterIterIterRecur(n-3);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using recursion and iteration.\n  >>> fibfib(0)\n  1\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  34\n  */\nconst fibfibIterIterIterIterRecur = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibIterIterIterIterRecur(n-1) + fibfibIterIterIterRecur(n-2) + fibfibIterIterIterRecur(n-3);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using recursion and iteration.\n  >>> fibfib(0)\n  1\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  34\n  */\nconst fibfibIterIterIterIterIter = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibIterIterIterIterRecur(n-1) + fibfibIterIterIterIterRecur(n-2) + fibfibIterIterIterIterRecur(n-3);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using recursion and iteration.\n  >>> fibfib(0)\n  1\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  34\n  */\nconst fibfibIterIterIterIterIterRecur = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibIterIterIterIterIterRecur(n-1) + fibfibIterIterIterIterRecur(n-2) + fibfibIterIterIterIterRecur(n-3);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using recursion and iteration.\n  >>> fibfib(0)\n  1\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  34\n  */\nconst fibfibIterIterIterIterIterIter = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibIterIterIterIterIterRecur(n-1) + fibfibIterIterIterIterRecur(n-2) + fibfibIterIterIterIterRecur(n-3);\n};\n\n/*\n  Write a function to compute the n-th Fibonacci number in the Fibonacci sequence using recursion and iteration.\n  >>> fibfib(0)\n  1\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  34\n  */\nconst fibfibIterIterIterIterIterIterRecur = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfibIterIterIterIterIterIterRecur(n-1) + fibfibIterIterIterIterIter", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelCount", "gc": "<|endoftext|>/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let vowels = 0;\n  let lastVowel = s.charAt(s.length - 1);\n  let lastVowelIndex = -1;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastVowel) {\n      lastVowelIndex = i;\n      lastVowel = s.charAt(i);\n    }\n    if (lastVowelIndex === -1) {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*Write a function wordCount which takes a string representing\n  a word as input and returns the number of words in the string.\n  Words in this case are 'the', 'a', 'an', 'they', 'his', 'her', and\n  'hers'. Here, 'the' is a word, but only when it is at the start of the\n  given word.\n\n  Example:\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog\")\n  3\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog jumps over the lazy dog\")\n  3\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  let lastWord = s.charAt(0);\n  let lastWordIndex = -1;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastWord) {\n      lastWordIndex = i;\n      lastWord = s.charAt(i);\n    }\n    if (lastWordIndex === -1) {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount which takes a string representing\n  a word as input and returns the number of words in the string.\n  Words in this case are 'the', 'a', 'an', 'they', 'his', 'her', and\n  'hers'. Here, 'the' is a word, but only when it is at the start of the\n  given word.\n\n  Example:\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog\")\n  3\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog jumps over the lazy dog\")\n  3\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  let lastWord = s.charAt(0);\n  let lastWordIndex = -1;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastWord) {\n      lastWordIndex = i;\n      lastWord = s.charAt(i);\n    }\n    if (lastWordIndex === -1) {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount which takes a string representing\n  a word as input and returns the number of words in the string.\n  Words in this case are 'the', 'a', 'an', 'they', 'his', 'her', and\n  'hers'. Here, 'the' is a word, but only when it is at the start of the\n  given word.\n\n  Example:\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog\")\n  3\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog jumps over the lazy dog\")\n  3\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  let lastWord = s.charAt(0);\n  let lastWordIndex = -1;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastWord) {\n      lastWordIndex = i;\n      lastWord = s.charAt(i);\n    }\n    if (lastWordIndex === -1) {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount which takes a string representing\n  a word as input and returns the number of words in the string.\n  Words in this case are 'the', 'a', 'an', 'they', 'his', 'her', and\n  'hers'. Here, 'the' is a word, but only when it is at the start of the\n  given word.\n\n  Example:\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog\")\n  3\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog jumps over the lazy dog\")\n  3\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  let lastWord = s.charAt(0);\n  let lastWordIndex = -1;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastWord) {\n      lastWordIndex = i;\n      lastWord = s.charAt(i);\n    }\n    if (lastWordIndex === -1) {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount which takes a string representing\n  a word as input and returns the number of words in the string.\n  Words in this case are 'the', 'a', 'an', 'they', 'his', 'her', and\n  'hers'. Here, 'the' is a word, but only when it is at the start of the\n  given word.\n\n  Example:\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog\")\n  3\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog jumps over the lazy dog\")\n  3\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  let lastWord = s.charAt(0);\n  let lastWordIndex = -1;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastWord) {\n      lastWordIndex = i;\n      lastWord = s.charAt(i);\n    }\n    if (lastWordIndex === -1) {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount which takes a string representing\n  a word as input and returns the number of words in the string.\n  Words in this case are 'the', 'a', 'an', 'they', 'his', 'her', and\n  'hers'. Here, 'the' is a word, but only when it is at the start of the\n  given word.\n\n  Example:\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog\")\n  3\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog jumps over the lazy dog\")\n  3\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  let lastWord = s.charAt(0);\n  let lastWordIndex = -1;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastWord) {\n      lastWordIndex = i;\n      lastWord = s.charAt(i);\n    }\n    if (lastWordIndex === -1) {\n      wordCount++;\n    }\n  }\n  return wordCount;\n};\n\n/*Write a function wordCount which takes a string representing\n  a word as input and returns the number of words in the string.\n  Words in this case are 'the', 'a', 'an', 'they', 'his', 'her', and\n  'hers'. Here, 'the' is a word, but only when it is at the start of the\n  given word.\n\n  Example:\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog\")\n  3\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog jumps over the lazy dog\")\n  3\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  let lastWord = s.charAt(0);\n  let lastWordIndex = -1;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) === lastWord) {\n      lastWordIndex = i;\n      lastWord = s.charAt(i);\n    }\n    if (lastWordIndex === -1) {\n      wordCount++;\n    }\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('');\n  while (digits.length < shift) digits = digits.concat(digits);\n  return digits.slice(shift);\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst parseInt = (str) => {\n  return parseInt(str, 10);\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst parseFloat = (str) => {\n  return parseFloat(str, 10);\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isNumber = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isString = (str) => {\n  return!isNaN(parseFloat((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isBoolean = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isDate = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isRegExp = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isError = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isSymbol = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isMap = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakMap = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetMap = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetMapSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetMap = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetMapSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetSetMap = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetSetSetMapSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetSetSetMapSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetSetSetSetMapSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetSetSetSetSetMapSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetSetSetSetSetMapSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetSetSetSetSetSetMapSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetSetSetSetSetSetMapSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetSetSetSetSetSetMapSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetSetSetSetSetSetMapSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetSetSetSetSetSetSetMapSet = (str) => {\n  return!isNaN(parseInt((str || ''), 10));\n};\n\n/**\n * Converts a string to a number by parsing it into an integer and returning\n * it.\n */\nconst isWeakSetSetSet", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSums", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums2 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums3 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums4 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lowercase characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums5 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums6 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums7 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lowercase characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums8 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums9 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums10 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lowercase characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums11 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums12 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      apples++;\n    } else if (fruit === \"oranges\") {\n      oranges++;\n    } else if (fruit === \"mango\") {\n      mango++;\n    }\n  });\n  total = apples + oranges + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      apples++;\n    } else if (fruit === \"oranges\") {\n      oranges++;\n    } else if (fruit === \"mango\") {\n      mango++;\n    }\n  });\n  total = apples + oranges + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      apples++;\n    } else if (fruit === \"oranges\") {\n      oranges++;\n    } else if (fruit === \"mango\") {\n      mango++;\n    }\n  });\n  total = apples + oranges + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      apples++;\n    } else if (fruit === \"oranges\") {\n      oranges++;\n    } else if (fruit === \"mango\") {\n      mango++;\n    }\n  });\n  total = apples + oranges + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      apples++;\n    } else if (fruit === \"oranges\") {\n      oranges++;\n    } else if (fruit === \"mango\") {\n      mango++;\n    }\n  });\n  total = apples + oranges + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.split(\" \");\n  fruits.forEach((fruit) => {\n    if (fruit === \"apples\") {\n      apples++;\n    } else if (fruit === \"oranges\") {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      min = Math.min(min, arr[i]);\n      max = Math.max(max, arr[i]);\n      minIndex = i;\n      maxIndex = i;\n    }\n  }\n  return [min, minIndex];\n};\n\n// A binary search tree node is a node that can have two children\n// and can have at most one parent.\nclass Node {\n  constructor(value, left, right) {\n    this.value = value;\n    this.left = left;\n    this.right = right;\n  }\n}\n\n// A binary search tree is a tree data structure that can have at most one root.\nclass BinarySearchTree {\n  constructor() {\n    this.root = null;\n  }\n\n  // Insert a node into the tree.\n  insert(value) {\n    const node = new Node(value);\n    if (this.root === null) {\n      this.root = node;\n    } else {\n      this._insert(this.root, node);\n    }\n  }\n\n  // Insert a node into the tree and return the node that has smallest value.\n  _insert(node, node) {\n    if (node === null) {\n      return node;\n    }\n    if (node.value < node.left.value) {\n      node.left = node._insert(node.left, node);\n    } else if (node.value > node.right.value) {\n      node.right = node._insert(node.right, node);\n    }\n    return node;\n  }\n\n  // Return the node that has smallest value.\n  min() {\n    if (this.root === null) {\n      return null;\n    }\n    return this.root.value;\n  }\n\n  // Return the node that has smallest value.\n  max() {\n    if (this.root === null) {\n      return null;\n    }\n    return this.root.value;\n  }\n\n  // Return the node that has smallest value.\n  find(value) {\n    const node = this.find(this.root, value);\n    return node === null? null : node.value;\n  }\n\n  // Return the node that has smallest value.\n  findLeft(value) {\n    const node = this.find(this.root, value);\n    return node === null? null : node.left;\n  }\n\n  // Return the node that has smallest value.\n  findRight(value) {\n    const node = this.find(this.root, value);\n    return node === null? null : node.right;\n  }\n\n  // Return the node that has smallest value.\n  findLeft(value, left) {\n    const node = this.find(this.root, value);\n    return node === null? null : node.left;\n  }\n\n  // Return the node that has smallest value.\n  findRight(value, right) {\n    const node = this.find(this.root, value);\n    return node === null? null : node.right;\n  }\n\n  // Return the node that has smallest value.\n  findLeft(value, left, left) {\n    const node = this.find(this.root, value);\n    return node === null? null : node.left;\n  }\n\n  // Return the node that has smallest value.\n  findRight(value, right, right) {\n    const node = this.find(this.root, value);\n    return node === null? null : node.right;\n  }\n\n  // Return the node that has smallest value.\n  find(value, left, right, left) {\n    if (left === null && right === null) {\n      return null;\n    }\n    if (left === null) {\n      return this.findLeft(value, right);\n    }\n    if (right === null) {\n      return this.findRight(value, left);\n    }\n    if (left.value < right.value) {\n      return this.findLeft(value, left, left);\n    }\n    return this.findRight(value, right, left);\n  }\n\n  // Return the node that has smallest value.\n  find(value, left, right, right, left) {\n    if (left === null && right === null) {\n      return null;\n    }\n    if (left === null) {\n      return this.findLeft(value, right);\n    }\n    if (right === null) {\n      return this.findRight(value, left);\n    }\n    if (left.value < right.value) {\n      return this.findLeft(value, left, left);\n    }\n    return this.findRight(value, right, left);\n  }\n\n  // Return the node that has smallest value.\n  findLeft(value, left, right, left, right) {\n    if (left === null && right === null) {\n      return null;\n    }\n    if (left === null) {\n      return this.findLeft(value, right);\n    }\n    if (right === null) {\n      return this.findRight(value, left);\n    }\n    if (left.value < right.value) {\n      return this.findLeft(value, left, left);\n    }\n    return this.findRight(value, right, left);\n  }\n\n  // Return the node that has smallest value.\n  findRight(value, left, right, left, right) {\n    if (left === null && right === null) {\n      return null;\n    }\n    if (left === null) {\n      return this.findLeft(value, right);\n    }\n    if (right === null) {\n      return this.findRight(value, left);\n    }\n    if (left.value < right.value) {\n      return this.findLeft(value, left, left);\n    }\n    return this.findRight(value, right, left);\n  }\n\n  // Return the node that has smallest value.\n  findLeft(value, left, right, left, right, left) {\n    if (left === null && right === null) {\n      return null;\n    }\n    if (left === null) {\n      return this.findLeft(value, right);\n    }\n    if (right === null) {\n      return this.findRight(value, left);\n    }\n    if (left.value < right.value) {\n      return this.findLeft(value, left, left);\n    }\n    return this.findRight(value, right, left);\n  }\n\n  // Return the node that has smallest value.\n  findRight(value, left, right, left, right, left) {\n    if (left === null && right === null) {\n      return null;\n    }\n    if (left === null) {\n      return this.findLeft(value, right);\n    }\n    if (right === null) {\n      return this.findRight(value, left);\n    }\n    if (left.value < right.value) {\n      return this.findLeft(value, left, left);\n    }\n    return this.findRight(value, right, left);\n  }\n\n  // Return the node that has smallest value.\n  findLeft(value, left, right, left, right, left) {\n    if (left === null && right === null) {\n      return null;\n    }\n    if (left === null) {\n      return this.findLeft(value, right);\n    }\n    if (right === null) {\n      return this.findRight(value, left);\n    }\n    if (left.value < right.value) {\n      return this.findLeft(value, left, left);\n    }\n    return this.findRight(value, right, left);\n  }\n\n  // Return the node that has smallest value.\n  findRight(value, left, right, left, right, left) {\n    if (left === null && right === null) {\n      return null;\n    }\n    if (left === null) {\n      return this.findLeft(value, right);\n    }\n    if (right === null) {\n      return this.findRight(value, left);\n    }\n    if (left.value < right.value) {\n      return this.findLeft(value, left, left);\n    }\n    return this.findRight(value, right, left);\n  }\n\n  // Return the node that has smallest value.\n  findLeft(value, left, right, left, right, left) {\n    if (left === null && right === null) {\n      return null;\n    }\n    if (left === null) {\n      return this.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the smallest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the smallest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the smallest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the smallest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the smallest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let min = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      freq = i;\n    }\n  }\n  return min;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the largest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the smallest integer that is less than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and are of the same length\n * >>> filterBySubstringLength([], 'a')\n * []\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringLength = (strings, substring) => {\n  return strings.filter(string => string.length >= substring.length);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and are of the same length and are of the same type\n * >>> filterBySubstringType([1, 'abc'], 'a')\n * [1, 'abc']\n * >>> filterBySubstringType([1, 'abc'], 'b')\n * []\n */\nconst filterBySubstringType = (strings, substring) => {\n  return strings.filter(string => string.toString().indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and are of the same length and are of the same type and are of the same length\n * >>> filterBySubstringLengthAndType([1, 'abc'], 'a')\n * [1, 'abc']\n * >>> filterBySubstringLengthAndType([1, 'abc'], 'b')\n * []\n */\nconst filterBySubstringLengthAndType = (strings, substring) => {\n  return strings.filter(string => string.toString().length >= substring.length && string.toString().indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and are of the same length and are of the same type and are of the same length\n * >>> filterBySubstringLengthAndTypeAndType([1, 'abc'], 'a')\n * [1, 'abc']\n * >>> filterBySubstringLengthAndTypeAndType([1, 'abc'], 'b')\n * []\n */\nconst filterBySubstringLengthAndTypeAndType = (strings, substring) => {\n  return strings.filter(string => string.toString().length >= substring.length && string.toString().indexOf(substring) > -1 && string.toString().indexOf(substring.toString()) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and are of the same length and are of the same type and are of the same length\n * >>> filterBySubstringLengthAndTypeAndType([1, 'abc'], 'a')\n * [1, 'abc']\n * >>> filterBySubstringLengthAndTypeAndType([1, 'abc'], 'b')\n * []\n */\nconst filterBySubstringLengthAndTypeAndTypeAndType = (strings, substring) => {\n  return strings.filter(string => string.toString().length >= substring.length && string.toString().indexOf(substring) > -1 && string.toString().indexOf(substring.toString()) > -1 && string.toString().indexOf(substring.toString().toString()) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and are of the same length and are of the same type and are of the same length\n * >>> filterBySubstringLengthAndTypeAndTypeAndType([1, 'abc'], 'a')\n * [1, 'abc']\n * >>> filterBySubstringLengthAndTypeAndTypeAndType([1, 'abc'], 'b')\n * []\n */\nconst filterBySubstringLengthAndTypeAndTypeAndTypeAndType = (strings, substring) => {\n  return strings.filter(string => string.toString().length >= substring.length && string.toString().indexOf(substring) > -1 && string.toString().indexOf(substring.toString()) > -1 && string.toString().indexOf(substring.toString().toString()) > -1 && string.toString().indexOf(substring.toString().toString().toString()) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and are of the same length and are of the same type and are of the same length\n * >>> filterBySubstringLengthAndTypeAndTypeAndTypeAndType([1, 'abc'], 'a')\n * [1, 'abc']\n * >>> filterBySubstringLengthAndTypeAndTypeAndTypeAndTypeAndType([1, 'abc'], 'b')\n * []\n */\nconst filterBySubstringLengthAndTypeAndTypeAndTypeAndTypeAndType = (strings, substring) => {\n  return strings.filter(string => string.toString().length >= substring.length && string.toString().indexOf(substring) > -1 && string.toString().indexOf(substring.toString()) > -1 && string.toString().indexOf(substring.toString().toString()) > -1 && string.toString().indexOf(substring.toString().toString().toString()) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and are of the same length and are of the same type and are of the same length\n * >>> filterBySubstringLengthAndTypeAndTypeAndTypeAndTypeAndType([1, 'abc'], 'a')\n * [1, 'abc']\n * >>> filterBySubstringLengthAndTypeAndTypeAndTypeAndTypeAndTypeAndType([1, 'abc'], 'b')\n * []\n */\nconst filterBySubstringLengthAndTypeAndTypeAndTypeAndTypeAndTypeAndType = (strings, substring) => {\n  return strings.filter(string => string.toString().length >= substring.length && string.toString().indexOf(substring) > -1 && string.toString().indexOf(substring.toString()) > -1 && string.toString().indexOf(substring.toString().toString()) > -1 && string.toString().indexOf(substring.toString().toString().toString()) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and are of the same length and are of the same type and are of the same length\n * >>> filterBySubstringLengthAndTypeAndTypeAndTypeAndTypeAndTypeAndType([1, 'abc'], 'a')\n * [1, 'abc']\n * >>> filterBySubstringLengthAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndType([1, 'abc'], 'b')\n * []\n */\nconst filterBySubstringLengthAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndType = (strings, substring) => {\n  return strings.filter(string => string.toString().length >= substring.length && string.toString().indexOf(substring) > -1 && string.toString().indexOf(substring.toString()) > -1 && string.toString().indexOf(substring.toString().toString()) > -1 && string.toString().indexOf(substring.toString().toString().toString()) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n * and are of the same length and are of the same type and are of the same length\n * >>> filterBySubstringLengthAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndType([1, 'abc'], 'a')\n * [1, 'abc']\n * >>> filterBySubstringLengthAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndType([1, 'abc'], 'b')\n * []\n */\nconst filterBySubstringLengthAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAndTypeAnd", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangerSortsLists", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  const sortedLst2 = sortedLst.slice().reverse();\n  return sortedLst2;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order.\n  Sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 1, 2, 3]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedList = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  return sortedLst;\n};\n\n/*\n  Given a list of integers, return list of integers in reverse sorted order.\n  Reverse sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  reverseSortedList([1, 2, 3, 4]) == [3, 2, 1]\n  reverseSortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  reverseSortedList([]) == []\n  */\nconst reverseSortedList = (lst) => {\n  const sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given a list of integers, return list of integers in ascending order.\n  Ascending sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  ascendingList([1, 2, 3, 4]) == [1, 3, 4]\n  ascendingList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  ascendingList([]) == []\n  */\nconst ascendingList = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  return sortedLst;\n};\n\n/*\n  Given a list of integers, return list of integers in descending order.\n  Descending sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  descendingList([1, 2, 3, 4]) == [3, 2, 1]\n  descendingList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  descendingList([]) == []\n  */\nconst descendingList = (lst) => {\n  const sortedLst = lst.sort((a, b) => b - a);\n  return sortedLst;\n};\n\n/*\n  Given a list of integers, return list of integers in ascending order and in reverse sorted order.\n  Ascending sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n  Reverse sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  ascendingAndReverseSortedList([1, 2, 3, 4]) == [1, 3, 4]\n  ascendingAndReverseSortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  ascendingAndReverseSortedList([]) == []\n  */\nconst ascendingAndReverseSortedList = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  const sortedLst2 = sortedLst.slice().reverse();\n  return sortedLst2;\n};\n\n/*\n  Given a list of integers, return list of integers in ascending order and in reverse sorted order.\n  Ascending sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n  Reverse sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  ascendingAndReverseSortedAndSortedList([1, 2, 3, 4]) == [1, 3, 4]\n  ascendingAndReverseSortedAndSortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  ascendingAndReverseSortedAndSortedList([]) == []\n  */\nconst ascendingAndReverseSortedAndSortedList = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  const sortedLst2 = sortedLst.slice().reverse();\n  return sortedLst2;\n};\n\n/*\n  Given a list of integers, return list of integers in ascending order and in reverse sorted order.\n  Ascending sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n  Reverse sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  ascendingAndReverseSortedAndSortedAndSortedList([1, 2, 3, 4]) == [1, 3, 4]\n  ascendingAndReverseSortedAndSortedAndSortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  ascendingAndReverseSortedAndSortedAndSortedList([]) == []\n  */\nconst ascendingAndReverseSortedAndSortedAndSortedList = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  const sortedLst2 = sortedLst.slice().reverse();\n  return sortedLst2;\n};\n\n/*\n  Given a list of integers, return list of integers in ascending order and in reverse sorted order.\n  Ascending sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n  Reverse sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  ascendingAndReverseSortedAndSortedAndSortedAndSortedList([1, 2, 3, 4]) == [1, 3, 4]\n  ascendingAndReverseSortedAndSortedAndSortedAndSortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  ascendingAndReverseSortedAndSortedAndSortedAndSortedList([]) == []\n  */\nconst ascendingAndReverseSortedAndSortedAndSortedAndSortedList = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  const sortedLst2 = sortedLst.slice().reverse();\n  return sortedLst2;\n};\n\n/*\n  Given a list of integers, return list of integers in ascending order and in reverse sorted order.\n  Ascending sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n  Reverse sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  ascendingAndReverseSortedAndSortedAndSortedAndSortedAndSortedList([1, 2, 3, 4]) == [1, 3, 4]\n  ascendingAndReverseSortedAndSortedAndSortedAndSortedAndSortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  ascendingAndReverseSortedAndSortedAndSortedAndSortedAndSortedList([]) == []\n  */\nconst ascendingAndReverseSortedAndSortedAndSortedAndSortedAndSortedList = (lst) => {\n  const sortedLst = lst.sort((a, b) => a - b);\n  const sortedLst2 = sortedLst.slice().reverse();\n  return sortedLst2;\n};\n\n/*\n  Given a list of integers, return list of integers in ascending order and in reverse sorted order.\n  Ascending sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n  Reverse sort is when you start with the minimum value, then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  ascendingAndReverseSortedAndSortedAndSortedAndSortedAndSortedList([1, 2, 3, 4]) == [1, 3, 4]\n  ascendingAndReverseSortedAndSortedAndSortedAndSortedAndSortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  ascendingAndReverseSortedAndSortedAndSortedAndSortedAndSortedAndSortedList([]) == []\n  */\nconst asc", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  const sumA = a + b + c;\n  const sumB = a + c;\n  const sumC = a + b;\n  const sumD = a + c;\n\n  if (sumA > sumB && sumA > sumC && sumA > sumD) {\n    return sumA / 3;\n  } else if (sumB > sumA && sumB > sumC && sumB > sumD) {\n    return sumB / 3;\n  } else if (sumC > sumA && sumC > sumB && sumC > sumD) {\n    return sumC / 3;\n  } else if (sumD > sumA && sumD > sumB && sumD > sumC) {\n    return sumD / 3;\n  } else {\n    return -1;\n  }\n};\n\nconst triangleArea = (triangle) => {\n  const a = trianglesAreas(triangle.a, triangle.b, triangle.c);\n  const b = trianglesAreas(triangle.b, triangle.c, triangle.d);\n  const c = trianglesAreas(triangle.c, triangle.d, triangle.e);\n  const d = trianglesAreas(triangle.d, triangle.e, triangle.f);\n  const e = trianglesAreas(triangle.e, triangle.f, triangle.g);\n  const f = trianglesAreas(triangle.f, triangle.g, triangle.h);\n  const g = trianglesAreas(triangle.g, triangle.h, triangle.i);\n  const h = trianglesAreas(triangle.h, triangle.i, triangle.j);\n  const i = trianglesAreas(triangle.i, triangle.j, triangle.k);\n  const j = trianglesAreas(triangle.j, triangle.k, triangle.l);\n  const k = trianglesAreas(triangle.k, triangle.l, triangle.m);\n  const l = trianglesAreas(triangle.l, triangle.m, triangle.n);\n  const m = trianglesAreas(triangle.m, triangle.n, triangle.o);\n  const n = trianglesAreas(triangle.n, triangle.o, triangle.p);\n  const o = trianglesAreas(triangle.o, triangle.p, triangle.p);\n  const p = trianglesAreas(triangle.p, triangle.p, triangle.q);\n  const q = trianglesAreas(triangle.q, triangle.q, triangle.r);\n  const r = trianglesAreas(triangle.r, triangle.r, triangle.s);\n  const s = trianglesAreas(triangle.s, triangle.s, triangle.t);\n  const t = trianglesAreas(triangle.t, triangle.t, triangle.u);\n  const u = trianglesAreas(triangle.u, triangle.u, triangle.v);\n  const v = trianglesAreas(triangle.v, triangle.v, triangle.w);\n  const w = trianglesAreas(triangle.w, triangle.w, triangle.x);\n  const x = trianglesAreas(triangle.x, triangle.x, triangle.y);\n  const y = trianglesAreas(triangle.y, triangle.y, triangle.z);\n\n  if (a > 0 && b > 0 && c > 0 && d > 0 && e > 0 && f > 0 && g > 0 && h > 0 && i > 0 && j > 0 && k > 0 && l > 0 && m > 0 && n > 0 && o > 0 && p > 0 && q > 0 && r > 0 && s > 0 && t > 0 && u > 0 && v > 0 && w > 0 && x > 0 && y > 0) {\n    return triangleArea(triangle);\n  } else {\n    return -1;\n  }\n};\n\nconst triangleAreaInSquare = (triangle) => {\n  const a = trianglesAreas(triangle.a, triangle.b, triangle.c);\n  const b = trianglesAreas(triangle.b, triangle.c, triangle.d);\n  const c = trianglesAreas(triangle.c, triangle.d, triangle.e);\n  const d = trianglesAreas(triangle.d, triangle.e, triangle.f);\n  const e = trianglesAreas(triangle.e, triangle.f, triangle.g);\n  const f = trianglesAreas(triangle.f, triangle.g, triangle.h);\n  const g = trianglesAreas(triangle.g, triangle.h, triangle.i);\n  const h = trianglesAreas(triangle.h, triangle.i, triangle.j);\n  const i = trianglesAreas(triangle.i, triangle.j, triangle.k);\n  const j = trianglesAreas(triangle.j, triangle.k, triangle.l);\n  const k = trianglesAreas(triangle.k, triangle.l, triangle.m);\n  const l = trianglesAreas(triangle.l, triangle.m, triangle.n);\n  const m = trianglesAreas(triangle.m, triangle.n, triangle.o);\n  const n = trianglesAreas(triangle.n, triangle.o, triangle.p);\n  const o = trianglesAreas(triangle.o, triangle.p, triangle.p);\n  const p = trianglesAreas(triangle.p, triangle.p, triangle.q);\n  const q = trianglesAreas(triangle.q, triangle.q, triangle.r);\n  const r = trianglesAreas(triangle.r, triangle.r, triangle.s);\n  const s = trianglesAreas(triangle.s, triangle.s, triangle.t);\n  const t = trianglesAreas(triangle.t, triangle.t, triangle.u);\n  const u = trianglesAreas(triangle.u, triangle.u, triangle.v);\n  const v = trianglesAreas(triangle.v, triangle.v, triangle.w);\n  const w = trianglesAreas(triangle.w, triangle.w, triangle.x);\n  const x = trianglesAreas(triangle.x, triangle.x, triangle.y);\n  const y = trianglesAreas(triangle.y, triangle.y, triangle.z);\n\n  if (a > 0 && b > 0 && c > 0 && d > 0 && e > 0 && f > 0 && g > 0 && h > 0 && i > 0 && j > 0 && k > 0 && l > 0 && m > 0 && n > 0 && o > 0 && p > 0 && q > 0 && r > 0 && s > 0 && t > 0 && u > 0 && v > 0 && w > 0 && x > 0 && y > 0) {\n    return triangleAreaInSquare(triangle);\n  } else {\n    return -1;\n  }\n};\n\nconst triangleAreaInRectangle = (triangle) => {\n  const a = trianglesAreas(triangle.a, triangle.b, triangle.c);\n  const b = trianglesAreas(triangle.b, triangle.c, triangle.d);\n  const c = trianglesAreas(triangle.c, triangle.d, triangle.e);\n  const d = trianglesAreas(triangle.d, triangle.e, triangle.f);\n  const e = trianglesAreas(triangle.e, triangle.f, triangle.g);\n  const f = trianglesAreas(triangle.f, triangle.g, triangle.h);\n  const g = trianglesAreas(triangle.g, triangle.h, triangle.i);\n  const h = trianglesAreas(triangle.h, triangle.i, triangle.j);\n  const i = trianglesAreas(triangle.i, triangle.j, triangle.k);\n  const j = trianglesAreas(triangle.j, triangle.k, triangle.l);\n  const k = trianglesAreas(triangle.k, triangle.l, triangle.m);\n  const l = trianglesAreas(triangle.l, triangle.m, triangle.n);\n  const m = trianglesAreas(triangle.m, triangle.n, triangle.o);\n  const n = trianglesAreas(triangle.n, triangle.o, triangle.p);\n  const o = trianglesAreas(triangle.o, triangle.p, triangle.p);\n  const p = trianglesAreas(triangle.p, triangle.p, triangle.q);\n  const q = trianglesAreas(triangle.q, triang", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlied", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length < 2) return false;\n  if (q.length === 1) return q[0] === w;\n  if (q[0] === q[1]) return willItFlied(q.slice(1), w);\n  if (q[0] < q[1]) return willItFlied(q.slice(1), w);\n  return true;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 9) ➞ false\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length < 2) return false;\n  if (q.length === 1) return q[0] === w;\n  if (q[0] === q[1]) return willItFlied(q.slice(1), w);\n  if (q[0] < q[1]) return willItFlied(q.slice(1), w);\n  return true;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 9) ➞ false\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length < 2) return false;\n  if (q.length === 1) return q[0] === w;\n  if (q[0] === q[1]) return willItFlied(q.slice(1), w);\n  if (q[0] < q[1]) return willItFlied(q.slice(1), w);\n  return true;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 9) ➞ false\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length < 2) return false;\n  if (q.length === 1) return q[0] === w;\n  if (q[0] === q[1]) return willItFlied(q.slice(1), w);\n  if (q[0] < q[1]) return willItFlied(q.slice(1), w);\n  return true;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 9) ➞ false\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length < 2) return false;\n  if (q.length === 1) return q[0] === w;\n  if (q[0] === q[1]) return willItFlied(q.slice(1), w);\n  if (q[0] < q[1]) return willItFlied(q.slice(1), w);\n  return true;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3, 2, 1], 9) ➞ false\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  if (q.length < 2) return false;\n  if (q.length === 1) return q[0] === w;\n  if (q[0] === q[1]) return willItFlied(q.slice(1), w);\n  if (q[0] < q[1]) return willItFlied(q.slice(1), w);\n  return true;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willIt", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallerChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let minLen = arr.length\n  let minDiff = Infinity\n  let minIndex = -1\n  for (let i = minLen - 1; i >= 0; i--) {\n    if (arr[i]!== arr[i + 1]) {\n      minDiff = Math.min(minDiff, i - minIndex)\n      minIndex = i\n    }\n  }\n  return minDiff\n}\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  biggerChange([1,2,3,5,4,7,9,6]) == 6\n  biggerChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  biggerChange([1, 2, 3, 2, 1]) == 3\n  biggerChange([1, 2, 3, 1, 2]) == 3\n  */\nconst biggerChange = (arr) => {\n  let maxLen = arr.length\n  let maxDiff = Infinity\n  let maxIndex = -1\n  for (let i = maxLen - 1; i >= 0; i--) {\n    if (arr[i]!== arr[i + 1]) {\n      maxDiff = Math.max(maxDiff, i - maxIndex)\n      maxIndex = i\n    }\n  }\n  return maxDiff\n}\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let minLen = arr.length\n  let minDiff = Infinity\n  let minIndex = -1\n  for (let i = minLen - 1; i >= 0; i--) {\n    if (arr[i]!== arr[i + 1]) {\n      minDiff = Math.min(minDiff, i - minIndex)\n      minIndex = i\n    }\n  }\n  return minDiff\n}\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  biggerChange([1,2,3,5,4,7,9,6]) == 6\n  biggerChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  biggerChange([1, 2, 3, 2, 1]) == 3\n  biggerChange([1, 2, 3, 1, 2]) == 3\n  */\nconst biggerChange = (arr) => {\n  let maxLen = arr.length\n  let maxDiff = Infinity\n  let maxIndex = -1\n  for (let i = maxLen - 1; i >= 0; i--) {\n    if (arr[i]!== arr[i + 1]) {\n      maxDiff = Math.max(maxDiff, i - maxIndex)\n      maxIndex = i\n    }\n  }\n  return maxDiff\n}\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let minLen = arr.length\n  let minDiff = Infinity\n  let minIndex = -1\n  for (let i = minLen - 1; i >= 0; i--) {\n    if (arr[i]!== arr[i + 1]) {\n      minDiff = Math.min(minDiff, i - minIndex)\n      minIndex = i\n    }\n  }\n  return minDiff\n}\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  biggerChange([1,2,3,5,4,7,9,6]) == 6\n  biggerChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  biggerChange([1, 2, 3, 2, 1]) == 3\n  biggerChange([1, 2, 3, 1, 2]) == 3\n  */\nconst biggerChange = (arr) => {\n  let maxLen = arr.length\n  let maxDiff = Infinity\n  let maxIndex = -1\n  for (let i = maxLen - 1; i >= 0; i--) {\n    if (arr[i]!== arr[i + 1]) {\n      maxDiff = Math.max(maxDiff, i - maxIndex)\n      maxIndex = i\n    }\n  }\n  return maxDiff\n}\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let minLen = arr.length\n  let minDiff = Infinity\n  let minIndex = -1\n  for (let i = minLen - 1; i >= 0; i--) {\n    if (arr[i]!== arr[i + 1]) {\n      minDiff = Math.min(minDiff, i - minIndex)\n      minIndex = i\n    }\n  }\n  return minDiff\n}\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  biggerChange([1,2,3,5,4,7,9,6]) == 6\n  biggerChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  biggerChange([1, 2, 3, 2, 1]) == 3\n  biggerChange([1, 2, 3, 1, 2]) == 3\n  */\nconst biggerChange = (arr) => {\n  let maxLen = arr.length\n  let maxDiff = Infinity\n  let maxIndex = -1\n  for (let i = maxLen - 1; i >= 0; i--) {\n    if (arr[i]!== arr[i + 1]) {\n      maxDiff = Math.max(maxDiff, i - maxIndex)\n      maxIndex = i\n    }\n  }\n  return maxDiff\n}\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let minLen = arr.length\n  let minDiff = Infinity\n  let minIndex = -1\n  for (let i = minLen - 1; i >= 0; i--) {\n    if (arr[i]!== arr[i + 1]) {\n      minDiff = Math.min(minDiff, i - minIndex)\n      minIndex = i\n    }\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n\n  return lst2.filter(item => item!== '').reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0) < totalChars? lst1 : lst2;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n\n  return lst2.filter(item => item!== '').reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0) > totalChars? lst1 : lst2;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n\n  return lst2.filter(item => item!== '').reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0) === totalChars? lst1 : lst2;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list not equal the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n\n  return lst2.filter(item => item!== '').reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0)!== totalChars? lst1 : lst2;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list between the first and the\n  second list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n\n  return lst2.filter(item => item!== '').reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0) >= totalChars && lst2.filter(item => item!== '').reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0) <= totalChars? lst1 : lst2;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list between the first and the\n  second list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n\n  return lst2.filter(item => item!== '').reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0) >= totalChars && lst2.filter(item => item!== '').reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0) <= totalChars? lst1 : lst2;\n};\n\n/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list between the first and the\n  second list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  for (let i = 2; i <= a; i++) {\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a prime\n  number and  false in other cases.\n  x is a prime number if n%prime=x\n  For example:\n  isPrime(2) => true\n  isPrime(3) => true\n  isPrime(5) => false\n  isPrime(7) => false\n  isPrime(11) => false\n  */\nconst isPrime = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a palindrome\n  number and  false in other cases.\n  x is a palindrome number if n%palindrome=x\n  For example:\n  isPalindrome(2) => true\n  isPalindrome(3) => true\n  isPalindrome(5) => false\n  isPalindrome(7) => false\n  isPalindrome(11) => false\n  */\nconst isPalindrome = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a palindrome\n  number and  false in other cases.\n  x is a palindrome number if n%palindrome=x\n  For example:\n  isPalindrome(2) => true\n  isPalindrome(3) => true\n  isPalindrome(5) => false\n  isPalindrome(7) => false\n  isPalindrome(11) => false\n  */\nconst isPalindromeReverse = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a palindrome\n  number and  false in other cases.\n  x is a palindrome number if n%palindrome=x\n  For example:\n  isPalindrome(2) => true\n  isPalindrome(3) => true\n  isPalindrome(5) => false\n  isPalindrome(7) => false\n  isPalindrome(11) => false\n  */\nconst isPalindromeReverse = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a palindrome\n  number and  false in other cases.\n  x is a palindrome number if n%palindrome=x\n  For example:\n  isPalindrome(2) => true\n  isPalindrome(3) => true\n  isPalindrome(5) => false\n  isPalindrome(7) => false\n  isPalindrome(11) => false\n  */\nconst isPalindromeReverse = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a palindrome\n  number and  false in other cases.\n  x is a palindrome number if n%palindrome=x\n  For example:\n  isPalindrome(2) => true\n  isPalindrome(3) => true\n  isPalindrome(5) => false\n  isPalindrome(7) => false\n  isPalindrome(11) => false\n  */\nconst isPalindromeReverse = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a palindrome\n  number and  false in other cases.\n  x is a palindrome number if n%palindrome=x\n  For example:\n  isPalindrome(2) => true\n  isPalindrome(3) => true\n  isPalindrome(5) => false\n  isPalindrome(7) => false\n  isPalindrome(11) => false\n  */\nconst isPalindromeReverse = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a palindrome\n  number and  false in other cases.\n  x is a palindrome number if n%palindrome=x\n  For example:\n  isPalindrome(2) => true\n  isPalindrome(3) => true\n  isPalindrome(5) => false\n  isPalindrome(7) => false\n  isPalindrome(11) => false\n  */\nconst isPalindromeReverse = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  return true;\n};\n\n/*Your task is to write a function that returns true if a number x is a palindrome\n  number and  false in other cases.\n  x is a palindrome number if n%palindrome=x\n  For example:\n  isPalindrome(2) => true\n  isPalindrome(3) => true\n  isPalindrome(5) => false\n  isPalindrome(7) => false\n  isPalindrome(11) => false\n  */\nconst isPalindromeReverse = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let isCube = true;\n  if (a < 1) {\n    isCube = false;\n  }\n  if (a % 2 === 0) {\n    isCube = false;\n  }\n  return isCube;\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a prime number of the given size.\n  Note: you may assume the input is always valid.\n  Examples:\n  isprime(2) ==> true\n  isprime(3) ==> false\n  isprime(5) ==> false\n  isprime(10) ==> false\n  isprime(100) ==> true\n  isprime(1000) ==> true\n  isprime(10000) ==> false\n  isprime(100000) ==> false\n  isprime(1000000) ==> false\n  isprime(10000000) ==> false\n  isprime(100000000) ==> false\n  isprime(1000000000) ==> false\n  isprime(10000000000) ==> false\n  isprime(100000000000) ==> false\n  isprime(1000000000000) ==> false\n  isprime(10000000000000) ==> false\n  isprime(100000000000000) ==> false\n  isprime(1000000000000000) ==> false\n  isprime(10000000000000000) ==> false\n  isprime(100000000000000000) ==> false\n  isprime(1000000000000000000) ==> false\n  isprime(10000000000000000000) ==> false\n  isprime(100000000000000000000) ==> false\n  isprime(1000000000000000000000) ==> false\n  isprime(10000000000000000000000) ==> false\n  isprime(100000000000000000000000) ==> false\n  isprime(1000000000000000000000000) ==> false\n  isprime(10000000000000000000000000) ==> false\n  isprime(100000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(10000000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(1000000000000000000000000000000000000000000000000000000000000000000) ==> false\n  isprime(100000000000000000000000000", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexesKeys", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n  const hexesKeys = num.split(\"\").map(Number);\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const primesKeys = primes.map(Number);\n  const primesKeysSet = new Set(primesKeys);\n  const primesKeysSetKeys = primesKeys.map(Number);\n  const primesKeysSetKeysSet = new Set(primesKeysSetKeys);\n  const primesKeysSetKeysSetKeys = primesKeysSetKeys.map(Number);\n  const primesKeysSetKeysSetKeysSet = new Set(primesKeysSetKeysSetKeys);\n  const primesKeysSetKeysSetKeysSetKeys = primesKeysSetKeysSetKeys.map(Number);\n  const primesKeysSetKeysSetKeysSetKeysSet = new Set(primesKeysSetKeysSetKeysSetKeys);\n  const primesKeysSetKeysSetKeysSetKeysSetKeys = primesKeysSetKeysSetKeysSetKeys.map(Number);\n  const primesKeysSetKeysSetKeysSetKeysSetKeysSet = new Set(primesKeysSetKeysSetKeysSetKeysSetKeys);\n  const primesKeysSetKeysSetKeysSetKeysSetKeysSetKeys = primesKeysSetKeysSetKeysSetKeysSetKeys.map(Number);\n  const primesKeysSetKeysSetKeysSetKeysSetKeysSetKeysSet = new Set(primesKeysSetKeysSetKeysSetKeysSetKeysSetKeys);\n  const primesKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeys = primesKeysSetKeysSetKeysSetKeysSetKeysSetKeys.map(Number);\n  const primesKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSet = new Set(primesKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeys);\n  const primesKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSet = new Set(primesKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeys);\n  const primesKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeys = primesKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeys;\n  const primesKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeys = primesKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeys;\n  const primesKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSetKeysSet", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalsToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n  let binary = '';\n  let decimalToBinary = parseInt(decimal, 2);\n\n  while (decimalToBinary > 0) {\n    binary += decimalToBinary.toString(2);\n    decimalToBinary = decimalToBinary % 2;\n  }\n\n  return binary;\n};\n\n/*\n  Given a string, convert it to an array. For example,\n  stringToArray(\"\") returns [].\n  stringToArray(\"abc\") returns [\"a\", \"b\", \"c\"].\n  stringToArray(\"ab\") returns [\"a\", \"b\"].\n  stringToArray(\"abc123\") returns [\"a\", \"b\", \"c\", \"123\"].\n  stringToArray(\"abc123def\") returns [\"a\", \"b\", \"c\", \"123\", \"def\"].\n  stringToArray(\"abc123def456\") returns [\"a\", \"b\", \"c\", \"123\", \"def\", \"456\"].\n  stringToArray(\"abc123def456def\") returns [\"a\", \"b\", \"c\", \"123\", \"def\", \"456\", \"def\"].\n  stringToArray(\"abc123def456def456def\") returns [\"a\", \"b\", \"c\", \"123\", \"def\", \"456\", \"def\", \"456\"].\n  stringToArray(\"abc123def456def456def456def\") returns [\"a\", \"b\", \"c\", \"123\", \"def\", \"456\", \"def\", \"456\", \"def\"].\n  stringToArray(\"abc123def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProducts", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a string, return a list of integers representing the decimal digits of the string.\n  >>> decimalToDigits('12')\n  [12, 1, 0]\n  >>> decimalToDigits('123')\n  [3, 1, 2]\n  >>> decimalToDigits('1234')\n  [1234, 0, 1]\n  */\nconst decimalToDigits = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 10));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the binary digits of the string.\n  >>> binaryToDigits('110')\n  [110, 1, 0]\n  >>> binaryToDigits('111')\n  [111, 1, 1]\n  >>> binaryToDigits('1111')\n  [1111, 0, 1]\n  */\nconst binaryToDigits = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 2));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the octal digits of the string.\n  >>> octalToDigits('0111')\n  [0, 1, 11, 1]\n  >>> octalToDigits('01110')\n  [0, 1, 10, 1]\n  >>> octalToDigits('01111')\n  [0, 1, 11, 1]\n  */\nconst octalToDigits = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 8));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the hex digits of the string.\n  >>> hexToDigits('0x111')\n  [11, 1, 1]\n  >>> hexToDigits('0x1110')\n  [11, 10, 1]\n  >>> hexToDigits('0x1111')\n  [11, 11, 1]\n  */\nconst hexToDigits = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 16));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the binary digits of the string in base 10.\n  >>> binaryToBase10('110')\n  [1, 10, 1]\n  >>> binaryToBase10('111')\n  [10, 1, 1]\n  >>> binaryToBase10('1111')\n  [11, 1, 1]\n  */\nconst binaryToBase10 = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 2));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the octal digits of the string in base 10.\n  >>> octalToBase10('0111')\n  [1, 11, 1]\n  >>> octalToBase10('01110')\n  [10, 1, 1]\n  >>> octalToBase10('01111')\n  [11, 1, 1]\n  */\nconst octalToBase10 = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 8));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the hex digits of the string in base 10.\n  >>> hexToBase10('0x111')\n  [11, 1, 1]\n  >>> hexToBase10('0x1110')\n  [10, 1, 1]\n  >>> hexToBase10('0x1111')\n  [11, 1, 1]\n  */\nconst hexToBase10 = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 16));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the decimal digits of the string in base 10.\n  >>> decimalToBase10('12')\n  [12, 1, 0]\n  >>> decimalToBase10('123')\n  [3, 1, 2]\n  >>> decimalToBase10('1234')\n  [1234, 0, 1]\n  */\nconst decimalToBase10 = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 10));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the binary digits of the string in base 10.\n  >>> binaryToBase10('110')\n  [110, 1, 0]\n  >>> binaryToBase10('111')\n  [111, 1, 1]\n  >>> binaryToBase10('1111')\n  [1111, 0, 1]\n  */\nconst binaryToBase10 = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 2));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the octal digits of the string in base 10.\n  >>> octalToBase10('0111')\n  [0, 1, 11, 1]\n  >>> octalToBase10('01110')\n  [0, 1, 10, 1]\n  >>> octalToBase10('01111')\n  [0, 1, 11, 1]\n  */\nconst octalToBase10 = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 8));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the hex digits of the string in base 10.\n  >>> hexToBase10('0x111')\n  [11, 1, 1]\n  >>> hexToBase10('0x1110')\n  [10, 1, 1]\n  >>> hexToBase10('0x1111')\n  [11, 1, 1]\n  */\nconst hexToBase10 = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 16));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the decimal digits of the string in base 10.\n  >>> decimalToBase10('12')\n  [12, 1, 0]\n  >>> decimalToBase10('123')\n  [3, 1, 2]\n  >>> decimalToBase10('1234')\n  [1234, 0, 1]\n  */\nconst decimalToBase10 = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 10));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the binary digits of the string in base 10.\n  >>> binaryToBase10('110')\n  [110, 1, 0]\n  >>> binaryToBase10('111')\n  [111, 1, 1]\n  >>> binaryToBase10('1111')\n  [1111, 0, 1]\n  */\nconst binaryToBase10 = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 2));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the octal digits of the string in base 10.\n  >>> octalToBase10('0111')\n  [0, 1, 11, 1]\n  >>> octalToBase10('01110')\n  [0, 1, 10, 1]\n  >>> octalToBase10('01111')\n  [0, 1, 11, 1]\n  */\nconst octalToBase10 = (str) => {\n  const digits = [];\n  for (let i = 0; i < str.length; i++) {\n    digits.push(parseInt(str[i], 8));\n  }\n  return digits;\n};\n\n/* Given a string, return a list of integers representing the hex digits of the string in base 10.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappiest", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  let isHappy = true;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      isHappy = false;\n      break;\n    }\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  let isHappy = true;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      isHappy = false;\n      break;\n    }\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  let isHappy = true;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      isHappy = false;\n      break;\n    }\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  let isHappy = true;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      isHappy = false;\n      break;\n    }\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  let isHappy = true;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      isHappy = false;\n      break;\n    }\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  let isHappy = true;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      isHappy = false;\n      break;\n    }\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  let isHappy = true;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      isHappy = false;\n      break;\n    }\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  let isHappy = true;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      isHappy = false;\n      break;\n    }\n    if (s.charAt(i) === s.charAt(i + 1)) {\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  let isHappy = true;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (count % 3 === 0) {\n      isHappy = false;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(parseFloat);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArraySum = gradesArray.reduce((a, b) => a + b, 0);\n  const gradesArrayMean = gradesArraySum / gradesArrayLength;\n  const gradesArrayVariance = gradesArraySum / gradesArrayLength - gradesArrayMean * gradesArrayMean;\n  const gradesArrayStandardDeviation = Math.sqrt(gradesArrayVariance);\n  const gradesArrayVariancePercentage = gradesArrayVariance / gradesArrayLength;\n  const gradesArrayStandardDeviationPercentage = gradesArrayStandardDeviation * 100;\n  const gradesArrayPercentage = gradesArrayVariancePercentage * 100;\n  const gradesArrayLetterGrades = gradesArray.map((grade, index) => {\n    const letterGrade = gradesArray[index];\n    const letterGradePercentage = gradesArrayPercentage[index];\n    const letterGradeVariance = gradesArrayVariancePercentage[index];\n    const letterGradeStandardDeviation = gradesArrayStandardDeviationPercentage[index];\n    const letterGradeVariancePercentage = gradesArrayVariancePercentage * 100;\n    const letterGradeStandardDeviationPercentage = letterGradeStandardDeviation * 100;\n    const letterGradeVariancePercentage = letterGradeVariancePercentage * 100;\n    const letterGradeLetterGrade = letterGrade + letterGradeVariance + letterGradeStandardDeviation + letterGradeVariancePercentage;\n    return letterGradeLetterGrade;\n  });\n  return gradesArrayLetterGrades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(parseFloat);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArraySum = gradesArray.reduce((a, b) => a + b, 0);\n  const gradesArrayMean = gradesArraySum / gradesArrayLength;\n  const gradesArrayVariance = gradesArraySum / gradesArrayLength - gradesArrayMean * gradesArrayMean;\n  const gradesArrayStandardDeviation = Math.sqrt(gradesArrayVariance);\n  const gradesArrayVariancePercentage = gradesArrayVariance / gradesArrayLength;\n  const gradesArrayStandardDeviationPercentage = gradesArrayStandardDeviation * 100;\n  const gradesArrayPercentage = gradesArrayVariancePercentage * 100;\n  const gradesArrayLetterGrades = gradesArray.map((grade, index) => {\n    const letterGrade = gradesArray[index];\n    const letterGradePercentage = gradesArrayPercentage[index];\n    const letterGradeVariance = gradesArrayVariancePercentage[index];\n    const letterGradeStandardDeviation = gradesArrayStandardDeviationPercentage[index];\n    const letterGradeVariancePercentage = gradesArrayVariancePercentage * 100;\n    const letterGradeStandardDeviationPercentage = letterGradeStandardDeviation * 100;\n    const letterGradeVariancePercentage = letterGradeVariancePercentage * 100;\n    const letterGradeLetterGrade = letterGrade + letterGradeVariance + letterGradeStandardDeviation + letterGradeVariancePercentage;\n    return letterGradeLetterGrade;\n  });\n  return gradesArrayLetterGrades;\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map(parseFloat);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArraySum = gradesArray.reduce((a, b) => a + b, 0);\n  const gradesArrayMean = gradesArraySum / gradesArrayLength;\n  const gradesArrayVariance = gradesArraySum / gradesArrayLength - gradesArrayMean * gradesArrayMean;\n  const gradesArrayStandardDeviation = Math.sqrt(gradesArrayVariance);\n  const gradesArrayVariancePercentage = gradesArrayVariance / gradesArrayLength;\n  const gradesArrayStandardDeviationPercentage = gradesArrayStandardDeviation * 100;\n  const gradesArrayPercentage = gradesArrayVariancePercentage * 100;\n  const gradesArrayLetterGrades = gradesArray.map((grade, index) => {\n    const letterGrade = gradesArray[index];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  palindrome('Hello') == true\n  palindrome('kittens') == true\n  palindrome('kittens') == false\n  */\nconst palindrome = (string) => {\n  let isPalindrome = true;\n  let length = string.length;\n  for (let i = length - 1; i >= 0; i--) {\n    if (string[i]!== string[length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  reverse('Hello') == true\n  reverse('kittens') == true\n  reverse('kittens') == false\n  */\nconst reverse = (string) => {\n  let isReverse = true;\n  let length = string.length;\n  for (let i = length - 1; i >= 0; i--) {\n    if (string[i]!== string[length - i - 1]) {\n      isReverse = false;\n      break;\n    }\n  }\n  return isReverse;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  reverse('Hello') == true\n  reverse('kittens') == true\n  reverse('kittens') == false\n  */\nconst isPalindrome = (string) => {\n  let isPalindrome = true;\n  let length = string.length;\n  for (let i = length - 1; i >= 0; i--) {\n    if (string[i]!== string[length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  reverse('Hello') == true\n  reverse('kittens') == true\n  reverse('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let isPalindrome = true;\n  let length = string.length;\n  for (let i = length - 1; i >= 0; i--) {\n    if (string[i]!== string[length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  reverse('Hello') == true\n  reverse('kittens') == true\n  reverse('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let isPalindrome = true;\n  let length = string.length;\n  for (let i = length - 1; i >= 0; i--) {\n    if (string[i]!== string[length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  reverse('Hello') == true\n  reverse('kittens') == true\n  reverse('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let isPalindrome = true;\n  let length = string.length;\n  for (let i = length - 1; i >= 0; i--) {\n    if (string[i]!== string[length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  reverse('Hello') == true\n  reverse('kittens') == true\n  reverse('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let isPalindrome = true;\n  let length = string.length;\n  for (let i = length - 1; i >= 0; i--) {\n    if (string[i]!== string[length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  reverse('Hello') == true\n  reverse('kittens') == true\n  reverse('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let isPalindrome = true;\n  let length = string.length;\n  for (let i = length - 1; i >= 0; i--) {\n    if (string[i]!== string[length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  reverse('Hello') == true\n  reverse('kittens') == true\n  reverse('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let isPalindrome = true;\n  let length = string.length;\n  for (let i = length - 1; i >= 0; i--) {\n    if (string[i]!== string[length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  reverse('Hello') == true\n  reverse('kittens') == true\n  reverse('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let isPalindrome = true;\n  let length = string.length;\n  for (let i = length - 1; i >= 0; i--) {\n    if (string[i]!== string[length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  reverse('Hello') == true\n  reverse('kittens') == true\n  reverse('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let isPalindrome = true;\n  let length = string.length;\n  for (let i = length - 1; i >= 0; i--) {\n    if (string[i]!== string[length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*Write a function that takes a string and returns true if the string\n  is a palindrome or false otherwise\n  Examples\n  reverse('Hello') == true\n  reverse('kittens') == true\n  reverse('kittens') == false\n  */\nconst isPalindromeReverse = (string) => {\n  let isPalindrome = true;\n  let length = string.length;\n  for (let i = length - 1; i >= 0; i--) {\n    if (string[i]!== string[length - i - 1]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst endOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst endZeroStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endZeroEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst endOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endZeroStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst endZeroEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst endOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endZeroStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst endZeroEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = 0;\n  \n  for(let i = N; i >= 0; i--) {\n    digit = parseInt(i / Math.pow(10, digit));\n    binary = binary + digit.toString(2);\n    sum = sum + digit;\n  }\n  \n  return binary;\n};\n\n/*Given a positive integer N, return the total sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  let digit = 0;\n  \n  for(let i = N; i >= 0; i--) {\n    digit = parseInt(i / Math.pow(10, digit));\n    decimal = decimal + digit.toString(10);\n    sum = sum + digit;\n  }\n  \n  return decimal;\n};\n\n/*Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let digit = 0;\n  \n  for(let i = N; i >= 0; i--) {\n    digit = parseInt(i / Math.pow(10, digit));\n    hexadecimal = hexadecimal + digit.toString(16);\n    sum = sum + digit;\n  }\n  \n  return hexadecimal;\n};\n\n/*Given a positive integer N, return the total sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  let digit = 0;\n  \n  for(let i = N; i >= 0; i--) {\n    digit = parseInt(i / Math.pow(10, digit));\n    octal = octal + digit.toString(8);\n    sum = sum + digit;\n  }\n  \n  return octal;\n};\n\n/*Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let digit = 0;\n  \n  for(let i = N; i >= 0; i--) {\n    digit = parseInt(i / Math.pow(10, digit));\n    hexadecimal = hexadecimal + digit.toString(16);\n    sum = sum + digit;\n  }\n  \n  return hexadecimal;\n};\n\n/*Given a positive integer N, return the total sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let octal = \"\";\n  let digit = 0;\n  \n  for(let i = N; i >= 0; i--) {\n    digit = parseInt(i / Math.pow(10, digit));\n    octal = octal + digit.toString(8);\n    sum = sum + digit;\n  }\n  \n  return octal;\n};\n\n/*Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let hexadecimal = \"\";\n  let digit = 0;\n  \n  for(let i = N; i >= 0; i--) {\n    digit = parseInt(i / Math.pow(10, digit));\n    hexadecimal = hexadecimal + digit.toString(16);\n    sum = sum + digit;\n  }\n  \n  return hexadecimal;\n};\n\n/*Given a positive integer N, return the total sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let decimal = \"\";\n  let digit = 0;\n  \n  for(let i = N; i >= 0; i--) {\n    digit = parseInt(i / Math.pow(10, digit));\n    decimal = decimal + digit.toString(10);\n    sum = sum + digit;\n  }\n  \n  return decimal;\n};\n\n/*Given a positive integer N, return the total sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n  let even = 0;\n  let odd = 0;\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenArr = [];\n  let oddArr = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenArr[index] = item;\n      evenIndex++;\n    } else {\n      oddArr[index] = item;\n      oddIndex++;\n    }\n  });\n  evenArr.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  });\n  return evenArr[evenIndex] + oddArr[oddIndex];\n};\n\n/*Given a non-empty list of integers lst. removing all the even elements that are at odd indices..\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removing = (lst) => {\n  let even = 0;\n  let odd = 0;\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenArr = [];\n  let oddArr = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenArr[index] = item;\n      evenIndex++;\n    } else {\n      oddArr[index] = item;\n      oddIndex++;\n    }\n  });\n  evenArr.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even--;\n    } else {\n      odd--;\n    }\n  });\n  return evenArr[evenIndex] + oddArr[oddIndex];\n};\n\n/*Given a non-empty list of integers lst. removing all the even elements that are at odd indices..\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removingEven = (lst) => {\n  let even = 0;\n  let odd = 0;\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenArr = [];\n  let oddArr = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenArr[index] = item;\n      evenIndex++;\n    } else {\n      oddArr[index] = item;\n      oddIndex++;\n    }\n  });\n  evenArr.forEach((item, index) => {\n    if (index % 2 === 0) {\n      even--;\n    } else {\n      odd--;\n    }\n  });\n  return evenArr[evenIndex] + oddArr[oddIndex];\n};\n\n/*Given a non-empty list of integers lst. removing all the odd elements that are at even indices..\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removingOdd = (lst, even) => {\n  let even = 0;\n  let odd = 0;\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenArr = [];\n  let oddArr = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenArr[index] = item;\n      evenIndex++;\n    } else {\n      oddArr[index] = item;\n      oddIndex++;\n    }\n  });\n  evenArr.forEach((item, index) => {\n    if (index % 2 === even) {\n      even++;\n    } else {\n      odd++;\n    }\n  });\n  return evenArr[evenIndex] + oddArr[oddIndex];\n};\n\n/*Given a non-empty list of integers lst. removing all the even elements that are at odd indices..\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removingEvenOdd = (lst, even) => {\n  let even = 0;\n  let odd = 0;\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenArr = [];\n  let oddArr = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenArr[index] = item;\n      evenIndex++;\n    } else {\n      oddArr[index] = item;\n      oddIndex++;\n    }\n  });\n  evenArr.forEach((item, index) => {\n    if (index % 2 === even) {\n      even--;\n    } else {\n      odd--;\n    }\n  });\n  return evenArr[evenIndex] + oddArr[oddIndex];\n};\n\n/*Given a non-empty list of integers lst. removing all the even elements that are at odd indices..\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removingEvenOddEven = (lst) => {\n  let even = 0;\n  let odd = 0;\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenArr = [];\n  let oddArr = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenArr[index] = item;\n      evenIndex++;\n    } else {\n      oddArr[index] = item;\n      oddIndex++;\n    }\n  });\n  evenArr.forEach((item, index) => {\n    if (index % 2 === even) {\n      even--;\n    } else {\n      odd--;\n    }\n  });\n  return evenArr[evenIndex] + oddArr[oddIndex];\n};\n\n/*Given a non-empty list of integers lst. removing all the even elements that are at odd indices..\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removingEvenOddOddEven = (lst) => {\n  let even = 0;\n  let odd = 0;\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenArr = [];\n  let oddArr = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenArr[index] = item;\n      evenIndex++;\n    } else {\n      oddArr[index] = item;\n      oddIndex++;\n    }\n  });\n  evenArr.forEach((item, index) => {\n    if (index % 2 === even) {\n      even--;\n    } else {\n      odd--;\n    }\n  });\n  return evenArr[evenIndex] + oddArr[oddIndex];\n};\n\n/*Given a non-empty list of integers lst. removing all the even elements that are at odd indices..\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removingEvenOddOddOddEven = (lst) => {\n  let even = 0;\n  let odd = 0;\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenArr = [];\n  let oddArr = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenArr[index] = item;\n      evenIndex++;\n    } else {\n      oddArr[index] = item;\n      oddIndex++;\n    }\n  });\n  evenArr.forEach((item, index) => {\n    if (index % 2 === even) {\n      even--;\n    } else {\n      odd--;\n    }\n  });\n  return evenArr[evenIndex] + oddArr[oddIndex];\n};\n\n/*Given a non-empty list of integers lst. removing all the even elements that are at odd indices..\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removingEvenOddOddOddOddEven = (lst) => {\n  let even = 0;\n  let odd = 0;\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenArr = [];\n  let oddArr = [];\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      evenArr[index] = item;\n      evenIndex++;\n    } else {\n      oddArr[index] = item;\n      oddIndex++;\n    }\n  });\n  evenArr.forEach((item, index) => {\n    if (index % 2 === even) {\n      even--;\n    } else {\n      odd--;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antisShuffles", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let arr = s.split(' ');\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let newWord = '';\n    for (let j = 0; j < arr[i].length; j++) {\n      let charVal = arr[i][j];\n      if (charVal >= 'a' && charVal <= 'z') {\n        newWord += charVal;\n      } else if (charVal >= 'A' && charVal <= 'Z') {\n        newWord += charVal.toUpperCase();\n      } else {\n        newWord +='';\n      }\n    }\n    newArr.push(newWord);\n  }\n  return newArr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let arr = s.split(' ');\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let newWord = '';\n    for (let j = 0; j < arr[i].length; j++) {\n      let charVal = arr[i][j];\n      if (charVal >= 'a' && charVal <= 'z') {\n        newWord += charVal;\n      } else if (charVal >= 'A' && charVal <= 'Z') {\n        newWord += charVal.toUpperCase();\n      } else {\n        newWord +='';\n      }\n    }\n    newArr.push(newWord);\n  }\n  return newArr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let arr = s.split(' ');\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let newWord = '';\n    for (let j = 0; j < arr[i].length; j++) {\n      let charVal = arr[i][j];\n      if (charVal >= 'a' && charVal <= 'z') {\n        newWord += charVal;\n      } else if (charVal >= 'A' && charVal <= 'Z') {\n        newWord += charVal.toUpperCase();\n      } else {\n        newWord +='';\n      }\n    }\n    newArr.push(newWord);\n  }\n  return newArr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let arr = s.split(' ');\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let newWord = '';\n    for (let j = 0; j < arr[i].length; j++) {\n      let charVal = arr[i][j];\n      if (charVal >= 'a' && charVal <= 'z') {\n        newWord += charVal;\n      } else if (charVal >= 'A' && charVal <= 'Z') {\n        newWord += charVal.toUpperCase();\n      } else {\n        newWord +='';\n      }\n    }\n    newArr.push(newWord);\n  }\n  return newArr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let arr = s.split(' ');\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let newWord = '';\n    for (let j = 0; j < arr[i].length; j++) {\n      let charVal = arr[i][j];\n      if (charVal >= 'a' && charVal <= 'z') {\n        newWord += charVal;\n      } else if (charVal >= 'A' && charVal <= 'Z') {\n        newWord += charVal.toUpperCase();\n      } else {\n        newWord +='';\n      }\n    }\n    newArr.push(newWord);\n  }\n  return newArr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let arr = s.split(' ');\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let newWord = '';\n    for (let j = 0; j < arr[i].length; j++) {\n      let charVal = arr[i][j];\n      if (charVal >= 'a' && charVal <= 'z') {\n        newWord += charVal;\n      } else if (charVal >= 'A' && charVal <= 'Z') {\n        newWord += charVal.toUpperCase();\n      } else {\n        newWord +='';\n      }\n    }\n    newArr.push(newWord);\n  }\n  return newArr.join(' ');\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRows", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const result = []\n  let row = 0\n  let col = 0\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row, col])\n      col++\n    } else {\n      row++\n      col = 0\n    }\n  }\n  result.sort((a, b) => b[1] - a[1])\n  return result\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCols = (lst, x) => {\n  const result = []\n  let row = 0\n  let col = 0\n  while (col < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([col, row])\n      row++\n    } else {\n      col++\n      row = 0\n    }\n  }\n  result.sort((a, b) => a[1] - b[1])\n  return result\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowsAndCols = (lst, x) => {\n  const result = []\n  let row = 0\n  let col = 0\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row, col])\n      col++\n    } else {\n      row++\n      col = 0\n    }\n  }\n  result.sort((a, b) => b[1] - a[1])\n  return result\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRowsAndCols([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowsAndCols([], 1) == []\n  getRowsAndCols([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowsAndColsAndRows = (lst, x) => {\n  const result = []\n  let row = 0\n  let col = 0\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row, col])\n      col++\n    } else {\n      row++\n      col = 0\n    }\n  }\n  result.sort((a, b) => b[1] - a[1])\n  return result\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRowsAndColsAndRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowsAndColsAndRows([], 1) == []\n  getRowsAndColsAndRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowsAndColsAndRowsAndCols = (lst, x) => {\n  const result = []\n  let row = 0\n  let col = 0\n  while (col < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([col, row])\n      row++\n    } else {\n      col++\n      row = 0\n    }\n  }\n  result.sort((a, b) => a[1] - b[1])\n  return result\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRowsAndColsAndRowsAndCols([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRowsAndColsAndRowsAndCols([], 1) == []\n  getRowsAndColsAndRowsAndCols([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowsAndColsAndRowsAndColsAndRowsAndCols = (lst, x) => {\n  const result = []\n  let row = 0\n  let col = 0\n  while (col < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([col, row])\n      row++\n    } else {\n      col++\n      row = 0\n    }\n  }\n  result.sort((a, b) => a[1] - b[1])\n  return result\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, un", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  return sortedArray;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is greater than the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findGreaterThan([]) => -1\n  * findGreaterThan([5]) => 4\n  * findGreaterThan([2, 4, 3, 0, 1, 5]) => 2\n  * findGreaterThan([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findGreaterThan = (array) => {\n  let index = -1;\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum > index) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is less than the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findLessThan([]) => -1\n  * findLessThan([5]) => 4\n  * findLessThan([2, 4, 3, 0, 1, 5]) => 0\n  * findLessThan([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findLessThan = (array) => {\n  let index = -1;\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum < index) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is equal to the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findEqual([]) => -1\n  * findEqual([5]) => 4\n  * findEqual([2, 4, 3, 0, 1, 5]) => 2\n  * findEqual([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findEqual = (array) => {\n  let index = -1;\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum === index) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is less than or equal to the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findLessOrEqual([]) => -1\n  * findLessOrEqual([5]) => 4\n  * findLessOrEqual([2, 4, 3, 0, 1, 5]) => 0\n  * findLessOrEqual([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findLessOrEqual = (array) => {\n  let index = -1;\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum < index) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is greater than or equal to the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findGreaterOrEqual([]) => -1\n  * findGreaterOrEqual([5]) => 4\n  * findGreaterOrEqual([2, 4, 3, 0, 1, 5]) => 2\n  * findGreaterOrEqual([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findGreaterOrEqual = (array) => {\n  let index = -1;\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum > index) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is equal to the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findEqual([]) => -1\n  * findEqual([5]) => 4\n  * findEqual([2, 4, 3, 0, 1, 5]) => 2\n  * findEqual([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findEqualOrEqual = (array) => {\n  let index = -1;\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum === index) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is greater than the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findGreaterThan([]) => -1\n  * findGreaterThan([5]) => 4\n  * findGreaterThan([2, 4, 3, 0, 1, 5]) => 2\n  * findGreaterThan([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findGreaterThanOrEqual = (array) => {\n  let index = -1;\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum > index) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is less than the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findLessThan([]) => -1\n  * findLessThan([5]) => 4\n  * findLessThan([2, 4, 3, 0, 1, 5]) => 0\n  * findLessThan([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findLessThanOrEqual = (array) => {\n  let index = -1;\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum < index) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is equal to the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findEqual([]) => -1\n  * findEqual([5]) => 4\n  * findEqual([2, 4, 3, 0, 1, 5]) => 2\n  * findEqual([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findEqualOrEqual = (array) => {\n  let index = -1;\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum === index) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is greater than or equal to the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findGreaterOrEqual([]) => -1\n  * findGreaterOrEqual([5]) => 4\n  * findGreaterOrEqual([2, 4, 3, 0, 1, 5]) => 2\n  * findGreaterOrEqual([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findGreaterOrEqual = (array) => {\n  let index = -1;\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum > index) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is less than the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findLessThan([]) => -1\n  * findLessThan([5]) => 4\n  * findLessThan([2, 4, 3, 0, 1, 5]) => 0\n  * findLessThan([2, 4, 3, 0, 1, 5, 6]) => 6\n  */\nconst findLessThanOrEqual = (array) => {\n  let index = -1;\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (sum < index) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/**\n * Given an array of non-negative integers, return the first index value that is equal to the given value.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * findEqual([]) => -1\n  * find", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = s.length;\n  for (let i = 0; i < len; i++) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) + 2];\n  }\n  return rotated;\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = s.length;\n  for (let i = 0; i < len; i++) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) - 2];\n  }\n  return rotated;\n}\n\n/*Create a function trim that takes a string as an argument and\n  returns a string trimmed from the beginning and end of the string.\n  For example:\n  trim('   ') returns' '\n  trim('  hello') returns 'hello'\n  trim('  hello  ') returns 'hello'\n  trim('  hello  hello') returns 'hello'\n  */\nconst trim = s => {\n  let trimmed = s.trim();\n  return trimmed;\n}\n\n/*Create a function toLowerCase that takes a string as an argument and\n  returns a string converted to lowercase.\n  For example:\n  toLowerCase('hello') returns 'hello'\n  toLowerCase('hello  ') returns 'hello'\n  toLowerCase('hello  hello') returns 'hello'\n  */\nconst toLowerCase = s => {\n  let lowercase = s.toLowerCase();\n  return lowercase;\n}\n\n/*Create a function toUpperCase that takes a string as an argument and\n  returns a string converted to uppercase.\n  For example:\n  toUpperCase('hello') returns 'HELLO'\n  toUpperCase('hello  ') returns 'HELLO'\n  toUpperCase('hello  hello') returns 'HELLO'\n  */\nconst toUpperCase = s => {\n  let uppercase = s.toUpperCase();\n  return uppercase;\n}\n\n/*Create a function toCamelCase that takes a string as an argument and\n  returns a string converted to camelCase.\n  For example:\n  toCamelCase('hello') returns 'hello'\n  toCamelCase('hello  ') returns 'hello'\n  toCamelCase('hello  hello') returns 'hello'\n  */\nconst toCamelCase = s => {\n  let camelCase = s.charAt(0).toUpperCase() + s.slice(1);\n  return camelCase;\n}\n\n/*Create a function toPascalCase that takes a string as an argument and\n  returns a string converted to PascalCase.\n  For example:\n  toPascalCase('hello') returns 'Hello'\n  toPascalCase('hello  ') returns 'Hello'\n  toPascalCase('hello  hello') returns 'Hello'\n  */\nconst toPascalCase = s => {\n  let pascalCase = s.charAt(0).toUpperCase() + s.slice(1);\n  return pascalCase;\n}\n\n/*Create a function toTitle that takes a string as an argument and\n  returns a string converted to title.\n  For example:\n  toTitle('hello') returns 'Hello'\n  toTitle('hello  ') returns 'Hello'\n  toTitle('hello  hello') returns 'Hello'\n  */\nconst toTitle = s => {\n  let title = s.charAt(0).toUpperCase() + s.slice(1);\n  return title;\n}\n\n/*Create a function toCapitalize that takes a string as an argument and\n  returns a string converted to capitalize.\n  For example:\n  toCapitalize('hello') returns 'Hello'\n  toCapitalize('hello  ') returns 'Hello'\n  toCapitalize('hello  hello') returns 'Hello'\n  */\nconst toCapitalize = s => {\n  let capitalize = s.charAt(0).toUpperCase() + s.slice(1);\n  return capitalize;\n}\n\n/*Create a function toPascalCase that takes a string as an argument and\n  returns a string converted to PascalCase.\n  For example:\n  toPascalCase('hello') returns 'Hello'\n  toPascalCase('hello  ') returns 'Hello'\n  toPascalCase('hello  hello') returns 'Hello'\n  */\nconst toPascalCase = s => {\n  let pascalCase = s.charAt(0).toUpperCase() + s.slice(1);\n  return pascalCase;\n}\n\n/*Create a function toTitle that takes a string as an argument and\n  returns a string converted to title.\n  For example:\n  toTitle('hello') returns 'Hello'\n  toTitle('hello  ') returns 'Hello'\n  toTitle('hello  hello') returns 'Hello'\n  */\nconst toTitle = s => {\n  let title = s.charAt(0).toUpperCase() + s.slice(1);\n  return title;\n}\n\n/*Create a function toCapitalize that takes a string as an argument and\n  returns a string converted to capitalize.\n  For example:\n  toCapitalize('hello') returns 'Hello'\n  toCapitalize('hello  ') returns 'Hello'\n  toCapitalize('hello  hello') returns 'Hello'\n  */\nconst toCapitalize = s => {\n  let capitalize = s.charAt(0).toUpperCase() + s.slice(1);\n  return capitalize;\n}\n\n/*Create a function toPascalCase that takes a string as an argument and\n  returns a string converted to PascalCase.\n  For example:\n  toPascalCase('hello') returns 'Hello'\n  toPascalCase('hello  ') returns 'Hello'\n  toPascalCase('hello  hello') returns 'Hello'\n  */\nconst toPascalCase = s => {\n  let pascalCase = s.charAt(0).toUpperCase() + s.slice(1);\n  return pascalCase;\n}\n\n/*Create a function toTitle that takes a string as an argument and\n  returns a string converted to title.\n  For example:\n  toTitle('hello') returns 'Hello'\n  toTitle('hello  ') returns 'Hello'\n  toTitle('hello  hello') returns 'Hello'\n  */\nconst toTitle = s => {\n  let title = s.charAt(0).toUpperCase() + s.slice(1);\n  return title;\n}\n\n/*Create a function toCapitalize that takes a string as an argument and\n  returns a string converted to capitalize.\n  For example:\n  toCapitalize('hello') returns 'Hello'\n  toCapitalize('hello  ') returns 'Hello'\n  toCapitalize('hello  hello') returns 'Hello'\n  */\nconst toCapitalize = s => {\n  let capitalize = s.charAt(0).toUpperCase() + s.slice(1);\n  return capitalize;\n}\n\n/*Create a function toPascalCase that takes a string as an argument and\n  returns a string converted to PascalCase.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n// Given a list of integers, generate a list of rolling minimum element found until given moment\n// in the sequence.\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      result.push(min);\n    }\n  }\n  return result;\n};\n\n// Given a list of integers, generate a list of rolling sum element found until given moment\n// in the sequence.\nconst rollingSum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum > 0) {\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\n// Given a list of integers, generate a list of rolling product element found until given moment\n// in the sequence.\nconst rollingProduct = (numbers) => {\n  const result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product > 1) {\n      result.push(product);\n    }\n  }\n  return result;\n};\n\n// Given a list of integers, generate a list of rolling sum element found until given moment\n// in the sequence.\nconst rollingSumOf = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum > 0) {\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\n// Given a list of integers, generate a list of rolling product element found until given moment\n// in the sequence.\nconst rollingProductOf = (numbers) => {\n  const result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product > 1) {\n      result.push(product);\n    }\n  }\n  return result;\n};\n\n// Given a list of integers, generate a list of rolling sum element found until given moment\n// in the sequence.\nconst rollingSumOfAll = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum > 0) {\n      result.push(sum);\n    }\n  }\n  return result;\n};\n\n// Given a list of integers, generate a list of rolling product element found until given moment\n// in the sequence.\nconst rollingProductOfAll = (numbers) => {\n  const result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product > 1) {\n      result.push(product);\n    }\n  }\n  return result;\n};\n\n// Given a list of integers, generate a list of rolling sum element found until given moment\n// in the sequence.\nconst rollingSumOfAllButLast = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum > 0) {\n      result.push(sum);\n    }\n  }\n  return result.slice(0, -1);\n};\n\n// Given a list of integers, generate a list of rolling product element found until given moment\n// in the sequence.\nconst rollingProductOfAllButLast = (numbers) => {\n  const result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product > 1) {\n      result.push(product);\n    }\n  }\n  return result.slice(0, -1);\n};\n\n// Given a list of integers, generate a list of rolling sum element found until given moment\n// in the sequence.\nconst rollingSumOfAllButLastOf = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum > 0) {\n      result.push(sum);\n    }\n  }\n  return result.slice(0, -1);\n};\n\n// Given a list of integers, generate a list of rolling product element found until given moment\n// in the sequence.\nconst rollingProductOfAllButLastOf = (numbers) => {\n  const result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product > 1) {\n      result.push(product);\n    }\n  }\n  return result.slice(0, -1);\n};\n\n// Given a list of integers, generate a list of rolling sum element found until given moment\n// in the sequence.\nconst rollingSumOfAllButLastOfAll = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum > 0) {\n      result.push(sum);\n    }\n  }\n  return result.slice(0, -1);\n};\n\n// Given a list of integers, generate a list of rolling product element found until given moment\n// in the sequence.\nconst rollingProductOfAllButLastOfAll = (numbers) => {\n  const result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product > 1) {\n      result.push(product);\n    }\n  }\n  return result.slice(0, -1);\n};\n\n// Given a list of integers, generate a list of rolling sum element found until given moment\n// in the sequence.\nconst rollingSumOfAllButLastOfAllButLast = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum > 0) {\n      result.push(sum);\n    }\n  }\n  return result.slice(0, -1);\n};\n\n// Given a list of integers, generate a list of rolling product element found until given moment\n// in the sequence.\nconst rollingProductOfAllButLastOfAllButLast = (numbers) => {\n  const result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product > 1) {\n      result.push(product);\n    }\n  }\n  return result.slice(0, -1);\n};\n\n// Given a list of integers, generate a list of rolling sum element found until given moment\n// in the sequence.\nconst rollingSumOfAllButLastOfAllButLastOf = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum > 0) {\n      result.push(sum);\n    }\n  }\n  return result.slice(0, -1);\n};\n\n// Given a list of integers, generate a list of rolling product element found until given moment\n// in the sequence.\nconst rollingProductOfAllButLastOfAllButLastOf = (numbers) => {\n  const result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product > 1) {\n      result.push(product);\n    }\n  }\n  return result.slice(0, -1);\n};\n\n// Given a list of integers, generate a list of rolling sum element found until given moment\n// in the sequence.\nconst rollingSumOfAllButLastOfAllButLastOfAllButLast = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    if (sum > 0) {\n      result.push(sum);\n    }\n  }\n  return result.slice(0, -1);\n};\n\n// Given a list of integers, generate a list of rolling product element found until given moment\n// in the sequence.\nconst rollingProductOfAllButLastOfAllButLastOfAllButLast = (numbers) => {\n  const result = [];\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n    if (product > 1) {\n      result.push(product);\n    }\n  }\n  return result.slice(0, -1);\n};\n\n// Given a list of integers, generate a list of rolling sum element found until given moment\n// in the sequence.\nconst rollingSumOf", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = nextSmallest;\n\n},{}],3:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextLargest() that returns the 1st largest element of the list.\n  Return null if there is no such element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 3\n  nextLargest([5, 1, 4, 3, 2]) == 3\n  nextLargest([]) == null\n  nextLargest([1, 1]) == null\n  */\nconst nextLargest = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min < lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max > lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = nextLargest;\n\n},{}],4:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the largest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 6\n  nextMultiple([5, 1, 4, 3, 2]) == 6\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\nconst nextMultiple = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.pow(max, Math.floor(Math.log(max) / Math.LN10));\n};\n\nmodule.exports = nextMultiple;\n\n},{}],5:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the smallest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 4\n  nextMultiple([5, 1, 4, 3, 2]) == 4\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\nconst nextMultiple = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min < lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max > lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.pow(min, Math.floor(Math.log(min) / Math.LN10));\n};\n\nmodule.exports = nextMultiple;\n\n},{}],6:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the largest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 6\n  nextMultiple([5, 1, 4, 3, 2]) == 6\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\nconst nextMultiple = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.pow(max, Math.floor(Math.log(max) / Math.LN10));\n};\n\nmodule.exports = nextMultiple;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the smallest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 4\n  nextMultiple([5, 1, 4, 3, 2]) == 4\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\nconst nextMultiple = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min < lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max > lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.pow(min, Math.floor(Math.log(min) / Math.LN10));\n};\n\nmodule.exports = nextMultiple;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the largest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 6\n  nextMultiple([5, 1, 4, 3, 2]) == 6\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\nconst nextMultiple = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.pow(max, Math.floor(Math.log(max) / Math.LN10));\n};\n\nmodule.exports = nextMultiple;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the smallest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 4\n  nextMultiple([5, 1, 4, 3, 2]) == 4\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\nconst nextMultiple = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min < lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max > lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.pow(min, Math.floor(Math.log(min) / Math.LN10));\n};\n\nmodule.exports = nextMultiple;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the largest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 6\n  nextMultiple([5, 1, 4, 3, 2]) == 6\n  nextMultiple([]) == null\n  nextMultiple([1, 1]) == null\n  */\nconst nextMultiple = (lst) => {\n  let min = null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min === null || min > lst[i]) {\n      min = lst[i];\n    }\n    if (max === null || max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return Math.pow(max, Math.floor(Math.log(max) / Math.LN10));\n};\n\nmodule.exports = nextMultiple;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given a list of integers.\n  Write a function nextMultiple() that returns the multiple of the smallest element of the list.\n  Return null if there is no such element.\n  \n  nextMultiple([1, 2, 3, 4, 5]) == 4\n  nextMultiple([5, 1, 4, 3, 2]) == 4\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBore", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let bore = 0;\n  S.split('.').forEach(word => {\n    if (word === 'I') {\n      bore++;\n    }\n  });\n  return bore;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of consonants. A consonant is a word that starts with the letter \"c\".\n  Words are delimited by spaces.\n \n  For example:\n  >>> isConsonant(\"Hello world\")\n  0\n  >>> isConsonant(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isConsonant = (S) => {\n  let consonant = 0;\n  S.split(' ').forEach(word => {\n    if (word === 'c') {\n      consonant++;\n    }\n  });\n  return consonant;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of vowels. A vowel is a word that starts with the letter \"a\".\n  Words are delimited by spaces.\n \n  For example:\n  >>> isVowel(\"Hello world\")\n  0\n  >>> isVowel(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isVowel = (S) => {\n  let vowel = 0;\n  S.split(' ').forEach(word => {\n    if (word === 'a') {\n      vowel++;\n    }\n  });\n  return vowel;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of consonants and vowels. A consonant is a word that starts with the letter \"c\".\n  Words are delimited by spaces.\n \n  For example:\n  >>> isConsonantAndVowel(\"Hello world\")\n  0\n  >>> isConsonantAndVowel(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isConsonantAndVowel = (S) => {\n  let consonant = 0;\n  let vowel = 0;\n  S.split(' ').forEach(word => {\n    if (word === 'c') {\n      consonant++;\n    }\n    if (word === 'a') {\n      vowel++;\n    }\n  });\n  return [consonant, vowel];\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of consonants and vowels. A consonant is a word that starts with the letter \"c\".\n  Words are delimited by spaces.\n \n  For example:\n  >>> isConsonantAndVowelAndBoredom(\"Hello world\")\n  0\n  >>> isConsonantAndVowelAndBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isConsonantAndVowelAndBoredom = (S) => {\n  let consonant = 0;\n  let vowel = 0;\n  let boredom = 0;\n  S.split(' ').forEach(word => {\n    if (word === 'c') {\n      consonant++;\n    }\n    if (word === 'a') {\n      vowel++;\n    }\n    if (word === 'b') {\n      boredom++;\n    }\n  });\n  return [consonant, vowel, boredom];\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of consonants and vowels. A consonant is a word that starts with the letter \"c\".\n  Words are delimited by spaces.\n \n  For example:\n  >>> isConsonantAndVowelAndBoredomAndBoredom(\"Hello world\")\n  0\n  >>> isConsonantAndVowelAndBoredomAndBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isConsonantAndVowelAndBoredomAndBoredom = (S) => {\n  let consonant = 0;\n  let vowel = 0;\n  let boredom = 0;\n  let boredom2 = 0;\n  S.split(' ').forEach(word => {\n    if (word === 'c') {\n      consonant++;\n    }\n    if (word === 'a') {\n      vowel++;\n    }\n    if (word === 'b') {\n      boredom++;\n    }\n    if (word === 'b') {\n      boredom2++;\n    }\n  });\n  return [consonant, vowel, boredom, boredom2];\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of consonants and vowels. A consonant is a word that starts with the letter \"c\".\n  Words are delimited by spaces.\n \n  For example:\n  >>> isConsonantAndVowelAndBoredomAndBoredomAndBoredom(\"Hello world\")\n  0\n  >>> isConsonantAndVowelAndBoredomAndBoredomAndBoredom(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isConsonantAndVowelAndBoredomAndBoredomAndBoredom = (S) => {\n  let consonant = 0;\n  let vowel = 0;\n  let boredom = 0;\n  let boredom2 = 0;\n  let boredom3 = 0;\n  let boredom4 = 0;\n  let boredom5 = 0;\n  let boredom6 = 0;\n  let boredom7 = 0;\n  let boredom8 = 0;\n  let boredom9 = 0;\n  let boredom10 = 0;\n  let boredom11 = 0;\n  let boredom12 = 0;\n  let boredom13 = 0;\n  let boredom14 = 0;\n  let boredom15 = 0;\n  let boredom16 = 0;\n  let boredom17 = 0;\n  let boredom18 = 0;\n  let boredom19 = 0;\n  let boredom20 = 0;\n  let boredom21 = 0;\n  let boredom22 = 0;\n  let boredom23 = 0;\n  let boredom24 = 0;\n  let boredom25 = 0;\n  let boredom26 = 0;\n  let boredom27 = 0;\n  let boredom28 = 0;\n  let boredom29 = 0;\n  let boredom30 = 0;\n  let boredom31 = 0;\n  let boredom32 = 0;\n  let boredom33 = 0;\n  let boredom34 = 0;\n  let boredom35 = 0;\n  let boredom36 = 0;\n  let boredom37 = 0;\n  let boredom38 = 0;\n  let boredom39 = 0;\n  let boredom40 = 0;\n  let boredom41 = 0;\n  let boredom42 = 0;\n  let boredom43 = 0;\n  let boredom44 = 0;\n  let boredom45 = 0;\n  let boredom46 = 0;\n  let boredom47 = 0;\n  let bore", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === -z && -z === y;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === -z && -z === y;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === -z && -z === y;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === -z && -z === y;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === -z && -z === y;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === -z && -z === y;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === -z && -z === y;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === -z && -z === y;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === -z && -z === y;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelsArray = vowels.split('');\n  let alphabetArray = alphabet.split('');\n  \n  for(let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if(letter ==='') {\n      encoded +='';\n    } else if(letter === '!') {\n      encoded += '!';\n    } else if(letter === '?') {\n      encoded += '?';\n    } else if(letter === '@') {\n      encoded += '@';\n    } else if(letter === '&') {\n      encoded += '&';\n    } else if(letter === '(') {\n      encoded += '(';\n    } else if(letter === ')') {\n      encoded += ')';\n    } else if(letter === '[') {\n      encoded += '[';\n    } else if(letter === ']') {\n      encoded += ']';\n    } else if(letter === '{') {\n      encoded += '{';\n    } else if(letter === '}') {\n      encoded += '}';\n    } else if(letter === '|') {\n      encoded += '|';\n    } else if(letter === '~') {\n      encoded += '~';\n    } else if(letter === '^') {\n      encoded += '^';\n    } else if(letter === '~') {\n      encoded += '~';\n    } else if(letter === '!') {\n      encoded += '!';\n    } else if(letter === '?') {\n      encoded += '?';\n    } else if(letter === '@') {\n      encoded += '@';\n    } else if(letter === '&') {\n      encoded += '&';\n    } else if(letter === '(') {\n      encoded += '(';\n    } else if(letter === ')') {\n      encoded += ')';\n    } else if(letter === '[') {\n      encoded += '[';\n    } else if(letter === ']') {\n      encoded += ']';\n    } else if(letter === '{') {\n      encoded += '{';\n    } else if(letter === '}') {\n      encoded += '}';\n    } else if(letter === '|') {\n      encoded += '|';\n    } else if(letter === '~') {\n      encoded += '~';\n    } else if(letter === '^') {\n      encoded += '^';\n    } else if(letter === '~') {\n      encoded += '~';\n    } else if(letter === '!') {\n      encoded += '!';\n    } else if(letter === '?') {\n      encoded += '?';\n    } else if(letter === '@') {\n      encoded += '@';\n    } else if(letter === '&') {\n      encoded += '&';\n    } else if(letter === '(') {\n      encoded += '(';\n    } else if(letter === ')') {\n      encoded += ')';\n    } else if(letter === '[') {\n      encoded += '[';\n    } else if(letter === ']') {\n      encoded += ']';\n    } else if(letter === '{') {\n      encoded += '{';\n    } else if(letter === '}') {\n      encoded += '}';\n    } else if(letter === '|') {\n      encoded += '|';\n    } else if(letter === '~') {\n      encoded += '~';\n    } else if(letter === '^') {\n      encoded += '^';\n    } else if(letter === '~') {\n      encoded += '~';\n    } else if(letter === '!') {\n      encoded += '!';\n    } else if(letter === '?') {\n      encoded += '?';\n    } else if(letter === '@') {\n      encoded += '@';\n    } else if(letter === '&') {\n      encoded += '&';\n    } else if(letter === '(') {\n      encoded += '(';\n    } else if(letter === ')') {\n      encoded += ')';\n    } else if(letter === '[') {\n      encoded += '[';\n    } else if(letter === ']') {\n      encoded += ']';\n    } else if(letter === '{') {\n      encoded += '{';\n    } else if(letter === '}') {\n      encoded += '}';\n    } else if(letter === '|') {\n      encoded += '|';\n    } else if(letter === '~') {\n      encoded += '~';\n    } else if(letter === '^') {\n      encoded += '^';\n    } else if(letter === '~') {\n      encoded += '~';\n    } else if(letter === '!') {\n      encoded += '!';\n    } else if(letter === '?') {\n      encoded += '?';\n    } else if(letter === '@') {\n      encoded += '@';\n    } else if(letter === '&') {\n      encoded += '&';\n    } else if(letter === '(') {\n      encoded += '(';\n    } else if(letter === ')') {\n      encoded += ')';\n    } else if(letter === '[') {\n      encoded += '[';\n    } else if(letter === ']') {\n      encoded += ']';\n    } else if(letter === '{') {\n      encoded += '{';\n    } else if(letter === '}') {\n      encoded += '}';\n    } else if(letter === '|') {\n      encoded += '|';\n    } else if(letter === '~') {\n      encoded += '~';\n    } else if(letter === '^') {\n      encoded += '^';\n    } else if(letter === '~') {\n      encoded += '~';\n    } else if(letter === '!') {\n      encoded += '!';\n    } else if(letter === '?') {\n      encoded += '?';\n    } else if(letter === '@') {\n      encoded += '@';\n    } else if(letter === '&') {\n      encoded += '&';\n    } else if(letter === '(') {\n      encoded += '(';\n    } else if(letter === ')') {\n      encoded += ')';\n    } else if(letter === '[') {\n      encoded += '[';\n    } else if(letter === ']') {\n      encoded += ']';\n    } else if(letter === '{') {\n      encoded += '{';\n    } else if(letter === '}') {\n      encoded += '}';\n    } else if(letter === '|') {\n      encoded += '|';\n    } else if(letter === '~') {\n      encoded += '~';\n    } else if(letter === '^') {\n      encoded += '^';\n    } else if(letter === '~') {\n      encoded += '~';\n    } else if(letter === '!') {\n      encoded += '!';\n    } else if(letter === '?') {\n      encoded += '?';\n    } else if(letter === '@') {\n      encoded += '@';\n    } else if(letter === '&') {\n      encoded += '&';\n    } else if(letter === '(') {\n      encoded += '(';\n    } else if(letter === ')') {\n      encoded += ')';\n    } else if(letter === '[') {\n      encoded += '[';\n    } else if(letter === ']') {\n      encoded += ']';\n    } else if(letter === '{') {\n      encoded += '{';\n    } else if(letter === '}') {\n      encoded += '}';\n    } else if(letter === '|') {\n      encoded += '|';\n    } else if(letter === '~') {\n      encoded += '~';\n    } else if(letter === '^') {\n      encoded += '^';\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let maxDigit = 0;\n  let sumDigit = 0;\n  let maxDigitSum = 0;\n  let sumDigitSum = 0;\n  let maxDigitSum2 = 0;\n  let sumDigitSum2 = 0;\n  let maxDigitSum3 = 0;\n  let sumDigitSum3 = 0;\n  let maxDigitSum4 = 0;\n  let sumDigitSum4 = 0;\n  let maxDigitSum5 = 0;\n  let sumDigitSum5 = 0;\n  let maxDigitSum6 = 0;\n  let sumDigitSum6 = 0;\n  let maxDigitSum7 = 0;\n  let sumDigitSum7 = 0;\n  let maxDigitSum8 = 0;\n  let sumDigitSum8 = 0;\n  let maxDigitSum9 = 0;\n  let sumDigitSum9 = 0;\n  let maxDigitSum10 = 0;\n  let sumDigitSum10 = 0;\n  let maxDigitSum11 = 0;\n  let sumDigitSum11 = 0;\n  let maxDigitSum12 = 0;\n  let sumDigitSum12 = 0;\n  let maxDigitSum13 = 0;\n  let sumDigitSum13 = 0;\n  let maxDigitSum14 = 0;\n  let sumDigitSum14 = 0;\n  let maxDigitSum15 = 0;\n  let sumDigitSum15 = 0;\n  let maxDigitSum16 = 0;\n  let sumDigitSum16 = 0;\n  let maxDigitSum17 = 0;\n  let sumDigitSum17 = 0;\n  let maxDigitSum18 = 0;\n  let sumDigitSum18 = 0;\n  let maxDigitSum19 = 0;\n  let sumDigitSum19 = 0;\n  let maxDigitSum20 = 0;\n  let sumDigitSum20 = 0;\n  let maxDigitSum21 = 0;\n  let sumDigitSum21 = 0;\n  let maxDigitSum22 = 0;\n  let sumDigitSum22 = 0;\n  let maxDigitSum23 = 0;\n  let sumDigitSum23 = 0;\n  let maxDigitSum24 = 0;\n  let sumDigitSum24 = 0;\n  let maxDigitSum25 = 0;\n  let sumDigitSum25 = 0;\n  let maxDigitSum26 = 0;\n  let sumDigitSum26 = 0;\n  let maxDigitSum27 = 0;\n  let sumDigitSum27 = 0;\n  let maxDigitSum28 = 0;\n  let sumDigitSum28 = 0;\n  let maxDigitSum29 = 0;\n  let sumDigitSum29 = 0;\n  let maxDigitSum30 = 0;\n  let sumDigitSum30 = 0;\n  let maxDigitSum31 = 0;\n  let sumDigitSum31 = 0;\n  let maxDigitSum32 = 0;\n  let sumDigitSum32 = 0;\n  let maxDigitSum33 = 0;\n  let sumDigitSum33 = 0;\n  let maxDigitSum34 = 0;\n  let sumDigitSum34 = 0;\n  let maxDigitSum35 = 0;\n  let sumDigitSum35 = 0;\n  let maxDigitSum36 = 0;\n  let sumDigitSum36 = 0;\n  let maxDigitSum37 = 0;\n  let sumDigitSum37 = 0;\n  let maxDigitSum38 = 0;\n  let sumDigitSum38 = 0;\n  let maxDigitSum39 = 0;\n  let sumDigitSum39 = 0;\n  let maxDigitSum40 = 0;\n  let sumDigitSum40 = 0;\n  let maxDigitSum41 = 0;\n  let sumDigitSum41 = 0;\n  let maxDigitSum42 = 0;\n  let sumDigitSum42 = 0;\n  let maxDigitSum43 = 0;\n  let sumDigitSum43 = 0;\n  let maxDigitSum44 = 0;\n  let sumDigitSum44 = 0;\n  let maxDigitSum45 = 0;\n  let sumDigitSum45 = 0;\n  let maxDigitSum46 = 0;\n  let sumDigitSum46 = 0;\n  let maxDigitSum47 = 0;\n  let sumDigitSum47 = 0;\n  let maxDigitSum48 = 0;\n  let sumDigitSum48 = 0;\n  let maxDigitSum49 = 0;\n  let sumDigitSum49 = 0;\n  let maxDigitSum50 = 0;\n  let sumDigitSum50 = 0;\n  let maxDigitSum51 = 0;\n  let sumDigitSum51 = 0;\n  let maxDigitSum52 = 0;\n  let sumDigitSum52 = 0;\n  let maxDigitSum53 = 0;\n  let sumDigitSum53 = 0;\n  let maxDigitSum54 = 0;\n  let sumDigitSum54 = 0;\n  let maxDigitSum55 = 0;\n  let sumDigitSum55 = 0;\n  let maxDigitSum56 = 0;\n  let sumDigitSum56 = 0;\n  let maxDigitSum57 = 0;\n  let sumDigitSum57 = 0;\n  let maxDigitSum58 = 0;\n  let sumDigitSum58 = 0;\n  let maxDigitSum59 = 0;\n  let sumDigitSum59 = 0;\n  let maxDigitSum60 = 0;\n  let sumDigitSum60 = 0;\n  let maxDigitSum61 = 0;\n  let sumDigitSum61 = 0;\n  let maxDigitSum62 = 0;\n  let sumDigitSum62 = 0;\n  let maxDigitSum63 = 0;\n  let sumDigitSum63 = 0;\n  let maxDigitSum64 = 0;\n  let sumDigitSum64 = 0;\n  let maxDigitSum65 = 0;\n  let sumDigitSum65 = 0;\n  let maxDigitSum66 = 0;\n  let sumDigitSum66 = 0;\n  let maxDigitSum67 = 0;\n  let sumDigitSum67 = 0;\n  let maxDigitSum68 = 0;\n  let sumDigitSum68 = 0;\n  let maxDigitSum69 = 0;\n  let sumDigitSum69 = 0;\n  let maxDigitSum70 = 0;\n  let sumDigitSum70 = 0;\n  let maxDigitSum71 = 0;\n  let sumDigitSum71 = 0;\n  let maxDigitSum72 = 0;\n  let sumDigitSum72 = 0;\n  let maxDigitSum73 = 0;\n  let sumDigitSum73 = 0;\n  let maxDigitSum74 = 0;\n  let sumDigitSum74 = 0;\n  let maxDigitSum75 = 0;\n  let sumDigitSum75 = 0;\n  let maxDigitSum76 = 0;\n  let sumDigitSum76 = 0;\n  let maxDigitSum77 = 0;\n  let sumDigitSum77 = 0;\n  let maxDigitSum78 = 0;\n  let sumDigitSum78 = 0;\n  let maxDigitSum79 = 0;\n  let sumDigitSum79 = 0;\n  let maxDigitSum80 = 0;\n  let sumDigitSum80 = 0;\n  let maxDigitSum81 = 0;\n  let sumDigitSum81 = 0;\n  let maxDigitSum82 = 0;\n  let sumDigitSum82 = 0;\n  let maxDigitSum83 = 0;\n  let sumDigitSum83 = 0;\n  let maxDigitSum84 = 0;\n  let sumDigitSum84 = 0;\n  let maxDigitSum85 = 0;\n  let sumDigitSum85 = 0;\n  let maxDigitSum86 = 0;\n  let sumDigitSum86 = 0;\n  let maxDigitSum87 = 0;\n  let sumDigitSum87 = 0;\n  let maxDigitSum88 = 0;\n  let sumDigitSum88 = 0;\n  let maxDigitSum89 = 0;\n  let sumDigitSum89 = 0;\n  let maxDigitSum90 = 0;\n  let sumDigitSum90 = 0;\n  let maxDigitSum91 = 0;\n  let sumDigitSum91 = 0;\n  let maxDigitSum92 = 0;\n  let sumDigitSum92 = 0;\n  let maxDigitSum93 = 0;\n  let sumDigitSum93 = 0;\n  let maxDigitSum94 = 0;\n  let sumDigitSum94 = 0;\n  let maxDigitSum95 = 0;\n  let sumDigitSum95 = 0;\n  let maxDigitSum96 = 0;\n  let sumDigitSum96 = 0;\n  let maxDigitSum97 = 0;\n  let sum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCases", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (dict[key] === \"\" || dict[key] === null) {\n      return false;\n    }\n    if (dict[key].toLowerCase()!== dict[key].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string, return true if all characters are lowercase or all \n * characters are uppercase, else return false.\n */\nconst checkStringCases = (str) => {\n  const lowerCase = str.toLowerCase();\n  const upperCase = str.toUpperCase();\n  return lowerCase === upperCase;\n};\n\n/**\n * Given a string, return true if all characters are digits, else \n * return false.\n */\nconst checkStringDigits = (str) => {\n  const digits = /\\d/;\n  return digits.test(str);\n};\n\n/**\n * Given a string, return true if all characters are letters, else \n * return false.\n */\nconst checkStringLetters = (str) => {\n  const letters = /[a-zA-Z]/;\n  return letters.test(str);\n};\n\n/**\n * Given a string, return true if all characters are whitespace, else \n * return false.\n */\nconst checkStringSpaces = (str) => {\n  const spaces = /\\s/;\n  return spaces.test(str);\n};\n\n/**\n * Given a string, return true if all characters are upper case or \n * lower case, else return false.\n */\nconst checkStringCasesOrDigits = (str) => {\n  const lowerCase = str.toLowerCase();\n  const upperCase = str.toUpperCase();\n  return lowerCase === upperCase || checkStringDigits(str) || checkStringLetters(str);\n};\n\n/**\n * Given a string, return true if all characters are digits, else \n * return false.\n */\nconst checkStringDigits = (str) => {\n  const digits = /\\d/;\n  return digits.test(str);\n};\n\n/**\n * Given a string, return true if all characters are letters, else \n * return false.\n */\nconst checkStringLetters = (str) => {\n  const letters = /[a-zA-Z]/;\n  return letters.test(str);\n};\n\n/**\n * Given a string, return true if all characters are whitespace, else \n * return false.\n */\nconst checkStringSpaces = (str) => {\n  const spaces = /\\s/;\n  return spaces.test(str);\n};\n\n/**\n * Given a string, return true if all characters are upper case or \n * lower case, else return false.\n */\nconst checkStringCasesOrDigits = (str) => {\n  const lowerCase = str.toLowerCase();\n  const upperCase = str.toUpperCase();\n  return lowerCase === upperCase || checkStringDigits(str) || checkStringLetters(str);\n};\n\n/**\n * Given a string, return true if all characters are digits, else \n * return false.\n */\nconst checkStringDigits = (str) => {\n  const digits = /\\d/;\n  return digits.test(str);\n};\n\n/**\n * Given a string, return true if all characters are letters, else \n * return false.\n */\nconst checkStringLetters = (str) => {\n  const letters = /[a-zA-Z]/;\n  return letters.test(str);\n};\n\n/**\n * Given a string, return true if all characters are whitespace, else \n * return false.\n */\nconst checkStringSpaces = (str) => {\n  const spaces = /\\s/;\n  return spaces.test(str);\n};\n\n/**\n * Given a string, return true if all characters are upper case or \n * lower case, else return false.\n */\nconst checkStringCasesOrDigits = (str) => {\n  const lowerCase = str.toLowerCase();\n  const upperCase = str.toUpperCase();\n  return lowerCase === upperCase || checkStringDigits(str) || checkStringLetters(str);\n};\n\n/**\n * Given a string, return true if all characters are digits, else \n * return false.\n */\nconst checkStringDigits = (str) => {\n  const digits = /\\d/;\n  return digits.test(str);\n};\n\n/**\n * Given a string, return true if all characters are letters, else \n * return false.\n */\nconst checkStringLetters = (str) => {\n  const letters = /[a-zA-Z]/;\n  return letters.test(str);\n};\n\n/**\n * Given a string, return true if all characters are whitespace, else \n * return false.\n */\nconst checkStringSpaces = (str) => {\n  const spaces = /\\s/;\n  return spaces.test(str);\n};\n\n/**\n * Given a string, return true if all characters are upper case or \n * lower case, else return false.\n */\nconst checkStringCasesOrDigits = (str) => {\n  const lowerCase = str.toLowerCase();\n  const upperCase = str.toUpperCase();\n  return lowerCase === upperCase || checkStringDigits(str) || checkStringLetters(str);\n};\n\n/**\n * Given a string, return true if all characters are digits, else \n * return false.\n */\nconst checkStringDigits = (str) => {\n  const digits = /\\d/;\n  return digits.test(str);\n};\n\n/**\n * Given a string, return true if all characters are letters, else \n * return false.\n */\nconst checkStringLetters = (str) => {\n  const letters = /[a-zA-Z]/;\n  return letters.test(str);\n};\n\n/**\n * Given a string, return true if all characters are whitespace, else \n * return false.\n */\nconst checkStringSpaces = (str) => {\n  const spaces = /\\s/;\n  return spaces.test(str);\n};\n\n/**\n * Given a string, return true if all characters are upper case or \n * lower case, else return false.\n */\nconst checkStringCasesOrDigits = (str) => {\n  const lowerCase = str.toLowerCase();\n  const upperCase = str.toUpperCase();\n  return lowerCase === upperCase || checkStringDigits(str) || checkStringLetters(str);\n};\n\n/**\n * Given a string, return true if all characters are digits, else \n * return false.\n */\nconst checkStringDigits = (str) => {\n  const digits = /\\d/;\n  return digits.test(str);\n};\n\n/**\n * Given a string, return true if all characters are letters, else \n * return false.\n */\nconst checkStringLetters = (str) => {\n  const letters = /[a-zA-Z]/;\n  return letters.test(str);\n};\n\n/**\n * Given a string, return true if all characters are whitespace, else \n * return false.\n */\nconst checkStringSpaces = (str) => {\n  const spaces = /\\s/;\n  return spaces.test(str);\n};\n\n/**\n * Given a string, return true if all characters are upper case or \n * lower case, else return false.\n */\nconst checkStringCasesOrDigits = (str) => {\n  const lowerCase = str.toLowerCase();\n  const upperCase = str.toUpperCase();\n  return lowerCase === upperCase || checkStringDigits(str) || checkStringLetters(str);\n};\n\n/**\n * Given a string, return true if all characters are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first\n  n prime numbers and less than n.\n  for example:\n  primesUpTo(5) => [2,3]\n  primesUpTo(11) => [2,3,5,7]\n  primesUpTo(0) => []\n  primesUpTo(20) => [2,3,5,7,11,13,17,19]\n  primesUpTo(1) => []\n  primesUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst primesUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first\n  n prime numbers and less than n.\n  for example:\n  primesUpTo(5) => [2,3]\n  primesUpTo(11) => [2,3,5,7]\n  primesUpTo(0) => []\n  primesUpTo(20) => [2,3,5,7,11,13,17,19]\n  primesUpTo(1) => []\n  primesUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst primesUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first\n  n prime numbers and less than n.\n  for example:\n  primesUpTo(5) => [2,3]\n  primesUpTo(11) => [2,3,5,7]\n  primesUpTo(0) => []\n  primesUpTo(20) => [2,3,5,7,11,13,17,19]\n  primesUpTo(1) => []\n  primesUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst primesUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first\n  n prime numbers and less than n.\n  for example:\n  primesUpTo(5) => [2,3]\n  primesUpTo(11) => [2,3,5,7]\n  primesUpTo(0) => []\n  primesUpTo(20) => [2,3,5,7,11,13,17,19]\n  primesUpTo(1) => []\n  primesUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst primesUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first\n  n prime numbers and less than n.\n  for example:\n  primesUpTo(5) => [2,3]\n  primesUpTo(11) => [2,3,5,7]\n  primesUpTo(0) => []\n  primesUpTo(20) => [2,3,5,7,11,13,17,19]\n  primesUpTo(1) => []\n  primesUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst primesUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first\n  n prime numbers and less than n.\n  for example:\n  primesUpTo(5) => [2,3]\n  primesUpTo(11) => [2,3,5,7]\n  primesUpTo(0) => []\n  primesUpTo(20) => [2,3,5,7,11,13,17,19]\n  primesUpTo(1) => []\n  primesUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst primesUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first\n  n prime numbers and less than n.\n  for example:\n  primesUpTo(5) => [2,3]\n  primesUpTo(11) => [2,3,5,7]\n  primesUpTo(0) => []\n  primesUpTo(20) => [2,3,5,7,11,13,17,19]\n  primesUpTo(1) => []\n  primesUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst primesUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first\n  n prime numbers and less than n.\n  for example:\n  primesUpTo(5) => [2,3]\n  primesUpTo(11) => [2,3,5,7]\n  primesUpTo(0) => []\n  primesUpTo(20) => [2,3,5,7,11,13,17,19]\n  primesUpTo(1) => []\n  primesUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst primesUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first\n  n prime numbers and less than n.\n  for example:\n  primesUpTo(5) => [2,3]\n  primesUpTo(11) => [2,3,5,7]\n  primesUpTo(0) => []\n  primesUpTo(20) => [2,3,5,7,11,13,17,19]\n  primesUpTo(1) => []\n  primesUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst primesUpTo = (n) => {\n  let primes = [];\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      primes.push(i);\n    }\n    i++;\n  }\n  return primes;\n};\n\n/*Implement a function that takes an integer and returns an array of the first\n  n prime numbers and less than n.\n  for example:\n  primesUpTo(5) => [2,3]\n  primesUpTo(11) => [2,3,5,7]\n  primesUpTo(0) => []\n  primesUpTo(20) => [2,3,5,7,11,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const product = a / b;\n  return product * product;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 280.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 140.\n  */\nconst sum = (a, b) => {\n  const sum = a + b;\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(148, 412) should return -412.\n  difference(19, 28) should return -28.\n  difference(2020, 1851) should return 1851.\n  difference(14,-15) should return 14.\n  */\nconst difference = (a, b) => {\n  const difference = a - b;\n  return difference;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absolute(148, 412) should return 148.\n  absolute(19, 28) should return 28.\n  absolute(2020, 1851) should return 1851.\n  absolute(14,-15) should return 14.\n  */\nconst absolute = (a, b) => {\n  const absolute = a + b;\n  return absolute;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148, 412) should return 1.414213562.\n  sqrt(19, 28) should return 1.414213562.\n  sqrt(2020, 1851) should return 1.414213562.\n  sqrt(14,-15) should return 1.414213562.\n  */\nconst sqrt = (a, b) => {\n  const sqrt = Math.sqrt(a);\n  return sqrt;\n};\n\n/*Complete the function that takes two integers and returns \n  the inverse square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 1.414213562.\n  inverse(19, 28) should return 1.414213562.\n  inverse(2020, 1851) should return 1.414213562.\n  inverse(14,-15) should return 1.414213562.\n  */\nconst inverse = (a, b) => {\n  const inverse = 1 / sqrt;\n  return inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 1.414213562.\n  inverse(19, 28) should return 1.414213562.\n  inverse(2020, 1851) should return 1.414213562.\n  inverse(14,-15) should return 1.414213562.\n  */\nconst inverseSqrt = (a, b) => {\n  const inverse = 1 / sqrt;\n  return inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 1.414213562.\n  inverse(19, 28) should return 1.414213562.\n  inverse(2020, 1851) should return 1.414213562.\n  inverse(14,-15) should return 1.414213562.\n  */\nconst inverseSqrt2 = (a, b) => {\n  const inverse = 1 / sqrt;\n  return inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 1.414213562.\n  inverse(19, 28) should return 1.414213562.\n  inverse(2020, 1851) should return 1.414213562.\n  inverse(14,-15) should return 1.414213562.\n  */\nconst inverseSqrt3 = (a, b) => {\n  const inverse = 1 / sqrt;\n  return inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 1.414213562.\n  inverse(19, 28) should return 1.414213562.\n  inverse(2020, 1851) should return 1.414213562.\n  inverse(14,-15) should return 1.414213562.\n  */\nconst inverseSqrt4 = (a, b) => {\n  const inverse = 1 / sqrt;\n  return inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 1.414213562.\n  inverse(19, 28) should return 1.414213562.\n  inverse(2020, 1851) should return 1.414213562.\n  inverse(14,-15) should return 1.414213562.\n  */\nconst inverseSqrt5 = (a, b) => {\n  const inverse = 1 / sqrt;\n  return inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 1.414213562.\n  inverse(19, 28) should return 1.414213562.\n  inverse(2020, 1851) should return 1.414213562.\n  inverse(14,-15) should return 1.414213562.\n  */\nconst inverseSqrt6 = (a, b) => {\n  const inverse = 1 / sqrt;\n  return inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 1.414213562.\n  inverse(19, 28) should return 1.414213562.\n  inverse(2020, 1851) should return 1.414213562.\n  inverse(14,-15) should return 1.414213562.\n  */\nconst inverseSqrt7 = (a, b) => {\n  const inverse = 1 / sqrt;\n  return inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 1.414213562.\n  inverse(19, 28) should return 1.414213562.\n  inverse(2020, 1851) should return 1.414213562.\n  inverse(14,-15) should return 1.414213562.\n  */\nconst inverseSqrt8 = (a, b) => {\n  const inverse = 1 / sqrt;\n  return inverse;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 1.414213562.\n  inverse", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  countUpperOdd('aBCdEf') returns 1\n  countUpperOdd('abcdefg') returns 0\n  countUpperOdd('dBBE') returns 0\n  */\nconst countUpperOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLowerOdd('aBCdEf') returns 1\n  countLowerOdd('abcdefg') returns 0\n  countLowerOdd('dBBE') returns 0\n  */\nconst countLowerOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpperVowel('aBCdEf') returns 1\n  countUpperVowel('abcdefg') returns 0\n  countUpperVowel('dBBE') returns 0\n  */\nconst countUpperVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLowerVowel('aBCdEf') returns 1\n  countLowerVowel('abcdefg') returns 0\n  countLowerVowel('dBBE') returns 0\n  */\nconst countLowerVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  countUpperVowelOdd('aBCdEf') returns 1\n  countUpperVowelOdd('abcdefg') ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closerIntegers", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n  let num = 0;\n  let num2 = 0;\n  let num3 = 0;\n  let num4 = 0;\n  let num5 = 0;\n  let num6 = 0;\n  let num7 = 0;\n  let num8 = 0;\n  let num9 = 0;\n  let num10 = 0;\n  let num11 = 0;\n  let num12 = 0;\n  let num13 = 0;\n  let num14 = 0;\n  let num15 = 0;\n  let num16 = 0;\n  let num17 = 0;\n  let num18 = 0;\n  let num19 = 0;\n  let num20 = 0;\n  let num21 = 0;\n  let num22 = 0;\n  let num23 = 0;\n  let num24 = 0;\n  let num25 = 0;\n  let num26 = 0;\n  let num27 = 0;\n  let num28 = 0;\n  let num29 = 0;\n  let num30 = 0;\n  let num31 = 0;\n  let num32 = 0;\n  let num33 = 0;\n  let num34 = 0;\n  let num35 = 0;\n  let num36 = 0;\n  let num37 = 0;\n  let num38 = 0;\n  let num39 = 0;\n  let num40 = 0;\n  let num41 = 0;\n  let num42 = 0;\n  let num43 = 0;\n  let num44 = 0;\n  let num45 = 0;\n  let num46 = 0;\n  let num47 = 0;\n  let num48 = 0;\n  let num49 = 0;\n  let num50 = 0;\n  let num51 = 0;\n  let num52 = 0;\n  let num53 = 0;\n  let num54 = 0;\n  let num55 = 0;\n  let num56 = 0;\n  let num57 = 0;\n  let num58 = 0;\n  let num59 = 0;\n  let num60 = 0;\n  let num61 = 0;\n  let num62 = 0;\n  let num63 = 0;\n  let num64 = 0;\n  let num65 = 0;\n  let num66 = 0;\n  let num67 = 0;\n  let num68 = 0;\n  let num69 = 0;\n  let num70 = 0;\n  let num71 = 0;\n  let num72 = 0;\n  let num73 = 0;\n  let num74 = 0;\n  let num75 = 0;\n  let num76 = 0;\n  let num77 = 0;\n  let num78 = 0;\n  let num79 = 0;\n  let num80 = 0;\n  let num81 = 0;\n  let num82 = 0;\n  let num83 = 0;\n  let num84 = 0;\n  let num85 = 0;\n  let num86 = 0;\n  let num87 = 0;\n  let num88 = 0;\n  let num89 = 0;\n  let num90 = 0;\n  let num91 = 0;\n  let num92 = 0;\n  let num93 = 0;\n  let num94 = 0;\n  let num95 = 0;\n  let num96 = 0;\n  let num97 = 0;\n  let num98 = 0;\n  let num99 = 0;\n  let num100 = 0;\n  let num101 = 0;\n  let num102 = 0;\n  let num103 = 0;\n  let num104 = 0;\n  let num105 = 0;\n  let num106 = 0;\n  let num107 = 0;\n  let num108 = 0;\n  let num109 = 0;\n  let num110 = 0;\n  let num111 = 0;\n  let num112 = 0;\n  let num113 = 0;\n  let num114 = 0;\n  let num115 = 0;\n  let num116 = 0;\n  let num117 = 0;\n  let num118 = 0;\n  let num119 = 0;\n  let num120 = 0;\n  let num121 = 0;\n  let num122 = 0;\n  let num123 = 0;\n  let num124 = 0;\n  let num125 = 0;\n  let num126 = 0;\n  let num127 = 0;\n  let num128 = 0;\n  let num129 = 0;\n  let num130 = 0;\n  let num131 = 0;\n  let num132 = 0;\n  let num133 = 0;\n  let num134 = 0;\n  let num135 = 0;\n  let num136 = 0;\n  let num137 = 0;\n  let num138 = 0;\n  let num139 = 0;\n  let num140 = 0;\n  let num141 = 0;\n  let num142 = 0;\n  let num143 = 0;\n  let num144 = 0;\n  let num145 = 0;\n  let num146 = 0;\n  let num147 = 0;\n  let num148 = 0;\n  let num149 = 0;\n  let num150 = 0;\n  let num151 = 0;\n  let num152 = 0;\n  let num153 = 0;\n  let num154 = 0;\n  let num155 = 0;\n  let num156 = 0;\n  let num157 = 0;\n  let num158 = 0;\n  let num159 = 0;\n  let num160 = 0;\n  let num161 = 0;\n  let num162 = 0;\n  let num163 = 0;\n  let num164 = 0;\n  let num165 = 0;\n  let num166 = 0;\n  let num167 = 0;\n  let num168 = 0;\n  let num169 = 0;\n  let num170 = 0;\n  let num171 = 0;\n  let num172 = 0;\n  let num173 = 0;\n  let num174 = 0;\n  let num175 = 0;\n  let num176 = 0;\n  let num177 = 0;\n  let num178 = 0;\n  let num179 = 0;\n  let num180 = 0;\n  let num181 = 0;\n  let num182 = 0;\n  let num183 = 0;\n  let num184 = 0;\n  let num185 = 0;\n  let num186 = 0;\n  let num187 = 0;\n  let num188 = 0;\n  let num189 = 0;\n  let num190 = 0;\n  let num191 = 0;\n  let num192 = 0;\n  let num193 = 0;\n  let num194 = 0;\n  let num195 = 0;\n  let num196 = 0;\n  let num197 = 0;\n  let num198 = 0;\n  let num199 = 0;\n  let num200 = 0;\n  let num201 = 0;\n  let num202 = 0;\n  let num203 = 0;\n  let num204 = 0;\n  let num205 = 0;\n  let num206 = 0;\n  let num207 = 0;\n  let num208 = 0;\n  let num209 = 0;\n  let num210 = 0;\n  let num211 = 0;\n  let num212 = 0;\n  let num213 = 0;\n  let num214 = 0;\n  let num215 = 0;\n  let num216 = 0;\n  let num217 = 0;\n  let num218 = 0;\n  let num219 = 0;\n  let num220 = 0;\n  let num221 = 0;\n  let num222 = 0;\n  let num223 = 0;\n  let num224 = 0;\n  let num225 = 0;\n  let num226 = 0;\n  let num227 = 0;\n  let num228 = 0;\n  let num229 = 0;\n  let num230 = 0;\n  let num231 = 0;\n  let num232 = 0;\n  let num233 = 0;\n  let num234 = 0;\n  let num235 = 0;\n  let num236 = 0;\n  let num237 = 0;\n  let num238 = 0;\n  let num239 = 0;\n  let num240 = 0;\n  let num241 = 0;\n  let num242 = 0;\n  let num243 = 0;\n  let num244 = 0;\n  let num245 = 0;\n  let num246 = 0;\n  let num247 = 0;\n  let num248 = 0;\n  let num249 = 0;\n  let num250 = 0;\n  let num251 = 0;\n  let num252 = 0;\n  let num253 = 0;\n  let num254 = 0;\n  let num255 = 0;\n  let num256 = 0;\n  let num257 = 0;\n  let num258 = 0;\n  let num259 = 0;\n  let num260 = 0;\n  let num261 = 0;\n  let num262 = 0;\n  let num263 = 0;\n  let num264 = 0;\n  let num265 = 0;\n  let num266 = 0;\n  let num267 = 0;\n  let num268 = 0;\n  let num269 = 0;\n  let num270 = 0;\n  let num271 = 0;\n  let num272 = 0;\n  let num273 = 0;\n  let num274 = 0;\n  let num275 = 0;\n  let num276 = 0;\n  let num277 = 0;\n  let num278 = 0;\n  let num279 = 0;\n  let num", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
