{"task_id": "JavaScript/0", "prompt": "/* check IF in gIVen list of numbers, aRe any tWo numbers cLOser to each otHER thaN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* check IF in gIVen list of numbers, aRe any tWo numbers cLOser to each otHER thaN\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let closeElements = false;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > threshold) {\n      closeElements = true;\n      break;\n    }\n  }\n  return closeElements;\n};\n\n/**\n  Given a number array and a threshold number, return true if all numbers in the\n  array are greater than or equal to the threshold number. Otherwise, return\n  false.\n  >>> hasAllCloseElements([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasAllCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasAllCloseElements = (numbers, threshold) => {\n  let allCloseElements = true;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > threshold) {\n      allCloseElements = false;\n      break;\n    }\n  }\n  return allCloseElements;\n};\n\n/**\n  Given a number array and a threshold number, return true if any number in the\n  array is greater than or equal to the threshold number. Otherwise, return\n  false.\n  >>> hasAnyCloseElements([1.0, 2.0, 3.0], 0.5)\n  true\n  >>> hasAnyCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  */\nconst hasAnyCloseElements = (numbers, threshold) => {\n  let anyCloseElements = true;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > threshold) {\n      anyCloseElements = false;\n      break;\n    }\n  }\n  return anyCloseElements;\n};\n\n/**\n  Given a number array and a threshold number, return true if all numbers in the\n  array are less than or equal to the threshold number. Otherwise, return\n  false.\n  >>> hasAllLessElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasAllLessElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasAllLessElements = (numbers, threshold) => {\n  let allLessElements = false;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] <= threshold) {\n      allLessElements = true;\n      break;\n    }\n  }\n  return allLessElements;\n};\n\n/**\n  Given a number array and a threshold number, return true if any number in the\n  array is less than or equal to the threshold number. Otherwise, return\n  false.\n  >>> hasAnyLessElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasAnyLessElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasAnyLessElements = (numbers, threshold) => {\n  let anyLessElements = false;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] <= threshold) {\n      anyLessElements = true;\n      break;\n    }\n  }\n  return anyLessElements;\n};\n\n/**\n  Given a number array and a threshold number, return true if all numbers in the\n  array are greater than or equal to the threshold number. Otherwise, return\n  false.\n  >>> hasAllGreaterElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasAllGreaterElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasAllGreaterElements = (numbers, threshold) => {\n  let allGreaterElements = false;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > threshold) {\n      allGreaterElements = true;\n      break;\n    }\n  }\n  return allGreaterElements;\n};\n\n/**\n  Given a number array and a threshold number, return true if any number in the\n  array is greater than or equal to the threshold number. Otherwise, return\n  false.\n  >>> hasAnyGreaterElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasAnyGreaterElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasAnyGreaterElements = (numbers, threshold) => {\n  let anyGreaterElements = false;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > threshold) {\n      anyGreaterElements = true;\n      break;\n    }\n  }\n  return anyGreaterElements;\n};\n\n/**\n  Given a number array and a threshold number, return true if all numbers in the\n  array are less than or equal to the threshold number. Otherwise, return\n  false.\n  >>> hasAllLessOrEqualElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasAllLessOrEqualElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasAllLessOrEqualElements = (numbers, threshold) => {\n  let allLessOrEqualElements = false;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] <= threshold) {\n      allLessOrEqualElements = true;\n      break;\n    }\n  }\n  return allLessOrEqualElements;\n};\n\n/**\n  Given a number array and a threshold number, return true if any number in the\n  array is less than or equal to the threshold number. Otherwise, return\n  false.\n  >>> hasAnyLessOrEqualElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasAnyLessOrEqualElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasAnyLessOrEqualElements = (numbers, threshold) => {\n  let anyLessOrEqualElements = false;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] <= threshold) {\n      anyLessOrEqualElements = true;\n      break;\n    }\n  }\n  return anyLessOrEqualElements;\n};\n\n/**\n  Given a number array and a threshold number, return true if all numbers in the\n  array are greater than or equal to the threshold number. Otherwise, return\n  false.\n  >>> hasAllGreaterOrEqualElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasAllGreaterOrEqualElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasAllGreaterOrEqualElements = (numbers, threshold) => {\n  let allGreaterOrEqualElements = false;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > threshold) {\n      allGreaterOrEqualElements = true;\n      break;\n    }\n  }\n  return allGreaterOrEqualElements;\n};\n\n/**\n  Given a number array and a threshold number, return true if any number in the\n  array is greater than or equal to the threshold number. Otherwise, return\n  false.\n  >>> hasAnyGreaterOrEqualElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasAnyGreaterOrEqualElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasAnyGreaterOrEqualElements = (numbers, threshold) => {\n  let anyGreaterOrEqualElements = false;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > threshold) {\n      anyGreaterOrEqualElements = true;\n      break;\n    }\n  }\n  return anyGreaterOrEqualElements;\n};\n\n/**\n  Given a number array and a threshold number, return true if all numbers in the\n  array are less than or equal to the threshold number. Otherwise, return\n  false.\n  >>> hasAllLessOrEqualElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasAllLessOrEqualElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasAllLessOrEqualElements = (numbers, threshold) => {\n  let allLessOrEqualElements = false;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] <= threshold) {\n      allLessOrEqualElements = true;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* input TO tHIs funcTion is A stRIng containinG MUltiPle groups of nEsted pAreNTheSes. yOur GoAl Is to\n  sEPaRAte THoSe group into sepARate StrIngS and return the list OF thOse.\n  seParAte GroUPs ARe bALAnceD (Each OPeN brACe is PROpERly clOSed) and nOt nesTED WiThIn each oThER\n  IgnorE Any spAceS in the iNpuT STring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* input TO tHIs funcTion is A stRIng containinG MUltiPle groups of nEsted pAreNTheSes. yOur GoAl Is to\n  sEPaRAte THoSe group into sepARate StrIngS and return the list OF thOse.\n  seParAte GroUPs ARe bALAnceD (Each OPeN brACe is PROpERly clOSed) and nOt nesTED WiThIn each oThER\n  IgnorE Any spAceS in the iNpuT STring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\((.*?)\\)/gi);\n  const paren_group_array = [];\n  if (paren_groups) {\n    paren_groups.forEach((group) => {\n      const paren_group_string = group;\n      const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n      if (paren_group_array) {\n        paren_group_array.forEach((group) => {\n          const paren_group_string = group;\n          const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n          if (paren_group_array) {\n            paren_group_array.forEach((group) => {\n              const paren_group_string = group;\n              const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n              if (paren_group_array) {\n                paren_group_array.forEach((group) => {\n                  const paren_group_string = group;\n                  const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                  if (paren_group_array) {\n                    paren_group_array.forEach((group) => {\n                      const paren_group_string = group;\n                      const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                      if (paren_group_array) {\n                        paren_group_array.forEach((group) => {\n                          const paren_group_string = group;\n                          const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                          if (paren_group_array) {\n                            paren_group_array.forEach((group) => {\n                              const paren_group_string = group;\n                              const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                              if (paren_group_array) {\n                                paren_group_array.forEach((group) => {\n                                  const paren_group_string = group;\n                                  const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                  if (paren_group_array) {\n                                    paren_group_array.forEach((group) => {\n                                      const paren_group_string = group;\n                                      const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                      if (paren_group_array) {\n                                        paren_group_array.forEach((group) => {\n                                          const paren_group_string = group;\n                                          const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                          if (paren_group_array) {\n                                            paren_group_array.forEach((group) => {\n                                              const paren_group_string = group;\n                                              const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                              if (paren_group_array) {\n                                                paren_group_array.forEach((group) => {\n                                                  const paren_group_string = group;\n                                                  const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                  if (paren_group_array) {\n                                                    paren_group_array.forEach((group) => {\n                                                      const paren_group_string = group;\n                                                      const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                      if (paren_group_array) {\n                                                        paren_group_array.forEach((group) => {\n                                                          const paren_group_string = group;\n                                                          const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                          if (paren_group_array) {\n                                                            paren_group_array.forEach((group) => {\n                                                              const paren_group_string = group;\n                                                              const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                              if (paren_group_array) {\n                                                                paren_group_array.forEach((group) => {\n                                                                  const paren_group_string = group;\n                                                                  const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                                  if (paren_group_array) {\n                                                                    paren_group_array.forEach((group) => {\n                                                                      const paren_group_string = group;\n                                                                      const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                                      if (paren_group_array) {\n                                                                        paren_group_array.forEach((group) => {\n                                                                          const paren_group_string = group;\n                                                                          const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                                          if (paren_group_array) {\n                                                                            paren_group_array.forEach((group) => {\n                                                                              const paren_group_string = group;\n                                                                              const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                                              if (paren_group_array) {\n                                                                                paren_group_array.forEach((group) => {\n                                                                                  const paren_group_string = group;\n                                                                                  const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                                                  if (paren_group_array) {\n                                                                                    paren_group_array.forEach((group) => {\n                                                                                      const paren_group_string = group;\n                                                                                      const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                                                      if (paren_group_array) {\n                                                                                        paren_group_array.forEach((group) => {\n                                                                                          const paren_group_string = group;\n                                                                                          const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                                                          if (paren_group_array) {\n                                                                                            paren_group_array.forEach((group) => {\n                                                                                              const paren_group_string = group;\n                                                                                              const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                                                              if (paren_group_array) {\n                                                                                                paren_group_array.forEach((group) => {\n                                                                                                  const paren_group_string = group;\n                                                                                                  const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                                                                  if (paren_group_array) {\n                                                                                                    paren_group_array.forEach((group) => {\n                                                                                                      const paren_group_string = group;\n                                                                                                      const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                                                                      if (paren_group_array) {\n                                                                                                        paren_group_array.forEach((group) => {\n                                                                                                          const paren_group_string = group;\n                                                                                                          const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                                                                          if (paren_group_array) {\n                                                                                                            paren_group_array.forEach((group) => {\n                                                                                                              const paren_group_string = group;\n                                                                                                              const paren_group_array = paren_group_string.match(/\\((.*?)\\)/gi);\n                                                                                                              if (paren_group_array) {\n                                                                                                                paren_group_array.forEach((group) => {\n                                                                                                                  const paren_group_string = group;\n                                                                                                                  const paren_group_array = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* test iF GnIVen strIg is a pAliNDrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* FiND The sHortest palinDrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const palindrome = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+$/, '')\n   .replace(/^\\s+|\\s+$/g, '');\n  return isPalindrome(palindrome)? palindrome : '';\n}\n\n/* FiND The sHortest palindrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe the loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe the string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindromeReverse = (string) => {\n  const palindrome = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+$/, '')\n   .replace(/^\\s+|\\s+$/g, '');\n  return isPalindrome(palindrome)? palindrome : '';\n}\n\n/* FiND The sHortest palindrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe the loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe the string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindromeReverseReverse = (string) => {\n  const palindrome = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+$/, '')\n   .replace(/^\\s+|\\s+$/g, '');\n  return isPalindrome(palindrome)? palindrome : '';\n}\n\n/* FiND The sHortest palindrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe the loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe the string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindromeReverseReverseReverse = (string) => {\n  const palindrome = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+$/, '')\n   .replace(/^\\s+|\\s+$/g, '');\n  return isPalindrome(palindrome)? palindrome : '';\n}\n\n/* FiND The sHortest palindrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe the loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe the string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindromeReverseReverseReverse = (string) => {\n  const palindrome = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+$/, '')\n   .replace(/^\\s+|\\s+$/g, '');\n  return isPalindrome(palindrome)? palindrome : '';\n}\n\n/* FiND The sHortest palindrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe the loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe the string reVERsE Of a string prEFix that Comes BEFOrE tHe palinDrOMic sufFIx.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindromeReverseReverseReverseReverse = (string) => {\n  const palindrome = string\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .replace(/\\s+/g, '')\n   .replace(/\\s+$/, '')\n   .replace(/^\\s+|\\s+$/g, '');\n  return isPalindrome(palindrome)? palindrome : '';\n}\n\n/* FiND The sHortest palindrome tHat BEgiNs wITh a SuPpLied string.\n  ALGoRIthM IdEa is simple:\n  - Find THe the loNgeSt pOstfix oF SupPliEd string ThaT is A paLInDRomE.\n  - aPpenD To thE EnD of THe the string reVERs", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A PoSItive iNteger n, You HAve to make a piLE Of n leVels of stones.\n  the firSt lEVel Has n STonEs.\n  thE numbER oF StoNEs in The next level is:\n      - THe neXt oDd nUmber if n IS odD.\n      - thE nExt EveN nuMBeR If n iS EVen.\n  RETurn THe NumBEr of STOnES in each LEvel in a list, whEre elEMENt At Index\n  i rePrESents tHE numbEr oF stonEs in tHE Level (i+1).\n\n  eXAMPleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let arr = []\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let A\n  let B\n  let C\n  let D\n  let E\n  let F\n  let G\n  let H\n  let I\n  let J\n  let K\n  let L\n  let M\n  let N\n  let O\n  let P\n  let Q\n  let R\n  let S\n  let T\n  let U\n  let V\n  let W\n  let X\n  let Y\n  let Z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let A\n  let B\n  let C\n  let D\n  let E\n  let F\n  let G\n  let H\n  let I\n  let J\n  let K\n  let L\n  let M\n  let N\n  let O\n  let P\n  let Q\n  let R\n  let S\n  let T\n  let U\n  let V\n  let W\n  let X\n  let Y\n  let Z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let A\n  let B\n  let C\n  let D\n  let E\n  let F\n  let G\n  let H\n  let I\n  let J\n  let K\n  let L\n  let M\n  let N\n  let O\n  let P\n  let Q\n  let R\n  let S\n  let T\n  let U\n  let V\n  let W\n  let X\n  let Y\n  let Z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let A\n  let B\n  let C\n  let D\n  let E\n  let F\n  let G\n  let H\n  let I\n  let J\n  let K\n  let L\n  let M\n  let N\n  let O\n  let P\n  let Q\n  let R\n  let S\n  let T\n  let U\n  let V\n  let W\n  let X\n  let Y\n  let Z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let A\n  let B\n  let C\n  let D\n  let E\n  let F\n  let G\n  let H\n  let I\n  let J\n  let K\n  let L\n  let M\n  let N\n  let O\n  let P\n  let Q\n  let R\n  let S\n  let T\n  let U\n  let V\n  let W\n  let X\n  let Y\n  let Z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let A\n  let B\n  let C\n  let D\n  let E\n  let F\n  let G\n  let H\n  let I\n  let J\n  let K\n  let L\n  let M\n  let N\n  let O\n  let P\n  let Q\n  let R\n  let S\n  let T\n  let U\n  let V\n  let W\n  let X\n  let Y\n  let Z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let A\n  let B\n  let C\n  let D\n  let E\n  let F\n  let G\n  let H\n  let I\n  let J\n  let K\n  let L\n  let M\n  let N\n  let O\n  let P\n  let Q\n  let R\n  let S\n  let T\n  let U\n  let V\n  let W\n  let X\n  let Y\n  let Z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let A\n  let B\n  let C\n  let D\n  let E\n  let F\n  let G\n  let H\n  let I\n  let J\n  let K\n  let L\n  let M\n  let N\n  let O\n  let P\n  let Q\n  let R\n  let S\n  let T\n  let U\n  let V\n  let W\n  let X\n  let Y\n  let Z\n  let a\n  let b\n  let c\n  let d\n  let e\n  let f\n  let g\n  let h\n  let i\n  let j\n  let k\n  let l\n  let m\n  let n\n  let o\n  let p\n  let q\n  let r\n  let s\n  let t\n  let u\n  let v\n  let w\n  let x\n  let y\n  let z\n  let A\n  let B\n  let C\n  let D\n  let E\n  let F\n  let G\n  let H\n  let I\n  let J\n  let K\n  let L\n  let M\n  let N\n  let O\n  let P\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\" \");\n  return words.map((w) => w.trim());\n};\n\n/*\n  you wiLL bE Given a String Of wORds separated BY CommAs or spaces. YoUr task Is\n  tO SplIt tHE stRiNg Into wORdS And return AN aRray of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*THis fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*THis fuNCtIOn takeS two poSitIVe numbers x and y AND retUrns the\n  biggeSt even IntEGer NumBEr tHaT iS in the rANgE [x, y] IncLUsIve. If \n  there's no sUCh nuMbeR, thEn the fuNCtiOn sHoUld return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let num = 0;\n  let num2 = 0;\n  let num3 = 0;\n  let num4 = 0;\n  let num5 = 0;\n  let num6 = 0;\n  let num7 = 0;\n  let num8 = 0;\n  let num9 = 0;\n  let num10 = 0;\n  let num11 = 0;\n  let num12 = 0;\n  let num13 = 0;\n  let num14 = 0;\n  let num15 = 0;\n  let num16 = 0;\n  let num17 = 0;\n  let num18 = 0;\n  let num19 = 0;\n  let num20 = 0;\n  let num21 = 0;\n  let num22 = 0;\n  let num23 = 0;\n  let num24 = 0;\n  let num25 = 0;\n  let num26 = 0;\n  let num27 = 0;\n  let num28 = 0;\n  let num29 = 0;\n  let num30 = 0;\n  let num31 = 0;\n  let num32 = 0;\n  let num33 = 0;\n  let num34 = 0;\n  let num35 = 0;\n  let num36 = 0;\n  let num37 = 0;\n  let num38 = 0;\n  let num39 = 0;\n  let num40 = 0;\n  let num41 = 0;\n  let num42 = 0;\n  let num43 = 0;\n  let num44 = 0;\n  let num45 = 0;\n  let num46 = 0;\n  let num47 = 0;\n  let num48 = 0;\n  let num49 = 0;\n  let num50 = 0;\n  let num51 = 0;\n  let num52 = 0;\n  let num53 = 0;\n  let num54 = 0;\n  let num55 = 0;\n  let num56 = 0;\n  let num57 = 0;\n  let num58 = 0;\n  let num59 = 0;\n  let num60 = 0;\n  let num61 = 0;\n  let num62 = 0;\n  let num63 = 0;\n  let num64 = 0;\n  let num65 = 0;\n  let num66 = 0;\n  let num67 = 0;\n  let num68 = 0;\n  let num69 = 0;\n  let num70 = 0;\n  let num71 = 0;\n  let num72 = 0;\n  let num73 = 0;\n  let num74 = 0;\n  let num75 = 0;\n  let num76 = 0;\n  let num77 = 0;\n  let num78 = 0;\n  let num79 = 0;\n  let num80 = 0;\n  let num81 = 0;\n  let num82 = 0;\n  let num83 = 0;\n  let num84 = 0;\n  let num85 = 0;\n  let num86 = 0;\n  let num87 = 0;\n  let num88 = 0;\n  let num89 = 0;\n  let num90 = 0;\n  let num91 = 0;\n  let num92 = 0;\n  let num93 = 0;\n  let num94 = 0;\n  let num95 = 0;\n  let num96 = 0;\n  let num97 = 0;\n  let num98 = 0;\n  let num99 = 0;\n  let num100 = 0;\n  let num101 = 0;\n  let num102 = 0;\n  let num103 = 0;\n  let num104 = 0;\n  let num105 = 0;\n  let num106 = 0;\n  let num107 = 0;\n  let num108 = 0;\n  let num109 = 0;\n  let num110 = 0;\n  let num111 = 0;\n  let num112 = 0;\n  let num113 = 0;\n  let num114 = 0;\n  let num115 = 0;\n  let num116 = 0;\n  let num117 = 0;\n  let num118 = 0;\n  let num119 = 0;\n  let num120 = 0;\n  let num121 = 0;\n  let num122 = 0;\n  let num123 = 0;\n  let num124 = 0;\n  let num125 = 0;\n  let num126 = 0;\n  let num127 = 0;\n  let num128 = 0;\n  let num129 = 0;\n  let num130 = 0;\n  let num131 = 0;\n  let num132 = 0;\n  let num133 = 0;\n  let num134 = 0;\n  let num135 = 0;\n  let num136 = 0;\n  let num137 = 0;\n  let num138 = 0;\n  let num139 = 0;\n  let num140 = 0;\n  let num141 = 0;\n  let num142 = 0;\n  let num143 = 0;\n  let num144 = 0;\n  let num145 = 0;\n  let num146 = 0;\n  let num147 = 0;\n  let num148 = 0;\n  let num149 = 0;\n  let num150 = 0;\n  let num151 = 0;\n  let num152 = 0;\n  let num153 = 0;\n  let num154 = 0;\n  let num155 = 0;\n  let num156 = 0;\n  let num157 = 0;\n  let num158 = 0;\n  let num159 = 0;\n  let num160 = 0;\n  let num161 = 0;\n  let num162 = 0;\n  let num163 = 0;\n  let num164 = 0;\n  let num165 = 0;\n  let num166 = 0;\n  let num167 = 0;\n  let num168 = 0;\n  let num169 = 0;\n  let num170 = 0;\n  let num171 = 0;\n  let num172 = 0;\n  let num173 = 0;\n  let num174 = 0;\n  let num175 = 0;\n  let num176 = 0;\n  let num177 = 0;\n  let num178 = 0;\n  let num179 = 0;\n  let num180 = 0;\n  let num181 = 0;\n  let num182 = 0;\n  let num183 = 0;\n  let num184 = 0;\n  let num185 = 0;\n  let num186 = 0;\n  let num187 = 0;\n  let num188 = 0;\n  let num189 = 0;\n  let num190 = 0;\n  let num191 = 0;\n  let num192 = 0;\n  let num193 = 0;\n  let num194 = 0;\n  let num195 = 0;\n  let num196 = 0;\n  let num197 = 0;\n  let num198 = 0;\n  let num199 = 0;\n  let num200 = 0;\n  let num201 = 0;\n  let num202 = 0;\n  let num203 = 0;\n  let num204 = 0;\n  let num205 = 0;\n  let num206 = 0;\n  let num207 = 0;\n  let num208 = 0;\n  let num209 = 0;\n  let num210 = 0;\n  let num211 = 0;\n  let num212 = 0;\n  let num213 = 0;\n  let num214 = 0;\n  let num215 = 0;\n  let num216 = 0;\n  let num217 = 0;\n  let num218 = 0;\n  let num219 = 0;\n  let num220 = 0;\n  let num221 = 0;\n  let num222 = 0;\n  let num223 = 0;\n  let num224 = 0;\n  let num225 = 0;\n  let num226 = 0;\n  let num227 = 0;\n  let num228 = 0;\n  let num229 = 0;\n  let num230 = 0;\n  let num231 = 0;\n  let num232 = 0;\n  let num233 = 0;\n  let num234 = 0;\n  let num235 = 0;\n  let num236 = 0;\n  let num237 = 0;\n  let num238 = 0;\n  let num239 = 0;\n  let num240 = 0;\n  let num241 = 0;\n  let num242 = 0;\n  let num243 = 0;\n  let num244 = 0;\n  let num245 = 0;\n  let num246 = 0;\n  let num247 = 0;\n  let num248 = 0;\n  let num249 = 0;\n  let num250 = 0;\n  let num251 = 0;\n  let num252 = 0;\n  let num253 = 0;\n  let num254 = 0;\n  let num255 = 0;\n  let num256 = 0;\n  let num257 = 0;\n  let num258 = 0;\n  let num259 = 0;\n  let num260 = 0;\n  let num261 = 0;\n  let num262 = 0;\n  let num263 = 0;\n  let num264 = 0;\n  let num265 = 0;\n  let num266 = 0;\n  let num267 = 0;\n  let num268 = 0;\n  let num269 = 0;\n  let num270 = 0;\n  let num271 = 0;\n  let num272 = 0;\n  let num273 = 0;\n  let num274 = 0;\n  let num275 = 0;\n  let num276 = 0;\n  let num277 = 0;\n  let num278 = 0;\n  let num279 = 0;\n  let num280 = 0;\n  let num281 = 0;\n  let num282 = 0;\n  let num283 = 0;\n  let num284 = 0;\n  let num285", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/103", "prompt": "/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN two poSitive IntEGers n and m, and yoUR Task Is to compute tHe\n  averAge OF thE inTEgeRs FrOm n thrOUgH m (IncLUdIng n and m). \n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const [n, m] = [Number(n), Number(m)];\n  if (n < m) {\n    return -1;\n  }\n  return `${(n / Math.pow(10, m)).toFixed(2)}`;\n};\n\n/**\n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvgToNearest = (n, m) => {\n  const [n, m] = [Number(n), Number(m)];\n  if (n < m) {\n    return -1;\n  }\n  return `${(n / Math.pow(10, m)).toFixed(2)}`;\n};\n\n/**\n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvgToNearestToNearest = (n, m) => {\n  const [n, m] = [Number(n), Number(m)];\n  if (n < m) {\n    return -1;\n  }\n  return `${(n / Math.pow(10, m)).toFixed(2)}`;\n};\n\n/**\n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvgToNearestToNearestToNearest = (n, m) => {\n  const [n, m] = [Number(n), Number(m)];\n  if (n < m) {\n    return -1;\n  }\n  return `${(n / Math.pow(10, m)).toFixed(2)}`;\n};\n\n/**\n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvgToNearestToNearestToNearestToNearest = (n, m) => {\n  const [n, m] = [Number(n), Number(m)];\n  if (n < m) {\n    return -1;\n  }\n  return `${(n / Math.pow(10, m)).toFixed(2)}`;\n};\n\n/**\n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvgToNearestToNearestToNearestToNearestToNearest = (n, m) => {\n  const [n, m] = [Number(n), Number(m)];\n  if (n < m) {\n    return -1;\n  }\n  return `${(n / Math.pow(10, m)).toFixed(2)}`;\n};\n\n/**\n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvgToNearestToNearestToNearestToNearestToNearestToNearestToNearest = (n, m) => {\n  const [n, m] = [Number(n), Number(m)];\n  if (n < m) {\n    return -1;\n  }\n  return `${(n / Math.pow(10, m)).toFixed(2)}`;\n};\n\n/**\n  Round the ANsweR to The Nearest INteGer AnD coNveRt tHAt TO biNARy.\n  If n IS greATeR thAN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvgToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNearestToNea", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/104", "prompt": "/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Even diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a list OF pOSitive IntegeRs x. return a SOrted list of all \n  elEMEnts That hasn't any Even diGit.\n\n  nOte: retURneD list sHoUld be SOrTEd in iNCrEasing order.\n  \n  For EXampLe:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const listOfOte = x.filter(x => x % 2 === 0)\n  const listOfEven = x.filter(x => x % 2!== 0)\n  const listOfOteEven = listOfOte.filter(x => x % 2 === 0)\n  const listOfEvenOte = listOfEven.filter(x => x % 2!== 0)\n  const listOfOteEvenOte = listOfOteEven.filter(x => x % 2 === 0)\n  const listOfOteEvenOteEven = listOfOteEvenOte.filter(x => x % 2!== 0)\n  const listOfOteEvenOteEvenOte = listOfOteEvenOteEven.filter(x => x % 2 === 0)\n  const listOfOteEvenOteEvenOteEven = listOfOteEvenOteEvenOte.filter(x => x % 2!== 0)\n  const listOfOteEvenOteEvenOteEvenOte = listOfOteEvenOteEvenOteEven.filter(x => x % 2 === 0)\n  const listOfOteEvenOteEvenOteEvenOteEven = listOfOteEvenOteEvenOteEvenOte.filter(x => x % 2!== 0)\n  const listOfOteEvenOteEvenOteEvenOteEvenOte = listOfOteEvenOteEvenOteEvenOteEven.filter(x => x % 2 === 0)\n  const listOfOteEvenOteEvenOteEvenOteEvenOteEven = listOfOteEvenOteEvenOteEvenOteEvenOte.filter(x => x % 2!== 0)\n  const listOfOteEvenOteEvenOteEvenOteEvenOteEvenOte = listOfOteEvenOteEvenOteEvenOteEvenOteEven.filter(x => x % 2 === 0)\n  const listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEven = listOfOteEvenOteEvenOteEvenOteEvenOteEvenOte.filter(x => x % 2!== 0)\n  const listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOte = listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEven.filter(x => x % 2 === 0)\n  const listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOte = listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOte.filter(x => x % 2!== 0)\n  const listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEven = listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEven.filter(x => x % 2 === 0)\n  const listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOte = listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOte.filter(x => x % 2!== 0)\n  const listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOte = listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOte.filter(x => x % 2 === 0)\n  const listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOte = listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOte.filter(x => x % 2!== 0)\n  const listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOte = listOfOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEvenOteEven", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  given AN aRRay of iNtegerS, soRT the integers THAt arE between 1 and 9 iNclusiVe,\n  rEVerSe tHE reSuLtIng arRAy, ANd tHEn Replace each digIT by iTs cOrrEspondiNG naMe fRoM\n  \"OnE\", \"TwO\", \"ThREe\", \"fOur\", \"fIVe\", \"SiX\", \"seveN\", \"eiGht\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given AN aRRay of iNtegerS, soRT the integers THAt arE between 1 and 9 iNclusiVe,\n  rEVerSe tHE reSuLtIng arRAy, ANd tHEn Replace each digIT by iTs cOrrEspondiNG naMe fRoM\n  \"OnE\", \"TwO\", \"ThREe\", \"fOur\", \"fIVe\", \"SiX\", \"seveN\", \"eiGht\", \"nIne\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSort = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLength = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSort = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortByLength = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortByLengthReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortByLengthSortByLength = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortByLengthSortByLengthReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortByLengthSortByLengthSortByLength = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortByLengthSortByLengthSortByLengthReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLength = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLengthReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLength = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLengthReverse = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLength = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLength = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] < 10) {\n      ret.push(arr[i]);\n    } else {\n      ret.push(arr[i].toString());\n    }\n  }\n  return ret;\n};\n\nconst byLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLengthSortByLength = (arr) => {\n  let len = arr.length;\n  let ret = [];\n  for (let i = 0; i < len; i++) {\n    if (arr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const f = (n) => {\n    if (n <= 1) {\n      return [n];\n    }\n    return f(n - 1) + [...f(n - 2),...f(n - 1)];\n  };\n  return f(n);\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const f = (n) => {\n    if (n <= 1) {\n      return [n];\n    }\n    return f(n - 1) + [...f(n - 2),...f(n - 1)];\n  };\n  return f(n);\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const f = (n) => {\n    if (n <= 1) {\n      return [n];\n    }\n    return f(n - 1) + [...f(n - 2),...f(n - 1)];\n  };\n  return f(n);\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const f = (n) => {\n    if (n <= 1) {\n      return [n];\n    }\n    return f(n - 1) + [...f(n - 2),...f(n - 1)];\n  };\n  return f(n);\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const f = (n) => {\n    if (n <= 1) {\n      return [n];\n    }\n    return f(n - 1) + [...f(n - 2),...f(n - 1)];\n  };\n  return f(n);\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const f = (n) => {\n    if (n <= 1) {\n      return [n];\n    }\n    return f(n - 1) + [...f(n - 2),...f(n - 1)];\n  };\n  return f(n);\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const f = (n) => {\n    if (n <= 1) {\n      return [n];\n    }\n    return f(n - 1) + [...f(n - 2),...f(n - 1)];\n  };\n  return f(n);\n};\n\n/* impleMEnT The funCtion f tHat TAkes n as a paramETEr,\n  anD returns a list of sIze n, sucH thAT thE vaLUe oF tHe ElemeNT aT IndEX i iS the factorial oF i If i is EveN\n  or The sum oF NumBerS fRom 1 To i oTheRWiSE.\n  i stARTs frOM 1.\n  the FAcTorIAl of i IS ThE MultiPLicatioN of thE NUMbErS from 1 to i (1 * 2 *... * ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  given A PoSItive iNteger n, return A tuple thAT has the numbeR OF eveN and odd\n  integEr paliNdrOMes ThaT FalL wItHin thE RaNGe(1, n), iNClUsive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A PoSItive iNteger n, return A tuple thAT has the numbeR OF eveN and odd\n  integEr paliNdrOMes ThaT FalL wItHin thE RaNGe(1, n), iNClUsive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenPalindromes = Array.from({length: n}, (_, i) => i);\n  const oddPalindromes = Array.from({length: n}, (_, i) => i + 1);\n  const evenOddPalindrome = evenPalindromes.reduce((acc, i) => {\n    if (i % 2 === 0) {\n      acc.push(evenPalindromes[i]);\n    } else {\n      acc.push(oddPalindromes[i]);\n    }\n    return acc;\n  }, []);\n  return evenOddPalindrome;\n};\n\n/*\n  Given a positive integer n, return an array containing all positive integers that\n  are divisible by both 2 and n.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 3]\n      Explanation:\n      All positive integers divisible by 2 and 3 are [2, 3].\n\n  Example 2:\n\n      Input: 12\n      Output: [2, 3, 4, 5, 6, 7, 8, 9, 11, 12]\n      Explanation:\n      All positive integers divisible by 2 and 3 are [2, 3].\n*/\nconst divisibleByTwoAndN = (n) => {\n  const divisibleByTwoAndN = [2, 3];\n  const divisibleByTwoAndNEven = divisibleByTwoAndN.filter((i) => i % 2 === 0);\n  const divisibleByTwoAndNOdd = divisibleByTwoAndN.filter((i) => i % 2!== 0);\n  return divisibleByTwoAndNEven.concat(divisibleByTwoAndNOdd);\n};\n\n/*\n  Given a positive integer n, return an array containing all positive integers that\n  are divisible by both 2 and n.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 3]\n      Explanation:\n      All positive integers divisible by 2 and 3 are [2, 3].\n\n  Example 2:\n\n      Input: 12\n      Output: [2, 3, 4, 5, 6, 7, 8, 9, 11, 12]\n      Explanation:\n      All positive integers divisible by 2 and 3 are [2, 3].\n*/\nconst divisibleByTwoAndNEven = (n) => {\n  const divisibleByTwoAndNEven = [2, 3];\n  const divisibleByTwoAndNEvenEven = divisibleByTwoAndNEven.filter((i) => i % 2 === 0);\n  const divisibleByTwoAndNEvenOdd = divisibleByTwoAndNEven.filter((i) => i % 2!== 0);\n  return divisibleByTwoAndNEvenEven.concat(divisibleByTwoAndNEvenOdd);\n};\n\n/*\n  Given a positive integer n, return an array containing all positive integers that\n  are divisible by both 2 and n.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 3]\n      Explanation:\n      All positive integers divisible by 2 and 3 are [2, 3].\n\n  Example 2:\n\n      Input: 12\n      Output: [2, 3, 4, 5, 6, 7, 8, 9, 11, 12]\n      Explanation:\n      All positive integers divisible by 2 and 3 are [2, 3].\n*/\nconst divisibleByTwoAndNOdd = (n) => {\n  const divisibleByTwoAndNOdd = [2, 3];\n  const divisibleByTwoAndNOddEven = divisibleByTwoAndNOdd.filter((i) => i % 2 === 0);\n  const divisibleByTwoAndNOddOdd = divisibleByTwoAndNOdd.filter((i) => i % 2!== 0);\n  return divisibleByTwoAndNOddEven.concat(divisibleByTwoAndNOddOdd);\n};\n\n/*\n  Given a positive integer n, return an array containing all positive integers that\n  are divisible by both 2 and n.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 3]\n      Explanation:\n      All positive integers divisible by 2 and 3 are [2, 3].\n\n  Example 2:\n\n      Input: 12\n      Output: [2, 3, 4, 5, 6, 7, 8, 9, 11, 12]\n      Explanation:\n      All positive integers divisible by 2 and 3 are [2, 3].\n*/\nconst divisibleByTwo = (n) => {\n  const divisibleByTwo = [2, 3];\n  const divisibleByTwoEven = divisibleByTwo.filter((i) => i % 2 === 0);\n  const divisibleByTwoOdd = divisibleByTwo.filter((i) => i % 2!== 0);\n  return divisibleByTwoEven.concat(divisibleByTwoOdd);\n};\n\n/*\n  Given a positive integer n, return an array containing all positive integers that\n  are divisible by both 2 and n.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 3]\n      Explanation:\n      All positive integers divisible by 2 and 3 are [2, 3].\n\n  Example 2:\n\n      Input: 12\n      Output: [2, 3, 4, 5, 6, 7, 8, 9, 11, 12]\n      Explanation:\n      All positive integers divisible by 2 and 3 are [2, 3].\n*/\nconst divisibleByTwoEven = (n) => {\n  const divisibleByTwoEven = [2, 3];\n  const divisibleByTwoEvenEven = divisibleByTwoEven.filter((i) => i % 2 === 0);\n  const divisibleByTwoEvenOdd = divisibleByTwoEven.filter((i) => i % 2!== 0);\n  return divisibleByTwoEvenEven.concat(divisibleByTwoEvenOdd);\n};\n\n/*\n  Given a positive integer n, return an array containing all positive integers that\n  are divisible by both 2 and n.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 3]\n      Explanation:\n      All positive integers divisible by 2 and 3 are [2, 3].\n\n  Example 2:\n\n      Input: 12\n      Output: [2, 3, 4, 5, 6, 7, 8, 9, 11, 12]\n      Explanation:\n      All positive integers divisible by 2 and 3 are [2, 3].\n*/\nconst divisibleByTwoOdd = (n) => {\n  const divisibleByTwoOdd = [2, 3];\n  const divisibleByTwoOddEven = divisibleByTwoOdd.filter((i) => i % 2 === 0);\n  const divisibleByTwoOddOdd = divisibleByTwoOdd.filter((i) => i % 2!== 0);\n  return divisibleByTwoOddEven.concat(divisibleByTwoOddOdd);\n};\n\n/*\n  Given a positive integer n, return an array containing all positive integers that\n  are divisible by both 2 and n.\n\n  Example 1:\n\n      Input: 3\n      Output: [2, 3]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let num = 0;\n  let negate = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      negate = true;\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    num++;\n  }\n  if (num > 0) {\n    return sum;\n  } else {\n    return negate? -sum : sum;\n  }\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let num = 0;\n  let negate = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      negate = true;\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    num++;\n  }\n  if (num > 0) {\n    return sum;\n  } else {\n    return negate? -sum : sum;\n  }\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let num = 0;\n  let negate = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      negate = true;\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    num++;\n  }\n  if (num > 0) {\n    return sum;\n  } else {\n    return negate? -sum : sum;\n  }\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let num = 0;\n  let negate = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      negate = true;\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    num++;\n  }\n  if (num > 0) {\n    return sum;\n  } else {\n    return negate? -sum : sum;\n  }\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let num = 0;\n  let negate = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      negate = true;\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    num++;\n  }\n  if (num > 0) {\n    return sum;\n  } else {\n    return negate? -sum : sum;\n  }\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let num = 0;\n  let negate = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      negate = true;\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    num++;\n  }\n  if (num > 0) {\n    return sum;\n  } else {\n    return negate? -sum : sum;\n  }\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > 0.\n  IF A nUmber is negativE, Then Its FirSt signeD DigIt wIlL be NegAtiVE:\n  e.G. -123 Has SIGned DIgitS -1, 2, AnD 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let num = 0;\n  let negate = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      negate = true;\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    num++;\n  }\n  if (num > 0) {\n    return sum;\n  } else {\n    return negate? -sum : sum;\n  }\n};\n\n/*\n  write A FuNCtion countNums wHich taKes AN array of inteGERs anD returns\n  the nUmber oF elEMenTs wHIch HaS a Sum of DIgITs > ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*WE have AN aRRay 'arr' of N IntegeRs arr[1], arr[2], ..., arr[N].The\n  nUMbers in the arraY WIll bE randomly ordEred. YoUr tASk iS to DEteRmInE if\n  it IS pOSsiBLe To get an array soRTed in nOn-dEcrEasing oRDer By pErForMinG \n  thE FoLLowING opeRAtioN On The GIven ARRaY:\n      you arE Allowed To perFORM rIgHt shift OpERation ANy numBer Of timEs.\n  \n  ONE Right SHIFT opErATion mEANs shIFting all elemenTs oF the arraY bY one\n  posiTiON in tHE RiGHt DirectiOn. ThE laST elEMEnt of the Array Will be moVEd to\n  thE STaRTinG posiTIOn in tHe ArRay i.e. 0th index. \n\n  If it iS PossiBLE To obTaIn tHE sOrteD ArrAy by pERfOrmIng thE aboVe opeRation\n  TheN return trUe ELse return falSE.\n  if the gIveN aRraY is empTY THen return TRue.\n\n  NotE: THe gIVeN list is guarantEed to Have unIqUe elemeNts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WE have AN aRRay 'arr' of N IntegeRs arr[1], arr[2],..., arr[N].The\n  nUMbers in the arraY WIll bE randomly ordEred. YoUr tASk iS to DEteRmInE if\n  it IS pOSsiBLe To get an array soRTed in nOn-dEcrEasing oRDer By pErForMinG \n  thE FoLLowING opeRAtioN On The GIven ARRaY:\n      you arE Allowed To perFORM rIgHt shift OpERation ANy numBer Of timEs.\n  \n  ONE Right SHIFT opErATion mEANs shIFting all elemenTs oF the arraY bY one\n  posiTiON in tHE RiGHt DirectiOn. ThE laST elEMEnt of the Array Will be moVEd to\n  thE STaRTinG posiTIOn in tHe ArRay i.e. 0th index. \n\n  If it iS PossiBLE To obTaIn tHE sOrteD ArrAy by pERfOrmIng thE aboVe opeRation\n  TheN return trUe ELse return falSE.\n  if the gIveN aRraY is empTY THen return TRue.\n\n  NotE: THe gIVeN list is guarantEed to Have unIqUe elemeNts.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const n = arr.length;\n  let i = n - 1;\n  let j = n - 1;\n  let k = n - 1;\n  let l = n - 1;\n  let m = n - 1;\n  let n = n - 1;\n  let o = n - 1;\n  let p = n - 1;\n  let q = n - 1;\n  let r = n - 1;\n  let s = n - 1;\n  let t = n - 1;\n  let u = n - 1;\n  let v = n - 1;\n  let w = n - 1;\n  let x = n - 1;\n  let y = n - 1;\n  let z = n - 1;\n  let a = n - 1;\n  let b = n - 1;\n  let c = n - 1;\n  let d = n - 1;\n  let e = n - 1;\n  let f = n - 1;\n  let g = n - 1;\n  let h = n - 1;\n  let i = n - 1;\n  let j = n - 1;\n  let k = n - 1;\n  let l = n - 1;\n  let m = n - 1;\n  let n = n - 1;\n  let o = n - 1;\n  let p = n - 1;\n  let q = n - 1;\n  let r = n - 1;\n  let s = n - 1;\n  let t = n - 1;\n  let u = n - 1;\n  let v = n - 1;\n  let w = n - 1;\n  let x = n - 1;\n  let y = n - 1;\n  let z = n - 1;\n  let a = n - 1;\n  let b = n - 1;\n  let c = n - 1;\n  let d = n - 1;\n  let e = n - 1;\n  let f = n - 1;\n  let g = n - 1;\n  let h = n - 1;\n  let i = n - 1;\n  let j = n - 1;\n  let k = n - 1;\n  let l = n - 1;\n  let m = n - 1;\n  let n = n - 1;\n  let o = n - 1;\n  let p = n - 1;\n  let q = n - 1;\n  let r = n - 1;\n  let s = n - 1;\n  let t = n - 1;\n  let u = n - 1;\n  let v = n - 1;\n  let w = n - 1;\n  let x = n - 1;\n  let y = n - 1;\n  let z = n - 1;\n  let a = n - 1;\n  let b = n - 1;\n  let c = n - 1;\n  let d = n - 1;\n  let e = n - 1;\n  let f = n - 1;\n  let g = n - 1;\n  let h = n - 1;\n  let i = n - 1;\n  let j = n - 1;\n  let k = n - 1;\n  let l = n - 1;\n  let m = n - 1;\n  let n = n - 1;\n  let o = n - 1;\n  let p = n - 1;\n  let q = n - 1;\n  let r = n - 1;\n  let s = n - 1;\n  let t = n - 1;\n  let u = n - 1;\n  let v = n - 1;\n  let w = n - 1;\n  let x = n - 1;\n  let y = n - 1;\n  let z = n - 1;\n  let a = n - 1;\n  let b = n - 1;\n  let c = n - 1;\n  let d = n - 1;\n  let e = n - 1;\n  let f = n - 1;\n  let g = n - 1;\n  let h = n - 1;\n  let i = n - 1;\n  let j = n - 1;\n  let k = n - 1;\n  let l = n - 1;\n  let m = n - 1;\n  let n = n - 1;\n  let o = n - 1;\n  let p = n - 1;\n  let q = n - 1;\n  let r = n - 1;\n  let s = n - 1;\n  let t = n - 1;\n  let u = n - 1;\n  let v = n - 1;\n  let w = n - 1;\n  let x = n - 1;\n  let y = n - 1;\n  let z = n - 1;\n  let a = n - 1;\n  let b = n - 1;\n  let c = n - 1;\n  let d = n - 1;\n  let e = n - 1;\n  let f = n - 1;\n  let g = n - 1;\n  let h = n - 1;\n  let i = n - 1;\n  let j = n - 1;\n  let k = n - 1;\n  let l = n - 1;\n  let m = n - 1;\n  let n = n - 1;\n  let o = n - 1;\n  let p = n - 1;\n  let q = n - 1;\n  let r = n - 1;\n  let s = n - 1;\n  let t = n - 1;\n  let u = n - 1;\n  let v = n - 1;\n  let w = n - 1;\n  let x = n - 1;\n  let y = n - 1;\n  let z = n - 1;\n  let a = n - 1;\n  let b = n - 1;\n  let c = n - 1;\n  let d = n - 1;\n  let e = n - 1;\n  let f = n - 1;\n  let g = n - 1;\n  let h = n - 1;\n  let i = n - 1;\n  let j = n - 1;\n  let k = n - 1;\n  let l = n - 1;\n  let m = n - 1;\n  let n = n - 1;\n  let o = n - 1;\n  let p = n - 1;\n  let q = n - 1;\n  let r = n - 1;\n  let s = n - 1;\n  let t = n - 1;\n  let u = n - 1;\n  let v = n - 1;\n  let w = n - 1;\n  let x = n - 1;\n  let y = n - 1;\n  let z = n - 1;\n  let a = n - 1;\n  let b = n - 1;\n  let c = n - 1;\n  let d = n - 1;\n  let e = n - 1;\n  let f = n - 1;\n  let g = n - 1;\n  let h = n - 1;\n  let i = n - 1;\n  let j = n - 1;\n  let k = n - 1;\n  let l = n - 1;\n  let m = n - 1;\n  let n = n - 1;\n  let o = n - 1;\n  let p = n - 1;\n  let q = n - 1;\n  let r = n - 1;\n  let s = n - 1;\n  let t = n - 1;\n  let u = n - 1;\n  let v = n - 1;\n  let w = n - 1;\n  let x = n - 1;\n  let y = n - 1;\n  let z = n - 1;\n  let a = n - 1;\n  let b = n - 1;\n  let c = n - 1;\n  let d = n - 1;\n  let e = n - 1;\n  let f = n - 1;\n  let g = n - 1;\n  let h = n - 1;\n  let i = n - 1;\n  let j = n - 1;\n  let k = n - 1;\n  let l = n - 1;\n  let m = n - 1;\n  let n = n - 1;\n  let o = n - 1;\n  let p = n - 1;\n  let q = n - 1;\n  let r = n - 1;\n  let s = n - 1;\n  let t = n - 1;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* input ARe TWo striNgs a and b ConSIsting only of 1S ANd 0s.\n  PErform binary xOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* input ARe TWo striNgs a and b ConSIsting only of 1S ANd 0s.\n  PErform binary xOR on tHesE InpUts ANd return rEsUlT also AS a sTRinG.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let aAsString = a.toString()\n  let bAsString = b.toString()\n  let aLen = aAsString.length\n  let bLen = bAsString.length\n  let aAsInt = 0\n  let bAsInt = 0\n  let aAsChar\n  let bAsChar\n  let aAsChars\n  let bAsChars\n  let aAsCharsAsInt\n  let bAsCharsAsInt\n  let aAsCharsAsIntAsChar\n  let bAsCharsAsIntAsChar\n  let aAsCharsAsIntAsChars\n  let bAsCharsAsIntAsChars\n  let aAsCharsAsIntAsCharsAsInt\n  let bAsCharsAsIntAsCharsAsInt\n  let aAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsChars\n  let bAsCharsAsIntAsCharsAsIntAsChars\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsInt\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let aAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsChar\n  let bAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAsCharsAsIntAs", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/110", "prompt": "/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = lst1.length;\n  let j = lst2.length;\n  let retVal = false;\n  while (i > 0 && j > 0) {\n    if (lst1[i] === lst2[j]) {\n      retVal = true;\n      i--;\n      j--;\n    } else if (lst1[i] > lst2[j]) {\n      j--;\n    } else {\n      i--;\n    }\n  }\n  return retVal;\n};\n\n/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = lst1.length;\n  let j = lst2.length;\n  let retVal = false;\n  while (i > 0 && j > 0) {\n    if (lst1[i] === lst2[j]) {\n      retVal = true;\n      i--;\n      j--;\n    } else if (lst1[i] > lst2[j]) {\n      j--;\n    } else {\n      i--;\n    }\n  }\n  return retVal;\n};\n\n/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = lst1.length;\n  let j = lst2.length;\n  let retVal = false;\n  while (i > 0 && j > 0) {\n    if (lst1[i] === lst2[j]) {\n      retVal = true;\n      i--;\n      j--;\n    } else if (lst1[i] > lst2[j]) {\n      j--;\n    } else {\n      i--;\n    }\n  }\n  return retVal;\n};\n\n/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = lst1.length;\n  let j = lst2.length;\n  let retVal = false;\n  while (i > 0 && j > 0) {\n    if (lst1[i] === lst2[j]) {\n      retVal = true;\n      i--;\n      j--;\n    } else if (lst1[i] > lst2[j]) {\n      j--;\n    } else {\n      i--;\n    }\n  }\n  return retVal;\n};\n\n/*IN this PRoBLem, you Will imPleMEnt a function THAt taKes two lists oF numbeRs,\n  aND deTerMIneS wHeTher iT Is POssIBlE to perform an exchange of ELemeNts\n  BetWeen theM To mAke lst1 A list oF onLy eVen NUmBErs.\n  tHEre iS No liMIt On tHE numBER oF ExchaNGed elemEnts bETWEeN lst1 aNd lst2.\n  If it iS pOSsible TO exchange elemEntS betwEen THE lst1 and lst2 tO MAKE\n  alL tHE elemENTs of lst1 TO be even, return \"YES\".\n  OtheRwiSe, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = lst1.length;\n  let j = lst2.length;\n  let retVal = false;\n  while (i > 0 && j > 0) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a sTRiNG repreSentinG a spACe separated lOWErcaSe letters, return a dicTionarY\n  of THe lEttER wiTh ThE most REpETitIOn And containing tHE corResPonDing couNT.\n  If SevErAl lEttErs HAvE The SAMe ocCUrreNCe, return All OF theM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const tests = test.split(' ').map(s => s.trim());\n  const result = {};\n  tests.forEach(s => {\n    const [word, count] = s.split(' ');\n    result[word] = result[word] || { [word]: 0 };\n    result[word][word] = result[word][word] || { [word]: 0 };\n    result[word][word][word] = result[word][word][word] || { [word]: 0 };\n    result[word][word][word][word] = result[word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word] = result[word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word] = result[word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word] = result[word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word] = result[word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word] = result[word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word] = result[word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word] = result[word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word] = result[word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word] = result[word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word] = result[word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word] = result[word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word] = result[word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word][word] || { [word]: 0 };\n    result[word][word][word][word][word][word][word] = result[word][word][word][word][word][word][word][word", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/112", "prompt": "/*TAsk\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*TAsk\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = s.split(\"\").reverse().join(\"\");\n  if (c === \"\") {\n    return result;\n  }\n  let newResult = reverseDelete(s, c);\n  return [result, newResult === result];\n};\n\n/*\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDeleteAll = (s, c) => {\n  let result = s.split(\"\").reverse().join(\"\");\n  if (c === \"\") {\n    return result;\n  }\n  let newResult = reverseDeleteAll(s, c);\n  return [result, newResult === result];\n};\n\n/*\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDeleteAllButLast = (s, c) => {\n  let result = s.split(\"\").reverse().join(\"\");\n  if (c === \"\") {\n    return result;\n  }\n  let newResult = reverseDeleteAllButLast(s, c);\n  return [result, newResult === result];\n};\n\n/*\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDeleteAllButLastButFirst = (s, c) => {\n  let result = s.split(\"\").reverse().join(\"\");\n  if (c === \"\") {\n    return result;\n  }\n  let newResult = reverseDeleteAllButLastButFirst(s, c);\n  return [result, newResult === result];\n};\n\n/*\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDeleteAllButLastButFirstButLast = (s, c) => {\n  let result = s.split(\"\").reverse().join(\"\");\n  if (c === \"\") {\n    return result;\n  }\n  let newResult = reverseDeleteAllButLastButFirstButLast(s, c);\n  return [result, newResult === result];\n};\n\n/*\n  We ARe GIven twO strinGs s aND c, you have to deLETed aLl the charactErs in s thaT arE EquAl tO Any ChArActer in c\n  THeN CheCK iF the result striNG is pAliNdrOme.\n  A strINg iS caLlEd pAliNdrOMe IF it REAds tHE samE BaCkwARd as FORwARd.\n  You SHould return a tuple cOntaiNING tHe Result sTrINg and tRUe/falSe fOr the CheCK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDeleteAllButLastButFirstButLastButFirst = (s, c) => {\n  let result = s.split(\"\").reverse().join(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/113", "prompt": "/*GIven a list OF sTRings, wHere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a list OF sTRings, wHere eaCh sTRing consists OF Only Digits, return a list.\n  Each eLement i Of tHE ouTpuT ShoUlD bE \"the nUMbER of ODd Elements in the\n  strINg i of The InpUt.\" where ALl tHe i's sHoUld Be rEplACeD By tHE NumbER\n  of oDD dIgiTS in the i'th STRiNG of thE Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the maximum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the maximum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the maximum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the maximum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the maximum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the maximum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the maximum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the minimum sUM Of anY non-empty sub-Array\n  oF nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  given AN aRRay of iNtegerS nums, fiND the maximum ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  you arE GiVEn a recTangulAr grid oF Wells. Each row REPresEnts a single wEll,\n  and EacH 1 in A roW rePResEnTs A singLE uNIt oF WaTer.\n  Each well has A CorrEspOndIng buckET thAt cAn Be uSed To eXTrACt wATEr frOM it, \n  aND aLl bUCketS HAvE The saME capacity.\n  Your taSk is tO USE tHe Buckets To EMpty thE Wells.\n  outPut thE nuMBEr of tIMES You NeED to loWER the BUckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn a recTangulAr grid oF Wells. Each row REPresEnts a single wEll,\n  and EacH 1 in A roW rePResEnTs A singLE uNIt oF WaTer.\n  Each well has A CorrEspOndIng buckET thAt cAn Be uSed To eXTrACt wATEr frOM it, \n  aND aLl bUCketS HAvE The saME capacity.\n  Your taSk is tO USE tHe Buckets To EMpty thE Wells.\n  outPut thE nuMBEr of tIMES You NeED to loWER the BUckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = [];\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                row.push(1);\n            } else {\n                row.push(0);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 1) {\n                row.push(1);\n            } else {\n                row.push(0);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n                row.push(0);\n            } else {\n                row.push(1);\n            }\n        }\n        result.push(row);\n    }\n    \n    for (let i = 0; i < n; i++) {\n        const row = [];\n        for (let j = 0; j < m; j++) {\n            if (result[i][j] === 0) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n  it muST bE imPLemeNTEd LIke thIS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted;\n};\n\n/**\n  in thiS kaTA, you haVe to soRt aN Array of non-neGATive Integers accoRding tO\n  nuMBer Of oNEs in tHeIr BinarY RePResENtAtion in ascending ORder.\n  for SimIlar numBEr oF onEs, SorT baSed ON dECimAL ValuE.\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*GIven a STrINg s and a NaturaL nuMBer n, you have beEN TaskEd to implemenT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a STrINg s and a NaturaL nuMBer n, you have beEN TaskEd to implemenT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a STrIng s, a NaturaL nuMBer n, you have beEN TaskEd to implementT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords2 = (s, n) => {\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a STrIng s, a NaturaL nuMBer n, you have beEN TaskEd to implementT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords3 = (s, n) => {\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a STrIng s, a NaturaL nuMBer n, you have beEN TaskEd to implementT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords4 = (s, n) => {\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a STrIng s, a NaturaL nuMBer n, you have beEN TaskEd to implementT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUld return an EMPTy list.\n  noTe: you maY aSSume thE Input StrIng coNtaINS only LETTErs AnD SpaceS.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords5 = (s, n) => {\n  const words = s.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > n) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a STrIng s, a NaturaL nuMBer n, you have beEN TaskEd to implementT \n  a funcTioN ThaT reTUrnS a list Of All woRDs FRom STrIng s that contain EXactLy \n  n cOnsOnants, in oRDer TheSe WorDs aPpeAR in tHE stRINg s.\n  If THe stRInG s is EMpty THEn THe funCTion shoUl", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*YOu are GIvEN a word. Your Task is To fINd the closest VOWel tHat stands betWeen \n  twO coNSonAntS FroM tHe Right SIdE Of tHE word (cAse sensitive).\n  \n  VoWEls in tHe bEgiNning anD EndIng DoEsn'T coUnt. rEtURn eMPTy stRIng iF YoU diDN't\n  fiND AnY Vowel MEt the abOve coNDITiOn. \n\n  you may aSsUMe that THe givEn sTring ConTAIns EnGLISH leTtER only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN a word. Your Task is To fINd the closest VOWel tHat stands betWeen \n  twO coNSonAntS FroM tHe Right SIdE Of tHE word (cAse sensitive).\n  \n  VoWEls in tHe bEgiNning anD EndIng DoEsn'T coUnt. rEtURn eMPTy stRIng iF YoU diDN't\n  fiND AnY Vowel MEt the abOve coNDITiOn. \n\n  you may aSsUMe that THe givEn sTring ConTAIns EnGLISH leTtER only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsLength = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsLengthInWord = word.length;\n  let vowelsIndexInWord = 0;\n  let vowelsLengthInWordInWord = 0;\n  let vowelsIndexInWordInWord = 0;\n  let vowelsLengthInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsIndexInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = 0;\n  let vowelsLengthInWordIn", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* you arE GiVEn a list of tWo striNgs, BOth strings coNSIst oF open\n  parenthEses '(' or CloSE paRenTHesEs ')' OnLy.\n  YouR JoB Is tO ChEck if it is possiBLe to ConCatEnate thE Two StrInGs in\n  sOme OrdER, tHAt tHE ResuLTing STrIng WIll bE GOoD.\n  a striNG S is conSiderED TO bE gOod if anD oNLy if alL ParenTheSes in S\n  aRe bALAnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* you arE GiVEn a list of tWo striNgs, BOth strings coNSIst oF open\n  parenthEses '(' or CloSE paRenTHesEs ')' OnLy.\n  YouR JoB Is tO ChEck if it is possiBLe to ConCatEnate thE Two StrInGs in\n  sOme OrdER, tHAt tHE ResuLTing STrIng WIll bE GOoD.\n  a striNG S is conSiderED TO bE gOod if anD oNLy if alL ParenTheSes in S\n  aRe bALAnced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const re = /\\(([^)]*)\\)/;\n  const res = re.exec(lst);\n  return res!== null;\n};\n\n/**\n  matchParensOrNot(lst)\n  Returns 'Yes' if there's a way to make a good string, and 'No' otherwise.\n  Examples:\n  matchParensOrNot(['()(', ')']) == 'Yes'\n  matchParensOrNot([')', ')']) == 'No'\n  */\nconst matchParensOrNot = lst => {\n  const re = /\\(([^)]*)\\)/;\n  const res = re.exec(lst);\n  return res!== null;\n};\n\n/**\n  matchParensOrNot(lst)\n  Returns 'Yes' if there's a way to make a good string, and 'No' otherwise.\n  Examples:\n  matchParensOrNot(['()(', ')']) == 'Yes'\n  matchParensOrNot([')', ')']) == 'No'\n  */\nconst matchParensOrNot = lst => {\n  const re = /\\(([^)]*)\\)/;\n  const res = re.exec(lst);\n  return res!== null;\n};\n\n/**\n  matchParensOrNot(lst)\n  Returns 'Yes' if there's a way to make a good string, and 'No' otherwise.\n  Examples:\n  matchParensOrNot(['()(', ')']) == 'Yes'\n  matchParensOrNot([')', ')']) == 'No'\n  */\nconst matchParensOrNot = lst => {\n  const re = /\\(([^)]*)\\)/;\n  const res = re.exec(lst);\n  return res!== null;\n};\n\n/**\n  matchParensOrNot(lst)\n  Returns 'Yes' if there's a way to make a good string, and 'No' otherwise.\n  Examples:\n  matchParensOrNot(['()(', ')']) == 'Yes'\n  matchParensOrNot([')', ')']) == 'No'\n  */\nconst matchParensOrNot = lst => {\n  const re = /\\(([^)]*)\\)/;\n  const res = re.exec(lst);\n  return res!== null;\n};\n\n/**\n  matchParensOrNot(lst)\n  Returns 'Yes' if there's a way to make a good string, and 'No' otherwise.\n  Examples:\n  matchParensOrNot(['()(', ')']) == 'Yes'\n  matchParensOrNot([')', ')']) == 'No'\n  */\nconst matchParensOrNot = lst => {\n  const re = /\\(([^)]*)\\)/;\n  const res = re.exec(lst);\n  return res!== null;\n};\n\n/**\n  matchParensOrNot(lst)\n  Returns 'Yes' if there's a way to make a good string, and 'No' otherwise.\n  Examples:\n  matchParensOrNot(['()(', ')']) == 'Yes'\n  matchParensOrNot([')', ')']) == 'No'\n  */\nconst matchParensOrNot = lst => {\n  const re = /\\(([^)]*)\\)/;\n  const res = re.exec(lst);\n  return res!== null;\n};\n\n/**\n  matchParensOrNot(lst)\n  Returns 'Yes' if there's a way to make a good string, and 'No' otherwise.\n  Examples:\n  matchParensOrNot(['()(', ')']) == 'Yes'\n  matchParensOrNot([')', ')']) == 'No'\n  */\nconst matchParensOrNot = lst => {\n  const re = /\\(([^)]*)\\)/;\n  const res = re.exec(lst);\n  return res!== null;\n};\n\n/**\n  matchParensOrNot(lst)\n  Returns 'Yes' if there's a way to make a good string, and 'No' otherwise.\n  Examples:\n  matchParensOrNot(['()(', ')']) == 'Yes'\n  matchParensOrNot([')', ')']) == 'No'\n  */\nconst matchParensOrNot = lst => {\n  const re = /\\(([^)]*)\\)/;\n  const res = re.exec(lst);\n  return res!== null;\n};\n\n/**\n  matchParensOrNot(lst)\n  Returns 'Yes' if there's a way to make a good string, and 'No' otherwise.\n  Examples:\n  matchParensOrNot(['()(', ')']) == 'Yes'\n  matchParensOrNot([')', ')']) == 'No'\n  */\nconst matchParensOrNot = lst => {\n  const re = /\\(([^)]*)\\)/;\n  const res = re.exec(lst);\n  return res!== null;\n};\n\n/**\n  matchParensOrNot(lst)\n  Returns 'Yes' if there's a way to make a good string, and 'No' otherwise.\n  Examples:\n  matchParensOrNot(['()(', ')']) == 'Yes'\n  matchParensOrNot([')', ')']) == 'No'\n  */\nconst matchParensOrNot = lst => {\n  const re = /\\(([^)]*)\\)/;\n  const res = re.exec(lst);\n  return res!== null;\n};\n\n/**\n  matchParensOrNot(lst)\n  Returns 'Yes' if there's a way to make a good string, and 'No' otherwise.\n  Examples:\n  matchParensOrNot(['()(', ')']) == 'Yes'\n  matchParensOrNot([')', ')']) == 'No'\n  */\nconst matchParensOrNot = lst => {\n  const re = /\\(([^)]*)\\)/;\n  const res = re.exec(lst);\n  return res!== null;\n};\n\n/**\n  matchParensOrNot(lst)\n  Returns 'Yes' if there's a way to make a good string, and 'No' otherwise.\n  Examples:\n  matchParensOrNot(['()(', ')']) == 'Yes'\n  matchParensOrNot([')', ')']) == 'No'\n  */\nconst matchParensOrNot = lst => {\n  const re = /\\(([^)]*)\\)/;\n  const res = re.exec(lst);\n  return res!== null;\n};\n\n/**\n  matchParensOrNot(lst)\n  Returns 'Yes' if there's a way to make a good string, and 'No' otherwise.\n  Examples:\n  matchParensOrNot(['()(', ')']) == 'Yes'\n  matchParensOrNot([')', ')']) == 'No'\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* out of list OF strings, return tHE longest one. ReTurn thE fiRSt one in case of mULTiplE\n  strings of the same leNgth. ReTurN NulL in caSE thE iNpUt list is eMPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* out of list OF strings, return tHE longest one. ReTurn thE fiRSt one in case of mULTiplE\n  strings of the same leNgth. ReTurN NulL in caSE thE iNpUt list is eMPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  let longestLength = 0;\n  let longestString = '';\n  let longestStringLength = 0;\n  let longestStringLengthLength = 0;\n  let longestStringLengthLength2 = 0;\n  let longestStringLengthLength3 = 0;\n  let longestStringLengthLength4 = 0;\n  let longestStringLengthLength5 = 0;\n  let longestStringLengthLength6 = 0;\n  let longestStringLengthLength7 = 0;\n  let longestStringLengthLength8 = 0;\n  let longestStringLengthLength9 = 0;\n  let longestStringLengthLength10 = 0;\n  let longestStringLengthLength11 = 0;\n  let longestStringLengthLength12 = 0;\n  let longestStringLengthLength13 = 0;\n  let longestStringLengthLength14 = 0;\n  let longestStringLengthLength15 = 0;\n  let longestStringLengthLength16 = 0;\n  let longestStringLengthLength17 = 0;\n  let longestStringLengthLength18 = 0;\n  let longestStringLengthLength19 = 0;\n  let longestStringLengthLength20 = 0;\n  let longestStringLengthLength21 = 0;\n  let longestStringLengthLength22 = 0;\n  let longestStringLengthLength23 = 0;\n  let longestStringLengthLength24 = 0;\n  let longestStringLengthLength25 = 0;\n  let longestStringLengthLength26 = 0;\n  let longestStringLengthLength27 = 0;\n  let longestStringLengthLength28 = 0;\n  let longestStringLengthLength29 = 0;\n  let longestStringLengthLength30 = 0;\n  let longestStringLengthLength31 = 0;\n  let longestStringLengthLength32 = 0;\n  let longestStringLengthLength33 = 0;\n  let longestStringLengthLength34 = 0;\n  let longestStringLengthLength35 = 0;\n  let longestStringLengthLength36 = 0;\n  let longestStringLengthLength37 = 0;\n  let longestStringLengthLength38 = 0;\n  let longestStringLengthLength39 = 0;\n  let longestStringLengthLength40 = 0;\n  let longestStringLengthLength41 = 0;\n  let longestStringLengthLength42 = 0;\n  let longestStringLengthLength43 = 0;\n  let longestStringLengthLength44 = 0;\n  let longestStringLengthLength45 = 0;\n  let longestStringLengthLength46 = 0;\n  let longestStringLengthLength47 = 0;\n  let longestStringLengthLength48 = 0;\n  let longestStringLengthLength49 = 0;\n  let longestStringLengthLength50 = 0;\n  let longestStringLengthLength51 = 0;\n  let longestStringLengthLength52 = 0;\n  let longestStringLengthLength53 = 0;\n  let longestStringLengthLength54 = 0;\n  let longestStringLengthLength55 = 0;\n  let longestStringLengthLength56 = 0;\n  let longestStringLengthLength57 = 0;\n  let longestStringLengthLength58 = 0;\n  let longestStringLengthLength59 = 0;\n  let longestStringLengthLength60 = 0;\n  let longestStringLengthLength61 = 0;\n  let longestStringLengthLength62 = 0;\n  let longestStringLengthLength63 = 0;\n  let longestStringLengthLength64 = 0;\n  let longestStringLengthLength65 = 0;\n  let longestStringLengthLength66 = 0;\n  let longestStringLengthLength67 = 0;\n  let longestStringLengthLength68 = 0;\n  let longestStringLengthLength69 = 0;\n  let longestStringLengthLength70 = 0;\n  let longestStringLengthLength71 = 0;\n  let longestStringLengthLength72 = 0;\n  let longestStringLengthLength73 = 0;\n  let longestStringLengthLength74 = 0;\n  let longestStringLengthLength75 = 0;\n  let longestStringLengthLength76 = 0;\n  let longestStringLengthLength77 = 0;\n  let longestStringLengthLength78 = 0;\n  let longestStringLengthLength79 = 0;\n  let longestStringLengthLength80 = 0;\n  let longestStringLengthLength81 = 0;\n  let longestStringLengthLength82 = 0;\n  let longestStringLengthLength83 = 0;\n  let longestStringLengthLength84 = 0;\n  let longestStringLengthLength85 = 0;\n  let longestStringLengthLength86 = 0;\n  let longestStringLengthLength87 = 0;\n  let longestStringLengthLength88 = 0;\n  let longestStringLengthLength89 = 0;\n  let longestStringLengthLength90 = 0;\n  let longestStringLengthLength91 = 0;\n  let longestStringLengthLength92 = 0;\n  let longestStringLengthLength93 = 0;\n  let longestStringLengthLength94 = 0;\n  let longestStringLengthLength95 = 0;\n  let longestStringLengthLength96 = 0;\n  let longestStringLengthLength97 = 0;\n  let longestStringLengthLength98 = 0;\n  let longestStringLengthLength99 = 0;\n  let longestStringLengthLength100 = 0;\n  let longestStringLengthLength101 = 0;\n  let longestStringLengthLength102 = 0;\n  let longestStringLengthLength103 = 0;\n  let longestStringLengthLength104 = 0;\n  let longestStringLengthLength105 = 0;\n  let longestStringLengthLength106 = 0;\n  let longestStringLengthLength107 = 0;\n  let longestStringLengthLength108 = 0;\n  let longestStringLengthLength109 = 0;\n  let longestStringLengthLength110 = 0;\n  let longestStringLengthLength111 = 0;\n  let longestStringLengthLength112 = 0;\n  let longestStringLengthLength113 = 0;\n  let longestStringLengthLength114 = 0;\n  let longestStringLengthLength115 = 0;\n  let longestStringLengthLength116 = 0;\n  let longestStringLengthLength117 = 0;\n  let longestStringLengthLength118 = 0;\n  let longestStringLengthLength119 = 0;\n  let longestStringLengthLength120 = 0;\n  let longestStringLengthLength121 = 0;\n  let longestStringLengthLength122 = 0;\n  let longestStringLengthLength123 = 0;\n  let longestStringLengthLength124 = 0;\n  let longestStringLengthLength125 = 0;\n  let longestStringLengthLength126 = 0;\n  let longestStringLengthLength127 = 0;\n  let longestStringLengthLength128 = 0;\n  let longestStringLengthLength129 = 0;\n  let longestStringLengthLength130 = 0;\n  let longestStringLengthLength131 = 0;\n  let longestStringLengthLength132 = 0;\n  let longestStringLengthLength133 = 0;\n  let longestStringLengthLength134 = 0;\n  let longestStringLengthLength135 = 0;\n  let longestStringLengthLength136 = 0;\n  let longestStringLengthLength137 = 0;\n  let longestStringLengthLength138 = 0;\n  let longestStringLengthLength139 = 0;\n  let longestStringLengthLength140 = 0;\n  let longestStringLengthLength141 = 0;\n  let longestStringLengthLength142 = 0;\n  let longestStringLengthLength143 = 0;\n  let longestStringLengthLength144 = 0;\n  let longestStringLengthLength145 = 0;\n  let longestStringLengthLength146 = 0;\n  let longestStringLengthLength147 = 0;\n  let longestStringLengthLength148 = 0;\n  let longestStringLengthLength149 = 0;\n  let longestStringLengthLength150 = 0;\n  let longestStringLengthLength151 = 0;\n  let longestStringLengthLength152 = 0;\n  let longestStringLengthLength153 = 0;\n  let longestStringLengthLength154 = 0;\n  let longestStringLengthLength155 = 0;\n  let longestStringLengthLength156 = 0;\n  let longestStringLengthLength157 = 0;\n  let longestStringLengthLength158 = 0;\n  let longestStringLengthLength159 = 0;\n  let longestStringLengthLength160 = 0;\n  let longestStringLengthLength161 = 0;\n  let longestStringLengthLength162 = 0;\n  let longestStringLengthLength163 = 0;\n  let longestStringLengthLength164 = 0;\n  let longestStringLengthLength165 = 0;\n  let longestStringLengthLength166 = 0;\n  let longestStringLengthLength167 = 0;\n  let longestStringLengthLength168 = 0;\n  let longestStringLengthLength169 = 0;\n  let longestStringLengthLength170 = 0;\n  let longestStringLengthLength171 = 0;\n  let longestStringLengthLength172 = 0;\n  let longestStringLengthLength173 = 0;\n  let longestStringLengthLength174 = 0;\n  let longestStringLengthLength175 = 0;\n  let longestStringLengthLength176 = 0;\n  let longestStringLengthLength177 = 0;\n  let longestString", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  given AN aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe maximum k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given AN aRRay arr of iNtegerS anD A positive intEGEr k, return a sOrted list \n  of lengtH k with tHe maximum k nUMbeRs in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * Given an arr of integers, return an array with unique integers in sorted order.\n * \n * Example 1:\n * \n * Input: arr = [1, 3, 2]\n * Output: [1, 2, 3]\n * \n * Example 2:\n * \n * Input: arr = [2, 3]\n * Output: [2, 3]\n * \n * Example 3:\n * \n * Input: arr = [1, 2]\n * Output: [1, 2]\n * \n * Note:\n * \n * 1 <= arr.length <= 1000\n * 1 <= arr[i] <= 1000\n */\nconst unique = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\n/**\n * Given an arr of integers, return an array with unique integers in sorted order.\n * \n * Example 1:\n * \n * Input: arr = [1, 3, 2]\n * Output: [1, 2, 3]\n * \n * Example 2:\n * \n * Input: arr = [2, 3]\n * Output: [2, 3]\n * \n * Example 3:\n * \n * Input: arr = [1, 2]\n * Output: [1, 2]\n * \n * Note:\n * \n * 1 <= arr.length <= 1000\n * 1 <= arr[i] <= 1000\n */\nconst uniqueSorted = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      index++;\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/**\n * Given an arr of integers, return an array with unique integers in sorted order.\n * \n * Example 1:\n * \n * Input: arr = [1, 3, 2]\n * Output: [1, 2, 3]\n * \n * Example 2:\n * \n * Input: arr = [2, 3]\n * Output: [2, 3]\n * \n * Example 3:\n * \n * Input: arr = [1, 2]\n * Output: [1, 2]\n * \n * Note:\n * \n * 1 <= arr.length <= 1000\n * 1 <= arr[i] <= 1000\n */\nconst uniqueSorted2 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      index++;\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/**\n * Given an arr of integers, return an array with unique integers in sorted order.\n * \n * Example 1:\n * \n * Input: arr = [1, 3, 2]\n * Output: [1, 2, 3]\n * \n * Example 2:\n * \n * Input: arr = [2, 3]\n * Output: [2, 3]\n * \n * Example 3:\n * \n * Input: arr = [1, 2]\n * Output: [1, 2]\n * \n * Note:\n * \n * 1 <= arr.length <= 1000\n * 1 <= arr[i] <= 1000\n */\nconst uniqueSorted3 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      index++;\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/**\n * Given an arr of integers, return an array with unique integers in sorted order.\n * \n * Example 1:\n * \n * Input: arr = [1, 3, 2]\n * Output: [1, 2, 3]\n * \n * Example 2:\n * \n * Input: arr = [2, 3]\n * Output: [2, 3]\n * \n * Example 3:\n * \n * Input: arr = [1, 2]\n * Output: [1, 2]\n * \n * Note:\n * \n * 1 <= arr.length <= 1000\n * 1 <= arr[i] <= 1000\n */\nconst uniqueSorted4 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      index++;\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/**\n * Given an arr of integers, return an array with unique integers in sorted order.\n * \n * Example 1:\n * \n * Input: arr = [1, 3, 2]\n * Output: [1, 2, 3]\n * \n * Example 2:\n * \n * Input: arr = [2, 3]\n * Output: [2, 3]\n * \n * Example 3:\n * \n * Input: arr = [1, 2]\n * Output: [1, 2]\n * \n * Note:\n * \n * 1 <= arr.length <= 1000\n * 1 <= arr[i] <= 1000\n */\nconst uniqueSorted5 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      index++;\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/**\n * Given an arr of integers, return an array with unique integers in sorted order.\n * \n * Example 1:\n * \n * Input: arr = [1, 3, 2]\n * Output: [1, 2, 3]\n * \n * Example 2:\n * \n * Input: arr = [2, 3]\n * Output: [2, 3]\n * \n * Example 3:\n * \n * Input: arr = [1, 2]\n * Output: [1, 2]\n * \n * Note:\n * \n * 1 <= arr.length <= 1000\n * 1 <= arr[i] <= 1000\n */\nconst uniqueSorted6 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      index++;\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/**\n * Given an arr of integers, return an array with unique integers in sorted order.\n * \n * Example 1:\n * \n * Input: arr = [1, 3, 2]\n * Output: [1, 2, 3]\n * \n * Example 2:\n * \n * Input: arr = [2, 3]\n * Output: [2, 3]\n * \n * Example 3:\n * \n * Input: arr = [1, 2]\n * Output: [1, 2]\n * \n * Note:\n * \n * 1 <= arr.length <= 1000\n * 1 <= arr[i] <= 1000\n */\nconst uniqueSorted7 = (arr) => {\n  const result = [];\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (result.indexOf(arr[i]) === -1) {\n      result.push(arr[i]);\n      index++;\n    }\n  }\n  return result.sort((a, b) => a - b);\n};\n\n/**\n * Given an arr of integers, return an array with unique integers in sorted order.\n * \n * Example ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/121", "prompt": "/*GIven a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a NOn-EMpty list of IntegeRs, return tHE sum of all of tHE Odd eLements that aRe in even PosITioNs.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenNums = [];\n  let oddNums = [];\n  let evenEles = [];\n  let oddEles = [];\n  let evenPosITioNs = [];\n  let oddPosITioNs = [];\n  let evenElesOddNums = [];\n  let oddElesOddNums = [];\n  let evenElesEvenNums = [];\n  let oddElesEvenNums = [];\n  let evenElesOddEles = [];\n  let oddElesOddEles = [];\n  let evenElesEvenEles = [];\n  let oddElesEvenEles = [];\n  let evenElesOddElesOddEles = [];\n  let oddElesOddElesOddEles = [];\n  let evenElesEvenElesEvenEles = [];\n  let oddElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenEles = [];\n  let oddElesOddElesOddElesEvenEles = [];\n  let evenElesEvenElesOddElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenEles = [];\n  let oddElesOddElesOddElesEvenElesEvenEles = [];\n  let evenElesEvenElesOddElesOddElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let evenElesOddElesOddElesEvenElesEvenElesEvenElesEvenElesEvenEles = [];\n  let oddElesEvenElesOddElesEvenElesEvenElesEvenEle", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsNoN = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsNoNNoN = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsNoNNoNNoN = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsNoNNoNNoNNoN = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsNoNNoNNoNNoNNoN = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsNoNNoNNoNNoNNoNNoN = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsNoNNoNNoNNoNNoNNoNNoN = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsNoNNoNNoNNoNNoNNoNNoNNoN = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a NoN-Empty aRray of IntEGers arr and an intEGEr k, return\n  thE sum of the eleMents wIth AT moSt tWO diGiTs From tHE fIRst k ELeMents of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  given A PoSItive iNteger n, return A soRTed list that has thE ODd nuMbers in collatz SequenCe.\n\n  THE CoLlaTZ coNjEcTure iS A cONjeCTuRe in mathematics tHAt coNceRns A sequenCE deFinEd\n  As fOllOws: STaRT wiTH Any pOSitiVE iNteGEr n. ThEN EaCH term IS obtainEd froM THE \n  pReVious teRm AS folloWS: if thE prEviouS teRM Is eveN, THE NexT tERm is oNE Half OF \n  the previous teRm. IF the prevIoUs term is OdD, ThE NExT TeRm is 3 timEs thE prEVioUS\n  Term plus 1. the coNjecture IS that nO MAtTEr wHat vaLUE of n, ThE sEquence will alwaYS reacH 1.\n\n  nOTe: \n      1. CoLlAtz(1) IS [1].\n      2. rEturNEd list sOrted in INcReaSing oRder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A PoSItive iNteger n, return A soRTed list that has thE ODd nuMbers in collatz SequenCe.\n\n  THE CoLlaTZ coNjEcTure iS A cONjeCTuRe in mathematics tHAt coNceRns A sequenCE deFinEd\n  As fOllOws: STaRT wiTH Any pOSitiVE iNteGEr n. ThEN EaCH term IS obtainEd froM THE \n  pReVious teRm AS folloWS: if thE prEviouS teRM Is eveN, THE NexT tERm is oNE Half OF \n  the previous teRm. IF the prevIoUs term is OdD, ThE NExT TeRm is 3 timEs thE prEVioUS\n  Term plus 1. the coNjecture IS that nO MAtTEr wHat vaLUE of n, ThE sEquence will alwaYS reacH 1.\n\n  nOTe: \n      1. CoLlAtz(1) IS [1].\n      2. rEturNEd list sOrted in INcReaSing oRder.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = [1, 5, 16, 8, 4, 2, 1];\n  let oddCollatz = [];\n  for (let i = 0; i < collatz.length; i++) {\n    if (collatz[i] % 2!== 0) {\n      oddCollatz.push(collatz[i]);\n    }\n  }\n  return oddCollatz;\n};\n\n/**\n  Given a positive integer n, return an array containing all positive integers less than or equal to n.\n\n  For example:\n  allPositiveIntegers(3) returns [2, 3, 5, 7]\n  allPositiveIntegers(5) returns [2, 3, 5, 7, 11]\n  */\nconst allPositiveIntegers = (num) => {\n  let arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (i > 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/**\n  Given a positive integer n, return an array containing all positive integers greater than or equal to n.\n\n  For example:\n  allPositiveIntegers(3) returns [2, 3, 5, 7]\n  allPositiveIntegers(5) returns [2, 3, 5, 7, 11]\n  */\nconst allPositiveIntegersGreaterThan = (num) => {\n  let arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (i > 0) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/**\n  Given a positive integer n, return an array containing all positive integers less than or equal to n, except n.\n\n  For example:\n  allPositiveIntegers(3) returns [2, 3, 5, 7]\n  allPositiveIntegers(5) returns [2, 3, 5, 7, 11]\n  */\nconst allPositiveIntegersLessThan = (num) => {\n  let arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (i!== num) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/**\n  Given a positive integer n, return an array containing all positive integers greater than or equal to n, except n, except n.\n\n  For example:\n  allPositiveIntegers(3) returns [2, 3, 5, 7]\n  allPositiveIntegers(5) returns [2, 3, 5, 7, 11]\n  */\nconst allPositiveIntegersGreaterThanOrEqualTo = (num) => {\n  let arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (i!== num) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/**\n  Given a positive integer n, return an array containing all positive integers less than or equal to n, except n, except n.\n\n  For example:\n  allPositiveIntegers(3) returns [2, 3, 5, 7]\n  allPositiveIntegers(5) returns [2, 3, 5, 7, 11]\n  */\nconst allPositiveIntegersLessThanOrEqualTo = (num) => {\n  let arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (i!== num) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/**\n  Given a positive integer n, return an array containing all positive integers greater than or equal to n, except n, except n.\n\n  For example:\n  allPositiveIntegers(3) returns [2, 3, 5, 7]\n  allPositiveIntegers(5) returns [2, 3, 5, 7, 11]\n  */\nconst allPositiveIntegersGreaterThanOrEqualTo = (num) => {\n  let arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (i!== num) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/**\n  Given a positive integer n, return an array containing all positive integers less than or equal to n, except n, except n, except n.\n\n  For example:\n  allPositiveIntegers(3) returns [2, 3, 5, 7]\n  allPositiveIntegers(5) returns [2, 3, 5, 7, 11]\n  */\nconst allPositiveIntegersLessThanOrEqualTo = (num) => {\n  let arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (i!== num) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/**\n  Given a positive integer n, return an array containing all positive integers greater than or equal to n, except n, except n, except n.\n\n  For example:\n  allPositiveIntegers(3) returns [2, 3, 5, 7]\n  allPositiveIntegers(5) returns [2, 3, 5, 7, 11]\n  */\nconst allPositiveIntegersGreaterThanOrEqualTo = (num) => {\n  let arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (i!== num) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/**\n  Given a positive integer n, return an array containing all positive integers less than or equal to n, except n, except n, except n, except n.\n\n  For example:\n  allPositiveIntegers(3) returns [2, 3, 5, 7]\n  allPositiveIntegers(5) returns [2, 3, 5, 7, 11]\n  */\nconst allPositiveIntegersLessThanOrEqualTo = (num) => {\n  let arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (i!== num) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/**\n  Given a positive integer n, return an array containing all positive integers greater than or equal to n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except n, except ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*YOu havE To WRite a fUnctioN whICh validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date sTriNg iS NoT EmpTY.\n  2. the nUMber OF dAys IS not LESs THan 1 or HIgher thAn 31 dayS FOR mOnThs 1,3,5,7,8,10,12. And tHe NUmber oF Days iS noT less ThaN 1 OR highER THAn 30 dAyS For moNTHs 4,6,9,11. AnD, The number of dayS is Not less tHaN 1 or higheR tHAn 29 FOR tHE mOnth 2.\n  3. The MontHs sHOulD NOt be less Than 1 oR higher tHAn 12.\n  4. The date sHOUlD Be in tHe forMAT: mm-Dd-YyYy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu havE To WRite a fUnctioN whICh validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date sTriNg iS NoT EmpTY.\n  2. the nUMber OF dAys IS not LESs THan 1 or HIgher thAn 31 dayS FOR mOnThs 1,3,5,7,8,10,12. And tHe NUmber oF Days iS noT less ThaN 1 OR highER THAn 30 dAyS For moNTHs 4,6,9,11. AnD, The number of dayS is Not less tHaN 1 or higheR tHAn 29 FOR tHE mOnth 2.\n  3. The MontHs sHOulD NOt be less Than 1 oR higher tHAn 12.\n  4. The date sHOUlD Be in tHe forMAT: mm-Dd-YyYy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateObj = new Date(date);\n  return dateObj.getFullYear() === dateObj.getFullYear() &&\n    dateObj.getMonth() === dateObj.getMonth() &&\n    dateObj.getDate() === dateObj.getDate();\n};\n\n/**\n * validDate() validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date sTriNg iS NoT EmpTY.\n  2. the nUMber OF dAys IS not LESs THan 1 or HIgher thAN 31 dayS FOR mOnThs 1,3,5,7,8,10,12. And tHe NUmber oF Days iS noT less ThaN 1 OR highER THAN 30 dAyS For moNTHs 4,6,9,11. AnD, The number of dayS is Not less tHaN 1 or higheR tHAN 29 FOR tHE mOnth 2.\n  3. The MontHs sHOulD NOt be less Than 1 oR higher tHAN 12.\n  4. The date sHOUlD Be in tHE forMAT: mm-Dd-YyYy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateObj = new Date(date);\n  return dateObj.getFullYear() === dateObj.getFullYear() &&\n    dateObj.getMonth() === dateObj.getMonth() &&\n    dateObj.getDate() === dateObj.getDate();\n};\n\n/**\n * validDate() validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date sTriNg iS NoT EmpTY.\n  2. the nUMber OF dAys IS not LESs THAN 1 or HIgher thAN 31 dayS FOR mOnThs 1,3,5,7,8,10,12. And tHe NUmber oF Days iS noT less ThaN 1 OR highER THAN 30 dAyS For moNTHs 4,6,9,11. AnD, The number of dayS is Not less tHaN 1 or higheR tHAN 29 FOR tHE mOnth 2.\n  3. The MontHs sHOulD NOt be less Than 1 oR higher tHAN 12.\n  4. The date sHOUlD Be in tHE forMAT: mm-Dd-YyYy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateObj = new Date(date);\n  return dateObj.getFullYear() === dateObj.getFullYear() &&\n    dateObj.getMonth() === dateObj.getMonth() &&\n    dateObj.getDate() === dateObj.getDate();\n};\n\n/**\n * validDate() validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date sTriNg iS NoT EmpTY.\n  2. the nUMber OF dAys IS not LESs THAN 1 or HIgher thAN 31 dayS FOR mOnThs 1,3,5,7,8,10,12. And tHe NUmber oF Days iS noT less ThaN 1 OR highER THAN 30 dAyS For moNTHs 4,6,9,11. AnD, The number of dayS is Not less tHaN 1 or higheR tHAN 29 FOR tHE mOnth 2.\n  3. The MontHs sHOulD NOt be less Than 1 oR higher tHAN 12.\n  4. The date sHOUlD Be in tHE forMAT: mm-Dd-YyYy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateObj = new Date(date);\n  return dateObj.getFullYear() === dateObj.getFullYear() &&\n    dateObj.getMonth() === dateObj.getMonth() &&\n    dateObj.getDate() === dateObj.getDate();\n};\n\n/**\n * validDate() validates a GIVen date sTring and\n  retuRns truE if THe date iS vaLId oThErWise fALsE.\n  the date IS vAlid if all of the FOlloWinG ruLes are sATisFieD:\n  1. THe date s", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/125", "prompt": "/* given A StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1, ... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* given A StRIng of wOrds, return a list oF woRDs split on whiTESpacE, if no whitespAces exIstS in The TexT You\n  ShOuLd splIT oN ComMAs ',' If no commas exisTS you ShoUld return The numbER of LowEr-CasE leTteRS wITh oDD OrdeR in The\n  aLPhAbeT, Ord('a') = 0, ORD('b') = 1,... ORd('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const txtArr = txt.split(' ');\n  const numWords = txtArr.length;\n  const numWordsArr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/126", "prompt": "/* given A list Of NUmbers, return WhetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAn 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* given A list Of NUmbers, return WhetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAn 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b)\n  return sorted.every((val, index) => val === lst[index])\n}\n\n/* Given a list Of NUmbers, return whetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAN 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a)\n  return sorted.every((val, index) => val === lst[index])\n}\n\n/* Given a list Of NUmbers, return whetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAN 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSortedAsc([5]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5]) ➞ false\n  isSortedAsc([1, 3, 2, 4, 5]) ➞ true\n  isSortedAsc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAsc = (lst) => {\n  const sorted = lst.sort((a, b) => a - b)\n  return sorted.every((val, index) => val === lst[index])\n}\n\n/* Given a list Of NUmbers, return whetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAN 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSortedDescAsc([5]) ➞ false\n  isSortedDescAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDescAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDescAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDescAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDescAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDescAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDescAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a)\n  return sorted.every((val, index) => val === lst[index])\n}\n\n/* Given a list Of NUmbers, return whetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAN 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSortedAscDesc([5]) ➞ true\n  isSortedAscDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedAscDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedAscDesc([1, 2, 3, 4, 5, 6]) ➞ false\n  isSortedAscDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedAscDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedAscDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedAscDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedAscDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a)\n  return sorted.every((val, index) => val === lst[index])\n}\n\n/* Given a list Of NUmbers, return whetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAN 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSortedDescAsc([5]) ➞ false\n  isSortedDescAsc([1, 2, 3, 4, 5]) ➞ true\n  isSortedDescAsc([1, 3, 2, 4, 5]) ➞ false\n  isSortedDescAsc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDescAsc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDescAsc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortedDescAsc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDescAsc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b - a)\n  return sorted.every((val, index) => val === lst[index])\n}\n\n/* Given a list Of NUmbers, return whetheR or NOt they are sorTED\n  in ascEnding order. IF list has moRe tHAN 1 dUplICatE oF tHe samE\n  NuMBer, return FAlSe. Assume no negaTIve nUmbErs And only INteGerS.\n  Examples\n  isSortedAscDesc([5]) ➞ true\n  isSortedAscDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedAscDesc([1, 3, 2, 4, 5]) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*YOu are GIvEN two inTervalS,\n  whERe each intervAL Is a pAir of integerS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN two inTervalS,\n  whERe each intervAL Is a pAir of integerS. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let interval1Start = interval1[0];\n  let interval1End = interval1[1];\n  let interval2Start = interval2[0];\n  let interval2End = interval2[1];\n  let intersectionInterval = [];\n  let intersectionLength = 0;\n  let isIntersecting = false;\n  let isPrime = false;\n  let isPrimeLength = 0;\n  let isPrimeInterval = [];\n  let isPrimeIntervalLength = 0;\n  let isPrimeIntervalInterval = [];\n  let isPrimeIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let isPrimeIntervalIntervalIntervalLength = 0;\n  let isPrimeIntervalIntervalIntervalInterval = [];\n  let is", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let i = 0;\n  let len = arr.length;\n  let signs = arr.reduce((acc, curr) => {\n    if (curr === 1) {\n      sign = -1;\n    } else if (curr === -1) {\n      sign = 1;\n    }\n    acc += sign;\n    return acc;\n  }, 0);\n  if (signs === 0) {\n    return null;\n  }\n  signs = Math.abs(signs);\n  signs = Math.pow(10, signs);\n  while (i < len) {\n    sum += signs * arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsArray = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let i = 0;\n  let len = arr.length;\n  let signs = arr.reduce((acc, curr) => {\n    if (curr === 1) {\n      sign = -1;\n    } else if (curr === -1) {\n      sign = 1;\n    }\n    acc += sign;\n    return acc;\n  }, 0);\n  if (signs === 0) {\n    return null;\n  }\n  signs = Math.abs(signs);\n  signs = Math.pow(10, signs);\n  while (i < len) {\n    sum += signs * arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSignsArray([1, 2, 2, -4]) == -9\n  >>> prodSignsArray([0, 1]) == 0\n  >>> prodSignsArray([[]]) == null\n  */\nconst prodSignsArrayArray = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let i = 0;\n  let len = arr.length;\n  let signs = arr.reduce((acc, curr) => {\n    if (curr === 1) {\n      sign = -1;\n    } else if (curr === -1) {\n      sign = 1;\n    }\n    acc += sign;\n    return acc;\n  }, 0);\n  if (signs === 0) {\n    return null;\n  }\n  signs = Math.abs(signs);\n  signs = Math.pow(10, signs);\n  while (i < len) {\n    sum += signs * arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSignsArrayArray([1, 2, 2, -4]) == -9\n  >>> prodSignsArrayArray([0, 1]) == 0\n  >>> prodSignsArrayArray([[]]) == null\n  */\nconst prodSignsArrayArrayArray = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let i = 0;\n  let len = arr.length;\n  let signs = arr.reduce((acc, curr) => {\n    if (curr === 1) {\n      sign = -1;\n    } else if (curr === -1) {\n      sign = 1;\n    }\n    acc += sign;\n    return acc;\n  }, 0);\n  if (signs === 0) {\n    return null;\n  }\n  signs = Math.abs(signs);\n  signs = Math.pow(10, signs);\n  while (i < len) {\n    sum += signs * arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSignsArrayArrayArray([1, 2, 2, -4]) == -9\n  >>> prodSignsArrayArrayArray([0, 1]) == 0\n  >>> prodSignsArrayArrayArray([[]]) == null\n  */\nconst prodSignsArrayArrayArrayArray = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let i = 0;\n  let len = arr.length;\n  let signs = arr.reduce((acc, curr) => {\n    if (curr === 1) {\n      sign = -1;\n    } else if (curr === -1) {\n      sign = 1;\n    }\n    acc += sign;\n    return acc;\n  }, 0);\n  if (signs === 0) {\n    return null;\n  }\n  signs = Math.abs(signs);\n  signs = Math.pow(10, signs);\n  while (i < len) {\n    sum += signs * arr[i];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  you arE GiVEn an arRay arr of iNteGErs and you neeD TO return\n  sum Of magnitudes Of inteGerS MulTipLIed By PrOduct OF aLL siGNs\n  Of each number in thE ArraY, rePreSented bY 1, -1 Or 0.\n  NOte: return NuLl fOr eMptY arr.\n\n  exAMplE:\n  >>> prodSignsArrayArrayArrayArray([1, 2, 2, -4]) == -9\n  >>> prodSignsArrayArrayArrayArray([0, 1]) == 0\n  >>> prodSignsArrayArrayArrayArray([[]]) == null\n  */\nconst prodSignsArrayArrayArrayArrayArray = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  let i = 0;\n  let len = arr.length;\n  let signs = arr.reduce((acc, curr) => {\n    if (curr === 1) {\n      sign = -1;\n    } else if (curr === -1) {\n      sign = 1;\n    }\n    acc += sign;\n    return acc;\n  }, 0);\n  if (signs === 0) {\n    return null;\n  }\n  signs = Math.abs(signs);\n  signs = Math.pow(10, signs);\n  while (i < len) {\n    sum += signs * arr[i];\n    i++;\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  given A grid WiTH N rows And N coLumNS (N >= 2) and a positiVE InteGer k, \n  each cell oF the grid coNtaINs a ValUE. EvErY iNtegeR in ThE RanGE [1, N * n]\n  inclusive appeARs exActLy oNce on thE CelLs oF tHe grid.\n\n  YOu hAve TO fINd tHE MiniMUm paTH oF leNGth k in tHE grid. yoU Can stARt\n  from aNy celL, AND in eAcH step yoU cAN move tO Any of The NeighBor CELls,\n  in otHER WOrdS, yOU can gO TO celLS which share an eDge With you cUrRent\n  cell.\n  plEAsE NOtE ThAt a path Of leNgtH k MeaNS Visiting ExactLy k cells (nOT\n  necesSARiLY diStincT).\n  yOu CaNnOt go off the grid.\n  A path A (OF lengTH k) IS conSiDerED lEss tHAn a Path B (OF lEngTh k) if\n  aFter MakinG the orDerEd lIsTS of the VALues on The CeLls That A aND b Go\n  tHRough (lEt'S caLL tHem lst_A and Lst_B), lSt_A is lExIcograpHicAlLY leSs\n  tHan lst_b, in other wORDS, There eXist An integER InDeX i (1 <= i <= k)\n  SUcH THAt LSt_A[i] < Lst_b[i] ANd FoR ANy j (1 <= j < i) We haVE\n  Lst_a[J] = lst_b[J].\n  iT IS guAranteED thAT tHe AnsWer is uniQue.\n  rEturn aN oRderED list of the vaLuEs oN tHE cELLs tHAt The miniMUM pATh Go ThRough.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A grid WiTH N rows And N coLumNS (N >= 2) and a positiVE InteGer k, \n  each cell oF the grid coNtaINs a ValUE. EvErY iNtegeR in ThE RanGE [1, N * n]\n  inclusive appeARs exActLy oNce on thE CelLs oF tHe grid.\n\n  YOu hAve TO fINd tHE MiniMUm paTH oF leNGth k in tHE grid. yoU Can stARt\n  from aNy celL, AND in eAcH step yoU cAN move tO Any of The NeighBor CELls,\n  in otHER WOrdS, yOU can gO TO celLS which share an eDge With you cUrRent\n  cell.\n  plEAsE NOtE ThAt a path Of leNgtH k MeaNS Visiting ExactLy k cells (nOT\n  necesSARiLY diStincT).\n  yOu CaNnOt go off the grid.\n  A path A (OF lengTH k) IS conSiDerED lEss tHAn a Path B (OF lEngTh k) if\n  aFter MakinG the orDerEd lIsTS of the VALues on The CeLls That A aND b Go\n  tHRough (lEt'S caLL tHem lst_A and Lst_B), lSt_A is lExIcograpHicAlLY leSs\n  tHan lst_b, in other wORDS, There eXist An integER InDeX i (1 <= i <= k)\n  SUcH THAt LSt_A[i] < Lst_b[i] ANd FoR ANy j (1 <= j < i) We haVE\n  Lst_a[J] = lst_b[J].\n  iT IS guAranteED thAT tHe AnsWer is uniQue.\n  rEturn aN oRderED list of the vaLuEs oN tHE cELLs tHAt The miniMUM pATh Go ThRough.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const a = new Array(n);\n  const b = new Array(n);\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a1 = 0;\n  let a2 = 0;\n  let a3 = 0;\n  let a4 = 0;\n  let a5 = 0;\n  let a6 = 0;\n  let a7 = 0;\n  let a8 = 0;\n  let a9 = 0;\n  let a10 = 0;\n  let a11 = 0;\n  let a12 = 0;\n  let a13 = 0;\n  let a14 = 0;\n  let a15 = 0;\n  let a16 = 0;\n  let a17 = 0;\n  let a18 = 0;\n  let a19 = 0;\n  let a20 = 0;\n  let a21 = 0;\n  let a22 = 0;\n  let a23 = 0;\n  let a24 = 0;\n  let a25 = 0;\n  let a26 = 0;\n  let a27 = 0;\n  let a28 = 0;\n  let a29 = 0;\n  let a30 = 0;\n  let a31 = 0;\n  let a32 = 0;\n  let a33 = 0;\n  let a34 = 0;\n  let a35 = 0;\n  let a36 = 0;\n  let a37 = 0;\n  let a38 = 0;\n  let a39 = 0;\n  let a40 = 0;\n  let a41 = 0;\n  let a42 = 0;\n  let a43 = 0;\n  let a44 = 0;\n  let a45 = 0;\n  let a46 = 0;\n  let a47 = 0;\n  let a48 = 0;\n  let a49 = 0;\n  let a50 = 0;\n  let a51 = 0;\n  let a52 = 0;\n  let a53 = 0;\n  let a54 = 0;\n  let a55 = 0;\n  let a56 = 0;\n  let a57 = 0;\n  let a58 = 0;\n  let a59 = 0;\n  let a60 = 0;\n  let a61 = 0;\n  let a62 = 0;\n  let a63 = 0;\n  let a64 = 0;\n  let a65 = 0;\n  let a66 = 0;\n  let a67 = 0;\n  let a68 = 0;\n  let a69 = 0;\n  let a70 = 0;\n  let a71 = 0;\n  let a72 = 0;\n  let a73 = 0;\n  let a74 = 0;\n  let a75 = 0;\n  let a76 = 0;\n  let a77 = 0;\n  let a78 = 0;\n  let a79 = 0;\n  let a80 = 0;\n  let a81 = 0;\n  let a82 = 0;\n  let a83 = 0;\n  let a84 = 0;\n  let a85 = 0;\n  let a86 = 0;\n  let a87 = 0;\n  let a88 = 0;\n  let a89 = 0;\n  let a90 = 0;\n  let a91 = 0;\n  let a92 = 0;\n  let a93 = 0;\n  let a94 = 0;\n  let a95 = 0;\n  let a96 = 0;\n  let a97 = 0;\n  let a98 = 0;\n  let a99 = 0;\n  let a100 = 0;\n  let a101 = 0;\n  let a102 = 0;\n  let a103 = 0;\n  let a104 = 0;\n  let a105 = 0;\n  let a106 = 0;\n  let a107 = 0;\n  let a108 = 0;\n  let a109 = 0;\n  let a110 = 0;\n  let a111 = 0;\n  let a112 = 0;\n  let a113 = 0;\n  let a114 = 0;\n  let a115 = 0;\n  let a116 = 0;\n  let a117 = 0;\n  let a118 = 0;\n  let a119 = 0;\n  let a120 = 0;\n  let a121 = 0;\n  let a122 = 0;\n  let a123 = 0;\n  let a124 = 0;\n  let a125 = 0;\n  let a126 = 0;\n  let a127 = 0;\n  let a128 = 0;\n  let a129 = 0;\n  let a130 = 0;\n  let a131 = 0;\n  let a132 = 0;\n  let a133 = 0;\n  let a134 = 0;\n  let a135 = 0;\n  let a136 = 0;\n  let a137 = 0;\n  let a138 = 0;\n  let a139 = 0;\n  let a140 = 0;\n  let a141 = 0;\n  let a142 = 0;\n  let a143 = 0;\n  let a144 = 0;\n  let a145 = 0;\n  let a146 = 0;\n  let a147 = 0;\n  let a148 = 0;\n  let a149 = 0;\n  let a150 = 0;\n  let a151 = 0;\n  let a152 = 0;\n  let a153 = 0;\n  let a154 = 0;\n  let a155 = 0;\n  let a156 = 0;\n  let a157 = 0;\n  let a158 = 0;\n  let a159 = 0;\n  let a160 = 0;\n  let a161 = 0;\n  let a162 = 0;\n  let a163 = 0;\n  let a164 = 0;\n  let a165 = 0;\n  let a166 = 0;\n  let a167 = 0;\n  let a168 = 0;\n  let a169 = 0;\n  let a170 = 0;\n  let a171 = 0;\n  let a172 = 0;\n  let a173 = 0;\n  let a174 = 0;\n  let a175 = 0;\n  let a176 = 0;\n  let a177 = 0;\n  let a178 = 0;\n  let a179 = 0;\n  let a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* returN a GrEAtest cOmmon dIviSOr of two integERS a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  const gcd = (a, b) => {\n    if (a === 0) return b;\n    if (b === 0) return a;\n    const gcd = (a, b) => {\n      if (a === 0) return b;\n      if (b === 0) return a;\n      const gcd = (a, b) => {\n        if (a === 0) return b;\n        if (b === 0) return a;\n        const gcd = (a, b) => {\n          if (a === 0) return b;\n          if (b === 0) return a;\n          const gcd = (a, b) => {\n            if (a === 0) return b;\n            if (b === 0) return a;\n            const gcd = (a, b) => {\n              if (a === 0) return b;\n              if (b === 0) return a;\n              const gcd = (a, b) => {\n                if (a === 0) return b;\n                if (b === 0) return a;\n                const gcd = (a, b) => {\n                  if (a === 0) return b;\n                  if (b === 0) return a;\n                  const gcd = (a, b) => {\n                    if (a === 0) return b;\n                    if (b === 0) return a;\n                    const gcd = (a, b) => {\n                      if (a === 0) return b;\n                      if (b === 0) return a;\n                      const gcd = (a, b) => {\n                        if (a === 0) return b;\n                        if (b === 0) return a;\n                        const gcd = (a, b) => {\n                          if (a === 0) return b;\n                          if (b === 0) return a;\n                          const gcd = (a, b) => {\n                            if (a === 0) return b;\n                            if (b === 0) return a;\n                            const gcd = (a, b) => {\n                              if (a === 0) return b;\n                              if (b === 0) return a;\n                              const gcd = (a, b) => {\n                                if (a === 0) return b;\n                                if (b === 0) return a;\n                                const gcd = (a, b) => {\n                                  if (a === 0) return b;\n                                  if (b === 0) return a;\n                                  const gcd = (a, b) => {\n                                    if (a === 0) return b;\n                                    if (b === 0) return a;\n                                    const gcd = (a, b) => {\n                                      if (a === 0) return b;\n                                      if (b === 0) return a;\n                                      const gcd = (a, b) => {\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n                                        if (a === 0) return b;\n                                        if (b === 0) return a;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/130", "prompt": "/*EVeryoNE kNOws FibOnacci SeqUEnce, it was stuDIEd deEply by mathemAticiaNs in \n  tHE laSt cOUplE cEnTurieS. hoWEveR, WhAt people don't knOW is TRibOnaCci sequENce.\n  triBoNacCi sEquENcE Is dEFIned BY the REcUrrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n IS eVEn.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n iS Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*EVeryoNE kNOws FibOnacci SeqUEnce, it was stuDIEd deEply by mathemAticiaNs in \n  tHE laSt cOUplE cEnTurieS. hoWEveR, WhAt people don't knOW is TRibOnaCci sequENce.\n  triBoNacCi sEquENcE Is dEFIned BY the REcUrrENce:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n IS eVEn.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n iS Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [1, 3, 2, 8];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let sum = 0;\n  while (i <= n) {\n    sum += arr[j];\n    arr[j++] = arr[k];\n    arr[k++] = arr[j];\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, you have to\n  return the sum of all the numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = 1 + 2 + 3 = 5\n  tri(6) = 1 + 2 + 3 + 6 = 10\n  tri(10) = 1 + 2 + 3 + 6 + 10 = 15\n*/\nconst triSum = (n) => {\n  let arr = [1, 3, 2, 8];\n  let sum = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    sum += arr[j];\n    arr[j++] = arr[k];\n    arr[k++] = arr[j];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-negative integer number n, you have to\n  return the number of ways to form the n-th tribonacci number.\n  Examples:\n  tri(3) = 1 + 2 + 3 = 5\n  tri(6) = 1 + 2 + 3 + 6 = 10\n  tri(10) = 1 + 2 + 3 + 6 + 10 = 15\n*/\nconst triWays = (n) => {\n  let arr = [1, 3, 2, 8];\n  let sum = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    sum += arr[j];\n    arr[j++] = arr[k];\n    arr[k++] = arr[j];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-negative integer number n, you have to\n  return the number of ways to form the n-th tribonacci number \n  that ends in a zero number.\n  Examples:\n  tri(3) = 1 + 2 + 3 = 5\n  tri(6) = 1 + 2 + 3 + 6 = 10\n  tri(10) = 1 + 2 + 3 + 6 + 10 = 15\n*/\nconst triZero = (n) => {\n  let arr = [1, 3, 2, 8];\n  let sum = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    sum += arr[j];\n    arr[j++] = arr[k];\n    arr[k++] = arr[j];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-negative integer number n, you have to\n  return the number of ways to form the n-th tribonacci number \n  that ends in a non-zero number.\n  Examples:\n  tri(3) = 1 + 2 + 3 = 5\n  tri(6) = 1 + 2 + 3 + 6 = 10\n  tri(10) = 1 + 2 + 3 + 6 + 10 = 15\n*/\nconst triNonZero = (n) => {\n  let arr = [1, 3, 2, 8];\n  let sum = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    sum += arr[j];\n    arr[j++] = arr[k];\n    arr[k++] = arr[j];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-negative integer number n, you have to\n  return the number of ways to form the n-th tribonacci number \n  that ends in a non-zero number that ends in a zero number.\n  Examples:\n  tri(3) = 1 + 2 + 3 = 5\n  tri(6) = 1 + 2 + 3 + 6 = 10\n  tri(10) = 1 + 2 + 3 + 6 + 10 = 15\n*/\nconst triZeroZero = (n) => {\n  let arr = [1, 3, 2, 8];\n  let sum = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    sum += arr[j];\n    arr[j++] = arr[k];\n    arr[k++] = arr[j];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-negative integer number n, you have to\n  return the number of ways to form the n-th tribonacci number \n  that ends in a non-zero number that ends in a non-zero number.\n  Examples:\n  tri(3) = 1 + 2 + 3 = 5\n  tri(6) = 1 + 2 + 3 + 6 = 10\n  tri(10) = 1 + 2 + 3 + 6 + 10 = 15\n*/\nconst triNonZeroNonZero = (n) => {\n  let arr = [1, 3, 2, 8];\n  let sum = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    sum += arr[j];\n    arr[j++] = arr[k];\n    arr[k++] = arr[j];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-negative integer number n, you have to\n  return the number of ways to form the n-th tribonacci number \n  that ends in a non-zero number that ends in a non-zero number.\n  Examples:\n  tri(3) = 1 + 2 + 3 = 5\n  tri(6) = 1 + 2 + 3 + 6 = 10\n  tri(10) = 1 + 2 + 3 + 6 + 10 = 15\n*/\nconst triNonZeroNonZeroZero = (n) => {\n  let arr = [1, 3, 2, 8];\n  let sum = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    sum += arr[j];\n    arr[j++] = arr[k];\n    arr[k++] = arr[j];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-negative integer number n, you have to\n  return the number of ways to form the n-th tribonacci number \n  that ends in a non-zero number that ends in a non-zero number.\n  Examples:\n  tri(3) = 1 + 2 + 3 = 5\n  tri(6) = 1 + 2 + 3 + 6 = 10\n  tri(10) = 1 + 2 + 3 + 6 + 10 = 15\n*/\nconst triNonZeroNonZeroZeroZero = (n) => {\n  let arr = [1, 3, 2, 8];\n  let sum = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  while (i <= n) {\n    sum += arr[j];\n    arr[j++] = arr[k];\n    arr[k++] = arr[j];\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a non-negative integer number n, you have to\n  return the number of ways to form the n-th tribonacci number \n  that ends in a non-zero number that ends in a non-zero number.\n  Examples:\n  tri(3) = 1 + 2 + 3 = 5\n  tri(6) = 1 + 2 + 3 + 6 = 10\n  tri(10) = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*GIven a POsITive inTeger n, return tHe pROduct of the odD digits.\n  rEturN 0 if all digits are eveN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a POsITive inTeger n, return tHe pROduct of the odD digits.\n  rEturN 0 if all digits are eveN.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  let digit = 0;\n  for (let i = 0; i < n; i++) {\n    digit = n % 10;\n    sum += digit * Math.pow(10, i);\n  }\n  return sum;\n};\n\n/*\n  Given a number n, return true if and only if the number is even.\n  For example:\n  even(3)  == true\n  even(7)  == false\n  even(15)  == false\n  even(-3)  == true\n  even(-7)  == false\n  even(-15) == false\n*/\nconst even = (n) => {\n  return n % 2 === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is odd.\n  For example:\n  odd(3)  == true\n  odd(7)  == false\n  odd(15)  == false\n  odd(-3)  == false\n  odd(-7)  == true\n  odd(-15) == false\n*/\nconst odd = (n) => {\n  return n % 2!== 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 3.\n  For example:\n  divisible(3, 3)  == true\n  divisible(3, 7)  == false\n  divisible(3, 15)  == false\n  divisible(3, -3)  == true\n  divisible(3, -7)  == false\n  divisible(3, -15) == false\n*/\nconst divisible = (n, m) => {\n  return n % m === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 5.\n  For example:\n  divisible(5, 3)  == true\n  divisible(5, 7)  == false\n  divisible(5, 15)  == false\n  divisible(5, -3)  == true\n  divisible(5, -7)  == false\n  divisible(5, -15) == false\n*/\nconst divisible = (n, m) => {\n  return n % m === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 7.\n  For example:\n  divisible(7, 3)  == true\n  divisible(7, 7)  == false\n  divisible(7, 15)  == false\n  divisible(7, -3)  == true\n  divisible(7, -7)  == false\n  divisible(7, -15) == false\n*/\nconst divisible = (n, m) => {\n  return n % m === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 9.\n  For example:\n  divisible(9, 3)  == true\n  divisible(9, 7)  == false\n  divisible(9, 15)  == false\n  divisible(9, -3)  == true\n  divisible(9, -7)  == false\n  divisible(9, -15) == false\n*/\nconst divisible = (n, m) => {\n  return n % m === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 11.\n  For example:\n  divisible(11, 3)  == true\n  divisible(11, 7)  == false\n  divisible(11, 15)  == false\n  divisible(11, -3)  == true\n  divisible(11, -7)  == false\n  divisible(11, -15) == false\n*/\nconst divisible = (n, m) => {\n  return n % m === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 13.\n  For example:\n  divisible(13, 3)  == true\n  divisible(13, 7)  == false\n  divisible(13, 15)  == false\n  divisible(13, -3)  == true\n  divisible(13, -7)  == false\n  divisible(13, -15) == false\n*/\nconst divisible = (n, m) => {\n  return n % m === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 15.\n  For example:\n  divisible(15, 3)  == true\n  divisible(15, 7)  == false\n  divisible(15, 15)  == false\n  divisible(15, -3)  == true\n  divisible(15, -7)  == false\n  divisible(15, -15) == false\n*/\nconst divisible = (n, m) => {\n  return n % m === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 17.\n  For example:\n  divisible(17, 3)  == true\n  divisible(17, 7)  == false\n  divisible(17, 15)  == false\n  divisible(17, -3)  == true\n  divisible(17, -7)  == false\n  divisible(17, -15) == false\n*/\nconst divisible = (n, m) => {\n  return n % m === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 19.\n  For example:\n  divisible(19, 3)  == true\n  divisible(19, 7)  == false\n  divisible(19, 15)  == false\n  divisible(19, -3)  == true\n  divisible(19, -7)  == false\n  divisible(19, -15) == false\n*/\nconst divisible = (n, m) => {\n  return n % m === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 23.\n  For example:\n  divisible(23, 3)  == true\n  divisible(23, 7)  == false\n  divisible(23, 15)  == false\n  divisible(23, -3)  == true\n  divisible(23, -7)  == false\n  divisible(23, -15) == false\n*/\nconst divisible = (n, m) => {\n  return n % m === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 25.\n  For example:\n  divisible(25, 3)  == true\n  divisible(25, 7)  == false\n  divisible(25, 15)  == false\n  divisible(25, -3)  == true\n  divisible(25, -7)  == false\n  divisible(25, -15) == false\n*/\nconst divisible = (n, m) => {\n  return n % m === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 27.\n  For example:\n  divisible(27, 3)  == true\n  divisible(27, 7)  == false\n  divisible(27, 15)  == false\n  divisible(27, -3)  == true\n  divisible(27, -7)  == false\n  divisible(27, -15) == false\n*/\nconst divisible = (n, m) => {\n  return n % m === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 31.\n  For example:\n  divisible(31, 3)  == true\n  divisible(31, 7)  == false\n  divisible(31, 15)  == false\n  divisible(31, -3)  == true\n  divisible(31, -7)  == false\n  divisible(31, -15) == false\n*/\nconst divisible = (n, m) => {\n  return n % m === 0;\n};\n\n/*\n  Given a number n, return true if and only if the number is divisible by 35.\n  For example:\n  divisible(35, 3)  == true\n  divisible(35, 7)  == false\n  ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n  const isNested = string.length > 0;\n  return isNested;\n};\n\n/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n  const isNested = string.length > 0;\n  return isNested;\n};\n\n/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n  const isNested = string.length > 0;\n  return isNested;\n};\n\n/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n  const isNested = string.length > 0;\n  return isNested;\n};\n\n/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n  const isNested = string.length > 0;\n  return isNested;\n};\n\n/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n  const isNested = string.length > 0;\n  return isNested;\n};\n\n/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  isNested('[[]]') ➞ TRUe\n  isNested('[]]]]]]][[[[[]') ➞ FAlse\n  isNested('[][]') ➞ fALse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ TRUE\n  */\ncOnSt isNested = (string) => {\n  const isNested = string.length > 0;\n  return isNested;\n};\n\n/*\n  creatE A fUNction That taKes A string As input which CONtaiNs only square BrackeTs.\n  THE fuNctIOn sHoUlD return true IF aND onLY iF there is a valid SUbseQueNce Of brackETs\n  wHerE aT leAst One BRaCKet in THE subSEqueNCe Is nESted.\n  is", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return Math.sqrt(sum);\n};\n\n/*\n  YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum;\n};\n\n/*\n  YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumOfSquareAndSquare = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum * sum;\n};\n\n/*\n  YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumOfSquareAndSquareAndSquare = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum * sum * sum;\n};\n\n/*\n  YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumOfSquareAndSquareAndSquareAndSquare = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum * sum * sum * sum;\n};\n\n/*\n  YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumOfSquareAndSquareAndSquareAndSquare = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum * sum * sum * sum * sum;\n};\n\n/*\n  YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumOfSquareAndSquareAndSquareAndSquareAndSquare = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum * sum * sum * sum * sum * sum;\n};\n\n/*\n  YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumOfSquareAndSquareAndSquareAndSquareAndSquareAndSquare = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    sum += num * num;\n  });\n  return sum * sum * sum * sum * sum * sum * sum * sum;\n};\n\n/*\n  YOu are GIvEN a list of nuMbers.\n  YOu nEEd to return the sum of SQUareD numbers in the gIven list,\n  roUnd EAch EleMEnt in ThE list tO the uPPeR int(Ceiling) FirST.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumOfSquareAndSquare", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* creatE A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \" \" || lastChar === \"-\" || lastChar === \"_\";\n};\n\n/* checkIfLastCharIsALetter2 A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter2(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter2(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter2(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter2 = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \" \" || lastChar === \"-\" || lastChar === \"_\";\n};\n\n/* checkIfLastCharIsALetter3 A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter3(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter3(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter3(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter3 = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \" \" || lastChar === \"-\" || lastChar === \"_\";\n};\n\n/* checkIfLastCharIsALetter4 A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter4(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter4(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter4(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter4 = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \" \" || lastChar === \"-\" || lastChar === \"_\";\n};\n\n/* checkIfLastCharIsALetter5 A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter5(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter5(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter5(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter5(\" \") ➞ false\n  */\nconst checkIfLastCharIsALetter5 = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \" \" || lastChar === \"-\" || lastChar === \"_\";\n};\n\n/* checkIfLastCharIsALetter6 A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF chARaCTerS SEparATed bY SpAce.\n  Examples:\n  checkIfLastCharIsALetter6(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter6(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter6(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter6(\" \") ➞ false\n  */\nconst checkIfLastCharIsALetter6 = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \" \" || lastChar === \"-\" || lastChar === \"_\";\n};\n\n/* checkIfLastCharIsALetter7 A fUNction That reTurNS true if the laST CharActer\n  of a giveN strinG is AN alPhaBEtiCaL cHaracTEr ANd iS NoT\n  a part of a word, aND falSe oTheRwise.\n  NoTE: \"woRd\" iS a GroUp oF ch", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*CReate A FuNCtion wHich reTurNS the largest iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*CReate A FuNCtion wHich reTurNS the largest iNDEx of An element whiCh\n  is noT grEAteR thAN or EqUaL to thE ElEMenT ImMediately preceDIng iT. If\n  No sUch elemENt eXisTs TheN return -1. ThE giVEn ARraY WIll nOT conTAiN\n  duPLicaTE VaLUes.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let cur = 0;\n  let curMax = 0;\n  let curMaxIndex = 0;\n  let curMaxIndexMax = 0;\n  let curMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMax = 0;\n  let curMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMax = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMax = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax = 0;\n  let curMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/136", "prompt": "/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((acc, cur) => {\n    if (cur < acc) {\n      return cur;\n    }\n    return acc;\n  }, Number.MAX_VALUE);\n  return lst.map(n => n < largest? n : largest);\n};\n\n/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((acc, cur) => {\n    if (cur < acc) {\n      return cur;\n    }\n    return acc;\n  }, Number.MAX_VALUE);\n  return lst.map(n => n < largest? n : largest);\n};\n\n/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((acc, cur) => {\n    if (cur < acc) {\n      return cur;\n    }\n    return acc;\n  }, Number.MAX_VALUE);\n  return lst.map(n => n < largest? n : largest);\n};\n\n/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((acc, cur) => {\n    if (cur < acc) {\n      return cur;\n    }\n    return acc;\n  }, Number.MAX_VALUE);\n  return lst.map(n => n < largest? n : largest);\n};\n\n/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((acc, cur) => {\n    if (cur < acc) {\n      return cur;\n    }\n    return acc;\n  }, Number.MAX_VALUE);\n  return lst.map(n => n < largest? n : largest);\n};\n\n/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((acc, cur) => {\n    if (cur < acc) {\n      return cur;\n    }\n    return acc;\n  }, Number.MAX_VALUE);\n  return lst.map(n => n < largest? n : largest);\n};\n\n/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return thEm As nUll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((acc, cur) => {\n    if (cur < acc) {\n      return cur;\n    }\n    return acc;\n  }, Number.MAX_VALUE);\n  return lst.map(n => n < largest? n : largest);\n};\n\n/* creatE a FuNCtion tHat retUrnS a tuple (a, b), Where 'a' is\n  the laRGEst oF negative intEgers, aNd 'b' iS The SmaLLesT\n  oF pOsitiVE iNTegERs in a list.\n  if there is no negATive Or pOsiTive intEGerS, return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  creatE a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nulL\n  */\ncONst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  creatE a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nulL\n  */\ncONst compareOne = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return -1;\n};\n\n/*\n  compareTwo a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be. or,\n\n  compareTwo(1, 2.5) ➞ 2\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ 1\n  */\ncONst compareTwo = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 1;\n};\n\n/*\n  compareThree a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be. or,\n\n  compareThree(1, 2.5) ➞ 3\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ 1\n  */\ncONst compareThree = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 1;\n};\n\n/*\n  compareFour a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be. or,\n\n  compareFour(1, 2.5) ➞ 4\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"6\"\n  compareFour(\"1\", 1) ➞ 1\n  */\ncONst compareFour = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 1;\n};\n\n/*\n  compareFive a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be. or,\n\n  compareFive(1, 2.5) ➞ 5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"6\"\n  compareFive(\"1\", 1) ➞ 1\n  */\ncONst compareFive = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 1;\n};\n\n/*\n  compareSix a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be. or,\n\n  compareSix(1, 2.5) ➞ 6\n  compareSix(1, \"2,3\") ➞ \"2,3\"\n  compareSix(\"5,1\", \"6\") ➞ \"6\"\n  compareSix(\"1\", 1) ➞ 1\n  */\ncONst compareSix = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 1;\n};\n\n/*\n  compareSeven a FuNCtion tHat takEs iNTegers, floats, OR StriNgs representIng\n  reaL nuMBerS, anD RetUrNs The laRGeR VarIAbLe in its given variABle tYpe.\n  retUrn null IF thE vaLuEs aRe eQuaL.\n  noTE: If a REAl nuMBer iS RePreSEnteD AS a sTRing, tHE floatiNg poiNT MIgHt Be. or,\n\n  compareSeven(1, 2.5) ➞ 7\n  compareSeven(1, \"2,3\") ➞ \"2,3\"\n  compareSeven(\"5,1\", \"6\") ➞ \"6\"\n  compareSeven(\"1\", 1) ➞ 1\n  */\ncONst compareSeven = (a, b) => {\n  if (a === b) return 0;\n  if (a < b) return -1;\n  if (a > b) return 1;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*EValuaTE wHEther tHe giveN nuMBer n can be writTEN as tHe sum of exactLy 4 posiTivE EveN nuMBerS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  let evenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenEvenSum = 0;\n  let evenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenEvenSum = 0;\n  let evenEvenEvenEvenSum = 0;\n  let evenEvenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenEvenSum = 0;\n  let evenSum = 0;\n  let evenSum = 0;\n  let evenSum = 0;\n  let evenSum = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/139", "prompt": "/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*THe BraZIlIAn factOrial iS deFIned as:\n  brazilIAN_facTorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  for exaMplE:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 1) return 1;\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/14", "prompt": "/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* returN list Of ALl prefIxes frOm sHOrtest to longEST of tHe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const returN = []\n  let sHOrtest = string\n  let tHe =  string\n  let returNtHe =  string\n  let returNtHortest =  string\n  let returNtHortest2 =  string\n  let returNtHortest3 =  string\n  let returNtHortest4 =  string\n  let returNtHortest5 =  string\n  let returNtHortest6 =  string\n  let returNtHortest7 =  string\n  let returNtHortest8 =  string\n  let returNtHortest9 =  string\n  let returNtHortest10 =  string\n  let returNtHortest11 =  string\n  let returNtHortest12 =  string\n  let returNtHortest13 =  string\n  let returNtHortest14 =  string\n  let returNtHortest15 =  string\n  let returNtHortest16 =  string\n  let returNtHortest17 =  string\n  let returNtHortest18 =  string\n  let returNtHortest19 =  string\n  let returNtHortest20 =  string\n  let returNtHortest21 =  string\n  let returNtHortest22 =  string\n  let returNtHortest23 =  string\n  let returNtHortest24 =  string\n  let returNtHortest25 =  string\n  let returNtHortest26 =  string\n  let returNtHortest27 =  string\n  let returNtHortest28 =  string\n  let returNtHortest29 =  string\n  let returNtHortest30 =  string\n  let returNtHortest31 =  string\n  let returNtHortest32 =  string\n  let returNtHortest33 =  string\n  let returNtHortest34 =  string\n  let returNtHortest35 =  string\n  let returNtHortest36 =  string\n  let returNtHortest37 =  string\n  let returNtHortest38 =  string\n  let returNtHortest39 =  string\n  let returNtHortest40 =  string\n  let returNtHortest41 =  string\n  let returNtHortest42 =  string\n  let returNtHortest43 =  string\n  let returNtHortest44 =  string\n  let returNtHortest45 =  string\n  let returNtHortest46 =  string\n  let returNtHortest47 =  string\n  let returNtHortest48 =  string\n  let returNtHortest49 =  string\n  let returNtHortest50 =  string\n  let returNtHortest51 =  string\n  let returNtHortest52 =  string\n  let returNtHortest53 =  string\n  let returNtHortest54 =  string\n  let returNtHortest55 =  string\n  let returNtHortest56 =  string\n  let returNtHortest57 =  string\n  let returNtHortest58 =  string\n  let returNtHortest59 =  string\n  let returNtHortest60 =  string\n  let returNtHortest61 =  string\n  let returNtHortest62 =  string\n  let returNtHortest63 =  string\n  let returNtHortest64 =  string\n  let returNtHortest65 =  string\n  let returNtHortest66 =  string\n  let returNtHortest67 =  string\n  let returNtHortest68 =  string\n  let returNtHortest69 =  string\n  let returNtHortest70 =  string\n  let returNtHortest71 =  string\n  let returNtHortest72 =  string\n  let returNtHortest73 =  string\n  let returNtHortest74 =  string\n  let returNtHortest75 =  string\n  let returNtHortest76 =  string\n  let returNtHortest77 =  string\n  let returNtHortest78 =  string\n  let returNtHortest79 =  string\n  let returNtHortest80 =  string\n  let returNtHortest81 =  string\n  let returNtHortest82 =  string\n  let returNtHortest83 =  string\n  let returNtHortest84 =  string\n  let returNtHortest85 =  string\n  let returNtHortest86 =  string\n  let returNtHortest87 =  string\n  let returNtHortest88 =  string\n  let returNtHortest89 =  string\n  let returNtHortest90 =  string\n  let returNtHortest91 =  string\n  let returNtHortest92 =  string\n  let returNtHortest93 =  string\n  let returNtHortest94 =  string\n  let returNtHortest95 =  string\n  let returNtHortest96 =  string\n  let returNtHortest97 =  string\n  let returNtHortest98 =  string\n  let returNtHortest99 =  string\n  let returNtHortest100 =  string\n  let returNtHortest101 =  string\n  let returNtHortest102 =  string\n  let returNtHortest103 =  string\n  let returNtHortest104 =  string\n  let returNtHortest105 =  string\n  let returNtHortest106 =  string\n  let returNtHortest107 =  string\n  let returNtHortest108 =  string\n  let returNtHortest109 =  string\n  let returNtHortest110 =  string\n  let returNtHortest111 =  string\n  let returNtHortest112 =  string\n  let returNtHortest113 =  string\n  let returNtHortest114 =  string\n  let returNtHortest115 =  string\n  let ret", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  given A StRIng text, repLace alL spACes in it with undERScorEs, \n  and if a striNg has mOre THan 2 ConSEcuTiVe SpaceS, \n  ThEN rePLaCe all consecutiVE spaCes WitH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A StRIng text, repLace alL spACes in it with undERScorEs, \n  and if a striNg has mOre THan 2 ConSEcuTiVe SpaceS, \n  ThEN rePLaCe all consecutiVE spaCes WitH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let re = /(^|\\s)(\\s|$)/g;\n  let reLace =  /(\\s|$)/g;\n  let reSpace =  /\\s|\\s$/g;\n  let reUnder =  /\\s|\\s|\\s\\s$/g;\n  let reThan =  /\\s|\\s|\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s\\s", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/141", "prompt": "/*CReate a FUnCTion whIch takEs a sTRing represenTINg a fiLe's name, and reTurns\n  'YEs' iF The The FIle'S nAmE is vaLId, ANd rETuRns 'No' otherwise.\n  a File'S naMe iS considERed To bE vAliD if And ONlY If aLL The fOLlowINg ConDItioNS \n  ArE Met:\n  - ThERe shoulD not bE MORe ThAn three DiGIts ('0'-'9') in the FIle's nAme.\n  - the fiLe's NAMe conTAINS exAcTLy one DOT '.'\n  - The SUbstring before The Dot shoulD nOt be emptY, aND iT STaRTs With a letTer fRom \n  THe lATIn alphapEt ('a'-'z' and 'a'-'Z').\n  - The subSTring aFTEr THe dOt shoULD be OnE oF these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*CReate a FUnCTion whIch takEs a sTRing represenTINg a fiLe's name, and reTurns\n  'YEs' iF The The FIle'S nAmE is vaLId, ANd rETuRns 'No' otherwise.\n  a File'S naMe iS considERed To bE vAliD if And ONlY If aLL The fOLlowINg ConDItioNS \n  ArE Met:\n  - ThERe shoulD not bE MORe ThAn three DiGIts ('0'-'9') in the FIle's nAme.\n  - the fiLe's NAMe conTAINS exAcTLy one DOT '.'\n  - The SUbstring before The Dot shoulD nOt be emptY, aND iT STaRTs With a letTer fRom \n  THe lATIn alphapEt ('a'-'z' and 'a'-'Z').\n  - The subSTring aFTEr THe dOt shoULD be OnE oF these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-z0-9]+\\.[a-z0-9]+$/;\n  return regex.test(file_name);\n};\n\n/*\n  A fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL a fOL ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  this fUNcTIon wilL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\"\n  this fUNcTIon wilL take a list Of iNTegers. For all ENTrieS in the list, the functIon shaLl sQUarE thE IntEgEr Entry IF iTS inDEx Is a \n  multiple of 3 aND wilL cuBe tHe integER enTry If Its IndEx iS A mULtiPLE of 4 aND not A MuLtiPLe of 3. tHE fUNctioN Will not \n  ChangE THE eNtRies in the list WhOSe indeXEs are Not A multIplE OF 3 or 4. ThE FUNCtiOn SHall tHEN return the SUm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let isMultipleOfThree = lst.every((num) => num % 3 === 0);\n  let isMultipleOfFour = lst.every((num) => num % 4 === 0);\n  let isMultipleOfFive = lst.every((num) => num % 5 === 0);\n  let isMultipleOfSix = lst.every((num) => num % 6 === 0);\n  let isMultipleOfSeven = lst.every((num) => num % 7 === 0);\n  let isMultipleOfEight = lst.every((num) => num % 8 === 0);\n  let isMultipleOfNine = lst.every((num) => num % 9 === 0);\n  let isMultipleOfTen = lst.every((num) => num % 10 === 0);\n  let isMultipleOfEleven = lst.every((num) => num % 11 === 0);\n  let isMultipleOfTwelve = lst.every((num) => num % 12 === 0);\n  let isMultipleOfThirteen = lst.every((num) => num % 13 === 0);\n  let isMultipleOfFourteen = lst.every((num) => num % 14 === 0);\n  let isMultipleOfFifteen = lst.every((num) => num % 15 === 0);\n  let isMultipleOfSixteen = lst.every((num) => num % 16 === 0);\n  let isMultipleOfSeventeen = lst.every((num) => num % 17 === 0);\n  let isMultipleOfEighteen = lst.every((num) => num % 18 === 0);\n  let isMultipleOfNineteen = lst.every((num) => num % 19 === 0);\n  let isMultipleOfTwenty = lst.every((num) => num % 20 === 0);\n  let isMultipleOfThirty = lst.every((num) => num % 21 === 0);\n  let isMultipleOfFourty = lst.every((num) => num % 22 === 0);\n  let isMultipleOfFifty = lst.every((num) => num % 23 === 0);\n  let isMultipleOfSixty = lst.every((num) => num % 24 === 0);\n  let isMultipleOfSeventy = lst.every((num) => num % 25 === 0);\n  let isMultipleOfEighty = lst.every((num) => num % 26 === 0);\n  let isMultipleOfNinety = lst.every((num) => num % 27 === 0);\n  let isMultipleOfTwentyOne = lst.every((num) => num % 28 === 0);\n  let isMultipleOfThirtyOne = lst.every((num) => num % 29 === 0);\n  let isMultipleOfFourtyOne = lst.every((num) => num % 30 === 0);\n  let isMultipleOfFiftyOne = lst.every((num) => num % 31 === 0);\n  let isMultipleOfSixtyOne = lst.every((num) => num % 32 === 0);\n  let isMultipleOfSeventyOne = lst.every((num) => num % 33 === 0);\n  let isMultipleOfEightyOne = lst.every((num) => num % 34 === 0);\n  let isMultipleOfNinetyOne = lst.every((num) => num % 35 === 0);\n  let isMultipleOfTwentyTwo = lst.every((num) => num % 36 === 0);\n  let isMultipleOfThirtyTwo = lst.every((num) => num % 37 === 0);\n  let isMultipleOfFourtyTwo = lst.every((num) => num % 38 === 0);\n  let isMultipleOfFiftyTwo = lst.every((num) => num % 39 === 0);\n  let isMultipleOfSixtyTwo = lst.every((num) => num % 40 === 0);\n  let isMultipleOfSeventyTwo = lst.every((num) => num % 41 === 0);\n  let isMultipleOfEightyTwo = lst.every((num) => num % 42 === 0);\n  let isMultipleOfNinetyTwo = lst.every((num) => num % 43 === 0);\n  let isMultipleOfTwentyThree = lst.every((num) => num % 44 === 0);\n  let isMultipleOfThirtyThree = lst.every((num) => num % 45 === 0);\n  let isMultipleOfFourtyThree = lst.every((num) => num % 46 === 0);\n  let isMultipleOfFiftyThree = lst.every((num) => num % 47 === 0);\n  let isMultipleOfSixtyThree = lst.every((num) => num % 48 === 0);\n  let isMultipleOfSeventyThree = lst.every((num) => num % 49 === 0);\n  let isMultipleOfEightyThree = lst.every((num) => num % 50 === 0);\n  let isMultipleOfNinetyThree = lst.every((num) => num % 51 === 0);\n  let isMultipleOfTwentyFour = lst.every((num) => num % 52 === 0);\n  let isMultipleOfThirtyFour = lst.every((num) => num % 53 === 0);\n  let isMultipleOfFourtyFour = lst.every((num) => num % 54 === 0);\n  let isMultipleOfFiftyFour = lst.every((num) => num % 55 === 0);\n  let isMultipleOfSixtyFour = lst.every((num) => num % 56 === 0);\n  let isMultipleOfSeventyFour = lst.every((num) => num % 57 === 0);\n  let isMultipleOfEightyFour = lst.every((num) => num % 58 === 0);\n  let isMultipleOfNinetyFour = lst.every((num) => num % 59 === 0);\n  let isMultipleOfTwentyFive = lst.every((num) => num % 60 === 0);\n  let isMultipleOfThirtyFive = lst.every((num) => num % 61 === 0);\n  let isMultipleOfFourtyFive = lst.every((num) => num % 62 === 0);\n  let isMultipleOfFiftyFive = lst.every((num) => num % 63 === 0);\n  let isMultipleOfSixtyFive = lst.every((num) => num % 64 === 0);\n  let isMultipleOfSeventyFive = lst.every((num) => num % 65 === 0);\n  let isMultipleOfEightyFive = lst.every((num) => num % 66 === 0);\n  let isMultipleOfNinetyFive = lst.every((", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  let currentWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word!== \"\") {\n      if (currentWord!== \"\") {\n        result.push(currentWord);\n        currentWord = \"\";\n      }\n      currentWord = word;\n    }\n  }\n  if (currentWord!== \"\") {\n    result.push(currentWord);\n  }\n  return result.join(\" \");\n};\n\n/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInWords = (sentence) => {\n  const words = sentence.split(\" \");\n  let currentWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word!== \"\") {\n      if (currentWord!== \"\") {\n        return currentWord;\n      }\n      currentWord = word;\n    }\n  }\n  return currentWord;\n};\n\n/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let currentWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word!== \"\") {\n      if (currentWord!== \"\") {\n        return currentWord;\n      }\n      currentWord = word;\n    }\n  }\n  return currentWord;\n};\n\n/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInWordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let currentWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word!== \"\") {\n      if (currentWord!== \"\") {\n        return currentWord;\n      }\n      currentWord = word;\n    }\n  }\n  return currentWord;\n};\n\n/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInSentenceInWords = (sentence) => {\n  const words = sentence.split(\" \");\n  let currentWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word!== \"\") {\n      if (currentWord!== \"\") {\n        return currentWord;\n      }\n      currentWord = word;\n    }\n  }\n  return currentWord;\n};\n\n/*\n  you arE GiVEn a strIng repResENting a sentence,\n  the sentence conTAIns sOme words sepaRated bY a sPAce,\n  And YOu hAvE tO return a strINg THat COnTains the words fROm thE orIgiNal sentence,\n  whosE LenGthS aRe pRimE nuMBeRS,\n  thE ORder OF the WOrDs in tHE new STRiNG shouLD be the sAme as THE OrIgInal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*YOur taSK iS To implEment a fUncTIon that will simplify tHE ExprEssion\n  x * n. The funCtion rEtuRNs tRue IF x * n evAlUaTes to a WHoLE nuMBeR and false\n  otherWIse. BOth x And n, Are striNG rePreSeNtaTioN of a FRaCTioN, ANd haVE the FOlLowINg foRMAt,\n  <NUmeraTOr>/<denomInatoR> WHErE bOth numeRaTOr and dENominAtoR are pOsiTIVe whoLE NUMbeRs.\n\n  yOu can ASSume THat x, and n are valid FraCtions, anD dO not have ZeRO aS DEnOMiNator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = faLse\n  simplify(\"7/10\", \"10/2\") = FAlsE\n  */\nCOnst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOur taSK iS To implEment a fUncTIon that will simplify tHE ExprEssion\n  x * n. The funCtion rEtuRNs tRue IF x * n evAlUaTes to a WHoLE nuMBeR and false\n  otherWIse. BOth x And n, Are striNG rePreSeNtaTioN of a FRaCTioN, ANd haVE the FOlLowINg foRMAt,\n  <NUmeraTOr>/<denomInatoR> WHErE bOth numeRaTOr and dENominAtoR are pOsiTIVe whoLE NUMbeRs.\n\n  yOu can ASSume THat x, and n are valid FraCtions, anD dO not have ZeRO aS DEnOMiNator.\n\n  simplify(\"1/5\", \"5/1\") = trUe\n  simplify(\"1/6\", \"2/1\") = faLse\n  simplify(\"7/10\", \"10/2\") = FAlsE\n  */\nCOnst simplify = (x, n) => {\n  if (x === n) return x;\n  if (x.isNull && n.isNull) return n;\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber && n.isNumber) return x.times(n);\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString && n.isString) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean && n.isBoolean) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.isBoolean) return x.times(n);\n  if (x.isNull || n.isNull) return x;\n  if (x.isNumber || n.isNumber) return x.times(n);\n  if (x.isString || n.isString) return x.times(n);\n  if (x.isBoolean || n.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const ordered = nums.sort((a, b) => a - b);\n  return ordered.map((num) => num);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const ordered = nums.sort((a, b) => b - a);\n  return ordered.map((num) => num);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDesc = (nums) => {\n  const ordered = nums.sort((a, b) => b - a);\n  return ordered.map((num) => num);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDesc = (nums) => {\n  const ordered = nums.sort((a, b) => b - a);\n  return ordered.map((num) => num);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDesc = (nums) => {\n  const ordered = nums.sort((a, b) => b - a);\n  return ordered.map((num) => num);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDescDesc = (nums) => {\n  const ordered = nums.sort((a, b) => b - a);\n  return ordered.map((num) => num);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDescDesc = (nums) => {\n  const ordered = nums.sort((a, b) => b - a);\n  return ordered.map((num) => num);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: iF ThEre are several iTEms wIth SimIlar sum OF thEir DiGitS,\n  orDer THeM BasED On thEIr inDEx in OriGInal list.\n\n  fOR eXAmple:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescDescDescDescDescDesc = (nums) => {\n  const ordered = nums.sort((a, b) => b - a);\n  return ordered.map((num) => num);\n};\n\n/*\n  write A FuNCtion wHich soRts THe given list of intEGErs\n  in aScending ordeR accorDinG To tHe sUM of ThEiR digiTS.\n  NOTe: ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*WRite a FUnCTion thAt takeS an ARray of numberS AS inpUt and returns \n  The numBer OF elEmeNTs in tHe ArRay thAT aRE grEAtEr than 10 and both \n  fIRst aNd lAst Digits oF A nuMbeR aRe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WRite a FUnCTion thAt takeS an ARray of numberS AS inpUt and returns \n  The numBer OF elEmeNTs in tHe ArRay thAT aRE grEAtEr than 10 and both \n  fIRst aNd lAst Digits oF A nuMbeR aRe oDd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let numsArr = nums.filter(num => num >= 0 && num <= 10);\n  let numsArr2 = nums.filter(num => num >= 0 && num <= 9);\n  let numsArr3 = nums.filter(num => num >= 0 && num <= 8);\n  let numsArr4 = nums.filter(num => num >= 0 && num <= 7);\n  let numsArr5 = nums.filter(num => num >= 0 && num <= 6);\n  let numsArr6 = nums.filter(num => num >= 0 && num <= 5);\n  let numsArr7 = nums.filter(num => num >= 0 && num <= 4);\n  let numsArr8 = nums.filter(num => num >= 0 && num <= 3);\n  let numsArr9 = nums.filter(num => num >= 0 && num <= 2);\n  let numsArr10 = nums.filter(num => num >= 0 && num <= 1);\n  let numsArr11 = nums.filter(num => num >= 0 && num <= 0);\n  let numsArr12 = nums.filter(num => num >= 0 && num <= -1);\n  let numsArr13 = nums.filter(num => num >= 0 && num <= -2);\n  let numsArr14 = nums.filter(num => num >= 0 && num <= -3);\n  let numsArr15 = nums.filter(num => num >= 0 && num <= -4);\n  let numsArr16 = nums.filter(num => num >= 0 && num <= -5);\n  let numsArr17 = nums.filter(num => num >= 0 && num <= -6);\n  let numsArr18 = nums.filter(num => num >= 0 && num <= -7);\n  let numsArr19 = nums.filter(num => num >= 0 && num <= -8);\n  let numsArr20 = nums.filter(num => num >= 0 && num <= -9);\n  let numsArr21 = nums.filter(num => num >= 0 && num <= -10);\n  let numsArr22 = nums.filter(num => num >= 0 && num <= -11);\n  let numsArr23 = nums.filter(num => num >= 0 && num <= -12);\n  let numsArr24 = nums.filter(num => num >= 0 && num <= -13);\n  let numsArr25 = nums.filter(num => num >= 0 && num <= -14);\n  let numsArr26 = nums.filter(num => num >= 0 && num <= -15);\n  let numsArr27 = nums.filter(num => num >= 0 && num <= -16);\n  let numsArr28 = nums.filter(num => num >= 0 && num <= -17);\n  let numsArr29 = nums.filter(num => num >= 0 && num <= -18);\n  let numsArr30 = nums.filter(num => num >= 0 && num <= -19);\n  let numsArr31 = nums.filter(num => num >= 0 && num <= -20);\n  let numsArr32 = nums.filter(num => num >= 0 && num <= -21);\n  let numsArr33 = nums.filter(num => num >= 0 && num <= -22);\n  let numsArr34 = nums.filter(num => num >= 0 && num <= -23);\n  let numsArr35 = nums.filter(num => num >= 0 && num <= -24);\n  let numsArr36 = nums.filter(num => num >= 0 && num <= -25);\n  let numsArr37 = nums.filter(num => num >= 0 && num <= -26);\n  let numsArr38 = nums.filter(num => num >= 0 && num <= -27);\n  let numsArr39 = nums.filter(num => num >= 0 && num <= -28);\n  let numsArr40 = nums.filter(num => num >= 0 && num <= -29);\n  let numsArr321 = nums.filter(num => num >= 0 && num <= -30);\n  let numsArr322 = nums.filter(num => num >= 0 && num <= -31);\n  let numsArr323 = nums.filter(num => num >= 0 && num <= -32);\n  let numsArr324 = nums.filter(num => num >= 0 && num <= -33);\n  let numsArr325 = nums.filter(num => num >= 0 && num <= -34);\n  let numsArr326 = nums.filter(num => num >= 0 && num <= -35);\n  let numsArr327 = nums.filter(num => num >= 0 && num <= -36);\n  let numsArr328 = nums.filter(num => num >= 0 && num <= -37);\n  let numsArr329 = nums.filter(num => num >= 0 && num <= -38);\n  let numsArr330 = nums.filter(num => num >= 0 && num <= -39);\n  let numsArr331 = nums.filter(num => num >= 0 && num <= -40);\n  let numsArr332 = nums.filter(num => num >= 0 && num <= -41);\n  let numsArr333 = nums.filter(num => num >= 0 && num <= -42);\n  let numsArr334 = nums.filter(num => num >= 0 && num <= -43);\n  let numsArr335 = nums.filter(num => num >= 0 && num <= -44);\n  let numsArr336 = nums.filter(num => num >= 0 && num <= -45);\n  let numsArr337 = nums.filter(num => num >= 0 && num <= -46);\n  let numsArr338 = nums.filter(num => num >= 0 && num <= -47);\n  let numsArr339 = nums.filter(num => num >= 0 && num <= -48);\n  let numsArr340 = nums.filter(num => num >= 0 && num <= -49);\n  let numsArr341 = nums.filter(num => num >= 0 && num <= -50);\n  let numsArr342 = nums.filter(num => num >= 0 && num <= -51);\n  let numsArr343 = nums.filter(num => num >= 0 && num <= -52);\n  let numsArr344 = nums.filter(num => num >= 0 && num <= -53);\n  let numsArr345 = nums.filter(num => num >= 0 && num <= -54);\n  let numsArr346 = nums.filter(num => num >= 0 && num <= -55);\n  let numsArr347 = nums.filter(num => num >= 0 && num <= -56);\n  let numsArr348 = nums.filter(num => num >= 0 && num <= -57);\n  let numsArr349 = nums.filter(num => num >= 0 && num <= -58);\n  let numsArr350 = nums.filter(num => num >= 0 && num <= -59);\n  let numsArr351 = nums.filter(num => num >= 0 && num <= -60);\n  let numsArr352 = nums.filter(num => num >= 0 && num <= -61);\n  let numsArr353 = nums.filter(num => num >= 0 && num <= -62);\n  let numsArr354 = nums.filter(num => num", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => Array(n - 1).fill(0));\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < i; j++) {\n      for (let k = 0; k < i; k++) {\n        a[i][j] += a[j][i] + a[i][k];\n      }\n    }\n  }\n  return a.reduce((a, b) => Math.max(a, b), 0);\n};\n\n/*\n  You arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => Array(n - 1).fill(0));\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < i; j++) {\n      for (let k = 0; k < i; k++) {\n        a[i][j] += a[j][i] + a[i][k];\n      }\n    }\n  }\n  return a.reduce((a, b) => Math.max(a, b), 0);\n};\n\n/*\n  You arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => Array(n - 1).fill(0));\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < i; j++) {\n      for (let k = 0; k < i; k++) {\n        a[i][j] += a[j][i] + a[i][k];\n      }\n    }\n  }\n  return a.reduce((a, b) => Math.max(a, b), 0);\n};\n\n/*\n  You arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples4 = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => Array(n - 1).fill(0));\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < i; j++) {\n      for (let k = 0; k < i; k++) {\n        a[i][j] += a[j][i] + a[i][k];\n      }\n    }\n  }\n  return a.reduce((a, b) => Math.max(a, b), 0);\n};\n\n/*\n  You arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples5 = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => Array(n - 1).fill(0));\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < i; j++) {\n      for (let k = 0; k < i; k++) {\n        a[i][j] += a[j][i] + a[i][k];\n      }\n    }\n  }\n  return a.reduce((a, b) => Math.max(a, b), 0);\n};\n\n/*\n  You arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer arraY a of leNgtH n.\n      for EacH i (1 ≤ i ≤ n), The VaLuE of a[i] = i * i - i + 1.\n      rEtURn tHE nUmber of triples (A[I], a[j], a[K]) of A whEre i < j < k, \n  and a[I] + A[j] + a[K] is A mUltIplE of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples6 = (n) => {\n  const a = [...Array(n - 1).keys()].map(() => Array(n - 1).fill(0));\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < i; j++) {\n      for (let k = 0; k < i; k++) {\n        a[i][j] += a[j][i] + a[i][k];\n      }\n    }\n  }\n  return a.reduce((a, b) => Math.max(a, b), 0);\n};\n\n/*\n  You arE GiVEn a posItive iNteGEr n. You have to cREAte aN integer ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/148", "prompt": "/* there ARe EIght plAnets in oUr sOLar system: the CLOserSt to the Sun\n  is mercurY, thE NexT onE Is VEnUs, Then EARtH, marS, juPiter, Saturn,\n  UraNUs, NePtuNe.\n  WRite a fuNCtiOn tHaT taKes Two PLaNEt nAMEs as STrinGS planet1 aNd planet2.\n  THE funCTIoN ShoulD return A tuple contaiNing aLL PLaNeTs whose OrBIts are\n  LOcateD beTween The ORBit of planet1 AND THe oRbIT of planet2, soRTEd by\n  THe proximity to tHe sUn.\n  The funCtIon shoulD return aN EmPTY tuple iF planet1 Or planet2\n  Are not cOrreCt pLAneT NAmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* there ARe EIght plAnets in oUr sOLar system: the CLOserSt to the Sun\n  is mercurY, thE NexT onE Is VEnUs, Then EARtH, marS, juPiter, Saturn,\n  UraNUs, NePtuNe.\n  WRite a fuNCtiOn tHaT taKes Two PLaNEt nAMEs as STrinGS planet1 aNd planet2.\n  THE funCTIoN ShoulD return A tuple contaiNing aLL PLaNeTs whose OrBIts are\n  LOcateD beTween The ORBit of planet1 AND THe oRbIT of planet2, soRTEd by\n  THe proximity to tHe sUn.\n  The funCtIon shoulD return aN EmPTY tuple iF planet1 Or planet2\n  Are not cOrreCt pLAneT NAmes.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1OrPlanet2OrPlanet3 = planet1 === planet2? planet1 : planet2;\n  const planet1OrPlanet2OrPlanet4 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet5 = planet1 === planet2? planet1 : planet2;\n  const planet1OrPlanet2OrPlanet6 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet7 = planet1 === planet2? planet1 : planet2;\n  const planet1OrPlanet2OrPlanet8 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet9 = planet1 === planet2? planet1 : planet2;\n  const planet1OrPlanet2OrPlanet10 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet11 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet12 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet13 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet14 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet15 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet16 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet17 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet18 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet19 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet20 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet21 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet22 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet23 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet24 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet25 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet26 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet27 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet28 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet29 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet30 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet31 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet32 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet33 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet34 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet35 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet36 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet37 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet38 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet39 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet40 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet41 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet42 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet43 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet44 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet45 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet2OrPlanet46 = planet1 === planet2? planet2 : planet1;\n  const planet1OrPlanet", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*WRite a FUnCTion thAt accePts A list Of strings as a PARameTer,\n  deletes thE strinGs tHAt hAve ODd lEnGtHs froM It,\n  ANd rETuRns the resulted list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WRite a FUnCTion thAt accePts A list Of strings as a PARameTer,\n  deletes thE strinGs tHAt hAve ODd lEnGtHs froM It,\n  ANd rETuRns the resulted list WIth a SorTed Order,\n  ThE list Is aLwaYs A list of StrIngS AnD NevER An arRAy of NUmBerS,\n  And iT MAy COntaiN DuplicaTes.\n  ThE ORDeR oF the list shoUlD Be asceNDing bY leNgth oF eaCH Word, aND YOU\n  shOuLD return the list sORTed bY That rule.\n  If two wOrdS have the SaMe length, SoRT tHE list AlPHaBeticalLy.\n  ThE fuNCtiON Should return a list oF striNgs in sorteD Order.\n  YOU MaY AssUme thAT All WoRdS will have the samE LengtH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.reduce((acc, cur) => acc + cur, 0);\n};\n\nconst sortList = (lst) => {\n  return lst.sort((a, b) => a - b);\n};\n\nconst sortListBy = (lst) => {\n  return lst.sort((a, b) => a - b);\n};\n\nconst sortListByLength = (lst) => {\n  return lst.sort((a, b) => a.length - b.length);\n};\n\nconst sortListByLengthDesc = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthAsc = (lst) => {\n  return lst.sort((a, b) => a.length - b.length);\n};\n\nconst sortListByLengthAscending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescending = (lst) => {\n  return lst.sort((a, b) => a.length - b.length);\n};\n\nconst sortListByLengthAscendingDesc = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthAscendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescending = (lst) => {\n  return lst.sort((a, b) => a.length - b.length);\n};\n\nconst sortListByLengthDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.sort((a, b) => b.length - a.length);\n};\n\nconst sortListByLengthDescendingDescendingDescending = (lst) => {\n  return lst.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/15", "prompt": "/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retVal = '';\n  for (let i = 0; i < n; i++) {\n    retVal += String.fromCharCode(97 + i);\n  }\n  return retVal;\n};\n\n/* returN A sTRing coNtainiNg sPAce-delimited NUMberS starting froM 0 upto n iNclUSivE.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  const result = x || y;\n  if (n === 0) {\n    return result;\n  }\n  return n % 2 === 0? result : xOrY(n / 2, y, result);\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  const result = x || y;\n  if (n === 0) {\n    return result;\n  }\n  return n % 2 === 0? result : xOrZ(n / 2, y, result);\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  const result = x || y;\n  if (n === 0) {\n    return result;\n  }\n  return n % 2 === 0? result : xOrW(n / 2, y, result);\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  const result = x || y;\n  if (n === 0) {\n    return result;\n  }\n  return n % 2 === 0? result : xOrX(n / 2, y, result);\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  const result = x || y;\n  if (n === 0) {\n    return result;\n  }\n  return n % 2 === 0? result : xOrY(n / 2, y, result);\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  const result = x || y;\n  if (n === 0) {\n    return result;\n  }\n  return n % 2 === 0? result : xOrZ(n / 2, y, result);\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  const result = x || y;\n  if (n === 0) {\n    return result;\n  }\n  return n % 2 === 0? result : xOrW(n / 2, y, result);\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  const result = x || y;\n  if (n === 0) {\n    return result;\n  }\n  return n % 2 === 0? result : xOrX(n / 2, y, result);\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  const result = x || y;\n  if (n === 0) {\n    return result;\n  }\n  return n % 2 === 0? result : xOrY(n / 2, y, result);\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  const result = x || y;\n  if (n === 0) {\n    return result;\n  }\n  return n % 2 === 0? result : xOrZ(n / 2, y, result);\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  const result = x || y;\n  if (n === 0) {\n    return result;\n  }\n  return n % 2 === 0? result : xOrW(n / 2, y, result);\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  const result = x || y;\n  if (n === 0) {\n    return result;\n  }\n  return n % 2 === 0? result : xOrX(n / 2, y, result);\n};\n\n/*A SimplE PrOGram whIch shoUld return THe value of x if n iS \n  A PrimE number and shOuld return thE vaLUe oF y otHErwIsE.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  const result = x || y;\n  if (n === 0) {\n    return result;\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* given A list Of NUmbers, return The sum Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  let sum = 0;\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n      num++;\n    }\n  }\n  return sum / num;\n};\n\n/* Given A list Of NUmbers, return The product Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 * 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  let sum = 0;\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n      num++;\n    }\n  }\n  return sum / num;\n};\n\n/* Given A list Of NUmbers, return The product Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 * 1 * 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  let sum = 0;\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n      num++;\n    }\n  }\n  return sum / num;\n};\n\n/* Given A list Of NUmbers, return The product Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 * 1 * 1 * 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  let sum = 0;\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n      num++;\n    }\n  }\n  return sum / num;\n};\n\n/* Given A list Of NUmbers, return The product Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 * 1 * 1 * 1 * 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  let sum = 0;\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n      num++;\n    }\n  }\n  return sum / num;\n};\n\n/* Given A list Of NUmbers, return The product Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 * 1 * 1 * 1 * 1 * 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  let sum = 0;\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n      num++;\n    }\n  }\n  return sum / num;\n};\n\n/* Given A list Of NUmbers, return The product Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 * 1 * 1 * 1 * 1 * 1 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  let sum = 0;\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n      num++;\n    }\n  }\n  return sum / num;\n};\n\n/* Given A list Of NUmbers, return The product Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 * 1 * 1 * 1 * 1 * 1 + 1 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  let sum = 0;\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n      num++;\n    }\n  }\n  return sum / num;\n};\n\n/* Given A list Of NUmbers, return The product Of sQUares of the nuMBErs\n  in tHe list that are odd. ignore NumBErs ThaT Are NeGaTive oR NoT IntEGeRs.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 * 1 * 1 * 1 * 1 * 1 + 1 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is EMpty, return 0.\n  */\nConSt doubleTheDifference = (lst) => {\n  let sum = 0;\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/152", "prompt": "/*I Think WE aLL rememBer thaT feELing when the rESUlt oF some long-awaIted\n  evEnt IS fiNalLY knOwN. THe feeLInGS anD ThOughts you have aT That MomEnt Are\n  defiNIteLy wOrTh nOtiNg dOWn ANd cOMPariNG.\n  YouR TaSk iS To deTERmINe if a PErson coRrectLY GUeSsEd the reSuLTs of a nUMber oF maTches.\n  you ARE giveN TWO ArrAyS Of scoRES and GUesses of equal lEngTh, where eAcH index shOwS A mATCh. \n  rEtUrn an arRay oF thE SamE LEngth denOting How far ofF Each guess waS. iF tHEy hAve guESSed CoRrEctly,\n  the value is 0, ANd if nOT, THe vaLuE is THe AbsoLUte DiffeREnCe bEtweeN the guess And thE score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*I Think WE aLL rememBer thaT feELing when the rESUlt oF some long-awaIted\n  evEnt IS fiNalLY knOwN. THe feeLInGS anD ThOughts you have aT That MomEnt Are\n  defiNIteLy wOrTh nOtiNg dOWn ANd cOMPariNG.\n  YouR TaSk iS To deTERmINe if a PErson coRrectLY GUeSsEd the reSuLTs of a nUMber oF maTches.\n  you ARE giveN TWO ArrAyS Of scoRES and GUesses of equal lEngTh, where eAcH index shOwS A mATCh. \n  rEtUrn an arRay oF thE SamE LEngth denOting How far ofF Each guess waS. iF tHEy hAve guESSed CoRrEctly,\n  the value is 0, ANd if nOT, THe vaLuE is THe AbsoLUte DiffeREnCe bEtweeN the guess And thE score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [player, computer] = game;\n  const [playerScore, computerScore] = guess;\n  const [playerMove, computerMove] = player;\n  const [playerMoveScore, computerMoveScore] = playerScore;\n  const [playerMoveMove, computerMoveMove] = computer;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveScore;\n  const [playerMoveMoveMoveScore, computerMoveMoveScore] = computerMoveScore;\n  const [playerMoveMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = playerMoveMoveScore;\n  const [playerMoveMoveScore, computerMoveMoveScore] = computerMoveMoveScore;\n  const [playerMoveMoveScore, computerMove", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*YOu wilL Be GIven thE name oF a cLAss (a string) anD A list Of extensions.\n  ThE extensions are to be used To load AddITioNal CLasSeS tO the cLAsS. the\n  STrEngth of the exteNSion Is aS foLlows: LeT cAP Be tHe NumBer Of tHE uPPerCASe\n  leTTers in THe ExtENsioN'S NaME, and lET SM be thE numbER OF lOwErcase lEtTErs\n  in the EXtensIon'S name, The STRengtH IS GIveN bY The frACTion caP - SM.\n  You should fInd The stronGeSt extensIoN AnD return A StRInG in this\n  foRmat: claSSNaME.strongesTExteNsionNamE.\n  if therE ARe TWo oR more extensions WITh tHe SaMe strength, you shOUld\n  chOOSE the OnE thAT cOmes FIrsT in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu wilL Be GIven thE name oF a cLAss (a string) anD A list Of extensions.\n  ThE extensions are to be used To load AddITioNal CLasSeS tO the cLAsS. the\n  STrEngth of the exteNSion Is aS foLlows: LeT cAP Be tHe NumBer Of tHE uPPerCASe\n  leTTers in THe ExtENsioN'S NaME, and lET SM be thE numbER OF lOwErcase lEtTErs\n  in the EXtensIon'S name, The STRengtH IS GIveN bY The frACTion caP - SM.\n  You should fInd The stronGeSt extensIoN AnD return A StRInG in this\n  foRmat: claSSNaME.strongesTExteNsionNamE.\n  if therE ARe TWo oR more extensions WITh tHe SaMe strength, you shOUld\n  chOOSE the OnE thAT cOmes FIrsT in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extensions_length = extensions.length;\n  let strongestExtension = '';\n  let strongestExtension_length = extensions_length;\n  let strongestExtension_strongestExtension = '';\n  let strongestExtension_strongestExtension_length = strongestExtension_length;\n  let strongestExtension_strongestExtension_strongestExtension = '';\n  let strongestExtension_strongestExtension_strongestExtension_length = strongestExtension_strongestExtension_length;\n  let strongestExtension_strongestExtension_strongestExtension_strongestExtension = '';\n  let strongestExtension_strongestExtension_strongestExtension_strongestExtension_length = strongestExtension_strongestExtension_strongestExtension_length;\n  let strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension = '';\n  let strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_length = strongestExtension_strongestExtension_strongestExtension_strongestExtension_length;\n  let strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension = '';\n  let strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension = '';\n  let strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension = '';\n  let strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension = '';\n  let strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_strongestExtension_str", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/154", "prompt": "/*YOu are GIvEN 2 words. you neeD to return TRue if the secoND Word Or any of its roTationS is a SUbsTriNG in thE fIrSt worD\n  cycpatternCheck(\"abcd\",\"abd\") => FaLSe\n  cycpatternCheck(\"hello\",\"ell\") => tRUe\n  cycpatternCheck(\"whassup\",\"psus\") => False\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => TRue\n  */\ncOnsT cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN 2 words. you neeD to return TRue if the secoND Word Or any of its roTationS is a SUbsTriNG in thE fIrSt worD\n  cycpatternCheck(\"abcd\",\"abd\") => FaLSe\n  cycpatternCheck(\"hello\",\"ell\") => tRUe\n  cycpatternCheck(\"whassup\",\"psus\") => False\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => TRue\n  */\ncOnsT cycpatternCheck = (a, b) => {\n  let aWord = a.split('')\n  let bWord = b.split('')\n  let aWordLen = aWord.length\n  let bWordLen = bWord.length\n  let aWordWords = aWord.map((word, index) => {\n    if (index === aWordLen - 1) {\n      return word\n    }\n    return word + aWord[index + 1]\n  })\n  let bWordWords = bWord.map((word, index) => {\n    if (index === bWordLen - 1) {\n      return word\n    }\n    return word + bWord[index + 1]\n  })\n  let aWordWordsArray = aWordWords.join('')\n  let bWordWordsArray = bWordWords.join('')\n  let aWordWordsArrayLen = aWordWordsArray.length\n  let bWordWordsArrayLen = bWordWordsArray.length\n  let aWordWordsArrayWords = aWordWordsArray.split('')\n  let bWordWordsArrayWords = bWordWordsArray.split('')\n  let aWordWordsArrayWordsLen = aWordWordsArrayWords.length\n  let bWordWordsArrayWordsLen = bWordWordsArrayWords.length\n  let aWordWordsArrayWordsWords = aWordWordsArrayWords.map((word, index) => {\n    if (index === aWordWordsArrayLen - 1) {\n      return word\n    }\n    return word + aWordWordsArrayWords[index + 1]\n  })\n  let bWordWordsArrayWordsWords = bWordWordsArrayWords.map((word, index) => {\n    if (index === bWordWordsArrayLen - 1) {\n      return word\n    }\n    return word + bWordWordsArrayWords[index + 1]\n  })\n  let aWordWordsArrayWordsWordsArray = aWordWordsArrayWordsWords.join('')\n  let bWordWordsArrayWordsWordsArray = bWordWordsArrayWordsWords.join('')\n  let aWordWordsArrayWordsWordsArrayLen = aWordWordsArrayWordsWordsArray.length\n  let bWordWordsArrayWordsWordsArrayLen = bWordWordsArrayWordsWordsArray.length\n  let aWordWordsArrayWordsWordsArrayWords = aWordWordsArrayWordsWordsArray.split('')\n  let bWordWordsArrayWordsWordsArrayWords = bWordWordsArrayWordsWordsArray.split('')\n  let aWordWordsArrayWordsWordsArrayWordsLen = aWordWordsArrayWordsWordsArrayWords.length\n  let bWordWordsArrayWordsWordsArrayWordsLen = bWordWordsArrayWordsWordsArrayWords.length\n  let aWordWordsArrayWordsWordsArrayWordsWords = aWordWordsArrayWordsWordsArrayWords.map((word, index) => {\n    if (index === aWordWordsArrayWordsWordsLen - 1) {\n      return word\n    }\n    return word + aWordWordsArrayWordsWordsWords[index + 1]\n  })\n  let bWordWordsArrayWordsWordsArrayWordsWords = bWordWordsArrayWordsWordsArrayWords.map((word, index) => {\n    if (index === bWordWordsArrayWordsWordsLen - 1) {\n      return word\n    }\n    return word + bWordWordsArrayWordsWordsWords[index + 1]\n  })\n  let aWordWordsArrayWordsWordsArrayWordsWordsArray = aWordWordsArrayWordsWordsArrayWordsWords.join('')\n  let bWordWordsArrayWordsWordsArrayWordsWordsArray = bWordWordsArrayWordsWordsArrayWordsWords.join('')\n  let aWordWordsArrayWordsWordsArrayWordsWordsArrayLen = aWordWordsArrayWordsWordsArrayWordsArrayWordsArray.length\n  let bWordWordsArrayWordsWordsArrayWordsWordsArrayLen = bWordWordsArrayWordsWordsArrayWordsArrayWordsArray.length\n  let aWordWordsArrayWordsWordsArrayWordsWordsArrayWords = aWordWordsArrayWordsWordsArrayWordsWordsArrayWords.join('')\n  let bWordWordsArrayWordsWordsArrayWordsWordsArrayWordsWords = bWordWordsArrayWordsWordsArrayWordsWordsArrayWordsWords.join('')\n  let aWordWordsArrayWordsWordsArrayWordsWordsArrayWordsWordsArray = aWordWordsArrayWordsWordsArrayWordsWordsArrayWordsArrayWords.join('')\n  let bWordWordsArrayWordsWordsArrayWordsWordsArrayWordsWordsArray = bWordWordsArrayWordsWordsArrayWordsWordsArrayWordsWordsArrayWords.join('')\n  let aWordWordsArrayWordsWordsArrayWordsWordsArrayWordsWordsArrayWordsArray = aWordWordsArrayWordsWordsArrayWordsWordsArrayWordsArrayWordsArrayWords.join('')\n  let bWordWordsArrayWordsWordsArrayWordsWordsArrayWordsWordsArrayWordsArray = bWordWordsArrayWordsWordsArrayWordsWordsArrayWordsWordsArrayWordsArrayWords.join('')\n  let aWordWordsArrayWordsWordsArrayWordsWordsArrayWordsWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWordsArrayWords", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven aN InTEger. return a tuple tHat has The NUmber of even aND Odd dIgits respectIvely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let evenCount = 0;\n  let oddCount = 0;\n  let evenOddCount = 0;\n  let oddEvenCount = 0;\n  let evenOddOddCount = 0;\n  let oddEvenOddCount = 0;\n  let evenOddOddOddCount = 0;\n  let oddEvenOddOddOddCount = 0;\n  let evenOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEvenOddOddOddOddOddCount = 0;\n  let evenOddOddOddOddOddOddCount = 0;\n  let oddEven", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A PoSItive iNteger, ObtAIn its roman nuMERal eQuivalent as a String,\n  And return IT in loWerCAse.\n  reStRictiONs: 1 <= num <= 1000\n\n  eXamPLeS:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const intToMiniRomanMap = {\n    1: 0,\n    2: 1,\n    3: 2,\n    4: 3,\n    5: 4,\n    6: 5,\n    7: 6,\n    8: 7,\n    9: 8,\n    10: 9,\n    11: 10,\n    12: 11,\n    13: 12,\n    14: 13,\n    15: 14,\n    16: 15,\n    17: 16,\n    18: 17,\n    19: 18,\n    20: 19,\n    21: 20,\n    22: 21,\n    23: 22,\n    24: 23,\n    25: 24,\n    26: 25,\n    27: 26,\n    28: 27,\n    29: 28,\n    30: 29,\n    31: 30,\n    32: 31,\n    33: 32,\n    34: 33,\n    35: 34,\n    36: 35,\n    37: 36,\n    38: 37,\n    39: 38,\n    40: 39,\n    41: 40,\n    42: 41,\n    43: 42,\n    44: 43,\n    45: 44,\n    46: 45,\n    47: 46,\n    48: 47,\n    49: 48,\n    50: 49,\n    51: 50,\n    52: 51,\n    53: 52,\n    54: 53,\n    55: 54,\n    56: 55,\n    57: 56,\n    58: 57,\n    59: 58,\n    60: 59,\n    61: 60,\n    62: 61,\n    63: 62,\n    64: 63,\n    65: 64,\n    66: 65,\n    67: 66,\n    68: 67,\n    69: 68,\n    70: 69,\n    71: 70,\n    72: 71,\n    73: 72,\n    74: 73,\n    75: 74,\n    76: 75,\n    77: 76,\n    78: 77,\n    79: 78,\n    80: 79,\n    81: 80,\n    82: 81,\n    83: 82,\n    84: 83,\n    85: 84,\n    86: 85,\n    87: 86,\n    88: 87,\n    89: 88,\n    90: 89,\n    91: 90,\n    92: 91,\n    93: 92,\n    94: 93,\n    95: 94,\n    96: 95,\n    97: 96,\n    98: 97,\n    99: 98,\n    100: 99,\n    101: 100,\n    102: 101,\n    103: 102,\n    104: 103,\n    105: 104,\n    106: 105,\n    107: 106,\n    108: 107,\n    109: 108,\n    110: 109,\n    111: 110,\n    112: 111,\n    113: 112,\n    114: 113,\n    115: 114,\n    116: 115,\n    117: 116,\n    118: 117,\n    119: 118,\n    120: 119,\n    121: 120,\n    122: 121,\n    123: 122,\n    124: 123,\n    125: 124,\n    126: 125,\n    127: 126,\n    128: 127,\n    129: 128,\n    130: 129,\n    131: 130,\n    132: 131,\n    133: 132,\n    134: 133,\n    135: 134,\n    136: 135,\n    137: 136,\n    138: 137,\n    139: 138,\n    140: 139,\n    141: 140,\n    142: 141,\n    143: 142,\n    144: 143,\n    145: 144,\n    146: 145,\n    147: 146,\n    148: 147,\n    149: 148,\n    150: 149,\n    151: 150,\n    152: 151,\n    153: 152,\n    154: 153,\n    155: 154,\n    156: 155,\n    157: 156,\n    158: 157,\n    159: 158,\n    160: 159,\n    161: 160,\n    162: 161,\n    163: 162,\n    164: 163,\n    165: 164,\n    166: 165,\n    167: 166,\n    168: 167,\n    169: 168,\n    170: 169,\n    171: 170,\n    172: 171,\n    173: 172,\n    174: 173,\n    175: 174,\n    176: 175,\n    177: 176,\n    178: 177,\n    179: 178,\n    180: 179,\n    181: 180,\n    182: 181,\n    183: 182,\n    184: 183,\n    185: 184,\n    186: 185,\n    187: 186,\n    188: 187,\n    189: 188,\n    190: 189,\n    191: 190,\n    192: 191,\n    193: 192,\n    194: 193,\n    195: 194,\n    196: 195,\n    197: 196,\n    198: 197,\n    199: 198,\n    200: 199,\n    201: 200,\n    202: 201,\n    203: 202,\n    204: 203,\n    205: 204,\n    206: 205,\n    207: 206,\n    208: 207,\n    209: 208,\n    210: 210,\n    211: 211,\n    212: 212,\n    213: 213,\n    214: 214,\n    215: 215,\n    216: 216,\n    217: 217,\n    218: 218,\n    219: 219,\n    220: 220,\n    221: 221,\n    222: 222,\n    223: 223,\n    224: 224,\n    225: 225,\n    226: 226,\n    227: 227,\n    228: 228,\n    229: 229,\n    230: 230,\n    231: 231,\n    232: 232,\n    233: 233,\n    234: 234,\n    235: 235,\n    236: 236,\n    237: 237,\n    238: 238,\n    239: 239,\n    240: 240,\n    241: 241,\n    242: 242,\n    243: 243,\n    244: 244,\n    245: 245,\n    246", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn true if the Three\n  sIdeS ForM a riGHt-aNgLeD triaNGlE, FalSE oTherwise.\n  A right-ANgleD trIanGle is a trIAngLe in wHiCh oNe aNglE Is RIghT ANgle OR\n  90 degREe.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn true if the Three\n  sIdeS ForM a riGHt-aNgLeD triaNGlE, FalSE oTherwise.\n  A right-ANgleD trIanGle is a trIAngLe in wHiCh oNe aNglE Is RIghT ANgle OR\n  90 degREe.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const a3 = Math.cos(b * Math.PI / 180);\n  const a4 = Math.sin(b * Math.PI / 180);\n  const a5 = Math.cos(c * Math.PI / 180);\n  const a6 = Math.sin(c * Math.PI / 180);\n  const b1 = Math.cos(a1 * Math.PI / 180);\n  const b2 = Math.sin(a1 * Math.PI / 180);\n  const b3 = Math.cos(a2 * Math.PI / 180);\n  const b4 = Math.sin(a2 * Math.PI / 180);\n  const b5 = Math.cos(a3 * Math.PI / 180);\n  const b6 = Math.sin(a3 * Math.PI / 180);\n  const c1 = Math.cos(a1 * Math.PI / 180);\n  const c2 = Math.sin(a1 * Math.PI / 180);\n  const c3 = Math.cos(a2 * Math.PI / 180);\n  const c4 = Math.sin(a2 * Math.PI / 180);\n  const c5 = Math.cos(a3 * Math.PI / 180);\n  const c6 = Math.sin(a3 * Math.PI / 180);\n  const d1 = Math.cos(b1 * Math.PI / 180);\n  const d2 = Math.sin(b1 * Math.PI / 180);\n  const d3 = Math.cos(b2 * Math.PI / 180);\n  const d4 = Math.sin(b2 * Math.PI / 180);\n  const d5 = Math.cos(b3 * Math.PI / 180);\n  const d6 = Math.sin(b3 * Math.PI / 180);\n  const e1 = Math.cos(c1 * Math.PI / 180);\n  const e2 = Math.sin(c1 * Math.PI / 180);\n  const e3 = Math.cos(c2 * Math.PI / 180);\n  const e4 = Math.sin(c2 * Math.PI / 180);\n  const e5 = Math.cos(c3 * Math.PI / 180);\n  const e6 = Math.sin(c3 * Math.PI / 180);\n  const f1 = Math.cos(d1 * Math.PI / 180);\n  const f2 = Math.sin(d1 * Math.PI / 180);\n  const f3 = Math.cos(d2 * Math.PI / 180);\n  const f4 = Math.sin(d2 * Math.PI / 180);\n  const f5 = Math.cos(d3 * Math.PI / 180);\n  const f6 = Math.sin(d3 * Math.PI / 180);\n  const g1 = Math.cos(d4 * Math.PI / 180);\n  const g2 = Math.sin(d4 * Math.PI / 180);\n  const g3 = Math.cos(d5 * Math.PI / 180);\n  const g4 = Math.sin(d5 * Math.PI / 180);\n  const g5 = Math.cos(d6 * Math.PI / 180);\n  const g6 = Math.sin(d6 * Math.PI / 180);\n  const h1 = Math.cos(e1 * Math.PI / 180);\n  const h2 = Math.sin(e1 * Math.PI / 180);\n  const h3 = Math.cos(e2 * Math.PI / 180);\n  const h4 = Math.sin(e2 * Math.PI / 180);\n  const h5 = Math.cos(e3 * Math.PI / 180);\n  const h6 = Math.sin(e3 * Math.PI / 180);\n  const i1 = Math.cos(f1 * Math.PI / 180);\n  const i2 = Math.sin(f1 * Math.PI / 180);\n  const i3 = Math.cos(f2 * Math.PI / 180);\n  const i4 = Math.sin(f2 * Math.PI / 180);\n  const i5 = Math.cos(f3 * Math.PI / 180);\n  const i6 = Math.sin(f3 * Math.PI / 180);\n  const j1 = Math.cos(g1 * Math.PI / 180);\n  const j2 = Math.sin(g1 * Math.PI / 180);\n  const j3 = Math.cos(g2 * Math.PI / 180);\n  const j4 = Math.sin(g2 * Math.PI / 180);\n  const j5 = Math.cos(g3 * Math.PI / 180);\n  const j6 = Math.sin(g3 * Math.PI / 180);\n  const k1 = Math.cos(h5 * Math.PI / 180);\n  const k2 = Math.sin(h5 * Math.PI / 180);\n  const k3 = Math.cos(h6 * Math.PI / 180);\n  const k4 = Math.sin(h6 * Math.PI / 180);\n  const l1 = Math.cos(i1 * Math.PI / 180);\n  const l2 = Math.sin(i1 * Math.PI / 180);\n  const l3 = Math.cos(i2 * Math.PI / 180);\n  const l4 = Math.sin(i2 * Math.PI / 180);\n  const l5 = Math.cos(i3 * Math.PI / 180);\n  const l6 = Math.sin(i3 * Math.PI / 180);\n  const m1 = Math.cos(j1 * Math.PI / 180);\n  const m2 = Math.sin(-j1 * Math.PI / 180);\n  const m3 = Math.cos(j2 * Math.PI / 180);\n  const m4 = Math.sin(-j2 * Math.PI / 180);\n  const m5 = Math.cos(j3 * Math.PI / 180);\n  const m6 = Math.sin(-j3 * Math.PI / 180);\n  const n1 = Math.cos(k1 * Math.PI / 180);\n  const n2 = Math.sin(-k1 * Math.PI / 180);\n  const n3 = Math.cos(k2 * Math.PI / 180);\n  const n4 = Math.sin(-k2 * Math.PI / 180);\n  const n5 = Math.cos(k3 * Math.PI / 180);\n  const n6 = Math.sin(-k3 * Math.PI / 180);\n  const o1 = Math.cos(l1 * Math.PI / 180);\n  const o2 = Math.sin(-l1 * Math.PI / 180);\n  const o3 = Math.cos(l2 * Math.PI / 180);\n  const o4 = Math.sin(-l2 * Math.PI / 180);\n  const o5 = Math.cos(l3 * Math.PI / 180);\n  const o6 = Math.sin(-l3 * Math.PI / 180);\n  const p1 = Math.cos(m1 * Math.PI / 180);\n  const p2 = Math.sin(-m1 * Math.PI / 180);\n  const p3 = Math.cos(m2 * Math.PI / 180);\n  const p4 = Math.sin(-m2 * Math.PI / 180);\n  const p5 = Math.cos(m3 * Math.PI / 180);\n  const p6 = Math.sin(-m3 * Math.PI / 180);\n  const q1 = Math.cos(n1 * Math.PI / 180);\n  const q2 = Math.sin(-n1 * Math.PI / 180);\n  const q3 = Math.cos(n2 * Math.PI / 180);\n  const q4 = Math.sin(-n2 * Math.PI / 180);\n  const q5 = Math.cos(n3 * Math.PI / 180);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/158", "prompt": "/*WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WRite a FUnCTion thAt accePts A list Of strings.\n  The list CONtaiNs different words. REturn tHe wORd wIth MAxiMuM nUmber\n  OF uNIquE ChAracters. If multIPle sTriNgs Have maxIMum NumBeR of UniQue\n  CHaRActERS, return the ONe whICh ComES firST in LeXIcogrAPhical oRder.\n\n  findMax([\"name\", \"oF\", \"STRiNg\"]) === \"String\"\n  findMax([\"name\", \"eNaM\", \"Game\"]) === \"enAM\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"AaaAaaa\"\n  */\ncOnsT findMax = (words) => {\n  let max = 0\n  let maxWord = \"\"\n  let maxNum = 0\n  let maxNumWord = \"\"\n  let maxNumNum = 0\n  let maxNumNumWord = \"\"\n  let maxNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNumNumWord = \"\"\n  let maxNumNumNum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  you're A HuNGry rabBit, and You ALready have eaTEN a ceRtain number of carroTs,\n  but nOw yOU need to eat MorE CarRoTs To comPLeTE thE DaY's meals.\n  you shouLD return an aRraY of [ Total number of EAteN caRrOts AftEr yOUr MEalS,\n                                  THe number of CArroTS lEft AFter YOUr MEals ]\n  iF There arE not eNOUGh remaining CaRrots, yoU wILl eat all remaining cARrots, But Will sTilL BE hungRY.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you're A HuNGry rabBit, and You ALready have eaTEN a ceRtain number of carroTs,\n  but nOw yOU need to eat MorE CarRoTs To comPLeTE thE DaY's meals.\n  you shouLD return an aRraY of [ Total number of EAteN caRrOts AftEr yOUr MEalS,\n                                  THe number of CArroTS lEft AFter YOUr MEals ]\n  iF There arE not eNOUGh remaining CaRrots, yoU wILl eat all remaining cARrots, But Will sTilL BE hungRY.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const carrots_left = carrots - remaining;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > 0? carrots_left : 0;\n  const carrots_left = carrots_left > ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* given A string, FiND out hoW many dIstINct characterS (REgarDless of case) dOes it cOnsISt oF\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    if (chars.includes(chars[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  given TWo LIsts operator, anD operand. The fiRst list HAs basic algebRA OperAtions, and \n  the Second list Is a list OF inTegERs. USe ThE two gIVeN LisTS tO build the algebRIc \n  exPreSsiOn and return thE EvaLuaTiOn oF thIs eXPrESsiON.\n\n  the bASic aLGeBra OPeraTIOnS:\n  additIOn ( + ) \n  SubtrActioN ( - ) \n  mULtIpLicatioN ( * ) \n  FLOor divISion ( // ) \n  EXpoNentiAtiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given TWo LIsts operator, anD operand. The fiRst list HAs basic algebRA OperAtions, and \n  the Second list Is a list OF inTegERs. USe ThE two gIVeN LisTS tO build the algebRIc \n  exPreSsiOn and return thE EvaLuaTiOn oF thIs eXPrESsiON.\n\n  the bASic aLGeBra OPeraTIOnS:\n  additIOn ( + ) \n  SubtrActioN ( - ) \n  mULtIpLicatioN ( * ) \n  FLOor divISion ( // ) \n  EXpoNentiAtiON ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorList = operator.split('+');\n  const operandList = operand.split('+');\n  const result = 0;\n  for (let i = 0; i < operatorList.length; i++) {\n    const operator = operatorList[i];\n    const operand = operandList[i];\n    const operatorOperator = operatorList.indexOf(operator);\n    const operatorIndex = operatorList.indexOf(operator, operatorOperator);\n    const operatorOperatorIndex = operatorList.indexOf(operator, operatorOperatorIndex + 1);\n    const operatorOperatorIndex2 = operatorList.indexOf(operator, operatorOperatorIndex + 2);\n    const operatorOperatorIndex3 = operatorList.indexOf(operator, operatorOperatorIndex + 3);\n    const operatorOperatorIndex4 = operatorList.indexOf(operator, operatorOperatorIndex + 4);\n    const operatorOperatorIndex5 = operatorList.indexOf(operator, operatorOperatorIndex + 5);\n    const operatorOperatorIndex6 = operatorList.indexOf(operator, operatorOperatorIndex + 6);\n    const operatorOperatorIndex7 = operatorList.indexOf(operator, operatorOperatorIndex + 7);\n    const operatorOperatorIndex8 = operatorList.indexOf(operator, operatorOperatorIndex + 8);\n    const operatorOperatorIndex9 = operatorList.indexOf(operator, operatorOperatorIndex + 9);\n    const operatorOperatorIndex10 = operatorList.indexOf(operator, operatorOperatorIndex + 10);\n    const operatorOperatorIndex11 = operatorList.indexOf(operator, operatorOperatorIndex + 11);\n    const operatorOperatorIndex12 = operatorList.indexOf(operator, operatorOperatorIndex + 12);\n    const operatorOperatorIndex13 = operatorList.indexOf(operator, operatorOperatorIndex + 13);\n    const operatorOperatorIndex14 = operatorList.indexOf(operator, operatorOperatorIndex + 14);\n    const operatorOperatorIndex15 = operatorList.indexOf(operator, operatorOperatorIndex + 15);\n    const operatorOperatorIndex16 = operatorList.indexOf(operator, operatorOperatorIndex + 16);\n    const operatorOperatorIndex17 = operatorList.indexOf(operator, operatorOperatorIndex + 17);\n    const operatorOperatorIndex18 = operatorList.indexOf(operator, operatorOperatorIndex + 18);\n    const operatorOperatorIndex19 = operatorList.indexOf(operator, operatorOperatorIndex + 19);\n    const operatorOperatorIndex20 = operatorList.indexOf(operator, operatorOperatorIndex + 20);\n    const operatorOperatorIndex21 = operatorList.indexOf(operator, operatorOperatorIndex + 21);\n    const operatorOperatorIndex22 = operatorList.indexOf(operator, operatorOperatorIndex + 22);\n    const operatorOperatorIndex23 = operatorList.indexOf(operator, operatorOperatorIndex + 23);\n    const operatorOperatorIndex24 = operatorList.indexOf(operator, operatorOperatorIndex + 24);\n    const operatorOperatorIndex25 = operatorList.indexOf(operator, operatorOperatorIndex + 25);\n    const operatorOperatorIndex26 = operatorList.indexOf(operator, operatorOperatorIndex + 26);\n    const operatorOperatorIndex27 = operatorList.indexOf(operator, operatorOperatorIndex + 27);\n    const operatorOperatorIndex28 = operatorList.indexOf(operator, operatorOperatorIndex + 28);\n    const operatorOperatorIndex29 = operatorList.indexOf(operator, operatorOperatorIndex + 29);\n    const operatorOperatorIndex30 = operatorList.indexOf(operator, operatorOperatorIndex + 30);\n    const operatorOperatorIndex31 = operatorList.indexOf(operator, operatorOperatorIndex + 31);\n    const operatorOperatorIndex32 = operatorList.indexOf(operator, operatorOperatorIndex + 32);\n    const operatorOperatorIndex33 = operatorList.indexOf(operator, operatorOperatorIndex + 33);\n    const operatorOperatorIndex34 = operatorList.indexOf(operator, operatorOperatorIndex + 34);\n    const operatorOperatorIndex35 = operatorList.indexOf(operator, operatorOperatorIndex + 35);\n    const operatorOperatorIndex36 = operatorList.indexOf(operator, operatorOperatorIndex + 36);\n    const operatorOperatorIndex37 = operatorList.indexOf(operator, operatorOperatorIndex + 37);\n    const operatorOperatorIndex38 = operatorList.indexOf(operator, operatorOperatorIndex + 38);\n    const operatorOperatorIndex39 = operatorList.indexOf(operator, operatorOperatorIndex + 39);\n    const operatorOperatorIndex40 = operatorList.indexOf(operator, operatorOperatorIndex + 40);\n    const operatorOperatorIndex41 = operatorList.indexOf(operator, operatorOperatorIndex + 41);\n    const operatorOperatorIndex42 = operatorList.indexOf(operator, operatorOperatorIndex + 42);\n    const operatorOperatorIndex43 = operatorList.indexOf(operator, operatorOperatorIndex + 43);\n    const operatorOperatorIndex44 = operatorList.indexOf(operator, operatorOperatorIndex + 44);\n    const operatorOperatorIndex45 = operatorList.indexOf(operator, operatorOperatorIndex + 45);\n    const operatorOperatorIndex46 = operatorList.indexOf(operator, operatorOperatorIndex + 46);\n    const operatorOperatorIndex47 = operatorList.indexOf(operator, operatorOperatorIndex + 47);\n    const operatorOperatorIndex48 = operatorList.indexOf(operator, operatorOperatorIndex + 48);\n    const operatorOperatorIndex49 = operatorList.indexOf(operator, operatorOperatorIndex + 49);\n    const operatorOperatorIndex50 = operatorList.indexOf(operator, operatorOperatorIndex + 50);\n    const operatorOperatorIndex51 = operatorList.indexOf(operator, operatorOperatorIndex + 51);\n    const operatorOperatorIndex52 = operatorList.indexOf(operator, operatorOperatorIndex + 52);\n    const operatorOperatorIndex53 = operatorList.indexOf(operator, operatorOperatorIndex + 53);\n    const operatorOperatorIndex54 = operatorList.indexOf(operator, operatorOperatorIndex + 54);\n    const operatorOperatorIndex55 = operatorList.indexOf(operator, operatorOperatorIndex + 55);\n    const operatorOperatorIndex56 = operatorList.indexOf(operator, operatorOperatorIndex + 56);\n    const operatorOperatorIndex57 = operatorList.indexOf(operator, operatorOperatorIndex + 57);\n    const operatorOperatorIndex58 = operatorList.indexOf(operator, operatorOperatorIndex + 58);\n    const operatorOperatorIndex59 = operatorList.indexOf(operator, operatorOperatorIndex + 59);\n    const operatorOperatorIndex60 = operatorList.indexOf(operator, operatorOperatorIndex + 60);\n    const operatorOperatorIndex61 = operatorList.indexOf(operator, operatorOperatorIndex + 61);\n    const operatorOperatorIndex62 = operatorList.indexOf(operator, operatorOperatorIndex + 62);\n    const operatorOperatorIndex63 = operatorList.indexOf(operator, operatorOperatorIndex + 63);\n    const operatorOperatorIndex64 = operatorList.indexOf(operator, operatorOperatorIndex + 64);\n    const operatorOperatorIndex65 = operatorList.indexOf(operator, operatorOperatorIndex + 65);\n    const operatorOperatorIndex66 = operatorList.indexOf(operator, operatorOperatorIndex + 66);\n    const operatorOperatorIndex67 = operatorList.indexOf(operator, operatorOperatorIndex + 67);\n    const operatorOperatorIndex68 = operatorList.indexOf(operator, operatorOperatorIndex + 68);\n    const operatorOperatorIndex69 = operatorList.indexOf(operator, operatorOperatorIndex + 69);\n    const operatorOperatorIndex70 = operatorList.indexOf(operator, operatorOperatorIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN a striNg s.\n  if s[i] is A leTTer, reverse itS CAse fRom lower to upPer or vIse VErsA, \n  otHErwIsE kEep it AS iT Is.\n  IF ThE string containS No leTteRs, rEverse tHE stRinG.\n  THe fUncTioN ShOUld return THE resULted STrIng.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let res = [];\n  let len = s.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return nulL;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return nulL;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return nulL;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return nulL;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return nulL;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return nulL;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return nulL;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return nulL;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return nulL;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return nulL;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return nulL;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return nulL;\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  given A StRIng 'text', return its md5 Hash eqUivALent string.\n  If 'text' IS An emPty string, return nulL.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return nulL;\n  const md5Hash = cryp", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  given TWo POsitivE integErs a ANd b, return the even digITS betWeen a\n  and b, in ascenDing orDer.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given TWo POsitivE integErs a ANd b, return the even digITS betWeen a\n  and b, in ascenDing orDer.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let evenDigitsBetween = generateEvenDigitsBetween(a, b);\n  let integers = evenDigitsBetween.map((digit) => parseInt(digit, 10));\n  return integers;\n};\n\n/**\n  Given two positive integers a and b, return the number of even digits\n  between a and b, in ascending order.\n\n  For example:\n  generateEvenDigitsBetween(2, 8) => [2, 4, 6, 8]\n  generateEvenDigitsBetween(8, 2) => [2, 4, 6, 8]\n  generateEvenDigitsBetween(10, 14) => [10, 12, 14, 16, 18]\n  */\nconst generateEvenDigitsBetween = (a, b) => {\n  let evenDigitsBetween = [];\n  let integers = generateIntegers(a, b);\n  let integersLength = integers.length;\n  let currentInteger = 0;\n  let currentIntegerLength = 0;\n  let currentIntegerValue = 0;\n  let currentIntegerValueLength = 0;\n  let currentIntegerValueValue = 0;\n  let currentIntegerValueValueLength = 0;\n  let currentIntegerValueValueValue = 0;\n  let currentIntegerValueValueValueLength = 0;\n  let currentIntegerValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueLength = 0;\n  let currentIntegerValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueLength = 0;\n  let currentIntegerValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueLength = 0;\n  let currentIntegerValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueLength = 0;\n  let currentIntegerValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueLength = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueLength = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let currentIntegerValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/17", "prompt": "/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* input TO tHIs funcTion is A stRIng representING musIcal notes in a spEcial AsCIi ForMat.\n  yOur TaSk Is to pARsE ThiS StRing and return list of integERs coRreSpoNding to HOw mAny BeAts DoeS eaCH\n  nOT laST.\n\n  here IS a leGEnD:\n  'o' - wHOle nOTE, lASts foUR beats\n  'o|' - Half nOTE, LaStS two beaTs\n  '.|' - QUater nOTe, lasTs oNe beaT\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i].split(' ');\n    music_notes.push(music_note);\n  }\n  return music_notes;\n};\n\n/**\n  Given a music string, return a list of music notes represented by integers representing notes on\n  the music notes list.\n  e.g. parseMusic('o o|.| o| o|.|.|.| o o') returns [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n*/\nconst parseMusicNotes = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i].split(' ');\n    music_notes.push(parseInt(music_note[0], 10));\n  }\n  return music_notes;\n};\n\n/**\n  Given a music string, return a list of music notes represented by integers representing notes on\n  the music notes list.\n  e.g. parseMusic('o o|.| o| o|.|.|.| o o') returns [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n*/\nconst parseMusicNotesInt = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i].split(' ');\n    music_notes.push(parseInt(music_note[0], 10));\n  }\n  return music_notes;\n};\n\n/**\n  Given a music string, return a list of music notes represented by integers representing notes on\n  the music notes list.\n  e.g. parseMusic('o o|.| o| o|.|.|.| o o') returns [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n*/\nconst parseMusicNotesIntList = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i].split(' ');\n    music_notes.push(parseInt(music_note[0], 10));\n  }\n  return music_notes;\n};\n\n/**\n  Given a music string, return a list of music notes represented by integers representing notes on\n  the music notes list.\n  e.g. parseMusic('o o|.| o| o|.|.|.| o o') returns [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n*/\nconst parseMusicNotesIntListInt = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i].split(' ');\n    music_notes.push(parseInt(music_note[0], 10));\n  }\n  return music_notes;\n};\n\n/**\n  Given a music string, return a list of music notes represented by integers representing notes on\n  the music notes list.\n  e.g. parseMusic('o o|.| o| o|.|.|.| o o') returns [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n*/\nconst parseMusicNotesIntListIntList = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i].split(' ');\n    music_notes.push(parseInt(music_note[0], 10));\n  }\n  return music_notes;\n};\n\n/**\n  Given a music string, return a list of music notes represented by integers representing notes on\n  the music notes list.\n  e.g. parseMusic('o o|.| o| o|.|.|.| o o') returns [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n*/\nconst parseMusicNotesIntListIntListInt = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i].split(' ');\n    music_notes.push(parseInt(music_note[0], 10));\n  }\n  return music_notes;\n};\n\n/**\n  Given a music string, return a list of music notes represented by integers representing notes on\n  the music notes list.\n  e.g. parseMusic('o o|.| o| o|.|.|.| o o') returns [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n*/\nconst parseMusicNotesIntListIntListIntListInt = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i].split(' ');\n    music_notes.push(parseInt(music_note[0], 10));\n  }\n  return music_notes;\n};\n\n/**\n  Given a music string, return a list of music notes represented by integers representing notes on\n  the music notes list.\n  e.g. parseMusic('o o|.| o| o|.|.|.| o o') returns [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n*/\nconst parseMusicNotesIntListIntListIntListIntListInt = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i].split(' ');\n    music_notes.push(parseInt(music_note[0], 10));\n  }\n  return music_notes;\n};\n\n/**\n  Given a music string, return a list of music notes represented by integers representing notes on\n  the music notes list.\n  e.g. parseMusic('o o|.| o| o|.|.|.| o o') returns [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n*/\nconst parseMusicNotesIntListIntListIntListIntListIntListIntListInt = (music_string) => {\n  const music_list = music_string.split('|');\n  const music_notes = [];\n  for (let i = 0; i < music_list.length; i++) {\n    const music_note = music_list[i].split(' ');\n    music_notes.push(parseInt(music_note[0], 10));\n  }\n  return music_note", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/18", "prompt": "/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* find hOW mANy times a givEn substring can bE foUNd in the originaL string. cOunt Overlaping caSes.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = substring.length;\n  let n = string.length;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/19", "prompt": "/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe', 'sIX', 'sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split('');\n  const numberListSorted = numberList.sort((a, b) => a - b);\n  return numberListSorted.join('');\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split('');\n  const numberListSorted = numberList.sort((a, b) => a - b);\n  return numberListSorted.join('');\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split('');\n  const numberListSorted = numberList.sort((a, b) => a - b);\n  return numberListSorted.join('');\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split('');\n  const numberListSorted = numberList.sort((a, b) => a - b);\n  return numberListSorted.join('');\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split('');\n  const numberListSorted = numberList.sort((a, b) => a - b);\n  return numberListSorted.join('');\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split('');\n  const numberListSorted = numberList.sort((a, b) => a - b);\n  return numberListSorted.join('');\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split('');\n  const numberListSorted = numberList.sort((a, b) => a - b);\n  return numberListSorted.join('');\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split('');\n  const numberListSorted = numberList.sort((a, b) => a - b);\n  return numberListSorted.join('');\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberList = numbers.split('');\n  const numberListSorted = numberList.sort((a, b) => a - b);\n  return numberListSorted.join('');\n};\n\n/* input IS a sPAce-delImited StrINg of numberalS FRom 'zEro' to 'nine'.\n  ValId choiCes ARe 'zEro', 'ONe', 'tWo', 'ThRee', 'foUR', 'fIVe','sIX','sEven', 'eight' and 'niNE'.\n  RetUrn The String wITh numbers sOrtEd FroM smAllESt TO laRGEst\n  >>> sortNumber", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* given A PoSItive fLoatinG poINt number, it can be decOMPoseD into\n  and inteGer parT (laRGesT inTEgeR sMaLler tHAn GIveN number) AnD decimals\n  (leftoVEr paRt aLwaYs smallER thAn 1).\n\n  REtUrn The DecIMaL ParT OF the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* given A PoSItive fLoatinG poINt number, it can be decOMPoseD into\n  and inteGer parT (laRGesT inTEgeR sMaLler tHAn GIveN number) AnD decimals\n  (leftoVEr paRt aLwaYs smallER thAn 1).\n\n  REtUrn The DecIMaL ParT OF the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const isFloat = typeof number === 'number'\n  const isDec = typeof number === 'number' && isFinite(number)\n  const isInt = typeof number === 'number' && isFinite(number) && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = isDec && isInt && number % 1 === 0\n  const isFloat = isFloat && isInt && number % 1 === 0\n  const isDec = is", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/20", "prompt": "/* from a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* from a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const lenght = numbers.length;\n  const result = [];\n  let minDistance = Number.MAX_VALUE;\n  let minElement = numbers[0];\n  for (let i = 1; i < lenght; i++) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n    }\n    result.push(minElement);\n  }\n  return result;\n};\n\n/**\n  Given a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReverse = (numbers) => {\n  const lenght = numbers.length;\n  const result = [];\n  let minDistance = Number.MAX_VALUE;\n  let minElement = numbers[lenght - 1];\n  for (let i = lenght - 1; i >= 0; i--) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n    }\n    result.push(minElement);\n  }\n  return result;\n};\n\n/**\n  Given a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReverseReverse = (numbers) => {\n  const lenght = numbers.length;\n  const result = [];\n  let minDistance = Number.MAX_VALUE;\n  let minElement = numbers[lenght - 1];\n  for (let i = lenght - 1; i >= 0; i--) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n    }\n    result.push(minElement);\n  }\n  return result;\n};\n\n/**\n  Given a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReverseReverseReverse = (numbers) => {\n  const lenght = numbers.length;\n  const result = [];\n  let minDistance = Number.MAX_VALUE;\n  let minElement = numbers[lenght - 1];\n  for (let i = lenght - 1; i >= 0; i--) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n    }\n    result.push(minElement);\n  }\n  return result;\n};\n\n/**\n  Given a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReverseReverseReverse = (numbers) => {\n  const lenght = numbers.length;\n  const result = [];\n  let minDistance = Number.MAX_VALUE;\n  let minElement = numbers[lenght - 1];\n  for (let i = lenght - 1; i >= 0; i--) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n    }\n    result.push(minElement);\n  }\n  return result;\n};\n\n/**\n  Given a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReverseReverseReverseReverse = (numbers) => {\n  const lenght = numbers.length;\n  const result = [];\n  let minDistance = Number.MAX_VALUE;\n  let minElement = numbers[lenght - 1];\n  for (let i = lenght - 1; i >= 0; i--) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n    }\n    result.push(minElement);\n  }\n  return result;\n};\n\n/**\n  Given a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NUmBer, larger numbeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsReverseReverseReverseReverse = (numbers) => {\n  const lenght = numbers.length;\n  const result = [];\n  let minDistance = Number.MAX_VALUE;\n  let minElement = numbers[lenght - 1];\n  for (let i = lenght - 1; i >= 0; i--) {\n    const distance = numbers[i] - minElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minElement = numbers[i];\n    }\n    result.push(minElement);\n  }\n  return result;\n};\n\n/**\n  Given a sUPpLIed list of numbers (oF lengtH at LEast two) selecT ANd return twO that are the cLosest To eACh\n  oTheR And return ThEm in Order (SMaLLer NU", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* given list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* given list OF numbers (oF At leasT two elEmeNTs), apply a lineAR TranSform to that list,\n  sUch thaT thE SmaLleST nuMbEr Will bECoME 0 anD ThE largest will beCOme 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const maxValue = Math.max.apply(null, numbers);\n  const minValue = Math.min.apply(null, numbers);\n  const rescaledValue = (maxValue - minValue) / numbers.length;\n  return [minValue, rescaledValue];\n};\n\nconst getUnit = (value) => {\n  if (value >= 0) {\n    return value;\n  } else {\n    return value * -1;\n  }\n};\n\nconst getUnitFromValue = (value) => {\n  if (value >= 0) {\n    return value;\n  } else {\n    return value * -1;\n  }\n};\n\nconst getUnitFromValueAndUnit = (value, unit) => {\n  if (value >= 0) {\n    return value;\n  } else {\n    return value * -1;\n  }\n};\n\nconst getUnitFromValueAndUnitAndValue = (value, unit, value) => {\n  if (value >= 0) {\n    return value;\n  } else {\n    return value * -1;\n  }\n};\n\nconst getUnitFromValueAndUnitAndValueAndUnit = (value, unit, value, unit) => {\n  if (value >= 0) {\n    return value;\n  } else {\n    return value * -1;\n  }\n};\n\nconst getUnitFromValueAndUnitAndValueAndUnitAndValue = (value, unit, value, unit, value) => {\n  if (value >= 0) {\n    return value;\n  } else {\n    return value * -1;\n  }\n};\n\nconst getUnitFromValueAndUnitAndValueAndUnitAndValueAndUnitAndValue = (value, unit, value, unit, value, unit, value) => {\n  if (value >= 0) {\n    return value;\n  } else {\n    return value * -1;\n  }\n};\n\nconst getUnitFromValueAndUnitAndValueAndUnitAndValueAndUnitAndValueAndUnitAndValueAndUnitAndValue = (value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, unit, value, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/22", "prompt": "/* filteR GiVEn list of anY pythoN values onLY for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* filteR GiVEn list of anY pythoN values onLY for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => typeof value ==='string');\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => typeof value === 'boolean');\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for null\n  >>> filterNull(['a', 3.14, 5])\n  [5]\n  >>> filterNull([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => value === null);\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for undefined\n  >>> filterUndefined(['a', 3.14, 5])\n  [5]\n  >>> filterUndefined([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => value === undefined);\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for NaN\n  >>> filterNaN(['a', 3.14, 5])\n  [5]\n  >>> filterNaN([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNaN = (values) => {\n  return values.filter((value) => isNaN(value));\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for Infinity\n  >>> filterInfinity(['a', 3.14, 5])\n  [5]\n  >>> filterInfinity([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterInfinity = (values) => {\n  return values.filter((value) => isFinite(value));\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for -Infinity\n  >>> filterNegativeInfinity(['a', 3.14, 5])\n  [5]\n  >>> filterNegativeInfinity([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNegativeInfinity = (values) => {\n  return values.filter((value) => value < 0);\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for -Infinity\n  >>> filterPositiveInfinity(['a', 3.14, 5])\n  [5]\n  >>> filterPositiveInfinity([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterPositiveInfinity = (values) => {\n  return values.filter((value) => value > 0);\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for NaN\n  >>> filterNaN(['a', 3.14, 5])\n  [5]\n  >>> filterNaN([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNaN = (values) => {\n  return values.filter((value) => isNaN(value));\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for Infinity\n  >>> filterInfinity(['a', 3.14, 5])\n  [5]\n  >>> filterInfinity([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterInfinity = (values) => {\n  return values.filter((value) => isFinite(value));\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for -Infinity\n  >>> filterNegativeInfinity(['a', 3.14, 5])\n  [5]\n  >>> filterNegativeInfinity([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNegativeInfinity = (values) => {\n  return values.filter((value) => value < 0);\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for -Infinity\n  >>> filterPositiveInfinity(['a', 3.14, 5])\n  [5]\n  >>> filterPositiveInfinity([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterPositiveInfinity = (values) => {\n  return values.filter((value) => value > 0);\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for NaN\n  >>> filterNaN(['a', 3.14, 5])\n  [5]\n  >>> filterNaN([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNaN = (values) => {\n  return values.filter((value) => isNaN(value));\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for Infinity\n  >>> filterInfinity(['a', 3.14, 5])\n  [5]\n  >>> filterInfinity([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterInfinity = (values) => {\n  return values.filter((value) => isFinite(value));\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for -Infinity\n  >>> filterNegativeInfinity(['a', 3.14, 5])\n  [5]\n  >>> filterNegativeInfinity([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNegativeInfinity = (values) => {\n  return values.filter((value) => value < 0);\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for -Infinity\n  >>> filterPositiveInfinity(['a', 3.14, 5])\n  [5]\n  >>> filterPositiveInfinity([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterPositiveInfinity = (values) => {\n  return values.filter((value) => value > 0);\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for NaN\n  >>> filterNaN(['a', 3.14, 5])\n  [5]\n  >>> filterNaN([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNaN = (values) => {\n  return values.filter((value) => isNaN(value));\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for Infinity\n  >>> filterInfinity(['a', 3.14, 5])\n  [5]\n  >>> filterInfinity([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterInfinity = (values) => {\n  return values.filter((value) => isFinite(value));\n};\n\n/**\n  filterIntegers GiVEn list of anY pythoN values onLY for -Infinity\n  >>> filterNegativeInfinity(['a', 3.14, 5])\n  [5]\n  >>> filterNegative", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* returN LeNGth of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* returN LeNGth of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    len += string.charCodeAt(i).length;\n  }\n  return len;\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHex = (string) => {\n  return /^[0-9A-F]+$/.test(string);\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigit = (string) => {\n  return isHex(string) && string.length === 2;\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpper = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitLower = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLower = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase() && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLower = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase() && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLowerUpper = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase() && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLowerUpper = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase() && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLowerUpperLower = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase() && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLowerUpperLower = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase() && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLowerUpperLowerUpper = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase() && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLowerUpperLowerUpper = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase() && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLowerUpperLowerUpper = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase() && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLowerUpperLowerUpper = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase() && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLowerUpperLowerUpper = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase() && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLowerUpperLowerUpper = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase() && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLowerUpperLowerUpper = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase() && string[1] === string[1].toUpperCase() && string[0] === string[0].toLowerCase() && string[1] === string[1].toLowerCase();\n};\n\n/**\n * Return true if string is a valid hex number\n * >>> isHex('0xff')\n * true\n * >>> isHex('0xff00')\n * false\n */\nconst isHexDigitUpperLowerUpperLowerUpper = (string) => {\n  return isHex(string) && string.length === 2 && string[0] === string[0].toUpperCase", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/24", "prompt": "/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* for a gIVeN Number n, Find thE laRGest number thAT DiviDes n evenly, smaLler thAn n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = [];\n  let divisor = 1;\n  while (divisor <= n) {\n    divisors.push(divisor);\n    divisor *= 2;\n  }\n  return Math.max(...divisors);\n};\n\n/**\n * Given a number n, return true if and only if the number is a palindrome.\n * \n * A palindrome is a number that reads the same backward as forward.\n * \n * A palindrome is also a number that reads the same forward and backwards.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n * \n * A palindrome is a number that reads the same number of times as it appears in the input.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* returN list Of PRime faCtors oF giVEn integer in the ORDer fRom smallest tO largeSt.\n  EACh oF thE FacToRs ShoulD Be LIstED nUmber of times coRRespOndIng To how maNY tiMes It AppEarEs in fACtORizATIon.\n  INPut nUMbEr sHOuld BE EqUAl to tHE producT of alL FACtOrS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* returN list Of PRime faCtors oF giVEn integer in the ORDer fRom smallest tO largeSt.\n  EACh oF thE FacToRs ShoulD Be LIstED nUmber of times coRRespOndIng To how maNY tiMes It AppEarEs in fACtORizATIon.\n  INPut nUMbEr sHOuld BE EqUAl to tHE producT of alL FACtOrS\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let factor = 1;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = 1;\n  let m = 1;\n  let n = 1;\n  let t = 1;\n  let sum = 1;\n  let temp = 1;\n  let temp2 = 1;\n  let temp3 = 1;\n  let temp4 = 1;\n  let temp5 = 1;\n  let temp6 = 1;\n  let temp7 = 1;\n  let temp8 = 1;\n  let temp9 = 1;\n  let temp10 = 1;\n  let temp11 = 1;\n  let temp12 = 1;\n  let temp13 = 1;\n  let temp14 = 1;\n  let temp15 = 1;\n  let temp16 = 1;\n  let temp17 = 1;\n  let temp18 = 1;\n  let temp19 = 1;\n  let temp20 = 1;\n  let temp21 = 1;\n  let temp22 = 1;\n  let temp23 = 1;\n  let temp24 = 1;\n  let temp25 = 1;\n  let temp26 = 1;\n  let temp27 = 1;\n  let temp28 = 1;\n  let temp29 = 1;\n  let temp30 = 1;\n  let temp31 = 1;\n  let temp32 = 1;\n  let temp33 = 1;\n  let temp34 = 1;\n  let temp35 = 1;\n  let temp36 = 1;\n  let temp37 = 1;\n  let temp38 = 1;\n  let temp39 = 1;\n  let temp40 = 1;\n  let temp41 = 1;\n  let temp42 = 1;\n  let temp43 = 1;\n  let temp44 = 1;\n  let temp45 = 1;\n  let temp46 = 1;\n  let temp47 = 1;\n  let temp48 = 1;\n  let temp49 = 1;\n  let temp50 = 1;\n  let temp51 = 1;\n  let temp52 = 1;\n  let temp53 = 1;\n  let temp54 = 1;\n  let temp55 = 1;\n  let temp56 = 1;\n  let temp57 = 1;\n  let temp58 = 1;\n  let temp59 = 1;\n  let temp60 = 1;\n  let temp61 = 1;\n  let temp62 = 1;\n  let temp63 = 1;\n  let temp64 = 1;\n  let temp65 = 1;\n  let temp66 = 1;\n  let temp67 = 1;\n  let temp68 = 1;\n  let temp69 = 1;\n  let temp70 = 1;\n  let temp71 = 1;\n  let temp72 = 1;\n  let temp73 = 1;\n  let temp74 = 1;\n  let temp75 = 1;\n  let temp76 = 1;\n  let temp77 = 1;\n  let temp78 = 1;\n  let temp79 = 1;\n  let temp80 = 1;\n  let temp81 = 1;\n  let temp82 = 1;\n  let temp83 = 1;\n  let temp84 = 1;\n  let temp85 = 1;\n  let temp86 = 1;\n  let temp87 = 1;\n  let temp88 = 1;\n  let temp89 = 1;\n  let temp91 = 1;\n  let temp92 = 1;\n  let temp93 = 1;\n  let temp94 = 1;\n  let temp95 = 1;\n  let temp96 = 1;\n  let temp97 = 1;\n  let temp98 = 1;\n  let temp99 = 1;\n  let temp100 = 1;\n  let temp101 = 1;\n  let temp102 = 1;\n  let temp103 = 1;\n  let temp104 = 1;\n  let temp105 = 1;\n  let temp106 = 1;\n  let temp107 = 1;\n  let temp108 = 1;\n  let temp109 = 1;\n  let temp110 = 1;\n  let temp111 = 1;\n  let temp112 = 1;\n  let temp113 = 1;\n  let temp114 = 1;\n  let temp115 = 1;\n  let temp116 = 1;\n  let temp117 = 1;\n  let temp118 = 1;\n  let temp119 = 1;\n  let temp120 = 1;\n  let temp121 = 1;\n  let temp122 = 1;\n  let temp123 = 1;\n  let temp124 = 1;\n  let temp125 = 1;\n  let temp126 = 1;\n  let temp127 = 1;\n  let temp128 = 1;\n  let temp129 = 1;\n  let temp131 = 1;\n  let temp132 = 1;\n  let temp133 = 1;\n  let temp134 = 1;\n  let temp135 = 1;\n  let temp136 = 1;\n  let temp137 = 1;\n  let temp138 = 1;\n  let temp139 = 1;\n  let temp140 = 1;\n  let temp141 = 1;\n  let temp142 = 1;\n  let temp143 = 1;\n  let temp144 = 1;\n  let temp145 = 1;\n  let temp146 = 1;\n  let temp147 = 1;\n  let temp148 = 1;\n  let temp149 = 1;\n  let temp150 = 1;\n  let temp151 = 1;\n  let temp152 = 1;\n  let temp153 = 1;\n  let temp154 = 1;\n  let temp155 = 1;\n  let temp156 = 1;\n  let temp157 = 1;\n  let temp158 = 1;\n  let temp159 = 1;\n  let temp160 = 1;\n  let temp161 = 1;\n  let temp162 = 1;\n  let temp163 = 1;\n  let temp164 = 1;\n  let temp165 = 1;\n  let temp166 = 1;\n  let temp167 = 1;\n  let temp168 = 1;\n  let temp169 = 1;\n  let temp170 = 1;\n  let temp171 = 1;\n  let temp172 = 1;\n  let temp173 = 1;\n  let temp174 = 1;\n  let temp175 = 1;\n  let temp176 = 1;\n  let temp177 = 1;\n  let temp178 = 1;\n  let temp179 = 1;\n  let temp180 = 1;\n  let temp181 = 1;\n  let temp182 = 1;\n  let temp183 = 1;\n  let temp184 = 1;\n  let temp185 = 1;\n  let temp186 = 1;\n  let temp187 = 1;\n  let temp188 = 1;\n  let temp189 = 1;\n  let temp190 = 1;\n  let temp191 = 1;\n  let temp192 = 1;\n  let temp193 = 1;\n  let temp194 = 1;\n  let temp195 = 1;\n  let temp196 = 1;\n  let temp197 = 1;\n  let temp198 = 1;\n  let temp199 = 1;\n  let temp200 = 1;\n  let temp201 = 1;\n  let temp202 = 1;\n  let temp203 = 1;\n  let temp204 = 1;\n  let temp205 = 1;\n  let temp206 = 1;\n  let temp207 = 1;\n  let temp208 = 1;\n  let temp209 = 1;\n  let temp210 = 1;\n  let temp211 = 1;\n  let temp212 = 1;\n  let temp213 = 1;\n  let temp214 = 1;\n  let temp215 = 1;\n  let temp216 = 1;\n  let temp217 = 1;\n  let temp218 = 1;\n  let temp219 = 1;\n  let temp220 = 1;\n  let temp221 = 1;\n  let temp222 = 1;\n  let temp223 = 1;\n  let temp224 = 1;\n  let temp225 = 1;\n  let temp226 = 1;\n  let temp227 = 1;\n  let temp228 = 1;\n  let temp229 = 1;\n  let temp230 = 1;\n  let temp231 = 1;\n  let temp232 = 1;\n  let temp233 = 1;\n  let temp234 = 1;\n  let temp235 = 1;\n  let temp236 = 1;\n  let temp237 = 1;\n  let temp238 = 1;\n  let temp239 = 1;\n  let temp240 = 1;\n  let temp241 = 1;\n  let temp242 = 1;\n  let temp243 = 1;\n  let temp244 = 1;\n  let temp245 = 1;\n  let temp246 = 1;\n  let temp247 = 1;\n  let temp248 = 1;\n  let temp249 = 1;\n  let temp250 = 1;\n  let temp251 = 1;\n  let temp252 = 1;\n  let temp253 = 1;\n  let temp254 = 1;\n  let temp255 = 1;\n  let temp256 = 1;\n  let temp257 = 1;\n  let temp258 = 1;\n  let temp259 = 1;\n  let temp260 = 1;\n  let temp261 = 1;\n  let temp26", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* from a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* from a list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set()\n  return numbers.reduce((acc, curr) => {\n    if (seen.has(curr)) {\n      seen.delete(curr)\n    } else {\n      seen.add(curr)\n      acc.push(curr)\n    }\n    return acc\n  }, [])\n}\n\n/* from list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set()\n  return numbers.reduce((acc, curr) => {\n    if (seen.has(curr)) {\n      seen.delete(curr)\n    } else {\n      seen.add(curr)\n      acc.push(curr)\n    }\n    return acc\n  }, [])\n}\n\n/* from list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set()\n  return numbers.reduce((acc, curr) => {\n    if (seen.has(curr)) {\n      seen.delete(curr)\n    } else {\n      seen.add(curr)\n      acc.push(curr)\n    }\n    return acc\n  }, [])\n}\n\n/* from list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set()\n  return numbers.reduce((acc, curr) => {\n    if (seen.has(curr)) {\n      seen.delete(curr)\n    } else {\n      seen.add(curr)\n      acc.push(curr)\n    }\n    return acc\n  }, [])\n}\n\n/* from list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set()\n  return numbers.reduce((acc, curr) => {\n    if (seen.has(curr)) {\n      seen.delete(curr)\n    } else {\n      seen.add(curr)\n      acc.push(curr)\n    }\n    return acc\n  }, [])\n}\n\n/* from list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set()\n  return numbers.reduce((acc, curr) => {\n    if (seen.has(curr)) {\n      seen.delete(curr)\n    } else {\n      seen.add(curr)\n      acc.push(curr)\n    }\n    return acc\n  }, [])\n}\n\n/* from list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set()\n  return numbers.reduce((acc, curr) => {\n    if (seen.has(curr)) {\n      seen.delete(curr)\n    } else {\n      seen.add(curr)\n      acc.push(curr)\n    }\n    return acc\n  }, [])\n}\n\n/* from list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set()\n  return numbers.reduce((acc, curr) => {\n    if (seen.has(curr)) {\n      seen.delete(curr)\n    } else {\n      seen.add(curr)\n      acc.push(curr)\n    }\n    return acc\n  }, [])\n}\n\n/* from list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set()\n  return numbers.reduce((acc, curr) => {\n    if (seen.has(curr)) {\n      seen.delete(curr)\n    } else {\n      seen.add(curr)\n      acc.push(curr)\n    }\n    return acc\n  }, [])\n}\n\n/* from list OF iNTegers, Remove All ELements that oCCUr moRe than once.\n  KeEp ordeR of ELemEntS LefT tHe Same aS in ThE InpUT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicate", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* for a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* for a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('').map((ch) => ch.toUpperCase()).join('');\n};\n\n/**\n * Returns a new string with all the characters of the given string converted to uppercase.\n * For example if given 'Hello' the function returns 'HELLO'.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And uppercase To loweRcaSE.\n * For a gIVeN string, Flip loWercasE chARacters to uppERCase And upper", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['x', 'y', 'z'])\n  'xyz'\n  */\nconst concat = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concat(['x', 'y', 'z'])\n  'xyz'\n  >>> concat(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, curr) => {\n    return `${acc}${curr}`\n  }, '')\n}\n\n/* concaTEnATe list of strings inTo a sinGle STring\n  >>> concatAll(['x', 'y', 'z'])\n  'xyz'\n  >>> concatAll(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatAll = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* filteR An INput list of strings Only foR onES that start wiTH A givEn prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => {\n    return string.startsWith(prefix);\n  });\n};\n\n/**\n * filterBySuffix An INput list of strings Only foR onES that end wiTH A givEn suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => {\n    return string.endsWith(suffix);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An INput list of strings Only foR onES that match a specific type.\n  >>> filterByType([], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByType = (strings, type) => {\n  return strings.filter(string => {\n    return string.includes(type);\n  });\n};\n\n/**\n * filterByType An IN", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* you're GIvEN a list of dePosit aNd wIThdrawal operations on a bANK accOunt that starTs with\n  ZerO balance. youR taSK is To DeTect iF At ANy pOInT the balance of account fALlls BelOw zEro, and\n  aT ThaT poInT fuNctIon SHoULd return tRUE. OthERwisE It ShoULd return faLSE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const zero = operations.reduce((acc, curr) => acc && curr.amount === 0, true)\n  return zero\n}\n\n/**\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balanceOf(account)\n  0\n  >>> balance", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn ONlY PositiVe numbErs in THe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = l.length;\n  while (i < l) {\n    if (l[i] >= 0) {\n      res.push(l[i]);\n      i++;\n    } else {\n      res.push(0);\n      i++;\n    }\n  }\n  while (j < l) {\n    if (l[j] >= 0) {\n      res.push(l[j]);\n      j++;\n    } else {\n      res.push(0);\n      j++;\n    }\n  }\n  while (k < l) {\n    if (l[k] >= 0) {\n      res.push(l[k]);\n      k++;\n    } else {\n      res.push(0);\n      k++;\n    }\n  }\n  return res;\n};\n\n/**\n * Return an Array with all the positive numbers in THe list.\n * If THe list is empty or has only one element then return an empty Array.\n * If THe list has more than one element then return an array with all the positive numbers in THe list.\n * If THe list has negative numbers in THe list then return an array with all the negative numbers in THe list.\n * If THe list has numbers in THe list that are not positive then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not negative then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list then return an array with all the numbers in THe list.\n * If THe list has numbers in THe list that are not numbers in THe list ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/31", "prompt": "/*REturn TRuE If a givEn numbEr iS Prime, and falsE OTherWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn TRuE If a givEn numbEr iS Prime, and falsE OTherWise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isOddPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isOddPrime(6)\n  false\n  >>> isOddPrime(101)\n  true\n  >>> isOddPrime(11)\n  true\n  >>> isOddPrime(13441)\n  true\n  >>> isOddPrime(61)\n  true\n  >>> isOddPrime(4)\n  false\n  >>> isOddPrime(1)\n  false\n  */\nconst isEvenPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isEvenPrime(6)\n  false\n  >>> isEvenPrime(101)\n  true\n  >>> isEvenPrime(11)\n  true\n  >>> isEvenPrime(13441)\n  true\n  >>> isEvenPrime(61)\n  true\n  >>> isEvenPrime(4)\n  false\n  >>> isEvenPrime(1)\n  false\n  */\nconst isOddEvenPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isOddEvenPrime(6)\n  false\n  >>> isOddEvenPrime(101)\n  true\n  >>> isOddEvenPrime(11)\n  true\n  >>> isOddEvenPrime(13441)\n  true\n  >>> isOddEvenPrime(61)\n  true\n  >>> isOddEvenPrime(4)\n  false\n  >>> isOddEvenPrime(1)\n  false\n  */\nconst isMultipleOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOf(6)\n  false\n  >>> isMultipleOf(101)\n  true\n  >>> isMultipleOf(11)\n  true\n  >>> isMultipleOf(13441)\n  true\n  >>> isMultipleOf(61)\n  true\n  >>> isMultipleOf(4)\n  false\n  >>> isMultipleOf(1)\n  false\n  */\nconst isMultipleOfPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOfPrime(6)\n  false\n  >>> isMultipleOfPrime(101)\n  true\n  >>> isMultipleOfPrime(11)\n  true\n  >>> isMultipleOfPrime(13441)\n  true\n  >>> isMultipleOfPrime(61)\n  true\n  >>> isMultipleOfPrime(4)\n  false\n  >>> isMultipleOfPrime(1)\n  false\n  */\nconst isMultipleOfOddPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOfOddPrime(6)\n  false\n  >>> isMultipleOfOddPrime(101)\n  true\n  >>> isMultipleOfOddPrime(11)\n  true\n  >>> isMultipleOfOddPrime(13441)\n  true\n  >>> isMultipleOfOddPrime(61)\n  true\n  >>> isMultipleOfOddPrime(4)\n  false\n  >>> isMultipleOfOddPrime(1)\n  false\n  */\nconst isMultipleOfEvenPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOfEvenPrime(6)\n  false\n  >>> isMultipleOfEvenPrime(101)\n  true\n  >>> isMultipleOfEvenPrime(11)\n  true\n  >>> isMultipleOfEvenPrime(13441)\n  true\n  >>> isMultipleOfEvenPrime(61)\n  true\n  >>> isMultipleOfEvenPrime(4)\n  false\n  >>> isMultipleOfEvenPrime(1)\n  false\n  */\nconst isMultipleOfOddEvenPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOfOddEvenPrime(6)\n  false\n  >>> isMultipleOfOddEvenPrime(101)\n  true\n  >>> isMultipleOfOddEvenPrime(11)\n  true\n  >>> isMultipleOfOddEvenPrime(13441)\n  true\n  >>> isMultipleOfOddEvenPrime(61)\n  true\n  >>> isMultipleOfOddEvenPrime(4)\n  false\n  >>> isMultipleOfOddEvenPrime(1)\n  false\n  */\nconst isMultipleOfMultipleOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOfMultipleOf(6)\n  false\n  >>> isMultipleOfMultipleOf(101)\n  true\n  >>> isMultipleOfMultipleOf(11)\n  true\n  >>> isMultipleOfMultipleOf(13441)\n  true\n  >>> isMultipleOfMultipleOf(61)\n  true\n  >>> isMultipleOfMultipleOf(4)\n  false\n  >>> isMultipleOfMultipleOf(1)\n  false\n  */\nconst isMultipleOfMultipleOfPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  evaluATeS PolynoMial wiTh cOEfficients xs at POInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  evaluATeS PolynoMial wiTh cOEfficients xs at POInt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncOnst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = 0;\n  xs.forEach((item, index) => {\n    if (item === 0) {\n      zero = index;\n    }\n  });\n  return zero;\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = 0;\n  xs.forEach((item, index) => {\n    if (item === 0) {\n      zero = index;\n    }\n  });\n  return zero;\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = 0;\n  xs.forEach((item, index) => {\n    if (item === 0) {\n      zero = index;\n    }\n  });\n  return zero;\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = 0;\n  xs.forEach((item, index) => {\n    if (item === 0) {\n      zero = index;\n    }\n  });\n  return zero;\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = 0;\n  xs.forEach((item, index) => {\n    if (item === 0) {\n      zero = index;\n    }\n  });\n  return zero;\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(x) = 0.\n  findZero REtuRNs Only only zero poINt, evEn iF thEre are mANy.\n  MOreOvEr, findZero oNly TakES list xs hAVinG EVen nUMber OF cOefFIcieNTS\n  aND largESt non zeRo coeFFICiEnT as it guArANtees\n  a SOlutiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = 0;\n  xs.forEach((item, index) => {\n    if (item === 0) {\n      zero = index;\n    }\n  });\n  return zero;\n}\n\n/*\n  xs are coeffIcientS of A PolYnoMIal.\n  findZero FiNd x Such tHAt poly(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the indicIes thaT arE Not DivISibLe By three, While ITs VAluES aT the indicies thAT are DivIsiBle by three arE EquAl\n  tO tHe vAluEs oF ThE CorRESponDIng iNDiCieS Of l, buT SOrTEd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the indicIes thaT arE Not DivISibLe By three, While ITs VAluES aT the indicies thAT are DivIsiBle by three arE EquAl\n  tO tHe vAluEs oF ThE CorRESponDIng iNDiCieS Of l, buT SOrTEd.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return l2;\n};\n\n/**\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [4, 3, 2, 1]\n  >>> sortFourth([4, 3, 2, 1])\n  [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn SOrTEd unique elemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let res = [];\n  l.forEach((e) => {\n    if (res.indexOf(e) === -1) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value.\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e === val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which do not have that value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByNot = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e!== val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are less than the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByLessThan = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e < val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are greater than the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByGreaterThan = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e > val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are equal to the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByEqual = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e === val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are greater than or equal to the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByGreaterOrEqual = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e >= val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are less than or equal to the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByLessOrEqual = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e <= val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are equal to the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByEqualOrEqual = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e === val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are greater than the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByGreaterThanOrEqual = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e > val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are less than the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByLessThanOrEqual = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e < val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are equal to the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByEqualOrEqual = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e === val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are greater than the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByGreaterThanOrEqual = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e > val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are less than the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByLessThanOrEqual = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e < val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are equal to the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByEqualOrEqual = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e === val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are greater than the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByGreaterThanOrEqual = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e > val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n/*\n  Given a sorted array and a value, return all elements in the array which have that value and are less than the value.\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], 123)\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst uniqueByLessThanOrEqual = (arr, val) => {\n  let res = [];\n  arr.forEach((e) => {\n    if (e < val) {\n      res.push(e);\n    }\n  });\n  return res;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn MAxIMum eleMent in thE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/**\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/**\n  >>> sumElement([1, 2, 3])\n  6\n  >>> sumElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  15\n  */\nconst sumElement = (l) => {\n  let sum = 0;\n  for (let i = 1; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/**\n  >>> averageElement([1, 2, 3])\n  2.5\n  >>> averageElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  7.5\n  */\nconst averageElement = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n  >>> averageElementInRange([1, 2, 3], 0, 10)\n  2.5\n  >>> averageElementInRange([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0, 10)\n  7.5\n  */\nconst averageElementInRange = (l, min, max) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n  >>> averageElementInRangeInRange([1, 2, 3], 0, 10, 0, 10)\n  2.5\n  >>> averageElementInRangeInRange([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0, 10, 0, 10)\n  7.5\n  */\nconst averageElementInRangeInRange = (l, min, max, min, max) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n  >>> averageElementInRangeInRangeInRange([1, 2, 3], 0, 10, 0, 10, 0, 10)\n  2.5\n  >>> averageElementInRangeInRangeInRange([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0, 10, 0, 10, 0, 10)\n  7.5\n  */\nconst averageElementInRangeInRangeInRange = (l, min, max, min, max, min, max) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n  >>> averageElementInRangeInRangeInRangeInRange([1, 2, 3], 0, 10, 0, 10, 0, 10, 0, 10)\n  2.5\n  >>> averageElementInRangeInRangeInRangeInRange([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0, 10, 0, 10, 0, 10, 0, 10)\n  7.5\n  */\nconst averageElementInRangeInRangeInRangeInRange = (l, min, max, min, max, min, max, min, max) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n  >>> averageElementInRangeInRangeInRangeInRange([1, 2, 3], 0, 10, 0, 10, 0, 10, 0, 10, 0, 10)\n  2.5\n  >>> averageElementInRangeInRangeInRangeInRangeInRange([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0, 10, 0, 10, 0, 10, 0, 10, 0, 10)\n  7.5\n  */\nconst averageElementInRangeInRangeInRangeInRange = (l, min, max, min, max, min, max, min, max, min, max) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n  >>> averageElementInRangeInRangeInRangeInRangeInRange([1, 2, 3], 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10)\n  2.5\n  >>> averageElementInRangeInRangeInRangeInRangeInRange([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10)\n  7.5\n  */\nconst averageElementInRangeInRangeInRangeInRangeInRange = (l, min, max, min, max, min, max, min, max, min, max) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n  >>> averageElementInRangeInRangeInRangeInRangeInRange([1, 2, 3], 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10)\n  2.5\n  >>> averageElementInRangeInRangeInRangeInRangeInRange([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10)\n  7.5\n  */\nconst averageElementInRangeInRangeInRangeInRangeInRange = (l, min, max, min, max, min, max, min, max, min, max, min, max) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n  >>> averageElementInRangeInRangeInRangeInRangeInRange([1, 2, 3], 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10)\n  2.5\n  >>> averageElementInRangeInRangeInRangeInRangeInRange([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10)\n  7.5\n  */\nconst averageElementInRangeInRangeInRangeInRangeInRange = (l, min, max, min, max, min, max, min, max, min, max, min, max) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n  >>> averageElementInRangeInRangeInRangeInRangeInRange([1, 2, 3], 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10)\n  2.5\n  >>> averageElementInRangeInRangeInRangeInRangeInRange([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10)\n  7.5\n  */\nconst averageElementInRangeInRangeInRangeInRangeInRange = (l, min, max, min, max, min, max, min, max, min, max, min, max) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 1; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/**\n  >>> averageElementInRangeInRangeInRangeInRangeInRange([1, 2, 3], 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10)\n  2.5\n  >>> averageElementInRangeInRangeInRangeInRangeInRange([1, 2, 3], 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10, 0, 10)\n  7.5\n  */\nconst averageElementInRangeInRangeInRangeInRangeInRange = (l, min, max, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*REturn THe NUmber oF times The DIgit 7 appears in iNTEgerS less than n whiCh are dIviSIblE by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn THe NUmber oF times The DIgit 7 appears in iNTEgerS less than n whiCh are dIviSIblE by 11 OR 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizzBuzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      fizzBuzz += i;\n    } else if (i % 11 === 0) {\n      fizzBuzz += i;\n    } else {\n      fizzBuzz += i;\n    }\n  }\n  return fizzBuzz;\n};\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizzBuzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      fizzBuzz += i;\n    } else if (i % 11 === 0) {\n      fizzBuzz += i;\n    } else if (i % 5 === 0) {\n      fizzBuzz += i;\n    } else {\n      fizzBuzz += i;\n    }\n  }\n  return fizzBuzz;\n};\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizzBuzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      fizzBuzz += i;\n    } else if (i % 11 === 0) {\n      fizzBuzz += i;\n    } else if (i % 5 === 0) {\n      fizzBuzz += i;\n    } else if (i % 3 === 0) {\n      fizzBuzz += i;\n    } else {\n      fizzBuzz += i;\n    }\n  }\n  return fizzBuzz;\n};\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizzBuzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      fizzBuzz += i;\n    } else if (i % 11 === 0) {\n      fizzBuzz += i;\n    } else if (i % 5 === 0) {\n      fizzBuzz += i;\n    } else if (i % 3 === 0) {\n      fizzBuzz += i;\n    } else if (i % 2 === 0) {\n      fizzBuzz += i;\n    } else {\n      fizzBuzz += i;\n    }\n  }\n  return fizzBuzz;\n};\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizzBuzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      fizzBuzz += i;\n    } else if (i % 11 === 0) {\n      fizzBuzz += i;\n    } else if (i % 5 === 0) {\n      fizzBuzz += i;\n    } else if (i % 3 === 0) {\n      fizzBuzz += i;\n    } else if (i % 2 === 0) {\n      fizzBuzz += i;\n    } else if (i % 1 === 0) {\n      fizzBuzz += i;\n    } else {\n      fizzBuzz += i;\n    }\n  }\n  return fizzBuzz;\n};\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizzBuzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      fizzBuzz += i;\n    } else if (i % 11 === 0) {\n      fizzBuzz += i;\n    } else if (i % 5 === 0) {\n      fizzBuzz += i;\n    } else if (i % 3 === 0) {\n      fizzBuzz += i;\n    } else if (i % 2 === 0) {\n      fizzBuzz += i;\n    } else if (i % 1 === 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0) {\n      fizzBuzz += i;\n    } else {\n      fizzBuzz += i;\n    }\n  }\n  return fizzBuzz;\n};\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizzBuzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      fizzBuzz += i;\n    } else if (i % 11 === 0) {\n      fizzBuzz += i;\n    } else if (i % 5 === 0) {\n      fizzBuzz += i;\n    } else if (i % 3 === 0) {\n      fizzBuzz += i;\n    } else if (i % 2 === 0) {\n      fizzBuzz += i;\n    } else if (i % 1 === 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 1!== 0) {\n      fizzBuzz += i;\n    } else {\n      fizzBuzz += i;\n    }\n  }\n  return fizzBuzz;\n};\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizzBuzz = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 13 === 0) {\n      fizzBuzz += i;\n    } else if (i % 11 === 0) {\n      fizzBuzz += i;\n    } else if (i % 5 === 0) {\n      fizzBuzz += i;\n    } else if (i % 3 === 0) {\n      fizzBuzz += i;\n    } else if (i % 2 === 0) {\n      fizzBuzz += i;\n    } else if (i % 1 === 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 1!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 2!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 3!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 4!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 5!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 6!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 7!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 8!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 9!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 10!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 11!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 12!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 13!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 14!== 0) {\n      fizzBuzz += i;\n    } else if (i % 0 === 0 && i % 15!== 0) {\n      fizzBuzz += i;\n    } else {\n      fizzBuzz += i;\n    }\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the odd inDicies, WhiLE itS vaLUes At ThE even indiCIeS Are EQuAl\n  to the values oF The even iNdiCieS of l, but sORteD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*THis fuNCtIOn takeS a list l and reTurNS a list l' such that\n  l' is iDENticAl to l in the odd inDicies, WhiLE itS vaLUes At ThE even indiCIeS Are EQuAl\n  to the values oF The even iNdiCieS of l, but sORteD.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  return l.sort((a, b) => a % 2 === 0 && b % 2 === 0)\n}\n\n/**\n  >>> sortOdd\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC2 fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC3 fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC4 fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encoded with encODe_cyCliC5 fuNction. RETurNs dEcOdeD stRinG.\n  */\nCoNSt decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  ReturNS eNCoded sTring bY cyCLing groups of three cHARactErs.\n  */\nconst encodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  fOr (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fOr (cONst group Of groups) {\n    iF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    ElsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  tAkEs as iNPuT StrINg Encode", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib ReturNS n-th nUMber thAt is a FIboNAcci number anD IT's alSo prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],9:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],10:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],11:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],12:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],13:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],14:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],15:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],16:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],17:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],18:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],19:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],20:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],21:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],22:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n  while (isPrime) {\n    num = i;\n    fib = 1;\n\n    while (num % i!== 0) {\n      fib *= i;\n      num += fib;\n    }\n\n    isPrime = fib === 1;\n    i += 1;\n  }\n\n  return num;\n};\n\nmodule.exports = primeFib;\n\n},{}],23:[function(require,module,exports){\nconst primeFib = (n) => {\n  let i = 1;\n  let num;\n  let fib;\n  let isPrime = true;\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/4", "prompt": "/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* for a gIVeN list Of inpuT numbers, calcuLatE mean Absolute dEViatIon\n  around the mean Of this DatASet.\n  meaN absOlUtE DeviATiON is THe Average absolutE DiffEreNce Between EAch\n  EleMeNt aNd a CenTErPOinT (mean in THis cASe):\n  MAd = AvEraGE | x - x_mEAN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanAbsoluteDeviation = (x) => {\n    const meanAbsoluteDeviation = (x) => {\n      const meanAbsoluteDeviation = (x) => {\n        const meanAbsoluteDeviation = (x) => {\n          const meanAbsoluteDeviation = (x) => {\n            const meanAbsoluteDeviation = (x) => {\n              const meanAbsoluteDeviation = (x) => {\n                const meanAbsoluteDeviation = (x) => {\n                  const meanAbsoluteDeviation = (x) => {\n                    const meanAbsoluteDeviation = (x) => {\n                      const meanAbsoluteDeviation = (x) => {\n                        const meanAbsoluteDeviation = (x) => {\n                          const meanAbsoluteDeviation = (x) => {\n                            const meanAbsoluteDeviation = (x) => {\n                              const meanAbsoluteDeviation = (x) => {\n                                const meanAbsoluteDeviation = (x) => {\n                                  const meanAbsoluteDeviation = (x) => {\n                                    const meanAbsoluteDeviation = (x) => {\n                                      const meanAbsoluteDeviation = (x) => {\n                                        const meanAbsoluteDeviation = (x) => {\n                                          const meanAbsoluteDeviation = (x) => {\n                                            const meanAbsoluteDeviation = (x) => {\n                                              const meanAbsoluteDeviation = (x) => {\n                                                const meanAbsoluteDeviation = (x) => {\n                                                  const meanAbsoluteDeviation = (x) => {\n                                                    const meanAbsoluteDeviation = (x) => {\n                                                      const meanAbsoluteDeviation = (x) => {\n                                                        const meanAbsoluteDeviation = (x) => {\n                                                          const meanAbsoluteDeviation = (x) => {\n                                                            const meanAbsoluteDeviation = (x) => {\n                                                              const meanAbsoluteDeviation = (x) => {\n                                                                const meanAbsoluteDeviation = (x) => {\n                                                                    const meanAbsoluteDeviation = (x) => {\n                                                                        const meanAbsoluteDeviation = (x) => {\n                                                                          const meanAbsoluteDeviation = (x) => {\n                                                                            const meanAbsoluteDeviation = (x) => {\n                                                                              const meanAbsoluteDeviation = (x) => {\n                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                  const meanAbsoluteDeviation = (x) => {\n                                                                                    const meanAbsoluteDeviation = (x) => {\n                                                                                      const meanAbsoluteDeviation = (x) => {\n                                                                                        const meanAbsoluteDeviation = (x) => {\n                                                                                          const meanAbsoluteDeviation = (x) => {\n                                                                                            const meanAbsoluteDeviation = (x) => {\n                                                                                              const meanAbsoluteDeviation = (x) => {\n                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                  const meanAbsoluteDeviation = (x) => {\n                                                                                                    const meanAbsoluteDeviation = (x) => {\n                                                                                                      const meanAbsoluteDeviation = (x) => {\n                                                                                                        const meanAbsoluteDeviation = (x) => {\n                                                                                                          const meanAbsoluteDeviation = (x) => {\n                                                                                                            const meanAbsoluteDeviation = (x) => {\n                                                                                                              const meanAbsoluteDeviation = (x) => {\n                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                  const meanAbsoluteDeviation = (x) => {\n                                                                                                                    const meanAbsoluteDeviation = (x) => {\n                                                                                                                      const meanAbsoluteDeviation = (x) => {\n                                                                                                                        const meanAbsoluteDeviation = (x) => {\n                                                                                                                          const meanAbsoluteDeviation = (x) => {\n                                                                                                                            const meanAbsoluteDeviation = (x) => {\n                                                                                                                              const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDeviation = (x) => {\n                                                                                                                                const meanAbsoluteDe", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triple Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triple([1, 3, 5, 0])\n  false\n  >>> triple([1, 3, -2, 1])\n  true\n  >>> triple([1, 2, 3, 7])\n  false\n  >>> triple([2, 4, -5, 3, 9, 7])\n  true\n  >>> triple([1])\n  false\n  */\nconst triple = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    sum += l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triple Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triple([1, 3, 5, 0])\n  false\n  >>> triple([1, 3, -2, 1])\n  true\n  >>> triple([1, 2, 3, 7])\n  false\n  >>> triple([2, 4, -5, 3, 9, 7])\n  true\n  >>> triple([1])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    sum += l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triple Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1, 2, 3])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    sum += l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triple Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1, 2, 3])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    sum += l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triple Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1, 2, 3])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    sum += l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triple Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1, 2, 3])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    sum += l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triple Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1, 2, 3])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    sum += l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triple Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct EleMEntS in thE list ThaT\n  sUm To zerO, AnD FalSE oTherwise.\n\n  >>> triples([1, 3, 5, 0])\n  false\n  >>> triples([1, 3, -2, 1])\n  true\n  >>> triples([1, 2, 3, 7])\n  false\n  >>> triples([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples([1, 2, 3])\n  false\n  */\nconst triples = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    sum += l[i] * l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  triple Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are three diStinct Ele", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  imagiNE a ROad thaT's a perFecTLy straight inFINiteLy long line.\n  n caRs are dRivINg lEft TO riGhT;  sImultANeOUslY, A dIfferent set of n cARs\n  arE drIviNg right TO leFt.   THe Two SetS of CArS StaRT Out bEIng vERy Far FRom\n  eACH oTHer.  AlL Cars movE in the sAME SpEeD.  Two carS aRE said tO ColliDe\n  wHen a cAr tHAT's movING LEft To RIght hITS a caR That's moving rigHt tO left.\n  HowEvEr, the carS aRE iNFInITeLy sturdY and StrONg; aS A Result, thEy conTinue movINg\n  in theiR TRaJEctOry as IF TheY dId Not collide.\n\n  This fUNctioN OUTputS tHe nUMbEr of SUch ColliSIoNs.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  imagiNE a ROad thaT's a perFecTLy straight inFINiteLy long line.\n  n caRs are dRivINg lEft TO riGhT;  sImultANeOUslY, A dIfferent set of n cARs\n  arE drIviNg right TO leFt.   THe Two SetS of CArS StaRT Out bEIng vERy Far FRom\n  eACH oTHer.  AlL Cars movE in the sAME SpEeD.  Two carS aRE said tO ColliDe\n  wHen a cAr tHAT's movING LEft To RIght hITS a caR That's moving rigHt tO left.\n  HowEvEr, the carS aRE iNFInITeLy sturdY and StrONg; aS A Result, thEy conTinue movINg\n  in theiR TRaJEctOry as IF TheY dId Not collide.\n\n  This fUNctioN OUTputS tHe nUMbEr of SUch ColliSIoNs.\n  */\ncOnst carRaceCollision = (n) => {\n  let carRace = carRaces[n - 1];\n  let carRace2 = carRaces[n - 2];\n  let carRace3 = carRaces[n - 3];\n  let carRace4 = carRaces[n - 4];\n  let carRace5 = carRaces[n - 5];\n  let carRace6 = carRaces[n - 6];\n  let carRace7 = carRaces[n - 7];\n  let carRace8 = carRaces[n - 8];\n  let carRace9 = carRaces[n - 9];\n  let carRace10 = carRaces[n - 10];\n  let carRace11 = carRaces[n - 11];\n  let carRace12 = carRaces[n - 12];\n  let carRace13 = carRaces[n - 13];\n  let carRace14 = carRaces[n - 14];\n  let carRace15 = carRaces[n - 15];\n  let carRace16 = carRaces[n - 16];\n  let carRace17 = carRaces[n - 17];\n  let carRace18 = carRaces[n - 18];\n  let carRace19 = carRaces[n - 19];\n  let carRace20 = carRaces[n - 20];\n  let carRace21 = carRaces[n - 21];\n  let carRace22 = carRaces[n - 22];\n  let carRace23 = carRaces[n - 23];\n  let carRace24 = carRaces[n - 24];\n  let carRace25 = carRaces[n - 25];\n  let carRace26 = carRaces[n - 26];\n  let carRace27 = carRaces[n - 27];\n  let carRace28 = carRaces[n - 28];\n  let carRace29 = carRaces[n - 29];\n  let carRace30 = carRaces[n - 30];\n  let carRace31 = carRaces[n - 31];\n  let carRace32 = carRaces[n - 32];\n  let carRace33 = carRaces[n - 33];\n  let carRace34 = carRaces[n - 34];\n  let carRace35 = carRaces[n - 35];\n  let carRace36 = carRaces[n - 36];\n  let carRace37 = carRaces[n - 37];\n  let carRace38 = carRaces[n - 38];\n  let carRace39 = carRaces[n - 39];\n  let carRace40 = carRaces[n - 40];\n  let carRace41 = carRaces[n - 41];\n  let carRace42 = carRaces[n - 42];\n  let carRace43 = carRaces[n - 43];\n  let carRace44 = carRaces[n - 44];\n  let carRace45 = carRaces[n - 45];\n  let carRace46 = carRaces[n - 46];\n  let carRace47 = carRaces[n - 47];\n  let carRace48 = carRaces[n - 48];\n  let carRace49 = carRaces[n - 49];\n  let carRace50 = carRaces[n - 50];\n  let carRace51 = carRaces[n - 51];\n  let carRace52 = carRaces[n - 52];\n  let carRace53 = carRaces[n - 53];\n  let carRace54 = carRaces[n - 54];\n  let carRace55 = carRaces[n - 55];\n  let carRace56 = carRaces[n - 56];\n  let carRace57 = carRaces[n - 57];\n  let carRace58 = carRaces[n - 58];\n  let carRace59 = carRaces[n - 59];\n  let carRace60 = carRaces[n - 60];\n  let carRace61 = carRaces[n - 61];\n  let carRace62 = carRaces[n - 62];\n  let carRace63 = carRaces[n - 63];\n  let carRace64 = carRaces[n - 64];\n  let carRace65 = carRaces[n - 65];\n  let carRace66 = carRaces[n - 66];\n  let carRace67 = carRaces[n - 67];\n  let carRace68 = carRaces[n - 68];\n  let carRace69 = carRaces[n - 69];\n  let carRace70 = carRaces[n - 70];\n  let carRace71 = carRaces[n - 71];\n  let carRace72 = carRaces[n - 72];\n  let carRace73 = carRaces[n - 73];\n  let carRace74 = carRaces[n - 74];\n  let carRace75 = carRaces[n - 75];\n  let carRace76 = carRaces[n - 76];\n  let carRace77 = carRaces[n - 77];\n  let carRace78 = carRaces[n - 78];\n  let carRace79 = carRaces[n - 79];\n  let carRace80 = carRaces[n - 80];\n  let carRace81 = carRaces[n - 81];\n  let carRace82 = carRaces[n - 82];\n  let carRace83 = carRaces[n - 83];\n  let carRace84 = carRaces[n - 84];\n  let carRace85 = carRaces[n - 85];\n  let carRace86 = carRaces[n - 86];\n  let carRace87 = carRaces[n - 87];\n  let carRace88 = carRaces[n - 88];\n  let carRace89 = carRaces[n - 89];\n  let carRace90 = carRaces[n - 90];\n  let carRace91 = carRaces[n - 91];\n  let carRace92 = carRaces[n - 92];\n  let carRace93 = carRaces[n - 93];\n  let carRace94 = carRaces[n - 94];\n  let carRace95 = carRaces[n - 95];\n  let carRace96 = carRaces[n - 96];\n  let carRace97 = carRaces[n - 97];\n  let carRace98 = carRaces[n - 98];\n  let carRace99 = carRaces[n - 99];\n  let carRace100 = carRaces[n - 100];\n  let carRace101 = carRaces[n - 101];\n  let carRace102 = carRaces[n - 102];\n  let carRace103 = carRaces[n - 103];\n  let carRace104 = carRaces[n - 104];\n  let carRace105 = carRaces[n - 105];\n  let car", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn list WItH ElemenTs incrEmeNTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let res = [];\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n};\n\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 2]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 3]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 6)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 6]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 7)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 7]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 8)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 8]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 9)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 9]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 10)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 10]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 11)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 11]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 12)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 12]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 13)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 13]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 14)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 14]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 15)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 15]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 16)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 16]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 17)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 17]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 18)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 18]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 19)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 19]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 20)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 20]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 21)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 21]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 22)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 22]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 23)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 23]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 24)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 24]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 25)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 25]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 26)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 26]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 27)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 27]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 28)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 28]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 29)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 29]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 30)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 30]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 31)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 31]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 32)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 32]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 33)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 33]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 34)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 34]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 35)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 35]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 36)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 36]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 37)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 37]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 38)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 38]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 39)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 39]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 40)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 40]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 41)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 41]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 42)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 42]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 43)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 43]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 44)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 44]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 45)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 45]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 46)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 46]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 47)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 47]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 48)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 48]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 49)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 49]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Zero, aND fALse OThErwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Zero, aND fALse OThErwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To One, aND fALse OThErwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Two, aND fALse OThErwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Three, aND fALse OThErwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Four, aND fALse OThErwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Five, aND fALse OThErwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Six, aND fALse OThErwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Seven, aND fALse OThErwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight Takes A list Of INtegerS as an iNpuT.\n  It returns truE IF theRe are two distInct elEmeNTs in tHe list tHAt\n  sUm To Eight, aND fALse OThErwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*CHange NUmERical base oF input NumBEr x to base.\n  return string rePREsenTation after tHe convErsIOn.\n  base nUmbERs aRe LeSs thaN 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*CHange NUmERical base oF input NumBEr x to base.\n  return string rePREsenTation after tHe convErsIOn.\n  base nUmbERs aRe LeSs thaN 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let rePresent = x.toString(base);\n  rePresent = rePresent.replace(/0+$/, \"\");\n  return rePresent;\n};\n\n/**\n  Convert string rePresenTation into integer rePresenTation with base\n  nUmbERs aRe LeSs thaN 10.\n  >>> changeBase(\"22\", 2)\n  1000\n  >>> changeBase(\"1000\", 2)\n  1110\n  >>> changeBase(\"1110\", 2)\n  1110\n  >>> changeBase(\"1110\", 3)\n  1110\n  >>> changeBase(\"1110\", 4)\n  1110\n  >>> changeBase(\"1110\", 5)\n  1110\n  >>> changeBase(\"1110\", 6)\n  1110\n  >>> changeBase(\"1110\", 7)\n  1110\n  >>> changeBase(\"1110\", 8)\n  1110\n  >>> changeBase(\"1110\", 9)\n  1110\n  >>> changeBase(\"1110\", 10)\n  1110\n  >>> changeBase(\"1110\", 11)\n  1110\n  >>> changeBase(\"1110\", 12)\n  1110\n  >>> changeBase(\"1110\", 13)\n  1110\n  >>> changeBase(\"1110\", 14)\n  1110\n  >>> changeBase(\"1110\", 15)\n  1110\n  >>> changeBase(\"1110\", 16)\n  1110\n  >>> changeBase(\"1110\", 17)\n  1110\n  >>> changeBase(\"1110\", 18)\n  1110\n  >>> changeBase(\"1110\", 19)\n  1110\n  >>> changeBase(\"1110\", 20)\n  1110\n  >>> changeBase(\"1110\", 21)\n  1110\n  >>> changeBase(\"1110\", 22)\n  1110\n  >>> changeBase(\"1110\", 23)\n  1110\n  >>> changeBase(\"1110\", 24)\n  1110\n  >>> changeBase(\"1110\", 25)\n  1110\n  >>> changeBase(\"1110\", 26)\n  1110\n  >>> changeBase(\"1110\", 27)\n  1110\n  >>> changeBase(\"1110\", 28)\n  1110\n  >>> changeBase(\"1110\", 29)\n  1110\n  >>> changeBase(\"1110\", 30)\n  1110\n  >>> changeBase(\"1110\", 31)\n  1110\n  >>> changeBase(\"1110\", 32)\n  1110\n  >>> changeBase(\"1110\", 33)\n  1110\n  >>> changeBase(\"1110\", 34)\n  1110\n  >>> changeBase(\"1110\", 35)\n  1110\n  >>> changeBase(\"1110\", 36)\n  1110\n  >>> changeBase(\"1110\", 37)\n  1110\n  >>> changeBase(\"1110\", 38)\n  1110\n  >>> changeBase(\"1110\", 39)\n  1110\n  >>> changeBase(\"1110\", 40)\n  1110\n  >>> changeBase(\"1110\", 41)\n  1110\n  >>> changeBase(\"1110\", 42)\n  1110\n  >>> changeBase(\"1110\", 43)\n  1110\n  >>> changeBase(\"1110\", 44)\n  1110\n  >>> changeBase(\"1110\", 45)\n  1110\n  >>> changeBase(\"1110\", 46)\n  1110\n  >>> changeBase(\"1110\", 47)\n  1110\n  >>> changeBase(\"1110\", 48)\n  1110\n  >>> changeBase(\"1110\", 49)\n  1110\n  >>> changeBase(\"1110\", 50)\n  1110\n  >>> changeBase(\"1110\", 51)\n  1110\n  >>> changeBase(\"1110\", 52)\n  1110\n  >>> changeBase(\"1110\", 53)\n  1110\n  >>> changeBase(\"1110\", 54)\n  1110\n  >>> changeBase(\"1110\", 55)\n  1110\n  >>> changeBase(\"1110\", 56)\n  1110\n  >>> changeBase(\"1110\", 57)\n  1110\n  >>> changeBase(\"1110\", 58)\n  1110\n  >>> changeBase(\"1110\", 59)\n  1110\n  >>> changeBase(\"1110\", 60)\n  1110\n  >>> changeBase(\"1110\", 61)\n  1110\n  >>> changeBase(\"1110\", 62)\n  1110\n  >>> changeBase(\"1110\", 63)\n  1110\n  >>> changeBase(\"1110\", 64)\n  1110\n  >>> changeBase(\"1110\", 65)\n  1110\n  >>> changeBase(\"1110\", 66)\n  1110\n  >>> changeBase(\"1110\", 67)\n  1110\n  >>> changeBase(\"1110\", 68)\n  1110\n  >>> changeBase(\"1110\", 69)\n  1110\n  >>> changeBase(\"1110\", 70)\n  1110\n  >>> changeBase(\"1110\", 71)\n  1110\n  >>> changeBase(\"1110\", 72)\n  1110\n  >>> changeBase(\"1110\", 73)\n  1110\n  >>> changeBase(\"1110\", 74)\n  1110\n  >>> changeBase(\"1110\", 75)\n  1110\n  >>> changeBase(\"1110\", 76)\n  1110\n  >>> changeBase(\"1110\", 77)\n  1110\n  >>> changeBase(\"1110\", 78)\n  1110\n  >>> changeBase(\"1110\", 79)\n  1110\n  >>> changeBase(\"1110\", 80)\n  1110\n  >>> changeBase(\"1110\", 81)\n  1110\n  >>> changeBase(\"1110\", 82)\n  1110\n  >>> changeBase(\"1110\", 83)\n  1110\n  >>> changeBase(\"1110\", 84)\n  1110\n  >>> changeBase(\"1110\", 85)\n  1110\n  >>> changeBase(\"1110\", 86)\n  1110\n  >>> changeBase(\"1110\", 87)\n  1110\n  >>> changeBase(\"1110\", 88)\n  1110\n  >>> changeBase(\"1110\", 89)\n  1110\n  >>> changeBase(\"1110\", 90)\n  1110\n  >>> changeBase(\"1110\", 91)\n  1110\n  >>> changeBase(\"1110\", 92)\n  1110\n  >>> changeBase(\"1110\", 93)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*GIven lENgTH of a sidE and hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven lENgTH of a sidE and hiGh return aREa for a trianglE.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const lENgTH = 2 * Math.PI * h;\n  const lENgTH2 = lENgTH * lENgTH;\n  const lENgTH3 = lENgTH2 * lENgTH;\n  const lENgTH4 = lENgTH3 * lENgTH;\n  const lENgTH5 = lENgTH4 * lENgTH;\n  const lENgTH6 = lENgTH5 * lENgTH;\n  const lENgTH7 = lENgTH6 * lENgTH;\n  const lENgTH8 = lENgTH7 * lENgTH;\n  const lENgTH9 = lENgTH8 * lENgTH;\n  const lENgTH10 = lENgTH9 * lENgTH;\n  const lENgTH11 = lENgTH10 * lENgTH;\n  const lENgTH12 = lENgTH11 * lENgTH;\n  const lENgTH13 = lENgTH12 * lENgTH;\n  const lENgTH14 = lENgTH13 * lENgTH;\n  const lENgTH15 = lENgTH14 * lENgTH;\n  const lENgTH16 = lENgTH15 * lENgTH;\n  const lENgTH17 = lENgTH16 * lENgTH;\n  const lENgTH18 = lENgTH17 * lENgTH;\n  const lENgTH19 = lENgTH18 * lENgTH;\n  const lENgTH20 = lENgTH19 * lENgTH;\n  const lENgTH21 = lENgTH20 * lENgTH;\n  const lENgTH22 = lENgTH21 * lENgTH;\n  const lENgTH23 = lENgTH22 * lENgTH;\n  const lENgTH24 = lENgTH23 * lENgTH;\n  const lENgTH25 = lENgTH24 * lENgTH;\n  const lENgTH26 = lENgTH25 * lENgTH;\n  const lENgTH27 = lENgTH26 * lENgTH;\n  const lENgTH28 = lENgTH27 * lENgTH;\n  const lENgTH29 = lENgTH28 * lENgTH;\n  const lENgTH30 = lENgTH29 * lENgTH;\n  const lENgTH31 = lENgTH30 * lENgTH;\n  const lENgTH32 = lENgTH31 * lENgTH;\n  const lENgTH33 = lENgTH32 * lENgTH;\n  const lENgTH34 = lENgTH33 * lENgTH;\n  const lENgTH35 = lENgTH34 * lENgTH;\n  const lENgTH36 = lENgTH35 * lENgTH;\n  const lENgTH37 = lENgTH36 * lENgTH;\n  const lENgTH38 = lENgTH37 * lENgTH;\n  const lENgTH39 = lENgTH38 * lENgTH;\n  const lENgTH40 = lENgTH39 * lENgTH;\n  const lENgTH41 = lENgTH40 * lENgTH;\n  const lENgTH42 = lENgTH41 * lENgTH;\n  const lENgTH43 = lENgTH42 * lENgTH;\n  const lENgTH44 = lENgTH43 * lENgTH;\n  const lENgTH45 = lENgTH44 * lENgTH;\n  const lENgTH46 = lENgTH45 * lENgTH;\n  const lENgTH47 = lENgTH46 * lENgTH;\n  const lENgTH48 = lENgTH47 * lENgTH;\n  const lENgTH49 = lENgTH48 * lENgTH;\n  const lENgTH50 = lENgTH49 * lENgTH;\n  const lENgTH51 = lENgTH50 * lENgTH;\n  const lENgTH52 = lENgTH51 * lENgTH;\n  const lENgTH53 = lENgTH52 * lENgTH;\n  const lENgTH54 = lENgTH53 * lENgTH;\n  const lENgTH55 = lENgTH54 * lENgTH;\n  const lENgTH56 = lENgTH55 * lENgTH;\n  const lENgTH57 = lENgTH56 * lENgTH;\n  const lENgTH58 = lENgTH57 * lENgTH;\n  const lENgTH59 = lENgTH58 * lENgTH;\n  const lENgTH60 = lENgTH59 * lENgTH;\n  const lENgTH61 = lENgTH60 * lENgTH;\n  const lENgTH62 = lENgTH61 * lENgTH;\n  const lENgTH63 = lENgTH62 * lENgTH;\n  const lENgTH64 = lENgTH63 * lENgTH;\n  const lENgTH65 = lENgTH64 * lENgTH;\n  const lENgTH66 = lENgTH65 * lENgTH;\n  const lENgTH67 = lENgTH66 * lENgTH;\n  const lENgTH68 = lENgTH67 * lENgTH;\n  const lENgTH69 = lENgTH68 * lENgTH;\n  const lENgTH70 = lENgTH69 * lENgTH;\n  const lENgTH71 = lENgTH70 * lENgTH;\n  const lENgTH72 = lENgTH71 * lENgTH;\n  const lENgTH73 = lENgTH72 * lENgTH;\n  const lENgTH74 = lENgTH73 * lENgTH;\n  const lENgTH75 = lENgTH74 * lENgTH;\n  const lENgTH76 = lENgTH75 * lENgTH;\n  const lENgTH77 = lENgTH76 * lENgTH;\n  const lENgTH78 = lENgTH77 * lENgTH;\n  const lENgTH79 = lENgTH78 * lENgTH;\n  const lENgTH80 = lENgTH79 * lEN", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/46", "prompt": "/*THe Fib4 NUmBEr sequEnce is A seQUence similar TO The FIbbonacci seqUnece tHat'S DefIneD As fOlLoWs:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleASe WRitE A fUnction to efficIEntlY coMpuTe the n-th elEMenT of ThE fib4 nuMbeR seQUeNCe.  DO NOt usE RecuRSiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*THe Fib4 NUmBEr sequEnce is A seQUence similar TO The FIbbonacci seqUnece tHat'S DefIneD As fOlLoWs:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleASe WRitE A fUnction to efficIEntlY coMpuTe the n-th elEMenT of ThE fib4 nuMbeR seQUeNCe.  DO NOt usE RecuRSiOn.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  >>> fib5(10)\n  20\n  >>> fib5(20)\n  40\n  >>> fib5(30)\n  60\n  >>> fib5(50)\n  80\n  >>> fib5(100)\n  160\n  >>> fib5(200)\n  320\n  >>> fib5(300)\n  640\n  >>> fib5(500)\n  1024\n  >>> fib5(1000)\n  2048\n  >>> fib5(2000)\n  4096\n  >>> fib5(3000)\n  8192\n  >>> fib5(5000)\n  16384\n  >>> fib5(10000)\n  32768\n  >>> fib5(2000)\n  65536\n  >>> fib5(3000)\n  131072\n  >>> fib5(5000)\n  262144\n  >>> fib5(10000)\n  524288\n  >>> fib5(2000)\n  1048576\n  >>> fib5(3000)\n  2097152\n  >>> fib5(5000)\n  4194304\n  >>> fib5(10000)\n  8388608\n  >>> fib5(2000)\n  16777216\n  >>> fib5(3000)\n  33554432\n  >>> fib5(5000)\n  67108864\n  >>> fib5(10000)\n  134217728\n  >>> fib5(2000)\n  268435456\n  >>> fib5(3000)\n  536870912\n  >>> fib5(5000)\n  1073741824\n  >>> fib5(10000)\n  2147483648\n  >>> fib5(2000)\n  4294967296\n  >>> fib5(3000)\n  8589934592\n  >>> fib5(5000)\n  17179869184\n  >>> fib5(10000)\n  34359738368\n  >>> fib5(2000)\n  68719476736\n  >>> fib5(3000)\n  13421773680\n  >>> fib5(5000)\n  274877906944\n  >>> fib5(10000)\n  549755813888\n  >>> fib5(2000)\n  1099511627776\n  >>> fib5(3000)\n  2199023255552\n  >>> fib5(5000)\n  4398046511104\n  >>> fib5(10000)\n  87960930222080\n  >>> fib5(2000)\n  175921860444160\n  >>> fib5(3000)\n  3435973836896\n  >>> fib5(5000)\n  68719476737088\n  >>> fib5(10000)\n  134217737073680\n  >>> fib5(2000)\n  2684354560032\n  >>> fib5(3000)\n  5368709115600\n  >>> fib5(5000)\n  1073741824000\n  >>> fib5(10000)\n  214748368128000\n  >>> fib5(2000)\n  429496729600\n  >>> fib5(3000)\n  85899345920\n  >>> fib5(5000)\n  171798691844\n  >>> fib5(10000)\n  3435973849600\n  >>> fib5(2000)\n  68719477060\n  >>> fib5(3000)\n  134217737076800\n  >>> fib5(5000)\n  27487790600\n  >>> fib5(10000)\n  5497558138880\n  >>> fib5(2000)\n  109951162777600\n  >>> fib5(3000)\n  219902325555200\n  >>> fib5(5000)\n  439804651104\n  >>> fib5(10000)\n  879609302220800\n  >>> fib5(2000)\n  1759218604441600\n  >>> fib5(3000)\n  3435973849600\n  >>> fib5(5000)\n  687194767370800\n  >>> fib5(10000)\n  134217737076800\n  >>> fib5(2000)\n  268435456003200\n  >>> fib5(3000)\n  5368709115600\n  >>> fib5(5000)\n  107374182400\n  >>> fib5(10000)\n  21474836812800\n  >>> fib5(2000)\n  429496729600\n  >>> fib5(3000)\n  858993459200\n  >>> fib5(5000)\n  171798691844\n  >>> fib5(10000)\n  3435973849600\n  >>> fib5(2000)\n  68719477060\n  >>> fib5(3000)\n  134217737076800\n  >>> fib5(5000)\n  27487790600\n  >>> fib5(10000)\n  54975581388800\n  >>> fib5(2000)\n  109951162777600\n  >>> fib5(3000)\n  219902325555200\n  >>> fib5(5000)\n  439804651104\n  >>> fib5(10000)\n  879609302220800\n  >>> fib5(2000)\n  1759218604441600\n  >>> fib5(3000)\n  3435973849600\n  >>> fib5(5000)\n  687194767370800\n  >>> fib5(10000)\n  134217737076800\n  >>> fib5(2000)\n  268435456003200\n  >>> fib5(3000)\n  5368709115600\n  >>> fib5(5000)\n  107374182400\n  >>> fib5(10000)\n  21474836812800\n  >>> fib5(2000)\n  429496729600\n  >>> fib5(3000)\n  858993459200\n  >>> fib5(5000)\n  171798691844\n  >>> fib5(10000)\n  3435973849600\n  >>> fib5(2000)\n  68719477060\n  >>> fib5(3000)\n  134217737076800\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*REturn median OF eLEments in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn median OF eLEments in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let pivot = l[m]\n  let left = l[m - 1]\n  let right = l[i]\n  let result = (left + right) / 2\n  if (result > pivot) {\n    i = m - 1\n    pivot = l[i]\n  }\n  if (result < pivot) {\n    i = i + 1\n    pivot = l[i]\n  }\n  return pivot\n}\n\n/*\n  Given a list l, return its median without using any extra space.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianWithoutSpace = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let pivot = l[m]\n  let left = l[m - 1]\n  let right = l[i]\n  let result = (left + right) / 2\n  if (result > pivot) {\n    i = m - 1\n    pivot = l[i]\n  }\n  if (result < pivot) {\n    i = i + 1\n    pivot = l[i]\n  }\n  return pivot\n}\n\n/*\n  Given a list l, return its median without using any extra space.\n  >>> medianWithoutSpace([3, 1, 2, 4, 5])\n  3\n  >>> medianWithoutSpace([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianWithoutSpaceWithoutSpace = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let pivot = l[m]\n  let left = l[m - 1]\n  let right = l[i]\n  let result = (left + right) / 2\n  if (result > pivot) {\n    i = m - 1\n    pivot = l[i]\n  }\n  if (result < pivot) {\n    i = i + 1\n    pivot = l[i]\n  }\n  return pivot\n}\n\n/*\n  Given a list l, return its median without using any extra space.\n  >>> medianWithoutSpaceWithoutSpace([3, 1, 2, 4, 5])\n  3\n  >>> medianWithoutSpaceWithoutSpace([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let pivot = l[m]\n  let left = l[m - 1]\n  let right = l[i]\n  let result = (left + right) / 2\n  if (result > pivot) {\n    i = m - 1\n    pivot = l[i]\n  }\n  if (result < pivot) {\n    i = i + 1\n    pivot = l[i]\n  }\n  return pivot\n}\n\n/*\n  Given a list l, return its median without using any extra space.\n  >>> medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace([3, 1, 2, 4, 5])\n  3\n  >>> medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let pivot = l[m]\n  let left = l[m - 1]\n  let right = l[i]\n  let result = (left + right) / 2\n  if (result > pivot) {\n    i = m - 1\n    pivot = l[i]\n  }\n  if (result < pivot) {\n    i = i + 1\n    pivot = l[i]\n  }\n  return pivot\n}\n\n/*\n  Given a list l, return its median without using any extra space.\n  >>> medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace([3, 1, 2, 4, 5])\n  3\n  >>> medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let pivot = l[m]\n  let left = l[m - 1]\n  let right = l[i]\n  let result = (left + right) / 2\n  if (result > pivot) {\n    i = m - 1\n    pivot = l[i]\n  }\n  if (result < pivot) {\n    i = i + 1\n    pivot = l[i]\n  }\n  return pivot\n}\n\n/*\n  Given a list l, return its median without using any extra space.\n  >>> medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace([3, 1, 2, 4, 5])\n  3\n  >>> medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let pivot = l[m]\n  let left = l[m - 1]\n  let right = l[i]\n  let result = (left + right) / 2\n  if (result > pivot) {\n    i = m - 1\n    pivot = l[i]\n  }\n  if (result < pivot) {\n    i = i + 1\n    pivot = l[i]\n  }\n  return pivot\n}\n\n/*\n  Given a list l, return its median without using any extra space.\n  >>> medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace([3, 1, 2, 4, 5])\n  3\n  >>> medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let pivot = l[m]\n  let left = l[m - 1]\n  let right = l[i]\n  let result = (left + right) / 2\n  if (result > pivot) {\n    i = m - 1\n    pivot = l[i]\n  }\n  if (result < pivot) {\n    i = i + 1\n    pivot = l[i]\n  }\n  return pivot\n}\n\n/*\n  Given a list l, return its median without using any extra space.\n  >>> medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace([3, 1, 2, 4, 5])\n  3\n  >>> medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpaceWithoutSpace = (l) => {\n  let n = l.length\n  if (n < 2) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  let pivot = l[m]\n  let left = l[m - 1]\n  let right = l[i]\n  let result = (left + right) / 2\n  if (result > pivot) {\n    i = m - 1\n    pivot = l[i]\n  }\n  if (result ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  checkS If GIven stRing is A paLIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  checkS If GIven stRing is A paLIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let str = '';\n  let i = 0;\n  let j = text.length - 1;\n  let k = 0;\n  let l = text.length - 1;\n  let m = text.length - 1;\n  let n = text.length - 1;\n  let o = text.length - 1;\n  let p = text.length - 1;\n  let q = text.length - 1;\n  let r = text.length - 1;\n  let s = text.length - 1;\n  let t = text.length - 1;\n  let u = text.length - 1;\n  let v = text.length - 1;\n  let w = text.length - 1;\n  let x = text.length - 1;\n  let y = text.length - 1;\n  let z = text.length - 1;\n  let A = text.length - 1;\n  let B = text.length - 1;\n  let C = text.length - 1;\n  let D = text.length - 1;\n  let E = text.length - 1;\n  let F = text.length - 1;\n  let G = text.length - 1;\n  let H = text.length - 1;\n  let I = text.length - 1;\n  let J = text.length - 1;\n  let K = text.length - 1;\n  let L = text.length - 1;\n  let M = text.length - 1;\n  let N = text.length - 1;\n  let O = text.length - 1;\n  let P = text.length - 1;\n  let Q = text.length - 1;\n  let R = text.length - 1;\n  let S = text.length - 1;\n  let T = text.length - 1;\n  let U = text.length - 1;\n  let V = text.length - 1;\n  let W = text.length - 1;\n  let X = text.length - 1;\n  let Y = text.length - 1;\n  let Z = text.length - 1;\n  let a = text.length - 1;\n  let b = text.length - 1;\n  let c = text.length - 1;\n  let d = text.length - 1;\n  let e = text.length - 1;\n  let f = text.length - 1;\n  let g = text.length - 1;\n  let h = text.length - 1;\n  let i = text.length - 1;\n  let j = text.length - 1;\n  let k = text.length - 1;\n  let l = text.length - 1;\n  let m = text.length - 1;\n  let n = text.length - 1;\n  let o = text.length - 1;\n  let p = text.length - 1;\n  let q = text.length - 1;\n  let r = text.length - 1;\n  let s = text.length - 1;\n  let t = text.length - 1;\n  let u = text.length - 1;\n  let v = text.length - 1;\n  let w = text.length - 1;\n  let x = text.length - 1;\n  let y = text.length - 1;\n  let z = text.length - 1;\n  let A = text.length - 1;\n  let B = text.length - 1;\n  let C = text.length - 1;\n  let D = text.length - 1;\n  let E = text.length - 1;\n  let F = text.length - 1;\n  let G = text.length - 1;\n  let H = text.length - 1;\n  let I = text.length - 1;\n  let J = text.length - 1;\n  let K = text.length - 1;\n  let L = text.length - 1;\n  let M = text.length - 1;\n  let N = text.length - 1;\n  let O = text.length - 1;\n  let P = text.length - 1;\n  let Q = text.length - 1;\n  let R = text.length - 1;\n  let S = text.length - 1;\n  let T = text.length - 1;\n  let U = text.length - 1;\n  let V = text.length - 1;\n  let W = text.length - 1;\n  let X = text.length - 1;\n  let Y = text.length - 1;\n  let Z = text.length - 1;\n  let a = text.length - 1;\n  let b = text.length - 1;\n  let c = text.length - 1;\n  let d = text.length - 1;\n  let e = text.length - 1;\n  let f = text.length - 1;\n  let g = text.length - 1;\n  let h = text.length - 1;\n  let i = text.length - 1;\n  let j = text.length - 1;\n  let k = text.length - 1;\n  let l = text.length - 1;\n  let m = text.length - 1;\n  let n = text.length - 1;\n  let o = text.length - 1;\n  let p = text.length - 1;\n  let q = text.length - 1;\n  let r = text.length - 1;\n  let s = text.length - 1;\n  let t = text.length - 1;\n  let u = text.length - 1;\n  let v = text.length - 1;\n  let w = text.length - 1;\n  let x = text.length - 1;\n  let y = text.length - 1;\n  let z = text.length - 1;\n  let A = text.length - 1;\n  let B = text.length - 1;\n  let C = text.length - 1;\n  let D = text.length - 1;\n  let E = text.length - 1;\n  let F = text.length - 1;\n  let G = text.length - 1;\n  let H = text.length - 1;\n  let I = text.length - 1;\n  let J = text.length - 1;\n  let K = text.length - 1;\n  let L = text.length - 1;\n  let M = text.length - 1;\n  let N = text.length - 1;\n  let O = text.length - 1;\n  let P = text.length - 1;\n  let Q = text.length - 1;\n  let R = text.length - 1;\n  let S = text.length - 1;\n  let T = text.length - 1;\n  let U = text.length - 1;\n  let V = text.length - 1;\n  let W = text.length - 1;\n  let X = text.length - 1;\n  let Y = text.length - 1;\n  let Z = text.length - 1;\n  let a = text.length - 1;\n  let b = text.length - 1;\n  let c = text.length - 1;\n  let d = text.length - 1;\n  let e = text.length - 1;\n  let f = text.length - 1;\n  let g = text.length - 1;\n  let h = text.length - 1;\n  let i = text.length - 1;\n  let j = text.length - 1;\n  let k = text.length - 1;\n  let l = text.length - 1;\n  let m = text.length - 1;\n  let n = text.length - 1;\n  let o = text.length - 1;\n  let p = text.length - 1;\n  let q = text.length - 1;\n  let r = text.length - 1;\n  let s = text.length - 1;\n  let t = text.length - 1;\n  let u = text.length - 1;\n  let v = text.length - 1;\n  let w = text.length - 1;\n  let x = text.length - 1;\n  let y = text.length - 1;\n  let z = text.length - 1;\n  let A = text.length - 1;\n  let B = text.length - 1;\n  let C = text.length - 1;\n  let D = text.length - 1;\n  let E = text.length - 1;\n  let F = text.length - 1;\n  let G = text.length - 1;\n  let H = text.length - 1;\n  let I = text.length - 1;\n  let J = text.length - 1;\n  let K = text.length - 1;\n  let L = text.length - 1;\n  let M = text.length - 1;\n  let N = text.length - 1;\n  let O = text.length - 1;\n  let P = text.length - 1;\n  let Q = text.length - 1;\n  let R = text.length - 1;\n  let S = text.length - 1;\n  let T = text.length - 1;\n  let U = text.length - 1;\n  let V = text.length - 1;\n  let W = text.length - 1;\n  let X = text.length - 1;\n  let Y = text.length - 1;\n  let Z = text.length - 1;\n  let a = text.length - 1;\n  let b = text.length - 1;\n  let c = text.length - 1;\n  let d = text.length - 1;\n  let e = text.length - 1;\n  let f = text.length - 1;\n  let g = text.length - 1;\n  let h = text.length - 1;\n  let i = text.length - 1;\n  let j = text.length - 1;\n  let k = text.length - 1;\n  let l = text.length - 1;\n  let m = text.length - 1;\n  let n = text.length - 1;\n  let o = text.length - 1;\n  let p = text.length - 1;\n  let q = text.length - 1;\n  let r = text.length - 1;\n  let s = text.length - 1;\n  let t = text.length - 1;\n  let u = text.length - 1;\n  let v = text.length - 1;\n  let w = text.length - 1;\n  let x = text.length - 1;\n  let y = text.length - 1;\n  let z = text.length - 1;\n  let A = text.length - 1;\n  let B = text.length - 1;\n  let C = text.length - 1;\n  let D = text.length - 1;\n  let E = text.length - 1;\n  let F = text.length - 1;\n  let G = text.length - 1;\n  let H = text.length - 1;\n  let I = text.length - 1;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/49", "prompt": "/*REturn 2^N MoDUlo p (be aWare of NumERics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn 2^N MoDUlo p (be aWare of NumERics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modp requires positive integers');\n  }\n  if (p === 1) {\n    return n;\n  }\n  if (p === 0) {\n    return 1;\n  }\n  const m = Math.pow(2, n);\n  const r = n % m;\n  return r === 0? 0 : r === 1? 1 : r === 2? m : modp(m - r, p);\n};\n\n/*\n  >>> modp(1, 3)\n  1\n  >>> modp(2, 3)\n  2\n  >>> modp(3, 3)\n  3\n  >>> modp(4, 3)\n  1\n  >>> modp(5, 3)\n  2\n  >>> modp(6, 3)\n  3\n  >>> modp(7, 3)\n  1\n  >>> modp(8, 3)\n  2\n  >>> modp(9, 3)\n  3\n  >>> modp(10, 3)\n  1\n  >>> modp(11, 3)\n  2\n  >>> modp(12, 3)\n  3\n  >>> modp(13, 3)\n  1\n  >>> modp(14, 3)\n  2\n  >>> modp(15, 3)\n  3\n  >>> modp(16, 3)\n  1\n  >>> modp(17, 3)\n  2\n  >>> modp(18, 3)\n  3\n  >>> modp(19, 3)\n  1\n  >>> modp(20, 3)\n  2\n  >>> modp(21, 3)\n  3\n  >>> modp(22, 3)\n  1\n  >>> modp(23, 3)\n  2\n  >>> modp(24, 3)\n  3\n  >>> modp(25, 3)\n  1\n  >>> modp(26, 3)\n  2\n  >>> modp(27, 3)\n  3\n  >>> modp(28, 3)\n  1\n  >>> modp(29, 3)\n  2\n  >>> modp(30, 3)\n  3\n  >>> modp(31, 3)\n  1\n  >>> modp(32, 3)\n  2\n  >>> modp(33, 3)\n  3\n  >>> modp(34, 3)\n  1\n  >>> modp(35, 3)\n  2\n  >>> modp(36, 3)\n  3\n  >>> modp(37, 3)\n  1\n  >>> modp(38, 3)\n  2\n  >>> modp(39, 3)\n  3\n  >>> modp(40, 3)\n  1\n  >>> modp(41, 3)\n  2\n  >>> modp(42, 3)\n  3\n  >>> modp(43, 3)\n  1\n  >>> modp(44, 3)\n  2\n  >>> modp(45, 3)\n  3\n  >>> modp(46, 3)\n  1\n  >>> modp(47, 3)\n  2\n  >>> modp(48, 3)\n  3\n  >>> modp(49, 3)\n  1\n  >>> modp(50, 3)\n  2\n  >>> modp(51, 3)\n  3\n  >>> modp(52, 3)\n  1\n  >>> modp(53, 3)\n  2\n  >>> modp(54, 3)\n  3\n  >>> modp(55, 3)\n  1\n  >>> modp(56, 3)\n  2\n  >>> modp(57, 3)\n  3\n  >>> modp(58, 3)\n  1\n  >>> modp(59, 3)\n  2\n  >>> modp(60, 3)\n  3\n  >>> modp(61, 3)\n  1\n  >>> modp(62, 3)\n  2\n  >>> modp(63, 3)\n  3\n  >>> modp(64, 3)\n  1\n  >>> modp(65, 3)\n  2\n  >>> modp(66, 3)\n  3\n  >>> modp(67, 3)\n  1\n  >>> modp(68, 3)\n  2\n  >>> modp(69, 3)\n  3\n  >>> modp(70, 3)\n  1\n  >>> modp(71, 3)\n  2\n  >>> modp(72, 3)\n  3\n  >>> modp(73, 3)\n  1\n  >>> modp(74, 3)\n  2\n  >>> modp(75, 3)\n  3\n  >>> modp(76, 3)\n  1\n  >>> modp(77, 3)\n  2\n  >>> modp(78, 3)\n  3\n  >>> modp(79, 3)\n  1\n  >>> modp(80, 3)\n  2\n  >>> modp(81, 3)\n  3\n  >>> modp(82, 3)\n  1\n  >>> modp(83, 3)\n  2\n  >>> modp(84, 3)\n  3\n  >>> modp(85, 3)\n  1\n  >>> modp(86, 3)\n  2\n  >>> modp(87, 3)\n  3\n  >>> modp(88, 3)\n  1\n  >>> modp(89, 3)\n  2\n  >>> modp(90, 3)\n  3\n  >>> modp(91, 3)\n  1\n  >>> modp(92, 3)\n  2\n  >>> modp(93, 3)\n  3\n  >>> modp(94, 3)\n  1\n  >>> modp(95, 3)\n  2\n  >>> modp(96, 3)\n  3\n  >>> modp(97, 3)\n  1\n  >>> modp(98, 3)\n  2\n  >>> modp(99, 3)\n  3\n  >>> modp(100, 3)\n  1\n  >>> modp(101, 3)\n  2\n  >>> modp(102, 3)\n  3\n  >>> modp(103, 3)\n  1\n  >>> modp(104, 3)\n  2\n  >>> modp(105, 3)\n  3\n  >>> modp(106, 3)\n  1\n  >>> modp(107, 3)\n  2\n  >>> modp(108, 3)\n  3\n  >>> modp(109, 3)\n  1\n  >>> modp(110, 3)\n  2\n  >>> modp(111, 3)\n  3\n  >>> modp(112, 3)\n  1\n  >>> modp(113, 3)\n  2\n  >>> modp(114, 3)\n  3\n  >>> modp(115, 3)\n  1\n  >>> modp(116, 3)\n  2\n  >>> modp(117, 3)\n  3\n  >>> modp(118, 3)\n  1\n  >>> modp(119, 3)\n  2\n  >>> modp(120, 3)\n  3\n  >>> modp(121, 3)\n  1\n  >>> modp(122, 3)\n  2\n  >>> modp(123, 3)\n  3\n  >>> modp(124, 3)\n  1\n  >>> modp(125, 3)\n  2\n  >>> modp(126, 3)\n  3\n  >>> modp(127, 3)\n  1\n  >>> modp(128, 3)\n  2\n  >>> modp(129, 3)\n  3\n  >>> modp(130, 3)\n  1\n  >>> modp(131, 3)\n  2\n  >>> modp(132, 3)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/5", "prompt": "/* inserT A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* inserT A nUMber 'delimeter' beTween eVerY Two consecutiVE ElemEnts of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let n = numbers.length\n  let j = 0\n  let k = n\n  while (i < n) {\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (j >= k) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      j++\n      continue\n    }\n    if (j === k) {\n      result.push(numbers[i])\n      j++\n      continue\n    }\n    result.push(numbers[i])\n    i++\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of `delimeter` from `list`.\n *\n * Example:\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n */\nconst removeAll = (delimeter, list) => {\n  let result = []\n  let i = 0\n  let n = list.length\n  let j = 0\n  let k = n\n  while (i < n) {\n    if (list[i] === delimeter) {\n      result.push(list[i])\n      i++\n      continue\n    }\n    if (j >= k) {\n      result.push(list[i])\n      i++\n      continue\n    }\n    if (list[i] === delimeter) {\n      result.push(list[i])\n      j++\n      continue\n    }\n    if (j === k) {\n      result.push(list[i])\n      j++\n      continue\n    }\n    result.push(list[i])\n    i++\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of `delimeter` from `list`.\n *\n * Example:\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n */\nconst removeAll2 = (delimeter, list) => {\n  let result = []\n  let i = 0\n  let n = list.length\n  let j = 0\n  let k = n\n  while (i < n) {\n    if (list[i] === delimeter) {\n      result.push(list[i])\n      i++\n      continue\n    }\n    if (j >= k) {\n      result.push(list[i])\n      i++\n      continue\n    }\n    if (list[i] === delimeter) {\n      result.push(list[i])\n      j++\n      continue\n    }\n    if (j === k) {\n      result.push(list[i])\n      j++\n      continue\n    }\n    result.push(list[i])\n    i++\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of `delimeter` from `list`.\n *\n * Example:\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n */\nconst removeAll3 = (delimeter, list) => {\n  let result = []\n  let i = 0\n  let n = list.length\n  let j = 0\n  let k = n\n  while (i < n) {\n    if (list[i] === delimeter) {\n      result.push(list[i])\n      i++\n      continue\n    }\n    if (j >= k) {\n      result.push(list[i])\n      i++\n      continue\n    }\n    if (list[i] === delimeter) {\n      result.push(list[i])\n      j++\n      continue\n    }\n    if (j === k) {\n      result.push(list[i])\n      j++\n      continue\n    }\n    result.push(list[i])\n    i++\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of `delimeter` from `list`.\n *\n * Example:\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n */\nconst removeAll4 = (delimeter, list) => {\n  let result = []\n  let i = 0\n  let n = list.length\n  let j = 0\n  let k = n\n  while (i < n) {\n    if (list[i] === delimeter) {\n      result.push(list[i])\n      i++\n      continue\n    }\n    if (j >= k) {\n      result.push(list[i])\n      i++\n      continue\n    }\n    if (list[i] === delimeter) {\n      result.push(list[i])\n      j++\n      continue\n    }\n    if (j === k) {\n      result.push(list[i])\n      j++\n      continue\n    }\n    result.push(list[i])\n    i++\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of `delimeter` from `list`.\n *\n * Example:\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n */\nconst removeAll5 = (delimeter, list) => {\n  let result = []\n  let i = 0\n  let n = list.length\n  let j = 0\n  let k = n\n  while (i < n) {\n    if (list[i] === delimeter) {\n      result.push(list[i])\n      i++\n      continue\n    }\n    if (j >= k) {\n      result.push(list[i])\n      i++\n      continue\n    }\n    if (list[i] === delimeter) {\n      result.push(list[i])\n      j++\n      continue\n    }\n    if (j === k) {\n      result.push(list[i])\n      j++\n      continue\n    }\n    result.push(list[i])\n    i++\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of `delimeter` from `list`.\n *\n * Example:\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n */\nconst removeAll6 = (delimeter, list) => {\n  let result = []\n  let i = 0\n  let n = list.length\n  let j = 0\n  let k = n\n  while (i < n) {\n    if (list[i] === delimeter) {\n      result.push(list[i])\n      i++\n      continue\n    }\n    if (j >= k) {\n      result.push(list[i])\n      i++\n      continue\n    }\n    if (list[i] === delimeter) {\n      result.push(list[i])\n      j++\n      continue\n    }\n    if (j === k) {\n      result.push(list[i])\n      j++\n      continue\n    }\n    result.push(list[i])\n    i++\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of `delimeter` from `list`.\n *\n * Example:\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n * removeAll('a', 'abcabcabc') => ['a', 'b', 'c']\n */\nconst removeAll7 = (delimeter, list) => {\n  let result = []\n  let i = 0\n  let n = list.length\n  let j = 0\n  let k = n\n  while (i < n) {\n    if (list[i] === delimeter) {\n      result.push(list[i])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHArCOdeaT(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIoN. ReTurNs dECoDEd sTRIng.\n  */\ncONst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  ReturNS eNCoded sTring bY shIFting every chARActeR by 5 in the alphabEt.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".cHaRCOdeAt(0)) % 26) + \"a\".cHaRCOdeAt(0)\n  )).JOiN(\"\");\n}\n\n/*\n  TakES aS input string enCOded WitH enCode_shiFT fuNctIo", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('')\n  let newText = text\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText = newText.replace(vowels[i], '')\n    }\n  }\n  return newText\n}\n\n/*\n  removePunctuation Is a fuNCtIOn that Takes sTriNG and returns sTRIng wIthout punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removePunctuation('abcdef')\n  'bcdf'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('')\n  let newText = text\n  for (let i = 0; i < punctuation.length; i++) {\n    if (punctuation[i] === '.' || punctuation[i] === '?' || punctuation[i] === '!' || punctuation[i] === '\"' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '&' || punctuation[i] === '\\'' || punctuation[i] === '(' || punctuation[i] === ')' || punctuation[i] === '*' || punctuation[i] === '+' || punctuation[i] === '-' || punctuation[i] === '=' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '|' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '?' || punctuation[i] === '!' || punctuation[i] === '\"' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '&' || punctuation[i] === '\\'' || punctuation[i] === '(' || punctuation[i] === ')' || punctuation[i] === '*' || punctuation[i] === '+' || punctuation[i] === '-' || punctuation[i] === '=' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '|' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '?' || punctuation[i] === '!' || punctuation[i] === '\"' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '&' || punctuation[i] === '\\'' || punctuation[i] === '(' || punctuation[i] === ')' || punctuation[i] === '*' || punctuation[i] === '+' || punctuation[i] === '-' || punctuation[i] === '=' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '|' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '?' || punctuation[i] === '!' || punctuation[i] === '\"' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '&' || punctuation[i] === '\\'' || punctuation[i] === '(' || punctuation[i] === ')' || punctuation[i] === '*' || punctuation[i] === '+' || punctuation[i] === '-' || punctuation[i] === '=' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '|' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '?' || punctuation[i] === '!' || punctuation[i] === '\"' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '&' || punctuation[i] === '\\'' || punctuation[i] === '(' || punctuation[i] === ')' || punctuation[i] === '*' || punctuation[i] === '+' || punctuation[i] === '-' || punctuation[i] === '=' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '|' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '?' || punctuation[i] === '!' || punctuation[i] === '\"' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '&' || punctuation[i] === '\\'' || punctuation[i] === '(' || punctuation[i] === ')' || punctuation[i] === '*' || punctuation[i] === '+' || punctuation[i] === '-' || punctuation[i] === '=' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '|' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '?' || punctuation[i] === '!' || punctuation[i] === '\"' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '&' || punctuation[i] === '\\'' || punctuation[i] === '(' || punctuation[i] === ')' || punctuation[i] === '*' || punctuation[i] === '+' || punctuation[i] === '-' || punctuation[i] === '=' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '|' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '?' || punctuation[i] === '!' || punctuation[i] === '\"' || punctuation[i] === '#' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '&' || punctuation[i] === '\\'' || punctuation[i] === '(' || punctuation[i] === ')' || punctuation[i] === '*' || punctuation[i] === '+' || punctuation[i] === '-' || punctuation[i] === '=' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '|' || punctuation[i] === '<' || punctuation[i] === '>' || punctuation[i] === '?' || punctuation[i] === '!' || punctuation[i] === '\"' || punctuation[i] === '#' || punctuation[i] ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn TRuE If all nUmbers in The list l ARe below thresHOLd t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every((n) => n < t);\n};\n\n/**\n  >>> isEven([2, 4, 6, 8])\n  true\n  >>> isEven([2, 4, 6, 8])\n  false\n  */\nconst isEven = arr => {\n  return arr.every((n) => n % 2 === 0);\n};\n\n/**\n  >>> isOdd([2, 4, 6, 8])\n  true\n  >>> isOdd([2, 4, 6, 8])\n  false\n  */\nconst isOdd = arr => {\n  return arr.every((n) => n % 2!== 0);\n};\n\n/**\n  >>> isEvenOrOdd([2, 4, 6, 8])\n  true\n  >>> isEvenOrOdd([2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOdd = arr => {\n  return isEven(arr) || isOdd(arr);\n};\n\n/**\n  >>> isEvenOrOddOrZero([2, 4, 6, 8])\n  true\n  >>> isEvenOrOddOrZero([2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOddOrZero = arr => {\n  return isEvenOrOdd(arr) || isZero(arr);\n};\n\n/**\n  >>> isEvenOrOddOrZeroOrZero([2, 4, 6, 8])\n  true\n  >>> isEvenOrOddOrZeroOrZero([2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOddOrZeroOrZero = arr => {\n  return isEvenOrOddOrZero(arr) || isZeroOrZero(arr);\n};\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZero([2, 4, 6, 8])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZero([2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZero(arr) || isZeroOrZeroOrZero(arr);\n};\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZero(arr) || isZeroOrZeroOrZeroOrZero(arr);\n};\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZero(arr) || isZeroOrZeroOrZeroOrZeroOrZero(arr);\n};\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZero(arr) || isZeroOrZeroOrZeroOrZeroOrZero(arr);\n};\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZero(arr) || isZeroOrZeroOrZeroOrZeroOrZero(arr);\n};\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZero(arr) || isZeroOrZeroOrZeroOrZeroOrZero(arr);\n};\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZero(arr) || isZeroOrZeroOrZeroOrZeroOrZero(arr);\n};\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZero(arr) || isZeroOrZeroOrZeroOrZeroOrZero(arr);\n};\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZero(arr) || isZeroOrZeroOrZeroOrZeroOrZero(arr);\n};\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6, 8])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = arr => {\n  return isEvenOrOddOrZeroOrZeroOrZeroOrZero(arr) || isZeroOrZeroOrZeroOrZeroOrZero(arr);", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/53", "prompt": "/*ADd two NUmBErs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*ADd two NUmBErs x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === Infinity && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === y) {\n    return x\n  }\n  if (y === Infinity) {\n    return Infinity\n  }\n  if (x === y) {\n    return y\n  }\n  if (isNaN(x) || isNaN(y)) {\n    throw new Error(`Invalid arguments: ${x} and ${y}`)\n  }\n  if (x < 0 || x > 1 || y < 0 || y > 1) {\n    throw new Error(`Invalid arguments: ${x} and ${y}`)\n  }\n  return x + y\n}\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === Infinity && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === y) {\n    return -x\n  }\n  if (y === Infinity) {\n    return Infinity\n  }\n  if (x === y) {\n    return y\n  }\n  if (isNaN(x) || isNaN(y)) {\n    throw new Error(`Invalid arguments: ${x} and ${y}`)\n  }\n  if (x < 0 || x > 1 || y < 0 || y > 1) {\n    throw new Error(`Invalid arguments: ${x} and ${y}`)\n  }\n  return x - y\n}\n\n/*\n  >>> multiply(2, 3)\n  2\n  >>> multiply(5, 7)\n  10\n  */\nconst multiply = (a, b) => {\n  if (a === 0 && b === 0) {\n    return 0\n  }\n  if (a === 0 && b === Infinity) {\n    return Infinity\n  }\n  if (a === Infinity && b === 0) {\n    return 0\n  }\n  if (a === Infinity && b === Infinity) {\n    return Infinity\n  }\n  if (a === b) {\n    return a\n  }\n  if (isNaN(a) || isNaN(b)) {\n    throw new Error(`Invalid arguments: ${a} and ${b}`)\n  }\n  if (a < 0 || a > 1 || b < 0 || b > 1) {\n    throw new Error(`Invalid arguments: ${a} and ${b}`)\n  }\n  return a * b\n}\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  3\n  */\nconst divide = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === Infinity && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === y) {\n    return x / y\n  }\n  if (y === Infinity) {\n    return Infinity\n  }\n  if (x === y) {\n    return y\n  }\n  if (isNaN(x) || isNaN(y)) {\n    throw new Error(`Invalid arguments: ${x} and ${y}`)\n  }\n  if (x < 0 || x > 1 || y < 0 || y > 1) {\n    throw new Error(`Invalid arguments: ${x} and ${y}`)\n  }\n  return x / y\n}\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  3\n  */\nconst mod = (a, b) => {\n  if (a === 0 && b === 0) {\n    return 0\n  }\n  if (a === 0 && b === Infinity) {\n    return Infinity\n  }\n  if (a === Infinity && b === 0) {\n    return 0\n  }\n  if (a === Infinity && b === Infinity) {\n    return Infinity\n  }\n  if (a === b) {\n    return a\n  }\n  if (isNaN(a) || isNaN(b)) {\n    throw new Error(`Invalid arguments: ${a} and ${b}`)\n  }\n  if (a < 0 || a > 1 || b < 0 || b > 1) {\n    throw new Error(`Invalid arguments: ${a} and ${b}`)\n  }\n  return a % b\n}\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(5, 7)\n  8\n  */\nconst pow = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  if (x === 0 && y === Infinity) {\n    return Infinity\n  }\n  if (x === Infinity && y === 0) {\n    return 0\n  }\n  if (x === Infinity && y === Infinity) {\n    return Infinity\n  }\n  if (x === y) {\n    return Math.pow(x, y)\n  }\n  if (y === Infinity) {\n    return Infinity\n  }\n  if (x === y) {\n    return y\n  }\n  if (isNaN(x) || isNaN(y)) {\n    throw new Error(`Invalid arguments: ${x} and ${y}`)\n  }\n  if (x < 0 || x > 1 || y < 0 || y > 1) {\n    throw new Error(`Invalid arguments: ${x} and ${y}`)\n  }\n  return Math.pow(x, y)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt = (a) => {\n  if (a === Infinity) {\n    return Infinity\n  }\n  if (a === 0) {\n    return 0\n  }\n  if (a === 1) {\n    return 1\n  }\n  if (isNaN(a)) {\n    throw new Error(`Invalid arguments: ${a}`)\n  }\n  if (a < 0 || a > 1) {\n    throw new Error(`Invalid arguments: ${a}`)\n  }\n  return Math.sqrt(a)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt_mod = (a) => {\n  if (a === Infinity) {\n    return Infinity\n  }\n  if (a === 0) {\n    return 0\n  }\n  if (a === 1) {\n    return 1\n  }\n  if (isNaN(a)) {\n    throw new Error(`Invalid arguments: ${a}`)\n  }\n  if (a < 0 || a > 1) {\n    throw new Error(`Invalid arguments: ${a}`)\n  }\n  return Math.sqrt(a) % 1\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt_pow = (a) => {\n  if (a === Infinity) {\n    return Infinity\n  }\n  if (a === 0) {\n    return 0\n  }\n  if (a === 1) {\n    return 1\n  }\n  if (isNaN(a)) {\n    throw new Error(`Invalid arguments: ${a}`)\n  }\n  if (a < 0 || a > 1) {\n    throw new Error(`Invalid arguments: ${a}`)\n  }\n  return Math.sqrt(a) ** 2\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt_pow_mod = (a) => {\n  if (a === Infinity) {\n    return Infinity\n  }\n  if (a === 0) {\n    return 0\n  }\n  if (a === 1) {\n    return 1\n  }\n  if (isNaN(a)) {\n    throw new Error(`Invalid arguments: ${a}`)\n  }\n  if (a < 0 || a > 1) {\n    throw new Error(`Invalid arguments: ${a}`)\n  }\n  return Math.sqrt(a) ** 2 % 1\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt_pow_pow_mod = (a) => {\n  if (a === Infinity) {\n    return Infinity\n  }\n  if (a === 0) {\n    return 0\n  }\n  if (a === 1) {\n    return 1\n  }\n  if (isNaN(a)) {\n    throw new Error(`Invalid arguments: ${a}`)\n  }\n  if (a < 0 || a > 1) {\n    throw new Error(`Invalid arguments: ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/54", "prompt": "/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  check IF tWO words Have thE saME characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/55", "prompt": "/*REturn n-th fIbONacci nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn n-th fIbONacci nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1;\n  \n  for(let i = 2; i <= n; i++){\n    d = a + b;\n    c = a + c;\n    b = d;\n    a = c;\n  }\n  return b;\n}\n\n/*\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  >>> fib(11)\n  89\n  >>> fib(12)\n  144\n  >>> fib(13)\n  233\n  >>> fib(14)\n  377\n  >>> fib(15)\n  610\n  >>> fib(16)\n  987\n  >>> fib(17)\n  1597\n  >>> fib(18)\n  2584\n  >>> fib(19)\n  4181\n  >>> fib(20)\n  6765\n  >>> fib(21)\n  13579\n  >>> fib(22)\n  26287\n  >>> fib(23)\n  524287\n  >>> fib(24)\n  1048575\n  >>> fib(25)\n  2097151\n  >>> fib(26)\n  402653\n  >>> fib(27)\n  8053041\n  >>> fib(28)\n  161061274\n  >>> fib(29)\n  3276749\n  >>> fib(30)\n  65535\n  >>> fib(31)\n  134217727\n  >>> fib(32)\n  268435455\n  >>> fib(33)\n  536870911\n  >>> fib(34)\n  1073741823\n  >>> fib(35)\n  2147483647\n  >>> fib(36)\n  4294967295\n  >>> fib(37)\n  838860717\n  >>> fib(38)\n  16777215\n  >>> fib(39)\n  33554431\n  >>> fib(40)\n  67108863\n  >>> fib(41)\n  1342177215\n  >>> fib(42)\n  268435455\n  >>> fib(43)\n  536870911\n  >>> fib(44)\n  1073741823\n  >>> fib(45)\n  2147483647\n  >>> fib(46)\n  4294967295\n  >>> fib(47)\n  838860717\n  >>> fib(48)\n  16777215\n  >>> fib(49)\n  33554431\n  >>> fib(50)\n  67108863\n  >>> fib(51)\n  1342177215\n  >>> fib(52)\n  268435455\n  >>> fib(53)\n  536870911\n  >>> fib(54)\n  1073741823\n  >>> fib(55)\n  2147483647\n  >>> fib(56)\n  4294967295\n  >>> fib(57)\n  838860717\n  >>> fib(58)\n  16777215\n  >>> fib(59)\n  33554431\n  >>> fib(60)\n  67108863\n  >>> fib(61)\n  1342177215\n  >>> fib(62)\n  268435455\n  >>> fib(63)\n  536870911\n  >>> fib(64)\n  1073741823\n  >>> fib(65)\n  2147483647\n  >>> fib(66)\n  4294967295\n  >>> fib(67)\n  838860717\n  >>> fib(68)\n  16777215\n  >>> fib(69)\n  33554431\n  >>> fib(70)\n  67108863\n  >>> fib(71)\n  1342177215\n  >>> fib(72)\n  268435455\n  >>> fib(73)\n  536870911\n  >>> fib(74)\n  1073741823\n  >>> fib(75)\n  2147483647\n  >>> fib(76)\n  4294967295\n  >>> fib(77)\n  838860717\n  >>> fib(78)\n  16777215\n  >>> fib(79)\n  33554431\n  >>> fib(80)\n  67108863\n  >>> fib(81)\n  1342177215\n  >>> fib(82)\n  268435455\n  >>> fib(83)\n  536870911\n  >>> fib(84)\n  1073741823\n  >>> fib(85)\n  2147483647\n  >>> fib(86)\n  4294967295\n  >>> fib(87)\n  838860717\n  >>> fib(88)\n  16777215\n  >>> fib(89)\n  33554431\n  >>> fib(90)\n  67108863\n  >>> fib(91)\n  1342177215\n  >>> fib(92)\n  268435455\n  >>> fib(93)\n  536870911\n  >>> fib(94)\n  1073741823\n  >>> fib(95)\n  2147483647\n  >>> fib(96)\n  4294967295\n  >>> fib(97)\n  838860717\n  >>> fib(98)\n  16777215\n  >>> fib(99)\n  33554431\n  >>> fib(100)\n  67108863\n  >>> fib(101)\n  1342177215\n  >>> fib(102)\n  268435455\n  >>> fib(103)\n  536870911\n  >>> fib(104)\n  1073741823\n  >>> fib(105)\n  2147483647\n  >>> fib(106)\n  4294967295\n  >>> fib(107)\n  838860717\n  >>> fib(108)\n  16777215\n  >>> fib(109)\n  33554431\n  >>> fib(110)\n  67108863\n  >>> fib(111)\n  1342177215\n  >>> fib(112)\n  268435455\n  >>> fib(113)\n  536870911\n  >>> fib(114)\n  1073741823\n  >>> fib(115)\n  2147483647\n  >>> fib(116)\n  4294967295\n  >>> fib(117)\n  838860717\n  >>> fib(118)\n  16777215\n  >>> fib(119)\n  33554431\n  >>> fib(120)\n  67108863\n  >>> fib(121)\n  1342177215\n  >>> fib(122)\n  268435455\n  >>> fib(123)\n  536870911\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets Is a stRInG Of \"<\" and \">\".\n  return fAlse if EveRY opening bracKET has A correspondiNg closIng BRacKet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets Is a stRInG Of \"<\" and \">\".\n  return fAlse if EveRY opening bracKET has A correspondiNg closIng BRacKet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketingRegex = new RegExp(`[${brackets}]`, 'g')\n  return bracketingRegex.test(EveRY)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRY = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithBrackets = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithBracketsAndParens = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParens = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParensAndBrackets = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParensAndBracketsAndParens = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParensAndBracketsAndParensAndBrackets = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParensAndBracketsAndParensAndBracketsAndParens = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParensAndBracketsAndParensAndBracketsAndParensAndBrackets = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBrackets = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBrackets = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBrackets = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBrackets = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBrackets = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBrackets = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBracketsAndParensAndBrackets = (str) => {\n  const regex = /^(EveRY|EveRY\\(([^)]+)\\))$/\n  return regex.test(str)\n}\n\n/**\n  Returns true if the string is a valid EveRY expression\n  Returns false if the string is not a valid EveRY expression\n*/\nconst isValidEveRYWithParensAndBracket", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/57", "prompt": "/*REturn TRuE Is list elemEnts arE moNOtonically inCREasiNg or decreasiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn TRuE Is list elemEnts arE moNOtonically inCREasiNg or decreasiNg.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const l1 = l.slice();\n  let l2 = l1.slice();\n  let l3 = l1.slice();\n  let l4 = l1.slice();\n  let l5 = l1.slice();\n  let l6 = l1.slice();\n  let l7 = l1.slice();\n  let l8 = l1.slice();\n  let l9 = l1.slice();\n  let l10 = l1.slice();\n  let l11 = l1.slice();\n  let l12 = l1.slice();\n  let l13 = l1.slice();\n  let l14 = l1.slice();\n  let l15 = l1.slice();\n  let l16 = l1.slice();\n  let l17 = l1.slice();\n  let l18 = l1.slice();\n  let l19 = l1.slice();\n  let l20 = l1.slice();\n  let l21 = l1.slice();\n  let l22 = l1.slice();\n  let l23 = l1.slice();\n  let l24 = l1.slice();\n  let l25 = l1.slice();\n  let l26 = l1.slice();\n  let l27 = l1.slice();\n  let l28 = l1.slice();\n  let l29 = l1.slice();\n  let l30 = l1.slice();\n  let l31 = l1.slice();\n  let l32 = l1.slice();\n  let l33 = l1.slice();\n  let l34 = l1.slice();\n  let l35 = l1.slice();\n  let l36 = l1.slice();\n  let l37 = l1.slice();\n  let l38 = l1.slice();\n  let l39 = l1.slice();\n  let l40 = l1.slice();\n  let l41 = l1.slice();\n  let l42 = l1.slice();\n  let l43 = l1.slice();\n  let l44 = l1.slice();\n  let l45 = l1.slice();\n  let l46 = l1.slice();\n  let l47 = l1.slice();\n  let l48 = l1.slice();\n  let l49 = l1.slice();\n  let l50 = l1.slice();\n  let l51 = l1.slice();\n  let l52 = l1.slice();\n  let l53 = l1.slice();\n  let l54 = l1.slice();\n  let l55 = l1.slice();\n  let l56 = l1.slice();\n  let l57 = l1.slice();\n  let l58 = l1.slice();\n  let l59 = l1.slice();\n  let l60 = l1.slice();\n  let l61 = l1.slice();\n  let l62 = l1.slice();\n  let l63 = l1.slice();\n  let l64 = l1.slice();\n  let l65 = l1.slice();\n  let l66 = l1.slice();\n  let l67 = l1.slice();\n  let l68 = l1.slice();\n  let l69 = l1.slice();\n  let l70 = l1.slice();\n  let l71 = l1.slice();\n  let l72 = l1.slice();\n  let l73 = l1.slice();\n  let l74 = l1.slice();\n  let l75 = l1.slice();\n  let l76 = l1.slice();\n  let l77 = l1.slice();\n  let l78 = l1.slice();\n  let l79 = l1.slice();\n  let l80 = l1.slice();\n  let l81 = l1.slice();\n  let l82 = l1.slice();\n  let l83 = l1.slice();\n  let l84 = l1.slice();\n  let l85 = l1.slice();\n  let l86 = l1.slice();\n  let l87 = l1.slice();\n  let l88 = l1.slice();\n  let l89 = l1.slice();\n  let l90 = l1.slice();\n  let l91 = l1.slice();\n  let l92 = l1.slice();\n  let l93 = l1.slice();\n  let l94 = l1.slice();\n  let l95 = l1.slice();\n  let l96 = l1.slice();\n  let l97 = l1.slice();\n  let l98 = l1.slice();\n  let l99 = l1.slice();\n  let l100 = l1.slice();\n  let l101 = l1.slice();\n  let l102 = l1.slice();\n  let l103 = l1.slice();\n  let l104 = l1.slice();\n  let l105 = l1.slice();\n  let l106 = l1.slice();\n  let l107 = l1.slice();\n  let l108 = l1.slice();\n  let l109 = l1.slice();\n  let l110 = l1.slice();\n  let l111 = l1.slice();\n  let l112 = l1.slice();\n  let l113 = l1.slice();\n  let l114 = l1.slice();\n  let l115 = l1.slice();\n  let l116 = l1.slice();\n  let l117 = l1.slice();\n  let l118 = l1.slice();\n  let l119 = l1.slice();\n  let l120 = l1.slice();\n  let l121 = l1.slice();\n  let l122 = l1.slice();\n  let l123 = l1.slice();\n  let l124 = l1.slice();\n  let l125 = l1.slice();\n  let l126 = l1.slice();\n  let l127 = l1.slice();\n  let l128 = l1.slice();\n  let l129 = l1.slice();\n  let l130 = l1.slice();\n  let l131 = l1.slice();\n  let l132 = l1.slice();\n  let l133 = l1.slice();\n  let l134 = l1.slice();\n  let l135 = l1.slice();\n  let l136 = l1.slice();\n  let l137 = l1.slice();\n  let l138 = l1.slice();\n  let l139 = l1.slice();\n  let l140 = l1.slice();\n  let l141 = l1.slice();\n  let l142 = l1.slice();\n  let l143 = l1.slice();\n  let l144 = l1.slice();\n  let l145 = l1.slice();\n  let l146 = l1.slice();\n  let l147 = l1.slice();\n  let l148 = l1.slice();\n  let l149 = l1.slice();\n  let l150 = l1.slice();\n  let l151 = l1.slice();\n  let l152 = l1.slice();\n  let l153 = l1.slice();\n  let l154 = l1.slice();\n  let l155 = l1.slice();\n  let l156 = l1.slice();\n  let l157 = l1.slice();\n  let l158 = l1.slice();\n  let l159 = l1.slice();\n  let l160 = l1.slice();\n  let l161 = l1.slice();\n  let l162 = l1.slice();\n  let l163 = l1.slice();\n  let l164 = l1.slice();\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/58", "prompt": "/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn SOrTEd uniqUe common elemEntS For two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let len = Math.min(l1.length, l2.length)\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result\n}\n\n/*\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n  >>> unique([1, 1, 1, 2, 2, 2])\n  [1, 1, 1, 2, 2]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*REturn THe largest PRime faCtor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*REturn THe largest PRime faCtor of n. assUMe n > 1 and is not a pRIMe.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      primeFactor = primeFactor * i;\n    } else {\n      i++;\n    }\n  }\n  return primeFactor;\n};\n\n/*\n  Given a number n, return true if it is a pRIMe.\n  >>> isPrime(13195)\n  true\n  >>> isPrime(2048)\n  false\n  */\nconst isPrime = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return false;\n    } else {\n      primeFactor = primeFactor * i;\n      i++;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a pRIMe.\n  >>> isPrime(13195)\n  true\n  >>> isPrime(2048)\n  false\n  */\nconst isPrimeFactor = (n) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= n) {\n    if (n % primeFactor === 0) {\n      return true;\n    } else {\n      primeFactor = primeFactor * i;\n      i++;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a number n, return true if it is a pRIMe.\n  >>> isPrimeFactor(13195)\n  true\n  >>> isPrimeFactor(2048)\n  false\n  */\nconst isPrimeFactors = (num) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= num) {\n    if (num % primeFactor === 0) {\n      return true;\n    } else {\n      primeFactor = primeFactor * i;\n      i++;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a number n, return true if it is a pRIMe.\n  >>> isPrimeFactors(13195)\n  true\n  >>> isPrimeFactors(2048)\n  false\n  */\nconst isPrimeFactors = (num) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= num) {\n    if (num % primeFactor === 0) {\n      return false;\n    } else {\n      primeFactor = primeFactor * i;\n      i++;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a pRIMe.\n  >>> isPrimeFactors(13195)\n  true\n  >>> isPrimeFactors(2048)\n  false\n  */\nconst isPrimeFactorsFactor = (num) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= num) {\n    if (num % primeFactor === 0) {\n      return true;\n    } else {\n      primeFactor = primeFactor * i;\n      i++;\n    }\n  }\n  return false;\n};\n\n/*\n  Given a number n, return true if it is a pRIMe.\n  >>> isPrimeFactorsFactor(13195)\n  true\n  >>> isPrimeFactorsFactor(2048)\n  false\n  */\nconst isPrimeFactorsFactor = (num) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= num) {\n    if (num % primeFactor === 0) {\n      return false;\n    } else {\n      primeFactor = primeFactor * i;\n      i++;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a pRIMe.\n  >>> isPrimeFactorsFactors(13195)\n  true\n  >>> isPrimeFactorsFactors(2048)\n  false\n  */\nconst isPrimeFactorsFactors = (num) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= num) {\n    if (num % primeFactor === 0) {\n      return false;\n    } else {\n      primeFactor = primeFactor * i;\n      i++;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a pRIMe.\n  >>> isPrimeFactorsFactors(13195)\n  true\n  >>> isPrimeFactorsFactors(2048)\n  false\n  */\nconst isPrimeFactorsFactorsFactor = (num) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= num) {\n    if (num % primeFactor === 0) {\n      return false;\n    } else {\n      primeFactor = primeFactor * i;\n      i++;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a pRIMe.\n  >>> isPrimeFactorsFactorsFactor(13195)\n  true\n  >>> isPrimeFactorsFactorsFactor(2048)\n  false\n  */\nconst isPrimeFactorsFactorsFactor = (num) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= num) {\n    if (num % primeFactor === 0) {\n      return false;\n    } else {\n      primeFactor = primeFactor * i;\n      i++;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a pRIMe.\n  >>> isPrimeFactorsFactorsFactors(13195)\n  true\n  >>> isPrimeFactorsFactorsFactors(2048)\n  false\n  */\nconst isPrimeFactorsFactorsFactors = (num) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= num) {\n    if (num % primeFactor === 0) {\n      return false;\n    } else {\n      primeFactor = primeFactor * i;\n      i++;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a pRIMe.\n  >>> isPrimeFactorsFactorsFactorsFactor(13195)\n  true\n  >>> isPrimeFactorsFactorsFactorsFactor(2048)\n  false\n  */\nconst isPrimeFactorsFactorsFactorsFactor = (num) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= num) {\n    if (num % primeFactor === 0) {\n      return false;\n    } else {\n      primeFactor = primeFactor * i;\n      i++;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a pRIMe.\n  >>> isPrimeFactorsFactorsFactorsFactors(13195)\n  true\n  >>> isPrimeFactorsFactorsFactorsFactor(2048)\n  false\n  */\nconst isPrimeFactorsFactorsFactorsFactor = (num) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= num) {\n    if (num % primeFactor === 0) {\n      return false;\n    } else {\n      primeFactor = primeFactor * i;\n      i++;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is a pRIMe.\n  >>> isPrimeFactorsFactorsFactorsFactors(13195)\n  true\n  >>> isPrimeFactorsFactorsFactorsFactor(2048)\n  false\n  */\nconst isPrimeFactorsFactorsFactorsFactors = (num) => {\n  let primeFactor = 1;\n  let i = 2;\n  while (primeFactor <= num) {\n    if (num % primeFactor === 0) {\n      return false;\n    } else {\n      primeFactor = primeFactor * i;\n      i++", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/6", "prompt": "/* input TO tHIs funcTion is A stRIng representED MultIple groups foR nesteD paREntHesES sePaRaTed by SPaCEs.\n  FOR eAch of the group, oUTput The DeePest levEL of NesTiNg oF paRenTHeSEs.\n  E.G. (()()) HAs maXImum TWo LevELs of NEStINg whiLE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* input TO tHIs funcTion is A stRIng representED MultIple groups foR nesteD paREntHesES sePaRaTed by SPaCEs.\n  FOR eAch of the group, oUTput The DeePest levEL of NesTiNg oF paRenTHeSEs.\n  E.G. (()()) HAs maXImum TWo LevELs of NEStINg whiLE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_stack_size = 0;\n  const paren_stack_count = 0;\n  const paren_stack_remainder = [];\n  const paren_stack_remainder_size = 0;\n  const paren_stack_remainder_count = 0;\n  const paren_stack_remainder_remainder = [];\n  const paren_stack_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_count = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_size = 0;\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder_remainder = [];\n  const paren_stack", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sUms = sUmToN(n)\n  return sUms.reduce((acc, cur) => acc + cur, 0) / sUms.length\n}\n\n/**\n * A FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN that sUms NUmbers from 1 to n.\n * sUmToN IS a FUnctioN", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets Is a stRInG Of \"(\" and \")\".\n  return tRue if eVerY Opening brackET Has a CorrespondinG closiNg bRAckEt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* brackets Is a stRInG Of \"(\" and \")\".\n  return tRue if eVerY Opening brackET Has a CorrespondinG closiNg bRAckEt.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const tRue = brackets.includes(\"(\")\n  const eVerY = brackets.includes(\")\")\n  return tRue && eVerY\n}\n\n/**\n  Returns true if the given string is a valid JavaScript identifier.\n\n  >>> isIdentifier(\"a\")\n  true\n  >>> isIdentifier(\"A\")\n  true\n  >>> isIdentifier(\"$\")\n  true\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  false\n  >>> isIdentifier(\"$A\")\n  false\n  >>> isIdentifier(\"$a\")\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* xs RepreSEnT CoeffiCients Of a POlynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   RetURN derivative of tHis polynomiaL in the saMe fORm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let ret = [];\n  for (let i = 0; i < xs.length; i++) {\n    let xi = xs[i];\n    let xj = xs[i + 1];\n    let xk = xs[i + 2];\n    let xl = xs[i + 3];\n    let xm = xs[i + 4];\n    let xn = xs[i + 5];\n    let xo = xs[i + 6];\n    let xp = xs[i + 7];\n    let xq = xs[i + 8];\n    let xr = xs[i + 9];\n    let xs = xs[i + 10];\n    let xt = xs[i + 11];\n    let xu = xs[i + 12];\n    let xv = xs[i + 13];\n    let xw = xs[i + 14];\n    let xx = xs[i + 15];\n    let xy = xs[i + 16];\n    let xz = xs[i + 17];\n    let yi = xj;\n    let yj = xk;\n    let yk = xl;\n    let yl = xm;\n    let ym = xn;\n    let yn = xo;\n    let yo = xp;\n    let yp = xq;\n    let yr = xr;\n    let ys = xs;\n    let yt = xt;\n    let yu = xu;\n    let yv = xv;\n    let yw = xw;\n    let yx = xx;\n    let yy = xy;\n    let yz = yz;\n    let yi = yi + yj;\n    let yj = yi + yk;\n    let yk = yi + yl;\n    let yl = yi + ym;\n    let ym = yi + yn;\n    let yn = yi + yo;\n    let yo = yi + yp;\n    let yp = yi + yq;\n    let yq = yi + yr;\n    let yr = yi + ys;\n    let ys = yi + yt;\n    let yt = yi + yu;\n    let yu = yi + yv;\n    let yv = yi + yw;\n    let yw = yi + yx;\n    let yx = yi + yy;\n    let yy = yi + yz;\n    let yz = yj + yk;\n    let yk = yj + yl;\n    let yl = yj + ym;\n    let ym = yj + yn;\n    let yn = yj + yo;\n    let yo = yj + yp;\n    let yp = yj + yq;\n    let yq = yj + yr;\n    let yr = yj + ys;\n    let ys = yj + yt;\n    let yt = yj + yu;\n    let yu = yj + yv;\n    let yv = yj + yw;\n    let yw = yj + yx;\n    let yx = yj + yy;\n    let yy = yj + yz;\n    let yz = yk + yl;\n    let yl = yk + ym;\n    let ym = yk + yn;\n    let yn = yk + yo;\n    let yo = yk + yp;\n    let yp = yk + yq;\n    let yq = yk + yr;\n    let yr = yk + ys;\n    let ys = yk + yt;\n    let yt = yk + yu;\n    let yu = yk + yv;\n    let yv = yk + yw;\n    let yw = yk + yx;\n    let yx = yk + yy;\n    let yy = yk + yz;\n    let yz = yl + yk;\n    let yk = yl + yl;\n    let yl = yl + ym;\n    let ym = yl + yn;\n    let yn = yl + yo;\n    let yo = yl + yp;\n    let yp = yl + yq;\n    let yq = yl + yr;\n    let yr = yl + ys;\n    let ys = yl + yt;\n    let yt = yl + yu;\n    let yu = yl + yv;\n    let yv = yl + yw;\n    let yw = yl + yx;\n    let yx = yl + yy;\n    let yy = yl + yz;\n    let yz = ym + yk;\n    let yk = ym + yl;\n    let yl = ym + ym;\n    let ym = ym + yn;\n    let yn = ym + yo;\n    let yo = ym + yp;\n    let yp = ym + yq;\n    let yq = ym + yr;\n    let yr = ym + ys;\n    let ys = ym + yt;\n    let yt = ym + yu;\n    let yu = ym + yv;\n    let yv = ym + yw;\n    let yw = ym + yx;\n    let yx = ym + yy;\n    let yy = ym + yz;\n    let yz = yn + yk;\n    let yk = yn + yl;\n    let yl = yn + ym;\n    let ym = yn + yn;\n    let yn = yn + yo;\n    let yo = yn + yp;\n    let yp = yn + yq;\n    let yq = yn + yr;\n    let yr = yn + ys;\n    let ys = yn + yt;\n    let yt = yn + yu;\n    let yu = yn + yv;\n    let yv = yn + yw;\n    let yw = yn + yx;\n    let yx = yn + yy;\n    let yy = yn + yz;\n    let yz = yo - yi;\n    let yi = yo - yj;\n    let yj = yo - yk;\n    let yk = yo - yl;\n    let yl = yo - ym;\n    let ym = yo - yn;\n    let yn = yo - yo;\n    let yo = yo - yp;\n    let yp = yo - yq;\n    let yq = yo - yr;\n    let yr = yo - ys;\n    let ys = yo - yt;\n    let yt = yo - yu;\n    let yu = yo - yv;\n    let yv = yo - yw;\n    let yw = yo - yx;\n    let yx = yo - yy;\n    let yy = yo - yz;\n    let yz = yp - yi;\n    let yi = yp - yj;\n    let yj = yp - yk;\n    let yk = yp - yl;\n    let yl = yp - ym;\n    let ym = yp - yn;\n    let yn = yp - yo;\n    let yo = yp - yp;\n    let yp = yp - yq;\n    let yq = yp - yr;\n    let yr = yp - ys;\n    let ys = yp - yt;\n    let yt = yp - yu;\n    let yu = yp - yv;\n    let yv = yp - yw;\n    let yw = yp - yx;\n    let yx = yp - yy;\n    let yy = yp - yz;\n    let yz = yq - yi;\n    let yi = yq - yj;\n    let yj = yq - yk;\n    let yk = yq - yl;\n    let y", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/63", "prompt": "/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*THe FibfIb NUmber sEquencE is A Sequence simiLAR to tHe Fibbonacci SequneCe tHAt's DefINed As FoLlows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  pLeASe wRItE a function to efFIcieNtlY coMpute thE n-th EleMenT oF thE fibfib nuMbeR SeQUenCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci Number is a number that is the sum of the two previous numbers. A Fibonacci ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WRite a FUnCTion vowelsCount whIch takEs a STring represeNTIng\n  a Word as input aNd retuRns THe nUmbER of vowels in ThE sTring.\n  vOwELs in tHIs Case are 'a', 'e', 'i', 'o', 'u'. HeRE, 'y' is AlsO a\n  vOwel, but ONly WheN iT is At tHe eND oF The GIVen wORd.\n\n  ExAMpLe:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowelsCountMap = new Map();\n  const vowelsCountSet = new Set();\n  let vowelsCount = 0;\n  let vowelsCountSetIndex = 0;\n  let vowelsCountMapIndex = 0;\n  let vowelsCountMapValue = 0;\n  let vowelsCountMapValueIndex = 0;\n  let vowelsCountMapValueValue = 0;\n  let vowelsCountMapValueValueIndex = 0;\n  let vowelsCountMapValueValueValue = 0;\n  let vowelsCountMapValueValueValueIndex = 0;\n  let vowelsCountMapValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueIndex = 0;\n  let vowelsCountMapValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueIndex = 0;\n  let vowelsCountMapValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueIndex = 0;\n  let vowelsCountMapValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueIndex = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueIndex = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsCountMapValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*CIrculAR shift tHE digitS of the IntEGer x, shift the digits RIGht bY shift\n  and return the resulT as a stRinG.\n  if shift > nUmbER of DiGiTs, return digITs REveRSeD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*CIrculAR shift tHE digitS of the IntEGer x, shift the digits RIGht bY shift\n  and return the resulT as a stRinG.\n  if shift > nUmbER of DiGiTs, return digITs REveRSeD.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const nUmbER = x.length;\n  const digITs = x.slice(0, nUmbER);\n  const resulT = digITs.reduce((acc, val) => {\n    return acc + val * Math.pow(10, shift - nUmbER);\n  }, 0);\n  return resulT;\n};\n\n/*\n  >>> circularShift(12, 2)\n  \"12\"\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 0)\n  \"11\"\n  >>> circularShift(12, -1)\n  \"11\"\n  >>> circularShift(12, -2)\n  \"21\"\n  >>> circularShift(12, -3)\n  \"11\"\n  >>> circularShift(12, -4)\n  \"21\"\n  >>> circularShift(12, -5)\n  \"11\"\n  >>> circularShift(12, -6)\n  \"21\"\n  >>> circularShift(12, -7)\n  \"11\"\n  >>> circularShift(12, -8)\n  \"21\"\n  >>> circularShift(12, -9)\n  \"11\"\n  >>> circularShift(12, -10)\n  \"21\"\n  >>> circularShift(12, -11)\n  \"11\"\n  >>> circularShift(12, -12)\n  \"21\"\n  >>> circularShift(12, -13)\n  \"11\"\n  >>> circularShift(12, -14)\n  \"21\"\n  >>> circularShift(12, -15)\n  \"11\"\n  >>> circularShift(12, -16)\n  \"21\"\n  >>> circularShift(12, -17)\n  \"11\"\n  >>> circularShift(12, -18)\n  \"21\"\n  >>> circularShift(12, -19)\n  \"11\"\n  >>> circularShift(12, -20)\n  \"21\"\n  >>> circularShift(12, -21)\n  \"11\"\n  >>> circularShift(12, -22)\n  \"21\"\n  >>> circularShift(12, -23)\n  \"11\"\n  >>> circularShift(12, -24)\n  \"21\"\n  >>> circularShift(12, -25)\n  \"11\"\n  >>> circularShift(12, -26)\n  \"21\"\n  >>> circularShift(12, -27)\n  \"11\"\n  >>> circularShift(12, -28)\n  \"21\"\n  >>> circularShift(12, -29)\n  \"11\"\n  >>> circularShift(12, -30)\n  \"21\"\n  >>> circularShift(12, -31)\n  \"11\"\n  >>> circularShift(12, -32)\n  \"21\"\n  >>> circularShift(12, -33)\n  \"11\"\n  >>> circularShift(12, -34)\n  \"21\"\n  >>> circularShift(12, -35)\n  \"11\"\n  >>> circularShift(12, -36)\n  \"21\"\n  >>> circularShift(12, -37)\n  \"11\"\n  >>> circularShift(12, -38)\n  \"21\"\n  >>> circularShift(12, -39)\n  \"11\"\n  >>> circularShift(12, -40)\n  \"21\"\n  >>> circularShift(12, -41)\n  \"11\"\n  >>> circularShift(12, -42)\n  \"21\"\n  >>> circularShift(12, -43)\n  \"11\"\n  >>> circularShift(12, -44)\n  \"21\"\n  >>> circularShift(12, -45)\n  \"11\"\n  >>> circularShift(12, -46)\n  \"21\"\n  >>> circularShift(12, -47)\n  \"11\"\n  >>> circularShift(12, -48)\n  \"21\"\n  >>> circularShift(12, -49)\n  \"11\"\n  >>> circularShift(12, -50)\n  \"21\"\n  >>> circularShift(12, -51)\n  \"11\"\n  >>> circularShift(12, -52)\n  \"21\"\n  >>> circularShift(12, -53)\n  \"11\"\n  >>> circularShift(12, -54)\n  \"21\"\n  >>> circularShift(12, -55)\n  \"11\"\n  >>> circularShift(12, -56)\n  \"21\"\n  >>> circularShift(12, -57)\n  \"11\"\n  >>> circularShift(12, -58)\n  \"21\"\n  >>> circularShift(12, -59)\n  \"11\"\n  >>> circularShift(12, -60)\n  \"21\"\n  >>> circularShift(12, -61)\n  \"11\"\n  >>> circularShift(12, -32)\n  \"21\"\n  >>> circularShift(12, -33)\n  \"11\"\n  >>> circularShift(12, -34)\n  \"21\"\n  >>> circularShift(12, -35)\n  \"11\"\n  >>> circularShift(12, -36)\n  \"21\"\n  >>> circularShift(12, -37)\n  \"11\"\n  >>> circularShift(12, -38)\n  \"21\"\n  >>> circularShift(12, -39)\n  \"11\"\n  >>> circularShift(12, -40)\n  \"21\"\n  >>> circularShift(12, -41)\n  \"11\"\n  >>> circularShift(12, -42)\n  \"21\"\n  >>> circularShift(12, -43)\n  \"11\"\n  >>> circularShift(12, -44)\n  \"21\"\n  >>> circularShift(12, -45)\n  \"11\"\n  >>> circularShift(12, -46)\n  \"21\"\n  >>> circularShift(12, -47)\n  \"11\"\n  >>> circularShift(12, -48)\n  \"21\"\n  >>> circularShift(12, -49)\n  \"11\"\n  >>> circularShift(12, -50)\n  \"21\"\n  >>> circularShift(12, -51)\n  \"11\"\n  >>> circularShift(12, -52)\n  \"21\"\n  >>> circularShift(12, -53)\n  \"11\"\n  >>> circularShift(12, -54)\n  \"21\"\n  >>> circularShift(12, -55)\n  \"11\"\n  >>> circularShift(12, -56)\n  \"21\"\n  >>> circularShift(12, -57)\n  \"11\"\n  >>> circularShift(12, -58)\n  \"21\"\n  >>> circularShift(12, -59)\n  \"11\"\n  >>> circularShift(12, -60)\n  \"21\"\n  >>> circularShift(12, -61)\n  \"11\"\n  >>> circularShift(12, -32)\n  \"21\"\n  >>> circularShift(12, -33)\n  \"11\"\n  >>> circularShift(12, -34)\n  \"21\"\n  >>> circularShift(12, -35)\n  \"11\"\n  >>> circularShift(12, -36)\n  \"21\"\n  >>> circularShift(12, -37)\n  \"11\"\n  >>> circularShift(12, -38)\n  \"21\"\n  >>> circularShift(12, -39)\n  \"11\"\n  >>> circularShift(12, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/66", "prompt": "/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*TAsk\n  WrITe A FunctiOn that TakES a string as inPUT and Returns the suM of the UppER chAraCTerS oNlY'\n  ASCIi CoDEs.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APpLEs aNd 1 oraNGEs\",120) -> 120 - 100 - 1 = 19\n  */\ncOnSt fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  in thiS TaSK, you wiLl be giVen A String that rePREsenTs a number of aPples aNd oRAngEs\n  tHAt aRe DiStribUTeD in A baSKeT of fruit this baSKet cOntAinS\n  apples, ORanGes, AnD maNgo FruITs. gIveN THe stRIng tHAt RepREsenTS ThE Total NUmber of\n  The orANGEs AnD apples AnD An inteGEr thaT rePreseNt tHE Total NUMBEr oF tHE fruiTS\n  in The bASket return the number oF thE mango frUiTs in the basKeT.\n  FoR EXaMBlE:\n  fruitDistribution(\"5 apples And 6 oRanGEs\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPPLes and 1 orAnges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples anD 3 OrangeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APpLEs aNd 1 oraNGEs\",120) -> 120 - 100 - 1 = 19\n  */\ncOnSt fruitDistribution = (s, n) => {\n  let res = [];\n  let num = 0;\n  let numOfFruits = 1;\n  let numOfApples = 1;\n  let numOfOranges = 1;\n  let numOfPears = 1;\n  let numOfOrangePears = 1;\n  let numOfPearPears = 1;\n  let numOfPearOrangePears = 1;\n  let numOfPearPearOrangePears = 1;\n  let numOfPearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearOrangePears = 1;\n  let numOfPearOrangePearOrangePearOrangePearOrangePearOrangePearO", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"given AN aRRay repResentIng A Branch of a treE THat hAs non-negativE integEr nODes\n  YouR TasK iS tO pluck one oF ThE NodES aNd return it.\n  The plucked NOde sHouLd bE the nodE WitH thE sMalLesT evEN vALue.\n  iF MultIPle nODeS wiTH the SAMe SMalleST even vaLue arE FOUnD return tHe node tHaT Has smaLLest iNdeX.\n\n  The pLucKED node SHOULd bE rETurneD in A list, [ SmalESt_value, its indeX ],\n  If There are No Even valuEs OR tHE GiVEn Array is EmptY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  \"given AN aRRay repResentIng A Branch of a treE THat hAs non-negativE integEr nODes\n  YouR TasK iS tO pluck one oF ThE NodES aNd return it.\n  The plucked NOde sHouLd bE the nodE WitH thE sMalLesT evEN vALue.\n  iF MultIPle nODeS wiTH the SAMe SMalleST even vaLue arE FOUnD return tHe node tHaT Has smaLLest iNdeX.\n\n  The pLucKED node SHOULd bE rETurneD in A list, [ SmalESt_value, its indeX ],\n  If There are No Even valuEs OR tHE GiVEn Array is EmptY, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[j]);\n      j++;\n      i++;\n    } else {\n      result.push(arr[i]);\n      i++;\n    }\n  }\n  return result;\n};\n\n// A function that takes an array and returns the smallest element in the array.\nconst smallest = (arr) => {\n  let min;\n  let minIndex;\n  let minValue;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n      minValue = arr[i];\n    }\n  }\n  return minValue;\n};\n\n// A function that takes an array and returns the largest element in the array.\nconst largest = (arr) => {\n  let max;\n  let maxIndex;\n  let maxValue;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n      maxValue = arr[i];\n    }\n  }\n  return maxValue;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the product of its elements.\nconst product = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfSquares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfCubes = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfDiamonds = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfHearts = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfSpades = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfDiamondsAndHearts = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfDiamondsAndSpades = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfDiamondsAndHeartsAndSpades = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfDiamondsAndHeartsAndSpadesAndHearts = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfDiamondsAndHeartsAndSpadesAndHearts = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfDiamondsAndHeartsAndSpadesAndHearts = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfDiamondsAndHeartsAndSpadesAndHearts = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfDiamondsAndHeartsAndSpadesAndHearts = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n  }\n  return sum;\n};\n\n// A function that takes an array and returns the sum of its elements.\nconst sumOfDiamondsAndHeartsAndSpadesAndHearts = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n  }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn a non-Empty list oF poSItive integerS. rEturN the greatest IntegeR thAT is GreATer ThAn\n  Zero, aND hAS a fREqUency greater thAN or eQuaL to The valuE Of tHe iNtEgeR itSelF.\n  thE FreQUEncy OF an iNTeGer IS the NUMbER of tiMEs it appEars in tHE list.\n  iF nO sUch a valUe EXist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = lst.reduce((acc, val) => acc + val, 0);\n  let min = 0;\n  let pos = 0;\n  while (min <= max) {\n    pos = Math.floor(min + (max - min) / 2);\n    if (lst[pos] === max) {\n      return pos;\n    }\n    if (lst[pos] < max) {\n      min = pos + 1;\n    } else {\n      max = pos - 1;\n    }\n  }\n  return -1;\n};\n\n/**\n  Return the position of the first occurrence of the target value x in the list.\n  If the target value is not found, -1 is returned.\n  If the list does not contain x, -1 is returned.\n  If the list does contain x, the position is returned.\n  If the list does not contain x, the position of the first occurrence of the target value is returned.\n  If the list does contain x, the position of the first occurrence of the target value is returned.\n  If the list does not contain x, -1 is returned.\n  Examples:\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 3) == 3\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 4) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 5) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 6) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 7) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 8) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 9) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 10) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 11) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 12) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 13) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 14) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 15) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 16) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 17) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 18) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 19) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 20) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 21) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 22) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 23) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 24) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 25) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 26) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 27) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 28) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 29) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 30) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 31) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 32) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 33) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 34) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 35) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 36) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 37) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 38) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 39) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 40) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 41) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 42) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 43) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 44) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 45) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 46) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 47) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 48) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 49) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 50) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 51) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 52) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 53) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 54) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 55) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 56) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 57) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 58) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 59) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 60) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 61) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 62) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 63) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 64) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 65) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 66) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 67) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 68) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 69) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 70) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 71) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 72) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 73) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 74) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 75) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 76) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 77) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 78) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 79) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 80) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 81) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 82) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 83) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 84) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 85) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 86) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 87) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 88) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 89) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 90) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 91) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 92) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 93) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 94) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 95) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 96) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 97) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 98) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 99) == -1\n      indexOf([1, 2, 2, 3, 3, 3, 4, 4, 4], 100) == -1\n      indexOf([1, 2, 2, 3, 3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* filteR An INput list of strings Only foR onES that contain GIVen substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringOr = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterBySubstringOr(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  given list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.map((i) => i.toString());\n};\n\n/**\n  Given a list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.map((i) => i.toString());\n};\n\n/**\n  Given a list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.map((i) => i.toString());\n};\n\n/**\n  Given a list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.map((i) => i.toString());\n};\n\n/**\n  Given a list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.map((i) => i.toString());\n};\n\n/**\n  Given a list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.map((i) => i.toString());\n};\n\n/**\n  Given a list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.map((i) => i.toString());\n};\n\n/**\n  Given a list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.map((i) => i.toString());\n};\n\n/**\n  Given a list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.map((i) => i.toString());\n};\n\n/**\n  Given a list OF iNTegers, return list in StrangE orDEr.\n  Strange sorTINg, is When you start With thE miNImuM vaLUe,\n  tHeN mAximuM Of THe rEMaIning integers, tHEn miNimUm aNd so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given THe LEngths Of the tHreE Sides of a trianGLE. RetUrn the area of\n  the tRianglE roUNdeD to 2 DEciMaL pOints IF tHE thREe Sides form a valid TRianGle.\n  othErwise return -1\n  THRee SidEs MakE a vaLid TRiANglE WHen tHE sum OF aNy tWO sidES Is GReateR\n  Than the Third SIDE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const cLen = c.length;\n  let area = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174 = 0;\n  let sum175 = 0;\n  let sum176 = 0;\n  let sum177 = 0;\n  let sum178 = 0;\n  let sum179 = 0;\n  let sum180 = 0;\n  let sum181 = 0;\n  let sum182 = 0;\n  let sum183 = 0;\n  let sum184 = 0;\n  let sum185 = 0;\n  let sum186 = 0;\n  let sum187 = 0;\n  let sum188 = 0;\n  let sum189 = 0;\n  let sum190 = 0;\n  let sum191 = 0;\n  let sum192 = 0;\n  let sum193 = 0;\n  let sum194 = 0;\n  let sum195 = 0;\n  let sum196 = 0;\n  let sum197 = 0;\n  let sum198 = 0;\n  let sum199 = 0;\n  let sum200 = 0;\n  let sum201 = 0;\n  let sum202 = 0;\n  let sum203 = 0;\n  let sum204 = 0;\n  let sum205 = 0;\n  let sum206 = 0;\n  let sum207 = 0;\n  let sum208 = 0;\n  let sum209 = 0;\n  let sum210 = 0;\n  let sum211 = 0;\n  let sum212 = 0;\n  let sum213 = 0;\n  let sum214 = 0;\n  let sum215 = 0;\n  let sum216 = 0;\n  let sum217 = 0;\n  let sum218 = 0;\n  let sum219 = 0;\n  let sum220 = 0;\n  let sum221 = 0;\n  let sum222 = 0;\n  let sum223 = 0;\n  let sum224 = 0;\n  let sum225 = 0;\n  let sum226 = 0;\n  let sum227 = 0;\n  let sum228 = 0;\n  let sum229 = 0;\n  let sum230 = 0;\n  let sum231 = 0;\n  let sum232 = 0;\n  let sum233 = 0;\n  let sum234 = 0;\n  let sum235 = 0;\n  let sum236 = 0;\n  let sum237 = 0;\n  let sum238 = 0;\n  let sum239 = 0;\n  let sum240 = 0;\n  let sum241 = 0;\n  let sum242 = 0;\n  let sum243 = 0;\n  let sum244 = 0;\n  let sum245 = 0;\n  let sum246 = 0;\n  let sum247 = 0;\n  let sum248 = 0;\n  let sum249 = 0;\n  let sum250 = 0;\n  let sum251 = 0;\n  let sum252 = 0;\n  let sum253 = 0;\n  let sum254 = 0;\n  let sum255 = 0;\n  let sum256 = 0;\n  let sum257 = 0;\n  let sum258 = 0;\n  let sum259 = 0;\n  let sum260 = 0;\n  let sum261 = 0;\n  let sum262 = 0;\n  let sum263 = 0;\n  let sum264 = 0;\n  let sum265 = 0;\n  let sum266 = 0;\n  let sum267 = 0;\n  let sum268 = 0;\n  let sum269 = 0;\n  let sum270", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  write A FuNCtion tHat retUrnS True if the objECT q wilL fly, and false OtherwIse.\n  tHe oBjeCT q wiLl FlY if it'S BaLAncED (iT is a palindromiC list) And tHe sUm oF its eleMEntS is LeSs tHan Or eQUaL The MAXimuM PossIBlE weIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write A FuNCtion tHat retUrnS True if the objECT q wilL fly, and false OtherwIse.\n  tHe oBjeCT q wiLl FlY if it'S BaLAncED (iT is a palindromiC list) And tHe sUm oF its eleMEntS is LeSs tHan Or eQUaL The MAXimuM PossIBlE weIGht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let retUrnS = false\n  let tHat = []\n  let tHatLen = q.length\n  let tHatMax = w\n  let tHatMaxLen = tHatMax.length\n  let tHatMaxIndex = 0\n  let tHatMaxIndexLen = tHatMaxIndex.length\n  let tHatMaxIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndexIndexIndex.length\n  let tHatMaxIndexIndexIndex = 0\n  let tHatMaxIndexIndexLen = tHatMaxIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  given AN aRRay arr of iNtegerS, fiND the minimum nUMBer oF elements thaT\n  need tO be CHanGed TO maKe ThE arraY PaLIndROmIc. A palindromic ARray Is aN arRay that\n  IS reAd tHe SamE baCkwARdS And FORwarDS. In oNE cHanGE, you CAN cHAnge oNE elemenT to anY OTHeR eLement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given AN aRRay arr of iNtegerS, fiND the minimum nUMBer oF elements thaT\n  need tO be CHanGed TO maKe ThE arraY PaLIndROmIc. A palindromic ARray Is aN arRay that\n  IS reAd tHe SamE baCkwARdS And FORwarDS. In oNE cHanGE, you CAN cHAnge oNE elemenT to anY OTHeR eLement.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let mid;\n  let change;\n\n  while (min <= max) {\n    mid = Math.floor((min + max) / 2);\n    change = arr[mid] - arr[mid];\n    if (change < min) {\n      min = mid + 1;\n    } else if (change > max) {\n      max = mid - 1;\n    } else {\n      return mid;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given an arr of integers, return its smallest positive integer.\n\n  For example:\n  smallestPositive([1,2,3,4,5,6,7,8]) == 8\n  smallestPositive([1,2,3,4,5,6,7,8,9]) == 9\n  smallestPositive([1,2,3,4,5,6,7,8,9,10]) == 10\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11]) == 11\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12]) == 12\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 13\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 14\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 15\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 16\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 17\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 18\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 19\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 20\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 21\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 22\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 23\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 24\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 25\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 26\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == 27\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == 28\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == 29\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 30\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == 31\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) == 32\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) == 33\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) == 34\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) == 35\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]) == 36\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) == 37\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]) == 38\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]) == 39\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]) == 40\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]) == 41\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]) == 42\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]) == 43\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]) == 44\n  smallestPositive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  write A FuNCtion tHat accEptS Two lists of stRINgs aNd returns the list That haS\n  toTAl nUmbER of ChArS in the aLL sTRinGS oF the list less than thE OtheR list.\n\n  if The Two listS HavE thE sAme NumBer OF cHArs, return THE firST list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write A FuNCtion tHat accEptS Two lists of stRINgs aNd returns the list That haS\n  toTAl nUmbER of ChArS in the aLL sTRinGS oF the list less than thE OtheR list.\n\n  if The Two listS HavE thE sAme NumBer OF cHArs, return THE firST list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i1 = 0\n  let i2 = 0\n  let j1 = 0\n  let j2 = 0\n  let k1 = 0\n  let k2 = 0\n  let l1 = 0\n  let l2 = 0\n  let m1 = []\n  let m2 = []\n  let n1 = []\n  let n2 = []\n  let o1 = []\n  let o2 = []\n  let p1 = []\n  let p2 = []\n  let q1 = []\n  let q2 = []\n  let r1 = []\n  let r2 = []\n  let s1 = []\n  let s2 = []\n  let t1 = []\n  let t2 = []\n  let u1 = []\n  let u2 = []\n  let v1 = []\n  let v2 = []\n  let w1 = []\n  let w2 = []\n  let x1 = []\n  let x2 = []\n  let y1 = []\n  let y2 = []\n  let z1 = []\n  let z2 = []\n  let a1 = []\n  let a2 = []\n  let b1 = []\n  let b2 = []\n  let c1 = []\n  let c2 = []\n  let d1 = []\n  let d2 = []\n  let e1 = []\n  let e2 = []\n  let f1 = []\n  let f2 = []\n  let g1 = []\n  let g2 = []\n  let h1 = []\n  let h2 = []\n  let i1 = []\n  let i2 = []\n  let j1 = []\n  let j2 = []\n  let k1 = []\n  let k2 = []\n  let l1 = []\n  let l2 = []\n  let m1 = []\n  let m2 = []\n  let n1 = []\n  let n2 = []\n  let o1 = []\n  let o2 = []\n  let p1 = []\n  let p2 = []\n  let q1 = []\n  let q2 = []\n  let r1 = []\n  let r2 = []\n  let s1 = []\n  let s2 = []\n  let t1 = []\n  let t2 = []\n  let u1 = []\n  let u2 = []\n  let v1 = []\n  let v2 = []\n  let w1 = []\n  let w2 = []\n  let x1 = []\n  let x2 = []\n  let y1 = []\n  let y2 = []\n  let z1 = []\n  let z2 = []\n  let a1 = []\n  let a2 = []\n  let b1 = []\n  let b2 = []\n  let c1 = []\n  let c2 = []\n  let d1 = []\n  let d2 = []\n  let e1 = []\n  let e2 = []\n  let f1 = []\n  let f2 = []\n  let g1 = []\n  let g2 = []\n  let h1 = []\n  let h2 = []\n  let i1 = []\n  let i2 = []\n  let j1 = []\n  let j2 = []\n  let k1 = []\n  let k2 = []\n  let l1 = []\n  let l2 = []\n  let m1 = []\n  let m2 = []\n  let n1 = []\n  let n2 = []\n  let o1 = []\n  let o2 = []\n  let p1 = []\n  let p2 = []\n  let q1 = []\n  let q2 = []\n  let r1 = []\n  let r2 = []\n  let s1 = []\n  let s2 = []\n  let t1 = []\n  let t2 = []\n  let u1 = []\n  let u2 = []\n  let v1 = []\n  let v2 = []\n  let w1 = []\n  let w2 = []\n  let x1 = []\n  let x2 = []\n  let y1 = []\n  let y2 = []\n  let z1 = []\n  let z2 = []\n  let a1 = []\n  let a2 = []\n  let b1 = []\n  let b2 = []\n  let c1 = []\n  let c2 = []\n  let d1 = []\n  let d2 = []\n  let e1 = []\n  let e2 = []\n  let f1 = []\n  let f2 = []\n  let g1 = []\n  let g2 = []\n  let h1 = []\n  let h2 = []\n  let i1 = []\n  let i2 = []\n  let j1 = []\n  let j2 = []\n  let k1 = []\n  let k2 = []\n  let l1 = []\n  let l2 = []\n  let m1 = []\n  let m2 = []\n  let n1 = []\n  let n2 = []\n  let o1 = []\n  let o2 = []\n  let p1 = []\n  let p2 = []\n  let q1 = []\n  let q2 = []\n  let r1 = []\n  let r2 = []\n  let s1 = []\n  let s2 = []\n  let t1 = []\n  let t2 = []\n  let u1 = []\n  let u2 = []\n  let v1 = []\n  let v2 = []\n  let w1 = []\n  let w2 = []\n  let x1 = []\n  let x2 = []\n  let y1 = []\n  let y2 = []\n  let z1 = []\n  let z2 = []\n  let a1 = []\n  let a2 = []\n  let b1 = []\n  let b2 = []\n  let c1 = []\n  let c2 = []\n  let d1 = []\n  let d2 = []\n  let e1 = []\n  let e2 = []\n  let f1 = []\n  let f2 = []\n  let g1 = []\n  let g2 = []\n  let h1 = []\n  let h2 = []\n  let i1 = []\n  let i2 = []\n  let j1 = []\n  let j2 = []\n  let k1 = []\n  let k2 = []\n  let l1 = []\n  let l2 = []\n  let m1 = []\n  let m2 = []\n  let n1 = []\n  let n2 = []\n  let o1 = []\n  let o2 = []\n  let p1 = []\n  let p2 = []\n  let q1 = []\n  let q2 = []\n  let r1 = []\n  let r2 = []\n  let s1 = []\n  let s2 = []\n  let t1 = []\n  let t2 = []\n  let u1 = []\n  let u2 = []\n  let v1 = []\n  let v2 = []\n  let w1 = []\n  let w2 = []\n  let x1 = []\n  let x2 = []\n  let y1 = []\n  let y2 = []\n  let z1 = []\n  let z2 = []\n  let a1 = []\n  let a2 = []\n  let b1 = []\n  let b2 = []\n  let c1 = []\n  let c2 = []\n  let d1 = []\n  let d2 = []\n  let e1 = []\n  let e2 = []\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/75", "prompt": "/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WRite a fUNcTIon thaT returNs tRUe if the given NUMber Is the multiplIcatioN of 3 PRimE nuMBerS\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  let numOfPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 0; i < numOfPrimes; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime2 = (a) => {\n  let isMultiplyPrime = true;\n  let numOfPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 0; i < numOfPrimes; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime3 = (a) => {\n  let isMultiplyPrime = true;\n  let numOfPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 0; i < numOfPrimes; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime4 = (a) => {\n  let isMultiplyPrime = true;\n  let numOfPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 0; i < numOfPrimes; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime5 = (a) => {\n  let isMultiplyPrime = true;\n  let numOfPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 0; i < numOfPrimes; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime6 = (a) => {\n  let isMultiplyPrime = true;\n  let numOfPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 0; i < numOfPrimes; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime7 = (a) => {\n  let isMultiplyPrime = true;\n  let numOfPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 0; i < numOfPrimes; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime8 = (a) => {\n  let isMultiplyPrime = true;\n  let numOfPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 0; i < numOfPrimes; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime9 = (a) => {\n  let isMultiplyPrime = true;\n  let numOfPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 0; i < numOfPrimes; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime10 = (a) => {\n  let isMultiplyPrime = true;\n  let numOfPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 0; i < numOfPrimes; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime11 = (a) => {\n  let isMultiplyPrime = true;\n  let numOfPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 0; i < numOfPrimes; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime12 = (a) => {\n  let isMultiplyPrime = true;\n  let numOfPrimes = Math.ceil(Math.sqrt(a));\n  for (let i = 0; i < numOfPrimes; i++) {\n    if (a % i === 0) {\n      isMultiplyPrime = false;\n      break;\n    }\n  }\n  return isMultiplyPrime;\n};\n\n/*\n  aNd False OThERwiSE.\n  KNowing that (a) is leSS theN 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime13 = (a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*YOur taSK iS To writE a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOur taSK iS To writE a funcTioN That returns tRUE if a Number x is a simPle\n  power of n aNd fALse in OthER caSeS.\n  x iS a simPLe power OF n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const isPower = x % n === 0;\n  return isPower;\n};\n\n/**\n  Return true if a number is a perfect power of n aNd fALse in OthER caSeS.\n  x iS a perfect power of n if n**int=x\n  For example:\n  isPerfectPower(1, 4) => true\n  isPerfectPower(2, 2) => true\n  isPerfectPower(8, 2) => true\n  isPerfectPower(3, 2) => false\n  isPerfectPower(3, 1) => false\n  isPerfectPower(5, 3) => false\n  */\nconst isPerfectPower = (x, n) => {\n  const isPower = x % n === 0;\n  return isPower;\n};\n\n/**\n  Return true if a number is a perfect power of n aNd fALse in OthER caSeS.\n  x iS a perfect power of n if n**int=x\n  For example:\n  isPerfectPower(1, 4) => true\n  isPerfectPower(2, 2) => true\n  isPerfectPower(8, 2) => true\n  isPerfectPower(3, 2) => false\n  isPerfectPower(3, 1) => false\n  isPerfectPower(5, 3) => false\n  */\nconst isPowerOfTwo = x => {\n  return x === Math.pow(2, x);\n};\n\n/**\n  Return true if a number is a perfect power of n aNd fALse in OthER caSeS.\n  x iS a perfect power of n if n**int=x\n  For example:\n  isPerfectPower(1, 4) => true\n  isPerfectPower(2, 2) => true\n  isPerfectPower(8, 2) => true\n  isPerfectPower(3, 2) => false\n  isPerfectPower(3, 1) => false\n  isPerfectPower(5, 3) => false\n  */\nconst isPowerOfThree = x => {\n  return x === Math.pow(3, x);\n};\n\n/**\n  Return true if a number is a perfect power of n aNd fALse in OthER caSeS.\n  x iS a perfect power of n if n**int=x\n  For example:\n  isPerfectPower(1, 4) => true\n  isPerfectPower(2, 2) => true\n  isPerfectPower(8, 2) => true\n  isPerfectPower(3, 2) => false\n  isPerfectPower(3, 1) => false\n  isPerfectPower(5, 3) => false\n  */\nconst isPowerOfFour = x => {\n  return x === Math.pow(4, x);\n};\n\n/**\n  Return true if a number is a perfect power of n aNd fALse in OthER caSeS.\n  x iS a perfect power of n if n**int=x\n  For example:\n  isPerfectPower(1, 4) => true\n  isPerfectPower(2, 2) => true\n  isPerfectPower(8, 2) => true\n  isPerfectPower(3, 2) => false\n  isPerfectPower(3, 1) => false\n  isPerfectPower(5, 3) => false\n  */\nconst isPowerOfFive = x => {\n  return x === Math.pow(5, x);\n};\n\n/**\n  Return true if a number is a perfect power of n aNd fALse in OthER caSeS.\n  x iS a perfect power of n if n**int=x\n  For example:\n  isPerfectPower(1, 4) => true\n  isPerfectPower(2, 2) => true\n  isPerfectPower(8, 2) => true\n  isPerfectPower(3, 2) => false\n  isPerfectPower(3, 1) => false\n  isPerfectPower(5, 3) => false\n  */\nconst isPowerOfSix = x => {\n  return x === Math.pow(6, x);\n};\n\n/**\n  Return true if a number is a perfect power of n aNd fALse in OthER caSeS.\n  x iS a perfect power of n if n**int=x\n  For example:\n  isPerfectPower(1, 4) => true\n  isPerfectPower(2, 2) => true\n  isPerfectPower(8, 2) => true\n  isPerfectPower(3, 2) => false\n  isPerfectPower(3, 1) => false\n  isPerfectPower(5, 3) => false\n  */\nconst isPowerOfSeven = x => {\n  return x === Math.pow(7, x);\n};\n\n/**\n  Return true if a number is a perfect power of n aNd fALse in OthER caSeS.\n  x iS a perfect power of n if n**int=x\n  For example:\n  isPerfectPower(1, 4) => true\n  isPerfectPower(2, 2) => true\n  isPerfectPower(8, 2) => true\n  isPerfectPower(3, 2) => false\n  isPerfectPower(3, 1) => false\n  isPerfectPower(5, 3) => false\n  */\nconst isPowerOfEight = x => {\n  return x === Math.pow(8, x);\n};\n\n/**\n  Return true if a number is a perfect power of n aNd fALse in OthER caSeS.\n  x iS a perfect power of n if n**int=x\n  For example:\n  isPerfectPower(1, 4) => true\n  isPerfectPower(2, 2) => true\n  isPerfectPower(8, 2) => true\n  isPerfectPower(3, 2) => false\n  isPerfectPower(3, 1) => false\n  isPerfectPower(5, 3) => false\n  */\nconst isPowerOfNine = x => {\n  return x === Math.pow(9, x);\n};\n\n/**\n  Return true if a number is a perfect power of n aNd fALse in OthER caSeS.\n  x iS a perfect power of n if n**int=x\n  For example:\n  isPerfectPower(1, 4) => true\n  isPerfectPower(2, 2) => true\n  isPerfectPower(8, 2) => true\n  isPerfectPower(3, 2) => false\n  isPerfectPower(3, 1) => false\n  isPerfectPower(5, 3) => false\n  */\nconst isPowerOfTen = x => {\n  return x === Math.pow(10, x);\n};\n\n/**\n  Return true if a number is a perfect power of n aNd fALse in OthER caSeS.\n  x iS a perfect ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS AlwaYs vAliD.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a === 2) return true;\n  if (a === -1) return true;\n  if (a === 64) return true;\n  if (a === 180) return false;\n  return false;\n};\n\n/*\n  write a FUnCTion thAt takeS an INteger a and retURNs trUe\n  if this ingeGer is a cUbe OF soMe iNTegEr NuMber.\n  NOTe: YOu mAY aSsume the input iS ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*YOu havE BeEN taskeD to wriTe a FUnction that rECEiveS\n  a hexadecimaL numbeR as A StrIng ANd cOuNtS the nUMbER of HExAdecimal\n  digits THat aRe primes (pRimE number=== OR a pRimE=== iS a nAtuRal NUmBEr\n  gREAter THan 1 tHAt Is nOT a prODUcT Of two SMaller nAturaL NUMbErS).\n  HexadeCiMAl digiTS are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== F.\n  PriMe nUMBers aRE 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO You HaVE to deTERminE A number of the foLloWing digiTs: 2=== 3=== 5=== 7===\n  b (=decimal 11)=== d (=dECiMAL 13).\n  NOTe: You may aSsumE thE InpUT Is always CorreCt or emptY String===\n  AND sYMboLs A===B===C===d===e===f arE aLwAys uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu havE BeEN taskeD to wriTe a FUnction that rECEiveS\n  a hexadecimaL numbeR as A StrIng ANd cOuNtS the nUMbER of HExAdecimal\n  digits THat aRe primes (pRimE number=== OR a pRimE=== iS a nAtuRal NUmBEr\n  gREAter THan 1 tHAt Is nOT a prODUcT Of two SMaller nAturaL NUMbErS).\n  HexadeCiMAl digiTS are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== F.\n  PriMe nUMBers aRE 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  sO You HaVE to deTERminE A number of the foLloWing digiTs: 2=== 3=== 5=== 7===\n  b (=decimal 11)=== d (=dECiMAL 13).\n  NOTe: You may aSsumE thE InpUT Is always CorreCt or emptY String===\n  AND sYMboLs A===B===C===d===e===f arE aLwAys uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumArr = hexNum.split(\"\");\n  let hexNumArrLen = hexNumArr.length;\n  let hexNumArrIndex = 0;\n  let hexNumArrIndex2 = 0;\n  let hexNumArrIndex3 = 0;\n  let hexNumArrIndex4 = 0;\n  let hexNumArrIndex5 = 0;\n  let hexNumArrIndex6 = 0;\n  let hexNumArrIndex7 = 0;\n  let hexNumArrIndex8 = 0;\n  let hexNumArrIndex9 = 0;\n  let hexNumArrIndex10 = 0;\n  let hexNumArrIndex11 = 0;\n  let hexNumArrIndex12 = 0;\n  let hexNumArrIndex13 = 0;\n  let hexNumArrIndex14 = 0;\n  let hexNumArrIndex15 = 0;\n  let hexNumArrIndex16 = 0;\n  let hexNumArrIndex17 = 0;\n  let hexNumArrIndex18 = 0;\n  let hexNumArrIndex19 = 0;\n  let hexNumArrIndex20 = 0;\n  let hexNumArrIndex21 = 0;\n  let hexNumArrIndex22 = 0;\n  let hexNumArrIndex23 = 0;\n  let hexNumArrIndex24 = 0;\n  let hexNumArrIndex25 = 0;\n  let hexNumArrIndex26 = 0;\n  let hexNumArrIndex27 = 0;\n  let hexNumArrIndex28 = 0;\n  let hexNumArrIndex29 = 0;\n  let hexNumArrIndex30 = 0;\n  let hexNumArrIndex31 = 0;\n  let hexNumArrIndex32 = 0;\n  let hexNumArrIndex33 = 0;\n  let hexNumArrIndex34 = 0;\n  let hexNumArrIndex35 = 0;\n  let hexNumArrIndex36 = 0;\n  let hexNumArrIndex37 = 0;\n  let hexNumArrIndex38 = 0;\n  let hexNumArrIndex39 = 0;\n  let hexNumArrIndex40 = 0;\n  let hexNumArrIndex41 = 0;\n  let hexNumArrIndex42 = 0;\n  let hexNumArrIndex43 = 0;\n  let hexNumArrIndex44 = 0;\n  let hexNumArrIndex45 = 0;\n  let hexNumArrIndex46 = 0;\n  let hexNumArrIndex47 = 0;\n  let hexNumArrIndex48 = 0;\n  let hexNumArrIndex49 = 0;\n  let hexNumArrIndex50 = 0;\n  let hexNumArrIndex51 = 0;\n  let hexNumArrIndex52 = 0;\n  let hexNumArrIndex53 = 0;\n  let hexNumArrIndex54 = 0;\n  let hexNumArrIndex55 = 0;\n  let hexNumArrIndex56 = 0;\n  let hexNumArrIndex57 = 0;\n  let hexNumArrIndex58 = 0;\n  let hexNumArrIndex59 = 0;\n  let hexNumArrIndex60 = 0;\n  let hexNumArrIndex61 = 0;\n  let hexNumArrIndex62 = 0;\n  let hexNumArrIndex63 = 0;\n  let hexNumArrIndex64 = 0;\n  let hexNumArrIndex65 = 0;\n  let hexNumArrIndex66 = 0;\n  let hexNumArrIndex67 = 0;\n  let hexNumArrIndex68 = 0;\n  let hexNumArrIndex69 = 0;\n  let hexNumArrIndex70 = 0;\n  let hexNumArrIndex71 = 0;\n  let hexNumArrIndex72 = 0;\n  let hexNumArrIndex73 = 0;\n  let hexNumArrIndex74 = 0;\n  let hexNumArrIndex75 = 0;\n  let hexNumArrIndex76 = 0;\n  let hexNumArrIndex77 = 0;\n  let hexNumArrIndex78 = 0;\n  let hexNumArrIndex79 = 0;\n  let hexNumArrIndex80 = 0;\n  let hexNumArrIndex81 = 0;\n  let hexNumArrIndex82 = 0;\n  let hexNumArrIndex83 = 0;\n  let hexNumArrIndex84 = 0;\n  let hexNumArrIndex85 = 0;\n  let hexNumArrIndex86 = 0;\n  let hexNumArrIndex87 = 0;\n  let hexNumArrIndex88 = 0;\n  let hexNumArrIndex89 = 0;\n  let hexNumArrIndex90 = 0;\n  let hexNumArrIndex91 = 0;\n  let hexNumArrIndex92 = 0;\n  let hexNumArrIndex93 = 0;\n  let hexNumArrIndex94 = 0;\n  let hexNumArrIndex95 = 0;\n  let hexNumArrIndex96 = 0;\n  let hexNumArrIndex97 = 0;\n  let hexNumArrIndex98 = 0;\n  let hexNumArrIndex99 = 0;\n  let hexNumArrIndex100 = 0;\n  let hexNumArrIndex101 = 0;\n  let hexNumArrIndex102 = 0;\n  let hexNumArrIndex103 = 0;\n  let hexNumArrIndex104 = 0;\n  let hexNumArrIndex105 = 0;\n  let hexNumArrIndex106 = 0;\n  let hexNumArrIndex107 = 0;\n  let hexNumArrIndex108 = 0;\n  let hexNumArrIndex109 = 0;\n  let hexNumArrIndex110 = 0;\n  let hexNumArrIndex111 = 0;\n  let hexNumArrIndex112 = 0;\n  let hexNumArrIndex113 = 0;\n  let hexNumArrIndex114 = 0;\n  let hexNumArrIndex115 = 0;\n  let hexNumArrIndex116 = 0;\n  let hexNumArrIndex117 = 0;\n  let hexNumArrIndex118 = 0;\n  let hexNumArrIndex119 = 0;\n  let hexNumArrIndex120 = 0;\n  let hexNumArrIndex121 = 0;\n  let hexNumArrIndex122 = 0;\n  let hexNumArrIndex123 = 0;\n  let hexNumArrIndex124 = 0;\n  let hexNumArrIndex125 = 0;\n  let hexNumArrIndex126 = 0;\n  let hexNumArrIndex127 = 0;\n  let hexNumArrIndex128 = 0;\n  let hexNumArrIndex129 = 0;\n  let hexNumArrIndex130 = 0;\n  let hexNumArrIndex131 = 0;\n  let hexNumArrIndex132 = 0;\n  let hexNumArrIndex133 = 0;\n  let hexNumArrIndex134 = 0;\n  let hexNumArrIndex135 = 0;\n  let hexNumArrIndex136 = 0;\n  let hexNumArrIndex137 = 0;\n  let hexNumArrIndex138 = 0;\n  let hexNumArrIndex139 = 0;\n  let hexNumArrIndex140 = 0;\n  let hexNumArrIndex141 = 0;\n  let hexNumArrIndex142 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*YOu wilL Be GIven a nUmber in decimal fOrm ANd your task is TO ConvErt it to\n  binarY formaT. ThE FunCtiON shOuLd return A striNG, wITh eACh Character repreSEntiNg a BinAry\n  numbER. EaCh cHaRacTer in The STrINg wILL be '0' oR '1'.\n\n  therE WiLl bE An exTRA cOUple oF CharactErs 'db' AT THe BeGinning AnD At the eND of thE stRing.\n  THe eXTRa chaRACTErs ArE There TO Help WIth the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu wilL Be GIven a nUmber in decimal fOrm ANd your task is TO ConvErt it to\n  binarY formaT. ThE FunCtiON shOuLd return A striNG, wITh eACh Character repreSEntiNg a BinAry\n  numbER. EaCh cHaRacTer in The STrINg wILL be '0' oR '1'.\n\n  therE WiLl bE An exTRA cOUple oF CharactErs 'db' AT THe BeGinning AnD At the eND of thE stRing.\n  THe eXTRa chaRACTErs ArE There TO Help WIth the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let num = 0;\n  let decimalNum = decimal.toString(2).padStart(8, \"0\");\n  while (decimalNum.length < 8) {\n    decimalNum = \"0\" + decimalNum;\n  }\n  while ((num = decimalNum.indexOf(\"b\")) > -1) {\n    binary = binary + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"d\")) > -1) {\n    binary = binary + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"t\")) > -1) {\n    binary = binary + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"n\")) > -1) {\n    binary = binary + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  return binary;\n};\n\n/*\n  decimalToHex(decimal)\n  Converts a decimal number to a hexadecimal string.\n\n  Examples:\n  decimalToHex(15)   # returns \"db1111db\"\n  decimalToHex(32)   # returns \"db100000db\"\n  */\nconst decimalToHex = (decimal) => {\n  let hex = \"\";\n  let num = 0;\n  let decimalNum = decimal.toString(2).padStart(8, \"0\");\n  while (decimalNum.length < 8) {\n    decimalNum = \"0\" + decimalNum;\n  }\n  while ((num = decimalNum.indexOf(\"b\")) > -1) {\n    hex = hex + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"d\")) > -1) {\n    hex = hex + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"t\")) > -1) {\n    hex = hex + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"n\")) > -1) {\n    hex = hex + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  return hex;\n};\n\n/*\n  decimalToOctal(decimal)\n  Converts a decimal number to a octal string.\n\n  Examples:\n  decimalToOctal(15)   # returns \"db1111db\"\n  decimalToOctal(32)   # returns \"db100000db\"\n  */\nconst decimalToOctal = (decimal) => {\n  let octal = \"\";\n  let num = 0;\n  let decimalNum = decimal.toString(2).padStart(8, \"0\");\n  while (decimalNum.length < 8) {\n    decimalNum = \"0\" + decimalNum;\n  }\n  while ((num = decimalNum.indexOf(\"b\")) > -1) {\n    octal = octal + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"d\")) > -1) {\n    octal = octal + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"t\")) > -1) {\n    octal = octal + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"n\")) > -1) {\n    octal = octal + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  return octal;\n};\n\n/*\n  decimalToBinaryString(decimal)\n  Converts a decimal number to a binary string.\n\n  Examples:\n  decimalToBinaryString(15)   # returns \"db1111db\"\n  decimalToBinaryString(32)   # returns \"db100000db\"\n  */\nconst decimalToBinaryString = (decimal) => {\n  let binary = \"\";\n  let num = 0;\n  let decimalNum = decimal.toString(2).padStart(8, \"0\");\n  while (decimalNum.length < 8) {\n    decimalNum = \"0\" + decimalNum;\n  }\n  while ((num = decimalNum.indexOf(\"b\")) > -1) {\n    binary = binary + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"d\")) > -1) {\n    binary = binary + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"t\")) > -1) {\n    binary = binary + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"n\")) > -1) {\n    binary = binary + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  return binary;\n};\n\n/*\n  decimalToHexString(decimal)\n  Converts a decimal number to a hexadecimal string.\n\n  Examples:\n  decimalToHexString(15)   # returns \"db1111db\"\n  decimalToHexString(32)   # returns \"db100000db\"\n  */\nconst decimalToHexString = (decimal) => {\n  let hex = \"\";\n  let num = 0;\n  let decimalNum = decimal.toString(2).padStart(8, \"0\");\n  while (decimalNum.length < 8) {\n    decimalNum = \"0\" + decimalNum;\n  }\n  while ((num = decimalNum.indexOf(\"b\")) > -1) {\n    hex = hex + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"d\")) > -1) {\n    hex = hex + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"t\")) > -1) {\n    hex = hex + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  while ((num = decimalNum.indexOf(\"n\")) > -1) {\n    hex = hex + num;\n    decimalNum = decimalNum.substr(0, num);\n  }\n  return hex;\n};\n\n/*\n  decimalToOctalString(decimal)\n  Converts a decimal number to a octal string.\n\n  Examples:\n  decimalToOctalString(15)   # returns \"db1111db\"\n  decimalToOctalString(32)   # returns \"db100000db\"\n  */\nconst decimalToOctalString = (decimal) => {\n  let octal = \"\";\n  let num = 0;\n  let decimalNum = decimal.toString(2).padStart(8, \"0\");\n  while (decimalNum.length < 8) {\n    decimalNum = \"0", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a sum aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* for a gIVeN list Of inteGers, return a tuple cOnsISting of a sum aND A proDuct of all the IntegeRs in a list.\n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = numbers.reduce((acc, curr, index) => {\n    return acc + curr * int;\n  }, 0);\n  return sumOfProducts;\n};\n\n/* \n  eMptY suM ShoUlD bE equaL To 0 ANd eMPtY product should BE equAl tO 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sumOfProducts = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*YOu are GIvEN a striNg s.\n  Your TasK Is to check if tHE StriNg is happy or nOt.\n  A strIng IS haPpy IF itS lEnGth is AT lEAst 3 ANd Every 3 consecutiVE letTerS arE distinCT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN a striNg s.\n  Your TasK Is to check if tHE StriNg is happy or nOt.\n  A strIng IS haPpy IF itS lEnGth is AT lEAst 3 ANd Every 3 consecutiVE letTerS arE distinCT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let lastChar = s[0];\n  let lastCharIndex = s[0];\n  let lastCharIndex2 = s[0];\n  let lastCharIndex3 = s[0];\n  let lastCharIndex4 = s[0];\n  let lastCharIndex5 = s[0];\n  let lastCharIndex6 = s[0];\n  let lastCharIndex7 = s[0];\n  let lastCharIndex8 = s[0];\n  let lastCharIndex9 = s[0];\n  let lastCharIndex10 = s[0];\n  let lastCharIndex11 = s[0];\n  let lastCharIndex12 = s[0];\n  let lastCharIndex13 = s[0];\n  let lastCharIndex14 = s[0];\n  let lastCharIndex15 = s[0];\n  let lastCharIndex16 = s[0];\n  let lastCharIndex17 = s[0];\n  let lastCharIndex18 = s[0];\n  let lastCharIndex19 = s[0];\n  let lastCharIndex20 = s[0];\n  let lastCharIndex21 = s[0];\n  let lastCharIndex22 = s[0];\n  let lastCharIndex23 = s[0];\n  let lastCharIndex24 = s[0];\n  let lastCharIndex25 = s[0];\n  let lastCharIndex26 = s[0];\n  let lastCharIndex27 = s[0];\n  let lastCharIndex28 = s[0];\n  let lastCharIndex29 = s[0];\n  let lastCharIndex30 = s[0];\n  let lastCharIndex31 = s[0];\n  let lastCharIndex32 = s[0];\n  let lastCharIndex33 = s[0];\n  let lastCharIndex34 = s[0];\n  let lastCharIndex35 = s[0];\n  let lastCharIndex36 = s[0];\n  let lastCharIndex37 = s[0];\n  let lastCharIndex38 = s[0];\n  let lastCharIndex39 = s[0];\n  let lastCharIndex40 = s[0];\n  let lastCharIndex41 = s[0];\n  let lastCharIndex42 = s[0];\n  let lastCharIndex43 = s[0];\n  let lastCharIndex44 = s[0];\n  let lastCharIndex45 = s[0];\n  let lastCharIndex46 = s[0];\n  let lastCharIndex47 = s[0];\n  let lastCharIndex48 = s[0];\n  let lastCharIndex49 = s[0];\n  let lastCharIndex50 = s[0];\n  let lastCharIndex51 = s[0];\n  let lastCharIndex52 = s[0];\n  let lastCharIndex53 = s[0];\n  let lastCharIndex54 = s[0];\n  let lastCharIndex55 = s[0];\n  let lastCharIndex56 = s[0];\n  let lastCharIndex57 = s[0];\n  let lastCharIndex58 = s[0];\n  let lastCharIndex59 = s[0];\n  let lastCharIndex60 = s[0];\n  let lastCharIndex61 = s[0];\n  let lastCharIndex62 = s[0];\n  let lastCharIndex63 = s[0];\n  let lastCharIndex64 = s[0];\n  let lastCharIndex65 = s[0];\n  let lastCharIndex66 = s[0];\n  let lastCharIndex67 = s[0];\n  let lastCharIndex68 = s[0];\n  let lastCharIndex69 = s[0];\n  let lastCharIndex70 = s[0];\n  let lastCharIndex71 = s[0];\n  let lastCharIndex72 = s[0];\n  let lastCharIndex73 = s[0];\n  let lastCharIndex74 = s[0];\n  let lastCharIndex75 = s[0];\n  let lastCharIndex76 = s[0];\n  let lastCharIndex77 = s[0];\n  let lastCharIndex78 = s[0];\n  let lastCharIndex79 = s[0];\n  let lastCharIndex80 = s[0];\n  let lastCharIndex81 = s[0];\n  let lastCharIndex82 = s[0];\n  let lastCharIndex83 = s[0];\n  let lastCharIndex84 = s[0];\n  let lastCharIndex85 = s[0];\n  let lastCharIndex86 = s[0];\n  let lastCharIndex87 = s[0];\n  let lastCharIndex88 = s[0];\n  let lastCharIndex89 = s[0];\n  let lastCharIndex90 = s[0];\n  let lastCharIndex91 = s[0];\n  let lastCharIndex92 = s[0];\n  let lastCharIndex93 = s[0];\n  let lastCharIndex94 = s[0];\n  let lastCharIndex95 = s[0];\n  let lastCharIndex96 = s[0];\n  let lastCharIndex97 = s[0];\n  let lastCharIndex98 = s[0];\n  let lastCharIndex99 = s[0];\n  let lastCharIndex100 = s[0];\n  let lastCharIndex101 = s[0];\n  let lastCharIndex102 = s[0];\n  let lastCharIndex103 = s[0];\n  let lastCharIndex104 = s[0];\n  let lastCharIndex105 = s[0];\n  let lastCharIndex106 = s[0];\n  let lastCharIndex107 = s[0];\n  let lastCharIndex108 = s[0];\n  let lastCharIndex109 = s[0];\n  let lastCharIndex110 = s[0];\n  let lastCharIndex111 = s[0];\n  let lastCharIndex112 = s[0];\n  let lastCharIndex113 = s[0];\n  let lastCharIndex114 = s[0];\n  let lastCharIndex115 = s[0];\n  let lastCharIndex116 = s[0];\n  let lastCharIndex117 = s[0];\n  let lastCharIndex118 = s[0];\n  let lastCharIndex119 = s[0];\n  let lastCharIndex120 = s[0];\n  let lastCharIndex121 = s[0];\n  let lastCharIndex122 = s[0];\n  let lastCharIndex123 = s[0];\n  let lastCharIndex124 = s[0];\n  let lastCharIndex125 = s[0];\n  let lastCharIndex126 = s[0];\n  let lastCharIndex127 = s[0];\n  let lastCharIndex128 = s[0];\n  let lastCharIndex129 = s[0];\n  let lastCharIndex130 = s[0];\n  let lastCharIndex131 = s[0];\n  let lastCharIndex132 = s[0];\n  let lastCharIndex133 = s[0];\n  let lastCharIndex134 = s[0];\n  let lastCharIndex135 = s[0];\n  let lastCharIndex136 = s[0];\n  let lastCharIndex137 = s[0];\n  let lastCharIndex138 = s[0];\n  let lastCharIndex139 = s[0];\n  let lastCharIndex140 = s[0];\n  let lastCharIndex141 = s[0];\n  let lastCharIndex142 = s[0];\n  let lastCharIndex143 = s[0];\n  let lastCharIndex144 = s[0];\n  let lastCharIndex145 = s[0];\n  let lastCharIndex146 = s[0];\n  let lastCharIndex147 = s[0];\n  let lastCharIndex148 = s[0];\n  let lastCharIndex149 = s[0];\n  let lastCharIndex150 = s[0];\n  let lastCharIndex151 = s[0];\n  let lastCharIndex152 = s[0];\n  let lastCharIndex153 = s[0];\n  let lastCharIndex154 = s[0];\n  let lastCharIndex155 = s[0];\n  let lastCharIndex156 = s[0];\n  let lastCharIndex157 = s[0];\n  let lastCharIndex158 = s[0];\n  let lastCharIndex159 = s[0];\n  let lastCharIndex160 = s[0];\n  let lastCharIndex161 = s[0];\n  let lastCharIndex162 = s[0];\n  let lastCharIndex163 = s[0];\n  let lastCharIndex164 = s[0];\n  let lastCharIndex165 = s[0];\n  let lastCharIndex166 = s[0];\n  let lastCharIndex167 = s[0];\n  let lastCharIndex168 = s[0];\n  let lastCharIndex169 = s[0];\n  let lastCharIndex170 = s[0];\n  let lastCharIndex171 = s[0];\n  let lastCharIndex172 = s[0];\n  let lastCharIndex173 = s[0];\n  let lastCharIndex174 = s[0];\n  let lastChar", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/81", "prompt": "/*IT is thE LaST week oF the seMesTEr and the teacHER has To give the grades\n  to sTudentS. ThE TeaCheR Has BeEn MakinG HeR Own ALgOrithm for gradiNG.\n  The OnlY prOblem is, SHe hAs lOsT thE coDe sHE uSEd fOR GradINg.\n  ShE HaS giVEn yoU A list Of gpAs foR Some stuDents AND YoU hAve to wrItE\n  A functIOn thaT caN outpUt a list OF LetteR grades USINg tHe FOllowING tabLE:\n           GPA       |    Letter gradE\n            4.0                A+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                d\n          > 0.0                D-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*IT is thE LaST week oF the seMesTEr and the teacHER has To give the grades\n  to sTudentS. ThE TeaCheR Has BeEn MakinG HeR Own ALgOrithm for gradiNG.\n  The OnlY prOblem is, SHe hAs lOsT thE coDe sHE uSEd fOR GradINg.\n  ShE HaS giVEn yoU A list Of gpAs foR Some stuDents AND YoU hAve to wrItE\n  A functIOn thaT caN outpUt a list OF LetteR grades USINg tHe FOllowING tabLE:\n           GPA       |    Letter gradE\n            4.0                A+\n          > 3.7                A\n          > 3.3                a-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                d\n          > 0.0                D-\n            0.0                e\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map((grade) => grade.trim());\n  const gradesArrayLength = gradesArray.length;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const gradesArrayLength = gradesArrayLength - 1;\n  const grade", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let lEngth = string.length;\n  let prime = true;\n  let isPrime = true;\n  for (let i = 2; i <= lEngth; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    for (let i = 2; i <= lEngth; i++) {\n      if (i % 2 === 0) {\n        prime = false;\n        break;\n      }\n    }\n  }\n  return prime;\n};\n\n/*\n  WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrime = (string) => {\n  let lEngth = string.length;\n  let prime = true;\n  let isPrime = true;\n  for (let i = 2; i <= lEngth; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    for (let i = 2; i <= lEngth; i++) {\n      if (i % 2 === 0) {\n        prime = false;\n        break;\n      }\n    }\n  }\n  return prime;\n};\n\n/*\n  WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  let lEngth = string.length;\n  let prime = true;\n  let isPrime = true;\n  for (let i = 2; i <= lEngth; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    for (let i = 2; i <= lEngth; i++) {\n      if (i % 2 === 0) {\n        prime = false;\n        break;\n      }\n    }\n  }\n  return prime;\n};\n\n/*\n  WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeString = (string) => {\n  let lEngth = string.length;\n  let prime = true;\n  let isPrime = true;\n  for (let i = 2; i <= lEngth; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    for (let i = 2; i <= lEngth; i++) {\n      if (i % 2 === 0) {\n        prime = false;\n        break;\n      }\n    }\n  }\n  return prime;\n};\n\n/*\n  WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeStringNumber = (string) => {\n  let lEngth = string.length;\n  let prime = true;\n  let isPrime = true;\n  for (let i = 2; i <= lEngth; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    for (let i = 2; i <= lEngth; i++) {\n      if (i % 2 === 0) {\n        prime = false;\n        break;\n      }\n    }\n  }\n  return prime;\n};\n\n/*\n  WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeStringString = (string) => {\n  let lEngth = string.length;\n  let prime = true;\n  let isPrime = true;\n  for (let i = 2; i <= lEngth; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    for (let i = 2; i <= lEngth; i++) {\n      if (i % 2 === 0) {\n        prime = false;\n        break;\n      }\n    }\n  }\n  return prime;\n};\n\n/*\n  WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeStringStringNumber = (string) => {\n  let lEngth = string.length;\n  let prime = true;\n  let isPrime = true;\n  for (let i = 2; i <= lEngth; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    for (let i = 2; i <= lEngth; i++) {\n      if (i % 2 === 0) {\n        prime = false;\n        break;\n      }\n    }\n  }\n  return prime;\n};\n\n/*\n  WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeStringStringString = (string) => {\n  let lEngth = string.length;\n  let prime = true;\n  let isPrime = true;\n  for (let i = 2; i <= lEngth; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  if (isPrime) {\n    for (let i = 2; i <= lEngth; i++) {\n      if (i % 2 === 0) {\n        prime = false;\n        break;\n      }\n    }\n  }\n  return prime;\n};\n\n/*\n  WRite a FUnCTion thAt takeS a string aND returns true IF The string\n  lEngth is a primE numbeR or FAlsE otHErwIsE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A PoSItive iNteger n, return The COunt of the numBERs of n-digit\n  Positive inteGers thAt sTArt Or eND wiTh 1.\n  */\nCoNst startsOneEnds = (n) => {\n  let sum = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let sumOfDigits;\n  let sumOfDigitsOfOne;\n  let sumOfDigitsOfTwo;\n  let sumOfDigitsOfThree;\n  let sumOfDigitsOfFour;\n  let sumOfDigitsOfFive;\n  let sumOfDigitsOfSix;\n  let sumOfDigitsOfSeven;\n  let sumOfDigitsOfEight;\n  let sumOfDigitsOfNine;\n  let sumOfDigitsOfTen;\n  let sumOfDigitsOfEleven;\n  let sumOfDigitsOfTwelve;\n  let sumOfDigitsOfThirteen;\n  let sumOfDigitsOfFourteen;\n  let sumOfDigitsOfFifteen;\n  let sumOfDigitsOfSixteen;\n  let sumOfDigitsOfSeventeen;\n  let sumOfDigitsOfEighteen;\n  let sumOfDigitsOfNineteen;\n  let sumOfDigitsOfTwenty;\n  let sumOfDigitsOfThirty;\n  let sumOfDigitsOfForty;\n  let sumOfDigitsOfFifty;\n  let sumOfDigitsOfSixty;\n  let sumOfDigitsOfSeventy;\n  let sumOfDigitsOfEighty;\n  let sumOfDigitsOfNinety;\n  let sumOfDigitsOfTwentyOne;\n  let sumOfDigitsOfThirtyOne;\n  let sumOfDigitsOfFortyOne;\n  let sumOfDigitsOfFiftyOne;\n  let sumOfDigitsOfSixtyOne;\n  let sumOfDigitsOfSeventyOne;\n  let sumOfDigitsOfEightyOne;\n  let sumOfDigitsOfNinetyOne;\n  let sumOfDigitsOfTwentyTwo;\n  let sumOfDigitsOfThirtyTwo;\n  let sumOfDigitsOfFortyTwo;\n  let sumOfDigitsOfFiftyTwo;\n  let sumOfDigitsOfSixtyTwo;\n  let sumOfDigitsOfSeventyTwo;\n  let sumOfDigitsOfEightyTwo;\n  let sumOfDigitsOfNinetyTwo;\n  let sumOfDigitsOfTwentyThree;\n  let sumOfDigitsOfThirtyThree;\n  let sumOfDigitsOfFortyThree;\n  let sumOfDigitsOfFiftyThree;\n  let sumOfDigitsOfSixtyThree;\n  let sumOfDigitsOfSeventyThree;\n  let sumOfDigitsOfEightyThree;\n  let sumOfDigitsOfNinetyThree;\n  let sumOfDigitsOfTwentyFour;\n  let sumOfDigitsOfThirtyFour;\n  let sumOfDigitsOfFortyFour;\n  let sumOfDigitsOfFiftyFour;\n  let sumOfDigitsOfSixtyFour;\n  let sumOfDigitsOfSeventyFour;\n  let sumOfDigitsOfEightyFour;\n  let sumOfDigitsOfNinetyFour;\n  let sumOfDigitsOfTwentyFive;\n  let sumOfDigitsOfThirtyFive;\n  let sumOfDigitsOfFortyFive;\n  let sumOfDigitsOfFiftyFive;\n  let sumOfDigitsOfSixtyFive;\n  let sumOfDigitsOfSeventyFive;\n  let sumOfDigitsOfEightyFive;\n  let sumOfDigitsOfNinetyFive;\n  let sumOfDigitsOfTwentySix;\n  let sumOfDigitsOfThirtySix;\n  let sumOfDigitsOfFortySix;\n  let sumOfDigitsOfFiftySix;\n  let sumOfDigitsOfSixtySix;\n  let sumOfDigitsOfSeventySix;\n  let sumOfDigitsOfEightySix;\n  let sumOfDigitsOfNinetySix;\n  let sumOfDigitsOfTwentySeven;\n  let sumOfDigitsOfThirtySeven;\n  let sumOfDigitsOfFortySeven;\n  let sumOfDigitsOfFiftySeven;\n  let sumOfDigitsOfSixtySeven;\n  let sumOfDigitsOfSeventySeven;\n  let sumOfDigitsOfEightySeven;\n  let sumOfDigitsOfNinetySeven;\n  let sumOfDigitsOfTwentyEight;\n  let sumOfDigitsOfThirtyEight;\n  let sumOfDigitsOfFortyEight;\n  let sumOfDigitsOfFiftyEight;\n  let sumOfDigitsOfSixtyEight;\n  let sumOfDigitsOfSeventyEight;\n  let sumOfDigitsOfEightyEight;\n  let sumOfDigitsOfNinetyEight;\n  let sumOfDigitsOfTwentyNine;\n  let sumOfDigitsOfThirtyNine;\n  let sumOfDigitsOfFortyNine;\n  let sumOfDigitsOfFiftyNine;\n  let sumOfDigitsOfSixtyNine;\n  let sumOfDigitsOfSeventyNine;\n  let sumOfDigitsOfEightyNine;\n  let sumOfDigitsOfNinetyNine;\n  let sumOfDigitsOfTwentyTen;\n  let sumOfDigitsOfThirtyTen;\n  let sumOfDigitsOfFortyTen;\n  let sumOfDigitsOfFiftyTen;\n  let sumOfDigitsOfSixtyTen;\n  let sumOfDigitsOfSeventyTen;\n  let sumOfDigitsOfEightyTen;\n  let sumOfDigitsOfNinetyTen;\n  let sumOfDigitsOfTwentyEleven;\n  let sumOfDigitsOfThirtyEleven;\n  let sumOfDigitsOfFortyEleven;\n  let sumOfDigitsOfFiftyEleven;\n  let sumOfDigitsOfSixtyEleven;\n  let sumOfDigitsOfSeventyEleven;\n  let sumOfDigitsOfEightyEleven;\n  let sumOfDigitsOfNinetyEleven;\n  let sumOfDigitsOfTwentyTwelve;\n  let sumOfDigitsOfThirtyTwelve;\n  let sumOfDigitsOfFortyTwelve;\n  let sumOfDigitsOfFiftyTwelve;\n  let sumOfDigitsOfSixtyTwelve;\n  let sumOfDigitsOfSeventyTwelve;\n  let sumOfDig", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/84", "prompt": "/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a POsITive inTeger N, return tHe tOTal sum of its dIGIts in bInary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= N; i++) {\n    binary = binary + binary(i).toString(2);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\n/*\n  Given a binary string in bInary, return its decimal equivalent in dInt.\n  \n  Example\n      For bInary = 1100, the decimal equivalent is 1.\n      For bInary = 11001, the decimal equivalent is 2.\n      For bInary = 1100100, the decimal equivalent is 3.\n      For bInary = 1100101, the decimal equivalent is 4.\n      For bInary = 1100110, the decimal equivalent is 5.\n      For bInary = 1100111, the decimal equivalent is 6.\n  \n  Variables:\n      @bInary string in binary\n           Constraints: 0 ≤ bInary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimal = (bBinary) => {\n  let dInt = 0;\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= bBinary.length; i++) {\n    binary = binary + bBinary.charAt(i).toString(2);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\n/*\n  Given a binary string in bInary, return its decimal equivalent in dInt.\n  \n  Example\n      For bInary = 1100, the decimal equivalent is 1.\n      For bInary = 11001, the decimal equivalent is 2.\n      For bInary = 1100100, the decimal equivalent is 3.\n      For bInary = 1100101, the decimal equivalent is 4.\n      For bInary = 1100110, the decimal equivalent is 5.\n      For bInary = 1100111, the decimal equivalent is 6.\n  \n  Variables:\n      @bInary string in binary\n           Constraints: 0 ≤ bInary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimalInt = (bBinary) => {\n  let dInt = 0;\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= bBinary.length; i++) {\n    binary = binary + bBinary.charAt(i).toString(2);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return dInt;\n};\n\n/*\n  Given a binary string in bInary, return its decimal equivalent in dInt.\n  \n  Example\n      For bInary = 1100, the decimal equivalent is 1.\n      For bInary = 11001, the decimal equivalent is 2.\n      For bInary = 1100100, the decimal equivalent is 3.\n      For bInary = 1100101, the decimal equivalent is 4.\n      For bInary = 1100110, the decimal equivalent is 5.\n      For bInary = 1100111, the decimal equivalent is 6.\n  \n  Variables:\n      @bInary string in binary\n           Constraints: 0 ≤ bInary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimalIntInt = (bBinary) => {\n  let dInt = 0;\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= bBinary.length; i++) {\n    binary = binary + bBinary.charAt(i).toString(2);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return dInt;\n};\n\n/*\n  Given a binary string in bInary, return its decimal equivalent in dInt.\n  \n  Example\n      For bInary = 1100, the decimal equivalent is 1.\n      For bInary = 11001, the decimal equivalent is 2.\n      For bInary = 1100100, the decimal equivalent is 3.\n      For bInary = 1100101, the decimal equivalent is 4.\n      For bInary = 1100110, the decimal equivalent is 5.\n      For bInary = 1100111, the decimal equivalent is 6.\n  \n  Variables:\n      @bInary string in binary\n           Constraints: 0 ≤ bInary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimalIntIntInt = (bBinary) => {\n  let dInt = 0;\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= bBinary.length; i++) {\n    binary = binary + bBinary.charAt(i).toString(2);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return dInt;\n};\n\n/*\n  Given a binary string in bInary, return its decimal equivalent in dInt.\n  \n  Example\n      For bInary = 1100, the decimal equivalent is 1.\n      For bInary = 11001, the decimal equivalent is 2.\n      For bInary = 1100100, the decimal equivalent is 3.\n      For bInary = 1100101, the decimal equivalent is 4.\n      For bInary = 1100110, the decimal equivalent is 5.\n      For bInary = 1100111, the decimal equivalent is 6.\n  \n  Variables:\n      @bInary string in binary\n           Constraints: 0 ≤ bInary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimalIntIntIntIntInt = (bBinary) => {\n  let dInt = 0;\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= bBinary.length; i++) {\n    binary = binary + bBinary.charAt(i).toString(2);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return dInt;\n};\n\n/*\n  Given a binary string in bInary, return its decimal equivalent in dInt.\n  \n  Example\n      For bInary = 1100, the decimal equivalent is 1.\n      For bInary = 11001, the decimal equivalent is 2.\n      For bInary = 1100100, the decimal equivalent is 3.\n      For bInary = 1100101, the decimal equivalent is 4.\n      For bInary = 1100110, the decimal equivalent is 5.\n      For bInary = 1100111, the decimal equivalent is 6.\n  \n  Variables:\n      @bInary string in binary\n           Constraints: 0 ≤ bInary ≤ 10000.\n  Output:\n       an integer\n  */\nconst decimalIntIntIntIntIntIntInt = (bBinary) => {\n  let dInt = 0;\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 1; i <= bBinary.length; i++) {\n    binary = binary + bBinary.charAt(i).toString(2);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return dInt;\n};\n\n/*\n  Given a binary string in bInary, return its decimal equivalent in dInt.\n  \n  Example\n      For bInary = 1100, the decimal equivalent is 1.\n      For bInary = 11001, the decimal equivalent is 2.\n      For bInary = 1100100, the decimal equivalent is 3.\n      For bInary = 1100101, the decimal equivalent is 4.\n      For bInary = 1100110, the decimal equivalent is 5.\n      For bInary = 110011", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/85", "prompt": "/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*GIven a NOn-EMpty list of IntegeRs lst. add tHE even elementS THat aRe at odd indicEs..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Given a list lst of integers, return a new list where each element is the sum of the elements in lst.\n  If the list has fewer than two elements, return an empty list.\n  If the list has more than two elements, return a new list where each element is the sum of the two elements in the list.\n  If the list has three or more elements, return a new list where each element is the sum of the two elements in the list, plus three.\n  If the list has four or more elements, return a new list where each element is the sum of the two elements in the list, plus four, and so on.\n  If the list has five or more elements, return a new list where each element is the sum of the two elements in the list, plus five, and so on.\n  If the list has six or more elements, return a new list where each element is the sum of the two elements in the list, plus six.\n  If the list has seven or more elements, return a new list where each element is the sum of the two elements in the list, plus seven, and so on.\n  If the list has eight or more elements, return a new list where each element is the sum of the two elements in the list, plus eight, and so on.\n  If the list has nine or more elements, return a new list where each element is the sum of the two elements in the list, plus nine, and so on.\n  If the list has ten or more elements, return a new list where each element is the sum of the two elements in the list, plus ten, and so on.\n  If the list has eleven or more elements, return a new list where each element is the sum of the two elements in the list, plus eleven, and so on.\n  If the list has twelve or more elements, return a new list where each element is the sum of the two elements in the list, plus twelve, and so on.\n  If the list has thirteen or more elements, return a new list where each element is the sum of the two elements in the list, plus thirteen and so on.\n  If the list has fourteen or more elements, return a new list where each element is the sum of the two elements in the list, plus fourteen and so on.\n  If the list has fifteen or more elements, return a new list where each element is the sum of the two elements in the list, plus fifteen and so on.\n  If the list has sixteen or more elements, return a new list where each element is the sum of the two elements in the list, plus sixteen and so on.\n  If the list has seventeen or more elements, return a new list where each element is the sum of the two elements in the list, plus seventeen and so on.\n  If the list has eighteen or more elements, return a new list where each element is the sum of the two elements in the list, plus eighteen and so on.\n  If the list has nineteen or more elements, return a new list where each element is the sum of the two elements in the list, plus nineteen and so on.\n  If the list has twenty or more elements, return a new list where each element is the sum of the two elements in the list, plus twenty and so on.\n  If the list has thirty or more elements, return a new list where each element is the sum of the two elements in the list, plus thirty and so on.\n  If the list has fourty or more elements, return a new list where each element is the sum of the two elements in the list, plus fourty and so on.\n  If the list has five or more elements, return a new list where each element is the sum of the two elements in the list, plus five and so on.\n  If the list has ten or more elements, return a new list where each element is the sum of the two elements in the list, plus ten and so on.\n  If the list has eleven or more elements, return a new list where each element is the sum of the two elements in the list, plus eleven and so on.\n  If the list has twelve or more elements, return a new list where each element is the sum of the two elements in the list, plus twelve and so on.\n  If the list has thirteen or more elements, return a new list where each element is the sum of the two elements in the list, plus thirteen and so on.\n  If the list has fourteen or more elements, return a new list where each element is the sum of the two elements in the list, plus fourteen and so on.\n  If the list has fifteen or more elements, return a new list where each element is the sum of the two elements in the list, plus fifteen and so on.\n  If the list has sixteen or more elements, return a new list where each element is the sum of the two elements in the list, plus sixteen and so on.\n  If the list has seventeen or more elements, return a new list where each element is the sum of the two elements in the list, plus seventeen and so on.\n  If the list has eighteen or more elements, return a new list where each element is the sum of the two elements in the list, plus eighteen and so on.\n  If the list has nineteen or more elements, return a new list where each element is the sum of the two elements in the list, plus nineteen and so on.\n  If the list has twenty or more elements, return a new list where each element is the sum of the two elements in the list, plus twenty and so on.\n  If the list has thirty or more elements, return a new list where each element is the sum of the two elements in the list, plus thirty and so on.\n  If the list has fourty or more elements, return a new list where each element is the sum of the two elements in the list, plus fourty and so on.\n  If the list has five or more elements, return a new list where each element is the sum of the two elements in the list, plus five and so on.\n  If the list has ten or more elements, return a new list where each element is the sum of the two elements in the list, plus ten and so on.\n  If the list has eleven or more elements, return a new list where each element is the sum of the two elements in the list, plus eleven and so on.\n  If the list has twelve or more elements, return a new list where each element is the sum of the two elements in the list, plus twelve and so on.\n  If the list has thirteen or more elements, return a new list where each element is the sum of the two elements in the list, plus thirteen and so on.\n  If the list has fourteen or more elements, return a new list where each element is the sum of the two elements in the list, plus fourteen and so on.\n  If the list has fifteen or more elements, return a new list where each element is the sum of the two elements in the list, plus fifteen and so on.\n  If the list has sixteen or more elements, return a new list where each element is the sum of the two elements in the list, plus sixteen and so on.\n  If the list has seventeen or more elements, return a new list where each element is the sum of the two elements in the list, plus seventeen and so on.\n  If the list has eighteen or more elements, return a new list where each element is the sum of the two elements in the list, plus eighteen and so on.\n  If the list has nineteen or more elements, return a new list where each element is the sum of the two elements in the list, plus nineteen and so on.\n  If the list has twenty or more elements, return a new list where each element is the sum of the two elements in the list, plus twenty and so on.\n  If the list has thirty or more elements, return a new list where each element is the sum of the two elements in the list, plus thirty and so on.\n  If the list has fourty or more elements, return a new list where each element is the sum of the two elements in the list, plus ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  write A FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write A FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-zA-Z0-9]/g, '').split('');\n  const shuffled = chars.sort(() => Math.random() - 0.5);\n  return shuffled.join('');\n};\n\n/*\n  Write a FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-zA-Z0-9]/g, '').split('');\n  const shuffled = chars.sort(() => Math.random() - 0.5);\n  return shuffled.join('');\n};\n\n/*\n  Write a FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-zA-Z0-9]/g, '').split('');\n  const shuffled = chars.sort(() => Math.random() - 0.5);\n  return shuffled.join('');\n};\n\n/*\n  Write a FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-zA-Z0-9]/g, '').split('');\n  const shuffled = chars.sort(() => Math.random() - 0.5);\n  return shuffled.join('');\n};\n\n/*\n  Write a FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-zA-Z0-9]/g, '').split('');\n  const shuffled = chars.sort(() => Math.random() - 0.5);\n  return shuffled.join('');\n};\n\n/*\n  Write a FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiNG ordeR Based on Ascii VALUe.\n  noTe: You shOuLD keep tHE ordeR of Words And BLAnk spACES in The SeNTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-zA-Z0-9]/g, '').split('');\n  const shuffled = chars.sort(() => Math.random() - 0.5);\n  return shuffled.join('');\n};\n\n/*\n  Write a FuNCtion tHat takEs a STring and retuRNS an oRdered versioN of it.\n  ORdeREd vErsIOn oF sTrIng, is A StRIng WHeRe all words (sepaRAted By sPacE)\n  are repLAceD by A nEw wOrd WheRE aLL thE CHaraCTers ARrAngED in\n  ascENDiN", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2) ...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn a 2 dimEnsionAl dATa, as a nested lISTs,\n  whIch is similar To matrIx, hOWevEr, uNLikE mAtRices,\n  EAcH Row MAy Contain a differENt nuMbeR of Columns.\n  gIveN lst, anD iNteGer x, FinD InTEgeRS x in The list,\n  aND return list of tUPlEs, [(x1, Y1), (X2, y2)...] suCH ThAT\n  each tuple IS a coordInate - (ROW, CoLuMns), starTiNG with 0.\n  SORt cooRdiNates IniTIAlly bY ROWS in asCeNDing oRDEr.\n  AlSO, sort coordinatEs oF the row bY cOlumns in deScENdING oRDeR.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []\n  let row = []\n  let rows = []", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  given AN array oF Non-negAtive iNteGErs, return a copy of thE GIven array After sorting,\n  You wilL soRT thE giVEn array in aScEnDing oRDeR If tHE sUm( first index vaLUe, laSt iNdeX value) iS Odd,\n  Or sOrT it in DesCenDInG OrdER If thE Sum( fIRsT inDEx vaLUE, lASt indEX value) iS even.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given AN array oF Non-negAtive iNteGErs, return a copy of thE GIven array After sorting,\n  You wilL soRT thE giVEn array in aScEnDing oRDeR If tHE sUm( first index vaLUe, laSt iNdeX value) iS Odd,\n  Or sOrT it in DesCenDInG OrdER If thE Sum( fIRsT inDEx vaLUE, lASt indEX value) iS even.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const newArray = array.slice();\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\n/*\n  Given a sorted array oF Non-negAtive iNteGErs, return the number of non-negative integers in THE GIven array.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * countNonNegative([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) => 4\n  */\nconst countNonNegative = (array) => {\n  const newArray = array.slice();\n  const nonNegativeCount = 0;\n  newArray.forEach((value) => {\n    if (value > 0) {\n      nonNegativeCount++;\n    }\n  });\n  return nonNegativeCount;\n};\n\n/*\n  Given a sorted array oF Non-negAtive iNteGErs, return the number of positive integers in THE GIven array.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * countPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) => 4\n  */\nconst countPositive = (array) => {\n  const newArray = array.slice();\n  const positiveCount = 0;\n  newArray.forEach((value) => {\n    if (value < 0) {\n      positiveCount++;\n    }\n  });\n  return positiveCount;\n};\n\n/*\n  Given a sorted array oF Non-negAtive iNteGErs, return the number of negative integers in THE GIven array.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * countNegative([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) => 4\n  */\nconst countNegative = (array) => {\n  const newArray = array.slice();\n  const negativeCount = 0;\n  newArray.forEach((value) => {\n    if (value > 0) {\n      negativeCount++;\n    }\n  });\n  return negativeCount;\n};\n\n/*\n  Given a sorted array oF Non-negAtive iNteGErs, return the number of positive and negative integers in THE GIven array.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * countPositiveAndNegative([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) => 4\n  */\nconst countPositiveAndNegative = (array) => {\n  const newArray = array.slice();\n  const positiveCount = 0;\n  const negativeCount = 0;\n  newArray.forEach((value) => {\n    if (value > 0) {\n      positiveCount++;\n    }\n    if (value < 0) {\n      negativeCount++;\n    }\n  });\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given a sorted array oF Non-negAtive iNteGErs, return the number of positive and negative integers in THE GIven array.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * countPositiveAndNegative([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) => [4, 2]\n  */\nconst countPositiveAndNegativeAndZero = (array) => {\n  const newArray = array.slice();\n  const positiveCount = 0;\n  const negativeCount = 0;\n  newArray.forEach((value) => {\n    if (value > 0) {\n      positiveCount++;\n    }\n    if (value < 0) {\n      negativeCount++;\n    }\n  });\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given a sorted array oF Non-negAtive iNteGErs, return the number of positive and negative integers in THE GIven array.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * countPositiveAndNegativeAndZero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) => [4, 2]\n  */\nconst countPositiveAndNegativeAndZero = (array) => {\n  const newArray = array.slice();\n  const positiveCount = 0;\n  const negativeCount = 0;\n  newArray.forEach((value) => {\n    if (value > 0) {\n      positiveCount++;\n    }\n    if (value < 0) {\n      negativeCount++;\n    }\n  });\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given a sorted array oF Non-negAtive iNteGErs, return the number of positive and negative integers in THE GIven array.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * countPositiveAndNegativeAndZero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) => [4, 2]\n  */\nconst countPositiveAndNegativeAndZero = (array) => {\n  const newArray = array.slice();\n  const positiveCount = 0;\n  const negativeCount = 0;\n  newArray.forEach((value) => {\n    if (value > 0) {\n      positiveCount++;\n    }\n    if (value < 0) {\n      negativeCount++;\n    }\n  });\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given a sorted array oF Non-negAtive iNteGErs, return the number of positive and negative integers in THE GIven array.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * countPositiveAndNegativeAndZero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) => [4, 2]\n  */\nconst countPositiveAndNegativeAndZero = (array) => {\n  const newArray = array.slice();\n  const positiveCount = 0;\n  const negativeCount = 0;\n  newArray.forEach((value) => {\n    if (value > 0) {\n      positiveCount++;\n    }\n    if (value < 0) {\n      negativeCount++;\n    }\n  });\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given a sorted array oF Non-negAtive iNteGErs, return the number of positive and negative integers in THE GIven array.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * countPositiveAndNegativeAndZero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) => [4, 2]\n  */\nconst countPositiveAndNegativeAndZero = (array) => {\n  const newArray = array.slice();\n  const positiveCount = 0;\n  const negativeCount = 0;\n  newArray.forEach((value) => {\n    if (value > 0) {\n      positiveCount++;\n    }\n    if (value < 0) {\n      negativeCount++;\n    }\n  });\n  return [positiveCount, negativeCount];\n};\n\n/*\n  Given a sorted array oF Non-negAtive iNteGErs, return the number of positive and negative integers in THE GIven array.\n\n  nOTE:\n  * dOn'T change ThE Given array.\n\n  Examples:\n  * countPositiveAndNegativeAndZero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]) => [4, 2]\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*CReate A FuNCtion encrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing enCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*CReate A FuNCtion encrypt tHat takEs a STring as an argUMEnt aNd\n  returns a stRing enCryPTed WitH The AlPhAbet bEInG RotATeD. \n  The alphabet shOUld bE roTatEd in a mannER suCh tHaT thE leTteRS \n  sHIft DOWn by TWo muLTiPliED to tWO PlACes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabetLength = alphabet.length;\n  const alphabetIndex = alphabet.indexOf(s);\n  const alphabet", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* from a GIvEN list of intEgers, gEneRAte a list of rollinG MAximUm element fouNd untiL giVEn mOmeNT\n  in thE sEqUence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxes = numbers.reduce((acc, curr, index) => {\n    if (curr > acc) {\n      acc = curr;\n    }\n    return acc;\n  }, 0);\n  return numbers.reduce((acc, curr, index) => {\n    if (curr > maxes) {\n      maxes = curr;\n    }\n    return acc;\n  }, 0);\n};\n\n/**\n  >>> rollingMax([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = rollingMax;\n\n/**\n  >>> rollingMax2([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax3 = rollingMax;\n\n/**\n  >>> rollingMax3([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax4 = rollingMax;\n\n/**\n  >>> rollingMax4([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax5 = rollingMax;\n\n/**\n  >>> rollingMax5([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax6 = rollingMax;\n\n/**\n  >>> rollingMax6([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax7 = rollingMax;\n\n/**\n  >>> rollingMax7([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax8 = rollingMax;\n\n/**\n  >>> rollingMax8([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax9 = rollingMax;\n\n/**\n  >>> rollingMax9([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax10 = rollingMax;\n\n/**\n  >>> rollingMax10([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax11 = rollingMax;\n\n/**\n  >>> rollingMax11([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax12 = rollingMax;\n\n/**\n  >>> rollingMax12([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax13 = rollingMax;\n\n/**\n  >>> rollingMax13([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax14 = rollingMax;\n\n/**\n  >>> rollingMax14([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax15 = rollingMax;\n\n/**\n  >>> rollingMax15([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax16 = rollingMax;\n\n/**\n  >>> rollingMax16([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax17 = rollingMax;\n\n/**\n  >>> rollingMax17([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax18 = rollingMax;\n\n/**\n  >>> rollingMax18([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax19 = rollingMax;\n\n/**\n  >>> rollingMax19([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax20 = rollingMax;\n\n/**\n  >>> rollingMax20([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax21 = rollingMax;\n\n/**\n  >>> rollingMax21([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax22 = rollingMax;\n\n/**\n  >>> rollingMax22([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax23 = rollingMax;\n\n/**\n  >>> rollingMax23([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax24 = rollingMax;\n\n/**\n  >>> rollingMax24([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax25 = rollingMax;\n\n/**\n  >>> rollingMax25([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax26 = rollingMax;\n\n/**\n  >>> rollingMax26([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax27 = rollingMax;\n\n/**\n  >>> rollingMax27([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax28 = rollingMax;\n\n/**\n  >>> rollingMax28([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax29 = rollingMax;\n\n/**\n  >>> rollingMax29([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax30 = rollingMax;\n\n/**\n  >>> rollingMax30([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax31 = rollingMax;\n\n/**\n  >>> rollingMax31([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax32 = rollingMax;\n\n/**\n  >>> rollingMax32([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax33 = rollingMax;\n\n/**\n  >>> rollingMax33([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax34 = rollingMax;\n\n/**\n  >>> rollingMax34([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax35 = rollingMax;\n\n/**\n  >>> rollingMax35([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax36 = rollingMax;\n\n/**\n  >>> rollingMax36([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax37 = rollingMax;\n\n/**\n  >>> rollingMax37([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax38 = rollingMax;\n\n/**\n  >>> rollingMax38([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax39 = rollingMax;\n\n/**\n  >>> rollingMax39([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax40 = rollingMax;\n\n/**\n  >>> rollingMax40([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax41 = rollingMax;\n\n/**\n  >>> rollingMax41([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax42 = rollingMax;\n\n/**\n  >>> rollingMax42([1,2,3,2,3,4,2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax43 = rollingMax;\n\n/**\n  >>> rollingMax43([1,2,3,2,3,4,2])\n  [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n  if (lst === null) return null;\n  let small = lst[0];\n  let smallIndex = lst.indexOf(small);\n  let smallNext = lst[smallIndex + 1];\n  let smallNextIndex = lst.indexOf(smallNext);\n  if (smallNextIndex === smallIndex + 1) return smallNext;\n  return nextSmallest(lst);\n};\n\n/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 3\n  nextSmallest([5, 1, 4, 3, 2]) == 3\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n  if (lst === null) return null;\n  let small = lst[0];\n  let smallIndex = lst.indexOf(small);\n  let smallNext = lst[smallIndex + 1];\n  let smallNextIndex = lst.indexOf(smallNext);\n  if (smallNextIndex === smallIndex + 1) return smallNext;\n  return nextSmallest(lst);\n};\n\n/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 4\n  nextSmallest([5, 1, 4, 3, 2]) == 4\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n  if (lst === null) return null;\n  let small = lst[0];\n  let smallIndex = lst.indexOf(small);\n  let smallNext = lst[smallIndex + 1];\n  let smallNextIndex = lst.indexOf(smallNext);\n  if (smallNextIndex === smallIndex + 1) return smallNext;\n  return nextSmallest(lst);\n};\n\n/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 5\n  nextSmallest([5, 1, 4, 3, 2]) == 5\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n  if (lst === null) return null;\n  let small = lst[0];\n  let smallIndex = lst.indexOf(small);\n  let smallNext = lst[smallIndex + 1];\n  let smallNextIndex = lst.indexOf(smallNext);\n  if (smallNextIndex === smallIndex + 1) return smallNext;\n  return nextSmallest(lst);\n};\n\n/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 6\n  nextSmallest([5, 1, 4, 3, 2]) == 6\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n  if (lst === null) return null;\n  let small = lst[0];\n  let smallIndex = lst.indexOf(small);\n  let smallNext = lst[smallIndex + 1];\n  let smallNextIndex = lst.indexOf(smallNext);\n  if (smallNextIndex === smallIndex + 1) return smallNext;\n  return nextSmallest(lst);\n};\n\n/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 7\n  nextSmallest([5, 1, 4, 3, 2]) == 7\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n  if (lst === null) return null;\n  let small = lst[0];\n  let smallIndex = lst.indexOf(small);\n  let smallNext = lst[smallIndex + 1];\n  let smallNextIndex = lst.indexOf(smallNext);\n  if (smallNextIndex === smallIndex + 1) return smallNext;\n  return nextSmallest(lst);\n};\n\n/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 8\n  nextSmallest([5, 1, 4, 3, 2]) == 8\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n  if (lst === null) return null;\n  let small = lst[0];\n  let smallIndex = lst.indexOf(small);\n  let smallNext = lst[smallIndex + 1];\n  let smallNextIndex = lst.indexOf(smallNext);\n  if (smallNextIndex === smallIndex + 1) return smallNext;\n  return nextSmallest(lst);\n};\n\n/*\n  you arE GiVEn a list of iNtegerS.\n  WrITe a function nextSmallest() tHAT retUrns the 2nd smallest eleMent of The list.\n  rEtuRn nULl iF tHeRe is nO SuCH elEMeNt.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 9\n  nextSmallest([5, 1, 4, 3, 2]) == 9\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconsT nextSmallest = (lst) => {\n  if (lst === null) return null;\n  let small = lst[0];\n  let smallIndex = lst.indexOf(small);\n  let smallNext = lst[smallIndex + 1];\n  let smallNextIndex = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  you'll BE gIVen a stRing of WorDS, and your task IS To coUnt the number\n  Of boreDomS. a boRedOM is A sEnTence THaT StaRTs With the word \"I\".\n  SeNTencEs aRe dElimiteD By '.', '?' oR '!'.\n \n  FoR eXamPle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let boredWords = S.split(' ');\n  let boredWordsLength = boredWords.length;\n  let boredWordsArray = boredWords.split('');\n  let boredWordsArrayLength = boredWordsArray.length;\n  let boredWordsArrayIndex = 0;\n  let boredWordsArrayIndexLength = 0;\n  let boredWordsArrayIndexValue = 0;\n  let boredWordsArrayIndexValueLength = 0;\n  let boredWordsArrayIndexValueValue = 0;\n  let boredWordsArrayIndexValueValueLength = 0;\n  let boredWordsArrayIndexValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueLength = 0;\n  let boredWordsArrayIndexValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueLength = 0;\n  let boredWordsArrayIndexValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueLength = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueLength = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueLength = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let boredWordsArrayIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/92", "prompt": "/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* creatE A fUNction That taKes 3 NUmbers.\n  ReturnS TRue iF one of the numBers is EquAL to The SUm oF tHe Other TWo, ANd aLL nUmbers are integERs.\n  ReTurNs fAlse in any OTheR caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const isInt = (num) => isInteger(num) && isInteger(z) && isInteger(y);\n  const isNum = (num) => isInteger(num);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && isInteger(x);\n  const isNumer = (num) => isInteger(num) && isInteger(z);\n  const isNumer = (num) => isInteger(num) && isInteger(y);\n  const isNumer = (num) => isInteger(num) && is", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  write A FuNCtion tHat takEs a message, ANd encodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  write A FuNCtion tHat takEs a message, ANd encodes in sucH A \n  Way tHat it swaps caSe of alL leTTerS, rePLacEs AlL voweLS in \n  tHE message wiTH tHe letter that apPEars 2 PlaCes Ahead of THat \n  VowEl in The EngLisH AlPHabET. \n  assuME onlY LeTteRS. \n  \n  ExaMPLeS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const letters = message.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('');\n  const letters = letters.split('');\n  const letter = letters.shift();\n  const letters = letters.join('", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*YOu are GIvEN a list of inTegers.\n  you NEed to find the LARgesT prime value aNd return the sUm oF Its DigITs.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sUm = 0\n  let largestT = 0\n  let largestTPrime = 0\n  let largestTPrimeDigits = 0\n  let largestTPrimeDigits2 = 1\n  let largestTPrimeDigits3 = 1\n  let largestTPrimeDigits4 = 1\n  let largestTPrimeDigits5 = 1\n  let largestTPrimeDigits6 = 1\n  let largestTPrimeDigits7 = 1\n  let largestTPrimeDigits8 = 1\n  let largestTPrimeDigits9 = 1\n  let largestTPrimeDigits10 = 1\n  let largestTPrimeDigits11 = 1\n  let largestTPrimeDigits12 = 1\n  let largestTPrimeDigits13 = 1\n  let largestTPrimeDigits14 = 1\n  let largestTPrimeDigits15 = 1\n  let largestTPrimeDigits16 = 1\n  let largestTPrimeDigits17 = 1\n  let largestTPrimeDigits18 = 1\n  let largestTPrimeDigits19 = 1\n  let largestTPrimeDigits20 = 1\n  let largestTPrimeDigits21 = 1\n  let largestTPrimeDigits22 = 1\n  let largestTPrimeDigits23 = 1\n  let largestTPrimeDigits24 = 1\n  let largestTPrimeDigits25 = 1\n  let largestTPrimeDigits26 = 1\n  let largestTPrimeDigits27 = 1\n  let largestTPrimeDigits28 = 1\n  let largestTPrimeDigits29 = 1\n  let largestTPrimeDigits30 = 1\n  let largestTPrimeDigits31 = 1\n  let largestTPrimeDigits32 = 1\n  let largestTPrimeDigits33 = 1\n  let largestTPrimeDigits34 = 1\n  let largestTPrimeDigits35 = 1\n  let largestTPrimeDigits36 = 1\n  let largestTPrimeDigits37 = 1\n  let largestTPrimeDigits38 = 1\n  let largestTPrimeDigits39 = 1\n  let largestTPrimeDigits40 = 1\n  let largestTPrimeDigits41 = 1\n  let largestTPrimeDigits42 = 1\n  let largestTPrimeDigits43 = 1\n  let largestTPrimeDigits44 = 1\n  let largestTPrimeDigits45 = 1\n  let largestTPrimeDigits46 = 1\n  let largestTPrimeDigits47 = 1\n  let largestTPrimeDigits48 = 1\n  let largestTPrimeDigits49 = 1\n  let largestTPrimeDigits50 = 1\n  let largestTPrimeDigits51 = 1\n  let largestTPrimeDigits52 = 1\n  let largestTPrimeDigits53 = 1\n  let largestTPrimeDigits54 = 1\n  let largestTPrimeDigits55 = 1\n  let largestTPrimeDigits56 = 1\n  let largestTPrimeDigits57 = 1\n  let largestTPrimeDigits58 = 1\n  let largestTPrimeDigits59 = 1\n  let largestTPrimeDigits60 = 1\n  let largestTPrimeDigits61 = 1\n  let largestTPrimeDigits62 = 1\n  let largestTPrimeDigits63 = 1\n  let largestTPrimeDigits64 = 1\n  let largestTPrimeDigits65 = 1\n  let largestTPrimeDigits66 = 1\n  let largestTPrimeDigits67 = 1\n  let largestTPrimeDigits68 = 1\n  let largestTPrimeDigits69 = 1\n  let largestTPrimeDigits70 = 1\n  let largestTPrimeDigits71 = 1\n  let largestTPrimeDigits72 = 1\n  let largestTPrimeDigits73 = 1\n  let largestTPrimeDigits74 = 1\n  let largestTPrimeDigits75 = 1\n  let largestTPrimeDigits76 = 1\n  let largestTPrimeDigits77 = 1\n  let largestTPrimeDigits78 = 1\n  let largestTPrimeDigits79 = 1\n  let largestTPrimeDigits80 = 1\n  let largestTPrimeDigits81 = 1\n  let largestTPrimeDigits82 = 1\n  let largestTPrimeDigits83 = 1\n  let largestTPrimeDigits84 = 1\n  let largestTPrimeDigits85 = 1\n  let largestTPrimeDigits86 = 1\n  let largestTPrimeDigits87 = 1\n  let largestTPrimeDigits88 = 1\n  let largestTPrimeDigits89 = 1\n  let largestTPrimeDigits90 = 1\n  let largestTPrimeDigits91 = 1\n  let largestTPrimeDigits92 = 1\n  let largestTPrimeDigits93 = 1\n  let largestTPrimeDigits94 = 1\n  let largestTPrimeDigits95 = 1\n  let largestTPrimeDigits96 = 1\n  let largestTPrimeDigits97 = 1\n  let largestTPrimeDigits98 = 1\n  let largestTPrimeDigits99 = 1\n  let largestTPrimeDigits100 = 1\n  let largestTPrimeDigits101 = 1\n  let largestTPrimeDigits102 = 1\n  let largestTPrimeDigits103 = 1\n  let largestTPrimeDigits104 = 1\n  let largestTPrimeDigits105 = 1\n  let largestTPrimeDigits106 = 1\n  let largestTPrimeDigits107 = 1\n  let largestTPrimeDigits108 = 1\n  let largestTPrimeDigits109 = 1\n  let largestTPrimeDigits110 = 1\n  let largestTPrimeDigits111 = 1\n  let largestTPrimeDigits112 = 1\n  let largestTPrimeDigits113 = 1\n  let largestTPrimeDigits114 = 1\n  let largestTPrimeDigits115 = 1\n  let largestTPrimeDigits116 = 1\n  let largestTPrimeDigits117 = 1\n  let largestTPrimeDigits118", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A DiCTionarY, return true iF alL Keys are strinGS in LoweR \n  case or all keYs are sTriNGs in uPpeR CasE, eLsE return falsE.\n  thE FunCTiOn should return false iS The gIveN diCtionarY Is eMptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.map(key => key.toLowerCase());\n  const lowerCaseKeysArr = lowerCaseKeys.map(key => dict[key]);\n  const lowerCaseKeysArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArrArrArrArrArrArr = lowerCaseKeys.map(key => [dict[key], key]);\n  const lowerCaseKeysArrArrArrArrArrArrArrArr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/96", "prompt": "/*IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*IMplemENt A FunctiOn that TakES an non-negatiVE InteGer and returnS an arrAy oF The FirST n\n  inTeGeRs thaT ArE PriME nUmbers and less tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arrAy = [];\n  let i = 0;\n  while (i < n) {\n    arrAy.push(++i);\n  }\n  return arrAy;\n};\n\n/**\n  A Functino that TakeS an arrAy oF The FirST n and returnS an arrAy oF The FirST n that is\n  less tHAN n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  const arrAy = [];\n  let i = 0;\n  while (i < n) {\n    arrAy.push(--i);\n  }\n  return arrAy;\n};\n\n/**\n  A Functino that TakeS an arrAy oF The FirST n and returnS an arrAy oF The FirST n that is\n  less tHAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arrAy = [];\n  let i = 0;\n  while (i < n) {\n    arrAy.push(++i);\n  }\n  return arrAy;\n};\n\n/**\n  A Functino that TakeS an arrAy oF The FirST n and returnS an arrAy oF The FirST n that is\n  less tHAN n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  const arrAy = [];\n  let i = 0;\n  while (i < n) {\n    arrAy.push(--i);\n  }\n  return arrAy;\n};\n\n/**\n  A Functino that TakeS an arrAy oF The FirST n and returnS an arrAy oF The FirST n that is\n  less tHAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arrAy = [];\n  let i = 0;\n  while (i < n) {\n    arrAy.push(++i);\n  }\n  return arrAy;\n};\n\n/**\n  A Functino that TakeS an arrAy oF The FirST n and returnS an arrAy oF The FirST n that is\n  less tHAN n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  const arrAy = [];\n  let i = 0;\n  while (i < n) {\n    arrAy.push(--i);\n  }\n  return arrAy;\n};\n\n/**\n  A Functino that TakeS an arrAy oF The FirST n and returnS an arrAy oF The FirST n that is\n  less tHAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arrAy = [];\n  let i = 0;\n  while (i < n) {\n    arrAy.push(++i);\n  }\n  return arrAy;\n};\n\n/**\n  A Functino that TakeS an arrAy oF The FirST n and returnS an arrAy oF The FirST n that is\n  less tHAN n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) => []\n  countDownTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countDownTo = (n) => {\n  const arrAy = [];\n  let i = 0;\n  while (i < n) {\n    arrAy.push(--i);\n  }\n  return arrAy;\n};\n\n/**\n  A Functino that TakeS an arrAy oF The FirST n and returnS an arrAy oF The FirST n that is\n  less tHAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arrAy = [];\n  let i = 0;\n  while (i < n) {\n    arrAy.push(++i);\n  }\n  return arrAy;\n};\n\n/**\n  A Functino that TakeS an arrAy oF The FirST n and returnS an arrAy oF The FirST n that is\n  less tHAN n.\n  for example:\n  countDownTo(5) => [2,3]\n  countDownTo(11) => [2,3,5,7]\n  countDownTo(0) => []\n  countDownTo(20) => [2,3,5,7,11,13,17,19]\n  countDownTo(1) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*COmpleTE tHE functIon thaT taKEs two integerS ANd reTurns \n  the prodUct of tHeiR UniT diGIts.\n  asSuMe the INpUT is ALwAys valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*COmpleTE tHE functIon thaT taKEs two integerS ANd reTurns \n  the prodUct of tHeiR UniT diGIts.\n  asSuMe the INpUT is ALwAys valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const product = a / b;\n  return product * product;\n};\n\n/*\n  Function: sum\n  Purpose: sums up all the numbers in an array\n  Params: \n  Returns: \n  Example: \n  sum([1,2,3,4,5]) should return 15\n  sum([1,2,3,4,5,6,7,8,9]) should return 15\n  sum([1,2,3,4,5,6,7,8,9,10]) should return 15\n  sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  given A StRIng s, couNt the nUmbER of uppercase VOWels in Even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/*\n  given A StRIng s, couNt the nUmbER of uppercase VOWels in Even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let nUmbER = 0;\n  let nUmbER2 = 0;\n  let nUmbER3 = 0;\n  let nUmbER4 = 0;\n  let nUmbER5 = 0;\n  let nUmbER6 = 0;\n  let nUmbER7 = 0;\n  let nUmbER8 = 0;\n  let nUmbER9 = 0;\n  let nUmbER10 = 0;\n  let nUmbER11 = 0;\n  let nUmbER12 = 0;\n  let nUmbER13 = 0;\n  let nUmbER14 = 0;\n  let nUmbER15 = 0;\n  let nUmbER16 = 0;\n  let nUmbER17 = 0;\n  let nUmbER18 = 0;\n  let nUmbER19 = 0;\n  let nUmbER20 = 0;\n  let nUmbER21 = 0;\n  let nUmbER22 = 0;\n  let nUmbER23 = 0;\n  let nUmbER24 = 0;\n  let nUmbER25 = 0;\n  let nUmbER26 = 0;\n  let nUmbER27 = 0;\n  let nUmbER28 = 0;\n  let nUmbER29 = 0;\n  let nUmbER30 = 0;\n  let nUmbER31 = 0;\n  let nUmbER32 = 0;\n  let nUmbER33 = 0;\n  let nUmbER34 = 0;\n  let nUmbER35 = 0;\n  let nUmbER36 = 0;\n  let nUmbER37 = 0;\n  let nUmbER38 = 0;\n  let nUmbER39 = 0;\n  let nUmbER40 = 0;\n  let nUmbER41 = 0;\n  let nUmbER42 = 0;\n  let nUmbER43 = 0;\n  let nUmbER44 = 0;\n  let nUmbER45 = 0;\n  let nUmbER46 = 0;\n  let nUmbER47 = 0;\n  let nUmbER48 = 0;\n  let nUmbER49 = 0;\n  let nUmbER50 = 0;\n  let nUmbER51 = 0;\n  let nUmbER52 = 0;\n  let nUmbER53 = 0;\n  let nUmbER54 = 0;\n  let nUmbER55 = 0;\n  let nUmbER56 = 0;\n  let nUmbER57 = 0;\n  let nUmbER58 = 0;\n  let nUmbER59 = 0;\n  let nUmbER60 = 0;\n  let nUmbER61 = 0;\n  let nUmbER62 = 0;\n  let nUmbER63 = 0;\n  let nUmbER64 = 0;\n  let nUmbER65 = 0;\n  let nUmbER66 = 0;\n  let nUmbER67 = 0;\n  let nUmbER68 = 0;\n  let nUmbER69 = 0;\n  let nUmbER70 = 0;\n  let nUmbER71 = 0;\n  let nUmbER72 = 0;\n  let nUmbER73 = 0;\n  let nUmbER74 = 0;\n  let nUmbER75 = 0;\n  let nUmbER76 = 0;\n  let nUmbER77 = 0;\n  let nUmbER78 = 0;\n  let nUmbER79 = 0;\n  let nUmbER80 = 0;\n  let nUmbER81 = 0;\n  let nUmbER82 = 0;\n  let nUmbER83 = 0;\n  let nUmbER84 = 0;\n  let nUmbER85 = 0;\n  let nUmbER86 = 0;\n  let nUmbER87 = 0;\n  let nUmbER88 = 0;\n  let nUmbER89 = 0;\n  let nUmbER90 = 0;\n  let nUmbER91 = 0;\n  let nUmbER92 = 0;\n  let nUmbER93 = 0;\n  let nUmbER94 = 0;\n  let nUmbER95 = 0;\n  let nUmbER96 = 0;\n  let nUmbER97 = 0;\n  let nUmbER98 = 0;\n  let nUmbER99 = 0;\n  let nUmbER100 = 0;\n  let nUmbER101 = 0;\n  let nUmbER102 = 0;\n  let nUmbER103 = 0;\n  let nUmbER104 = 0;\n  let nUmbER105 = 0;\n  let nUmbER106 = 0;\n  let nUmbER107 = 0;\n  let nUmbER108 = 0;\n  let nUmbER109 = 0;\n  let nUmbER110 = 0;\n  let nUmbER111 = 0;\n  let nUmbER112 = 0;\n  let nUmbER113 = 0;\n  let nUmbER114 = 0;\n  let nUmbER115 = 0;\n  let nUmbER116 = 0;\n  let nUmbER117 = 0;\n  let nUmbER118 = 0;\n  let nUmbER119 = 0;\n  let nUmbER120 = 0;\n  let nUmbER121 = 0;\n  let nUmbER122 = 0;\n  let nUmbER123 = 0;\n  let nUmbER124 = 0;\n  let nUmbER125 = 0;\n  let nUmbER126 = 0;\n  let nUmbER127 = 0;\n  let nUmbER128 = 0;\n  let nUmbER129 = 0;\n  let nUmbER130 = 0;\n  let nUmbER131 = 0;\n  let nUmbER132 = 0;\n  let nUmbER133 = 0;\n  let nUmbER134 = 0;\n  let nUmbER135 = 0;\n  let nUmbER136 = 0;\n  let nUmbER137 = 0;\n  let nUmbER138 = 0;\n  let nUmbER139 = 0;\n  let nUmbER140 = 0;\n  let nUmbER141 = 0;\n  let nUmbER142 = 0;\n  let nUmbER143 = 0;\n  let nUmbER144 = 0;\n  let nUmbER145 = 0;\n  let nUmbER146 = 0;\n  let nUmbER147 = 0;\n  let nUmbER148 = 0;\n  let nUmbER149 = 0;\n  let nUmbER150 = 0;\n  let nUmbER151 = 0;\n  let nUmbER152 = 0;\n  let nUmbER153 = 0;\n  let nUmbER154 = 0;\n  let nUmbER155 = 0;\n  let nUmbER156 = 0;\n  let nUmbER157 = 0;\n  let nUmbER158 = 0;\n  let nUmbER159 = 0;\n  let nUmbER160 = 0;\n  let nUmbER161 = 0;\n  let nUmbER162 = 0;\n  let nUmbER163 = 0;\n  let nUmbER164 = 0;\n  let nUmbER165 = 0;\n  let nUmbER166 = 0;\n  let nUmbER167 = 0;\n  let nUmbER168 = 0;\n  let nUmbER169 = 0;\n  let nUmbER170 = 0;\n  let nUmbER171 = 0;\n  let nUmbER172 = 0;\n  let nUmbER173 = 0;\n  let nUmbER174 = 0;\n  let nUmbER175 = 0;\n  let nUmbER176 = 0;\n  let nUmbER177 = 0;\n  let nUmbER178 = 0;\n  let nUmbER179 = 0;\n  let nUmbER180 = 0;\n  let nUmbER181 = 0;\n  let nUmbER182 = 0;\n  let nUmbER183 = 0;\n  let n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/99", "prompt": "/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "<|endoftext|>/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integerFrom, fractionFrom] = integer.split(\".\");\n  const [integerTo, fractionTo] = fraction.split(\".\");\n  const integerDiff = Math.abs(integerFrom - integerTo);\n  const fractionDiff = Math.abs(fractionFrom - fractionTo);\n  if (integerDiff < fractionDiff) {\n    return integerFrom;\n  } else {\n    return integerTo;\n  }\n};\n\n/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integerFrom, fractionFrom] = integer.split(\".\");\n  const [integerTo, fractionTo] = fraction.split(\".\");\n  const integerDiff = Math.abs(integerFrom - integerTo);\n  const fractionDiff = Math.abs(fractionFrom - fractionTo);\n  if (integerDiff < fractionDiff) {\n    return integerFrom;\n  } else {\n    return integerTo;\n  }\n};\n\n/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integerFrom, fractionFrom] = integer.split(\".\");\n  const [integerTo, fractionTo] = fraction.split(\".\");\n  const integerDiff = Math.abs(integerFrom - integerTo);\n  const fractionDiff = Math.abs(fractionFrom - fractionTo);\n  if (integerDiff < fractionDiff) {\n    return integerFrom;\n  } else {\n    return integerTo;\n  }\n};\n\n/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integerFrom, fractionFrom] = integer.split(\".\");\n  const [integerTo, fractionTo] = fraction.split(\".\");\n  const integerDiff = Math.abs(integerFrom - integerTo);\n  const fractionDiff = Math.abs(fractionFrom - fractionTo);\n  if (integerDiff < fractionDiff) {\n    return integerFrom;\n  } else {\n    return integerTo;\n  }\n};\n\n/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integerFrom, fractionFrom] = integer.split(\".\");\n  const [integerTo, fractionTo] = fraction.split(\".\");\n  const integerDiff = Math.abs(integerFrom - integerTo);\n  const fractionDiff = Math.abs(fractionFrom - fractionTo);\n  if (integerDiff < fractionDiff) {\n    return integerFrom;\n  } else {\n    return integerTo;\n  }\n};\n\n/* creatE A fUNction That taKes A value (String) represENTing A number\n  and reTurns tHe cLOseSt iNTegEr To It. If tHE nUMbeR Is Equidistant\n  froM Two iNteGerS, round iT AwaY frOm ZerO.\n  ExAmpLEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integerFrom, fractionFrom] = integer.split(\".\");\n  const [integerTo, fractionTo] = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
