{"task_id": "JavaScript/0", "prompt": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const [firstNumber, secondNumber] = numbers;\n  const [firstNumber2, secondNumber2] = numbers.reverse();\n  const firstNumberDiff = firstNumber - firstNumber2;\n  const secondNumberDiff = secondNumber - secondNumber2;\n  const firstNumberDiff2 = firstNumber2 - firstNumber;\n  const secondNumberDiff2 = secondNumber2 - secondNumber;\n  const firstNumberDiff3 = firstNumber2 - firstNumber2;\n  const secondNumberDiff3 = secondNumber2 - secondNumber2;\n  const firstNumberDiff4 = firstNumber2 - firstNumber2;\n  const secondNumberDiff4 = secondNumber2 - secondNumber2;\n  const firstNumberDiff5 = firstNumber2 - firstNumber2;\n  const secondNumberDiff5 = secondNumber2 - secondNumber2;\n  const firstNumberDiff6 = firstNumber2 - firstNumber2;\n  const secondNumberDiff6 = secondNumber2 - secondNumber2;\n  const firstNumberDiff7 = firstNumber2 - firstNumber2;\n  const secondNumberDiff7 = secondNumber2 - secondNumber2;\n  const firstNumberDiff8 = firstNumber2 - firstNumber2;\n  const secondNumberDiff8 = secondNumber2 - secondNumber2;\n  const firstNumberDiff9 = firstNumber2 - firstNumber2;\n  const secondNumberDiff9 = secondNumber2 - secondNumber2;\n  const firstNumberDiff10 = firstNumber2 - firstNumber2;\n  const secondNumberDiff10 = secondNumber2 - secondNumber2;\n  const firstNumberDiff11 = firstNumber2 - firstNumber2;\n  const secondNumberDiff11 = secondNumber2 - secondNumber2;\n  const firstNumberDiff12 = firstNumber2 - firstNumber2;\n  const secondNumberDiff12 = secondNumber2 - secondNumber2;\n  const firstNumberDiff13 = firstNumber2 - firstNumber2;\n  const secondNumberDiff13 = secondNumber2 - secondNumber2;\n  const firstNumberDiff14 = firstNumber2 - firstNumber2;\n  const secondNumberDiff14 = secondNumber2 - secondNumber2;\n  const firstNumberDiff15 = firstNumber2 - firstNumber2;\n  const secondNumberDiff15 = secondNumber2 - secondNumber2;\n  const firstNumberDiff16 = firstNumber2 - firstNumber2;\n  const secondNumberDiff16 = secondNumber2 - secondNumber2;\n  const firstNumberDiff17 = firstNumber2 - firstNumber2;\n  const secondNumberDiff17 = secondNumber2 - secondNumber2;\n  const firstNumberDiff18 = firstNumber2 - firstNumber2;\n  const secondNumberDiff18 = secondNumber2 - secondNumber2;\n  const firstNumberDiff19 = firstNumber2 - firstNumber2;\n  const secondNumberDiff19 = secondNumber2 - secondNumber2;\n  const firstNumberDiff20 = firstNumber2 - firstNumber2;\n  const secondNumberDiff20 = secondNumber2 - secondNumber2;\n  const firstNumberDiff21 = firstNumber2 - firstNumber2;\n  const secondNumberDiff21 = secondNumber2 - secondNumber2;\n  const firstNumberDiff22 = firstNumber2 - firstNumber2;\n  const secondNumberDiff22 = secondNumber2 - secondNumber2;\n  const firstNumberDiff23 = firstNumber2 - firstNumber2;\n  const secondNumberDiff23 = secondNumber2 - secondNumber2;\n  const firstNumberDiff24 = firstNumber2 - firstNumber2;\n  const secondNumberDiff24 = secondNumber2 - secondNumber2;\n  const firstNumberDiff25 = firstNumber2 - firstNumber2;\n  const secondNumberDiff25 = secondNumber2 - secondNumber2;\n  const firstNumberDiff26 = firstNumber2 - firstNumber2;\n  const secondNumberDiff26 = secondNumber2 - secondNumber2;\n  const firstNumberDiff27 = firstNumber2 - firstNumber2;\n  const secondNumberDiff27 = secondNumber2 - secondNumber2;\n  const firstNumberDiff28 = firstNumber2 - firstNumber2;\n  const secondNumberDiff28 = secondNumber2 - secondNumber2;\n  const firstNumberDiff29 = firstNumber2 - firstNumber2;\n  const secondNumberDiff29 = secondNumber2 - secondNumber2;\n  const firstNumberDiff30 = firstNumber2 - firstNumber2;\n  const secondNumberDiff30 = secondNumber2 - secondNumber2;\n  const firstNumberDiff31 = firstNumber2 - firstNumber2;\n  const secondNumberDiff31 = secondNumber2 - secondNumber2;\n  const firstNumberDiff32 = firstNumber2 - firstNumber2;\n  const secondNumberDiff32 = secondNumber2 - secondNumber2;\n  const firstNumberDiff33 = firstNumber2 - firstNumber2;\n  const secondNumberDiff33 = secondNumber2 - secondNumber2;\n  const firstNumberDiff34 = firstNumber2 - firstNumber2;\n  const secondNumberDiff34 = secondNumber2 - secondNumber2;\n  const firstNumberDiff35 = firstNumber2 - firstNumber2;\n  const secondNumberDiff35 = secondNumber2 - secondNumber2;\n  const firstNumberDiff36 = firstNumber2 - firstNumber2;\n  const secondNumberDiff36 = secondNumber2 - secondNumber2;\n  const firstNumberDiff37 = firstNumber2 - firstNumber2;\n  const secondNumberDiff37 = secondNumber2 - secondNumber2;\n  const firstNumberDiff38 = firstNumber2 - firstNumber2;\n  const secondNumberDiff38 = secondNumber2 - secondNumber2;\n  const firstNumberDiff39 = firstNumber2 - firstNumber2;\n  const secondNumberDiff39 = secondNumber2 - secondNumber2;\n  const firstNumberDiff40 = firstNumber2 - firstNumber2;\n  const secondNumberDiff40 = secondNumber2 - secondNumber2;\n  const firstNumberDiff41 = firstNumber2 - firstNumber2;\n  const secondNumberDiff41 = secondNumber2 - secondNumber2;\n  const firstNumberDiff42 = firstNumber2 - firstNumber2;\n  const secondNumberDiff42 = secondNumber2 - secondNumber2;\n  const firstNumberDiff43 = firstNumber2 - firstNumber2;\n  const secondNumberDiff43 = secondNumber2 - secondNumber2;\n  const firstNumberDiff44 = firstNumber2 - firstNumber2;\n  const secondNumberDiff44 = secondNumber2 - secondNumber2;\n  const firstNumberDiff45 = firstNumber2 - firstNumber2;\n  const secondNumberDiff45 = secondNumber2 - secondNumber2;\n  const firstNumberDiff46 = firstNumber2 - firstNumber2;\n  const secondNumberDiff46 = secondNumber2 - secondNumber2;\n  const firstNumberDiff47 = firstNumber2 - firstNumber2;\n  const secondNumberDiff47 = secondNumber2 - secondNumber2;\n  const firstNumberDiff48 = firstNumber2 - firstNumber2;\n  const secondNumberDiff48 = secondNumber2 - secondNumber2;\n  const firstNumberDiff49 = firstNumber2 - firstNumber2;\n  const secondNumberDiff49 = secondNumber2 - secondNumber2;\n  const firstNumberDiff50 = firstNumber2 - firstNumber2;\n  const secondNumberDiff50 = secondNumber2 - secondNumber2;\n  const firstNumberDiff51 = firstNumber2 - firstNumber2;\n  const secondNumberDiff51 = secondNumber2 - secondNumber2;\n  const firstNumberDiff52 = firstNumber2 - firstNumber2;\n  const secondNumberDiff52 = secondNumber2 - secondNumber2;\n  const firstNumberDiff53 = firstNumber2 - firstNumber2;\n  const secondNumberDiff53 = secondNumber2 - secondNumber2;\n  const firstNumberDiff54 = firstNumber2 - firstNumber2;\n  const secondNumberDiff54 = secondNumber2 - secondNumber2;\n  const firstNumberDiff55 = firstNumber2 - firstNumber2;\n  const secondNumberDiff55 = secondNumber2 - secondNumber2;\n  const firstNumberDiff56 = firstNumber2 - firstNumber2;\n  const secondNumberDiff56 = secondNumber2 - second", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/1", "prompt": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^()]+)\\)/g);\n  const paren_group_array = [];\n  paren_groups.forEach((group) => {\n    const paren_group_array2 = [];\n    group.split(' ').forEach((item) => {\n      if (item === '(') {\n        paren_group_array2.push('(');\n      } else if (item === '(') {\n        paren_group_array2.push(')');\n      } else {\n        paren_group_array2.push(item);\n      }\n    });\n    paren_group_array.push(paren_group_array2);\n  });\n  return paren_group_array;\n};\n\nconst getParenGroups = (input) => {\n  const paren_group_array = getParenGroupsArray(input);\n  return paren_group_array;\n};\n\nconst getParenGroupsArray = (input) => {\n  const paren_group_array = [];\n  const paren_group_array2 = [];\n  const paren_group_array3 = [];\n  const paren_group_array4 = [];\n  const paren_group_array5 = [];\n  const paren_group_array6 = [];\n  const paren_group_array7 = [];\n  const paren_group_array8 = [];\n  const paren_group_array9 = [];\n  const paren_group_array10 = [];\n  const paren_group_array11 = [];\n  const paren_group_array12 = [];\n  const paren_group_array13 = [];\n  const paren_group_array14 = [];\n  const paren_group_array15 = [];\n  const paren_group_array16 = [];\n  const paren_group_array17 = [];\n  const paren_group_array18 = [];\n  const paren_group_array19 = [];\n  const paren_group_array20 = [];\n  const paren_group_array21 = [];\n  const paren_group_array22 = [];\n  const paren_group_array23 = [];\n  const paren_group_array24 = [];\n  const paren_group_array25 = [];\n  const paren_group_array26 = [];\n  const paren_group_array27 = [];\n  const paren_group_array28 = [];\n  const paren_group_array29 = [];\n  const paren_group_array30 = [];\n  const paren_group_array31 = [];\n  const paren_group_array32 = [];\n  const paren_group_array33 = [];\n  const paren_group_array34 = [];\n  const paren_group_array35 = [];\n  const paren_group_array36 = [];\n  const paren_group_array37 = [];\n  const paren_group_array38 = [];\n  const paren_group_array39 = [];\n  const paren_group_array40 = [];\n  const paren_group_array41 = [];\n  const paren_group_array42 = [];\n  const paren_group_array43 = [];\n  const paren_group_array44 = [];\n  const paren_group_array45 = [];\n  const paren_group_array46 = [];\n  const paren_group_array47 = [];\n  const paren_group_array48 = [];\n  const paren_group_array49 = [];\n  const paren_group_array50 = [];\n  const paren_group_array51 = [];\n  const paren_group_array52 = [];\n  const paren_group_array53 = [];\n  const paren_group_array54 = [];\n  const paren_group_array55 = [];\n  const paren_group_array56 = [];\n  const paren_group_array57 = [];\n  const paren_group_array58 = [];\n  const paren_group_array59 = [];\n  const paren_group_array60 = [];\n  const paren_group_array61 = [];\n  const paren_group_array62 = [];\n  const paren_group_array63 = [];\n  const paren_group_array64 = [];\n  const paren_group_array65 = [];\n  const paren_group_array66 = [];\n  const paren_group_array67 = [];\n  const paren_group_array68 = [];\n  const paren_group_array69 = [];\n  const paren_group_array70 = [];\n  const paren_group_array71 = [];\n  const paren_group_array72 = [];\n  const paren_group_array73 = [];\n  const paren_group_array74 = [];\n  const paren_group_array75 = [];\n  const paren_group_array76 = [];\n  const paren_group_array77 = [];\n  const paren_group_array78 = [];\n  const paren_group_array79 = [];\n  const paren_group_array80 = [];\n  const paren_group_array81 = [];\n  const paren_group_array82 = [];\n  const paren_group_array83 = [];\n  const paren_group_array84 = [];\n  const paren_group_array85 = [];\n  const paren_group_array86 = [];\n  const paren_group_array87 = [];\n  const paren_group_array88 = [];\n  const paren_group_array89 = [];\n  const paren_group_array90 = [];\n  const paren_group_array91 = [];\n  const paren_group_array92 = [];\n  const paren_group_array93 = [];\n  const paren_group_array94 = [];\n  const paren_group_array95 = [];\n  const paren_group_array96 = [];\n  const paren_group_array97 = [];\n  const paren_group_array98 = [];\n  const paren_group_array99 = [];\n  const paren_group_array100 = [];\n  const paren_group_array101 = [];\n  const paren_group_array102 = [];\n  const paren_group_array103 = [];\n  const paren_group_array104 = [];\n  const paren_group_array105 = [];\n  const paren_group_array106 = [];\n  const paren_group_array107 = [];\n  const paren_group_array108 = [];\n  const paren_group_array109 = [];\n  const paren_group_array110 = [];\n  const paren_group_array111 = [];\n  const paren_group_array112 = [];\n  const paren_group_array113 = [];\n  const paren_group_array114 = [];\n  const paren_group_array115 = [];\n  const paren_group_array116 = [];\n  const paren_group_array117 = [];\n  const paren_group_array118 = [];\n  const paren_group_array119 = [];\n  const paren_group_array120 = [];\n  const paren_group_array121 = [];\n  const paren_group_array122 = [];\n  const paren_group_array123 = [];\n  const paren_group_array124 = [];\n  const paren_group_array125 = [];\n  const paren_group_array126 = [];\n  const paren_group_array127 = [];\n  const paren_group_array128 = [];\n  const paren_group_array129 = [];\n  const paren_group_array130 = [];\n  const paren_group_array131 = [];\n  const paren_group_array132 = [];\n  const paren_group_array133 = [];\n  const paren_group_array134 = [];\n  const paren_group_array135 = [];\n  const paren_group_array136 = [];\n  const paren_group_array137 = [];\n  const paren_group_array138 = [];\n  const paren_group_array139 = [];\n  const paren_group_array140 = [];\n  const paren_group_array141 = [];\n  const paren_group_array142 = [];\n  const paren_group_array143 = [];\n  const paren_group_array144 = [];\n  const paren_group_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let reversedString = string.reverse();\n  let length = reversedString.length;\n  let start = 0;\n  let end = length - 1;\n  while (start <= end) {\n    if (reversedString.substring(start, end).includes(string)) {\n      palindrome += reversedString.substring(start, end);\n      start = end + 1;\n      end = length - 1;\n    } else {\n      start = end + 1;\n      end = length - 1;\n    }\n  }\n  return palindrome;\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindromeWithPrefix = (string) => {\n  let palindrome = '';\n  let reversedString = string.reverse();\n  let length = reversedString.length;\n  let start = 0;\n  let end = length - 1;\n  while (start <= end) {\n    if (reversedString.substring(start, end).includes(string)) {\n      palindrome += reversedString.substring(start, end);\n      start = end + 1;\n      end = length - 1;\n    } else {\n      start = end + 1;\n      end = length - 1;\n    }\n  }\n  return palindrome;\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindromeWithSuffix = (string) => {\n  let palindrome = '';\n  let reversedString = string.reverse();\n  let length = reversedString.length;\n  let start = 0;\n  let end = length - 1;\n  while (start <= end) {\n    if (reversedString.substring(start, end).includes(string)) {\n      palindrome += reversedString.substring(start, end);\n      start = end + 1;\n      end = length - 1;\n    } else {\n      start = end + 1;\n      end = length - 1;\n    }\n  }\n  return palindrome;\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindromeWithPrefixAndSuffix = (string) => {\n  let palindrome = '';\n  let reversedString = string.reverse();\n  let length = reversedString.length;\n  let start = 0;\n  let end = length - 1;\n  while (start <= end) {\n    if (reversedString.substring(start, end).includes(string)) {\n      palindrome += reversedString.substring(start, end);\n      start = end + 1;\n      end = length - 1;\n    } else {\n      start = end + 1;\n      end = length - 1;\n    }\n  }\n  return palindrome;\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindromeWithPrefixAndSuffixAndPrefix = (string) => {\n  let palindrome = '';\n  let reversedString = string.reverse();\n  let length = reversedString.length;\n  let start = 0;\n  let end = length - 1;\n  while (start <= end) {\n    if (reversedString.substring(start, end).includes(string)) {\n      palindrome += reversedString.substring(start, end);\n      start = end + 1;\n      end = length - 1;\n    } else {\n      start = end + 1;\n      end = length - 1;\n    }\n  }\n  return palindrome;\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVEr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const aPile = [];\n  for (let i = 1; i <= n; i++) {\n    aPile.push(makeAPile(i));\n  }\n  return aPile;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const aPile = [];\n  for (let i = 1; i <= n; i++) {\n    aPile.push(makeAPile(i));\n  }\n  return aPile;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const aPile = [];\n  for (let i = 1; i <= n; i++) {\n    aPile.push(makeAPile(i));\n  }\n  return aPile;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const aPile = [];\n  for (let i = 1; i <= n; i++) {\n    aPile.push(makeAPile(i));\n  }\n  return aPile;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const aPile = [];\n  for (let i = 1; i <= n; i++) {\n    aPile.push(makeAPile(i));\n  }\n  return aPile;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const aPile = [];\n  for (let i = 1; i <= n; i++) {\n    aPile.push(makeAPile(i));\n  }\n  return aPile;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let arr = [];\n  for (let i = 0; i < words.length; i++) {\n    arr.push(words[i]);\n  }\n  return arr;\n};\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let arr = [];\n  for (let i = 0; i < words.length; i++) {\n    arr.push(words[i]);\n  }\n  return arr;\n};\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe the stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let arr = [];\n  for (let i = 0; i < words.length; i++) {\n    arr.push(words[i]);\n  }\n  return arr;\n};\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe the stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let arr = [];\n  for (let i = 0; i < words.length; i++) {\n    arr.push(words[i]);\n  }\n  return arr;\n};\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe the stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let arr = [];\n  for (let i = 0; i < words.length; i++) {\n    arr.push(words[i]);\n  }\n  return arr;\n};\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe the stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let arr = [];\n  for (let i = 0; i < words.length; i++) {\n    arr.push(words[i]);\n  }\n  return arr;\n};\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe the stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let arr = [];\n  for (let i = 0; i < words.length; i++) {\n    arr.push(words[i]);\n  }\n  return arr;\n};\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe the stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let arr = [];\n  for (let i = 0; i < words.length; i++) {\n    arr.push(words[i]);\n  }\n  return arr;\n};\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe the stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\" \");\n  let arr = [];\n  for (let i = 0; i < words.length; i++) {\n    arr.push(words[i]);\n  }\n  return arr;\n};\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe the stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const [x, y] = [x];\n  const [y, x] = [y];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x] = [y, x];\n  const [y, x", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/103", "prompt": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let rounding = 1;\n  let roundingFactor = 1;\n  let roundingFactor2 = 1;\n  let roundingFactor3 = 1;\n  let roundingFactor4 = 1;\n  let roundingFactor5 = 1;\n  let roundingFactor6 = 1;\n  let roundingFactor7 = 1;\n  let roundingFactor8 = 1;\n  let roundingFactor9 = 1;\n  let roundingFactor10 = 1;\n  let roundingFactor11 = 1;\n  let roundingFactor12 = 1;\n  let roundingFactor13 = 1;\n  let roundingFactor14 = 1;\n  let roundingFactor15 = 1;\n  let roundingFactor16 = 1;\n  let roundingFactor17 = 1;\n  let roundingFactor18 = 1;\n  let roundingFactor19 = 1;\n  let roundingFactor20 = 1;\n  let roundingFactor21 = 1;\n  let roundingFactor22 = 1;\n  let roundingFactor23 = 1;\n  let roundingFactor24 = 1;\n  let roundingFactor25 = 1;\n  let roundingFactor26 = 1;\n  let roundingFactor27 = 1;\n  let roundingFactor28 = 1;\n  let roundingFactor29 = 1;\n  let roundingFactor30 = 1;\n  let roundingFactor31 = 1;\n  let roundingFactor32 = 1;\n  let roundingFactor33 = 1;\n  let roundingFactor34 = 1;\n  let roundingFactor35 = 1;\n  let roundingFactor36 = 1;\n  let roundingFactor37 = 1;\n  let roundingFactor38 = 1;\n  let roundingFactor39 = 1;\n  let roundingFactor40 = 1;\n  let roundingFactor41 = 1;\n  let roundingFactor42 = 1;\n  let roundingFactor43 = 1;\n  let roundingFactor44 = 1;\n  let roundingFactor45 = 1;\n  let roundingFactor46 = 1;\n  let roundingFactor47 = 1;\n  let roundingFactor48 = 1;\n  let roundingFactor49 = 1;\n  let roundingFactor50 = 1;\n  let roundingFactor51 = 1;\n  let roundingFactor52 = 1;\n  let roundingFactor53 = 1;\n  let roundingFactor54 = 1;\n  let roundingFactor55 = 1;\n  let roundingFactor56 = 1;\n  let roundingFactor57 = 1;\n  let roundingFactor58 = 1;\n  let roundingFactor59 = 1;\n  let roundingFactor60 = 1;\n  let roundingFactor61 = 1;\n  let roundingFactor62 = 1;\n  let roundingFactor63 = 1;\n  let roundingFactor64 = 1;\n  let roundingFactor65 = 1;\n  let roundingFactor66 = 1;\n  let roundingFactor67 = 1;\n  let roundingFactor68 = 1;\n  let roundingFactor69 = 1;\n  let roundingFactor70 = 1;\n  let roundingFactor71 = 1;\n  let roundingFactor72 = 1;\n  let roundingFactor73 = 1;\n  let roundingFactor74 = 1;\n  let roundingFactor75 = 1;\n  let roundingFactor76 = 1;\n  let roundingFactor77 = 1;\n  let roundingFactor78 = 1;\n  let roundingFactor79 = 1;\n  let roundingFactor80 = 1;\n  let roundingFactor81 = 1;\n  let roundingFactor82 = 1;\n  let roundingFactor83 = 1;\n  let roundingFactor84 = 1;\n  let roundingFactor85 = 1;\n  let roundingFactor86 = 1;\n  let roundingFactor87 = 1;\n  let roundingFactor88 = 1;\n  let roundingFactor89 = 1;\n  let roundingFactor90 = 1;\n  let roundingFactor91 = 1;\n  let roundingFactor92 = 1;\n  let roundingFactor93 = 1;\n  let roundingFactor94 = 1;\n  let roundingFactor95 = 1;\n  let roundingFactor96 = 1;\n  let roundingFactor97 = 1;\n  let roundingFactor98 = 1;\n  let roundingFactor99 = 1;\n  let roundingFactor100 = 1;\n  let roundingFactor101 = 1;\n  let roundingFactor102 = 1;\n  let roundingFactor103 = 1;\n  let roundingFactor104 = 1;\n  let roundingFactor105 = 1;\n  let roundingFactor106 = 1;\n  let roundingFactor107 = 1;\n  let roundingFactor108 = 1;\n  let roundingFactor109 = 1;\n  let roundingFactor110 = 1;\n  let roundingFactor111 = 1;\n  let roundingFactor112 = 1;\n  let roundingFactor113 = 1;\n  let roundingFactor114 = 1;\n  let roundingFactor115 = 1;\n  let roundingFactor116 = 1;\n  let roundingFactor117 = 1;\n  let roundingFactor118 = 1;\n  let roundingFactor119 = 1;\n  let roundingFactor120 = 1;\n  let roundingFactor121 = 1;\n  let roundingFactor122 = 1;\n  let roundingFactor123 = 1;\n  let roundingFactor124 = 1;\n  let roundingFactor125 = 1;\n  let roundingFactor126 = 1;\n  let roundingFactor127 = 1;\n  let roundingFactor128 = 1;\n  let roundingFactor129 = 1;\n  let roundingFactor130 = 1;\n  let roundingFactor131 = 1;\n  let roundingFactor132 = 1;\n  let roundingFactor133 = 1;\n  let roundingFactor134 = 1;\n  let roundingFactor135 = 1;\n  let roundingFactor136 = 1;\n  let roundingFactor137 = 1;\n  let roundingFactor138 = 1;\n  let roundingFactor139 = 1;\n  let roundingFactor140 = 1;\n  let roundingFactor141 = 1;\n  let roundingFactor142 = 1;\n  let roundingFactor143 = 1;\n  let roundingFactor144 = 1;\n  let roundingFactor145 = 1;\n  let roundingFactor146 = 1;\n  let roundingFactor147 = 1;\n  let roundingFactor148 = 1;\n  let roundingFactor149 = 1;\n  let roundingFactor150 = 1;\n  let roundingFactor151 = 1;\n  let roundingFactor152 = 1;\n  let roundingFactor153 = 1;\n  let roundingFactor154 = 1;\n  let roundingFactor155 = 1;\n  let roundingFactor156 = 1;\n  let roundingFactor157 = 1;\n  let roundingFactor158 = 1;\n  let roundingFactor159 = 1;\n  let roundingFactor160 = 1;\n  let roundingFactor161 = 1;\n  let roundingFactor162 = 1;\n  let roundingFactor163 = 1;\n  let roundingFactor164 = 1;\n  let roundingFactor165 = 1;\n  let roundingFactor166 = 1;\n  let roundingFactor167 = 1;\n  let roundingFactor168 = 1;\n  let roundingFactor169 = 1;\n  let roundingFactor170 = 1;\n  let roundingFactor171 = 1;\n  let roundingFactor172 = 1;\n  let roundingFactor173 = 1;\n  let roundingFactor174 = 1;\n  let roundingFactor175 = 1;\n  let roundingFactor176 = 1;\n  let roundingFactor177 = 1;\n  let roundingFactor178 = 1;\n  let roundingFactor179 = 1;\n  let roundingFactor180 = 1;\n  let roundingFactor181 = 1;\n  let roundingFactor182 = 1;\n  let roundingFactor183 = 1;\n  let roundingFactor184 = 1;\n  let roundingFactor185 = 1;\n  let roundingFactor186 = 1;\n  let roundingFactor187 = 1;\n  let roundingFactor188 = 1;\n  let roundingFactor189 = 1;\n  let rounding", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/104", "prompt": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let ret = []\n  let sOrted = x.sort((a, b) => a - b)\n  let sOrted2 = sOrted.slice()\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i\n  let j\n  let k\n  let len\n  let iLen\n  let jLen\n  let kLen\n  let i", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let len = arr.length;\n  let arrAy = [];\n  let arrRes = [];\n  let arrRev = [];\n  let arrLen = len;\n  let arrLenRev = len;\n  let arrLenRevRes = [];\n  let arrLenRevRevRes = [];\n  let arrLenRevRevRevRes = [];\n  let arrLenRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRevRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRevRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRes = [];\n  let arrLenRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRevRev", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\n/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 t", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const palindromes = Array.from({ length: n }, (_, i) => i);\n  const evenPalindromes = palindromes.filter((_, i) => i % 2 === 0);\n  const oddPalindromes = palindromes.filter((_, i) => i % 2!== 0);\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindrome = (n) => {\n  const palindromes = Array.from({ length: n }, (_, i) => i);\n  const evenPalindromes = palindromes.filter((_, i) => i % 2 === 1);\n  const oddPalindromes = palindromes.filter((_, i) => i % 2!== 1);\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindromeWithOddEven = (n) => {\n  const palindromes = Array.from({ length: n }, (_, i) => i);\n  const evenPalindromes = palindromes.filter((_, i) => i % 2 === 0);\n  const oddPalindromes = palindromes.filter((_, i) => i % 2 === 1);\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst oddEvenPalindromeWithOddEven = (n) => {\n  const palindromes = Array.from({ length: n }, (_, i) => i);\n  const evenPalindromes = palindromes.filter((_, i) => i % 2 === 1);\n  const oddPalindromes = palindromes.filter((_, i) => i % 2 === 0);\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindromeWithOddEvenWithOddEven = (n) => {\n  const palindromes = Array.from({ length: n }, (_, i) => i);\n  const evenPalindromes = palindromes.filter((_, i) => i % 2 === 0);\n  const oddPalindromes = palindromes.filter((_, i) => i % 2 === 1);\n  const evenEvenPalindromes = evenPalindromes.filter((_, i) => i % 2 === 1);\n  return [evenEvenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let num = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = arr.length;\n  let sum = 0;\n  let d = 0;\n  let dG = 0;\n  let dGt = 0;\n  let dGtG = 0;\n  let dGtGt = 0;\n  let dGtGtG = 0;\n  let dGtGtGt = 0;\n  let dGtGtGtG = 0;\n  let dGtGtGtGt = 0;\n  let dGtGtGtGtG = 0;\n  let dGtGtGtGtGt = 0;\n  let dGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtGtGt = 0;\n  let dGtGtGtGtGtGtGtGtG", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/109", "prompt": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2],..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let moveOneBall = true;\n  let arrLength = arr.length;\n  let arrMoved = [];\n  let arrMovedLength = 0;\n  let arrMovedIndex = 0;\n  let arrMovedIndex2 = 0;\n  let arrMovedIndex3 = 0;\n  let arrMovedIndex4 = 0;\n  let arrMovedIndex5 = 0;\n  let arrMovedIndex6 = 0;\n  let arrMovedIndex7 = 0;\n  let arrMovedIndex8 = 0;\n  let arrMovedIndex9 = 0;\n  let arrMovedIndex10 = 0;\n  let arrMovedIndex11 = 0;\n  let arrMovedIndex12 = 0;\n  let arrMovedIndex13 = 0;\n  let arrMovedIndex14 = 0;\n  let arrMovedIndex15 = 0;\n  let arrMovedIndex16 = 0;\n  let arrMovedIndex17 = 0;\n  let arrMovedIndex18 = 0;\n  let arrMovedIndex19 = 0;\n  let arrMovedIndex20 = 0;\n  let arrMovedIndex21 = 0;\n  let arrMovedIndex22 = 0;\n  let arrMovedIndex23 = 0;\n  let arrMovedIndex24 = 0;\n  let arrMovedIndex25 = 0;\n  let arrMovedIndex26 = 0;\n  let arrMovedIndex27 = 0;\n  let arrMovedIndex28 = 0;\n  let arrMovedIndex29 = 0;\n  let arrMovedIndex30 = 0;\n  let arrMovedIndex31 = 0;\n  let arrMovedIndex32 = 0;\n  let arrMovedIndex33 = 0;\n  let arrMovedIndex34 = 0;\n  let arrMovedIndex35 = 0;\n  let arrMovedIndex36 = 0;\n  let arrMovedIndex37 = 0;\n  let arrMovedIndex38 = 0;\n  let arrMovedIndex39 = 0;\n  let arrMovedIndex40 = 0;\n  let arrMovedIndex41 = 0;\n  let arrMovedIndex42 = 0;\n  let arrMovedIndex43 = 0;\n  let arrMovedIndex44 = 0;\n  let arrMovedIndex45 = 0;\n  let arrMovedIndex46 = 0;\n  let arrMovedIndex47 = 0;\n  let arrMovedIndex48 = 0;\n  let arrMovedIndex49 = 0;\n  let arrMovedIndex50 = 0;\n  let arrMovedIndex51 = 0;\n  let arrMovedIndex52 = 0;\n  let arrMovedIndex53 = 0;\n  let arrMovedIndex54 = 0;\n  let arrMovedIndex55 = 0;\n  let arrMovedIndex56 = 0;\n  let arrMovedIndex57 = 0;\n  let arrMovedIndex58 = 0;\n  let arrMovedIndex59 = 0;\n  let arrMovedIndex60 = 0;\n  let arrMovedIndex61 = 0;\n  let arrMovedIndex62 = 0;\n  let arrMovedIndex63 = 0;\n  let arrMovedIndex64 = 0;\n  let arrMovedIndex65 = 0;\n  let arrMovedIndex66 = 0;\n  let arrMovedIndex67 = 0;\n  let arrMovedIndex68 = 0;\n  let arrMovedIndex69 = 0;\n  let arrMovedIndex70 = 0;\n  let arrMovedIndex71 = 0;\n  let arrMovedIndex72 = 0;\n  let arrMovedIndex73 = 0;\n  let arrMovedIndex74 = 0;\n  let arrMovedIndex75 = 0;\n  let arrMovedIndex76 = 0;\n  let arrMovedIndex77 = 0;\n  let arrMovedIndex78 = 0;\n  let arrMovedIndex79 = 0;\n  let arrMovedIndex80 = 0;\n  let arrMovedIndex81 = 0;\n  let arrMovedIndex82 = 0;\n  let arrMovedIndex83 = 0;\n  let arrMovedIndex84 = 0;\n  let arrMovedIndex85 = 0;\n  let arrMovedIndex86 = 0;\n  let arrMovedIndex87 = 0;\n  let arrMovedIndex88 = 0;\n  let arrMovedIndex89 = 0;\n  let arrMovedIndex90 = 0;\n  let arrMovedIndex91 = 0;\n  let arrMovedIndex92 = 0;\n  let arrMovedIndex93 = 0;\n  let arrMovedIndex94 = 0;\n  let arrMovedIndex95 = 0;\n  let arrMovedIndex96 = 0;\n  let arrMovedIndex97 = 0;\n  let arrMovedIndex98 = 0;\n  let arrMovedIndex99 = 0;\n  let arrMovedIndex100 = 0;\n  let arrMovedIndex101 = 0;\n  let arrMovedIndex102 = 0;\n  let arrMovedIndex103 = 0;\n  let arrMovedIndex104 = 0;\n  let arrMovedIndex105 = 0;\n  let arrMovedIndex106 = 0;\n  let arrMovedIndex107 = 0;\n  let arrMovedIndex108 = 0;\n  let arrMovedIndex109 = 0;\n  let arrMovedIndex110 = 0;\n  let arrMovedIndex111 = 0;\n  let arrMovedIndex112 = 0;\n  let arrMovedIndex113 = 0;\n  let arrMovedIndex114 = 0;\n  let arrMovedIndex115 = 0;\n  let arrMovedIndex116 = 0;\n  let arrMovedIndex117 = 0;\n  let arrMovedIndex118 = 0;\n  let arrMovedIndex119 = 0;\n  let arrMovedIndex120 = 0;\n  let arrMovedIndex121 = 0;\n  let arrMovedIndex122 = 0;\n  let arrMovedIndex123 = 0;\n  let arrMovedIndex124 = 0;\n  let arrMovedIndex125 = 0;\n  let arrMovedIndex126 = 0;\n  let arrMovedIndex127 = 0;\n  let arrMovedIndex128 = 0;\n  let arrMovedIndex129 = 0;\n  let arrMovedIndex130 = 0;\n  let arrMovedIndex131 = 0;\n  let arrMovedIndex132 = 0;\n  let arrMovedIndex133 = 0;\n  let arrMovedIndex134 = 0;\n  let arrMove", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = toBinary(a)\n  const bS = toBinary(b)\n  const rS = xor(aS, bS)\n  return rS\n}\n\n/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 1s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = toBinary(a)\n  const bS = toBinary(b)\n  const rS = xor(aS, bS)\n  return rS\n}\n\n/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = toBinary(a)\n  const bS = toBinary(b)\n  const rS = xor(aS, bS)\n  return rS\n}\n\n/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 1s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = toBinary(a)\n  const bS = toBinary(b)\n  const rS = xor(aS, bS)\n  return rS\n}\n\n/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = toBinary(a)\n  const bS = toBinary(b)\n  const rS = xor(aS, bS)\n  return rS\n}\n\n/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 1s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = toBinary(a)\n  const bS = toBinary(b)\n  const rS = xor(aS, bS)\n  return rS\n}\n\n/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = toBinary(a)\n  const bS = toBinary(b)\n  const rS = xor(aS, bS)\n  return rS\n}\n\n/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 1s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = toBinary(a)\n  const bS = toBinary(b)\n  const rS = xor(aS, bS)\n  return rS\n}\n\n/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 1s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = toBinary(a)\n  const bS = toBinary(b)\n  const rS = xor(aS, bS)\n  return rS\n}\n\n/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 1s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = toBinary(a)\n  const bS = toBinary(b)\n  const rS = xor(aS, bS)\n  return rS\n}\n\n/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 1s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = toBinary(a)\n  const bS = toBinary(b)\n  const rS = xor(aS, bS)\n  return rS\n}\n\n/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 1s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = toBinary(a)\n  const bS = toBinary(b)\n  const rS = xor(aS, bS)\n  return rS\n}\n\n/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 1s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = toBinary(a)\n  const bS = toBinary(b)\n  const rS = xor(aS, bS)\n  return rS\n}\n\n/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 1s.\n  PERfOrM binARy X", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/110", "prompt": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let retVal;\n  if (lst1.length === 0 || lst2.length === 0) return \"No\";\n  if (lst1.length === 1 && lst2.length === 1) return \"Yes\";\n  if (lst1.length > 1 && lst2.length > 1) return \"No\";\n  if (lst1.length === lst2.length) return \"Yes\";\n  retVal = lst1.length > lst2.length? \"No\" : \"Yes\";\n  return retVal;\n};\n\n/*\n  In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let retVal;\n  if (lst1.length === 0 || lst2.length === 0) return \"No\";\n  if (lst1.length === 1 && lst2.length === 1) return \"Yes\";\n  if (lst1.length > 1 && lst2.length > 1) return \"No\";\n  if (lst1.length === lst2.length) return \"Yes\";\n  retVal = lst1.length > lst2.length? \"No\" : \"Yes\";\n  return retVal;\n};\n\n/*\n  In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let retVal;\n  if (lst1.length === 0 || lst2.length === 0) return \"No\";\n  if (lst1.length === 1 && lst2.length === 1) return \"Yes\";\n  if (lst1.length > 1 && lst2.length > 1) return \"No\";\n  if (lst1.length === lst2.length) return \"Yes\";\n  retVal = lst1.length > lst2.length? \"No\" : \"Yes\";\n  return retVal;\n};\n\n/*\n  In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let retVal;\n  if (lst1.length === 0 || lst2.length === 0) return \"No\";\n  if (lst1.length === 1 && lst2.length === 1) return \"Yes\";\n  if (lst1.length > 1 && lst2.length > 1) return \"No\";\n  if (lst1.length === lst2.length) return \"Yes\";\n  retVal = lst1.length > lst2.length? \"No\" : \"Yes\";\n  return retVal;\n};\n\n/*\n  In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let retVal;\n  if (lst1.length === 0 || lst2.length === 0) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let res = {};\n  let rePreSentiNg = '';\n  let spaCe = '';\n  let loweRcaSE = '';\n  let lEtTers = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let contaInINg = '';\n  let conta", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  const result = new Array(len)\n  let i = 0\n  let j = 0\n  let k = 0\n  let resultLen = 0\n  let resultIndex = 0\n  let resultChar = 0\n  let resultCharIndex = 0\n  let resultCharIndex2 = 0\n  let resultCharIndex3 = 0\n  let resultCharIndex4 = 0\n  let resultCharIndex5 = 0\n  let resultCharIndex6 = 0\n  let resultCharIndex7 = 0\n  let resultCharIndex8 = 0\n  let resultCharIndex9 = 0\n  let resultCharIndex10 = 0\n  let resultCharIndex11 = 0\n  let resultCharIndex12 = 0\n  let resultCharIndex13 = 0\n  let resultCharIndex14 = 0\n  let resultCharIndex15 = 0\n  let resultCharIndex16 = 0\n  let resultCharIndex17 = 0\n  let resultCharIndex18 = 0\n  let resultCharIndex19 = 0\n  let resultCharIndex20 = 0\n  let resultCharIndex21 = 0\n  let resultCharIndex22 = 0\n  let resultCharIndex23 = 0\n  let resultCharIndex24 = 0\n  let resultCharIndex25 = 0\n  let resultCharIndex26 = 0\n  let resultCharIndex27 = 0\n  let resultCharIndex28 = 0\n  let resultCharIndex29 = 0\n  let resultCharIndex30 = 0\n  let resultCharIndex31 = 0\n  let resultCharIndex32 = 0\n  let resultCharIndex33 = 0\n  let resultCharIndex34 = 0\n  let resultCharIndex35 = 0\n  let resultCharIndex36 = 0\n  let resultCharIndex37 = 0\n  let resultCharIndex38 = 0\n  let resultCharIndex39 = 0\n  let resultCharIndex40 = 0\n  let resultCharIndex41 = 0\n  let resultCharIndex42 = 0\n  let resultCharIndex43 = 0\n  let resultCharIndex44 = 0\n  let resultCharIndex45 = 0\n  let resultCharIndex46 = 0\n  let resultCharIndex47 = 0\n  let resultCharIndex48 = 0\n  let resultCharIndex49 = 0\n  let resultCharIndex50 = 0\n  let resultCharIndex51 = 0\n  let resultCharIndex52 = 0\n  let resultCharIndex53 = 0\n  let resultCharIndex54 = 0\n  let resultCharIndex55 = 0\n  let resultCharIndex56 = 0\n  let resultCharIndex57 = 0\n  let resultCharIndex58 = 0\n  let resultCharIndex59 = 0\n  let resultCharIndex60 = 0\n  let resultCharIndex61 = 0\n  let resultCharIndex62 = 0\n  let resultCharIndex63 = 0\n  let resultCharIndex64 = 0\n  let resultCharIndex65 = 0\n  let resultCharIndex66 = 0\n  let resultCharIndex67 = 0\n  let resultCharIndex68 = 0\n  let resultCharIndex69 = 0\n  let resultCharIndex70 = 0\n  let resultCharIndex71 = 0\n  let resultCharIndex72 = 0\n  let resultCharIndex73 = 0\n  let resultCharIndex74 = 0\n  let resultCharIndex75 = 0\n  let resultCharIndex76 = 0\n  let resultCharIndex77 = 0\n  let resultCharIndex78 = 0\n  let resultCharIndex79 = 0\n  let resultCharIndex80 = 0\n  let resultCharIndex81 = 0\n  let resultCharIndex82 = 0\n  let resultCharIndex83 = 0\n  let resultCharIndex84 = 0\n  let resultCharIndex85 = 0\n  let resultCharIndex86 = 0\n  let resultCharIndex87 = 0\n  let resultCharIndex88 = 0\n  let resultCharIndex89 = 0\n  let resultCharIndex90 = 0\n  let resultCharIndex91 = 0\n  let resultCharIndex92 = 0\n  let resultCharIndex93 = 0\n  let resultCharIndex94 = 0\n  let resultCharIndex95 = 0\n  let resultCharIndex96 = 0\n  let resultCharIndex97 = 0\n  let resultCharIndex98 = 0\n  let resultCharIndex99 = 0\n  let resultCharIndex100 = 0\n  let resultCharIndex101 = 0\n  let resultCharIndex102 = 0\n  let resultCharIndex103 = 0\n  let resultCharIndex104 = 0\n  let resultCharIndex105 = 0\n  let resultCharIndex106 = 0\n  let resultCharIndex107 = 0\n  let resultCharIndex108 = 0\n  let resultCharIndex109 = 0\n  let resultCharIndex110 = 0\n  let resultCharIndex111 = 0\n  let resultCharIndex112 = 0\n  let resultCharIndex113 = 0\n  let resultCharIndex114 = 0\n  let resultCharIndex115 = 0\n  let resultCharIndex116 = 0\n  let resultCharIndex117 = 0\n  let resultCharIndex118 = 0\n  let resultCharIndex119 = 0\n  let resultCharIndex120 = 0\n  let resultCharIndex121 = 0\n  let resultCharIndex122 = 0\n  let resultCharIndex123 = 0\n  let resultCharIndex124 = 0\n  let resultCharIndex125 = 0\n  let resultCharIndex126 = 0\n  let resultCharIndex127 = 0\n  let resultCharIndex128 = 0\n  let resultCharIndex129 = 0\n  let resultCharIndex130 = 0\n  let resultCharIndex131 = 0\n  let resultCharIndex132 = 0\n  let resultCharIndex133 = 0\n  let resultCharIndex134 = 0\n  let resultCharIndex135 = 0\n  let resultCharIndex136 = 0\n  let resultCharIndex137 = 0\n  let resultCharIndex138 = 0\n  let resultCharIndex139 = 0\n  let resultCharIndex140 = 0\n  let resultCharIndex141 = 0\n  let resultCharIndex142 = 0\n  let resultCharIndex143 = 0\n  let resultCharIndex144 = 0\n  let resultCharIndex145 = 0\n  let resultCharIndex146 = 0\n  let resultCharIndex147 = 0\n  let resultCharIndex148 = 0\n  let resultCharIndex149 = 0\n  let resultCharIndex150 = 0\n  let resultCharIndex151 = 0\n  let resultCharIndex152 = 0\n  let resultCharIndex153 = 0\n  let resultCharIndex154 = 0\n  let resultCharIndex155 = 0\n  let resultCharIndex156 = 0\n  let resultCharIndex157 = 0\n  let resultCharIndex158 = 0\n  let resultCharIndex159 = 0\n  let resultCharIndex160 = 0\n  let resultCharIndex161 = 0\n  let resultCharIndex162 = 0\n  let resultCharIndex163 = 0\n  let resultCharIndex164 = 0\n  let resultCharIndex165 = 0\n  let resultCharIndex166 = 0\n  let resultCharIndex167 = 0\n  let resultCharIndex168 = 0\n  let resultCharIndex169 = 0\n  let resultCharIndex170 = 0\n  let resultCharIndex171 = 0\n  let resultCharIndex172 = 0\n  let resultCharIndex173 = 0\n  let resultCharIndex174 = 0\n  let resultCharIndex175 = 0\n  let resultCharIndex176 = 0\n  let resultCharIndex177 = 0\n  let resultCharIndex178 = 0\n  let resultCharIndex179 = 0\n  let resultCharIndex180 = 0\n  let resultCharIndex181 = 0\n  let resultCharIndex182 = 0\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/113", "prompt": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0) {\n      res.push(el)\n    }\n  })\n  return res\n}\n\n/*\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = []\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      res.push(el)\n    }\n  })\n  return res\n}\n\n/*\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements and even elements 4n the str4ng 4 of the 4nput.\",\n   \"the number of odd elements and even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements and even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0 && i % 2!== 0) {\n      res.push(el)\n    }\n  })\n  return res\n}\n\n/*\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements and even elements 4n the str4ng 4 of the 4nput.\",\n   \"the number of odd elements and even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements and even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let res = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0 && i % 2!== 0) {\n      res.push(el)\n    }\n  })\n  return res\n}\n\n/*\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements and even elements 4n the str4ng 4 of the 4nput.\",\n   \"the number of odd elements and even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements and even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let res = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0 && i % 2!== 0) {\n      res.push(el)\n    }\n  })\n  return res\n}\n\n/*\n  >>> oddEvenEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements and even elements 4n the str4ng 4 of the 4nput.\",\n   \"the number of odd elements and even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements and even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenCount = (lst) => {\n  let res = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0 && i % 2!== 0) {\n      res.push(el)\n    }\n  })\n  return res\n}\n\n/*\n  >>> oddEvenEvenEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements and even elements 4n the str4ng 4 of the 4nput.\",\n   \"the number of odd elements and even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements and even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenEvenCount = (lst) => {\n  let res = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0 && i % 2!== 0) {\n      res.push(el)\n    }\n  })\n  return res\n}\n\n/*\n  >>> oddEvenEvenEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements and even elements 4n the str4ng 4 of the 4nput.\",\n   \"the number of odd elements and even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements and even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenEvenCount = (lst) => {\n  let res = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0 && i % 2!== 0) {\n      res.push(el)\n    }\n  })\n  return res\n}\n\n/*\n  >>> oddEvenEvenEvenEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements and even elements 4n the str4ng 4 of the 4nput.\",\n   \"the number of odd elements and even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements and even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenEvenEvenCount = (lst) => {\n  let res = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0 && i % 2!== 0) {\n      res.push(el)\n    }\n  })\n  return res\n}\n\n/*\n  >>> oddEvenEvenEvenEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements and even elements 4n the str4ng 4 of the 4nput.\",\n   \"the number of odd elements and even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements and even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenEvenEvenEvenCount = (lst) => {\n  let res = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0 && i % 2!== 0) {\n      res.push(el)\n    }\n  })\n  return res\n}\n\n/*\n  >>> oddEvenEvenEvenEvenEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements and even elements 4n the str4ng 4 of the 4nput.\",\n   \"the number of odd elements and even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements and even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenEvenEvenEvenCount = (lst) => {\n  let res = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0 && i % 2!== 0) {\n      res.push(el)\n    }\n  })\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minImuM = 0;\n  let minSum = 0;\n  let minSubArray = [];\n  let i;\n  let j;\n  let sum;\n  let numsLen = nums.length;\n  let sumLen = numsLen - 1;\n  let numsSum = nums.reduce((sum, num) => {\n    return sum + num;\n  });\n  let numsMin = nums.reduce((min, num) => {\n    return min < num? min : num;\n  });\n  let numsMax = nums.reduce((max, num) => {\n    return max > num? max : num;\n  });\n  for (i = 0; i < numsLen; i++) {\n    for (j = 0; j < numsLen; j++) {\n      if (nums[i] > nums[j]) {\n        sum = nums[i];\n        min = numsMin[i];\n        max = numsMax[i];\n        if (numsSum[i] < numsSum[j]) {\n          min = numsMin[i];\n          max = numsMax[i];\n        }\n        if (numsSum[i] > numsSum[j]) {\n          sum = numsSum[i];\n          min = numsMin[i];\n          max = numsMax[i];\n        }\n        if (numsSum[i] === numsSum[j]) {\n          minSubArray.push(sum);\n          minImuM = minImuM + numsSum[i];\n          minSum = minSum + numsSum[i];\n        }\n      }\n    }\n  }\n  return minImuM - minSum;\n};\n\n/*\n  GivEn an Array Of iNtegeRs nums, finD the maxImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let maxImuM = 0;\n  let maxSum = 0;\n  let maxSubArray = [];\n  let i;\n  let j;\n  let sum;\n  let numsLen = nums.length;\n  let sumLen = numsLen - 1;\n  let numsSum = nums.reduce((sum, num) => {\n    return sum + num;\n  });\n  let numsMax = nums.reduce((max, num) => {\n    return max > num? max : num;\n  });\n  let numsMin = nums.reduce((min, num) => {\n    return min < num? min : num;\n  });\n  for (i = 0; i < numsLen; i++) {\n    for (j = 0; j < numsLen; j++) {\n      if (nums[i] > nums[j]) {\n        sum = nums[i];\n        min = numsMin[i];\n        max = numsMax[i];\n        if (numsSum[i] > numsSum[j]) {\n          sum = numsSum[i];\n          min = numsMin[i];\n          max = numsMax[i];\n        }\n        if (numsSum[i] < numsSum[j]) {\n          min = numsMin[i];\n          max = numsMax[i];\n        }\n        if (numsSum[i] === numsSum[j]) {\n          maxSubArray.push(sum);\n          maxImuM = maxImuM + numsSum[i];\n          maxSum = maxSum + numsSum[i];\n        }\n      }\n    }\n  }\n  return maxImuM - maxSum;\n};\n\n/*\n  GivEn an Array Of iNtegeRs nums, finD the sumImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  sumSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  sumSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sumImuM = 0;\n  let sumSum = 0;\n  let sumSubArray = [];\n  let i;\n  let j;\n  let numsLen = nums.length;\n  let numsSum = nums.reduce((sum, num) => {\n    return sum + num;\n  });\n  let numsMin = nums.reduce((min, num) => {\n    return min < num? min : num;\n  });\n  let numsMax = nums.reduce((max, num) => {\n    return max > num? max : num;\n  });\n  for (i = 0; i < numsLen; i++) {\n    for (j = 0; j < numsLen; j++) {\n      if (nums[i] > nums[j]) {\n        sum = nums[i];\n        min = numsMin[i];\n        max = numsMax[i];\n        if (numsSum[i] < numsSum[j]) {\n          sum = numsSum[i];\n          min = numsMin[i];\n          max = numsMax[i];\n        }\n        if (numsSum[i] > numsSum[j]) {\n          sum = numsSum[i];\n          min = numsMin[i];\n          max = numsMax[i];\n        }\n        if (numsSum[i] === numsSum[j]) {\n          sumSubArray.push(sum);\n          sumImuM = sumImuM + numsSum[i];\n          sumSum = sumSum + numsSum[i];\n        }\n      }\n    }\n  }\n  return sumImuM - sumSum;\n};\n\n/*\n  GivEn an Array Of iNtegeRs nums, finD the sumImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  sumSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  sumSubArraySum([-1, -2, -3]) == 6\n  */\nconst sumSubArraySum = (nums) => {\n  let sumImuM = 0;\n  let sumSum = 0;\n  let sumSubArray = [];\n  let i;\n  let j;\n  let numsLen = nums.length;\n  let numsSum = nums.reduce((sum, num) => {\n    return sum + num;\n  });\n  let numsMin = nums.reduce((min, num) => {\n    return min < num? min : num;\n  });\n  let numsMax = nums.reduce((max, num) => {\n    return max > num? max : num;\n  });\n  for (i = 0; i < numsLen; i++) {\n    for (j = 0; j < numsLen; j++) {\n      if (nums[i] > nums[j]) {\n        sum = nums[i];\n        min = numsMin[i];\n        max = numsMax[i];\n        if (numsSum[i] < numsSum[j]) {\n          sum = numsSum[i];\n          min = numsMin[i];\n          max = numsMax[i];\n        }\n        if (numsSum[i] > numsSum[j]) {\n          sum = numsSum[i];\n          min = numsMin[i];\n          max = numsMax[i];\n        }\n        if (numsSum[i] === numsSum[j]) {\n          sumSubArray.push(sum);\n          sumImuM = sumImuM + numsSum[i];\n          sumSum = sumSum + numsSum[i];\n        }\n      }\n    }\n  }\n  return sumImuM + sumSum;\n};\n\n/*\n  GivEn an Array Of iNtegeRs nums, finD the sumImuM sum oF anY NoN-eMpty SUb-aRray\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let res = []\n  let buckets = []\n  let buckets_capacity = []\n  let bucket_capacity = capacity\n  let bucket_index = 0\n  let bucket_index1 = 0\n  let bucket_index2 = 0\n  let bucket_index3 = 0\n  let bucket_index4 = 0\n  let bucket_index5 = 0\n  let bucket_index6 = 0\n  let bucket_index7 = 0\n  let bucket_index8 = 0\n  let bucket_index9 = 0\n  let bucket_index10 = 0\n  let bucket_index11 = 0\n  let bucket_index12 = 0\n  let bucket_index13 = 0\n  let bucket_index14 = 0\n  let bucket_index15 = 0\n  let bucket_index16 = 0\n  let bucket_index17 = 0\n  let bucket_index18 = 0\n  let bucket_index19 = 0\n  let bucket_index20 = 0\n  let bucket_index21 = 0\n  let bucket_index22 = 0\n  let bucket_index23 = 0\n  let bucket_index24 = 0\n  let bucket_index25 = 0\n  let bucket_index26 = 0\n  let bucket_index27 = 0\n  let bucket_index28 = 0\n  let bucket_index29 = 0\n  let bucket_index30 = 0\n  let bucket_index31 = 0\n  let bucket_index32 = 0\n  let bucket_index33 = 0\n  let bucket_index34 = 0\n  let bucket_index35 = 0\n  let bucket_index36 = 0\n  let bucket_index37 = 0\n  let bucket_index38 = 0\n  let bucket_index39 = 0\n  let bucket_index40 = 0\n  let bucket_index41 = 0\n  let bucket_index42 = 0\n  let bucket_index43 = 0\n  let bucket_index44 = 0\n  let bucket_index45 = 0\n  let bucket_index46 = 0\n  let bucket_index47 = 0\n  let bucket_index48 = 0\n  let bucket_index49 = 0\n  let bucket_index50 = 0\n  let bucket_index51 = 0\n  let bucket_index52 = 0\n  let bucket_index53 = 0\n  let bucket_index54 = 0\n  let bucket_index55 = 0\n  let bucket_index56 = 0\n  let bucket_index57 = 0\n  let bucket_index58 = 0\n  let bucket_index59 = 0\n  let bucket_index60 = 0\n  let bucket_index61 = 0\n  let bucket_index62 = 0\n  let bucket_index63 = 0\n  let bucket_index64 = 0\n  let bucket_index65 = 0\n  let bucket_index66 = 0\n  let bucket_index67 = 0\n  let bucket_index68 = 0\n  let bucket_index69 = 0\n  let bucket_index70 = 0\n  let bucket_index71 = 0\n  let bucket_index72 = 0\n  let bucket_index73 = 0\n  let bucket_index74 = 0\n  let bucket_index75 = 0\n  let bucket_index76 = 0\n  let bucket_index77 = 0\n  let bucket_index78 = 0\n  let bucket_index79 = 0\n  let bucket_index80 = 0\n  let bucket_index81 = 0\n  let bucket_index82 = 0\n  let bucket_index83 = 0\n  let bucket_index84 = 0\n  let bucket_index85 = 0\n  let bucket_index86 = 0\n  let bucket_index87 = 0\n  let bucket_index88 = 0\n  let bucket_index89 = 0\n  let bucket_index90 = 0\n  let bucket_index91 = 0\n  let bucket_index92 = 0\n  let bucket_index93 = 0\n  let bucket_index94 = 0\n  let bucket_index95 = 0\n  let bucket_index96 = 0\n  let bucket_index97 = 0\n  let bucket_index98 = 0\n  let bucket_index99 = 0\n  let bucket_index100 = 0\n  let bucket_index101 = 0\n  let bucket_index102 = 0\n  let bucket_index103 = 0\n  let bucket_index104 = 0\n  let bucket_index105 = 0\n  let bucket_index106 = 0\n  let bucket_index107 = 0\n  let bucket_index108 = 0\n  let bucket_index109 = 0\n  let bucket_index110 = 0\n  let bucket_index111 = 0\n  let bucket_index112 = 0\n  let bucket_index113 = 0\n  let bucket_index114 = 0\n  let bucket_index115 = 0\n  let bucket_index116 = 0\n  let bucket_index117 = 0\n  let bucket_index118 = 0\n  let bucket_index119 = 0\n  let bucket_index120 = 0\n  let bucket_index121 = 0\n  let bucket_index122 = 0\n  let bucket_index123 = 0\n  let bucket_index124 = 0\n  let bucket_index125 = 0\n  let bucket_index126 = 0\n  let bucket_index127 = 0\n  let bucket_index128 = 0\n  let bucket_index129 = 0\n  let bucket_index130 = 0\n  let bucket_index131 = 0\n  let bucket_index132 = 0\n  let bucket_index133 = 0\n  let bucket_index134 = 0\n  let bucket_index135 = 0\n  let bucket_index136 = 0\n  let bucket_index137 = 0\n  let bucket_index138 = 0\n  let bucket_index139 = 0\n  let bucket_index140 = 0\n  let bucket_index141 = 0\n  let bucket_index142 = 0\n  let bucket_index143 = 0\n  let bucket_index144 = 0\n  let bucket_index145 = 0\n  let bucket_index146 = 0\n  let bucket_index147 = 0\n  let bucket_index148 = 0\n  let bucket_index149 = 0\n  let bucket_index150 = 0\n  let bucket_index151 = 0\n  let bucket_index152 = 0\n  let bucket_index153 = 0\n  let bucket_index154 = 0\n  let bucket_index155 = 0\n  let bucket_index156 = 0\n  let bucket_index157 = 0\n  let bucket_index158 = 0\n  let bucket_index159 = 0\n  let bucket_index160 = 0\n  let bucket_index161 = 0\n  let bucket_index162 = 0\n  let bucket_index163 = 0\n  let bucket_index164 = 0\n  let bucket_index165 = 0\n  let bucket_index166 = 0\n  let bucket_index167 = 0\n  let bucket_index168 = 0\n  let bucket_index169 = 0\n  let bucket_index170 = 0\n  let bucket_index171 = 0\n  let bucket_index172 = 0\n  let bucket_index173 = 0\n  let bucket_index174 = 0\n  let bucket_index175 = 0\n  let bucket_index176 = 0\n  let bucket_index177 = 0\n  let bucket_index178 = 0\n  let bucket_index179 = 0\n  let bucket_index180 = 0\n  let bucket_index181 = 0\n  let bucket_index182 = 0\n  let bucket_index183 = 0\n  let bucket_index184 = 0\n  let bucket_index185 = 0\n  let bucket_index186 = 0\n  let bucket_index187 = 0\n  let bucket_index188 = 0\n  let bucket_index189 = 0\n  let bucket_index190 = 0\n  let bucket_index191 = 0\n  let bucket_index192 = 0\n  let bucket_index193 = 0\n  let bucket_index194 = 0\n  let bucket_index195 = 0\n  let bucket_index196 = 0\n  let bucket_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const re = /(\\w+)/g;\n  const m = s.match(re);\n  return m? m.map((w) => w.toLowerCase()) : [];\n};\n\n/*\n  GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const re = /(\\w+)/g;\n  const m = s.match(re);\n  return m? m.map((w) => w.toLowerCase()) : [];\n};\n\n/*\n  GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const re = /(\\w+)/g;\n  const m = s.match(re);\n  return m? m.map((w) => w.toLowerCase()) : [];\n};\n\n/*\n  GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const re = /(\\w+)/g;\n  const m = s.match(re);\n  return m? m.map((w) => w.toLowerCase()) : [];\n};\n\n/*\n  GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const re = /(\\w+)/g;\n  const m = s.match(re);\n  return m? m.map((w) => w.toLowerCase()) : [];\n};\n\n/*\n  GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelsArray = vowels.map((v) => v.toLowerCase());\n  const vowelsArrayLength = vowelsArray.length;\n  const vowelsArraySort = vowelsArray.sort();\n  const vowelsArraySortLength = vowelsArraySort.length;\n  let vowelsArraySortIndex = 0;\n  let vowelsArraySortValue = 0;\n  let vowelsArraySortValueIndex = 0;\n  let vowelsArraySortValueValue = 0;\n  let vowelsArraySortValueValueIndex = 0;\n  let vowelsArraySortValueValueValue = 0;\n  let vowelsArraySortValueValueValueIndex = 0;\n  let vowelsArraySortValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueIndex = 0;\n  let vowelsArraySortValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueIndex = 0;\n  let vowelsArraySortValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueIndex = 0;\n  let vowelsArraySortValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueIndex = 0;\n  let vowelsArraySortValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueIndex = 0;\n  let vowelsArraySortValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueIndex = 0;\n  let vowelsArraySortValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let vowelsArraySortValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No';\n  let isParen = true;\n  let isParenInside = false;\n  let isParenInsideParen = false;\n  let isParenInsideParenParen = false;\n  let isParenInsideParenParenParen = false;\n  let isParenInsideParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParenParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParenParenParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParenParenParenParenParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParen = false;\n  let isParenInsideParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParenParen", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  let longest = ''\n  let maxLength = 0\n  let maxLengthIndex = 0\n  let maxLengthLength = 0\n  let maxLengthLengthIndex = 0\n  let maxLengthLengthLength = 0\n  let maxLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLength = 0\n  let maxLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLengthLengthLengthLengthIndex = 0\n  let maxLengthLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return [arr[maxIndex], maxIndex];\n};\n\n// Given a sorted array nums, return indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of any string).\n// Return the start and end indices of the two numbers such that they \n// are such that nums[i] + nums[j] == target.\n// You may assume that each input would have exactly one solution.\n// You may not use extra space (extra space is equal to one less than the \n// maximum length of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/121", "prompt": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  let evenSum2 = 0;\n  let oddSum2 = 0;\n  let evenSum3 = 0;\n  let oddSum3 = 0;\n  let evenSum4 = 0;\n  let oddSum4 = 0;\n  let evenSum5 = 0;\n  let oddSum5 = 0;\n  let evenSum6 = 0;\n  let oddSum6 = 0;\n  let evenSum7 = 0;\n  let oddSum7 = 0;\n  let evenSum8 = 0;\n  let oddSum8 = 0;\n  let evenSum9 = 0;\n  let oddSum9 = 0;\n  let evenSum10 = 0;\n  let oddSum10 = 0;\n  let evenSum11 = 0;\n  let oddSum11 = 0;\n  let evenSum12 = 0;\n  let oddSum12 = 0;\n  let evenSum13 = 0;\n  let oddSum13 = 0;\n  let evenSum14 = 0;\n  let oddSum14 = 0;\n  let evenSum15 = 0;\n  let oddSum15 = 0;\n  let evenSum16 = 0;\n  let oddSum16 = 0;\n  let evenSum17 = 0;\n  let oddSum17 = 0;\n  let evenSum18 = 0;\n  let oddSum18 = 0;\n  let evenSum19 = 0;\n  let oddSum19 = 0;\n  let evenSum20 = 0;\n  let oddSum20 = 0;\n  let evenSum21 = 0;\n  let oddSum21 = 0;\n  let evenSum22 = 0;\n  let oddSum22 = 0;\n  let evenSum23 = 0;\n  let oddSum23 = 0;\n  let evenSum24 = 0;\n  let oddSum24 = 0;\n  let evenSum25 = 0;\n  let oddSum25 = 0;\n  let evenSum26 = 0;\n  let oddSum26 = 0;\n  let evenSum27 = 0;\n  let oddSum27 = 0;\n  let evenSum28 = 0;\n  let oddSum28 = 0;\n  let evenSum29 = 0;\n  let oddSum29 = 0;\n  let evenSum30 = 0;\n  let oddSum30 = 0;\n  let evenSum31 = 0;\n  let oddSum31 = 0;\n  let evenSum32 = 0;\n  let oddSum32 = 0;\n  let evenSum33 = 0;\n  let oddSum33 = 0;\n  let evenSum34 = 0;\n  let oddSum34 = 0;\n  let evenSum35 = 0;\n  let oddSum35 = 0;\n  let evenSum36 = 0;\n  let oddSum36 = 0;\n  let evenSum37 = 0;\n  let oddSum37 = 0;\n  let evenSum38 = 0;\n  let oddSum38 = 0;\n  let evenSum39 = 0;\n  let oddSum39 = 0;\n  let evenSum40 = 0;\n  let oddSum40 = 0;\n  let evenSum41 = 1;\n  let oddSum41 = 1;\n  let evenSum42 = 1;\n  let oddSum42 = 1;\n  let evenSum43 = 1;\n  let oddSum43 = 1;\n  let evenSum44 = 1;\n  let oddSum44 = 1;\n  let evenSum45 = 1;\n  let oddSum45 = 1;\n  let evenSum46 = 1;\n  let oddSum46 = 1;\n  let evenSum47 = 1;\n  let oddSum47 = 1;\n  let evenSum48 = 1;\n  let oddSum48 = 1;\n  let evenSum49 = 1;\n  let oddSum49 = 1;\n  let evenSum50 = 1;\n  let oddSum50 = 1;\n  let evenSum51 = 1;\n  let oddSum51 = 1;\n  let evenSum52 = 1;\n  let oddSum52 = 1;\n  let evenSum53 = 1;\n  let oddSum53 = 1;\n  let evenSum54 = 1;\n  let oddSum54 = 1;\n  let evenSum55 = 1;\n  let oddSum55 = 1;\n  let evenSum56 = 1;\n  let oddSum56 = 1;\n  let evenSum57 = 1;\n  let oddSum57 = 1;\n  let evenSum58 = 1;\n  let oddSum58 = 1;\n  let evenSum59 = 1;\n  let oddSum59 = 1;\n  let evenSum60 = 1;\n  let oddSum60 = 1;\n  let evenSum61 = 1;\n  let oddSum61 = 1;\n  let evenSum62 = 1;\n  let oddSum62 = 1;\n  let evenSum63 = 1;\n  let oddSum63 = 1;\n  let evenSum64 = 1;\n  let oddSum64 = 1;\n  let evenSum65 = 1;\n  let oddSum65 = 1;\n  let evenSum66 = 1;\n  let oddSum66 = 1;\n  let evenSum67 = 1;\n  let oddSum67 = 1;\n  let evenSum68 = 1;\n  let oddSum68 = 1;\n  let evenSum69 = 1;\n  let oddSum69 = 1;\n  let evenSum70 = 1;\n  let oddSum70 = 1;\n  let evenSum71 = 1;\n  let oddSum71 = 1;\n  let evenSum72 = 1;\n  let oddSum72 = 1;\n  let evenSum73 = 1;\n  let oddSum73 = 1;\n  let evenSum74 = 1;\n  let oddSum74 = 1;\n  let evenSum75 = 1;\n  let oddSum75 = 1;\n  let evenSum76 = 1;\n  let oddSum76 = 1;\n  let evenSum77 = 1;\n  let oddSum77 = 1;\n  let evenSum78 = 1;\n  let oddSum78 = 1;\n  let evenSum79 = 1;\n  let oddSum79 = 1;\n  let evenSum80 = 1;\n  let oddSum80 = 1;\n  let evenSum81 = 1;\n  let oddSum81 = 1;\n  let evenSum82 = 1;\n  let oddSum82 = 1;\n  let evenSum83 = 1;\n  let oddSum83 = 1;\n  let evenSum84 = 1;\n  let oddSum84 = 1;\n  let evenSum85 = 1;\n  let oddSum85 = 1;\n  let evenSum86 = 1;\n  let oddSum86 = 1;\n  let evenSum87 = 1;\n  let oddSum87 = 1;\n  let evenSum88 = 1;\n  let oddSum88 = 1;\n  let evenSum89 = 1;\n  let oddSum89 = 1;\n  let evenSum90 = 1;\n  let oddSum90 = 1;\n  let evenSum91 = 1;\n  let oddSum91 = 1;\n  let evenSum92 = 1;\n  let oddSum92 = 1;\n  let evenSum93 = 1;\n  let oddSum93 = 1;\n  let evenSum94 = 1;\n  let oddSum94 = 1;\n  let evenSum95 = 1;\n  let oddSum95 = 1;\n  let evenSum96 = 1;\n  let oddSum96 = 1;\n  let evenSum97 = 1;\n  let oddSum97 = 1;\n  let evenSum98 = 1;\n  let oddSum98 = 1;\n  let evenSum99 = 1;\n  let oddSum99 = 1;\n  let evenSum100 = 1;\n  let oddSum100 = 1;\n  let evenSum101 = 1;\n  let oddSum101 = 1;\n  let evenSum102 = 1;\n  let oddSum102 = 1;\n  let evenSum103 = 1;\n  let oddSum103 = 1;\n  let evenSum104 = 1;\n  let oddSum104 = 1;\n  let evenSum105 = 1;\n  let oddSum105 = 1;\n  let evenSum106 = 1;\n  let oddSum106 = 1;\n  let evenSum107 = 1;\n  let oddSum107 = 1;\n  let evenSum108 = 1;\n  let oddSum108 = 1;\n  let evenSum109 = 1;\n  let oddSum109 = 1;\n  let evenSum110 = 1;\n  let oddSum110 = 1;\n  let evenSum111 = 1;\n  let oddSum111 = 1;\n  let evenSum112 = 1;\n  let oddSum112 = 1;\n  let evenSum113 = 1;\n  let oddSum113 = 1;\n  let evenSum114 = 1;\n  let oddSum114 = 1;\n  let evenSum115 = 1;\n  let oddSum115 = 1;\n  let evenSum116 = 1;\n  let oddSum116 = 1;\n  let evenSum117 = 1;\n  let oddSum117 = 1;\n  let evenSum118 = 1;\n  let oddSum118 = 1;\n  let evenSum119 = 1;\n  let oddSum119", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < arr.length) {\n    sum += arr[i];\n    if (j === k) {\n      res.push(sum);\n      sum = 0;\n    }\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst subElements = (arr, k) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < arr.length) {\n    sum += arr[i];\n    if (j === k) {\n      res.push(sum);\n      sum = 0;\n    }\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst mulElements = (arr, k) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < arr.length) {\n    sum += arr[i] * k;\n    if (j === k) {\n      res.push(sum);\n      sum = 0;\n    }\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst divElements = (arr, k) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < arr.length) {\n    sum += arr[i] / k;\n    if (j === k) {\n      res.push(sum);\n      sum = 0;\n    }\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst modElements = (arr, k) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < arr.length) {\n    sum += arr[i] % k;\n    if (j === k) {\n      res.push(sum);\n      sum = 0;\n    }\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst powElements = (arr, k) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < arr.length) {\n    sum += arr[i] ** k;\n    if (j === k) {\n      res.push(sum);\n      sum = 0;\n    }\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst powElementsMod = (arr, k) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < arr.length) {\n    sum += arr[i] ** k;\n    if (j === k) {\n      res.push(sum);\n      sum = 0;\n    }\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst powElementsDiv = (arr, k) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < arr.length) {\n    sum += arr[i] ** k;\n    if (j === k) {\n      res.push(sum);\n      sum = 0;\n    }\n    i++;\n    j++;\n  }\n  return res;\n};\n\n/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mos", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz = [collatz[0], collatz[1]];\n  }\n  return collatz;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUE OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz = [collatz[0], collatz[1]];\n  }\n  return collatz;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUE OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz = [collatz[0], collatz[1]];\n  }\n  return collatz;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUE OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [1, 1];\n  for (let i = 1; i <= n; i++) {\n    collatz = [collatz[0], collatz[1]];\n  }\n  return collatz;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREviou", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/124", "prompt": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateObj = new Date(date);\n  const year = dateObj.getFullYear();\n  const month = dateObj.getMonth() + 1;\n  const day = dateObj.getDate();\n  const dateString = `${year}-${month}-${day}`;\n  const isValid = isValidDate(dateString);\n  return isValid;\n};\n\n/**\n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Validates date in format MM-DD-YYYY\n * \n * Valid", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1, ... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const wordList = txt.split(/\\s+/);\n  const wordListLength = wordList.length;\n  const wordListArray = [];\n  for (let i = 0; i < wordListLength; i++) {\n    const word = wordList[i];\n    if (word.length > 0) {\n      wordListArray.push(word);\n    }\n  }\n  return wordListArray;\n};\n\n/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArray = (txt) => {\n  const wordList = txt.split(/\\s+/);\n  const wordListLength = wordList.length;\n  const wordListArray = [];\n  for (let i = 0; i < wordListLength; i++) {\n    const word = wordList[i];\n    if (word.length > 0) {\n      wordListArray.push(word);\n    }\n  }\n  return wordListArray;\n};\n\n/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArray2 = (txt) => {\n  const wordList = txt.split(/\\s+/);\n  const wordListLength = wordList.length;\n  const wordListArray = [];\n  for (let i = 0; i < wordListLength; i++) {\n    const word = wordList[i];\n    if (word.length > 0) {\n      wordListArray.push(word);\n    }\n  }\n  return wordListArray;\n};\n\n/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArray3 = (txt) => {\n  const wordList = txt.split(/\\s+/);\n  const wordListLength = wordList.length;\n  const wordListArray = [];\n  for (let i = 0; i < wordListLength; i++) {\n    const word = wordList[i];\n    if (word.length > 0) {\n      wordListArray.push(word);\n    }\n  }\n  return wordListArray;\n};\n\n/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArray4 = (txt) => {\n  const wordList = txt.split(/\\s+/);\n  const wordListLength = wordList.length;\n  const wordListArray = [];\n  for (let i = 0; i < wordListLength; i++) {\n    const word = wordList[i];\n    if (word.length > 0) {\n      wordListArray.push(word);\n    }\n  }\n  return wordListArray;\n};\n\n/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsArray5 = (txt) => {\n  const wordList = txt.split(/\\s+/);\n  const wordListLength = wordList.length;\n  const wordListArray = [];\n  for (let i = 0; i < wordListLength; i++) {\n    const word = wordList[i];\n    if (word.length > 0) {\n      wordListArray.push(word);\n    }\n  }\n  return wordListArray;\n};\n\n/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const nums = lst.map(Number)\n  const numsSorted = nums.sort((a, b) => a - b)\n  return numsSorted.every((num) => num >= 0)\n}\n\n/* Given a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in DescENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDescended = (lst) => {\n  const nums = lst.map(Number)\n  const numsSorted = nums.sort((a, b) => b - a)\n  return numsSorted.every((num) => num >= 0)\n}\n\n/* Given a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isAscended = (lst) => {\n  const nums = lst.map(Number)\n  const numsSorted = nums.sort((a, b) => a - b)\n  return numsSorted.every((num) => num >= 0)\n}\n\n/* Given a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in DescENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDescendedInG = (lst) => {\n  const nums = lst.map(Number)\n  const numsSorted = nums.sort((a, b) => b - a)\n  return numsSorted.every((num) => num >= 0)\n}\n\n/* Given a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isAscendedInG = (lst) => {\n  const nums = lst.map(Number)\n  const numsSorted = nums.sort((a, b) => a - b)\n  return numsSorted.every((num) => num >= 0)\n}\n\n/* Given a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in DescENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isDescendedInG = (lst) => {\n  const nums = lst.map(Number)\n  const numsSorted = nums.sort((a, b) => b - a)\n  return numsSorted.every((num) => num >= 0)\n}\n\n/* Given a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 < start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (start1 > start2) return false;\n  if (end1 < end2) return false;\n  if (start1 > end1) return false;\n  if (end1 > start2) return false;\n  if (start1 < start2) return false;\n  if (end1 > end2) return false;\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign;\n    sign = sign > 0? 1 : -1;\n  }\n  return sign * sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsMulti = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign;\n    sign = sign > 0? 1 : -1;\n  }\n  return sign * sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSignsMulti([1, 2, 2, -4]) == -9\n  >>> prodSignsMulti([0, 1]) == 0\n  >>> prodSignsMulti([]) == null\n  */\nconst prodSignsMultiMulti = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign;\n    sign = sign > 0? 1 : -1;\n  }\n  return sign * sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSignsMultiMulti([1, 2, 2, -4]) == -9\n  >>> prodSignsMultiMulti([0, 1]) == 0\n  >>> prodSignsMultiMulti([]) == null\n  */\nconst prodSignsMultiMultiMulti = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign;\n    sign = sign > 0? 1 : -1;\n  }\n  return sign * sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSignsMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> prodSignsMultiMultiMulti([0, 1]) == 0\n  >>> prodSignsMultiMultiMulti([]) == null\n  */\nconst prodSignsMultiMultiMultiMulti = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign;\n    sign = sign > 0? 1 : -1;\n  }\n  return sign * sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSignsMultiMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> prodSignsMultiMultiMultiMulti([0, 1]) == 0\n  >>> prodSignsMultiMultiMultiMulti([]) == null\n  */\nconst prodSignsMultiMultiMultiMultiMulti = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign;\n    sign = sign > 0? 1 : -1;\n  }\n  return sign * sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSignsMultiMultiMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> prodSignsMultiMultiMultiMultiMulti([0, 1]) == 0\n  >>> prodSignsMultiMultiMultiMultiMulti([]) == null\n  */\nconst prodSignsMultiMultiMultiMultiMultiMulti = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * sign;\n    sign = sign > 0? 1 : -1;\n  }\n  return sign * sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSignsMultiMultiMultiMultiMulti([1, 2, 2, -4]) == -9\n  >>> prodSignsMultiMultiMultiMultiMultiMulti([0, 1]) == 0\n  >>> prodSignsMultiMultiMultiMultiMulti([]) == null\n  */\nconst prodSignsMultiMultiMultiMultiMulti = (arr) => {\n  let sum = 0;\n  let sign = 1;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  const aIsZero = a === 0\n  const bIsZero = a === 0\n  const aIsOne = a === 1\n  const bIsOne = a === 1\n  const aIsTwo = a === 2\n  const bIsTwo = a === 2\n  const aIsThree = a === 3\n  const bIsThree = a === 3\n  const aIsFour = a === 4\n  const bIsFour = a === 4\n  const aIsFive = a === 5\n  const bIsFive = a === 5\n  const aIsSix = a === 6\n  const bIsSix = a === 6\n  const aIsSeven = a === 7\n  const bIsSeven = a === 7\n  const aIsEight = a === 8\n  const bIsEight = a === 8\n  const aIsNine = a === 9\n  const bIsNine = a === 9\n  const aIsTen = a === 10\n  const bIsTen = a === 10\n  const aIsEleven = a === 11\n  const bIsEleven = a === 11\n  const aIsTwelve = a === 12\n  const bIsTwelve = a === 12\n  const aIsThirteen = a === 13\n  const bIsThirteen = a === 13\n  const aIsFourteen = a === 14\n  const bIsFourteen = a === 14\n  const aIsFifteen = a === 15\n  const bIsFifteen = a === 15\n  const aIsSixteen = a === 16\n  const bIsSixteen = a === 16\n  const aIsSeventeen = a === 17\n  const bIsSeventeen = a === 17\n  const aIsEighteen = a === 18\n  const bIsEighteen = a === 18\n  const aIsNineteen = a === 19\n  const bIsNineteen = a === 19\n  const aIsTwenty = a === 20\n  const bIsTwenty = a === 20\n  const aIsThirty = a === 21\n  const bIsThirty = a === 21\n  const aIsForty = a === 22\n  const bIsForty = a === 22\n  const aIsFifty = a === 23\n  const bIsFifty = a === 23\n  const aIsSixty = a === 24\n  const bIsSixty = a === 24\n  const aIsSeventy = a === 25\n  const bIsSeventy = a === 25\n  const aIsEighty = a === 26\n  const bIsEighty = a === 26\n  const aIsNinety = a === 27\n  const bIsNinety = a === 27\n  const aIsTwentyOne = a === 28\n  const bIsTwentyOne = a === 28\n  const aIsTwentyTwo = a === 29\n  const bIsTwentyTwo = a === 29\n  const aIsTwentyThree = a === 30\n  const bIsTwentyThree = a === 30\n  const aIsTwentyFour = a === 31\n  const bIsTwentyFour = a === 31\n  const aIsTwentyFive = a === 32\n  const bIsTwentyFive = a === 32\n  const aIsTwentySix = a === 33\n  const bIsTwentySix = a === 33\n  const aIsTwentySeven = a === 34\n  const bIsTwentySeven = a === 34\n  const aIsTwentyEight = a === 35\n  const bIsTwentyEight = a === 35\n  const aIsTwentyNine = a === 36\n  const bIsTwentyNine = a === 36\n  const aIsThirtyTwo = a === 37\n  const bIsThirtyTwo = a === 37\n  const aIsThirtyThree = a === 38\n  const bIsThirtyThree = a === 38\n  const aIsThirtyFour = a === 39\n  const bIsThirtyFour = a === 39\n  const aIsThirtyFive = a === 40\n  const bIsThirtyFive = a === 40\n  const aIsThirtySix = a === 41\n  const bIsThirtySix = a === 41\n  const aIsThirtySeven = a === 42\n  const bIsThirtySeven = a === 42\n  const aIsThirtyEight = a === 43\n  const bIsThirtyEight = a === 43\n  const aIsThirtyNine = a === 44\n  const bIsThirtyNine = a === 44\n  const aIsFourtyTwo = a === 45\n  const bIsFourtyTwo = a === 45\n  const aIsFourtyThree = a === 46\n  const bIsFourtyThree = a === 46\n  const aIsFourtyFour = a === 47\n  const bIsFourtyFour = a === 47\n  const aIsFourtyFive = a === 48\n  const bIsFourtyFive = a === 48\n  const aIsFourtySix = a === 49\n  const bIsFourtySix = a === 49\n  const aIsFourtySeven = a === 50\n  const bIsFourtySeven = a === 50\n  const aIsFourtyEight = a === 51\n  const bIsFourtyEight = a === 51\n  const aIsFourtyNine = a === 52\n  const bIsFourtyNine = a === 52\n  const aIsFiftyTwo = a === 53\n  const bIsFiftyTwo = a === 53\n  const aIsFiftyThree = a === 54\n  const bIsFiftyThree = a === 54\n  const aIsFiftyFour = a === 55\n  const bIsFiftyFour = a === 55\n  const aIsFiftyFive = a === 56\n  const bIsFiftyFive = a === 56\n  const aIsFiftySix = a === 57\n  const bIsFiftySix = a === 57\n  const aIsFiftySeven = a === 58\n  const bIsFiftySeven = a === 58\n  const aIsFiftyEight = a === 59\n  const bIsFiftyEight = a === 59\n  const aIsFiftyNine = a === 60\n  const bIsFiftyNine = a === 60\n  const aIsSixtyTwo = a === 61\n  const bIsSixtyTwo = a === 61\n  const aIsSixtyThree = a === 62\n  const bIsSixtyThree = a === 62\n  const aIsSixtyFour = a === 63\n  const bIsSixtyFour = a === 63\n  const aIsSixtyFive = a === 64\n  const bIsSixtyFive = a === 64\n  const aIsSixtySix = a === 65", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/130", "prompt": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let sum = 0;\n  let i;\n  if (n <= 1) {\n    arr.push(n);\n    return arr;\n  }\n  for (i = 2; i <= n; i++) {\n    sum += i;\n    arr.push(sum);\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(21) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  */\nconst fibonacci = (n) => {\n  let arr = [];\n  let sum = 0;\n  let i;\n  if (n <= 1) {\n    arr.push(n);\n    return arr;\n  }\n  for (i = 2; i <= n; i++) {\n    sum += i;\n    arr.push(sum);\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by 3.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(21) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  */\nconst fibonacciDivisible = (n) => {\n  let arr = [];\n  let sum = 0;\n  let i;\n  if (n <= 1) {\n    arr.push(n);\n    return arr;\n  }\n  for (i = 2; i <= n; i++) {\n    sum += i;\n    if (sum % 3 === 0) {\n      arr.push(sum);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by 3 AND the sum is divisible by 5.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(21) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  */\nconst fibonacciDivisibleAndDivisibleBy5 = (n) => {\n  let arr = [];\n  let sum = 0;\n  let i;\n  if (n <= 1) {\n    arr.push(n);\n    return arr;\n  }\n  for (i = 2; i <= n; i++) {\n    sum += i;\n    if (sum % 3 === 0 && sum % 5 === 0) {\n      arr.push(sum);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by 3 AND the sum is divisible by 5.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(21) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  */\nconst fibonacciDivisibleAndDivisibleBy15 = (n) => {\n  let arr = [];\n  let sum = 0;\n  let i;\n  if (n <= 1) {\n    arr.push(n);\n    return arr;\n  }\n  for (i = 2; i <= n; i++) {\n    sum += i;\n    if (sum % 3 === 0 && sum % 5 === 0 && sum % 15 === 0) {\n      arr.push(sum);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by 3 AND the sum is divisible by 7.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(21) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  */\nconst fibonacciDivisibleAndDivisibleBy25 = (n) => {\n  let arr = [];\n  let sum = 0;\n  let i;\n  if (n <= 1) {\n    arr.push(n);\n    return arr;\n  }\n  for (i = 2; i <= n; i++) {\n    sum += i;\n    if (sum % 3 === 0 && sum % 5 === 0 && sum % 25 === 0) {\n      arr.push(sum);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by 3 AND the sum is divisible by 7.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(21) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  */\nconst fibonacciDivisibleAndDivisibleBy35 = (n) => {\n  let arr = [];\n  let sum = 0;\n  let i;\n  if (n <= 1) {\n    arr.push(n);\n    return arr;\n  }\n  for (i = 2; i <= n; i++) {\n    sum += i;\n    if (sum % 3 === 0 && sum % 5 === 0 && sum % 15 === 0 && sum % 25 === 0 && sum % 35 === 0) {\n      arr.push(sum);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by 3 AND the sum is divisible by 7.\n  Examples:\n  fibonacci(3) = [1, 1, 2, 3, 5, 8, 13]\n  fibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fibonacci(21) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  */\nconst fibonacciDivisibleAndDivisibleBy45 = (n) => {\n  let arr = [];\n  let sum = 0;\n  let i;\n  if (n <= 1) {\n    arr.push(n);\n    return arr;\n  }\n  for (i = 2; i <= n; i++) {\n    sum += i;\n    if (sum % 3 === 0 && sum % 5 === 0 && sum % 15 === 0 && sum % 25 === 0 && sum % 35 === 0 && sum % 45 === 0) {\n      arr.push(sum);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence whose sum is divisible by 3 AND the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  let rem = 0;\n  let rem2 = n % 2;\n  let rem3 = n % 3;\n  let rem4 = n % 4;\n  if (rem2 === 0 && rem3 === 0 && rem4 === 0) {\n    sum = 1;\n  } else if (rem2 === 0 && rem3 === 0 && rem4!== 0) {\n    sum = 2;\n  } else if (rem2 === 0 && rem3!== 0 && rem4 === 0) {\n    sum = 3;\n  } else if (rem2!== 0 && rem3 === 0 && rem4!== 0) {\n    sum = 4;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 5;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 6;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 7;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 8;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 9;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 10;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 11;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 12;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 13;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 14;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 15;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = sum * 2;\n  }\n  return sum;\n};\n\n/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  let rem = 0;\n  let rem2 = n % 2;\n  let rem3 = n % 3;\n  let rem4 = n % 4;\n  if (rem2 === 0 && rem3 === 0 && rem4 === 0) {\n    sum = 1;\n  } else if (rem2 === 0 && rem3 === 0 && rem4!== 0) {\n    sum = 2;\n  } else if (rem2 === 0 && rem3!== 0 && rem4 === 0) {\n    sum = 3;\n  } else if (rem2!== 0 && rem3 === 0 && rem4!== 0) {\n    sum = 4;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 5;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 6;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 7;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 8;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 9;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 10;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 11;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 12;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 13;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 14;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 15;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = sum * 2;\n  }\n  return sum;\n};\n\n/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  let rem = 0;\n  let rem2 = n % 2;\n  let rem3 = n % 3;\n  let rem4 = n % 4;\n  if (rem2 === 0 && rem3 === 0 && rem4 === 0) {\n    sum = 1;\n  } else if (rem2 === 0 && rem3 === 0 && rem4!== 0) {\n    sum = 2;\n  } else if (rem2 === 0 && rem3!== 0 && rem4 === 0) {\n    sum = 3;\n  } else if (rem2!== 0 && rem3 === 0 && rem4!== 0) {\n    sum = 4;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 5;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 6;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 7;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 8;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 9;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 10;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 11;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 12;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 13;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = sum * 2;\n  }\n  return sum;\n};\n\n/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  let rem = 0;\n  let rem2 = n % 2;\n  let rem3 = n % 3;\n  let rem4 = n % 4;\n  if (rem2 === 0 && rem3 === 0 && rem4 === 0) {\n    sum = 1;\n  } else if (rem2 === 0 && rem3 === 0 && rem4!== 0) {\n    sum = 2;\n  } else if (rem2 === 0 && rem3!== 0 && rem4 === 0) {\n    sum = 3;\n  } else if (rem2!== 0 && rem3 === 0 && rem4!== 0) {\n    sum = 4;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 5;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 6;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 7;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 8;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 9;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 10;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 11;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 12;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = 13;\n  } else if (rem2!== 0 && rem3!== 0 && rem4!== 0) {\n    sum = sum * 2;\n  }\n  return sum;\n};\n\n/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  let rem = 0;\n  let rem2 = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n  const isNested = (string) => {\n    const isNested = (string) => {\n      const isNested = (string) => {\n        const isNested = (string) => {\n          const isNested = (string) => {\n            const isNested = (string) => {\n              const isNested = (string) => {\n                const isNested = (string) => {\n                  const isNested = (string) => {\n                    const isNested = (string) => {\n                      const isNested = (string) => {\n                        const isNested = (string) => {\n                          const isNested = (string) => {\n                            const isNested = (string) => {\n                              const isNested = (string) => {\n                                const isNested = (string) => {\n                                  const isNested = (string) => {\n                                    const isNested = (string) => {\n                                      const isNested = (string) => {\n                                        const isNested = (string) => {\n                                          const isNested = (string) => {\n                                            const isNested = (string) => {\n                                              const isNested = (string) => {\n                                                const isNested = (string) => {\n                                                  const isNested = (string) => {\n                                                    const isNested = (string) => {\n                                                      const isNested = (string) => {\n                                                        const isNested = (string) => {\n                                                          const isNested = (string) => {\n                                                            const isNested = (string) => {\n                                                              const isNested = (string) => {\n                                                                const isNested = (string) => {\n                                                                  const isNested = (string) => {\n                                                                    const isNested = (string) => {\n                                                                        const isNested = (string) => {\n                                                                          const isNested = (string) => {\n                                                                            const isNested = (string) => {\n                                                                              const isNested = (string) => {\n                                                                                const isNested = (string) => {\n                                                                                  const isNested = (string) => {\n                                                                                    const isNested = (string) => {\n                                                                                      const isNested = (string) => {\n                                                                                        const isNested = (string) => {\n                                                                                          const isNested = (string) => {\n                                                                                            const isNested = (string) => {\n                                                                                              const isNested = (string) => {\n                                                                                                const isNested = (string) => {\n                                                                                                  const isNested = (string) => {\n                                                                                                    const isNested = (string) => {\n                                                                                                      const isNested = (string) => {\n                                                                                                        const isNested = (string) => {\n                                                                                                          const isNested = (string) => {\n                                                                                                            const isNested = (string) => {\n                                                                                                              const isNested = (string) => {\n                                                                                                                const isNested = (string) => {\n                                                                                                                  const isNested = (string) => {\n                                                                                                                    const isNested = (string) => {\n                                                                                                                      const isNested = (string) => {\n                                                                                                                        const isNested = (string) => {\n                                                                                                                          const isNested = (string) => {\n                                                                                                                            const isNested = (string) => {\n                                                                                                                              const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {\n                                                                                                                                const isNested = (string) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  let squareSumOfSquares = 0;\n  let squareSumOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquares = 0;\n  let squareSumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOf", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/134", "prompt": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \"a\" && txt.indexOf(\"e\") === -1;\n};\n\n/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \"a\" && txt.indexOf(\"e\") === -1;\n};\n\n/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \"a\" && txt.indexOf(\"e\") === -1;\n};\n\n/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \"a\" && txt.indexOf(\"e\") === -1;\n};\n\n/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \"a\" && txt.indexOf(\"e\") === -1;\n};\n\n/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \"a\" && txt.indexOf(\"e\") === -1;\n};\n\n/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar === \"a\" && txt.indexOf(\"e\") ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let len = arr.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let result = 0\n  let temp\n  let temp2\n  let temp3\n  let temp4\n  let temp5\n  let temp6\n  let temp7\n  let temp8\n  let temp9\n  let temp10\n  let temp11\n  let temp12\n  let temp13\n  let temp14\n  let temp15\n  let temp16\n  let temp17\n  let temp18\n  let temp19\n  let temp20\n  let temp21\n  let temp22\n  let temp23\n  let temp24\n  let temp25\n  let temp26\n  let temp27\n  let temp28\n  let temp29\n  let temp30\n  let temp31\n  let temp32\n  let temp33\n  let temp34\n  let temp35\n  let temp36\n  let temp37\n  let temp38\n  let temp39\n  let temp40\n  let temp41\n  let temp42\n  let temp43\n  let temp44\n  let temp45\n  let temp46\n  let temp47\n  let temp48\n  let temp49\n  let temp50\n  let temp51\n  let temp52\n  let temp53\n  let temp54\n  let temp55\n  let temp56\n  let temp57\n  let temp58\n  let temp59\n  let temp60\n  let temp61\n  let temp62\n  let temp63\n  let temp64\n  let temp65\n  let temp66\n  let temp67\n  let temp68\n  let temp69\n  let temp70\n  let temp71\n  let temp72\n  let temp73\n  let temp74\n  let temp75\n  let temp76\n  let temp77\n  let temp78\n  let temp79\n  let temp80\n  let temp81\n  let temp82\n  let temp83\n  let temp84\n  let temp85\n  let temp86\n  let temp87\n  let temp88\n  let temp89\n  let temp90\n  let temp91\n  let temp92\n  let temp93\n  let temp94\n  let temp95\n  let temp96\n  let temp97\n  let temp98\n  let temp99\n  let temp100\n  let temp101\n  let temp102\n  let temp103\n  let temp104\n  let temp105\n  let temp106\n  let temp107\n  let temp108\n  let temp109\n  let temp110\n  let temp111\n  let temp112\n  let temp113\n  let temp114\n  let temp115\n  let temp116\n  let temp117\n  let temp118\n  let temp119\n  let temp120\n  let temp121\n  let temp122\n  let temp123\n  let temp124\n  let temp125\n  let temp126\n  let temp127\n  let temp128\n  let temp129\n  let temp130\n  let temp131\n  let temp132\n  let temp133\n  let temp134\n  let temp135\n  let temp136\n  let temp137\n  let temp138\n  let temp139\n  let temp140\n  let temp141\n  let temp142\n  let temp143\n  let temp144\n  let temp145\n  let temp146\n  let temp147\n  let temp148\n  let temp149\n  let temp150\n  let temp151\n  let temp152\n  let temp153\n  let temp154\n  let temp155\n  let temp156\n  let temp157\n  let temp158\n  let temp159\n  let temp160\n  let temp161\n  let temp162\n  let temp163\n  let temp164\n  let temp165\n  let temp166\n  let temp167\n  let temp168\n  let temp169\n  let temp170\n  let temp171\n  let temp172\n  let temp173\n  let temp174\n  let temp175\n  let temp176\n  let temp177\n  let temp178\n  let temp179\n  let temp180\n  let temp181\n  let temp182\n  let temp183\n  let temp184\n  let temp185\n  let temp186\n  let temp187\n  let temp188\n  let temp189\n  let temp190\n  let temp191\n  let temp192\n  let temp193\n  let temp194\n  let temp195\n  let temp196\n  let temp197\n  let temp198\n  let temp199\n  let temp200\n  let temp201\n  let temp202\n  let temp203\n  let temp204\n  let temp205\n  let temp206\n  let temp207\n  let temp208\n  let temp209\n  let temp210\n  let temp211\n  let temp212\n  let temp213\n  let temp214\n  let temp215\n  let temp216\n  let temp217\n  let temp218\n  let temp219\n  let temp220\n  let temp221\n  let temp222\n  let temp223\n  let temp224\n  let temp225\n  let temp226\n  let temp227\n  let temp228\n  let temp229\n  let temp230\n  let temp231\n  let temp232\n  let temp233\n  let temp234\n  let temp235\n  let temp236\n  let temp237\n  let temp238\n  let temp239\n  let temp240\n  let temp241\n  let temp242\n  let temp243\n  let temp244\n  let temp245\n  let temp246\n  let temp247\n  let temp248\n  let temp249\n  let temp250\n  let temp251\n  let temp252\n  let temp253\n  let temp254\n  let temp255\n  let temp256\n  let temp257\n  let temp258\n  let temp259\n  let temp260\n  let temp261\n  let temp262\n  let temp263\n  let temp264\n  let temp265\n  let temp266\n  let temp267\n  let temp268\n  let temp269\n  let temp270\n  let temp271\n  let temp272\n  let temp273\n  let temp274\n  let temp275\n  let temp276\n  let temp277\n  let temp278\n  let temp279\n  let temp280\n  let temp281\n  let temp282\n  let temp283\n  let temp284\n  let temp285\n  let temp286\n  let temp287\n  let temp288\n  let temp289\n  let temp290\n  let temp291\n  let temp292\n  let temp293\n  let temp294\n  let temp295\n  let temp296\n  let temp297\n  let temp298\n  let temp299\n  let temp300\n  let temp301\n  let temp302\n  let temp303\n  let temp304\n  let temp305\n  let temp306\n  let temp307\n  let temp308\n  let temp309\n  let temp310\n  let temp311\n  let temp312\n  let temp313\n  let temp314\n  let temp315\n  let temp316\n  let temp317\n  let temp318\n  let temp319\n  let temp320\n  let temp321\n  let temp322\n  let temp323\n  let temp324\n  let temp325\n  let temp326\n  let temp327\n  let temp328\n  let temp329\n  let temp330\n  let temp331\n  let temp332\n  let temp33", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/136", "prompt": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of negativ integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestNegativeIntegers([]) == (null, null)\n  largestSmallestNegativeIntegers([0]) == (null, null)\n  */\nconst largestSmallestNegativeIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestPositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestPositiveIntegers([]) == (null, null)\n  largestSmallestPositiveIntegers([0]) == (null, null)\n  */\nconst largestSmallestPositiveIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of negativ integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestNegativeNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestNegativeNegativeIntegers([]) == (null, null)\n  largestSmallestNegativeNegativeIntegers([0]) == (null, null)\n  */\nconst largestSmallestNegativeNegativeIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestPositivePositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestPositivePositiveIntegers([]) == (null, null)\n  largestSmallestPositivePositiveIntegers([0]) == (null, null)\n  */\nconst largestSmallestPositivePositiveIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of negativ integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestNegativeNegativeNegativeIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestNegativeNegativeNegativeIntegers([]) == (null, null)\n  largestSmallestNegativeNegativeNegativeIntegers([0]) == (null, null)\n  */\nconst largestSmallestNegativeNegativeNegativeIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n};\n\n/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestPositivePositiveIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestPositivePositiveIntegers([]) == (null, null)\n  largestSmallestPositivePositiveIntegers([0]) == (null, null)\n  */\nconst largestSmallestPositivePositiveIntegers = (lst) => {\n  let largest = lst[0];\n  let smallest = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i] > largest) {\n      largest = lst[i];\n    }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n  const aFloat = parseFloat(a)\n  const bFloat = parseFloat(b)\n  const aIsFloat = typeof aFloat === \"number\"\n  const bIsFloat = typeof bFloat === \"number\"\n  const aIsString = typeof a === \"string\"\n  const bIsString = typeof b === \"string\"\n  const aIsNumber = typeof a === \"number\"\n  const bIsNumber = typeof b === \"number\"\n  const aIsNaN = isNaN(aFloat)\n  const bIsNaN = isNaN(bFloat)\n  const aIsNaN = isNaN(aIsFloat)\n  const bIsNaN = isNaN(bIsFloat)\n  const aIsNaN = isNaN(aIsString)\n  const bIsNaN = isNaN(bIsString)\n  const aIsNaN = isNaN(aIsNumber)\n  const bIsNaN = isNaN(bIsNumber)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(bIsNaN)\n  const aIsNaN = isNaN(aIsNaN)\n  const bIsNaN = isNaN(b", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const isEqualToSumEven = (numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, numBer, num", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/139", "prompt": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res *= i;\n  }\n  return res;\n};\n\n/*\n  A helper function to convert a number to a string in base 10\n  and to convert a number to a string in base 2\n  and to convert a number to a string in base 16\n*/\nconst toBase10 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 10); i >= 0; i--) {\n    res += '0';\n  }\n  return res + n.toString(10);\n};\n\n/*\n  A helper function to convert a number to a string in base 2\n  and to convert a number to a string in base 16\n*/\nconst toBase2 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    res += '0';\n  }\n  return res + n.toString(2);\n};\n\n/*\n  A helper function to convert a number to a string in base 16\n  and to convert a number to a string in base 10\n*/\nconst toBase16 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 16); i >= 0; i--) {\n    res += '0';\n  }\n  return res + n.toString(16);\n};\n\n/*\n  A helper function to convert a number to a string in base 10\n  and to convert a number to a string in base 2\n*/\nconst toBase10And2 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 10); i >= 0; i--) {\n    res += toBase10(i);\n  }\n  return res + toBase2(n);\n};\n\n/*\n  A helper function to convert a number to a string in base 10\n  and to convert a number to a string in base 2\n*/\nconst toBase10And16 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 16); i >= 0; i--) {\n    res += toBase10(i);\n  }\n  return res + toBase16(n);\n};\n\n/*\n  A helper function to convert a number to a string in base 10\n  and to convert a number to a string in base 2\n*/\nconst toBase10And16And2 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 10); i >= 0; i--) {\n    res += toBase10And2(i);\n  }\n  return res + toBase16And2(n);\n};\n\n/*\n  A helper function to convert a number to a string in base 10\n  and to convert a number to a string in base 2\n*/\nconst toBase10And16And16 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 16); i >= 0; i--) {\n    res += toBase10And16(i);\n  }\n  return res + toBase16And16(n);\n};\n\n/*\n  A helper function to convert a number to a string in base 10\n  and to convert a number to a string in base 2\n*/\nconst toBase10And16And16And2 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 10); i >= 0; i--) {\n    res += toBase10And16And2(i);\n  }\n  return res + toBase16And16And2(n);\n};\n\n/*\n  A helper function to convert a number to a string in base 10\n  and to convert a number to a string in base 2\n*/\nconst toBase10And16And16And16 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 16); i >= 0; i--) {\n    res += toBase10And16And16(i);\n  }\n  return res + toBase16And16And16(n);\n};\n\n/*\n  A helper function to convert a number to a string in base 10\n  and to convert a number to a string in base 2\n*/\nconst toBase10And16And16And16And2 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 10); i >= 0; i--) {\n    res += toBase10And16And16And2(i);\n  }\n  return res + toBase16And16And16And2(n);\n};\n\n/*\n  A helper function to convert a number to a string in base 10\n  and to convert a number to a string in base 2\n*/\nconst toBase10And16And16And16And16 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 16); i >= 0; i--) {\n    res += toBase10And16And16And16(i);\n  }\n  return res + toBase16And16And16And16(n);\n};\n\n/*\n  A helper function to convert a number to a string in base 10\n  and to convert a number to a string in base 2\n*/\nconst toBase10And16And16And16And16And2 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 10); i >= 0; i--) {\n    res += toBase10And16And16And16And2(i);\n  }\n  return res + toBase16And16And16And16And2(n);\n};\n\n/*\n  A helper function to convert a number to a string in base 10\n  and to convert a number to a string in base 2\n*/\nconst toBase10And16And16And16And16And16And16 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 16); i >= 0; i--) {\n    res += toBase10And16And16And16And16And16(i);\n  }\n  return res + toBase16And16And16And16And16And16(n);\n};\n\n/*\n  A helper function to convert a number to a string in base 10\n  and to convert a number to a string in base 2\n*/\nconst toBase10And16And16And16And16And16And16And16And16And2 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 10); i >= 0; i--) {\n    res += toBase10And16And16And16And16And16And16And16And2(i);\n  }\n  return res + toBase16And16And16And16And16And16And16And16And2(n);\n};\n\n/*\n  A helper function to convert a number to a string in base 10\n  and to convert a number to a string in base 2\n*/\nconst toBase10And16And16And16And16And16And16And16And16And16And16And16And16And16And2 = (n) => {\n  let res = '';\n  for (let i = Math.floor(n / 10); i >= 0; i--) {\n    res += toBase10And16And16And16And16And16And16And16And16And16And16And16And16And16And16And16And16And2(i);\n  }\n  return res + toBase16And16And16And16And16And16And16And16And16And16And16And16And16And16And16And16And16And16And2(n);\n};\n\n/*\n  A helper function to convert a number to a string in base ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const ret = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ').filter(Boolean);\n  return spaces.join(' ');\n}\n\n/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ').filter(Boolean);\n  return spaces.join(' ');\n}\n\n/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ').filter(Boolean);\n  return spaces.join(' ');\n}\n\n/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ').filter(Boolean);\n  return spaces.join(' ');\n}\n\n/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ').filter(Boolean);\n  return spaces.join(' ');\n}\n\n/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ').filter(Boolean);\n  return spaces.join(' ');\n}\n\n/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ').filter(Boolean);\n  return spaces.join(' ');\n}\n\n/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ').filter(Boolean);\n  return spaces.join(' ');\n}\n\n/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = text.split(' ').filter(Boolean);\n  return spaces.join(' ');\n}\n\n/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^([a-zA-Z0-9_\\.]+)$/;\n  const match = regex.test(file_name);\n  return match? 'Yes' : 'no';\n};\n\n/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileTypeCheck = (file_type) => {\n  const regex = /^([a-zA-Z0-9_\\.]+)$/;\n  const match = regex.test(file_type);\n  return match? 'Yes' : 'no';\n};\n\n/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileSizeCheck = (file_size) => {\n  const regex = /^([a-zA-Z0-9_\\.]+)$/;\n  const match = regex.test(file_size);\n  return match? 'Yes' : 'no';\n};\n\n/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileDateCheck = (file_date) => {\n  const regex = /^([a-zA-Z0-9_\\.]+)$/;\n  const match = regex.test(file_date);\n  return match? 'Yes' : 'no';\n};\n\n/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let res = 0\n  lst.forEach((item, index) => {\n    if (index === 0) res = item\n    else if (index === 1) res = item * item\n    else if (index === 2) res = item * item * item\n  })\n  return res\n}\n\n/*\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let res = 0\n  lst.forEach((item, index) => {\n    if (index === 0) res = item\n    else if (index === 1) res = item * item\n    else if (index === 2) res = item * item * item\n  })\n  return res\n}\n\n/*\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let res = 0\n  lst.forEach((item, index) => {\n    if (index === 0) res = item\n    else if (index === 1) res = item * item\n    else if (index === 2) res = item * item * item\n  })\n  return res\n}\n\n/*\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let res = 0\n  lst.forEach((item, index) => {\n    if (index === 0) res = item\n    else if (index === 1) res = item * item\n    else if (index === 2) res = item * item * item\n  })\n  return res\n}\n\n/*\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let res = 0\n  lst.forEach((item, index) => {\n    if (index === 0) res = item\n    else if (index === 1) res = item * item\n    else if (index === 2) res = item * item * item\n  })\n  return res\n}\n\n/*\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  return words.map((word) => word.trim().toLowerCase());\n};\n\n/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInWords = (sentence) => {\n  const words = sentence.split(\" \");\n  return words.map((word) => word.trim().toUpperCase());\n};\n\n/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"IS\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"GO FOR\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  return words.map((word) => word.trim().toUpperCase());\n};\n\n/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"IS\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"GO FOR\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInWordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  return words.map((word) => word.trim().toUpperCase());\n};\n\n/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"IS\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"GO FOR\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInWordsInSentenceInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  return words.map((word) => word.trim().toUpperCase());\n};\n\n/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"IS\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"GO FOR\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentenceInWordsInSentenceInWordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  return words.map((word) => word.trim().toUpperCase());\n};\n\n/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"IS\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"GO FOR\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n  let numer = parseInt(x, 10);\n  let denom = parseInt(n, 10);\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? true : false;\n  }\n  if (numer === 0 || denom === 0) {\n    return numer === 0? false : true;\n  }\n  if (numer === 0 || denom === 0) {\n    return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const points = []\n  const numsLen = nums.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let sum = 0\n  while (i < numsLen) {\n    if (nums[i] === -1) {\n      points.push([-1, -1])\n      i++\n      continue\n    }\n    if (nums[i] === 1) {\n      points.push([-1, 1])\n      i++\n      continue\n    }\n    if (nums[i] === -11) {\n      points.push([-1, -11])\n      i++\n      continue\n    }\n    if (nums[i] === -111) {\n      points.push([-1, -111])\n      i++\n      continue\n    }\n    if (nums[i] === -12) {\n      points.push([-1, -12])\n      i++\n      continue\n    }\n    if (nums[i] === -121) {\n      points.push([-1, -121])\n      i++\n      continue\n    }\n    if (nums[i] === -1211) {\n      points.push([-1, -1211])\n      i++\n      continue\n    }\n    if (nums[i] === -12111) {\n      points.push([-1, -12111])\n      i++\n      continue\n    }\n    if (nums[i] === -121111) {\n      points.push([-1, -121111])\n      i++\n      continue\n    }\n    if (nums[i] === -121111) {\n      points.push([-1, -121111])\n      i++\n      continue\n    }\n    if (nums[i] === -1211111) {\n      points.push([-1, -1211111])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111) {\n      points.push([-1, -12111111])\n      i++\n      continue\n    }\n    if (nums[i] === -121111111) {\n      points.push([-1, -121111111])\n      i++\n      continue\n    }\n    if (nums[i] === -1211111111) {\n      points.push([-1, -1211111111])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111111) {\n      points.push([-1, -12111111111])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112) {\n      points.push([-1, -12111111112])\n      i++\n      continue\n    }\n    if (nums[i] === -121111111121) {\n      points.push([-1, -121111111121])\n      i++\n      continue\n    }\n    if (nums[i] === -1211111111211) {\n      points.push([-1, -1211111111211])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112111) {\n      points.push([-1, -12111111112111])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112) {\n      points.push([-1, -12111111112112])\n      i++\n      continue\n    }\n    if (nums[i] === -121111111121121) {\n      points.push([-1, -121111111121121])\n      i++\n      continue\n    }\n    if (nums[i] === -1211111111211211) {\n      points.push([-1, -1211111111211211])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112111) {\n      points.push([-1, -12111111112112111])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112112) {\n      points.push([-1, -12111111112112112])\n      i++\n      continue\n    }\n    if (nums[i] === -121111111121121121) {\n      points.push([-1, -121111111121121121])\n      i++\n      continue\n    }\n    if (nums[i] === -1211111111211211211) {\n      points.push([-1, -1211111111211211211])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112112111) {\n      points.push([-1, -12111111112112112111])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112112112) {\n      points.push([-1, -12111111112112112112])\n      i++\n      continue\n    }\n    if (nums[i] === -121111111121121121121) {\n      points.push([-1, -121111111121121121121])\n      i++\n      continue\n    }\n    if (nums[i] === -1211111111211211211211) {\n      points.push([-1, -1211111111211211211211])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112112112112) {\n      points.push([-1, -12111111112112112112])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112112112111) {\n      points.push([-1, -12111111112112112112111])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112112112112) {\n      points.push([-1, -12111111112112112112])\n      i++\n      continue\n    }\n    if (nums[i] === -1211111111211211211211211) {\n      points.push([-1, -1211111111211211211211211])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112112112112112) {\n      points.push([-1, -12111111112112112112112])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112112112112111) {\n      points.push([-1, -12111111112112112112112111])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112112112112112) {\n      points.push([-1, -12111111112112112112112])\n      i++\n      continue\n    }\n    if (nums[i] === -1211111111211211211211211211) {\n      points.push([-1, -1211111111211211211211211211])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112112112112112112) {\n      points.push([-1, -12111111112112112112112])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112112112112112111) {\n      points.push([-1, -12111111112112112112112111])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112112112112112112) {\n      points.push([-1, -12111111112112112112112112])\n      i++\n      continue\n    }\n    if (nums[i] === -1211111111211211211211211211) {\n      points.push([-1, -1211111111211211211211211211])\n      i++\n      continue\n    }\n    if (nums[i] === -12111111112112112112112", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/146", "prompt": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const filter = (num) => {\n    const isOdd = (num % 2) === 1;\n    const isEven = (num % 2) === 0;\n    return isOdd && isEven;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the first N numbers in an array that are even.\n  For example:\n  evenFilter([3, 5, 7, 9]) => [3, 5, 7]\n  evenFilter([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst evenFilter = (nums) => {\n  const filter = (num) => {\n    const isEven = (num % 2) === 0;\n    return isEven;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the last N numbers in an array that are odd.\n  For example:\n  oddFilter([3, 5, 7, 9]) => [7, 9]\n  oddFilter([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst oddFilter = (nums) => {\n  const filter = (num) => {\n    const isOdd = (num % 2) === 1;\n    return isOdd;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the first N numbers in an array that are divisible by N.\n  For example:\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst divisibleBy = (nums, n) => {\n  const filter = (num) => {\n    const isDivisible = (num % n) === 0;\n    return isDivisible;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the last N numbers in an array that are divisible by N.\n  For example:\n  divisibleBy([3, 5, 7, 9]) => [7, 9]\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst divisibleBy = (nums, n) => {\n  const filter = (num) => {\n    const isDivisible = (num % n) === 0;\n    return isDivisible;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the first N numbers in an array that are divisible by N.\n  For example:\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst divisibleBy = (nums, n) => {\n  const filter = (num) => {\n    const isDivisible = (num % n) === 0;\n    return isDivisible;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the first N numbers in an array that are divisible by N.\n  For example:\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst divisibleBy = (nums, n) => {\n  const filter = (num) => {\n    const isDivisible = (num % n) === 0;\n    return isDivisible;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the first N numbers in an array that are divisible by N.\n  For example:\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst divisibleBy = (nums, n) => {\n  const filter = (num) => {\n    const isDivisible = (num % n) === 0;\n    return isDivisible;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the first N numbers in an array that are divisible by N.\n  For example:\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst divisibleBy = (nums, n) => {\n  const filter = (num) => {\n    const isDivisible = (num % n) === 0;\n    return isDivisible;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the first N numbers in an array that are divisible by N.\n  For example:\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst divisibleBy = (nums, n) => {\n  const filter = (num) => {\n    const isDivisible = (num % n) === 0;\n    return isDivisible;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the first N numbers in an array that are divisible by N.\n  For example:\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst divisibleBy = (nums, n) => {\n  const filter = (num) => {\n    const isDivisible = (num % n) === 0;\n    return isDivisible;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the first N numbers in an array that are divisible by N.\n  For example:\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst divisibleBy = (nums, n) => {\n  const filter = (num) => {\n    const isDivisible = (num % n) === 0;\n    return isDivisible;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the first N numbers in an array that are divisible by N.\n  For example:\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst divisibleBy = (nums, n) => {\n  const filter = (num) => {\n    const isDivisible = (num % n) === 0;\n    return isDivisible;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the first N numbers in an array that are divisible by N.\n  For example:\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst divisibleBy = (nums, n) => {\n  const filter = (num) => {\n    const isDivisible = (num % n) === 0;\n    return isDivisible;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the first N numbers in an array that are divisible by N.\n  For example:\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst divisibleBy = (nums, n) => {\n  const filter = (num) => {\n    const isDivisible = (num % n) === 0;\n    return isDivisible;\n  };\n  return nums.filter(filter);\n};\n\n/**\n  Filter out all but the first N numbers in an array that are divisible by N.\n  For example:\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  divisibleBy([3, 5, 7, 9]) => [3, 5, 7]\n  */\nconst divisibleBy = (nums, n) => {\n  const filter = (num) => {\n    const isDivisible = (num % n) === 0;\n    return isDivisible;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const triples = [];\n  let max = 0;\n  let maxTriple = 0;\n  for (let i = 0; i < n; i++) {\n    const triple = [i, i, i];\n    if (triples.includes(triple)) {\n      triples.push(triple);\n    } else {\n      triples.push(triple);\n    }\n  }\n  for (let i = 0; i < triples.length; i++) {\n    const triple = triples[i];\n    if (triple[0] > max) {\n      max = triple[0];\n      maxTriple = triple[1];\n    }\n  }\n  return maxTriple;\n};\n\n/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  const triples = [];\n  let max = 0;\n  let maxTriple = 0;\n  for (let i = 0; i < n; i++) {\n    const triple = [i, i, i];\n    if (triples.includes(triple)) {\n      triples.push(triple);\n    } else {\n      triples.push(triple);\n    }\n  }\n  for (let i = 0; i < triples.length; i++) {\n    const triple = triples[i];\n    if (triple[0] > max) {\n      max = triple[0];\n      maxTriple = triple[1];\n    }\n  }\n  return maxTriple;\n};\n\n/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  const triples = [];\n  let max = 0;\n  let maxTriple = 0;\n  for (let i = 0; i < n; i++) {\n    const triple = [i, i, i];\n    if (triples.includes(triple)) {\n      triples.push(triple);\n    } else {\n      triples.push(triple);\n    }\n  }\n  for (let i = 0; i < triples.length; i++) {\n    const triple = triples[i];\n    if (triple[0] > max) {\n      max = triple[0];\n      maxTriple = triple[1];\n    }\n  }\n  return maxTriple;\n};\n\n/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 10\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples4 = (n) => {\n  const triples = [];\n  let max = 0;\n  let maxTriple = 0;\n  for (let i = 0; i < n; i++) {\n    const triple = [i, i, i];\n    if (triples.includes(triple)) {\n      triples.push(triple);\n    } else {\n      triples.push(triple);\n    }\n  }\n  for (let i = 0; i < triples.length; i++) {\n    const triple = triples[i];\n    if (triple[0] > max) {\n      max = triple[0];\n      maxTriple = triple[1];\n    }\n  }\n  return maxTriple;\n};\n\n/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 15\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples5 = (n) => {\n  const triples = [];\n  let max = 0;\n  let maxTriple = 0;\n  for (let i = 0; i < n; i++) {\n    const triple = [i, i, i];\n    if (triples.includes(triple)) {\n      triples.push(triple);\n    } else {\n      triples.push(triple);\n    }\n  }\n  for (let i = 0; i < triples.length; i++) {\n    const triple = triples[i];\n    if (triple[0] > max) {\n      max = triple[0];\n      maxTriple = triple[1];\n    }\n  }\n  return maxTriple;\n};\n\n/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 20\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples6 = (n) => {\n  const triples = [];\n  let max = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Name = planet1.toUpperCase()\n  const planet2Name = planet2.toUpperCase()\n  const planet1Index = planet1Name.indexOf(\"N\")\n  const planet2Index = planet2Name.indexOf(\"N\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"E\")\n  const planet2Index = planet2Name.indexOf(\"E\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"S\")\n  const planet2Index = planet2Name.indexOf(\"S\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"W\")\n  const planet2Index = planet2Name.indexOf(\"W\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"T\")\n  const planet2Index = planet2Name.indexOf(\"T\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"R\")\n  const planet2Index = planet2Name.indexOf(\"R\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"N\")\n  const planet2Index = planet2Name.indexOf(\"N\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"E\")\n  const planet2Index = planet2Name.indexOf(\"E\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"S\")\n  const planet2Index = planet2Name.indexOf(\"S\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"W\")\n  const planet2Index = planet2Name.indexOf(\"W\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"T\")\n  const planet2Index = planet2Name.indexOf(\"T\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"R\")\n  const planet2Index = planet2Name.indexOf(\"R\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"N\")\n  const planet2Index = planet2Name.indexOf(\"N\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"E\")\n  const planet2Index = planet2Name.indexOf(\"E\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"S\")\n  const planet2Index = planet2Name.indexOf(\"S\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"W\")\n  const planet2Index = planet2Name.indexOf(\"W\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"T\")\n  const planet2Index = planet2Name.indexOf(\"T\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"R\")\n  const planet2Index = planet2Name.indexOf(\"R\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"N\")\n  const planet2Index = planet2Name.indexOf(\"N\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n  const planet1Index = planet1Name.indexOf(\"E\")\n  const planet2Index = planet2Name.indexOf(\"E\")\n  const planet1Name = planet1Name.slice(planet1Index + 1)\n  const planet2Name = planet2Name.slice(planet2Index + 1)\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sums = lst.map((item) => item.length);\n  const sorted = sums.sort((a, b) => a - b);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLength = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthAsc = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthAscDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescAscDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthAscDescDesc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescAsc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted.map((item) => item + \"\");\n};\n\nconst sortByLengthDescDescDescDescDescDescDescDescDescDescDescDescDescDescDescDesc", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/15", "prompt": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let retStr = '';\n  let retStrLen = n;\n  let retStrIndex = 0;\n  let retStrIndexMax = n;\n  let retStrIndexMin = 0;\n  let retStrIndexMaxInclusive = 0;\n  let retStrIndexMinInclusive = 0;\n  let retStrIndexMaxInclusiveInclusive = 0;\n  let retStrIndexMinInclusiveInclusive = 0;\n  let retStrIndexMaxInclusiveInclusiveInclusive = 0;\n  let retStrIndexMinInclusiveInclusiveInclusive = 0;\n  let retStrIndexMaxInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMinInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMaxInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMinInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMaxInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMinInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMaxInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMinInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMaxInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMinInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMaxInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMinInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMaxInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMinInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMaxInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMinInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMaxInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMinInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMaxInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMinInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMaxInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusive = 0;\n  let retStrIndexMinInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclusiveInclu", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x >= n || y >= n) {\n    return NaN;\n  }\n  return x === y? x : xOrY(n - 1, y, x);\n};\n\n/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x >= n || y >= n) {\n    return NaN;\n  }\n  return x === y? x : xOrY(n - 1, y, x);\n};\n\n/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x >= n || y >= n) {\n    return NaN;\n  }\n  return x === y? x : xOrY(n - 1, y, x);\n};\n\n/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x >= n || y >= n) {\n    return NaN;\n  }\n  return x === y? x : xOrY(n - 1, y, x);\n};\n\n/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x >= n || y >= n) {\n    return NaN;\n  }\n  return x === y? x : xOrY(n - 1, y, x);\n};\n\n/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x >= n || y >= n) {\n    return NaN;\n  }\n  return x === y? x : xOrY(n - 1, y, x);\n};\n\n/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x >= n || y >= n) {\n    return NaN;\n  }\n  return x === y? x : xOrY(n - 1, y, x);\n};\n\n/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x >= n || y >= n) {\n    return NaN;\n  }\n  return x === y? x : xOrY(n - 1, y, x);\n};\n\n/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x >= n || y >= n) {\n    return NaN;\n  }\n  return x === y? x : xOrY(n - 1, y, x);\n};\n\n/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x >= n || y >= n) {\n    return NaN;\n  }\n  return x === y? x : xOrY(n - 1, y, x);\n};\n\n/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x >= n || y >= n) {\n    return NaN;\n  }\n  return x === y? x : xOrY(n - 1, y, x);\n};\n\n/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || y <= 0 || x >= n || y >= n) {\n    return NaN;\n  }\n  return x === y? x : xOrY(n - 1, y, x);\n};\n\n/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTH", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let sqUares = lst.map(x => x * x);\n  let suM = Math.sqrt(sqUares);\n  let numbeRs = lst.map(x => x - suM);\n  return numbeRs.reduce((a, b) => a + b);\n};\n\n/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let sqUares = lst.map(x => x * x);\n  let suM = Math.sqrt(sqUares);\n  let numbeRs = lst.map(x => x - suM);\n  return numbeRs.reduce((a, b) => a + b);\n};\n\n/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let sqUares = lst.map(x => x * x);\n  let suM = Math.sqrt(sqUares);\n  let numbeRs = lst.map(x => x - suM);\n  return numbeRs.reduce((a, b) => a + b);\n};\n\n/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let sqUares = lst.map(x => x * x);\n  let suM = Math.sqrt(sqUares);\n  let numbeRs = lst.map(x => x - suM);\n  return numbeRs.reduce((a, b) => a + b);\n};\n\n/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let sqUares = lst.map(x => x * x);\n  let suM = Math.sqrt(sqUares);\n  let numbeRs = lst.map(x => x - suM);\n  return numbeRs.reduce((a, b) => a + b);\n};\n\n/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let sqUares = lst.map(x => x * x);\n  let suM = Math.sqrt(sqUares);\n  let numbeRs = lst.map(x => x - suM);\n  return numbeRs.reduce((a, b) => a + b);\n};\n\n/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let sqUares = lst.map(x => x * x);\n  let suM = Math.sqrt(sqUares);\n  let numbeRs = lst.map(x => x - suM);\n  return numbeRs.reduce((a, b) => a + b);\n};\n\n/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let sqUares = lst.map(x => x * x);\n  let suM = Math.sqrt(sqUares);\n  let numbeRs = lst.map(x => x - suM);\n  return numbeRs.reduce((a, b) => a + b);\n};\n\n/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let sqUares = lst.map(x => x * x);", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/152", "prompt": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [gameState, guessState] = game;\n  const [guessedGameState, guessedGuessState] = guess;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGuessState;\n  const [gameState, guessedGameState, guessedGuessState] = gameState;\n  const [gameState, guessedGameState, guessedGuessState] = guessedGameState;\n  const [gameState, guessedGameState, gues", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_strength = extensions.reduce((acc, curr) => {\n    const extension_strength_of_curr = acc.find((e) => e.name === curr);\n    if (extension_strength_of_curr) {\n      return extension_strength_of_curr.strength;\n    }\n    return acc.length + 1;\n  }, 0);\n  const extension_strength_of_class_name = class_name.find((e) => e.strength === extension_strength);\n  return extension_strength_of_class_name? class_name.find((e) => e.name === extension_strength_of_class_name.name) : null;\n};\n\nconst getClassName = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.name : null;\n};\n\nconst getClassNameOfExtension = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extensions : null;\n};\n\nconst getClassNameOfExtensionOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClassOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class_of_class_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClassOfClassOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class_of_class_of_class_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClassOfClassOfClassOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class_of_class_of_class_of_class_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClassOfClassOfClassOfClassOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class_of_class_of_class_of_class_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClassOfClassOfClassOfClassOfClassOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class_of_class_of_class_of_class_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClassOfClassOfClassOfClassOfClassOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class_of_class_of_class_of_class_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClassOfClassOfClassOfClassOfClassOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class_of_class_of_class_of_class_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClassOfClassOfClassOfClassOfClassOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class_of_class_of_class_of_class_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClassOfClassOfClassOfClassOfClassOfClassOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class_of_class_of_class_of_class_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClassOfClassOfClassOfClassOfClassOfClassOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class_of_class_of_class_of_class_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClassOfClassOfClassOfClassOfClassOfClassOfClassOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class_of_class_of_class_of_class_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClassOfClassOfClassOfClassOfClassOfClassOfClass = (class_name) => {\n  const class_name_of_class_name = class_name.find((e) => e.name === 'class_name');\n  return class_name_of_class_name? class_name_of_class_name.extension_of_class_of_class_of_class_of_class : null;\n};\n\nconst getClassNameOfExtensionOfClassOfClassOfClassOfClassOfClassOfClassOfClassOfClassOfClass = (class_name) => {\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/154", "prompt": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n  const aWord = a.split('').map(x => x.charCodeAt(0)).join('')\n  const bWord = b.split('').map(x => x.charCodeAt(0)).join('')\n  const aFirstWord = aWord.slice(0, 1)\n  const bFirstWord = bWord.slice(0, 1)\n  const aFirstLetter = aWord.slice(0, 1)\n  const bFirstLetter = bWord.slice(0, 1)\n  const aFirstLetterIsUpperCase = aFirstLetter === aFirstLetter.toUpperCase()\n  const bFirstLetterIsUpperCase = bFirstLetter === bFirstLetter.toUpperCase()\n  const aFirstLetterIsLowerCase = aFirstLetter === aFirstLetter.toLowerCase()\n  const bFirstLetterIsLowerCase = bFirstLetter === bFirstLetter.toLowerCase()\n  const aFirstLetterIsDigit = aFirstLetter === aFirstLetter.isDigit()\n  const bFirstLetterIsDigit = bFirstLetter === bFirstLetter.isDigit()\n  const aFirstLetterIsLetter = aFirstLetter === aFirstLetter.isLetter()\n  const bFirstLetterIsLetter = bFirstLetter === bFirstLetter.isLetter()\n  const aFirstLetterIsDigitOrLetter = aFirstLetter === aFirstLetter.isDigitOrLetter()\n  const bFirstLetterIsDigitOrLetter = bFirstLetter === bFirstLetter.isDigitOrLetter()\n  const aFirstLetterIsLetterOrDigit = aFirstLetter === aFirstLetter.isLetterOrDigit()\n  const bFirstLetterIsLetterOrDigit = bFirstLetter === bFirstLetter.isLetterOrDigit()\n  const aFirstLetterIsDigitOrLetterOrLetter = aFirstLetter === aFirstLetter.isDigitOrLetterOrLetter()\n  const bFirstLetterIsDigitOrLetterOrLetter = bFirstLetter === bFirstLetter.isDigitOrLetterOrLetter()\n  const aFirstLetterIsLetterOrDigitOrLetter = aFirstLetter === aFirstLetter.isLetterOrDigitOrLetterOrLetter()\n  const bFirstLetterIsLetterOrDigitOrLetter = bFirstLetter === bFirstLetter.isLetterOrDigitOrLetterOrLetter()\n  const aFirstLetterIsLetterOrDigitOrLetterOrLetter = aFirstLetter === aFirstLetter.isLetterOrDigitOrLetterOrLetterOrLetter()\n  const bFirstLetterIsLetterOrDigitOrLetterOrLetter = bFirstLetter === bFirstLetter.isLetterOrDigitOrLetterOrLetterOrLetter()\n  const aFirstLetterIsLetterOrDigitOrLetterOrLetterOrLetter = aFirstLetter === aFirstLetter.isLetterOrDigitOrLetterOrLetterOrLetterOrLetter()\n  const bFirstLetterIsLetterOrDigitOrLetterOrLetterOrLetter = bFirstLetter === bFirstLetter.isLetterOrDigitOrLetterOrLetterOrLetterOrLetter()\n  const aFirstLetterIsLetterOrDigitOrLetterOrLetterOrLetterOrLetter = aFirstLetter === aFirstLetter.isLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetter()\n  const bFirstLetterIsLetterOrDigitOrLetterOrLetterOrLetterOrLetter = bFirstLetter === bFirstLetter.isLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter()\n  const aFirstLetterIsLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetter = aFirstLetter === aFirstLetter.isLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter()\n  const bFirstLetterIsLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetter = bFirstLetter === bFirstLetter.isLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter()\n  const aFirstLetterIsLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter = aFirstLetter === aFirstLetter.isLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter()\n  const bFirstLetterIsLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter = bFirstLetter === bFirstLetter.isLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter()\n  const aFirstLetterIsLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter = aFirstLetter === aFirstLetter.isLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter()\n  const bFirstLetterIsLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter = bFirstLetter === bFirstLetter.isLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter()\n  const aFirstLetterIsLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter = aFirstLetter === aFirstLetter.isLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter()\n  const bFirstLetterIsLetterOrDigitOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetterOrLetter", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let nUmber = 0, oDd = 0, tHat;\n  do {\n    tHat = num % 2;\n    nUmber += tHat;\n    num = Math.floor(num / 2);\n    oDd += tHat;\n  } while (tHat > 0);\n  return [nUmber, oDd];\n};\n\n/*\n  GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddEvenCount = (num) => {\n  let nUmber = 0, oDd = 0, tHat;\n  do {\n    tHat = num % 2;\n    nUmber += tHat;\n    num = Math.floor(num / 2);\n    oDd -= tHat;\n  } while (tHat < 0);\n  return [nUmber, oDd];\n};\n\n/*\n  GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let nUmber = 0, oDd = 0, tHat;\n  do {\n    tHat = num % 2;\n    nUmber += tHat;\n    num = Math.floor(num / 2);\n    oDd += tHat;\n  } while (tHat > 0);\n  return [nUmber, oDd];\n};\n\n/*\n  GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddEvenCount = (num) => {\n  let nUmber = 0, oDd = 0, tHat;\n  do {\n    tHat = num % 2;\n    nUmber += tHat;\n    num = Math.floor(num / 2);\n    oDd -= tHat;\n  } while (tHat < 0);\n  return [nUmber, oDd];\n};\n\n/*\n  GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let nUmber = 0, oDd = 0, tHat;\n  do {\n    tHat = num % 2;\n    nUmber += tHat;\n    num = Math.floor(num / 2);\n    oDd += tHat;\n  } while (tHat > 0);\n  return [nUmber, oDd];\n};\n\n/*\n  GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddEvenCount = (num) => {\n  let nUmber = 0, oDd = 0, tHat;\n  do {\n    tHat = num % 2;\n    nUmber += tHat;\n    num = Math.floor(num / 2);\n    oDd -= tHat;\n  } while (tHat < 0);\n  return [nUmber, oDd];\n};\n\n/*\n  GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let nUmber = 0, oDd = 0, tHat;\n  do {\n    tHat = num % 2;\n    nUmber += tHat;\n    num = Math.floor(num / 2);\n    oDd += tHat;\n  } while (tHat > 0);\n  return [nUmber, oDd];\n};\n\n/*\n  GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddEvenCount = (num) => {\n  let nUmber = 0, oDd = 0, tHat;\n  do {\n    tHat = num % 2;\n    nUmber += tHat;\n    num = Math.floor(num / 2);\n    oDd -= tHat;\n  } while (tHat < 0);\n  return [nUmber, oDd];\n};\n\n/*\n  GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let nUmber = 0, oDd = 0, tHat;\n  do {\n    tHat = num % 2;\n    nUmber += tHat;\n    num = Math.floor(num / 2);\n    oDd += tHat;\n  } while (tHat > 0);\n  return [nUmber, oDd];\n};\n\n/*\n  GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddEvenCount = (num) => {\n  let nUmber = 0, oDd = 0, tHat;\n  do {\n    tHat = num % 2;\n    nUmber += tHat;\n    num = Math.floor(num / 2);\n    oDd -= tHat;\n  } while (tHat < 0);\n  return [nUmber, oDd];\n};\n\n/*\n  GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const intToMiniRomanMap = {\n    1: { low: 'i', high: 'x' },\n    2: { low: 'ii', high: 'xii' },\n    3: { low: 'iv', high: 'xiii' },\n    4: { low: 'v', high: 'xx' },\n    5: { low: 'vi', high: 'xxi' },\n    6: { low: 'vii', high: 'xxii' },\n    7: { low: 'viii', high: 'xxiii' },\n    8: { low: 'ix', high: 'xii' },\n    9: { low: 'x', high: 'x' },\n    10: { low: 'xi', high: 'xii' },\n    11: { low: 'xii', high: 'xiii' },\n    12: { low: 'x', high: 'xx' },\n    13: { low: 'xi', high: 'xxi' },\n    14: { low: 'xii', high: 'xxii' },\n    15: { low: 'x', high: 'x' },\n    16: { low: 'xi', high: 'xii' },\n    17: { low: 'xii', high: 'xiii' },\n    18: { low: 'x', high: 'xx' },\n    19: { low: 'xi', high: 'xxi' },\n    20: { low: 'xii', high: 'xxii' },\n    21: { low: 'x', high: 'x' },\n    22: { low: 'xi', high: 'xii' },\n    23: { low: 'xii', high: 'xiii' },\n    24: { low: 'x', high: 'xx' },\n    25: { low: 'xi', high: 'xxi' },\n    26: { low: 'xii', high: 'xxii' },\n    27: { low: 'x', high: 'x' },\n    28: { low: 'xi', high: 'xii' },\n    29: { low: 'xii', high: 'xiii' },\n    30: { low: 'x', high: 'xx' },\n    31: { low: 'xi', high: 'xxi' },\n    32: { low: 'xii', high: 'xxii' },\n    33: { low: 'x', high: 'x' },\n    34: { low: 'xi', high: 'xii' },\n    35: { low: 'xii', high: 'xiii' },\n    36: { low: 'x', high: 'xx' },\n    37: { low: 'xi', high: 'xxi' },\n    38: { low: 'xii', high: 'xxii' },\n    39: { low: 'x', high: 'x' },\n    40: { low: 'xi', high: 'xii' },\n    41: { low: 'xii', high: 'xiii' },\n    42: { low: 'x', high: 'xx' },\n    43: { low: 'xi', high: 'xxi' },\n    44: { low: 'xii', high: 'xxii' },\n    45: { low: 'x', high: 'x' },\n    46: { low: 'xi', high: 'xii' },\n    47: { low: 'xii', high: 'xiii' },\n    48: { low: 'x', high: 'xx' },\n    49: { low: 'xi', high: 'xxi' },\n    50: { low: 'xii', high: 'xxii' },\n    51: { low: 'x', high: 'x' },\n    52: { low: 'xi', high: 'xii' },\n    53: { low: 'xii', high: 'xiii' },\n    54: { low: 'x', high: 'xx' },\n    55: { low: 'xi', high: 'xxi' },\n    56: { low: 'xii', high: 'xxii' },\n    57: { low: 'x', high: 'x' },\n    58: { low: 'xi', high: 'xii' },\n    59: { low: 'xii', high: 'xiii' },\n    60: { low: 'x', high: 'xx' },\n    61: { low: 'xi', high: 'xii' },\n    62: { low: 'xii', high: 'xiii' },\n    63: { low: 'x', high: 'xx' },\n    64: { low: 'xi', high: 'xii' },\n    65: { low: 'xii', high: 'xiii' },\n    66: { low: 'x', high: 'x' },\n    67: { low: 'xi', high: 'xii' },\n    68: { low: 'xii', high: 'xiii' },\n    69: { low: 'x', high: 'xx' },\n    70: { low: 'xi', high: 'xii' },\n    71: { low: 'xii', high: 'xiii' },\n    72: { low: 'x', high: 'xx' },\n    73: { low: 'xi', high: 'xii' },\n    74: { low: 'xii', high: 'xiii' },\n    75: { low: 'x', high: 'x' },\n    76: { low: 'xi', high: 'xii' },\n    77: { low: 'xii', high: 'xiii' },\n    78: { low: 'x', high: 'xx' },\n    79: { low: 'xi', high: 'xii' },\n    80: { low: 'xii', high: 'xiii' },\n    81: { low: 'x', high: 'xx' },\n    82: { low: 'xi', high: 'xii' },\n    83: { low: 'xii', high: 'xiii' },\n    84: { low: 'x', high: 'xx' },\n    85: { low: 'xi', high: 'xii' },\n    86: { low: 'xii', high: 'xiii' },\n    87: { low: 'x', high: 'xx' },\n    88: { low: 'xi', high: 'xii' },\n    89: { low: 'xii', high: 'xiii' },\n    90: { low: 'x', high: 'xx' },\n    91: { low: 'xi', high: 'xii' },\n    92: { low: 'xii', high: 'xiii' },\n    93: { low: 'x', high: 'xx' },\n    94: { low: 'xi', high: 'xii' },\n    95: { low: 'xii', high: 'xiii' },\n    96: { low: 'x', high: 'xx' },\n    97: { low: 'xi', high: 'xii' },\n    98: { low: 'xii', high: 'xiii' },\n    99: { low: 'x', high: 'xx' },\n    100: { low: 'xi', high: 'xii' },\n    101: { low: 'xii', high: 'xiii' },\n    102: { low: 'x', high: 'xx' },\n    103: { low: 'xi', high: 'xii' },\n    104: { low: 'xii', high: 'xiii' },\n    105: { low: 'x', high: 'xx' },\n    106: { low: 'xi', high: 'xii' },\n    107: { low: 'xii', high: 'xiii' },\n    108: { low: 'x', high: 'xx' },\n    109: { low: 'xi', high: 'xii' },\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const a1 = Math.cos(a * Math.PI / 180);\n  const a2 = Math.sin(a * Math.PI / 180);\n  const a3 = Math.cos(b * Math.PI / 180);\n  const a4 = Math.sin(b * Math.PI / 180);\n  const a5 = Math.cos(c * Math.PI / 180);\n  const a6 = Math.sin(c * Math.PI / 180);\n  const b1 = Math.cos(a1 * Math.PI / 180);\n  const b2 = Math.sin(a1 * Math.PI / 180);\n  const b3 = Math.cos(a2 * Math.PI / 180);\n  const b4 = Math.sin(a2 * Math.PI / 180);\n  const b5 = Math.cos(a3 * Math.PI / 180);\n  const b6 = Math.sin(a3 * Math.PI / 180);\n  const c1 = Math.cos(a1 * Math.PI / 180);\n  const c2 = Math.sin(a1 * Math.PI / 180);\n  const c3 = Math.cos(a2 * Math.PI / 180);\n  const c4 = Math.sin(a2 * Math.PI / 180);\n  const c5 = Math.cos(a3 * Math.PI / 180);\n  const c6 = Math.sin(a3 * Math.PI / 180);\n  const d1 = Math.cos(b1 * Math.PI / 180);\n  const d2 = Math.sin(b1 * Math.PI / 180);\n  const d3 = Math.cos(b2 * Math.PI / 180);\n  const d4 = Math.sin(b2 * Math.PI / 180);\n  const d5 = Math.cos(b3 * Math.PI / 180);\n  const d6 = Math.sin(b3 * Math.PI / 180);\n  const e1 = Math.cos(c1 * Math.PI / 180);\n  const e2 = Math.sin(c1 * Math.PI / 180);\n  const e3 = Math.cos(c2 * Math.PI / 180);\n  const e4 = Math.sin(c2 * Math.PI / 180);\n  const e5 = Math.cos(c3 * Math.PI / 180);\n  const e6 = Math.sin(c3 * Math.PI / 180);\n  const f1 = Math.cos(d1 * Math.PI / 180);\n  const f2 = Math.sin(d1 * Math.PI / 180);\n  const f3 = Math.cos(d2 * Math.PI / 180);\n  const f4 = Math.sin(d2 * Math.PI / 180);\n  const f5 = Math.cos(d3 * Math.PI / 180);\n  const f6 = Math.sin(d3 * Math.PI / 180);\n  const g1 = Math.cos(d4 * Math.PI / 180);\n  const g2 = Math.sin(d4 * Math.PI / 180);\n  const g3 = Math.cos(d5 * Math.PI / 180);\n  const g4 = Math.sin(d5 * Math.PI / 180);\n  const g5 = Math.cos(d6 * Math.PI / 180);\n  const g6 = Math.sin(d6 * Math.PI / 180);\n  const h1 = Math.cos(e1 * Math.PI / 180);\n  const h2 = Math.sin(e1 * Math.PI / 180);\n  const h3 = Math.cos(e2 * Math.PI / 180);\n  const h4 = Math.sin(e2 * Math.PI / 180);\n  const h5 = Math.cos(e3 * Math.PI / 180);\n  const h6 = Math.sin(e3 * Math.PI / 180);\n  const i1 = Math.cos(f1 * Math.PI / 180);\n  const i2 = Math.sin(f1 * Math.PI / 180);\n  const i3 = Math.cos(f2 * Math.PI / 180);\n  const i4 = Math.sin(f2 * Math.PI / 180);\n  const i5 = Math.cos(f3 * Math.PI / 180);\n  const i6 = Math.sin(f3 * Math.PI / 180);\n  const j1 = Math.cos(g1 * Math.PI / 180);\n  const j2 = Math.sin(g1 * Math.PI / 180);\n  const j3 = Math.cos(g2 * Math.PI / 180);\n  const j4 = Math.sin(g2 * Math.PI / 180);\n  const j5 = Math.cos(g3 * Math.PI / 180);\n  const j6 = Math.sin(g3 * Math.PI / 180);\n  const k1 = Math.cos(h5 * Math.PI / 180);\n  const k2 = Math.sin(h5 * Math.PI / 180);\n  const k3 = Math.cos(h6 * Math.PI / 180);\n  const k4 = Math.sin(h6 * Math.PI / 180);\n  const l1 = Math.cos(i1 * Math.PI / 180);\n  const l2 = Math.sin(i1 * Math.PI / 180);\n  const l3 = Math.cos(i2 * Math.PI / 180);\n  const l4 = Math.sin(i2 * Math.PI / 180);\n  const l5 = Math.cos(i3 * Math.PI / 180);\n  const l6 = Math.sin(i3 * Math.PI / 180);\n  const m1 = Math.cos(j1 * Math.PI / 180);\n  const m2 = Math.sin(-j1 * Math.PI / 180);\n  const m3 = Math.cos(j2 * Math.PI / 180);\n  const m4 = Math.sin(-j2 * Math.PI / 180);\n  const m5 = Math.cos(j3 * Math.PI / 180);\n  const m6 = Math.sin(-j3 * Math.PI / 180);\n  const n1 = Math.cos(k1 * Math.PI / 180);\n  const n2 = Math.sin(-k1 * Math.PI / 180);\n  const n3 = Math.cos(k2 * Math.PI / 180);\n  const n4 = Math.sin(-k2 * Math.PI / 180);\n  const n5 = Math.cos(k3 * Math.PI / 180);\n  const n6 = Math.sin(-k3 * Math.PI / 180);\n  const o1 = Math.cos(l1 * Math.PI / 180);\n  const o2 = Math.sin(-l1 * Math.PI / 180);\n  const o3 = Math.cos(l2 * Math.PI / 180);\n  const o4 = Math.sin(-l2 * Math.PI / 180);\n  const o5 = Math.cos(l3 * Math.PI / 180);\n  const o6 = Math.sin(-l3 * Math.PI / 180);\n  const p1 = Math.cos(m1 * Math.PI / 180);\n  const p2 = Math.sin(-m1 * Math.PI / 180);\n  const p3 = Math.cos(m2 * Math.PI / 180);\n  const p4 = Math.sin(-m2 * Math.PI / 180);\n  const p5 = Math.cos(m3 * Math.PI / 180);\n  const p6 = Math.sin(-m3 * Math.PI / 180);\n  const q1 = Math.cos(n1 * Math.PI / 180);\n  const q2 = Math.sin(-n1 * Math.PI / 180);\n  const q3 = Math.cos(n2 * Math.PI / 180);\n  const q4 = Math.sin(-n2 * Math.PI / 180);\n  const q5 = Math.cos(n3 * Math.PI / 180);\n  const q", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/158", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n  let max = 0;\n  let maxWord = words[0];\n  let maxWordLen = maxWord.length;\n  let maxWordChar = maxWord.charCodeAt(0);\n  let maxWordCharLen = maxWordChar.length;\n  let maxWordCharChar = maxWordChar.charCodeAt(0);\n  let maxWordCharCharLen = maxWordCharChar.length;\n  let maxWordCharCharChar = maxWordCharChar.charCodeAt(0);\n  let maxWordCharCharCharLen = maxWordCharCharCharChar.length;\n  let maxWordCharCharCharChar = maxWordCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharLen = maxWordCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharChar = maxWordCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharLen = maxWordCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharChar = maxWordCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharChar = maxWordCharCharCharCharCharCharCharChar.charCodeAt(0);\n  let maxWordCharCharCharCharCharCharCharLen = maxWordCharCharCharCharCharCharCharChar.length;\n  let maxWordCharCharCharCharCharCharCharChar = max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const array = [];\n  const remaining = Math.min(remaining, number);\n  const remainder = Math.floor((number - remaining) / need);\n  const remainders = Math.ceil(remaining / need);\n  const remaindersRemaining = remaining % need;\n  const remaindersRemainingRemaining = remaindersRemaining % need;\n  const remaindersRemainingRemainingRemaining = remaindersRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemaining = remaindersRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining % need;\n  const remaindersRemainingRemainingRemainingRemain", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let charActErs = 0;\n  let reGarDLeSs = /[\\s\\W]+/g;\n  let reGarDLeSsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsErsErsErsErsErs = /[\\s\\W]+/g;\n  let reGarDLeSsErsErsErsErsEr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operand[operandIndex] >= 0) {\n      result += operand[operandIndex];\n      operandIndex++;\n    } else {\n      result += 0;\n    }\n  }\n  while (operatorIndex < operatorLength) {\n    if (operator[operatorIndex] >= 0) {\n      result -= operator[operatorIndex];\n      operatorIndex++;\n    } else {\n      result -= 0;\n    }\n  }\n  return result;\n};\n\n/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operand[operandIndex] >= 0) {\n      result += operand[operandIndex];\n      operandIndex++;\n    } else {\n      result += 0;\n    }\n  }\n  while (operatorIndex < operatorLength) {\n    if (operator[operatorIndex] >= 0) {\n      result -= operator[operatorIndex];\n      operatorIndex++;\n    } else {\n      result -= 0;\n    }\n  }\n  return result;\n};\n\n/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operand[operandIndex] >= 0) {\n      result += operand[operandIndex];\n      operandIndex++;\n    } else {\n      result += 0;\n    }\n  }\n  while (operatorIndex < operatorLength) {\n    if (operator[operatorIndex] >= 0) {\n      result -= operator[operatorIndex];\n      operatorIndex++;\n    } else {\n      result -= 0;\n    }\n  }\n  return result;\n};\n\n/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operand[operandIndex] >= 0) {\n      result += operand[operandIndex];\n      operandIndex++;\n    } else {\n      result += 0;\n    }\n  }\n  while (operatorIndex < operatorLength) {\n    if (operator[operatorIndex] >= 0) {\n      result -= operator[operatorIndex];\n      operatorIndex++;\n    } else {\n      result -= 0;\n    }\n  }\n  return result;\n};\n\n/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition (", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/161", "prompt": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"\n  let tErr = \"\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14, 14, 14]\n  */\nconst generateIntegers_2 = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14, 14, 14]\n  */\nconst generateIntegers_3 = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14, 14, 14]\n  */\nconst generateIntegers_4 = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14, 14, 14]\n  */\nconst generateIntegers_5 = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14, 14, 14]\n  */\nconst generateIntegers_6 = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14, 14, 14]\n  */\nconst generateIntegers_7 = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14, 14, 14]\n  */\nconst generateIntegers_8 = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14, 14, 14]\n  */\nconst generateIntegers_9 = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14, 14, 14]\n  */\nconst generateIntegers_10 = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string = music_string.toLowerCase().trim();\n  const music_string_split = music_string.split('|');\n  const music_string_split_length = music_string_split.length;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;\n  const music_string_split_length = music_string_split_length - 1;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/19", "prompt": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five', 'six', 'seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numBer = numbers.length\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer - 1\n  const numBer = numBer ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/2", "prompt": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [, decimals] = number.toString().split('.')\n  const [, integer] = decimals.split('')\n  const [, fractional] = decimals.split('')\n  const [, integerPart] = integer.split('')\n  const [, fractionalPart] = fractional.split('')\n  const [, integerPartPart] = integerPart.split('')\n  const [, fractionalPartPart] = fractionalPart.split('')\n  const [, integerPartPartPart] = integerPartPart.split('')\n  const [, fractionalPartPartPart] = fractionalPartPartPart.split('')\n  const [, integerPartPartPartPart] = integerPartPartPart.split('')\n  const [, fractionalPartPartPartPart] = fractionalPartPartPartPart.split('')\n  const [, integerPartPartPartPartPart] = integerPartPartPartPart.split('')\n  const [, fractionalPartPartPartPartPart] = fractionalPartPartPartPartPart.split('')\n  const [, integerPartPartPartPartPartPart] = integerPartPartPartPartPartPart.split('')\n  const [, fractionalPartPartPartPartPartPart] = fractionalPartPartPartPartPartPart.split('')\n  const [, integerPartPartPartPartPartPartPart] = integerPartPartPartPartPartPartPart.split('')\n  const [, fractionalPartPartPartPartPartPartPart] = fractionalPartPartPartPartPartPartPartPart.split('')\n  const [, integerPartPartPartPartPartPartPartPart] = integerPartPartPartPartPartPartPartPart.split('')\n  const [, fractionalPartPartPartPartPartPartPartPart] = fractionalPartPartPartPartPartPartPartPartPart.split('')\n  const [, integerPartPartPartPartPartPartPartPartPart] = integerPartPartPartPartPartPartPartPartPartPart.split('')\n  const [, fractionalPartPartPartPartPartPartPartPartPart] = fractionalPartPartPartPartPartPartPartPartPartPart.split('')\n  const [, integerPartPartPartPartPartPartPartPartPartPart] = integerPartPartPartPartPartPartPartPartPartPartPart.split('')\n  const [, fractionalPartPartPartPartPartPartPartPartPartPart] = fractionalPartPartPartPartPartPartPartPartPartPartPart.split('')\n  const [, integerPartPartPartPartPartPartPartPartPartPartPart] = integerPartPartPartPartPartPartPartPartPartPartPartPart.split('')\n  const [, fractionalPartPartPartPartPartPartPartPartPartPartPartPart] = fractionalPartPartPartPartPartPartPartPartPartPartPartPart.split('')\n  const [, integerPartPartPartPartPartPartPartPartPartPartPartPartPartPart] = integerPartPartPartPartPartPartPartPartPartPartPartPart.split('')\n  const [, fractionalPartPartPartPartPartPartPartPartPartPartPartPart] = fractionalPartPartPartPartPartPartPartPartPartPartPartPartPart.split('')\n  const [, integerPartPartPartPartPartPartPartPartPartPartPartPartPart] = integerPartPartPartPartPartPartPartPartPartPartPartPartPart.split('')\n  const [, fractionalPartPartPartPartPartPartPartPartPartPartPartPartPartPartPart] = fractionalPartPartPartPartPartPartPartPartPartPartPartPartPartPartPart.split('')\n  const [, integerPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPartPart", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/20", "prompt": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Infinity;\n  let minElement = undefined;\n  let minIndex = undefined;\n  let minElementIndex = undefined;\n  let minElementDistance = undefined;\n  let minElementDistanceIndex = undefined;\n  let minElementDistanceElement = undefined;\n  let minElementDistanceElementIndex = undefined;\n  let minElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElement = undefined;\n  let minElementDistanceElementDistanceElementIndex = undefined;\n  let minElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElement = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElement = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElement = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElement = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElement = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElement = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElement = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElement = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElement = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElement = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceIndex = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance = undefined;\n  let minElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistanceElementDistance", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [minValue, maxValue] = numbers;\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, maxValue] = [minValue, maxValue];\n  const [minValue, max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/22", "prompt": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const intEgeRs = values.filter(v => typeof v === 'number');\n  return intEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsy = (values) => {\n  const falsyEgeRs = values.filter(v => v === false);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOr = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOrElse = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOrElseIf = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOrElseIfElse = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOrElseIfElseIf = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOrElseIfElseIfElse = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOrElseIfElseIfElseIf = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOrElseIfElseIfElseIfElse = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOrElseIfElseIfElseIfElseIf = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOrElseIfElseIfElseIfElseIfElse = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOrElseIfElseIfElseIfElseIfElseIfElse = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOrElseIfElseIfElseIfElseIfElseIfElseIfElse = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOrElseIfElseIfElseIfElseIfElseIfElseIfElse = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n  return falsyEgeRs;\n};\n\n/**\n * Filter out all falsy values from an array\n * >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsyOrElseIfElseIfElseIfElseIfElseIfElseIfElse = (values) => {\n  const falsyEgeRs = values.filter(v => v === false || v === null);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('abc')\n  3\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* RetUrn lEngth", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largestDivisor = 1;\n  let largestDivisorNum = 1;\n  let largestDivisorNum2 = 1;\n  let largestDivisorNum3 = 1;\n  let largestDivisorNum4 = 1;\n  let largestDivisorNum5 = 1;\n  let largestDivisorNum6 = 1;\n  let largestDivisorNum7 = 1;\n  let largestDivisorNum8 = 1;\n  let largestDivisorNum9 = 1;\n  let largestDivisorNum10 = 1;\n  let largestDivisorNum11 = 1;\n  let largestDivisorNum12 = 1;\n  let largestDivisorNum13 = 1;\n  let largestDivisorNum14 = 1;\n  let largestDivisorNum15 = 1;\n  let largestDivisorNum16 = 1;\n  let largestDivisorNum17 = 1;\n  let largestDivisorNum18 = 1;\n  let largestDivisorNum19 = 1;\n  let largestDivisorNum20 = 1;\n  let largestDivisorNum21 = 1;\n  let largestDivisorNum22 = 1;\n  let largestDivisorNum23 = 1;\n  let largestDivisorNum24 = 1;\n  let largestDivisorNum25 = 1;\n  let largestDivisorNum26 = 1;\n  let largestDivisorNum27 = 1;\n  let largestDivisorNum28 = 1;\n  let largestDivisorNum29 = 1;\n  let largestDivisorNum30 = 1;\n  let largestDivisorNum31 = 1;\n  let largestDivisorNum32 = 1;\n  let largestDivisorNum33 = 1;\n  let largestDivisorNum34 = 1;\n  let largestDivisorNum35 = 1;\n  let largestDivisorNum36 = 1;\n  let largestDivisorNum37 = 1;\n  let largestDivisorNum38 = 1;\n  let largestDivisorNum39 = 1;\n  let largestDivisorNum40 = 1;\n  let largestDivisorNum41 = 1;\n  let largestDivisorNum42 = 1;\n  let largestDivisorNum43 = 1;\n  let largestDivisorNum44 = 1;\n  let largestDivisorNum45 = 1;\n  let largestDivisorNum46 = 1;\n  let largestDivisorNum47 = 1;\n  let largestDivisorNum48 = 1;\n  let largestDivisorNum49 = 1;\n  let largestDivisorNum50 = 1;\n  let largestDivisorNum51 = 1;\n  let largestDivisorNum52 = 1;\n  let largestDivisorNum53 = 1;\n  let largestDivisorNum54 = 1;\n  let largestDivisorNum55 = 1;\n  let largestDivisorNum56 = 1;\n  let largestDivisorNum57 = 1;\n  let largestDivisorNum58 = 1;\n  let largestDivisorNum59 = 1;\n  let largestDivisorNum60 = 1;\n  let largestDivisorNum61 = 1;\n  let largestDivisorNum62 = 1;\n  let largestDivisorNum63 = 1;\n  let largestDivisorNum64 = 1;\n  let largestDivisorNum65 = 1;\n  let largestDivisorNum66 = 1;\n  let largestDivisorNum67 = 1;\n  let largestDivisorNum68 = 1;\n  let largestDivisorNum69 = 1;\n  let largestDivisorNum70 = 1;\n  let largestDivisorNum71 = 1;\n  let largestDivisorNum72 = 1;\n  let largestDivisorNum73 = 1;\n  let largestDivisorNum74 = 1;\n  let largestDivisorNum75 = 1;\n  let largestDivisorNum76 = 1;\n  let largestDivisorNum77 = 1;\n  let largestDivisorNum78 = 1;\n  let largestDivisorNum79 = 1;\n  let largestDivisorNum80 = 1;\n  let largestDivisorNum81 = 1;\n  let largestDivisorNum82 = 1;\n  let largestDivisorNum83 = 1;\n  let largestDivisorNum84 = 1;\n  let largestDivisorNum85 = 1;\n  let largestDivisorNum86 = 1;\n  let largestDivisorNum87 = 1;\n  let largestDivisorNum88 = 1;\n  let largestDivisorNum89 = 1;\n  let largestDivisorNum90 = 1;\n  let largestDivisorNum91 = 1;\n  let largestDivisorNum92 = 1;\n  let largestDivisorNum93 = 1;\n  let largestDivisorNum94 = 1;\n  let largestDivisorNum95 = 1;\n  let largestDivisorNum96 = 1;\n  let largestDivisorNum97 = 1;\n  let largestDivisorNum98 = 1;\n  let largestDivisorNum99 = 1;\n  let largestDivisorNum100 = 1;\n  let largestDivisorNum101 = 1;\n  let largestDivisorNum102 = 1;\n  let largestDivisorNum103 = 1;\n  let largestDivisorNum104 = 1;\n  let largestDivisorNum105 = 1;\n  let largestDivisorNum106 = 1;\n  let largestDivisorNum107 = 1;\n  let largestDivisorNum108 = 1;\n  let largestDivisorNum109 = 1;\n  let largestDivisorNum110 = 1;\n  let largestDivisorNum111 = 1;\n  let largestDivisorNum112 = 1;\n  let largestDivisorNum113 = 1;\n  let largestDivisorNum114 = 1;\n  let largestDivisorNum115 = 1;\n  let largestDivisorNum116 = 1;\n  let largestDivisorNum117 = 1;\n  let largestDivisorNum118 = 1;\n  let largestDivisorNum119 = 1;\n  let largestDivisorNum120 = 1;\n  let largestDivisorNum121 = 1;\n  let largestDivisorNum122 = 1;\n  let largestDivisorNum123 = 1;\n  let largestDivisorNum124 = 1;\n  let largestDivisorNum125 = 1;\n  let largestDivisorNum126 = 1;\n  let largestDivisorNum127 = 1;\n  let largestDivisorNum128 = 1;\n  let largestDivisorNum129 = 1;\n  let largestDivisorNum130 = 1;\n  let largestDivisorNum131 = 1;\n  let largestDivisorNum132 = 1;\n  let largestDivisorNum133 = 1;\n  let largestDivisorNum134 = 1;\n  let largestDivisorNum135 = 1;\n  let largestDivisorNum136 = 1;\n  let largestDivisorNum137 = 1;\n  let largestDivisorNum138 = 1;\n  let largestDivisorNum139 = 1;\n  let largestDivisorNum140 = 1;\n  let largestDivisorNum141 = 1;\n  let largestDivisorNum142 = 1;\n  let largestDivisorNum143 = 1;\n  let largestDivisorNum144 = 1;\n  let largestDivisorNum145 = 1;\n  let largestDivisorNum146 = 1;\n  let largestDivisorNum147 = 1;\n  let largestDivisorNum148 = 1;\n  let largestDivisorNum149 = 1;\n  let largestDivisorNum150 = 1;\n  let largestDivisorNum151 = 1;\n  let largestDivisorNum152 = 1;\n  let largestDivisorNum153 = 1;\n  let largestDivisorNum154 = 1;\n  let largestDivisorNum155 = 1;\n  let largestDivisorNum156 = 1;\n  let largestDivisorNum157 = 1;\n  let largestDivisorNum158 = 1;\n  let largestDivisorNum159 = 1;\n  let largestDivisorNum160 = 1;\n  let largestDivisorNum161 = 1;\n  let lar", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/25", "prompt": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let numer = 1;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen.has(number)) {\n      continue;\n    }\n    seen.add(number);\n    result.push(number);\n  }\n  return result;\n};\n\n/**\n  Remove all duplicates from a list of Integers.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFromList = (list) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    const number = list[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n  Remove all duplicates from a list of Integers.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFromListWithOrder = (list) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    const number = list[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n  Remove all duplicates from a list of Integers.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFromListWithOrderAndOrder = (list) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    const number = list[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n  Remove all duplicates from a list of Integers.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFromListWithOrderAndOrderAndOrder = (list) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    const number = list[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n  Remove all duplicates from a list of Integers.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFromListWithOrderAndOrderAndOrder = (list) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    const number = list[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n  Remove all duplicates from a list of Integers.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFromListWithOrderAndOrderAndOrder = (list) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    const number = list[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n  Remove all duplicates from a list of Integers.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFromListWithOrderAndOrderAndOrderAndOrder = (list) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    const number = list[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n  Remove all duplicates from a list of Integers.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFromListWithOrderAndOrderAndOrderAndOrderAndOrder = (list) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    const number = list[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n  Remove all duplicates from a list of Integers.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFromListWithOrderAndOrderAndOrderAndOrderAndOrderAndOrder = (list) => {\n  const result = [];\n  for (let i = 0; i < list.length; i++) {\n    const number = list[i];\n    if (result.indexOf(number) === -1) {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/**\n  Remove all duplicates from a list of Integers.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicatesFromListWithOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAndOrderAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let newString = string.toLowerCase()\n  newString = newString.split('').map((char) => char.toUpperCase()).join('')\n  return newString\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpace('Hello')\n  'Hello'\n  */\nconst removeSpace = (string) => {\n  let newString = string.toLowerCase()\n  newString = newString.split(' ').join('')\n  return newString\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpaces('Hello')\n  'Hello'\n  */\nconst removeSpaces = (string) => {\n  let newString = string.toLowerCase()\n  newString = newString.split(' ').join('')\n  return newString\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpaces(['Hello', 'World'])\n  'Hello World'\n  */\nconst removeSpaces = (array) => {\n  let newArray = []\n  for (let i = 0; i < array.length; i++) {\n    let newString = array[i].toLowerCase()\n    newString = newString.split(' ').join('')\n    newArray.push(newString)\n  }\n  return newArray\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpaces(['Hello', 'World'])\n  'Hello World'\n  */\nconst removeSpaces = (array) => {\n  let newArray = []\n  for (let i = 0; i < array.length; i++) {\n    let newString = array[i].toLowerCase()\n    newString = newString.split(' ').join('')\n    newArray.push(newString)\n  }\n  return newArray\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpaces(['Hello', 'World'])\n  'Hello World'\n  */\nconst removeSpaces = (array) => {\n  let newArray = []\n  for (let i = 0; i < array.length; i++) {\n    let newString = array[i].toLowerCase()\n    newString = newString.split(' ').join('')\n    newArray.push(newString)\n  }\n  return newArray\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpaces(['Hello', 'World'])\n  'Hello World'\n  */\nconst removeSpaces = (array) => {\n  let newArray = []\n  for (let i = 0; i < array.length; i++) {\n    let newString = array[i].toLowerCase()\n    newString = newString.split(' ').join('')\n    newArray.push(newString)\n  }\n  return newArray\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpaces(['Hello', 'World'])\n  'Hello World'\n  */\nconst removeSpaces = (array) => {\n  let newArray = []\n  for (let i = 0; i < array.length; i++) {\n    let newString = array[i].toLowerCase()\n    newString = newString.split(' ').join('')\n    newArray.push(newString)\n  }\n  return newArray\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpaces(['Hello', 'World'])\n  'Hello World'\n  */\nconst removeSpaces = (array) => {\n  let newArray = []\n  for (let i = 0; i < array.length; i++) {\n    let newString = array[i].toLowerCase()\n    newString = newString.split(' ').join('')\n    newArray.push(newString)\n  }\n  return newArray\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpaces(['Hello', 'World'])\n  'Hello World'\n  */\nconst removeSpaces = (array) => {\n  let newArray = []\n  for (let i = 0; i < array.length; i++) {\n    let newString = array[i].toLowerCase()\n    newString = newString.split(' ').join('')\n    newArray.push(newString)\n  }\n  return newArray\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpaces(['Hello', 'World'])\n  'Hello World'\n  */\nconst removeSpaces = (array) => {\n  let newArray = []\n  for (let i = 0; i < array.length; i++) {\n    let newString = array[i].toLowerCase()\n    newString = newString.split(' ').join('')\n    newArray.push(newString)\n  }\n  return newArray\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpaces(['Hello', 'World'])\n  'Hello World'\n  */\nconst removeSpaces = (array) => {\n  let newArray = []\n  for (let i = 0; i < array.length; i++) {\n    let newString = array[i].toLowerCase()\n    newString = newString.split(' ').join('')\n    newArray.push(newString)\n  }\n  return newArray\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpaces(['Hello', 'World'])\n  'Hello World'\n  */\nconst removeSpaces = (array) => {\n  let newArray = []\n  for (let i = 0; i < array.length; i++) {\n    let newString = array[i].toLowerCase()\n    newString = newString.split(' ').join('')\n    newArray.push(newString)\n  }\n  return newArray\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpaces(['Hello', 'World'])\n  'Hello World'\n  */\nconst removeSpaces = (array) => {\n  let newArray = []\n  for (let i = 0; i < array.length; i++) {\n    let newString = array[i].toLowerCase()\n    newString = newString.split(' ').join('')\n    newArray.push(newString)\n  }\n  return newArray\n}\n\n/* For A givEn string, remove all spaces From loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> removeSpaces(['Hello', 'World'])\n  'Hello World'\n  */\nconst removeSpaces = (array) => {\n  let newArray = []\n  for (let i = 0; i < array.length; i++) {\n    let newString = array[i].toLowerCase()\n    newString = newString.split(' ').join('')\n    newArray.push(new", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, string) => {\n    return acc + string\n  }, '')\n}\n\n/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'abcdef'\n  */\nconst concatenateWithSeparator = (strings, separator) => {\n  return strings.reduce((acc, string) => {\n    return acc + separator + string\n  }, '')\n}\n\n/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'abcdef'\n  >>> concatenate(['g', 'h', 'i'])\n  'abcdefghi'\n  */\nconst concatenateWithSeparatorAndSeparator = (strings, separator) => {\n  return strings.reduce((acc, string) => {\n    return acc + separator + separator + string\n  }, '')\n}\n\n/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'abcdef'\n  >>> concatenate(['g', 'h', 'i'])\n  'abcdefghi'\n  >>> concatenate(['j', 'k', 'l'])\n  'abcdefghijkl'\n  */\nconst concatenateWithSeparatorAndSeparatorAndSeparator = (strings, separator) => {\n  return strings.reduce((acc, string) => {\n    return acc + separator + separator + separator + string\n  }, '')\n}\n\n/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'abcdef'\n  >>> concatenate(['g', 'h', 'i'])\n  'abcdefghi'\n  >>> concatenate(['j', 'k', 'l'])\n  'abcdefghijkl'\n  >>> concatenate(['m', 'n', 'o'])\n  'abcdefghijklmno'\n  */\nconst concatenateWithSeparatorAndSeparatorAndSeparator = (strings, separator) => {\n  return strings.reduce((acc, string) => {\n    return acc + separator + separator + separator + separator + string\n  }, '')\n}\n\n/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'abcdef'\n  >>> concatenate(['g', 'h', 'i'])\n  'abcdefghi'\n  >>> concatenate(['j', 'k', 'l'])\n  'abcdefghijkl'\n  >>> concatenate(['m', 'n', 'o'])\n  'abcdefghijklmno'\n  >>> concatenate(['p', 'q', 'r','s'])\n  'abcdefghijklmnopqrst'\n  */\nconst concatenateWithSeparatorAndSeparatorAndSeparator = (strings, separator) => {\n  return strings.reduce((acc, string) => {\n    return acc + separator + separator + separator + separator + separator + string\n  }, '')\n}\n\n/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(['d', 'e', 'f'])\n  'abcdef'\n  >>> concatenate(['g', 'h', 'i'])\n  'abcdefghi'\n  >>> concatenate(['j', 'k', 'l'])\n  'abcdefghijkl'\n  >>> concatenate(['m', 'n', 'o'])\n  'abcdefghijklmno'\n  >>> concatenate(['p', 'q', 'r','s'])\n  'abcdefghijklmnopqrst'\n  >>> concatenate(['t', 'u', 'v'])\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst concatenateWithSeparatorAndSeparatorAndSeparatorAndSeparator = (strings, separator) => {\n  return strings.reduce((acc, string) => {\n    return acc + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator + separator ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = filterByPrefix\n\n/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = filterByPrefix\n\n/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = filterByPrefix\n\n/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = filterByPrefix\n\n/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = filterByPrefix\n\n/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = filterByPrefix\n\n/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = filterByPrefix\n\n/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = filterByPrefix\n\n/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = filterByPrefix\n\n/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = filterByPrefix\n\n/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = filterByPrefix\n\n/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = filterByPrefix\n\n/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, operation } = operations;\n  const { balance, operations, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/30", "prompt": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let ret = [];\n  let num = 0;\n  let posItiVe = l.length;\n  for (let i = 0; i < posItiVe; i++) {\n    if (l[i] >= 0) {\n      ret.push(l[i]);\n      num++;\n    }\n  }\n  return [num,...ret];\n};\n\n/**\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tHe list.\n * RetuRn onLy posItiVe numBers in tH", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/31", "prompt": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let isPrime = true;\n  for(let i = 2; i <= n; i++) {\n    if(n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/**\n  RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let isPrime = true;\n  for(let i = 2; i <= n; i++) {\n    if(n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/**\n  RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let isPrime = true;\n  for(let i = 2; i <= n; i++) {\n    if(n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/**\n  RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let isPrime = true;\n  for(let i = 2; i <= n; i++) {\n    if(n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/**\n  RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let isPrime = true;\n  for(let i = 2; i <= n; i++) {\n    if(n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/**\n  RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let isPrime = true;\n  for(let i = 2; i <= n; i++) {\n    if(n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/**\n  RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let isPrime = true;\n  for(let i = 2; i <= n; i++) {\n    if(n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/**\n  RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let isPrime = true;\n  for(let i = 2; i <= n; i++) {\n    if(n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/**\n  RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let isPrime = true;\n  for(let i = 2; i <= n; i++) {\n    if(n % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/**\n  RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) return 0;\n  return zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) return 0;\n  return zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) return 0;\n  return zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) return 0;\n  return zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zeros = xs.filter(x => x === 0);\n  if (zeros.length === 0) return 0;\n  return zeros.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFourth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortSixth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSixth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortSeventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeventh = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortEighth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEighth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortNinth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortNinth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTenth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortEleventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEleventh = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTwelfth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwelfth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortThirteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirteenth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortFourteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFourteenth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortFifteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifteenth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortSixteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSixteenth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortSeventeenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeventeenth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortEighteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEighteenth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortNineteenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortNineteenth = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTwentyFirst([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyFirst = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTwentySeconds([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentySeconds = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTwentyThirds([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyThirds = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTwentyFourths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyFourths = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTwentyFifths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyFifths = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTwentySixths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentySixths = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTwentySevenths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentySevenths = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTwentyEighths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyEighths = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTwentyNinths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyNinths = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTwentyTenths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyTenths = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTwentyElevenths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyElevenths = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortTwentyTwelfths([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwentyTwelfths = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortThirtyFirst([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirtyFirst = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/**\n  >>> sortThirtySeconds([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => seen.has(v)?!i :!seen.add(v))\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n*/\nconst uniqueBy = (key) => {\n  const seen = new Set()\n  return l.filter((v, i, a) => seen.has(v)?!i :!seen.set(key, v))\n}\n\n/*\n  >>> uniqueBy(e => e.name)\n  ['John', 'Jane', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', 'Jill', 'Jim', 'Jack', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  l.forEach((e) => {\n    if (e > max) {\n      max = e;\n    }\n  });\n  return max;\n};\n\n/**\n * Return the minimum element in the list.\n * If no element in the list satisfies the condition, return undefined.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.\n * If there are more than one element in the list satisfies the condition, return the first element in the list.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/36", "prompt": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let timeS = 0, appEarS = 0, divisibleBy = 0, i = 1;\n  do {\n    if (n % 13 === 0) {\n      timeS++;\n    } else if (n % 11 === 0) {\n      appEarS++;\n    } else {\n      divisibleBy++;\n    }\n    i++;\n  } while (i <= n);\n  return timeS + appEarS + divisibleBy;\n};\n\n/*\n  >>> fizzBuzz(100)\n  0\n  >>> fizzBuzz(101)\n  0\n  >>> fizzBuzz(102)\n  0\n  >>> fizzBuzz(103)\n  0\n  >>> fizzBuzz(104)\n  0\n  >>> fizzBuzz(105)\n  0\n  >>> fizzBuzz(106)\n  0\n  >>> fizzBuzz(107)\n  0\n  >>> fizzBuzz(108)\n  0\n  >>> fizzBuzz(109)\n  0\n  >>> fizzBuzz(110)\n  0\n  >>> fizzBuzz(111)\n  0\n  >>> fizzBuzz(112)\n  0\n  >>> fizzBuzz(113)\n  0\n  >>> fizzBuzz(114)\n  0\n  >>> fizzBuzz(115)\n  0\n  >>> fizzBuzz(116)\n  0\n  >>> fizzBuzz(117)\n  0\n  >>> fizzBuzz(118)\n  0\n  >>> fizzBuzz(119)\n  0\n  >>> fizzBuzz(120)\n  0\n  >>> fizzBuzz(121)\n  0\n  >>> fizzBuzz(122)\n  0\n  >>> fizzBuzz(123)\n  0\n  >>> fizzBuzz(124)\n  0\n  >>> fizzBuzz(125)\n  0\n  >>> fizzBuzz(126)\n  0\n  >>> fizzBuzz(127)\n  0\n  >>> fizzBuzz(128)\n  0\n  >>> fizzBuzz(129)\n  0\n  >>> fizzBuzz(130)\n  0\n  >>> fizzBuzz(131)\n  0\n  >>> fizzBuzz(132)\n  0\n  >>> fizzBuzz(133)\n  0\n  >>> fizzBuzz(134)\n  0\n  >>> fizzBuzz(135)\n  0\n  >>> fizzBuzz(136)\n  0\n  >>> fizzBuzz(137)\n  0\n  >>> fizzBuzz(138)\n  0\n  >>> fizzBuzz(139)\n  0\n  >>> fizzBuzz(140)\n  0\n  >>> fizzBuzz(141)\n  0\n  >>> fizzBuzz(142)\n  0\n  >>> fizzBuzz(143)\n  0\n  >>> fizzBuzz(144)\n  0\n  >>> fizzBuzz(145)\n  0\n  >>> fizzBuzz(146)\n  0\n  >>> fizzBuzz(147)\n  0\n  >>> fizzBuzz(148)\n  0\n  >>> fizzBuzz(149)\n  0\n  >>> fizzBuzz(150)\n  0\n  >>> fizzBuzz(151)\n  0\n  >>> fizzBuzz(152)\n  0\n  >>> fizzBuzz(153)\n  0\n  >>> fizzBuzz(154)\n  0\n  >>> fizzBuzz(155)\n  0\n  >>> fizzBuzz(156)\n  0\n  >>> fizzBuzz(157)\n  0\n  >>> fizzBuzz(158)\n  0\n  >>> fizzBuzz(159)\n  0\n  >>> fizzBuzz(160)\n  0\n  >>> fizzBuzz(161)\n  0\n  >>> fizzBuzz(162)\n  0\n  >>> fizzBuzz(163)\n  0\n  >>> fizzBuzz(164)\n  0\n  >>> fizzBuzz(165)\n  0\n  >>> fizzBuzz(166)\n  0\n  >>> fizzBuzz(167)\n  0\n  >>> fizzBuzz(168)\n  0\n  >>> fizzBuzz(169)\n  0\n  >>> fizzBuzz(170)\n  0\n  >>> fizzBuzz(171)\n  0\n  >>> fizzBuzz(172)\n  0\n  >>> fizzBuzz(173)\n  0\n  >>> fizzBuzz(174)\n  0\n  >>> fizzBuzz(175)\n  0\n  >>> fizzBuzz(176)\n  0\n  >>> fizzBuzz(177)\n  0\n  >>> fizzBuzz(178)\n  0\n  >>> fizzBuzz(179)\n  0\n  >>> fizzBuzz(180)\n  0\n  >>> fizzBuzz(181)\n  0\n  >>> fizzBuzz(182)\n  0\n  >>> fizzBuzz(183)\n  0\n  >>> fizzBuzz(184)\n  0\n  >>> fizzBuzz(185)\n  0\n  >>> fizzBuzz(186)\n  0\n  >>> fizzBuzz(187)\n  0\n  >>> fizzBuzz(188)\n  0\n  >>> fizzBuzz(189)\n  0\n  >>> fizzBuzz(190)\n  0\n  >>> fizzBuzz(191)\n  0\n  >>> fizzBuzz(192)\n  0\n  >>> fizzBuzz(193)\n  0\n  >>> fizzBuzz(194)\n  0\n  >>> fizzBuzz(195)\n  0\n  >>> fizzBuzz(196)\n  0\n  >>> fizzBuzz(197)\n  0\n  >>> fizzBuzz(198)\n  0\n  >>> fizzBuzz(199)\n  0\n  >>> fizzBuzz(200)\n  0\n  >>> fizzBuzz(201)\n  0\n  >>> fizzBuzz(202)\n  0\n  >>> fizzBuzz(203)\n  0\n  >>> fizzBuzz(204)\n  0\n  >>> fizzBuzz", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice();\n  l2.sort((a, b) => {\n    return a % 2 === 1? 1 : -1;\n  });\n  return l2;\n};\n\n/**\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 3, 4], 1)\n  [3, 6, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -1)\n  [3, 6, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 2)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], -2)\n  [3, 4, 6, 5]\n  >>> sortEven([5, 6, 3, 4], 3)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -3)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 4)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -4)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 5)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -5)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 6)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -6)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 7)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -7)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 8)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -8)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 9)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -9)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 10)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -10)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 11)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -11)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 12)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -12)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 13)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -13)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 14)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -14)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 15)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -15)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 16)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -16)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 17)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -17)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 18)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -18)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 19)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -19)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 20)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -20)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 21)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -21)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 22)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -22)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 23)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -23)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 24)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -24)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 25)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -25)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 26)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -26)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 27)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -27)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 28)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -28)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 29)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -29)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 30)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -30)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 31)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -31)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 32)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -32)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 33)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -33)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 34)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -34)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 35)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -35)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 36)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -36)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 37)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -37)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 38)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -38)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 39)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -39)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 40)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -40)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 41)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -41)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 42)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -42)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], 43)\n  [3, 4, 5]\n  >>> sortEven([5, 6, 3, 4], -43)\n  [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let retUrns = [1]\n  let thAt = prime\n  let numBer = 1\n  let pRiMe = prime\n  for (let i = 2; i <= n; i++) {\n    numBer = numBer + thAt\n    thAt = pRiMe\n    pRiMe = thAt\n    retUrns.push(numBer)\n  }\n  return retUrns\n}\n\n/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let retUrns = [1]\n  let thAt = prime\n  let numBer = 1\n  let pRiMe = prime\n  for (let i = 2; i <= n; i++) {\n    numBer = numBer + thAt\n    thAt = pRiMe\n    pRiMe = thAt\n    retUrns.push(numBer)\n  }\n  return retUrns\n}\n\n/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let retUrns = [1]\n  let thAt = prime\n  let numBer = 1\n  let pRiMe = prime\n  for (let i = 2; i <= n; i++) {\n    numBer = numBer + thAt\n    thAt = pRiMe\n    pRiMe = thAt\n    retUrns.push(numBer)\n  }\n  return retUrns\n}\n\n/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let retUrns = [1]\n  let thAt = prime\n  let numBer = 1\n  let pRiMe = prime\n  for (let i = 2; i <= n; i++) {\n    numBer = numBer + thAt\n    thAt = pRiMe\n    pRiMe = thAt\n    retUrns.push(numBer)\n  }\n  return retUrns\n}\n\n/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let retUrns = [1]\n  let thAt = prime\n  let numBer = 1\n  let pRiMe = prime\n  for (let i = 2; i <= n; i++) {\n    numBer = numBer + thAt\n    thAt = pRiMe\n    pRiMe = thAt\n    retUrns.push(numBer)\n  }\n  return retUrns\n}\n\n/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let retUrns = [1]\n  let thAt = prime\n  let numBer = 1\n  let pRiMe = prime\n  for (let i = 2; i <= n; i++) {\n    numBer = numBer + thAt\n    thAt = pRiMe\n    pRiMe = thAt\n    retUrns.push(numBer)\n  }\n  return retUrns\n}\n\n/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let retUrns = [1]\n  let thAt = prime\n  let numBer = 1\n  let pRiMe = prime\n  for (let i = 2; i <= n; i++) {\n    numBer = numBer + thAt\n    thAt = pRiMe\n    pRiMe = thAt\n    retUrns.push(numBer)\n  }\n  return retUrns\n}\n\n/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let retUrns = [1]\n  let thAt = prime\n  let numBer = 1\n  let pRiMe = prime\n  for (let i = 2; i <= n; i++) {\n    numBer = numBer + thAt\n    thAt = pRiMe\n    pRiMe = thAt\n    retUrns.push(numBer)\n  }\n  return retUrns\n}\n\n/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let retUrns = [1]\n  let thAt = prime\n  let numBer = 1\n  let pRiMe = prime\n  for (let i = 2; i <= n; i++) {\n    numBer = numBer + thAt\n    thAt = pRiMe\n    pRiMe = thAt\n    retUrns.push(numBer)\n  }\n  return retUrn", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/4", "prompt": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const meanAbsoluteDeviation = (x) => {\n    const sumOfSquares = numbers.reduce((acc, x) => acc + x * x, 0);\n    const mean = sumOfSquares / numbers.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviation;\n};\n\nconst meanAbsoluteDeviationByEn = (enList) => {\n  const meanAbsoluteDeviationByEn = (x) => {\n    const sumOfSquares = enList.map(\n      (x) => numbers.reduce((acc, x) => acc + x * x, 0)\n    ).reduce((acc, x) => acc + x, 0);\n    const mean = sumOfSquares / enList.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByEn;\n};\n\nconst meanAbsoluteDeviationByEnByEn = (enList) => {\n  const meanAbsoluteDeviationByEnByEn = (x) => {\n    const sumOfSquares = enList.map(\n      (x) => enList.map(\n        (x) => numbers.reduce((acc, x) => acc + x * x, 0)\n      ).reduce((acc, x) => acc + x, 0)\n    ).reduce((acc, x) => acc + x, 0);\n    const mean = sumOfSquares / enList.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByEnByEn;\n};\n\nconst meanAbsoluteDeviationByEnByEnByEn = (enList) => {\n  const meanAbsoluteDeviationByEnByEnByEn = (x) => {\n    const sumOfSquares = enList.map(\n      (x) => enList.map(\n        (x) => enList.map(\n          (x) => numbers.reduce((acc, x) => acc + x * x, 0)\n        ).reduce((acc, x) => acc + x, 0)\n      ).reduce((acc, x) => acc + x, 0)\n    ).reduce((acc, x) => acc + x, 0);\n    const mean = sumOfSquares / enList.length;\n    return Math.sqrt(mean);\n  };\n  return meanAbsoluteDeviationByEnByEnByEn;\n};\n\nconst meanAbsoluteDeviationByEnByEnByEnByEn = (enList) => {\n  const meanAbsoluteDeviationByEnByEnByEnByEn = (x) => {\n    const sumOfSquares = enList.map(\n      (x) => enList.map(\n        (x) => enList.map(\n          (x) => enList.map(\n            (x) => enList.map(\n              (x) => enList.map(\n                (x) => enList.map(\n                  (x) => enList.map(\n                    (x) => enList.map(\n                      (x) => enList.map(\n                        (x) => enList.map(\n                          (x) => enList.map(\n                            (x) => enList.map(\n                              (x) => enList.map(\n                                (x) => enList.map(\n                                  (x) => enList.map(\n                                    (x) => enList.map(\n                                      (x) => enList.map(\n                                        (x) => enList.map(\n                                          (x) => enList.map(\n                                            (x) => enList.map(\n                                              (x) => enList.map(\n                                                (x) => enList.map(\n                                                  (x) => enList.map(\n                                                    (x) => enList.map(\n                                                      (x) => enList.map(\n                                                        (x) => enList.map(\n                                                          (x) => enList.map(\n                                                            (x) => enList.map(\n                                                              (x) => enList.map(\n                                                                (x) => enList.map(\n                                                                    (x) => enList.map(\n                                                                        (x) => enList.map(\n                                                                          (x) => enList.map(\n                                                                            (x) => enList.map(\n                                                                              (x) => enList.map(\n                                                                                (x) => enList.map(\n                                                                                  (x) => enList.map(\n                                                                                    (x) => enList.map(\n                                                                                      (x) => enList.map(\n                                                                                        (x) => enList.map(\n                                                                                          (x) => enList.map(\n                                                                                            (x) => enList.map(\n                                                                                              (x) => enList.map(\n                                                                                                (x) => enList.map(\n                                                                                                  (x) => enList.map(\n                                                                                                    (x) => enList.map(\n                                                                                                      (x) => enList.map(\n                                                                                                        (x) => enList.map(\n                                                                                                          (x) => enList.map(\n                                                                                                            (x) => enList.map(\n                                                                                                              (x) => enList.map(\n                                                                                                                (x) => enList.map(\n                                                                                                                  (x) => enList.map(\n                                                                                                                    (x) => enList.map(\n                                                                                                                      (x) => enList.map(\n                                                                                                                        (x) => enList.map(\n                                                                                                                          (x) => enList.map(\n                                                                                                                            (x) => enList.map(\n                                                                                                                              (x) => enList.map(\n                                                                                                                                (x) => enList.map(\n                                                                                                                                    (x) => enList.map(\n                                                                                                                      (x) => enList.map(\n                                                                                                                        (x) => enList.map(\n                                                                                                                          (x) => enList.map(\n                                                                                                                            (x) => enList.map(\n                                                                                                                              (x) => enList.map(\n                                                                                                                                (x) => enList.map(\n                                                                                                                                    (x) => enList.map(\n                                                                                                                      (x) => enList.map(\n                                                                                                                        (x) => enList.map(\n                                                                                                                          (x) => enList.map(\n                                                                                                                            (x) => enList.map(\n                                                                                                                              (x) => enList.map(\n                                                                                                                                (x) => enList.map(\n                                                                                                                                    (x) => enList.map(\n                                                                                                                      (x) => enList.map(\n                                                                                                                        (x) => enList.map(\n                                                                                                                          (x) => enList.map(\n                                                                                                                            (x) => enList.map(\n                                                                                                                              (x) => enList.map(\n                                                                                                                                (x) => enList.map(\n                                                                                                                                    (x) => enList.map(\n                                                                                                                      (x) => enList.map(\n                                                                                                                        (x) => enList.map(\n                                                                                                                          (x) => enList.map(\n                                                                                                                            (x) => enList.map(\n                                                                                                                              (x) => enList.map(\n                                                                                                                                (x) => enList.map(\n                                                                                                                                    (x) => enList.map(\n                                                                                                                      (x) => enList.map(\n                                                                                                                        (x) => enList.map(\n                                                                                                                          (x) => enList.map(\n                                                                                                                            (x) => enList.map(\n                                                                                                                              (x) => enList.map(\n                                                                                                                                (x) => enList.map(\n                                                                                                                                    (x) => enList.map(\n                                                                                                                      (x) => enList.map(\n                                                                                                                        (x) => enList.map(\n                                                                                                                          (x) => enList.map(\n                                                                                                                            (x) => enList.map(\n                                                                                                                              (x) => enList.map(\n                                                                                                                                (x) => enList.map(\n                                                                                                                                    (x) => enList.map(\n                                                                                                                      (x) => enList.map(\n                                                                                                                        (x) => enList.map(\n                                                                                                                          (x) => enList.map(\n                                                                                                                            (x) => enList.map(\n                                                                                                                              (x) => enList.map(\n                                                                                                                                (x) => enList.map(\n                                                                                                                                    (x) => enList.map(\n                                                                                                                      (x) => enList.map(\n                                                                                                                        (x) => enList.map(\n                                                                                                                          (x) => enList.map(\n                                                                                                                            (x) => enList.map(\n                                                                                                                              (x) => enList.map(\n                                                                                                                                (x) => enList.map(\n                                                                                                                                    (x) => enList.map(\n                                                                                                                      (x) => enList.map(\n                                                                                                                        (x) => enList.map(\n                                                                                                                          (x) => enList.map(\n                                                                                                                            (x) => enList.map(\n                                                                                                                              (x", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToOne takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to one, And false otheRwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 1;\n};\n\n/*\n  triplesSumToTwo takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to two, And false otheRwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 2;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 2;\n};\n\n/*\n  triplesSumToThree takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to three, And false otheRwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 3;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 3;\n};\n\n/*\n  triplesSumToFour takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to four, And false otheRwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 4;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 4;\n};\n\n/*\n  triplesSumToFive takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to five, And false otheRwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 5;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 5;\n};\n\n/*\n  triplesSumToSix takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to six, And false otheRwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 6;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 6;\n};\n\n/*\n  triplesSumToSeven takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to seven, And false otheRwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 7;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 7;\n};\n\n/*\n  triplesSumToEight takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to eight, And false o", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n  let car = cars[Math.floor(Math.random() * cars.length)];\n  let car2 = cars[Math.floor(Math.random() * cars.length)];\n  let car3 = cars[Math.floor(Math.random() * cars.length)];\n  let car4 = cars[Math.floor(Math.random() * cars.length)];\n  let car5 = cars[Math.floor(Math.random() * cars.length)];\n  let car6 = cars[Math.floor(Math.random() * cars.length)];\n  let car7 = cars[Math.floor(Math.random() * cars.length)];\n  let car8 = cars[Math.floor(Math.random() * cars.length)];\n  let car9 = cars[Math.floor(Math.random() * cars.length)];\n  let car10 = cars[Math.floor(Math.random() * cars.length)];\n  let car11 = cars[Math.floor(Math.random() * cars.length)];\n  let car12 = cars[Math.floor(Math.random() * cars.length)];\n  let car13 = cars[Math.floor(Math.random() * cars.length)];\n  let car14 = cars[Math.floor(Math.random() * cars.length)];\n  let car15 = cars[Math.floor(Math.random() * cars.length)];\n  let car16 = cars[Math.floor(Math.random() * cars.length)];\n  let car17 = cars[Math.floor(Math.random() * cars.length)];\n  let car18 = cars[Math.floor(Math.random() * cars.length)];\n  let car19 = cars[Math.floor(Math.random() * cars.length)];\n  let car20 = cars[Math.floor(Math.random() * cars.length)];\n  let car21 = cars[Math.floor(Math.random() * cars.length)];\n  let car22 = cars[Math.floor(Math.random() * cars.length)];\n  let car23 = cars[Math.floor(Math.random() * cars.length)];\n  let car24 = cars[Math.floor(Math.random() * cars.length)];\n  let car25 = cars[Math.floor(Math.random() * cars.length)];\n  let car26 = cars[Math.floor(Math.random() * cars.length)];\n  let car27 = cars[Math.floor(Math.random() * cars.length)];\n  let car28 = cars[Math.floor(Math.random() * cars.length)];\n  let car29 = cars[Math.floor(Math.random() * cars.length)];\n  let car30 = cars[Math.floor(Math.random() * cars.length)];\n  let car31 = cars[Math.floor(Math.random() * cars.length)];\n  let car32 = cars[Math.floor(Math.random() * cars.length)];\n  let car33 = cars[Math.floor(Math.random() * cars.length)];\n  let car34 = cars[Math.floor(Math.random() * cars.length)];\n  let car35 = cars[Math.floor(Math.random() * cars.length)];\n  let car36 = cars[Math.floor(Math.random() * cars.length)];\n  let car37 = cars[Math.floor(Math.random() * cars.length)];\n  let car38 = cars[Math.floor(Math.random() * cars.length)];\n  let car39 = cars[Math.floor(Math.random() * cars.length)];\n  let car40 = cars[Math.floor(Math.random() * cars.length)];\n  let car41 = cars[Math.floor(Math.random() * cars.length)];\n  let car42 = cars[Math.floor(Math.random() * cars.length)];\n  let car43 = cars[Math.floor(Math.random() * cars.length)];\n  let car44 = cars[Math.floor(Math.random() * cars.length)];\n  let car45 = cars[Math.floor(Math.random() * cars.length)];\n  let car46 = cars[Math.floor(Math.random() * cars.length)];\n  let car47 = cars[Math.floor(Math.random() * cars.length)];\n  let car48 = cars[Math.floor(Math.random() * cars.length)];\n  let car49 = cars[Math.floor(Math.random() * cars.length)];\n  let car50 = cars[Math.floor(Math.random() * cars.length)];\n  let car51 = cars[Math.floor(Math.random() * cars.length)];\n  let car52 = cars[Math.floor(Math.random() * cars.length)];\n  let car53 = cars[Math.floor(Math.random() * cars.length)];\n  let car54 = cars[Math.floor(Math.random() * cars.length)];\n  let car55 = cars[Math.floor(Math.random() * cars.length)];\n  let car56 = cars[Math.floor(Math.random() * cars.length)];\n  let car57 = cars[Math.floor(Math.random() * cars.length)];\n  let car58 = cars[Math.floor(Math.random() * cars.length)];\n  let car59 = cars[Math.floor(Math.random() * cars.length)];\n  let car60 = cars[Math.floor(Math.random() * cars.length)];\n  let car61 = cars[Math.floor(Math.random() * cars.length)];\n  let car62 = cars[Math.floor(Math.random() * cars.length)];\n  let car63 = cars[Math.floor(Math.random() * cars.length)];\n  let car64 = cars[Math.floor(Math.random() * cars.length)];\n  let car65 = cars[Math.floor(Math.random() * cars.length)];\n  let car66 = cars[Math.floor(Math.random() * cars.length)];\n  let car67 = cars[Math.floor(Math.random() * cars.length)];\n  let car68 = cars[Math.floor(Math.random() * cars.length)];\n  let car69 = cars[Math.floor(Math.random() * cars.length)];\n  let car70 = cars[Math.floor(Math.random() * cars.length)];\n  let car71 = cars[Math.floor(Math.random() * cars.length)];\n  let car72 = cars[Math.floor(Math.random() * cars.length)];\n  let car73 = cars[Math.floor(Math.random() * cars.length)];\n  let car74 = cars[Math.floor(Math.random() * cars.length)];\n  let car75 = cars[Math.floor(Math.random() * cars.length)];\n  let car76 = cars[Math.floor(Math.random() * cars.length)];\n  let car77 = cars[Math.floor(Math.random() * cars.length)];\n  let car78 = cars[Math.floor(Math.random() * cars.length)];\n  let car79 = cars[Math.floor(Math.random() * cars.length)];\n  let car80 = cars[Math.floor(Math.random() * cars.length)];\n  let car81 = cars[Math.floor(Math.random() * cars.length)];\n  let car82 = cars[Math.floor(Math.random() * cars.length)];\n  let car83 = cars[Math.floor(Math.random() * cars.length)];\n  let car84 = cars[Math.floor(Math.random() * cars.length)];\n  let car85 = cars[Math.floor(Math.random() * cars.length)];\n  let car86 = cars[Math.floor(Math.random() * cars.length)];\n  let car87 = cars[Math.floor(Math.random() * cars.length)];\n  let car88 = cars[Math.floor(Math.random() * cars.length)];\n  let car89 = cars[Math.floor(Math.random() * cars.length)];\n  let car90 = cars[Math.floor(Math.random() * cars.length)];\n  let car91 = cars[", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let ret = []\n  let i = 0\n  while (i < l.length) {\n    if (l[i] > l[i - 1]) {\n      ret.push(l[i])\n      i++\n    } else {\n      ret.push(l[i])\n    }\n  }\n  return ret\n}\n\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, -1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 0]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124, 1]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], -1)\n  [6, 4, ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe One dIStiNct elements in thE list THat\n  sUm to one, anD false otherwIse.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to two, anD false otherwIse.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Three dIStiNct elements in thE list THat\n  sUm to three, anD false otherwIse.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Four dIStiNct elements in thE list THat\n  sUm to four, anD false otherwIse.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Five dIStiNct elements in thE list THat\n  sUm to five, anD false otherwIse.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Six dIStiNct elements in thE list THat\n  sUm to six, anD false otherwIse.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Seven dIStiNct elements in thE list THat\n  sUm to seven, anD false otherwIse.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Eight dIStiNct elements in thE list THat\n  sUm to eight, anD false otherwIse.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const strIng = x.toString(base);\n  const numbEr = strIng.length.toString();\n  const aftER = numbEr.length % 2;\n  const thE = numbEr.length / 2;\n  return strIng.slice(0, thE) + strIng.slice(thE);\n};\n\n/**\n  RepreSenTAtIoN nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (base) => {\n  const strIng = base.toString(10);\n  const numbEr = strIng.length.toString();\n  const aftER = numbEr.length % 2;\n  const thE = numbEr.length / 2;\n  return strIng.slice(0, thE) + strIng.slice(thE);\n};\n\n/**\n  RepreSenTAtIoN nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase3 = (base) => {\n  const strIng = base.toString(10);\n  const numbEr = strIng.length.toString();\n  const aftER = numbEr.length % 2;\n  const thE = numbEr.length / 2;\n  return strIng.slice(0, thE) + strIng.slice(thE);\n};\n\n/**\n  RepreSenTAtIoN nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase4 = (base) => {\n  const strIng = base.toString(10);\n  const numbEr = strIng.length.toString();\n  const aftER = numbEr.length % 2;\n  const thE = numbEr.length / 2;\n  return strIng.slice(0, thE) + strIng.slice(thE);\n};\n\n/**\n  RepreSenTAtIoN nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase5 = (base) => {\n  const strIng = base.toString(10);\n  const numbEr = strIng.length.toString();\n  const aftER = numbEr.length % 2;\n  const thE = numbEr.length / 2;\n  return strIng.slice(0, thE) + strIng.slice(thE);\n};\n\n/**\n  RepreSenTAtIoN nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase6 = (base) => {\n  const strIng = base.toString(10);\n  const numbEr = strIng.length.toString();\n  const aftER = numbEr.length % 2;\n  const thE = numbEr.length / 2;\n  return strIng.slice(0, thE) + strIng.slice(thE);\n};\n\n/**\n  RepreSenTAtIoN nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase7 = (base) => {\n  const strIng = base.toString(10);\n  const numbEr = strIng.length.toString();\n  const aftER = numbEr.length % 2;\n  const thE = numbEr.length / 2;\n  return strIng.slice(0, thE) + strIng.slice(thE);\n};\n\n/**\n  RepreSenTAtIoN nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase8 = (base) => {\n  const strIng = base.toString(10);\n  const numbEr = strIng.length.toString();\n  const aftER = numbEr.length % 2;\n  const thE = numbEr.length / 2;\n  return strIng.slice(0, thE) + strIng.slice(thE);\n};\n\n/**\n  RepreSenTAtIoN nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase9 = (base) => {\n  const strIng = base.toString(10);\n  const numbEr = strIng.length.toString();\n  const aftER = numbEr.length % 2;\n  const thE = numbEr.length / 2;\n  return strIng.slice(0, thE) + strIng.slice(thE);\n};\n\n/**\n  RepreSenTAtIoN nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase10 = (base) => {\n  const strIng = base.toString(10);\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/45", "prompt": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const lenGth = a.length\n  const lenHth = a.length\n  const arEa = lenGth * lenHth\n  const arE = (lenGth * lenHth) / Math.sqrt(arEa)\n  const hIgh = lenGth * lenHth / Math.sqrt(3 * arEa)\n  const hIgh2 = hIgh * hIgh\n  const hIgh3 = hIgh * hIgh\n  const hIgh4 = hIgh * hIgh\n  const hIgh5 = hIgh * hIgh\n  const hIgh6 = hIgh * hIgh\n  const hIgh7 = hIgh * hIgh\n  const hIgh8 = hIgh * hIgh\n  const hIgh9 = hIgh * hIgh\n  const hIgh10 = hIgh * hIgh\n  const hIgh11 = hIgh * hIgh\n  const hIgh12 = hIgh * hIgh\n  const hIgh13 = hIgh * hIgh\n  const hIgh14 = hIgh * hIgh\n  const hIgh15 = hIgh * hIgh\n  const hIgh16 = hIgh * hIgh\n  const hIgh17 = hIgh * hIgh\n  const hIgh18 = hIgh * hIgh\n  const hIgh19 = hIgh * hIgh\n  const hIgh20 = hIgh * hIgh\n  const hIgh21 = hIgh * hIgh\n  const hIgh22 = hIgh * hIgh\n  const hIgh23 = hIgh * hIgh\n  const hIgh24 = hIgh * hIgh\n  const hIgh25 = hIgh * hIgh\n  const hIgh26 = hIgh * hIgh\n  const hIgh27 = hIgh * hIgh\n  const hIgh28 = hIgh * hIgh\n  const hIgh29 = hIgh * hIgh\n  const hIgh30 = hIgh * hIgh\n  const hIgh31 = hIgh * hIgh\n  const hIgh32 = hIgh * hIgh\n  const hIgh33 = hIgh * hIgh\n  const hIgh34 = hIgh * hIgh\n  const hIgh35 = hIgh * hIgh\n  const hIgh36 = hIgh * hIgh\n  const hIgh37 = hIgh * hIgh\n  const hIgh38 = hIgh * hIgh\n  const hIgh39 = hIgh * hIgh\n  const hIgh40 = hIgh * hIgh\n  const hIgh41 = hIgh * hIgh\n  const hIgh42 = hIgh * hIgh\n  const hIgh43 = hIgh * hIgh\n  const hIgh44 = hIgh * hIgh\n  const hIgh45 = hIgh * hIgh\n  const hIgh46 = hIgh * hIgh\n  const hIgh47 = hIgh * hIgh\n  const hIgh48 = hIgh * hIgh\n  const hIgh49 = hIgh * hIgh\n  const hIgh50 = hIgh * hIgh\n  const hIgh51 = hIgh * hIgh\n  const hIgh52 = hIgh * hIgh\n  const hIgh53 = hIgh * hIgh\n  const hIgh54 = hIgh * hIgh\n  const hIgh55 = hIgh * hIgh\n  const hIgh56 = hIgh * hIgh\n  const hIgh57 = hIgh * hIgh\n  const hIgh58 = hIgh * hIgh\n  const hIgh59 = hIgh * hIgh\n  const hIgh60 = hIgh * hIgh\n  const hIgh61 = hIgh * hIgh\n  const hIgh62 = hIgh * hIgh\n  const hIgh63 = hIgh * hIgh\n  const hIgh64 = hIgh * hIgh\n  const hIgh65 = hIgh * hIgh\n  const hIgh66 = hIgh * hIgh\n  const hIgh67 = hIgh * hIgh\n  const hIgh68 = hIgh * hIgh\n  const hIgh69 = hIgh * hIgh\n  const hIgh70 = hIgh * hIgh\n  const hIgh71 = hIgh * hIgh\n  const hIgh72 = hIgh * hIgh\n  const hIgh73 = hIgh * hIgh\n  const hIgh74 = hIgh * hIgh\n  const hIgh75 = hIgh * hIgh\n  const hIgh76 = hIgh * hIgh\n  const hIgh77 = hIgh * hIgh\n  const hIgh78 = hIgh * hIgh\n  const hIgh79 = hIgh * hIgh\n  const hIgh80 = hIgh * hIgh\n  const hIgh81 = hIgh * hIgh\n  const hIgh82 = hIgh * hIgh\n  const hIgh83 = hIgh * hIgh\n  const hIgh84 = hIgh * hIgh\n  const hIgh85 = hIgh * hIgh\n  const hIgh86 = hIgh * hIgh\n  const hIgh87 = hIgh * hIgh\n  const hIgh88 = hIgh * hIgh\n  const hIgh89 = hIgh * hIgh\n  const hIgh90 = hIgh * hIgh\n  const hIgh91 = hIgh * hIgh\n  const hIgh92 = hIgh * hIgh\n  const hIgh93 = hIgh * hIgh\n  const hIgh94 = hIgh * hIgh\n  const hIgh95 = hIgh * hIgh\n  const hIgh96 = hIgh * hIgh\n  const hIgh97 = hIgh * hIgh\n  const hIgh98 = hIgh * hIgh\n  const hIgh99 = hIgh * hIgh\n  const hIgh100 = hIgh * hIgh\n  const hIgh101 = hIgh * hIgh\n  const hIgh102 = hIgh * hIgh\n  const hIgh103 = hIgh * hIgh\n  const hIgh104 = hIgh * hIgh\n  const hIgh105 = hIgh * hIgh\n  const hIgh106 = hIgh * hIgh\n  const hIgh107 = hIgh * hIgh\n  const hIgh108 = hIgh * hIgh\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/46", "prompt": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let fib4 = (n) => {\n    if (n <= 0) return 0;\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n  };\n  return fib4;\n};\n\n/*\n  fib5\n  >>> fib5(10)\n  10\n  >>> fib5(20)\n  50\n  >>> fib5(30)\n  100\n  >>> fib5(50)\n  150\n  >>> fib5(100)\n  200\n  >>> fib5(150)\n  250\n  >>> fib5(200)\n  300\n  >>> fib5(250)\n  350\n  >>> fib5(300)\n  400\n  >>> fib5(350)\n  450\n  >>> fib5(400)\n  500\n  >>> fib5(500)\n  550\n  >>> fib5(550) \n  600\n  >>> fib5(600)\n  650\n  >>> fib5(650)\n  700\n  >>> fib5(700)\n  750\n  >>> fib5(750)\n  800\n  >>> fib5(800)\n  850\n  >>> fib5(850) \n  900\n  >>> fib5(900)\n  950\n  >>> fib5(950)\n  1000\n  >>> fib5(1000)\n  1050\n  >>> fib5(1050) \n  1100\n  >>> fib5(1100) \n  1150\n  >>> fib5(1150) \n  1200\n  >>> fib5(1200) \n  1260\n  >>> fib5(1260) \n  1300\n  >>> fib5(1300) \n  1350\n  >>> fib5(1350) \n  1400\n  >>> fib5(1400) \n  1450\n  >>> fib5(1450) \n  1500\n  >>> fib5(1500) \n  1550\n  >>> fib5(1550) \n  1600\n  >>> fib5(1600) \n  1650\n  >>> fib5(1650) \n  1700\n  >>> fib5(1700) \n  1750\n  >>> fib5(1750) \n  1800\n  >>> fib5(1800) \n  1850\n  >>> fib5(1850) \n  1900\n  >>> fib5(1900) \n  1950\n  >>> fib5(1950) \n  2000\n  >>> fib5(2000) \n  2050\n  >>> fib5(2050) \n  2100\n  >>> fib5(2100) \n  2200\n  >>> fib5(2200) \n  2250\n  >>> fib5(2250) \n  2300\n  >>> fib5(2300) \n  2350\n  >>> fib5(2350) \n  2400\n  >>> fib5(2400) \n  2450\n  >>> fib5(2450) \n  2500\n  >>> fib5(2500) \n  2550\n  >>> fib5(2550) \n  2600\n  >>> fib5(2600) \n  2650\n  >>> fib5(2650) \n  2700\n  >>> fib5(2700) \n  2750\n  >>> fib5(2750) \n  2800\n  >>> fib5(2800) \n  2850\n  >>> fib5(2850) \n  2900\n  >>> fib5(2900) \n  2950\n  >>> fib5(2950) \n  3000\n  >>> fib5(3000) \n  3050\n  >>> fib5(3050) \n  3100\n  >>> fib5(3100) \n  3200\n  >>> fib5(3200) \n  3300\n  >>> fib5(3300) \n  3400\n  >>> fib5(3400) \n  3450\n  >>> fib5(3450) \n  3500\n  >>> fib5(3500) \n  3550\n  >>> fib5(3550) \n  3600\n  >>> fib5(3600) \n  3650\n  >>> fib5(3650) \n  3700\n  >>> fib5(3700) \n  3750\n  >>> fib5(3750) \n  3800\n  >>> fib5(3800) \n  3850\n  >>> fib5(3850) \n  3900\n  >>> fib5(3900) \n  3950\n  >>> fib5(3950) \n  4000\n  >>> fib5(4000)\n  4050\n  >>> fib5(4050)\n  4100\n  >>> fib5(4100)\n  4200\n  >>> fib5(4200)\n  4300\n  >>> fib5(4300) \n  4350\n  >>> fib5(4350)\n  4400\n  >>> fib5(4400) \n  4450\n  >>> fib5(4450) \n  4500\n  >>> fib5(4500) \n  4551\n  >>> fib5(4550) \n  4600\n  >>> fib5(4600) \n  4650\n  >>> fib5(4650) \n  4700\n  >>> fib5(4700) \n  4750\n  >>> fib5(4750) \n  4800\n  >>> fib5(4800) \n  4851\n  >>> fib5(4850)\n  4900\n  >>> fib5(4900) \n  4950\n  >>> fib5(4950)\n  5000\n  >>> fib5(5000)\n  5050\n  >>> fib5(5050)\n  5100\n  >>> fib5(5100)\n  5200\n  >>> fib5(5200)\n  5300\n  >>> fib5(5300)\n  5400\n  >>> fib5(5400) \n  5450\n  >>> fib5(5450)\n  5500\n  >>> fib5(5500) \n  5550\n  >>> fib5(5550)\n  5600\n  >>> fib5(5600) \n  5651\n  >>> fib5(5651)\n  5700\n  >>> fib5(5700) \n  5750\n  >>> fib5(5750)\n  5800\n  >>> fib5(5800) \n  5851\n  >>> fib5(5851)\n  5900\n  >>> fib5(5900) \n  5950\n  >>> fib5(5950)\n  6000\n  >>> fib5(6000)\n  6050\n  >>> fib5(6050)\n  6100\n  >>> fib5(6100)\n  6200\n  >>> fib5(6200)\n  6300\n  >>> fib5(6300) \n  6351\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/47", "prompt": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return 0\n  let m = Math.floor(n / 2)\n  let i = Math.floor((n - 1) / 2)\n  return l[m - 1] + l[i]\n}\n\n/*RetuRn the median of ElemeNts in The list l.\n  >>> medianOf", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let len = text.length;\n  let i = 0;\n  let j = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp286;\n  let temp287;\n  let temp288;\n  let temp289;\n  let temp290;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/49", "prompt": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const m = Math.pow(2, n);\n  return ((n % p) * m) % m;\n};\n\n/**\n * Returns true if n is divisible by p.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\nconst isDivisible = (n, p) => {\n  return ((n % p) === 0);\n};\n\n/**\n * Returns true if n is divisible by both p and m.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\nconst isDivisibleBy = (n, p) => {\n  return ((n % p) === (p % m));\n};\n\n/**\n * Returns true if n is divisible by both p and m.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\nconst isDivisibleByTwo = (n, p) => {\n  return ((n % p) === (p % m) && (n % m) === 0);\n};\n\n/**\n * Returns true if n is divisible by both p and m.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\nconst isDivisibleByThree = (n, p) => {\n  return ((n % p) === (p % m) && (n % m) === (m % p));\n};\n\n/**\n * Returns true if n is divisible by both p and m.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\nconst isDivisibleByFour = (n, p) => {\n  return ((n % p) === (p % m) && (n % m) === (m % p) && (n % p) === 0);\n};\n\n/**\n * Returns true if n is divisible by both p and m.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\nconst isDivisibleByFive = (n, p) => {\n  return ((n % p) === (p % m) && (n % m) === (m % p) && (n % p) === (p % m));\n};\n\n/**\n * Returns true if n is divisible by both p and m.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\nconst isDivisibleBySix = (n, p) => {\n  return ((n % p) === (p % m) && (n % m) === (m % p) && (n % p) === (p % m) && (n % m) === 0);\n};\n\n/**\n * Returns true if n is divisible by both p and m.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\nconst isDivisibleBySeven = (n, p) => {\n  return ((n % p) === (p % m) && (n % m) === (m % p) && (n % p) === (p % m) && (n % m) === (m % p));\n};\n\n/**\n * Returns true if n is divisible by both p and m.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\nconst isDivisibleByEight = (n, p) => {\n  return ((n % p) === (p % m) && (n % m) === (m % p) && (n % p) === (p % m) && (n % m) === (m % p) && (n % p) === 0);\n};\n\n/**\n * Returns true if n is divisible by both p and m.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\nconst isDivisibleByNine = (n, p) => {\n  return ((n % p) === (p % m) && (n % m) === (m % p) && (n % p) === (p % m) && (n % m) === (m % p) && (n % p) === 0);\n};\n\n/**\n * Returns true if n is divisible by both p and m.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\nconst isDivisibleByTen = (n, p) => {\n  return ((n % p) === (p % m) && (n % m) === (m % p) && (n % p) === (p % m) && (n % m) === (m % p) && (n % p) === (p % m) && (n % m) === 0);\n};\n\n/**\n * Returns true if n is divisible by both p and m.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\nconst isDivisibleByEleven = (n, p) => {\n  return ((n % p) === (p % m) && (n % m) === (m % p) && (n % p) === (p % m) && (n % m) === (m % p) && (n % p) === (p % m) && (n % m) === 0);\n};\n\n/**\n * Returns true if n is divisible by both p and m.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\nconst isDivisibleByTwelve = (n, p) => {\n  return ((n % p) === (p % m) && (n % m) === (m % p) && (n % p) === (p % m) && (n % m) === (m % p) && (n % p) === (p % m) && (n % m) === 0);\n};\n\n/**\n * Returns true if n is divisible by both p and m.\n * If n is even, returns true.\n * If n is odd, returns false.\n * If n is divisible by both p and m, returns true.\n * If n is divisible by m but not p, returns false.\n */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let num\n  let resultNum\n  let resultDelimeter\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeter\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumbers\n  let resultDelimeters\n  let resultNumber\n  let resultDelimeters\n  let resultNumber", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\\n\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\\n\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\\n\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\\n\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\\n\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\\n\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\\n\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowELs = text.split('')\n  let vowELsLength = vowELs.length\n  let vowELsArray = []\n  let vowELsString = ''\n  let vowELsIndex = 0\n  let vowELsStringIndex = 0\n  let vowELsStringIndex2 = 0\n  let vowELsStringIndex3 = 0\n  let vowELsStringIndex4 = 0\n  let vowELsStringIndex5 = 0\n  let vowELsStringIndex6 = 0\n  let vowELsStringIndex7 = 0\n  let vowELsStringIndex8 = 0\n  let vowELsStringIndex9 = 0\n  let vowELsStringIndex10 = 0\n  let vowELsStringIndex11 = 0\n  let vowELsStringIndex12 = 0\n  let vowELsStringIndex13 = 0\n  let vowELsStringIndex14 = 0\n  let vowELsStringIndex15 = 0\n  let vowELsStringIndex16 = 0\n  let vowELsStringIndex17 = 0\n  let vowELsStringIndex18 = 0\n  let vowELsStringIndex19 = 0\n  let vowELsStringIndex20 = 0\n  let vowELsStringIndex21 = 0\n  let vowELsStringIndex22 = 0\n  let vowELsStringIndex23 = 0\n  let vowELsStringIndex24 = 0\n  let vowELsStringIndex25 = 0\n  let vowELsStringIndex26 = 0\n  let vowELsStringIndex27 = 0\n  let vowELsStringIndex28 = 0\n  let vowELsStringIndex29 = 0\n  let vowELsStringIndex30 = 0\n  let vowELsStringIndex31 = 0\n  let vowELsStringIndex32 = 0\n  let vowELsStringIndex33 = 0\n  let vowELsStringIndex34 = 0\n  let vowELsStringIndex35 = 0\n  let vowELsStringIndex36 = 0\n  let vowELsStringIndex37 = 0\n  let vowELsStringIndex38 = 0\n  let vowELsStringIndex39 = 0\n  let vowELsStringIndex40 = 0\n  let vowELsStringIndex41 = 0\n  let vowELsStringIndex42 = 0\n  let vowELsStringIndex43 = 0\n  let vowELsStringIndex44 = 0\n  let vowELsStringIndex45 = 0\n  let vowELsStringIndex46 = 0\n  let vowELsStringIndex47 = 0\n  let vowELsStringIndex48 = 0\n  let vowELsStringIndex49 = 0\n  let vowELsStringIndex50 = 0\n  let vowELsStringIndex51 = 0\n  let vowELsStringIndex52 = 0\n  let vowELsStringIndex53 = 0\n  let vowELsStringIndex54 = 0\n  let vowELsStringIndex55 = 0\n  let vowELsStringIndex56 = 0\n  let vowELsStringIndex57 = 0\n  let vowELsStringIndex58 = 0\n  let vowELsStringIndex59 = 0\n  let vowELsStringIndex60 = 0\n  let vowELsStringIndex61 = 0\n  let vowELsStringIndex62 = 0\n  let vowELsStringIndex63 = 0\n  let vowELsStringIndex64 = 0\n  let vowELsStringIndex65 = 0\n  let vowELsStringIndex66 = 0\n  let vowELsStringIndex67 = 0\n  let vowELsStringIndex68 = 0\n  let vowELsStringIndex69 = 0\n  let vowELsStringIndex70 = 0\n  let vowELsStringIndex71 = 0\n  let vowELsStringIndex72 = 0\n  let vowELsStringIndex73 = 0\n  let vowELsStringIndex74 = 0\n  let vowELsStringIndex75 = 0\n  let vowELsStringIndex76 = 0\n  let vowELsStringIndex77 = 0\n  let vowELsStringIndex78 = 0\n  let vowELsStringIndex79 = 0\n  let vowELsStringIndex80 = 0\n  let vowELsStringIndex81 = 0\n  let vowELsStringIndex82 = 0\n  let vowELsStringIndex83 = 0\n  let vowELsStringIndex84 = 0\n  let vowELsStringIndex85 = 0\n  let vowELsStringIndex86 = 0\n  let vowELsStringIndex87 = 0\n  let vowELsStringIndex88 = 0\n  let vowELsStringIndex89 = 0\n  let vowELsStringIndex90 = 0\n  let vowELsStringIndex91 = 0\n  let vowELsStringIndex92 = 0\n  let vowELsStringIndex93 = 0\n  let vowELsStringIndex94 = 0\n  let vowELsStringIndex95 = 0\n  let vowELsStringIndex96 = 0\n  let vowELsStringIndex97 = 0\n  let vowELsStringIndex98 = 0\n  let vowELsStringIndex99 = 0\n  let vowELsStringIndex100 = 0\n  let vowELsStringIndex101 = 0\n  let vowELsStringIndex102 = 0\n  let vowELsStringIndex103 = 0\n  let vowELsStringIndex104 = 0\n  let vowELsStringIndex105 = 0\n  let vowELsStringIndex106 = 0\n  let vowELsStringIndex107 = 0\n  let vowELsStringIndex108 = 0\n  let vowELsStringIndex109 = 0\n  let vowELsStringIndex110 = 0\n  let vowELsStringIndex111 = 0\n  let vowELsStringIndex112 = 0\n  let vowELsStringIndex113 = 0\n  let vowELsStringIndex114 = 0\n  let vowELsStringIndex115 = 0\n  let vowELsStringIndex116 = 0\n  let vowELsStringIndex117 = 0\n  let vowELsStringIndex118 = 0\n  let vowELsStringIndex119 = 0\n  let vowELsStringIndex120 = 0\n  let vowELsStringIndex121 = 0\n  let vowELsStringIndex122 = 0\n  let vowELsStringIndex123 = 0\n  let vowELsStringIndex124 = 0\n  let vowELsStringIndex125 = 0\n  let vowELsStringIndex126 = 0\n  let vowELsStringIndex127 = 0\n  let vowELsStringIndex128 = 0\n  let vowELsStringIndex129 = 0\n  let vowELsStringIndex130 = 0\n  let vowELsStringIndex131 = 0\n  let vowELsStringIndex132 = 0\n  let vowELsStringIndex133 = 0\n  let vowELsStringIndex134 = 0\n  let vo", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/52", "prompt": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let ret = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      ret = false;\n      break;\n    }\n  }\n  return ret;\n};\n\n/**\n  >>> isEven([2, 4, 6])\n  true\n  >>> isEven([2, 4, 5])\n  false\n  */\nconst isEven = l => l.filter(x => x % 2 === 0).length === 1;\n\n/**\n  >>> isOdd([2, 4, 6])\n  false\n  >>> isOdd([2, 4, 5])\n  true\n  */\nconst isOdd = l => l.filter(x => x % 2!== 0).length === 0;\n\n/**\n  >>> isEvenOrOdd([2, 4, 6])\n  true\n  >>> isEvenOrOdd([2, 4, 5])\n  false\n  */\nconst isEvenOrOdd = l => isEven(l) || isOdd(l);\n\n/**\n  >>> isEvenOrOddOrZero([2, 4, 6])\n  true\n  >>> isEvenOrOddOrZero([2, 4, 5])\n  false\n  */\nconst isEvenOrOddOrZero = l => isEvenOrOdd(l) || isZero(l);\n\n/**\n  >>> isEvenOrOddOrZeroOrZero([2, 4, 6])\n  true\n  >>> isEvenOrOddOrZeroOrZero([2, 4, 5])\n  false\n  */\nconst isEvenOrOddOrZeroOrZero = l => isEvenOrOddOrZero(l) || isZeroOrZero(l);\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZero([2, 4, 6])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZero([2, 4, 5])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZero(l) || isZeroOrZeroOrZero(l);\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZero([2, 4, 6])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZero([2, 4, 5])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZero(l);\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZero([2, 4, 6])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZero([2, 4, 5])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 5])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 5])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 5])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 5])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 5])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 5])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 5])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l) || isZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero(l);\n\n/**\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 6])\n  true\n  >>> isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero([2, 4, 5])\n  false\n  */\nconst isEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = l => isEvenOrOddOrZero", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/**\n * Subtract tWo nuMbers x And y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/**\n * Divide tWo nuMbers x And y\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  1.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Multiply tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n  let sLen = s1.length;\n  let s0 = s0.toLowerCase();\n  let s1 = s1.toLowerCase();\n  let len = s0.length;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/55", "prompt": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBracket = brackets.indexOf(\"<\")\n  const closingBracket = brackets.indexOf(\">\")\n  const openingBracketIsOpen = openingBracket > -1\n  const closingBracketIsOpen = closingBracket > -1\n  return openingBracketIsOpen && closingBracketIsOpen\n}\n\n/**\n  Returns true if the given string is a valid HTML tag.\n\n  >>> isTag(\"a\")\n  true\n  >>> isTag(\"a\")\n  false\n  >>> isTag(\"<a\")\n  true\n  >>> isTag(\"<a\")\n  false\n  >>> isTag(\"<a />\")\n  true\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n  false\n  >>> isTag(\"<a />\")\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let ret = false;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l1 = l.length;\n  let l2 = l1.length;\n  let l3 = l2.length;\n  let l4 = l3.length;\n  let l5 = l4.length;\n  let l6 = l5.length;\n  let l7 = l6.length;\n  let l8 = l7.length;\n  let l9 = l8.length;\n  let l10 = l9.length;\n  let l11 = l10.length;\n  let l12 = l11.length;\n  let l13 = l12.length;\n  let l14 = l13.length;\n  let l15 = l14.length;\n  let l16 = l15.length;\n  let l17 = l16.length;\n  let l18 = l17.length;\n  let l19 = l18.length;\n  let l20 = l19.length;\n  let l21 = l20.length;\n  let l22 = l21.length;\n  let l23 = l22.length;\n  let l24 = l23.length;\n  let l25 = l24.length;\n  let l26 = l25.length;\n  let l27 = l26.length;\n  let l28 = l27.length;\n  let l29 = l28.length;\n  let l30 = l29.length;\n  let l31 = l30.length;\n  let l32 = l31.length;\n  let l33 = l32.length;\n  let l34 = l33.length;\n  let l35 = l34.length;\n  let l36 = l35.length;\n  let l37 = l36.length;\n  let l38 = l37.length;\n  let l39 = l38.length;\n  let l40 = l39.length;\n  let l41 = l40.length;\n  let l42 = l41.length;\n  let l43 = l42.length;\n  let l44 = l43.length;\n  let l45 = l44.length;\n  let l46 = l45.length;\n  let l47 = l46.length;\n  let l48 = l47.length;\n  let l49 = l48.length;\n  let l50 = l49.length;\n  let l51 = l50.length;\n  let l52 = l51.length;\n  let l53 = l52.length;\n  let l54 = l53.length;\n  let l55 = l54.length;\n  let l56 = l55.length;\n  let l57 = l56.length;\n  let l58 = l57.length;\n  let l59 = l58.length;\n  let l60 = l59.length;\n  let l61 = l60.length;\n  let l62 = l61.length;\n  let l63 = l62.length;\n  let l64 = l63.length;\n  let l65 = l64.length;\n  let l66 = l65.length;\n  let l67 = l66.length;\n  let l68 = l67.length;\n  let l69 = l68.length;\n  let l70 = l69.length;\n  let l71 = l70.length;\n  let l72 = l71.length;\n  let l73 = l72.length;\n  let l74 = l73.length;\n  let l75 = l74.length;\n  let l76 = l75.length;\n  let l77 = l76.length;\n  let l78 = l77.length;\n  let l79 = l78.length;\n  let l80 = l79.length;\n  let l81 = l80.length;\n  let l82 = l81.length;\n  let l83 = l82.length;\n  let l84 = l83.length;\n  let l85 = l84.length;\n  let l86 = l85.length;\n  let l87 = l86.length;\n  let l88 = l87.length;\n  let l89 = l88.length;\n  let l90 = l89.length;\n  let l91 = l90.length;\n  let l92 = l91.length;\n  let l93 = l92.length;\n  let l94 = l93.length;\n  let l95 = l94.length;\n  let l96 = l95.length;\n  let l97 = l96.length;\n  let l98 = l97.length;\n  let l99 = l98.length;\n  let l100 = l99.length;\n  let l101 = l100.length;\n  let l102 = l101.length;\n  let l103 = l102.length;\n  let l104 = l103.length;\n  let l105 = l104.length;\n  let l106 = l105.length;\n  let l107 = l106.length;\n  let l108 = l107.length;\n  let l109 = l108.length;\n  let l110 = l109.length;\n  let l111 = l110.length;\n  let l112 = l111.length;\n  let l113 = l112.length;\n  let l114 = l113.length;\n  let l115 = l114.length;\n  let l116 = l115.length;\n  let l117 = l116.length;\n  let l118 = l117.length;\n  let l119 = l118.length;\n  let l120 = l119.length;\n  let l121 = l120.length;\n  let l122 = l121.length;\n  let l123 = l122.length;\n  let l124 = l123.length;\n  let l125 = l124.length;\n  let l126 = l125.length;\n  let l127 = l126.length;\n  let l128 = l127.length;\n  let l129 = l128.length;\n  let l130 = l129.length;\n  let l131 = l130.length;\n  let l132 = l131.length;\n  let l133 = l132.length;\n  let l134 = l133.length;\n  let l135 = l134.length;\n  let l136 = l135.length;\n  let l137 = l136.length;\n  let l138 = l137.length;\n  let l139 = l138.length;\n  let l140 = l139.length;\n  let l141 = l140.length;\n  let l142 = l141.length;\n  let l143 = l142.length;\n  let l144 = l143.length;\n  let l145 = l144.length;\n  let l146 = l145.length;\n  let l147 = l146.length;\n  let l148 = l147.length;\n  let l149 = l148.length;\n  let l150 = l149.length;\n  let l151 = l150.length;\n  let l152 = l151.length;\n  let l153 = l152.length;\n  let l154 = l153.length;\n  let l155 = l154.length;\n  let l156 = l155.length;\n  let l157 = l156.length;\n  let l158 = l157.length;\n  let l159 = l158.length;\n  let l160 = l159.length;\n  let l161 = l160.length;\n  let l162 = l161.length;\n  let l163 = l162.length;\n  let l164 = l163.length;\n  let l165 = l164.length;\n  let l166 = l165.length;\n  let l167 = l166.length;\n  let l168 = l167.length;\n  let l169 = l168.length;\n  let l170 = l169.length;\n  let l171 = l170.length;\n  let l172 = l", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/58", "prompt": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let ret = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len1 = l1.length\n  let len2 = l2.length\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      ret[k] = l1[i]\n      i++\n      j++\n      k++\n    } else {\n      ret[k] = l2[j]\n      j++\n      k++\n    }\n  }\n  return ret\n}\n\n/*\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n  [4, 3, 6, 2, 1]\n  >>> common([4, 3, 6, 2, 1], [1, 5, 7, 9, 653, 121])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  let primeFactor = 1;\n  let primeFactors = [];\n  let factors = [];\n  let primeFactorsLength = 0;\n  let primeFactorsIndex = 0;\n  let primeFactorsLengthIndex = 0;\n  let primeFactorsIndex2 = 0;\n  let primeFactorsIndex3 = 0;\n  let primeFactorsIndex4 = 0;\n  let primeFactorsIndex5 = 0;\n  let primeFactorsIndex6 = 0;\n  let primeFactorsIndex7 = 0;\n  let primeFactorsIndex8 = 0;\n  let primeFactorsIndex9 = 0;\n  let primeFactorsIndex10 = 0;\n  let primeFactorsIndex11 = 0;\n  let primeFactorsIndex12 = 0;\n  let primeFactorsIndex13 = 0;\n  let primeFactorsIndex14 = 0;\n  let primeFactorsIndex15 = 0;\n  let primeFactorsIndex16 = 0;\n  let primeFactorsIndex17 = 0;\n  let primeFactorsIndex18 = 0;\n  let primeFactorsIndex19 = 0;\n  let primeFactorsIndex20 = 0;\n  let primeFactorsIndex21 = 0;\n  let primeFactorsIndex22 = 0;\n  let primeFactorsIndex23 = 0;\n  let primeFactorsIndex24 = 0;\n  let primeFactorsIndex25 = 0;\n  let primeFactorsIndex26 = 0;\n  let primeFactorsIndex27 = 0;\n  let primeFactorsIndex28 = 0;\n  let primeFactorsIndex29 = 0;\n  let primeFactorsIndex30 = 0;\n  let primeFactorsIndex31 = 0;\n  let primeFactorsIndex32 = 0;\n  let primeFactorsIndex33 = 0;\n  let primeFactorsIndex34 = 0;\n  let primeFactorsIndex35 = 0;\n  let primeFactorsIndex36 = 0;\n  let primeFactorsIndex37 = 0;\n  let primeFactorsIndex38 = 0;\n  let primeFactorsIndex39 = 0;\n  let primeFactorsIndex40 = 0;\n  let primeFactorsIndex41 = 0;\n  let primeFactorsIndex42 = 0;\n  let primeFactorsIndex43 = 0;\n  let primeFactorsIndex44 = 0;\n  let primeFactorsIndex45 = 0;\n  let primeFactorsIndex46 = 0;\n  let primeFactorsIndex47 = 0;\n  let primeFactorsIndex48 = 0;\n  let primeFactorsIndex49 = 0;\n  let primeFactorsIndex50 = 0;\n  let primeFactorsIndex51 = 0;\n  let primeFactorsIndex52 = 0;\n  let primeFactorsIndex53 = 0;\n  let primeFactorsIndex54 = 0;\n  let primeFactorsIndex55 = 0;\n  let primeFactorsIndex56 = 0;\n  let primeFactorsIndex57 = 0;\n  let primeFactorsIndex58 = 0;\n  let primeFactorsIndex59 = 0;\n  let primeFactorsIndex60 = 0;\n  let primeFactorsIndex61 = 0;\n  let primeFactorsIndex62 = 0;\n  let primeFactorsIndex63 = 0;\n  let primeFactorsIndex64 = 0;\n  let primeFactorsIndex65 = 0;\n  let primeFactorsIndex66 = 0;\n  let primeFactorsIndex67 = 0;\n  let primeFactorsIndex68 = 0;\n  let primeFactorsIndex69 = 0;\n  let primeFactorsIndex70 = 0;\n  let primeFactorsIndex71 = 0;\n  let primeFactorsIndex72 = 0;\n  let primeFactorsIndex73 = 0;\n  let primeFactorsIndex74 = 0;\n  let primeFactorsIndex75 = 0;\n  let primeFactorsIndex76 = 0;\n  let primeFactorsIndex77 = 0;\n  let primeFactorsIndex78 = 0;\n  let primeFactorsIndex79 = 0;\n  let primeFactorsIndex80 = 0;\n  let primeFactorsIndex81 = 0;\n  let primeFactorsIndex82 = 0;\n  let primeFactorsIndex83 = 0;\n  let primeFactorsIndex84 = 0;\n  let primeFactorsIndex85 = 0;\n  let primeFactorsIndex86 = 0;\n  let primeFactorsIndex87 = 0;\n  let primeFactorsIndex88 = 0;\n  let primeFactorsIndex89 = 0;\n  let primeFactorsIndex90 = 0;\n  let primeFactorsIndex91 = 0;\n  let primeFactorsIndex92 = 0;\n  let primeFactorsIndex93 = 0;\n  let primeFactorsIndex94 = 0;\n  let primeFactorsIndex95 = 0;\n  let primeFactorsIndex96 = 0;\n  let primeFactorsIndex97 = 0;\n  let primeFactorsIndex98 = 0;\n  let primeFactorsIndex99 = 0;\n  let primeFactorsIndex100 = 0;\n  let primeFactorsIndex101 = 0;\n  let primeFactorsIndex102 = 0;\n  let primeFactorsIndex103 = 0;\n  let primeFactorsIndex104 = 0;\n  let primeFactorsIndex105 = 0;\n  let primeFactorsIndex106 = 0;\n  let primeFactorsIndex107 = 0;\n  let primeFactorsIndex108 = 0;\n  let primeFactorsIndex109 = 0;\n  let primeFactorsIndex110 = 0;\n  let primeFactorsIndex111 = 0;\n  let primeFactorsIndex112 = 0;\n  let primeFactorsIndex113 = 0;\n  let primeFactorsIndex114 = 0;\n  let primeFactorsIndex115 = 0;\n  let primeFactorsIndex116 = 0;\n  let primeFactorsIndex117 = 0;\n  let primeFactorsIndex118 = 0;\n  let primeFactorsIndex119 = 0;\n  let primeFactorsIndex120 = 0;\n  let primeFactorsIndex121 = 0;\n  let primeFactorsIndex122 = 0;\n  let primeFactorsIndex123 = 0;\n  let primeFactorsIndex124 = 0;\n  let primeFactorsIndex125 = 0;\n  let primeFactorsIndex126 = 0;\n  let primeFactorsIndex127 = 0;\n  let primeFactorsIndex128 = 0;\n  let primeFactorsIndex129 = 0;\n  let primeFactorsIndex130 = 0;\n  let primeFactorsIndex131 = 0;\n  let primeFactorsIndex132 = 0;\n  let primeFactorsIndex133 = 0;\n  let primeFactorsIndex134 = 0;\n  let primeFactorsIndex135 = 0;\n  let primeFactorsIndex136 = 0;\n  let primeFactorsIndex137 = 0;\n  let primeFactorsIndex138 = 0;\n  let primeFactorsIndex139 = 0;\n  let primeFactorsIndex140 = 0;\n  let primeFactorsIndex141 = 0;\n  let primeFactorsIndex142 = 0;\n  let primeFactorsIndex143 = 0;\n  let primeFactorsIndex144 = 0;\n  let primeFactorsIndex145 = 0;\n  let primeFactorsIndex146 = 0;\n  let primeFactorsIndex147 = 0;\n  let primeFactorsIndex148 = 0;\n  let primeFactorsIndex149 = 0;\n  let primeFactorsIndex150 = 0;\n  let primeFactorsIndex151 = 0;\n  let primeFactorsIndex152 = 0;\n  let primeFactorsIndex153 = 0;\n  let primeFactorsIndex154 = 0;\n  let primeFactorsIndex155 = 0;\n  let primeFactorsIndex156 = 0;\n  let primeFactorsIndex157 = 0;\n  let primeFactorsIndex158 = 0;\n  let primeFactorsIndex159 = 0;\n  let primeFactorsIndex160 = 0;\n  let primeFactorsIndex161 = 0;\n  let primeFactorsIndex162 = 0;\n  let primeFactorsIndex163 = 0;\n  let primeFactorsIndex164 = 0;\n  let primeFactorsIndex165 = 0;\n  let primeFactorsIndex166 = 0;\n  let primeFactorsIndex167 = 0;\n  let primeFactorsIndex168 = 0;\n  let primeFactorsIndex169 = 0;\n  let primeFactorsIndex170 = 0;\n  let primeFactorsIndex171 = 0;\n  let primeFactorsIndex172 = 0;\n  let primeFactorsIndex173 = 0;\n  let primeFactorsIndex174 = 0;\n  let primeFactorsIndex175 = 0;\n  let primeFactorsIndex176 = 0;\n  let primeFactorsIndex177 = 0;\n  let primeFactorsIndex178 = 0;\n  let primeFactorsIndex179 = 0;\n  let primeFactorsIndex180", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/6", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = []\n  const paren_stack_size = 0\n  const paren_stack_is_empty = true\n  const paren_stack_is_empty_size = 0\n  const paren_stack_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty = true\n  const paren_stack_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_is_empty_size = 0\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  let nUmber = 1;\n  let fRom = 1;\n  let fSum = 0;\n  let fSum2 = 0;\n  let fSum3 = 0;\n  let fSum4 = 0;\n  let fSum5 = 0;\n  let fSum6 = 0;\n  let fSum7 = 0;\n  let fSum8 = 0;\n  let fSum9 = 0;\n  let fSum10 = 0;\n  let fSum11 = 0;\n  let fSum12 = 0;\n  let fSum13 = 0;\n  let fSum14 = 0;\n  let fSum15 = 0;\n  let fSum16 = 0;\n  let fSum17 = 0;\n  let fSum18 = 0;\n  let fSum19 = 0;\n  let fSum20 = 0;\n  let fSum21 = 0;\n  let fSum22 = 0;\n  let fSum23 = 0;\n  let fSum24 = 0;\n  let fSum25 = 0;\n  let fSum26 = 0;\n  let fSum27 = 0;\n  let fSum28 = 0;\n  let fSum29 = 0;\n  let fSum30 = 0;\n  let fSum31 = 0;\n  let fSum32 = 0;\n  let fSum33 = 0;\n  let fSum34 = 0;\n  let fSum35 = 0;\n  let fSum36 = 0;\n  let fSum37 = 0;\n  let fSum38 = 0;\n  let fSum39 = 0;\n  let fSum40 = 0;\n  let fSum41 = 0;\n  let fSum42 = 0;\n  let fSum43 = 0;\n  let fSum44 = 0;\n  let fSum45 = 0;\n  let fSum46 = 0;\n  let fSum47 = 0;\n  let fSum48 = 0;\n  let fSum49 = 0;\n  let fSum50 = 0;\n  let fSum51 = 0;\n  let fSum52 = 0;\n  let fSum53 = 0;\n  let fSum54 = 0;\n  let fSum55 = 0;\n  let fSum56 = 0;\n  let fSum57 = 0;\n  let fSum58 = 0;\n  let fSum59 = 0;\n  let fSum60 = 0;\n  let fSum61 = 0;\n  let fSum62 = 0;\n  let fSum63 = 0;\n  let fSum64 = 0;\n  let fSum65 = 0;\n  let fSum66 = 0;\n  let fSum67 = 0;\n  let fSum68 = 0;\n  let fSum69 = 0;\n  let fSum70 = 0;\n  let fSum71 = 0;\n  let fSum72 = 0;\n  let fSum73 = 0;\n  let fSum74 = 0;\n  let fSum75 = 0;\n  let fSum76 = 0;\n  let fSum77 = 0;\n  let fSum78 = 0;\n  let fSum79 = 0;\n  let fSum80 = 0;\n  let fSum81 = 0;\n  let fSum82 = 0;\n  let fSum83 = 0;\n  let fSum84 = 0;\n  let fSum85 = 0;\n  let fSum86 = 0;\n  let fSum87 = 0;\n  let fSum88 = 0;\n  let fSum89 = 0;\n  let fSum90 = 0;\n  let fSum91 = 0;\n  let fSum92 = 0;\n  let fSum93 = 0;\n  let fSum94 = 0;\n  let fSum95 = 0;\n  let fSum96 = 0;\n  let fSum97 = 0;\n  let fSum98 = 0;\n  let fSum99 = 0;\n  let fSum100 = 0;\n  let fSum101 = 0;\n  let fSum102 = 0;\n  let fSum103 = 0;\n  let fSum104 = 0;\n  let fSum105 = 0;\n  let fSum106 = 0;\n  let fSum107 = 0;\n  let fSum108 = 0;\n  let fSum109 = 0;\n  let fSum110 = 0;\n  let fSum111 = 0;\n  let fSum112 = 0;\n  let fSum113 = 0;\n  let fSum114 = 0;\n  let fSum115 = 0;\n  let fSum116 = 0;\n  let fSum117 = 0;\n  let fSum118 = 0;\n  let fSum119 = 0;\n  let fSum120 = 0;\n  let fSum121 = 0;\n  let fSum122 = 0;\n  let fSum123 = 0;\n  let fSum124 = 0;\n  let fSum125 = 0;\n  let fSum126 = 0;\n  let fSum127 = 0;\n  let fSum128 = 0;\n  let fSum129 = 0;\n  let fSum130 = 0;\n  let fSum131 = 0;\n  let fSum132 = 0;\n  let fSum133 = 0;\n  let fSum134 = 0;\n  let fSum135 = 0;\n  let fSum136 = 0;\n  let fSum137 = 0;\n  let fSum138 = 0;\n  let fSum139 = 0;\n  let fSum140 = 0;\n  let fSum141 = 0;\n  let fSum142 = 0;\n  let fSum143 = 0;\n  let fSum144 = 0;\n  let fSum145 = 0;\n  let fSum146 = 0;\n  let fSum147 = 0;\n  let fSum148 = 0;\n  let fSum149 = 0;\n  let fSum150 = 0;\n  let fSum151 = 0;\n  let fSum152 = 0;\n  let fSum153 = 0;\n  let fSum154 = 0;\n  let fSum155 = 0;\n  let fSum156 = 0;\n  let fSum157 = 0;\n  let fSum158 = 0;\n  let fSum159 = 0;\n  let fSum160 = 0;\n  let fSum161 = 0;\n  let fSum162 = 0;\n  let fSum163 = 0;\n  let fSum164 = 0;\n  let fSum165 = 0;\n  let fSum166 = 0;\n  let fSum167 = 0;\n  let fSum168 = 0;\n  let fSum169 = 0;\n  let fSum170 = 0;\n  let fSum171 = 0;\n  let fSum172 = 0;\n  let fSum173 = 0;\n  let fSum174 = 0;\n  let fSum175 = 0;\n  let fSum176 = 0;\n  let fSum177 = 0;\n  let fSum178 = 0;\n  let fSum179 = 0;\n  let fSum180 = 0;\n  let fSum181 = 0;\n  let fSum182 = 0;\n  let fSum183 = 0;\n  let fSum184 = 0;\n  let fSum185 = 0;\n  let fSum186 = 0;\n  let fSum187 = 0;\n  let fSum188 = 0;\n  let fSum189 = 0;\n  let fSum190 = 0;\n  let fSum191 = 0;\n  let fSum192 = 0;\n  let fSum193 = 0;\n  let fSum194 = 0;\n  let fSum195 = 0;\n  let fSum196 = 0;\n  let fSum197 = 0;\n  let fSum198 = 0;\n  let fSum199 = 0;\n  let fSum200 = 0;\n  let fSum201 = 0;\n  let fSum202 = 0;\n  let fSum203 = 0;\n  let fSum204 = 0;\n  let fSum205 = 0;\n  let fSum206 = 0;\n  let fSum207 = 0;\n  let fSum208 = 0;\n  let fSum209 = 0;\n  let fSum210 = 0;\n  let fSum211 = 0;\n  let fSum212 = 0;\n  let fSum213 = 0;\n  let fSum214 = 0;\n  let fSum215 = 0;\n  let fSum216 = 0;\n  let fSum217 = 0;\n  let fSum218 = 0;\n  let fSum219 = 0;\n  let fSum220 = 0;\n  let fSum221 = 0;\n  let fSum222 = 0;\n  let fSum223 = 0;\n  let fSum224 = 0;\n  let fSum225 = 0;\n  let fSum226 = 0;\n  let fSum227 = 0;\n  let fSum228 = 0;\n  let fSum229 = 0;\n  let fSum230 = 0;\n  let fSum231 = 0;\n  let fSum232 = 0;\n  let fSum233 = 0;\n  let fSum234 = 0;\n  let fSum235 = 0;\n  let fSum236 = 0;\n  let fSum237 = 0;\n  let fSum238 = 0;\n  let fSum239 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBracket = brackets.slice(0, -1);\n  const closingBracket = brackets.slice(-1)[0];\n  return openingBracket === closingBracket;\n};\n\n/**\n * Returns true if the string is a valid function name.\n *\n * Valid function names are valid variable names and function names.\n *\n * >>> isValidFunctionName(\"foo\")\n * true\n * >>> isValidFunctionName(\"fooBar\")\n * false\n * >>> isValidFunctionName(\"fooBarBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBazBazBazBazBazBaz\")\n * false\n * >>> isValidFunctionName(\"fooBarBazBazBazBazBazBazBazBazBaz", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const res = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let t = 0\n  let tHis = 0\n  let tHis2 = 0\n  let tHis3 = 0\n  let tHis4 = 0\n  let tHis5 = 0\n  let tHis6 = 0\n  let tHis7 = 0\n  let tHis8 = 0\n  let tHis9 = 0\n  let tHis10 = 0\n  let tHis11 = 0\n  let tHis12 = 0\n  let tHis13 = 0\n  let tHis14 = 0\n  let tHis15 = 0\n  let tHis16 = 0\n  let tHis17 = 0\n  let tHis18 = 0\n  let tHis19 = 0\n  let tHis20 = 0\n  let tHis21 = 0\n  let tHis22 = 0\n  let tHis23 = 0\n  let tHis24 = 0\n  let tHis25 = 0\n  let tHis26 = 0\n  let tHis27 = 0\n  let tHis28 = 0\n  let tHis29 = 0\n  let tHis30 = 0\n  let tHis31 = 0\n  let tHis32 = 0\n  let tHis33 = 0\n  let tHis34 = 0\n  let tHis35 = 0\n  let tHis36 = 0\n  let tHis37 = 0\n  let tHis38 = 0\n  let tHis39 = 0\n  let tHis40 = 0\n  let tHis41 = 0\n  let tHis42 = 0\n  let tHis43 = 0\n  let tHis44 = 0\n  let tHis45 = 0\n  let tHis46 = 0\n  let tHis47 = 0\n  let tHis48 = 0\n  let tHis49 = 0\n  let tHis50 = 0\n  let tHis51 = 0\n  let tHis52 = 0\n  let tHis53 = 0\n  let tHis54 = 0\n  let tHis55 = 0\n  let tHis56 = 0\n  let tHis57 = 0\n  let tHis58 = 0\n  let tHis59 = 0\n  let tHis60 = 0\n  let tHis61 = 0\n  let tHis62 = 0\n  let tHis63 = 0\n  let tHis64 = 0\n  let tHis65 = 0\n  let tHis66 = 0\n  let tHis67 = 0\n  let tHis68 = 0\n  let tHis69 = 0\n  let tHis70 = 0\n  let tHis71 = 0\n  let tHis72 = 0\n  let tHis73 = 0\n  let tHis74 = 0\n  let tHis75 = 0\n  let tHis76 = 0\n  let tHis77 = 0\n  let tHis78 = 0\n  let tHis79 = 0\n  let tHis80 = 0\n  let tHis81 = 0\n  let tHis82 = 0\n  let tHis83 = 0\n  let tHis84 = 0\n  let tHis85 = 0\n  let tHis86 = 0\n  let tHis87 = 0\n  let tHis88 = 0\n  let tHis89 = 0\n  let tHis90 = 0\n  let tHis91 = 0\n  let tHis92 = 0\n  let tHis93 = 0\n  let tHis94 = 0\n  let tHis95 = 0\n  let tHis96 = 0\n  let tHis97 = 0\n  let tHis98 = 0\n  let tHis99 = 0\n  let tHis100 = 0\n  let tHis101 = 0\n  let tHis102 = 0\n  let tHis103 = 0\n  let tHis104 = 0\n  let tHis105 = 0\n  let tHis106 = 0\n  let tHis107 = 0\n  let tHis108 = 0\n  let tHis109 = 0\n  let tHis110 = 0\n  let tHis111 = 0\n  let tHis112 = 0\n  let tHis113 = 0\n  let tHis114 = 0\n  let tHis115 = 0\n  let tHis116 = 0\n  let tHis117 = 0\n  let tHis118 = 0\n  let tHis119 = 0\n  let tHis120 = 0\n  let tHis121 = 0\n  let tHis122 = 0\n  let tHis123 = 0\n  let tHis124 = 0\n  let tHis125 = 0\n  let tHis126 = 0\n  let tHis127 = 0\n  let tHis128 = 0\n  let tHis129 = 0\n  let tHis130 = 0\n  let tHis131 = 0\n  let tHis132 = 0\n  let tHis133 = 0\n  let tHis134 = 0\n  let tHis135 = 0\n  let tHis136 = 0\n  let tHis137 = 0\n  let tHis138 = 0\n  let tHis139 = 0\n  let tHis140 = 0\n  let tHis141 = 0\n  let tHis142 = 0\n  let tHis143 = 0\n  let tHis144 = 0\n  let tHis145 = 0\n  let tHis146 = 0\n  let tHis147 = 0\n  let tHis148 = 0\n  let tHis149 = 0\n  let tHis150 = 0\n  let tHis151 = 0\n  let tHis152 = 0\n  let tHis153 = 0\n  let tHis154 = 0\n  let tHis155 = 0\n  let tHis156 = 0\n  let tHis157 = 0\n  let tHis158 = 0\n  let tHis159 = 0\n  let tHis160 = 0\n  let tHis161 = 0\n  let tHis162 = 0\n  let tHis163 = 0\n  let tHis164 = 0\n  let tHis165 = 0\n  let tHis166 = 0\n  let tHis167 = 0\n  let tHis168 = 0\n  let tHis169 = 0\n  let tHis170 = 0\n  let tHis171 = 0\n  let tHis172 = 0\n  let tHis173 = 0\n  let tHis174 = 0\n  let tHis175 = 0\n  let tHis176 = 0\n  let tHis177 = 0\n  let tHis178 = 0\n  let tHis179 = 0\n  let tHis180 = 0\n  let tHis181 = 0\n  let tHis182 = 0\n  let tHis183 = 0\n  let tHis184 = 0\n  let tHis185 = 0\n  let tHis186 = 0\n  let tHis187 = 0\n  let tHis188 = 0\n  let tHis189 = 0\n  let tHis190 = 0\n  let tHis191 = 0\n  let tHis192 = 0\n  let tHis193 = 0\n  let tHis194 = 0\n  let tHis195 = 0\n  let tHis196 = 0\n  let tHis197 = 0\n  let tHis198 = 0\n  let tHis199 = 0\n  let tHis200 = 0\n  let tH", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/63", "prompt": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(0)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  27\n  */\nconst fibfib = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(2)\n  2\n  >>> fibfib(5)\n  6\n  >>> fibfib(8)\n  31\n  */\nconst fibfib = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(3)\n  3\n  >>> fibfib(5)\n  10\n  >>> fibfib(8)\n  61\n  */\nconst fibfib = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(4)\n  4\n  >>> fibfib(5)\n  13\n  >>> fibfib(8)\n  216\n  */\nconst fibfib = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(5)\n  5\n  >>> fibfib(8)\n  53\n  */\nconst fibfib = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(6)\n  6\n  >>> fibfib(8)\n  64\n  */\nconst fibfib = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(7)\n  7\n  >>> fibfib(8)\n  81\n  */\nconst fibfib = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(8)\n  8\n  >>> fibfib(9)\n  9\n  >>> fibfib(10)\n  10\n  >>> fibfib(11)\n  11\n  >>> fibfib(12)\n  12\n  >>> fibfib(13)\n  13\n  >>> fibfib(14)\n  14\n  >>> fibfib(15)\n  15\n  >>> fibfib(16)\n  16\n  >>> fibfib(17)\n  17\n  >>> fibfib(18)\n  18\n  >>> fibfib(19)\n  19\n  >>> fibfib(20)\n  20\n  >>> fibfib(21)\n  21\n  >>> fibfib(22)\n  22\n  >>> fibfib(23)\n  23\n  >>> fibfib(24)\n  24\n  >>> fibfib(25)\n  25\n  >>> fibfib(26)\n  26\n  >>> fibfib(27)\n  27\n  >>> fibfib(28)\n  28\n  >>> fibfib(29)\n  29\n  >>> fibfib(30)\n  30\n  >>> fibfib(31)\n  31\n  */\nconst fibfib = (n) => {\n  if (n < 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  >>> fibfib(30)\n  30\n  >>> fibfib(31)\n  31\n  >>> fibfib(32)\n  32\n  >>> fibfib(33)\n  33\n  >>> fibfib(34)\n  34\n  >>> fibfib(35)\n  35\n  >>> fibfib(36)\n  36\n  >>> fibfib(37)\n  37\n  >>> fibfib(38)\n  38\n  >>> fibfib(39)\n  39\n  >>> fibfib(40)\n  40\n  >>> fibfib(41)\n  41\n  >>> fibfib(42)\n  42\n  >>> fibfib(43)\n  43\n  >>> fibfib(44)\n  44\n  >>> fibfib(45)\n  45\n  >>> fibfib(46)\n  46\n  >>> fibfib(47)\n  47\n  >>> fibfib(48)\n  48\n  >>> fibfib(49)\n  49\n  >>> fibfib(50)\n  50\n  >>> fibfib(51)\n  51\n  >>> fibfib(52)\n  52\n  >>> fibfib(53)\n  53\n  >>> fibfib(54)\n  54\n  >>> fibfib(55)\n  55\n  >>> fibfib(56)\n  56\n  >>> fibfib(57)\n  57\n  >>> fibfib(58)\n  58\n  >>> fibfib(59)\n  59\n  >>> fibfib(60)\n  60\n  >>> fibfib(61)\n  61\n  >>> fibfib(62)\n  62\n  >>> fibfib(63)\n  63\n  >>> fibfib(64)\n  64\n  >>> fibfib(65)\n  65\n  >>> fibfib(66)\n  66\n  >>> fibfib(67)\n  67\n  >>> fibfib(68)\n  68\n  >>> fibfib(69)\n  69\n  >>> fibfib(70)\n  70\n  >>> fibfib(71)\n  71\n  >>> fibfib(72)\n  72\n  >>> fibfib(73)\n  73\n  >>> fibfib(74)\n  74\n  >>> fibfib(75)\n  75\n  >>> fibfib(76)\n  76\n  >>> fibfib(77)\n  77\n  >>> fibfib(78)\n  78\n  >>> fibfib(79)\n  79\n  >>> fibfi", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowelsCountInWord = 0;\n  let word = \"\";\n  let wordInWord = \"\";\n  let wordInWordInWord = \"\";\n  let wordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord = \"\";\n  let wordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWordInWord", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let rev = x;\n  let rem = 1;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev % 10;\n  let rem = rem % 10;\n  let rev = rev * 10 + rem;\n  let rev = rev", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  let i = 0;\n  let ch;\n  let ch2;\n  let ch3;\n  let ch4;\n  let ch5;\n  let ch6;\n  let ch7;\n  let ch8;\n  let ch9;\n  let ch10;\n  let ch11;\n  let ch12;\n  let ch13;\n  let ch14;\n  let ch15;\n  let ch16;\n  let ch17;\n  let ch18;\n  let ch19;\n  let ch20;\n  let ch21;\n  let ch22;\n  let ch23;\n  let ch24;\n  let ch25;\n  let ch26;\n  let ch27;\n  let ch28;\n  let ch29;\n  let ch30;\n  let ch31;\n  let ch32;\n  let ch33;\n  let ch34;\n  let ch35;\n  let ch36;\n  let ch37;\n  let ch38;\n  let ch39;\n  let ch40;\n  let ch41;\n  let ch42;\n  let ch43;\n  let ch44;\n  let ch45;\n  let ch46;\n  let ch47;\n  let ch48;\n  let ch49;\n  let ch50;\n  let ch51;\n  let ch52;\n  let ch53;\n  let ch54;\n  let ch55;\n  let ch56;\n  let ch57;\n  let ch58;\n  let ch59;\n  let ch60;\n  let ch61;\n  let ch62;\n  let ch63;\n  let ch64;\n  let ch65;\n  let ch66;\n  let ch67;\n  let ch68;\n  let ch69;\n  let ch70;\n  let ch71;\n  let ch72;\n  let ch73;\n  let ch74;\n  let ch75;\n  let ch76;\n  let ch77;\n  let ch78;\n  let ch79;\n  let ch80;\n  let ch81;\n  let ch82;\n  let ch83;\n  let ch84;\n  let ch85;\n  let ch86;\n  let ch87;\n  let ch88;\n  let ch89;\n  let ch90;\n  let ch91;\n  let ch92;\n  let ch93;\n  let ch94;\n  let ch95;\n  let ch96;\n  let ch97;\n  let ch98;\n  let ch99;\n  let ch100;\n  let ch101;\n  let ch102;\n  let ch103;\n  let ch104;\n  let ch105;\n  let ch106;\n  let ch107;\n  let ch108;\n  let ch109;\n  let ch110;\n  let ch111;\n  let ch112;\n  let ch113;\n  let ch114;\n  let ch115;\n  let ch116;\n  let ch117;\n  let ch118;\n  let ch119;\n  let ch120;\n  let ch121;\n  let ch122;\n  let ch123;\n  let ch124;\n  let ch125;\n  let ch126;\n  let ch127;\n  let ch128;\n  let ch129;\n  let ch130;\n  let ch131;\n  let ch132;\n  let ch133;\n  let ch134;\n  let ch135;\n  let ch136;\n  let ch137;\n  let ch138;\n  let ch139;\n  let ch140;\n  let ch141;\n  let ch142;\n  let ch143;\n  let ch144;\n  let ch145;\n  let ch146;\n  let ch147;\n  let ch148;\n  let ch149;\n  let ch150;\n  let ch151;\n  let ch152;\n  let ch153;\n  let ch154;\n  let ch155;\n  let ch156;\n  let ch157;\n  let ch158;\n  let ch159;\n  let ch160;\n  let ch161;\n  let ch162;\n  let ch163;\n  let ch164;\n  let ch165;\n  let ch166;\n  let ch167;\n  let ch168;\n  let ch169;\n  let ch170;\n  let ch171;\n  let ch172;\n  let ch173;\n  let ch174;\n  let ch175;\n  let ch176;\n  let ch177;\n  let ch178;\n  let ch179;\n  let ch180;\n  let ch181;\n  let ch182;\n  let ch183;\n  let ch184;\n  let ch185;\n  let ch186;\n  let ch187;\n  let ch188;\n  let ch189;\n  let ch190;\n  let ch191;\n  let ch192;\n  let ch193;\n  let ch194;\n  let ch195;\n  let ch196;\n  let ch197;\n  let ch198;\n  let ch199;\n  let ch200;\n  let ch201;\n  let ch202;\n  let ch203;\n  let ch204;\n  let ch205;\n  let ch206;\n  let ch207;\n  let ch208;\n  let ch209;\n  let ch210;\n  let ch211;\n  let ch212;\n  let ch213;\n  let ch214;\n  let ch215;\n  let ch216;\n  let ch217;\n  let ch218;\n  let ch219;\n  let ch220;\n  let ch221;\n  let ch222;\n  let ch223;\n  let ch224;\n  let ch225;\n  let ch226;\n  let ch227;\n  let ch228;\n  let ch229;\n  let ch230;\n  let ch231;\n  let ch232;\n  let ch233;\n  let ch234;\n  let ch235;\n  let ch236;\n  let ch237;\n  let ch238;\n  let ch239;\n  let ch240;\n  let ch241;\n  let ch242;\n  let ch243;\n  let ch244;\n  let ch245;\n  let ch246;\n  let ch247;\n  let ch248;\n  let ch249;\n  let ch250;\n  let ch251;\n  let ch252;\n  let ch253;\n  let ch254;\n  let ch255;\n  let ch256;\n  let ch257;\n  let ch258;\n  let ch259;\n  let ch260;\n  let ch261;\n  let ch262;\n  let ch263;\n  let ch264;\n  let ch265;\n  let ch266;\n  let ch267;\n  let ch268;\n  let ch269;\n  let ch270;\n  let ch271;\n  let ch272;\n  let ch273;\n  let ch274;\n  let ch275;\n  let ch276;\n  let ch277;\n  let ch278;\n  let ch279;\n  let ch280;\n  let ch281;\n  let ch282;\n  let ch283;\n  let ch284;\n  let ch285", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n  let sum = 0;\n  let count = 0;\n  let total = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    if (fruit!== '') {\n      sum += parseInt(fruit);\n      count++;\n    }\n  });\n  total = sum / count;\n  return total;\n};\n\n/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n  let sum = 0;\n  let count = 0;\n  let total = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    if (fruit!== '') {\n      sum += parseInt(fruit);\n      count++;\n    }\n  });\n  total = sum / count;\n  return total;\n};\n\n/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n  let sum = 0;\n  let count = 0;\n  let total = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    if (fruit!== '') {\n      sum += parseInt(fruit);\n      count++;\n    }\n  });\n  total = sum / count;\n  return total;\n};\n\n/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n  let sum = 0;\n  let count = 0;\n  let total = 0;\n  let fruits = n.split(' ');\n  fruits.forEach((fruit) => {\n    if (fruit!== '') {\n      sum += parseInt(fruit);\n      count++;\n    }\n  });\n  total = sum / count;\n  return total;\n};\n\n/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEs", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const res = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let len = arr.length;\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      res.push(arr[i]);\n      i++;\n    } else {\n      res.push(arr[j]);\n      j++;\n    }\n  }\n  return res;\n};\n\n// https://leetcode.com/problems/find-the-least-common-multiple/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findLCM = function (nums) {\n  let lcm = 1;\n  for (let i = 0; i < nums.length; i++) {\n    lcm = lcm * nums[i];\n  }\n  return lcm;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairs = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-triplets-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueTriplets = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] === nums[j] && nums[i] === nums[k]) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-quadruplets-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueQuadruplets = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        for (let l = k + 1; l < nums.length; l++) {\n          if (nums[i] === nums[j] && nums[i] === nums[k] && nums[i] === nums[l]) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-rectangles-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueRectangles = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        for (let l = k + 1; l < nums.length; l++) {\n          if (nums[i] === nums[j] && nums[i] === nums[k] && nums[i] === nums[l] && nums[i] === nums[l - 1]) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-circles-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueCircles = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] === nums[j] && nums[i] === nums[k] && nums[i] === nums[l - 1]) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-polygons-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePolygons = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] === nums[j] && nums[i] === nums[k] && nums[i] === nums[l - 1]) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-rectangles-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueRectanglesOnLine = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j] && nums[i] === nums[l - 1]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-rectangles-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueRectanglesOnRectangle = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[i] === nums[j] && nums[i] === nums[l - 1]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-rectangles-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniqueRectanglesOnPolygon = function (nums) {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        if (nums[i] === nums[j] && nums[i] === nums[k] && nums[i] === nums[l - 1]) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-triangles-in-an-array/\n/**\n * @param {number[]} nums\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let pos = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let found = false;\n  let foundPos = 0;\n  let foundCount = 0;\n  let foundCount2 = 0;\n  let foundCount3 = 0;\n  let foundCount4 = 0;\n  let foundCount5 = 0;\n  let foundCount6 = 0;\n  let foundCount7 = 0;\n  let foundCount8 = 0;\n  let foundCount9 = 0;\n  let foundCount10 = 0;\n  let foundCount11 = 0;\n  let foundCount12 = 0;\n  let foundCount13 = 0;\n  let foundCount14 = 0;\n  let foundCount15 = 0;\n  let foundCount16 = 0;\n  let foundCount17 = 0;\n  let foundCount18 = 0;\n  let foundCount19 = 0;\n  let foundCount20 = 0;\n  let foundCount21 = 0;\n  let foundCount22 = 0;\n  let foundCount23 = 0;\n  let foundCount24 = 0;\n  let foundCount25 = 0;\n  let foundCount26 = 0;\n  let foundCount27 = 0;\n  let foundCount28 = 0;\n  let foundCount29 = 0;\n  let foundCount30 = 0;\n  let foundCount31 = 0;\n  let foundCount32 = 0;\n  let foundCount33 = 0;\n  let foundCount34 = 0;\n  let foundCount35 = 0;\n  let foundCount36 = 0;\n  let foundCount37 = 0;\n  let foundCount38 = 0;\n  let foundCount39 = 0;\n  let foundCount40 = 0;\n  let foundCount41 = 0;\n  let foundCount42 = 0;\n  let foundCount43 = 0;\n  let foundCount44 = 0;\n  let foundCount45 = 0;\n  let foundCount46 = 0;\n  let foundCount47 = 0;\n  let foundCount48 = 0;\n  let foundCount49 = 0;\n  let foundCount50 = 0;\n  let foundCount51 = 0;\n  let foundCount52 = 0;\n  let foundCount53 = 0;\n  let foundCount54 = 0;\n  let foundCount55 = 0;\n  let foundCount56 = 0;\n  let foundCount57 = 0;\n  let foundCount58 = 0;\n  let foundCount59 = 0;\n  let foundCount60 = 0;\n  let foundCount61 = 0;\n  let foundCount62 = 0;\n  let foundCount63 = 0;\n  let foundCount64 = 0;\n  let foundCount65 = 0;\n  let foundCount66 = 0;\n  let foundCount67 = 0;\n  let foundCount68 = 0;\n  let foundCount69 = 0;\n  let foundCount70 = 0;\n  let foundCount71 = 0;\n  let foundCount72 = 0;\n  let foundCount73 = 0;\n  let foundCount74 = 0;\n  let foundCount75 = 0;\n  let foundCount76 = 0;\n  let foundCount77 = 0;\n  let foundCount78 = 0;\n  let foundCount79 = 0;\n  let foundCount80 = 0;\n  let foundCount81 = 0;\n  let foundCount82 = 0;\n  let foundCount83 = 0;\n  let foundCount84 = 0;\n  let foundCount85 = 0;\n  let foundCount86 = 0;\n  let foundCount87 = 0;\n  let foundCount88 = 0;\n  let foundCount89 = 0;\n  let foundCount90 = 0;\n  let foundCount91 = 0;\n  let foundCount92 = 0;\n  let foundCount93 = 0;\n  let foundCount94 = 0;\n  let foundCount95 = 0;\n  let foundCount96 = 0;\n  let foundCount97 = 0;\n  let foundCount98 = 0;\n  let foundCount99 = 0;\n  let foundCount100 = 0;\n  let foundCount101 = 0;\n  let foundCount102 = 0;\n  let foundCount103 = 0;\n  let foundCount104 = 0;\n  let foundCount105 = 0;\n  let foundCount106 = 0;\n  let foundCount107 = 0;\n  let foundCount108 = 0;\n  let foundCount109 = 0;\n  let foundCount110 = 0;\n  let foundCount111 = 0;\n  let foundCount112 = 0;\n  let foundCount113 = 0;\n  let foundCount114 = 0;\n  let foundCount115 = 0;\n  let foundCount116 = 0;\n  let foundCount117 = 0;\n  let foundCount118 = 0;\n  let foundCount119 = 0;\n  let foundCount120 = 0;\n  let foundCount121 = 0;\n  let foundCount122 = 0;\n  let foundCount123 = 0;\n  let foundCount124 = 0;\n  let foundCount125 = 0;\n  let foundCount126 = 0;\n  let foundCount127 = 0;\n  let foundCount128 = 0;\n  let foundCount129 = 0;\n  let foundCount130 = 0;\n  let foundCount131 = 0;\n  let foundCount132 = 0;\n  let foundCount133 = 0;\n  let foundCount134 = 0;\n  let foundCount135 = 0;\n  let foundCount136 = 0;\n  let foundCount137 = 0;\n  let foundCount138 = 0;\n  let foundCount139 = 0;\n  let foundCount140 = 0;\n  let foundCount141 = 0;\n  let foundCount142 = 0;\n  let foundCount143 = 0;\n  let foundCount144 = 0;\n  let foundCount145 = 0;\n  let foundCount146 = 0;\n  let foundCount147 = 0;\n  let foundCount148 = 0;\n  let foundCount149 = 0;\n  let foundCount150 = 0;\n  let foundCount151 = 0;\n  let foundCount152 = 0;\n  let foundCount153 = 0;\n  let foundCount154 = 0;\n  let foundCount155 = 0;\n  let foundCount156 = 0;\n  let foundCount157 = 0;\n  let foundCount158 = 0;\n  let foundCount159 = 0;\n  let foundCount160 = 0;\n  let foundCount161 = 0;\n  let foundCount162 = 0;\n  let foundCount163 = 0;\n  let foundCount164 = 0;\n  let foundCount165 = 0;\n  let foundCount166 = 0;\n  let foundCount167 = 0;\n  let foundCount168 = 0;\n  let foundCount169 = 0;\n  let foundCount170 = 0;\n  let foundCount171 = 0;\n  let foundCount172 = 0;\n  let foundCount173 = 0;\n  let foundCount174 = 0;\n  let foundCount175 = 0;\n  let foundCount176 = 0;\n  let foundCount177 = 0;\n  let foundCount178 = 0;\n  let foundCount179 = 0;\n  let foundCount180 = 0;\n  let foundCount181 = 0;\n  let foundCount182 = 0;\n  let foundCount183 = 0;\n  let foundCount184 = 0;\n  let foundCount185 = 0;\n  let foundCount186 = 0;\n  let foundCount187 = 0;\n  let foundCount188 = 0;\n  let foundCount189 = 0;\n  let foundCount190 = 0;\n  let foundCount191 = 0;\n  let foundCount192 = 0;\n  let foundCount193 = 0;\n  let foundCount194 = 0;\n  let foundCount195 = 0;\n  let foundCount196 = 0;\n  let foundCount197 = 0;\n  let foundCount198 = 0;\n  let foundCount199 = 0;\n  let foundCount200 = 0;\n  let foundCount201 = 0;\n  let foundCount202 = 0;\n  let foundCount203 = 0;\n  let foundCount204 = 0;\n  let foundCount205 = 0;\n  let foundCount206 = 0;\n  let foundCount207 = 0;\n  let foundCount208 = 0;\n  let foundCount209 = 0;\n  let foundCount210 = 0;\n  let foundCount211 = 0;\n  let foundCount212 = 0;\n  let foundCount213 = 0;\n  let foundCount214 = 0;\n  let foundCount215 = 0;\n  let foundCount216 = 0;\n  let foundCount217 = 0;\n  let foundCount218 = 0;\n  let foundCount219 = 0;\n  let foundCount220 = 0;\n  let foundCount221 = 0;\n  let foundCount222 = 0;\n  let foundCount223 = 0;\n  let foundCount224 = 0;\n  let foundCount225 = 0;\n  let foundCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/7", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'f')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'g')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'h')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'i')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'j')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'k')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'l')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'],'m')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'n')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'o')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'p')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'q')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'r')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'],'s')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 't')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'u')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'v')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'w')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'x')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'y')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'z')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '0')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '1')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '2')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '3')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '4')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '5')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '6')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '7')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '8')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '9')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '-')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '.')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '/')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '\\\\')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '[')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], ']')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '^')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '_')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], '`')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'e')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'f')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'g')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'h')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'i')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'j')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'k')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'l')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'],'m')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'n')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'o')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'p')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'q')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'r')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'],'s')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 't')\n  []\n  >>> filterBySubstring(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sOrtinG = new StranGe(lst);\n  let yOu = [];\n  let tHen = [];\n  let mInimuM = [];\n  let mInimuM2 = [];\n  let mInimuM3 = [];\n  let mInimuM4 = [];\n  let mInimuM5 = [];\n  let mInimuM6 = [];\n  let mInimuM7 = [];\n  let mInimuM8 = [];\n  let mInimuM9 = [];\n  let mInimuM10 = [];\n  let mInimuM11 = [];\n  let mInimuM12 = [];\n  let mInimuM13 = [];\n  let mInimuM14 = [];\n  let mInimuM15 = [];\n  let mInimuM16 = [];\n  let mInimuM17 = [];\n  let mInimuM18 = [];\n  let mInimuM19 = [];\n  let mInimuM20 = [];\n  let mInimuM21 = [];\n  let mInimuM22 = [];\n  let mInimuM23 = [];\n  let mInimuM24 = [];\n  let mInimuM25 = [];\n  let mInimuM26 = [];\n  let mInimuM27 = [];\n  let mInimuM28 = [];\n  let mInimuM29 = [];\n  let mInimuM30 = [];\n  let mInimuM31 = [];\n  let mInimuM32 = [];\n  let mInimuM33 = [];\n  let mInimuM34 = [];\n  let mInimuM35 = [];\n  let mInimuM36 = [];\n  let mInimuM37 = [];\n  let mInimuM38 = [];\n  let mInimuM39 = [];\n  let mInimuM40 = [];\n  let mInimuM41 = [];\n  let mInimuM42 = [];\n  let mInimuM43 = [];\n  let mInimuM44 = [];\n  let mInimuM45 = [];\n  let mInimuM46 = [];\n  let mInimuM47 = [];\n  let mInimuM48 = [];\n  let mInimuM49 = [];\n  let mInimuM50 = [];\n  let mInimuM51 = [];\n  let mInimuM52 = [];\n  let mInimuM53 = [];\n  let mInimuM54 = [];\n  let mInimuM55 = [];\n  let mInimuM56 = [];\n  let mInimuM57 = [];\n  let mInimuM58 = [];\n  let mInimuM59 = [];\n  let mInimuM60 = [];\n  let mInimuM61 = [];\n  let mInimuM62 = [];\n  let mInimuM63 = [];\n  let mInimuM64 = [];\n  let mInimuM65 = [];\n  let mInimuM66 = [];\n  let mInimuM67 = [];\n  let mInimuM68 = [];\n  let mInimuM69 = [];\n  let mInimuM70 = [];\n  let mInimuM71 = [];\n  let mInimuM72 = [];\n  let mInimuM73 = [];\n  let mInimuM74 = [];\n  let mInimuM75 = [];\n  let mInimuM76 = [];\n  let mInimuM77 = [];\n  let mInimuM78 = [];\n  let mInimuM79 = [];\n  let mInimuM80 = [];\n  let mInimuM81 = [];\n  let mInimuM82 = [];\n  let mInimuM83 = [];\n  let mInimuM84 = [];\n  let mInimuM85 = [];\n  let mInimuM86 = [];\n  let mInimuM87 = [];\n  let mInimuM88 = [];\n  let mInimuM89 = [];\n  let mInimuM90 = [];\n  let mInimuM91 = [];\n  let mInimuM92 = [];\n  let mInimuM93 = [];\n  let mInimuM94 = [];\n  let mInimuM95 = [];\n  let mInimuM96 = [];\n  let mInimuM97 = [];\n  let mInimuM98 = [];\n  let mInimuM99 = [];\n  let mInimuM100 = [];\n  let mInimuM101 = [];\n  let mInimuM102 = [];\n  let mInimuM103 = [];\n  let mInimuM104 = [];\n  let mInimuM105 = [];\n  let mInimuM106 = [];\n  let mInimuM107 = [];\n  let mInimuM108 = [];\n  let mInimuM109 = [];\n  let mInimuM110 = [];\n  let mInimuM111 = [];\n  let mInimuM112 = [];\n  let mInimuM113 = [];\n  let mInimuM114 = [];\n  let mInimuM115 = [];\n  let mInimuM116 = [];\n  let mInimuM117 = [];\n  let mInimuM118 = [];\n  let mInimuM119 = [];\n  let mInimuM120 = [];\n  let mInimuM121 = [];\n  let mInimuM122 = [];\n  let mInimuM123 = [];\n  let mInimuM124 = [];\n  let mInimuM125 = [];\n  let mInimuM126 = [];\n  let mInimuM127 = [];\n  let mInimuM128 = [];\n  let mInimuM129 = [];\n  let mInimuM130 = [];\n  let mInimuM131 = [];\n  let mInimuM132 = [];\n  let mInimuM133 = [];\n  let mInimuM134 = [];\n  let mInimuM135 = [];\n  let mInimuM136 = [];\n  let mInimuM137 = [];\n  let mInimuM138 = [];\n  let mInimuM139 = [];\n  let mInimuM140 = [];\n  let mInimuM141 = [];\n  let mInimuM142 = [];\n  let mInimuM143 = [];\n  let mInimuM144 = [];\n  let mInimuM145 = [];\n  let mInimuM146 = [];\n  let mInimuM147 = [];\n  let mInimuM148 = [];\n  let mInimuM149 = [];\n  let mInimuM150 = [];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  return a1 * b1 * c1;\n};\n\n/*\n  GivEn thE lengThs Of The Three Sides of a Triangle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe the third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  return a1 * b1 * c1;\n};\n\n/*\n  GivEn thE lengThs Of The Three Sides of a Triangle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe the third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  return a1 * b1 * c1;\n};\n\n/*\n  GivEn thE lengThs Of The Three Sides of a Triangle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe the third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  return a1 * b1 * c1;\n};\n\n/*\n  GivEn thE lengThs Of The Three Sides of a Triangle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe the third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  return a1 * b1 * c1;\n};\n\n/*\n  GivEn thE lengThs Of The Three Sides of a Triangle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe the third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  return a1 * b1 * c1;\n};\n\n/*\n  GivEn thE lengThs Of The Three Sides of a Triangle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe the third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  return a1 * b1 * c1;\n};\n\n/*\n  GivEn thE lengThs Of The Three Sides of a Triangle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe the third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const a1 = Math.sqrt(a * a + b * b);\n  const b1 = Math.sqrt(b * b + c * c);\n  const c1 = Math.sqrt(c * c + a * a);\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const { length } = q;\n  const { length } = w;\n  const maxWeight = Math.max(length, 1);\n  const maxWeightPerElement = maxWeight / length;\n  const maxWeightPerElementPerElement = maxWeightPerElement / length;\n  const maxWeightPerElementPerElementPerElement = maxWeightPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElement = maxWeightPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPerElementPer = maxWeightPerElementPerElement / length;\n  const maxWeightPerElementPerElementPerElementPerElementPerElementPerElementPerElement", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minImuM = Math.min(...arr);\n  let minImuMIndex = arr.indexOf(minImuM);\n  let minImuMVal = arr[minImuMIndex];\n  let minImuMValIndex = arr.indexOf(minImuMVal);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minImuMValIndex = arr.indexOf(minImuMValIndex);\n  let minI", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalMatched = []\n  const totalMatched2 = []\n  const totalMatched3 = []\n  const totalMatched4 = []\n  const totalMatched5 = []\n  const totalMatched6 = []\n  const totalMatched7 = []\n  const totalMatched8 = []\n  const totalMatched9 = []\n  const totalMatched10 = []\n  const totalMatched11 = []\n  const totalMatched12 = []\n  const totalMatched13 = []\n  const totalMatched14 = []\n  const totalMatched15 = []\n  const totalMatched16 = []\n  const totalMatched17 = []\n  const totalMatched18 = []\n  const totalMatched19 = []\n  const totalMatched20 = []\n  const totalMatched21 = []\n  const totalMatched22 = []\n  const totalMatched23 = []\n  const totalMatched24 = []\n  const totalMatched25 = []\n  const totalMatched26 = []\n  const totalMatched27 = []\n  const totalMatched28 = []\n  const totalMatched29 = []\n  const totalMatched30 = []\n  const totalMatched31 = []\n  const totalMatched32 = []\n  const totalMatched33 = []\n  const totalMatched34 = []\n  const totalMatched35 = []\n  const totalMatched36 = []\n  const totalMatched37 = []\n  const totalMatched38 = []\n  const totalMatched39 = []\n  const totalMatched40 = []\n  const totalMatched41 = []\n  const totalMatched42 = []\n  const totalMatched43 = []\n  const totalMatched44 = []\n  const totalMatched45 = []\n  const totalMatched46 = []\n  const totalMatched47 = []\n  const totalMatched48 = []\n  const totalMatched49 = []\n  const totalMatched50 = []\n  const totalMatched51 = []\n  const totalMatched52 = []\n  const totalMatched53 = []\n  const totalMatched54 = []\n  const totalMatched55 = []\n  const totalMatched56 = []\n  const totalMatched57 = []\n  const totalMatched58 = []\n  const totalMatched59 = []\n  const totalMatched60 = []\n  const totalMatched61 = []\n  const totalMatched62 = []\n  const totalMatched63 = []\n  const totalMatched64 = []\n  const totalMatched65 = []\n  const totalMatched66 = []\n  const totalMatched67 = []\n  const totalMatched68 = []\n  const totalMatched69 = []\n  const totalMatched70 = []\n  const totalMatched71 = []\n  const totalMatched72 = []\n  const totalMatched73 = []\n  const totalMatched74 = []\n  const totalMatched75 = []\n  const totalMatched76 = []\n  const totalMatched77 = []\n  const totalMatched78 = []\n  const totalMatched79 = []\n  const totalMatched80 = []\n  const totalMatched81 = []\n  const totalMatched82 = []\n  const totalMatched83 = []\n  const totalMatched84 = []\n  const totalMatched85 = []\n  const totalMatched86 = []\n  const totalMatched87 = []\n  const totalMatched88 = []\n  const totalMatched89 = []\n  const totalMatched90 = []\n  const totalMatched91 = []\n  const totalMatched92 = []\n  const totalMatched93 = []\n  const totalMatched94 = []\n  const totalMatched95 = []\n  const totalMatched96 = []\n  const totalMatched97 = []\n  const totalMatched98 = []\n  const totalMatched99 = []\n  const totalMatched100 = []\n  const totalMatched101 = []\n  const totalMatched102 = []\n  const totalMatched103 = []\n  const totalMatched104 = []\n  const totalMatched105 = []\n  const totalMatched106 = []\n  const totalMatched107 = []\n  const totalMatched108 = []\n  const totalMatched109 = []\n  const totalMatched110 = []\n  const totalMatched111 = []\n  const totalMatched112 = []\n  const totalMatched113 = []\n  const totalMatched114 = []\n  const totalMatched115 = []\n  const totalMatched116 = []\n  const totalMatched117 = []\n  const totalMatched118 = []\n  const totalMatched119 = []\n  const totalMatched120 = []\n  const totalMatched121 = []\n  const totalMatched122 = []\n  const totalMatched123 = []\n  const totalMatched124 = []\n  const totalMatched125 = []\n  const totalMatched126 = []\n  const totalMatched127 = []\n  const totalMatched128 = []\n  const totalMatched129 = []\n  const totalMatched130 = []\n  const totalMatched131 = []\n  const totalMatched132 = []\n  const totalMatched133 = []\n  const totalMatched134 = []\n  const totalMatched135 = []\n  const totalMatched136 = []\n  const totalMatched137 = []\n  const totalMatched138 = []\n  const totalMatched139 = []\n  const totalMatched140 = []\n  const totalMatched141 = []\n  const totalMatched142 = []\n  const totalMatched143 = []\n  const totalMatched144 = []\n  const totalMatched145 = []\n  const totalMatched146 = []\n  const totalMatched147 = []\n  const totalMatched148 = []\n  const totalMatched149 = []\n  const totalMatched150 = []\n  const totalMatched151 = []\n  const totalMatched152 = []\n  const totalMatched153 = []\n  const totalMatched154 = []\n  const totalMatched155 = []\n  const totalMatched156 = []\n  const totalMatched157 = []\n  const totalMatched158 = []\n  const totalMatched159 = []\n  const totalMatched160 = []\n  const totalMatched161 = []\n  const totalMatched162 = []\n  const totalMatched163 = []\n  const totalMatched164 = []\n  const totalMatched165 = []\n  const totalMatched166 = []\n  const totalMatched167 = []\n  const totalMatched168 = []\n  const totalMatched169 = []\n  const totalMatched170 = []\n  const totalMatched171 = []\n  const totalMatched172 = []\n  const totalMatched173 = []\n  const totalMatched174 = []\n  const totalMatched175 = []\n  const totalMatched176 = []\n  const totalMatched177 = []\n  const totalMatched178 = []\n  const totalMatched179 = []\n  const totalMatched", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/75", "prompt": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isMultiplyPrime = true;\n  let numBer = a;\n  let numBer = numBer.toString();\n  let numBer = numBer.replace(/[^0-9]/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numBer.replace(/\\s+/g, \"\");\n  let numBer = numB", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (n % x === 0) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Your Task is to write a funtion that returns true if the given number is a power of 2 and\n  false if not.\n  Examples:\n  isPowerOf2(2) => true\n  isPowerOf2(3) => false\n  isPowerOf2(4) => false\n  isPowerOf2(5) => false\n  isPowerOf2(6) => false\n  isPowerOf2(7) => false\n  isPowerOf2(8) => false\n  isPowerOf2(9) => false\n  isPowerOf2(10) => false\n  isPowerOf2(11) => false\n  isPowerOf2(12) => false\n  isPowerOf2(13) => false\n  isPowerOf2(14) => false\n  isPowerOf2(15) => false\n  isPowerOf2(16) => false\n  isPowerOf2(17) => false\n  isPowerOf2(18) => false\n  isPowerOf2(19) => false\n  isPowerOf2(20) => false\n  isPowerOf2(21) => false\n  isPowerOf2(22) => false\n  isPowerOf2(23) => false\n  isPowerOf2(24) => false\n  isPowerOf2(25) => false\n  isPowerOf2(26) => false\n  isPowerOf2(27) => false\n  isPowerOf2(28) => false\n  isPowerOf2(29) => false\n  isPowerOf2(30) => false\n  isPowerOf2(31) => false\n  isPowerOf2(32) => false\n  isPowerOf2(33) => false\n  isPowerOf2(34) => false\n  isPowerOf2(35) => false\n  isPowerOf2(36) => false\n  isPowerOf2(37) => false\n  isPowerOf2(38) => false\n  isPowerOf2(39) => false\n  isPowerOf2(40) => false\n  isPowerOf2(41) => false\n  isPowerOf2(42) => false\n  isPowerOf2(43) => false\n  isPowerOf2(44) => false\n  isPowerOf2(45) => false\n  isPowerOf2(46) => false\n  isPowerOf2(47) => false\n  isPowerOf2(48) => false\n  isPowerOf2(49) => false\n  isPowerOf2(50) => false\n  isPowerOf2(51) => false\n  isPowerOf2(52) => false\n  isPowerOf2(53) => false\n  isPowerOf2(54) => false\n  isPowerOf2(55) => false\n  isPowerOf2(56) => false\n  isPowerOf2(57) => false\n  isPowerOf2(58) => false\n  isPowerOf2(59) => false\n  isPowerOf2(60) => false\n  isPowerOf2(61) => false\n  isPowerOf2(62) => false\n  isPowerOf2(63) => false\n  isPowerOf2(64) => false\n  isPowerOf2(65) => false\n  isPowerOf2(66) => false\n  isPowerOf2(67) => false\n  isPowerOf2(68) => false\n  isPowerOf2(69) => false\n  isPowerOf2(70) => false\n  isPowerOf2(71) => false\n  isPowerOf2(72) => false\n  isPowerOf2(73) => false\n  isPowerOf2(74) => false\n  isPowerOf2(75) => false\n  isPowerOf2(76) => false\n  isPowerOf2(77) => false\n  isPowerOf2(78) => false\n  isPowerOf2(79) => false\n  isPowerOf2(80) => false\n  isPowerOf2(81) => false\n  isPowerOf2(82) => false\n  isPowerOf2(83) => false\n  isPowerOf2(84) => false\n  isPowerOf2(85) => false\n  isPowerOf2(86) => false\n  isPowerOf2(87) => false\n  isPowerOf2(88) => false\n  isPowerOf2(89) => false\n  isPowerOf2(90) => false\n  isPowerOf2(91) => false\n  isPowerOf2(92) => false\n  isPowerOf2(93) => false\n  isPowerOf2(94) => false\n  isPowerOf2(95) => false\n  isPowerOf2(96) => false\n  isPowerOf2(97) => false\n  isPowerOf2(98) => false\n  isPowerOf2(99) => false\n  isPowerOf2(100) => false\n  isPowerOf2(101) => false\n  isPowerOf2(102) => false\n  isPowerOf2(103) => false\n  isPowerOf2(104) => false\n  isPowerOf2(105) => false\n  isPowerOf2(106) => false\n  isPowerOf2(107) => false\n  isPowerOf2(108) => false\n  isPowerOf2(109) => false\n  isPowerOf2(110) => false\n  isPowerOf2(111) => false\n  isPowerOf2(112) => false\n  isPowerOf2(113) => false\n  isPowerOf2(114) => false\n  isPowerOf2(115) => false\n  isPowerOf2(116) => false\n  isPowerOf2(117) => false\n  isPowerOf2(118) => false\n  isPowerOf2(119) => false\n  isPowerOf2(120) => false\n  isPowerOf2(121) => false\n  isPowerOf2(122) => false\n  isPowerOf2(123) => false\n  isPowerOf2(124) => false\n  isPowerOf2(125) => false\n  isPowerOf2(126) => false\n  isPowerOf2(127) => false\n  isPowerOf2(128) => false\n  isPowerOf2(129) => false\n  isPowerOf2(130) => false\n  isPowerOf2(131) => false\n  isPowerOf2(132) => false\n  isPowerOf2(133) => false\n  isPowerOf2(134) => false\n  isPowerOf2(135) => false\n  isPowerOf2(136) => false\n  isPowerOf2(137) => false\n  isPowerOf2(138) => false\n  isPowerOf2(139) => false\n  isPowerOf2(140) => false\n  isPowerOf2(141) => false\n  isPowerOf2(142) => false\n  isPowerOf2(143) => false\n  isPowerOf2(144) => false\n  isPowerOf2(145) => false\n  isPowerOf2(146) => false\n  isPowerOf2(147) => false\n  isPowerOf2(148) => false\n  isPowerOf2(149) => false\n  isPowerOf2(150) => false\n  isPowerOf2(151) => false\n  isPowerOf2(152) => false\n  isPowerOf2(153) => false\n  isPowerOf2(154) => false\n  isPowerOf2(155) => false\n  isPowerOf2(156) => false\n  isPowerOf2(157) => false\n  isPowerOf2(158) => false\n  isPowerOf2(159) => false\n  isPowerOf2(160) => false\n  isPowerOf2(161) => false\n  isPowerOf2(162) => false\n  isPowerOf2(163) => false\n  isPowerOf2(164) => false\n  isPowerOf2(165) => false\n  isPowerOf2(166) => false\n  isPowerOf2(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  const b = Math.pow(a, 3);\n  return b === Math.pow(a, 2);\n};\n\n/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  const b = Math.pow(a, 3);\n  return b === Math.pow(a, 2);\n};\n\n/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  const b = Math.pow(a, 3);\n  return b === Math.pow(a, 2);\n};\n\n/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  const b = Math.pow(a, 3);\n  return b === Math.pow(a, 2);\n};\n\n/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  const b = Math.pow(a, 3);\n  return b === Math.pow(a, 2);\n};\n\n/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  const b = Math.pow(a, 3);\n  return b === Math.pow(a, 2);\n};\n\n/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  const b = Math.pow(a, 3);\n  return b === Math.pow(a, 2);\n};\n\n/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  const b = Math.pow(a, 3);\n  return b === Math.pow(a, 2);\n};\n\n/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube9 = (a) => {\n  const b = Math.pow(a, 3);\n  return b === Math.pow(a, 2);\n};\n\n/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube10 = (a) => {\n  const b = Math.pow(a, 3);\n  return b === Math.pow(a, 2);\n};\n\n/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hexNum = num.match(/[A-F0-9]+/g);\n  const hexNumLength = hexNum.length;\n  let hexNumString = '';\n  for (let i = 0; i < hexNumLength; i++) {\n    hexNumString += hexNum[i];\n  }\n  return parseInt(hexNumString, 16);\n};\n\n/**\n * Converts a hexadecimal string to a decimal.\n *\n * @param {String} hexadecimal string\n * @return {Number} decimal\n */\nconst hexToDecimal = (hex) => {\n  const hexNum = hex.match(/[A-F0-9]+/g);\n  const hexNumLength = hexNum.length;\n  let hexNumString = '';\n  for (let i = 0; i < hexNumLength; i++) {\n    hexNumString += hexNum[i];\n  }\n  return parseInt(hexNumString, 16);\n};\n\n/**\n * Converts a decimal to a hexadecimal string.\n *\n * @param {Number} decimal\n * @return {String} hexadecimal string\n */\nconst decimalToHex = (decimal) => {\n  const hexNum = decimal.toString(16);\n  const hexNumLength = hexNum.length;\n  let hexNumString = '';\n  for (let i = 0; i < hexNumLength; i++) {\n    hexNumString += hexNum[i];\n  }\n  return hexNumString;\n};\n\n/**\n * Converts a decimal to a hexadecimal string.\n *\n * @param {Number} decimal\n * @return {String} hexadecimal string\n */\nconst decimalToHexadecimal = (decimal) => {\n  const hexNum = decimal.toString(16);\n  const hexNumLength = hexNum.length;\n  let hexNumString = '';\n  for (let i = 0; i < hexNumLength; i++) {\n    hexNumString += hexNum[i];\n  }\n  return hexNumString;\n};\n\n/**\n * Converts a decimal to a hexadecimal string.\n *\n * @param {Number} decimal\n * @return {String} hexadecimal string\n */\nconst decimalToHexadecimalString = (decimal) => {\n  const hexNum = decimal.toString(16);\n  const hexNumLength = hexNum.length;\n  let hexNumString = '';\n  for (let i = 0; i < hexNumLength; i++) {\n    hexNumString += hexNum[i];\n  }\n  return hexNumString;\n};\n\n/**\n * Converts a decimal to a hexadecimal string.\n *\n * @param {Number} decimal\n * @return {String} hexadecimal string\n */\nconst decimalToHexadecimalStringWithLeadingZeros = (decimal) => {\n  const hexNum = decimal.toString(16);\n  const hexNumLength = hexNum.length;\n  let hexNumString = '';\n  for (let i = 0; i < hexNumLength; i++) {\n    hexNumString += hexNum[i];\n  }\n  return hexNumString;\n};\n\n/**\n * Converts a decimal to a hexadecimal string.\n *\n * @param {Number} decimal\n * @return {String} hexadecimal string\n */\nconst decimalToHexadecimalStringWithLeadingZeros = (decimal) => {\n  const hexNum = decimal.toString(16);\n  const hexNumLength = hexNum.length;\n  let hexNumString = '';\n  for (let i = 0; i < hexNumLength; i++) {\n    hexNumString += hexNum[i];\n  }\n  return hexNumString;\n};\n\n/**\n * Converts a decimal to a hexadecimal string.\n *\n * @param {Number} decimal\n * @return {String} hexadecimal string\n */\nconst decimalToHexadecimalStringWithLeadingZeros = (decimal) => {\n  const hexNum = decimal.toString(16);\n  const hexNumLength = hexNum.length;\n  let hexNumString = '';\n  for (let i = 0; i < hexNumLength; i++) {\n    hexNumString += hexNum[i];\n  }\n  return hexNumString;\n};\n\n/**\n * Converts a decimal to a hexadecimal string.\n *\n * @param {Number} decimal\n * @return {String} hexadecimal string\n */\nconst decimalToHexadecimalStringWithLeadingZeros = (decimal) => {\n  const hexNum = decimal.toString(16);\n  const hexNumLength = hexNum.length;\n  let hexNumString = '';\n  for (let i = 0; i < hexNumLength; i++) {\n    hexNumString += hexNum[i];\n  }\n  return hexNumString;\n};\n\n/**\n * Converts a decimal to a hexadecimal string.\n *\n * @param {Number} decimal\n * @return {String} hexadecimal string\n */\nconst decimalToHexadecimalStringWithLeadingZeros = (decimal) => {\n  const hexNum = decimal.toString(16);\n  const hexNumLength = hexNum.length;\n  let hexNumString = '';\n  for (let i = 0; i < hexNumLength; i++) {\n    hexNumString += hexNum[i];\n  }\n  return hexNumString;\n};\n\n/**\n * Converts a decimal to a hexadecimal string.\n *\n * @param {Number} decimal\n * @return {String} hexadecimal string\n */\nconst decimalToHexadecimalStringWithLeadingZeros = (decimal) => {\n  const hexNum = decimal.toString(16);\n  const hexNumLength = hexNum.length;\n  let hexNumString = '';\n  for (let i = 0; i < hexNumLength; i++) {\n    hexNumString += hexNum[i];\n  }\n  return hexNumString;\n};\n\n/**\n * Converts a decimal to a hexadecimal string.\n *\n * @param {Number} decimal\n * @return {String} hexadecimal string\n */\nconst decimalToHexadecimalStringWithLeadingZeros = (decimal) => {\n  const hexNum = decimal.toString(16);\n  const hexNumLength = hexNum.length;\n  let hexNumString = '';\n  for (let i = 0; i < hexNumLength; i++) {\n    hexNumString += hexNum[i];\n  }\n  return hexNumString;\n};\n\n/**\n * Converts a decimal to a hexadecimal string.\n *\n * @param {Number} decimal\n * @return {String} hexadecimal string\n */\nconst decimalToHexadecimalStringWithLeadingZeros = (decimal) => {\n  const hexNum = decimal.toString(16);\n  const hexNumLength = hexNum.length;\n  let hexNumString = '';\n  for (let i = 0; i < hexNumLength; i++) {\n    hexNumString += hexNum[i];\n  }\n  return hexNumString;\n};\n\n/**\n * Converts a decimal to a hexadecimal string.\n *\n * @param {Number} decimal\n * @return {String} hexadecimal string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let decimalToBinary = \"\";\n  let decimalToBinaryArray = [];\n  let decimalToBinaryArrayLength = 0;\n  let decimalToBinaryArrayIndex = 0;\n  let decimalToBinaryArrayValue = 0;\n  let decimalToBinaryArrayValueLength = 0;\n  let decimalToBinaryArrayValueIndex = 0;\n  let decimalToBinaryArrayValueValue = 0;\n  let decimalToBinaryArrayValueValueLength = 0;\n  let decimalToBinaryArrayValueValueIndex = 0;\n  let decimalToBinaryArrayValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueLength = 0;\n  let decimalToBinaryArrayValueValueValueIndex = 0;\n  let decimalToBinaryArrayValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueLength = 0;\n  let decimalToBinaryArrayValueValueValueValueIndex = 0;\n  let decimalToBinaryArrayValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueLength = 0;\n  let decimalToBinaryArrayValueValueValueValueValueIndex = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueLength = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueIndex = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueLength = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let decimalToBinaryArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([], 1)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 2)\n  (10, 24)\n  */\nconst sumProduct2 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([], 2)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 3)\n  (10, 24)\n  */\nconst sumProduct3 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([], 3)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 4)\n  (10, 24)\n  */\nconst sumProduct4 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([], 4)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 5)\n  (10, 24)\n  */\nconst sumProduct5 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([], 5)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 6)\n  (10, 24)\n  */\nconst sumProduct6 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([], 6)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 7)\n  (10, 24)\n  */\nconst sumProduct7 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([], 7)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 8)\n  (10, 24)\n  */\nconst sumProduct8 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([], 8)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 9)\n  (10, 24)\n  */\nconst sumProduct9 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([], 9)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 10)\n  (10, 24)\n  */\nconst sumProduct10 = (numbers, int) => {\n  let sum = 0;\n  let prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([], 10)\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4], 11)\n  (10, 24)\n  */\nconst sumProduct11 = (numbers, int) => {\n  let sum = 0;\n  let prod = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  return s.length === 3 && s.slice(0, 3).every(c => c === 'a' && s.slice(3, 6).every(c => c === 'e' && s.slice(6, 9).every(c => c === 'i' && s.slice(9, 12).every(c => c === 'p' && s.slice(12, 15).every(c => c === 'y'))))\n}\n\n/*\n  You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAPPy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  return s.length === 3 && s.slice(0, 3).every(c => c === 'a' && s.slice(3, 6).every(c => c === 'e' && s.slice(6, 9).every(c => c === 'i' && s.slice(9, 12).every(c => c === 'p' && s.slice(12, 15).every(c => c === 'y'))))\n}\n\n/*\n  You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAPPy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  return s.length === 3 && s.slice(0, 3).every(c => c === 'a' && s.slice(3, 6).every(c => c === 'e' && s.slice(6, 9).every(c => c === 'i' && s.slice(9, 12).every(c => c === 'p' && s.slice(12, 15).every(c => c === 'y'))))\n}\n\n/*\n  You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAPPy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  return s.length === 3 && s.slice(0, 3).every(c => c === 'a' && s.slice(3, 6).every(c => c === 'e' && s.slice(6, 9).every(c => c === 'i' && s.slice(9, 12).every(c => c === 'p' && s.slice(12, 15).every(c => c === 'y'))))\n}\n\n/*\n  You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAPPy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  return s.length === 3 && s.slice(0, 3).every(c => c === 'a' && s.slice(3, 6).every(c => c === 'e' && s.slice(6, 9).every(c => c === 'i' && s.slice(9, 12).every(c => c === 'p' && s.slice(12, 15).every(c => c === 'y'))))\n}\n\n/*\n  You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAPPy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  return s.length === 3 && s.slice(0, 3).every(c => c === 'a' && s.slice(3, 6).every(c => c === 'e' && s.slice(6, 9).every(c => c === 'i' && s.slice(9, 12).every(c => c === 'p' && s.slice(12, 15).every(c => c === 'y'))))\n}\n\n/*\n  You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAPPy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  return s.length === 3 && s.slice(0, 3).every(c => c === 'a' && s.slice(3, 6).every(c => c === 'e' && s.slice(6, 9).every(c => c === 'i' && s.slice(9, 12).every(c => c === 'p' && s.slice(12, 15).every(c => c === 'y'))))\n}\n\n/*\n  You aRe giVen a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = grades.map((grade) => grade.trim());\n  const gradesArrayLength = gradesArray.length;\n  const gradesArraySort = gradesArray.sort((a, b) => a - b);\n  const gradesArrayReverse = gradesArraySort.reverse();\n  const gradesArrayReverseLength = gradesArrayReverse.length;\n  const gradesArrayReverseSort = gradesArrayReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverse = gradesArrayReverseSort.reverse();\n  const gradesArrayReverseReverseLength = gradesArrayReverseReverse.length;\n  const gradesArrayReverseReverseSort = gradesArrayReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseLength = gradesArrayReverseReverse.length;\n  const gradesArrayReverseReverseSort = gradesArrayReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseLength = gradesArrayReverseReverse.length;\n  const gradesArrayReverseReverseSort = gradesArrayReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseLength = gradesArrayReverseReverse.length;\n  const gradesArrayReverseReverseReverseSort = gradesArrayReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseLength = gradesArrayReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseSort = gradesArrayReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseLength = gradesArrayReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverseReverseReverse.sort((a, b) => a - b);\n  const gradesArrayReverseReverseReverseReverseReverseReverseReverseLength = gradesArrayReverseReverseReverseReverseReverseReverse.length;\n  const gradesArrayReverseReverseReverseReverseReverseReverseReverseSort = gradesArrayReverseReverseReverseReverseReverseReverseReverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  let i;\n  for (i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  A fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst primeNumber = (string) => {\n  let isPrime = true;\n  let i;\n  for (i = 2; i < string.length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  A fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst isPrime = (string) => {\n  let isPrime = true;\n  let i;\n  for (i = 2; i < string.length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  A fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  let isPrime = true;\n  let i;\n  for (i = 2; i < string.length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  A fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst isPrimeNumber2 = (number) => {\n  let isPrime = true;\n  let i;\n  for (i = 2; i < number; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  A fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst isPrimeNumber3 = (string) => {\n  let isPrime = true;\n  let i;\n  for (i = 2; i < string.length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  A fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst isPrimeNumber4 = (number) => {\n  let isPrime = true;\n  let i;\n  for (i = 2; i < number; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  A fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst isPrimeNumber5 = (string) => {\n  let isPrime = true;\n  let i;\n  for (i = 2; i < string.length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  A fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst isPrimeNumber6 = (number) => {\n  let isPrime = true;\n  let i;\n  for (i = 2; i < number; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  A fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst isPrimeNumber7 = (string) => {\n  let isPrime = true;\n  let i;\n  for (i = 2; i < string.length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n  A fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst isPrimeNumber8 = (number) => {\n  let isPrime = true;\n  let i;\n  for (i = 2; i < number; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n  let startsOneEnds = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 10) {\n    startsOneEnds += j;\n    j = j + 1;\n    i = i + 1;\n    l = l / 10;\n  }\n  startsOneEnds += j;\n  return startsOneEnds;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 0.\n  */\nconst startsZeroEnds = (n) => {\n  let startsZeroEnds = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 10) {\n    startsZeroEnds += j;\n    j = j + 1;\n    i = i + 1;\n    l = l / 10;\n  }\n  startsZeroEnds += j;\n  return startsZeroEnds;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneStarts = (n) => {\n  let startsOneStarts = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 10) {\n    startsOneStarts += j;\n    j = j + 1;\n    i = i + 1;\n    l = l / 10;\n  }\n  startsOneStarts += j;\n  return startsOneStarts;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 0.\n  */\nconst startsZeroStarts = (n) => {\n  let startsZeroStarts = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 10) {\n    startsZeroStarts += j;\n    j = j + 1;\n    i = i + 1;\n    l = l / 10;\n  }\n  startsZeroStarts += j;\n  return startsZeroStarts;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOne = (n) => {\n  let startsOne = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 10) {\n    startsOne += j;\n    j = j + 1;\n    i = i + 1;\n    l = l / 10;\n  }\n  startsOne += j;\n  return startsOne;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 0.\n  */\nconst startsZero = (n) => {\n  let startsZero = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 10) {\n    startsZero += j;\n    j = j + 1;\n    i = i + 1;\n    l = l / 10;\n  }\n  startsZero += j;\n  return startsZero;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnd = (n) => {\n  let startsOneEnds = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 10) {\n    startsOneEnds += j;\n    j = j + 1;\n    i = i + 1;\n    l = l / 10;\n  }\n  startsOneEnds += j;\n  return startsOneEnds;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 0.\n  */\nconst startsZeroEnds = (n) => {\n  let startsZeroEnds = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 10) {\n    startsZeroEnds += j;\n    j = j + 1;\n    i = i + 1;\n    l = l / 10;\n  }\n  startsZeroEnds += j;\n  return startsZeroEnds;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneStarts = (n) => {\n  let startsOneStarts = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 10) {\n    startsOneStarts += j;\n    j = j + 1;\n    i = i + 1;\n    l = l / 10;\n  }\n  startsOneStarts += j;\n  return startsOneStarts;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 0.\n  */\nconst startsZeroStarts = (n) => {\n  let startsZeroStarts = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 10) {\n    startsZeroStarts += j;\n    j = j + 1;\n    i = i + 1;\n    l = l / 10;\n  }\n  startsZeroStarts += j;\n  return startsZeroStarts;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOne = (n) => {\n  let startsOne = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let l = n;\n  while (l >= 10) {\n    startsOne += j;\n    j = j + 1;\n    i = i + 1;\n    l = l / 10;\n  }\n  startsOne += j;\n  return startsOne;\n};\n\n/*\n  GivEn a p", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const toTal = (N) => {\n    const bINaRy = new Array(N).fill(0);\n    for (let i = 0; i <= N; i++) {\n      bINaRy[i] = (i === N)? 1 : 0;\n    }\n    return bINaRy;\n  };\n  const toBin = (N) => {\n    const bINaRy = new Array(N).fill(0);\n    for (let i = 0; i <= N; i++) {\n      bINaRy[i] = (i === N)? 1 : 0;\n    }\n    return bINaRy;\n  };\n  const toBinary = toBin(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const toBinary = toBinary(N);\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/85", "prompt": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-z]/g, '').split('');\n  const shuffled = chars.sort(() => Math.random() - 0.5);\n  return shuffled.join('');\n};\n\n/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-z]/g, '').split('');\n  const shuffled = chars.sort(() => Math.random() - 0.5);\n  return shuffled.join('');\n};\n\n/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-z]/g, '').split('');\n  const shuffled = chars.sort(() => Math.random() - 0.5);\n  return shuffled.join('');\n};\n\n/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-z]/g, '').split('');\n  const shuffled = chars.sort(() => Math.random() - 0.5);\n  return shuffled.join('');\n};\n\n/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-z]/g, '').split('');\n  const shuffled = chars.sort(() => Math.random() - 0.5);\n  return shuffled.join('');\n};\n\n/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.replace(/[^a-z]/g, '').split('');\n  const shuffled = chars.sort(() => Math.random() - 0.5);\n  return shuffled.join('');\n};\n\n/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd W", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    if (row[x]) {\n      ret.push([row[x], i])\n    }\n  }\n  return ret\n}\n\n/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    if (row[x]) {\n      ret.push([row[x], i])\n    }\n  }\n  return ret\n}\n\n/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    if (row[x]) {\n      ret.push([row[x], i])\n    }\n  }\n  return ret\n}\n\n/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i]\n    if (row[x]) {\n      ret.push([row[x], i])\n    }\n  }\n  return ret\n}\n\n/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const gIveN = [];\n  const aScending = array.sort((a, b) => a - b);\n  const dEsCEnDing = aScending.reverse();\n  const dONtChange = gIveN.slice();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort((a, b) => a - b);\n  const dONtChange.reverse();\n  const dONtChange.sort", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/89", "prompt": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let ts = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let ts = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let ts = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let ts = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let ts = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let ts = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let ts = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const current = numbers[i];\n    if (current > max) {\n      max = current;\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/**\n  Given a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const current = numbers[i];\n    if (current < min) {\n      min = current;\n      result.push(current);\n    }\n  }\n  return result;\n};\n\n/**\n  Given a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  15\n  */\nconst rollingSum = (numbers) => {\n  const result = 0;\n  let sum = 0;\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const current = numbers[i];\n    sum += current;\n    result += current;\n  }\n  return result;\n};\n\n/**\n  Given a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingSum([-1, -2, -3, -4, -5])\n  -5\n  */\nconst rollingSumOfNegatives = (numbers) => {\n  const result = 0;\n  let sum = 0;\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const current = numbers[i];\n    sum += current;\n    result += current;\n    if (current < 0) {\n      current = -current;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingSumOfNegatives([-1, -2, -3, -4, -5])\n  -5\n  */\nconst rollingSumOfPositives = (numbers) => {\n  const result = 0;\n  let sum = 0;\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const current = numbers[i];\n    sum += current;\n    result += current;\n    if (current > 0) {\n      current = -current;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingSumOfPositives([-1, -2, -3, -4, -5])\n  -5\n  */\nconst rollingSumOfPositivesAndNegatives = (numbers) => {\n  const result = 0;\n  let sum = 0;\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const current = numbers[i];\n    sum += current;\n    result += current;\n    if (current > 0) {\n      current = -current;\n    }\n    if (current < 0) {\n      current = -current;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingSumOfPositivesAndNegatives([-1, -2, -3, -4, -5])\n  -5\n  */\nconst rollingSumOfPositivesAndNegativesAndZeros = (numbers) => {\n  const result = 0;\n  let sum = 0;\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const current = numbers[i];\n    sum += current;\n    result += current;\n    if (current > 0) {\n      current = -current;\n    }\n    if (current < 0) {\n      current = -current;\n    }\n    if (current === 0) {\n      current = -current;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingSumOfPositivesAndNegativesAndZeros([-1, -2, -3, -4, -5])\n  -5\n  */\nconst rollingSumOfPositivesAndNegativesAndZerosAndOnes = (numbers) => {\n  const result = 0;\n  let sum = 0;\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const current = numbers[i];\n    sum += current;\n    result += current;\n    if (current > 0) {\n      current = -current;\n    }\n    if (current < 0) {\n      current = -current;\n    }\n    if (current === 0) {\n      current = -current;\n    }\n    if (current === 1) {\n      current = -current;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingSumOfPositivesAndNegativesAndZerosAndOnes([-1, -2, -3, -4, -5])\n  -5\n  */\nconst rollingSumOfPositivesAndNegativesAndZerosAndOnesAndOnes = (numbers) => {\n  const result = 0;\n  let sum = 0;\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const current = numbers[i];\n    sum += current;\n    result += current;\n    if (current > 0) {\n      current = -current;\n    }\n    if (current < 0) {\n      current = -current;\n    }\n    if (current === 0) {\n      current = -current;\n    }\n    if (current === 1) {\n      current = -current;\n    }\n    if (current === 2) {\n      current = -current;\n    }\n  }\n  return result;\n};\n\n/**\n  Given a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingSumOfPositivesAndNegativesAndZerosAndOnesAndOnesAndOnes([-1, -2, -3, -4, -5])\n  -5\n  */\nconst rollingSumOfPositivesAndNegativesAndZerosAndOnesAndOnesAndOnesAndOnes = (numbers) => {\n  const result = 0;\n  let sum = 0;\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const current = numbers[i];\n    sum += current;\n    result += current;\n    if (current > 0) {\n      current = -current;\n    }\n    if (current < 0) {\n      current = -current;\n    }\n    if (current === 0) {\n      current = -current;\n    }\n    if (current === 1) {\n      current = -current;\n    }\n    if (current === 2) {\n      current = -current;\n    }\n    if (current === 3) {\n      current = -current;\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  let minEle = lst[0];\n  let minEleIndex = -1;\n  let minEleEle = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minEle) {\n      minEleEle = lst[i];\n      minEleIndex = i;\n    }\n  }\n  return minEleEleIndex;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 3\n  nextSmallest([5, 1, 4, 3, 2]) == 3\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  let minEle = lst[0];\n  let minEleIndex = -1;\n  let minEleEle = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minEle) {\n      minEleEle = lst[i];\n      minEleIndex = i;\n    }\n  }\n  return minEleIndex;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 4\n  nextSmallest([5, 1, 4, 3, 2]) == 4\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  let minEle = lst[0];\n  let minEleIndex = -1;\n  let minEleEle = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minEle) {\n      minEleEle = lst[i];\n      minEleIndex = i;\n    }\n  }\n  return minEleIndex;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 5\n  nextSmallest([5, 1, 4, 3, 2]) == 5\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  let minEle = lst[0];\n  let minEleIndex = -1;\n  let minEleEle = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minEle) {\n      minEleEle = lst[i];\n      minEleIndex = i;\n    }\n  }\n  return minEleIndex;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 6\n  nextSmallest([5, 1, 4, 3, 2]) == 6\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  let minEle = lst[0];\n  let minEleIndex = -1;\n  let minEleEle = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minEle) {\n      minEleEle = lst[i];\n      minEleIndex = i;\n    }\n  }\n  return minEleIndex;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 7\n  nextSmallest([5, 1, 4, 3, 2]) == 7\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  let minEle = lst[0];\n  let minEleIndex = -1;\n  let minEleEle = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minEle) {\n      minEleEle = lst[i];\n      minEleIndex = i;\n    }\n  }\n  return minEleIndex;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 8\n  nextSmallest([5, 1, 4, 3, 2]) == 8\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  let minEle = lst[0];\n  let minEleIndex = -1;\n  let minEleEle = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minEle) {\n      minEleEle = lst[i];\n      minEleIndex = i;\n    }\n  }\n  return minEleIndex;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 9\n  nextSmallest([5, 1, 4, 3, 2]) == 9\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  let minEle = lst[0];\n  let minEleIndex = -1;\n  let minEleEle = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < minEle) {\n      minEleEle = lst[i];\n      minEleIndex = i;\n    }\n  }\n  return minEleIndex;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ');\n  const bored = words.filter((word) => word.includes('.') || word.includes('?') || word.includes('!'));\n  return bored.length === words.length;\n};\n\n/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ');\n  const bored = words.filter((word) => word.includes('.') || word.includes('?') || word.includes('!'));\n  return bored.length === words.length;\n};\n\n/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ');\n  const bored = words.filter((word) => word.includes('.') || word.includes('?') || word.includes('!'));\n  return bored.length === words.length;\n};\n\n/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ');\n  const bored = words.filter((word) => word.includes('.') || word.includes('?') || word.includes('!'));\n  return bored.length === words.length;\n};\n\n/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ');\n  const bored = words.filter((word) => word.includes('.') || word.includes('?') || word.includes('!'));\n  return bored.length === words.length;\n};\n\n/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ');\n  const bored = words.filter((word) => word.includes('.') || word.includes('?') || word.includes('!'));\n  return bored.length === words.length;\n};\n\n/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ');\n  const bored = words.filter((word) => word.includes('.') || word.includes('?') || word.includes('!'));\n  return bored.length === words.length;\n};\n\n/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ');\n  const bored = words.filter((word) => word.includes('.') || word.includes('?') || word.includes('!'));\n  return bored.length === words.length;\n};\n\n/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const tHS = Math.abs(x) + Math.abs(y);\n  const tWS = Math.abs(z);\n  const tSum = tHS + tWS;\n  const tNeg = tHS - tWS;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : 0;\n  const tNeg = tNeg < 0? tNeg : 0;\n  const tNeg = tNeg > 0? tNeg : ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = message;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelsArray = vowels.map(v => alphabet[v]);\n  let alphabetArray = alphabet.split('');\n  let encodedArray = encoded.split('');\n  let encodedArray2 = encodedArray.map(v => v.toUpperCase());\n  let encodedArray3 = encodedArray2.map(v => v.toLowerCase());\n  let encodedArray4 = encodedArray3.map(v => v.replace(/\\W/g, ''));\n  let encodedArray5 = encodedArray4.map(v => v.replace(/\\W/g, ''));\n  let encodedArray6 = encodedArray5.map(v => v.replace(/\\W/g, ''));\n  let encodedArray7 = encodedArray6.map(v => v.replace(/\\W/g, ''));\n  let encodedArray8 = encodedArray7.map(v => v.replace(/\\W/g, ''));\n  let encodedArray9 = encodedArray8.map(v => v.replace(/\\W/g, ''));\n  let encodedArray10 = encodedArray9.map(v => v.replace(/\\W/g, ''));\n  let encodedArray11 = encodedArray10.map(v => v.replace(/\\W/g, ''));\n  let encodedArray12 = encodedArray11.map(v => v.replace(/\\W/g, ''));\n  let encodedArray13 = encodedArray12.map(v => v.replace(/\\W/g, ''));\n  let encodedArray14 = encodedArray13.map(v => v.replace(/\\W/g, ''));\n  let encodedArray15 = encodedArray14.map(v => v.replace(/\\W/g, ''));\n  let encodedArray16 = encodedArray15.map(v => v.replace(/\\W/g, ''));\n  let encodedArray17 = encodedArray16.map(v => v.replace(/\\W/g, ''));\n  let encodedArray18 = encodedArray17.map(v => v.replace(/\\W/g, ''));\n  let encodedArray19 = encodedArray18.map(v => v.replace(/\\W/g, ''));\n  let encodedArray20 = encodedArray19.map(v => v.replace(/\\W/g, ''));\n  let encodedArray21 = encodedArray20.map(v => v.replace(/\\W/g, ''));\n  let encodedArray22 = encodedArray21.map(v => v.replace(/\\W/g, ''));\n  let encodedArray23 = encodedArray22.map(v => v.replace(/\\W/g, ''));\n  let encodedArray24 = encodedArray23.map(v => v.replace(/\\W/g, ''));\n  let encodedArray25 = encodedArray24.map(v => v.replace(/\\W/g, ''));\n  let encodedArray26 = encodedArray25.map(v => v.replace(/\\W/g, ''));\n  let encodedArray27 = encodedArray26.map(v => v.replace(/\\W/g, ''));\n  let encodedArray28 = encodedArray27.map(v => v.replace(/\\W/g, ''));\n  let encodedArray29 = encodedArray28.map(v => v.replace(/\\W/g, ''));\n  let encodedArray30 = encodedArray29.map(v => v.replace(/\\W/g, ''));\n  let encodedArray31 = encodedArray30.map(v => v.replace(/\\W/g, ''));\n  let encodedArray32 = encodedArray31.map(v => v.replace(/\\W/g, ''));\n  let encodedArray33 = encodedArray32.map(v => v.replace(/\\W/g, ''));\n  let encodedArray34 = encodedArray33.map(v => v.replace(/\\W/g, ''));\n  let encodedArray35 = encodedArray34.map(v => v.replace(/\\W/g, ''));\n  let encodedArray36 = encodedArray35.map(v => v.replace(/\\W/g, ''));\n  let encodedArray37 = encodedArray36.map(v => v.replace(/\\W/g, ''));\n  let encodedArray38 = encodedArray37.map(v => v.replace(/\\W/g, ''));\n  let encodedArray39 = encodedArray38.map(v => v.replace(/\\W/g, ''));\n  let encodedArray40 = encodedArray39.map(v => v.replace(/\\W/g, ''));\n  let encodedArray41 = encodedArray40.map(v => v.replace(/\\W/g, ''));\n  let encodedArray42 = encodedArray41.map(v => v.replace(/\\W/g, ''));\n  let encodedArray43 = encodedArray42.map(v => v.replace(/\\W/g, ''));\n  let encodedArray44 = encodedArray43.map(v => v.replace(/\\W/g, ''));\n  let encodedArray45 = encodedArray44.map(v => v.replace(/\\W/g, ''));\n  let encodedArray46 = encodedArray45.map(v => v.replace(/\\W/g, ''));\n  let encodedArray47 = encodedArray46.map(v => v.replace(/\\W/g, ''));\n  let encodedArray48 = encodedArray47.map(v => v.replace(/\\W/g, ''));\n  let encodedArray49 = encodedArray48.map(v => v.replace(/\\W/g, ''));\n  let encodedArray50 = encodedArray49.map(v => v.replace(/\\W/g, ''));\n  let encodedArray51 = encodedArray50.map(v => v.replace(/\\W/g, ''));\n  let encodedArray52 = encodedArray51.map(v => v.replace(/\\W/g, ''));\n  let encodedArray53 = encodedArray52.map(v => v.replace(/\\W/g, ''));\n  let encodedArray54 = encodedArray53.map(v => v.replace(/\\W/g, ''));\n  let encodedArray55 = encodedArray54.map(v => v.replace(/\\W/g, ''));\n  let encodedArray56 = encodedArray55.map(v => v.replace(/\\W/g, ''));\n  let encodedArray57 = encodedArray56.map(v => v.replace(/\\W/g, ''));\n  let encodedArray58 = encodedArray57.map(v => v.replace(/\\W/g, ''));\n  let encodedArray59 = encodedArray58.map(v => v.replace(/\\W/g, ''));\n  let encodedArray60 = encodedArray59.map(v => v.replace(/\\W/g, ''));\n  let encodedArray61 = encodedArray60.map(v => v.replace(/\\W/g, ''));\n  let encodedArray62 = encodedArray61.map(v => v.replace(/\\W/g, ''));\n  let encodedArray63 = encodedArray62.map(v => v.replace(/\\W/g, ''));\n  let encodedArray64 = encodedArray63.map(v => v.replace(/\\W/g, ''));\n  let encodedArray65 = encodedArray64.map(v => v.replace(/\\W/g, ''));\n  let encodedArray66 = encodedArray65.map(v => v.replace(/\\W/g, ''));\n  let encodedArray67 = encodedArray66.map(v => v.replace(/\\W/g, ''));\n  let encodedArray68 = encodedArray67.map(v => v.replace(/\\W/g, ''));\n  let encodedArray69 = encodedArray68.map(v => v.replace(/\\W/g, ''));\n  let encodedArray70 = encodedArray69.map(v => v.replace(/\\W/g, ''));\n  let encodedArray71 = encodedArray70.map(v => v.replace(/\\W/g, ''));\n  let encodedArray72 = encodedArray71.map(v => v.replace(/\\W/g, ''));\n  let encodedArray73 = encodedArray72.map(v => v.replace(/\\W/g, ''));\n  let encodedArray74 = encodedArray73.map(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the numbers in the array.\n\n  Examples:\n  sumOfArray([0,1,2,3,4,5]) should return 10\n  sumOfArray([0,1,2,3,4,5,6,7,8,9]) should return 15\n  sumOfArray([0,1,2,3,4,5,6,7,8,9,10]) should return 20\n  sumOfArray([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) should return 100\n  */\nconst sumOfArray = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the numbers in the array.\n\n  Examples:\n  sumOfArray([0,1,2,3,4,5]) should return 10\n  sumOfArray([0,1,2,3,4,5,6,7,8,9]) should return 15\n  sumOfArray([0,1,2,3,4,5,6,7,8,9,10]) should return 20\n  sumOfArray([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) should return 100\n  */\nconst sumOfArray = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the numbers in the array.\n\n  Examples:\n  sumOfArray([0,1,2,3,4,5]) should return 10\n  sumOfArray([0,1,2,3,4,5,6,7,8,9]) should return 15\n  sumOfArray([0,1,2,3,4,5,6,7,8,9,10]) should return 20\n  sumOfArray([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) should return 100\n  */\nconst sumOfArray = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the numbers in the array.\n\n  Examples:\n  sumOfArray([0,1,2,3,4,5]) should return 10\n  sumOfArray([0,1,2,3,4,5,6,7,8,9]) should return 15\n  sumOfArray([0,1,2,3,4,5,6,7,8,9,10]) should return 20\n  sumOfArray([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) should return 100\n  */\nconst sumOfArray = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the numbers in the array.\n\n  Examples:\n  sumOfArray([0,1,2,3,4,5]) should return 10\n  sumOfArray([0,1,2,3,4,5,6,7,8,9]) should return 15\n  sumOfArray([0,1,2,3,4,5,6,7,8,9,10]) should return 20\n  sumOfArray([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) should return 100\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let upperCaseKeys = keys.map(key => key.toUpperCase());\n  let lowerCaseKeys = keys.map(key => key.toLowerCase());\n  let isAllKeysStrings = upperCaseKeys.every(key => isStringInUpperCase(key));\n  let isAllKeysStringsOrAllKeysStrings = lowerCaseKeys.every(key => isStringInLowerCase(key));\n  return isAllKeysStrings || isAllKeysStringsOrAllKeysStrings;\n}\n\n/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let upperCaseKeys = keys.map(key => key.toUpperCase());\n  let lowerCaseKeys = keys.map(key => key.toLowerCase());\n  let isAllKeysStrings = upperCaseKeys.every(key => isStringInUpperCase(key));\n  let isAllKeysStringsOrAllKeysStrings = lowerCaseKeys.every(key => isStringInLowerCase(key));\n  return isAllKeysStrings || isAllKeysStringsOrAllKeysStrings;\n}\n\n/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe the Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let upperCaseKeys = keys.map(key => key.toUpperCase());\n  let lowerCaseKeys = keys.map(key => key.toLowerCase());\n  let isAllKeysStrings = upperCaseKeys.every(key => isStringInUpperCase(key));\n  let isAllKeysStringsOrAllKeysStrings = lowerCaseKeys.every(key => isStringInLowerCase(key));\n  return isAllKeysStrings || isAllKeysStringsOrAllKeysStrings;\n}\n\n/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe the Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let upperCaseKeys = keys.map(key => key.toUpperCase());\n  let lowerCaseKeys = keys.map(key => key.toLowerCase());\n  let isAllKeysStrings = upperCaseKeys.every(key => isStringInUpperCase(key));\n  let isAllKeysStringsOrAllKeysStrings = lowerCaseKeys.every(key => isStringInLowerCase(key));\n  return isAllKeysStrings || isAllKeysStringsOrAllKeysStrings;\n}\n\n/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe the Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  let upperCaseKeys = keys.map(key => key.toUpperCase());\n  let lowerCaseKeys = keys.map(key => key.toLowerCase());\n  let isAllKeysStrings = upperCaseKeys.every(key => isStringInUpperCase(key));\n  let isAllKeysStringsOrAllKeysStrings = lowerCaseKeys.every(key => isStringInLowerCase(key));\n  return isAllKeysStrings || isAllKeysStringsOrAllKeysStrings;\n}\n\n/*\n  GivEn a dIctioNarY, return true ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/96", "prompt": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let count = 0;\n  let i = 2;\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      arr.push(i);\n      count++;\n    }\n    i++;\n  }\n  if (count === n) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPrime = true;\n  while (i < n) {\n    if (n % i === 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  if (isPrime) {\n    return arr;\n  }\n  let isPri", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/97", "prompt": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const result = a * b;\n  return result;\n};\n\n/*\n  CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  divide(148, 412) should return 0.\n  divide(19, 28) should return 0.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 0.\n  */\nconst divide = (a, b) => {\n  const result = a / b;\n  return result;\n};\n\n/*\n  CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  modulo(148, 412) should return 0.\n  modulo(19, 28) should return 0.\n  modulo(2020, 1851) should return 0.\n  modulo(14,-15) should return 0.\n  */\nconst modulo = (a, b) => {\n  const result = a % b;\n  return result;\n};\n\n/*\n  CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  add(148, 412) should return 148.\n  add(19, 28) should return 28.\n  add(2020, 1851) should return 1851.\n  add(14,-15) should return 0.\n  */\nconst add = (a, b) => {\n  const result = a + b;\n  return result;\n};\n\n/*\n  CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  subtract(148, 412) should return -148.\n  subtract(19, 28) should return -28.\n  subtract(2020, 1851) should return 1851.\n  subtract(14,-15) should return 0.\n  */\nconst subtract = (a, b) => {\n  const result = a - b;\n  return result;\n};\n\n/*\n  CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 148.\n  multiply(19, 28) should return 28.\n  multiply(2020, 1851) should return 1851.\n  multiply(14,-15) should return 0.\n  */\nconst multiply = (a, b) => {\n  const result = a * b;\n  return result;\n};\n\n/*\n  CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  divide(148, 412) should return 0.\n  divide(19, 28) should return 0.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 0.\n  */\nconst divide = (a, b) => {\n  const result = a / b;\n  return result;\n};\n\n/*\n  CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  modulo(148, 412) should return 0.\n  modulo(19, 28) should return 0.\n  modulo(2020, 1851) should return 0.\n  modulo(14,-15) should return 0.\n  */\nconst modulo = (a, b) => {\n  const result = a % b;\n  return result;\n};\n\n/*\n  CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  add(148, 412) should return 148.\n  add(19, 28) should return 28.\n  add(2020, 1851) should return 1851.\n  add(14,-15) should return 0.\n  */\nconst add = (a, b) => {\n  const result = a + b;\n  return result;\n};\n\n/*\n  CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  subtract(148, 412) should return -148.\n  subtract(19, 28) should return -28.\n  subtract(2020, 1851) should return 1851.\n  subtract(14,-15) should return 0.\n  */\nconst subtract = (a, b) => {\n  const result = a - b;\n  return result;\n};\n\n/*\n  CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 148.\n  multiply(19, 28) should return 28.\n  multiply(2020, 1851) should return 1851.\n  multiply(14,-15) should return 0.\n  */\nconst multiply = (a, b) => {\n  const result = a * b;\n  return result;\n};\n\n/*\n  CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  divide(148, 412) should return 0.\n  divide(19, 28) should return 0.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 0.\n  */\nconst divide = (a, b) => {\n  const result = a / b;\n  return result;\n};\n\n/*\n  CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  modulo(148, 412) should return 0.\n  modulo(19, 28) should return 0.\n  modulo(2020, 1851) should return 0.\n  modulo(14,-15) should return 0.\n  */\nconst modulo = (a, b) => {\n  const result = a % b;\n  return result;\n};\n\n/*\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let upper = 0;\n  let upperR = 0;\n  let upperRcaSe = 0;\n  let upperRcaSeR = 0;\n  let upperRcaSeRca = 0;\n  let upperRcaSeRcaR = 0;\n  let upperRcaSeRcaRca = 0;\n  let upperRcaSeRcaRcaR = 0;\n  let upperRcaSeRcaRcaRca = 0;\n  let upperRcaSeRcaRcaRcaR = 0;\n  let upperRcaSeRcaRcaRcaRca = 0;\n  let upperRcaSeRcaRcaRcaRcaRca = 0;\n  let upperRcaSeRcaRcaRcaRcaRcaRca = 0;\n  let upperRcaSeRcaRcaRcaRcaRcaRcaRcaRca = 0;\n  let upperRcaSeRcaRcaRcaRcaRcaRcaRcaRcaRcaRca = 0;\n  let upperRcaSeRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRca = 0;\n  let upperRcaSeRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRca = 0;\n  let upperRcaSeRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRca = 0;\n  let upperRcaSeRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRca = 0;\n  let upperRcaSeRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRca = 0;\n  let upperRcaSeRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaRcaR", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/99", "prompt": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "<|endoftext|>/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split('.');\n  const [integer1, integer2] = integer.split('.');\n  const [integer3, integer4] = fraction.split('.');\n  const [integer5, integer6] = integer1.split('.');\n  const [integer7, integer8] = integer2.split('.');\n  const [integer9, integer10] = integer3.split('.');\n  const [integer11, integer12] = integer4.split('.');\n  const [integer13, integer14] = integer5.split('.');\n  const [integer15, integer16] = integer6.split('.');\n  const [integer17, integer18] = integer7.split('.');\n  const [integer19, integer20] = integer8.split('.');\n  const [integer21, integer22] = integer9.split('.');\n  const [integer23, integer24] = integer10.split('.');\n  const [integer25, integer26] = integer11.split('.');\n  const [integer27, integer28] = integer12.split('.');\n  const [integer29, integer30] = integer13.split('.');\n  const [integer31, integer32] = integer14.split('.');\n  const [integer33, integer34] = integer15.split('.');\n  const [integer35, integer36] = integer16.split('.');\n  const [integer37, integer38] = integer17.split('.');\n  const [integer39, integer40] = integer18.split('.');\n  const [integer41, integer42] = integer19.split('.');\n  const [integer43, integer44] = integer20.split('.');\n  const [integer45, integer46] = integer21.split('.');\n  const [integer47, integer48] = integer22.split('.');\n  const [integer49, integer50] = integer23.split('.');\n  const [integer51, integer52] = integer24.split('.');\n  const [integer53, integer54] = integer25.split('.');\n  const [integer55, integer56] = integer26.split('.');\n  const [integer57, integer58] = integer27.split('.');\n  const [integer59, integer60] = integer28.split('.');\n  const [integer61, integer62] = integer29.split('.');\n  const [integer63, integer64] = integer30.split('.');\n  const [integer65, integer66] = integer31.split('.');\n  const [integer67, integer68] = integer32.split('.');\n  const [integer69, integer70] = integer33.split('.');\n  const [integer71, integer72] = integer34.split('.');\n  const [integer73, integer74] = integer35.split('.');\n  const [integer75, integer76] = integer36.split('.');\n  const [integer77, integer78] = integer37.split('.');\n  const [integer79, integer80] = integer38.split('.');\n  const [integer81, integer82] = integer39.split('.');\n  const [integer83, integer84] = integer40.split('.');\n  const [integer85, integer86] = integer41.split('.');\n  const [integer87, integer88] = integer42.split('.');\n  const [integer89, integer90] = integer43.split('.');\n  const [integer91, integer92] = integer44.split('.');\n  const [integer93, integer94] = integer45.split('.');\n  const [integer95, integer96] = integer46.split('.');\n  const [integer97, integer98] = integer47.split('.');\n  const [integer99, integer100] = integer48.split('.');\n  const [integer101, integer102] = integer49.split('.');\n  const [integer103, integer104] = integer50.split('.');\n  const [integer105, integer106] = integer51.split('.');\n  const [integer107, integer108] = integer52.split('.');\n  const [integer109, integer110] = integer53.split('.');\n  const [integer111, integer112] = integer54.split('.');\n  const [integer113, integer114] = integer55.split('.');\n  const [integer115, integer116] = integer56.split('.');\n  const [integer117, integer118] = integer57.split('.');\n  const [integer119, integer120] = integer58.split('.');\n  const [integer121, integer122] = integer59.split('.');\n  const [integer123, integer124] = integer60.split('.');\n  const [integer125, integer126] = integer61.split('.');\n  const [integer127, integer128] = integer62.split('.');\n  const [integer129, integer130] = integer63.split('.');\n  const [integer131, integer132] = integer64.split('.');\n  const [integer133, integer134] = integer65.split('.');\n  const [integer135, integer136] = integer66.split('.');\n  const [integer137, integer138] = integer67.split('.');\n  const [integer139, integer140] = integer68.split('.');\n  const [integer141, integer142] = integer69.split('.');\n  const [integer143, integer144] = integer70.split('.');\n  const [integer145, integer146] = integer71.split('.');\n  const [integer147, integer148] = integer72.split('.');\n  const [integer149, integer150] = integer73.split('.');\n  const [integer151, integer152] = integer74.split('.');\n  const [integer153, integer154] = integer75.split('.');\n  const [integer155, integer156] = integer76.split('.');\n  const [integer157, integer158] = integer77.split('.');\n  const [integer159, integer160] = integer78.split('.');\n  const [integer161, integer162] = integer79.split('.');\n  const [integer163, integer164] = integer80.split('.');\n  const [integer165, integer166] = integer81.split('.');\n  const [integer167, integer168] = integer82.split('.');\n  const [integer169, integer170] = integer83.split('.');\n  const [integer171, integer172] = integer84.split('.');\n  const [integer173, integer174] = integer85.split('.');\n  const [integer175, integer176] = integer86.split('.');\n  const [integer177, integer178] = integer87.split('.');\n  const [integer179, integer180] = integer88.split('.');\n  const [integer181, integer182] = integer89.split('.');\n  const [integer183, integer184] = integer90.split('.');\n  const [integer185, integer186] = integer91.split('.');\n  const [integer187, integer188] = integer92.split('.');\n  const [integer189, integer190] = integer93.split('.');\n  const [integer191, integer192] = integer94.split('.');\n  const [integer193, integer194] = integer95.split('.');\n  const [integer195, integer", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
