{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const closest = numbers.reduce((acc, curr) => {\n    const diff = curr - acc;\n    if (diff < threshold) {\n      return curr;\n    }\n    return acc;\n  }, Number.POSITIVE_INFINITY);\n  return numbers.some(number => Math.abs(number - closest) < threshold);\n};\n\n/**\n * Check if given number is in range [min, max].\n * If not, return false.\n * If given, min and max are inclusive.\n */\nconst isInRange = (number, min, max) => {\n  return number >= min && number <= max;\n};\n\n/**\n * Check if given number is in range [min, max].\n * If not, return false.\n * If given, min and max are inclusive.\n */\nconst isInRangeInclusive = (number, min, max) => {\n  return isInRange(number, min, max) && number >= min && number <= max;\n};\n\n/**\n * Check if given number is in range [min, max].\n * If not, return false.\n * If given, min and max are inclusive.\n */\nconst isInRangeExclusive = (number, min, max) => {\n  return isInRange(number, min, max) &&!isInRange(number, min, max);\n};\n\n/**\n * Check if given number is in range [min, max].\n * If not, return false.\n * If given, min and max are inclusive.\n */\nconst isInRangeInclusiveOrEqual = (number, min, max) => {\n  return isInRange(number, min, max) || isInRange(number, min, max);\n};\n\n/**\n * Check if given number is in range [min, max].\n * If not, return false.\n * If given, min and max are inclusive.\n */\nconst isInRangeExclusiveOrEqual = (number, min, max) => {\n  return isInRange(number, min, max) ||!isInRange(number, min, max);\n};\n\n/**\n * Check if given number is in range [min, max].\n * If not, return false.\n * If given, min and max are inclusive.\n */\nconst isInRangeInclusiveOrEqualOrGreaterThan = (number, min, max) => {\n  return isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max);\n};\n\n/**\n * Check if given number is in range [min, max].\n * If not, return false.\n * If given, min and max are inclusive.\n */\nconst isInRangeExclusiveOrEqualOrGreaterThan = (number, min, max) => {\n  return isInRange(number, min, max) ||!isInRange(number, min, max) ||!isInRange(number, min, max);\n};\n\n/**\n * Check if given number is in range [min, max].\n * If not, return false.\n * If given, min and max are inclusive.\n */\nconst isInRangeInclusiveOrEqualOrLessThan = (number, min, max) => {\n  return isInRange(number, min, max) || isInRange(number, min, max) ||!isInRange(number, min, max) ||!isInRange(number, min, max);\n};\n\n/**\n * Check if given number is in range [min, max].\n * If not, return false.\n * If given, min and max are inclusive.\n */\nconst isInRangeExclusiveOrEqualOrLessThan = (number, min, max) => {\n  return isInRange(number, min, max) ||!isInRange(number, min, max) ||!isInRange(number, min, max) ||!isInRange(number, min, max);\n};\n\n/**\n * Check if given number is in range [min, max].\n * If not, return false.\n * If given, min and max are inclusive.\n */\nconst isInRangeInclusiveOrEqualOrGreaterThanOrEqual = (number, min, max) => {\n  return isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, max) || isInRange(number, min, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  const paren_groups_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_groups_strings_temp = group.match(/\\(([^)]+)\\)/g);\n    paren_groups_strings_temp.forEach((group_string) => {\n      paren_groups_strings.push(group_string);\n    });\n  });\n  return paren_groups_strings;\n};\n\n/* Input to this function was a string containing multiple groups of parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroupspassed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromePrefixLength = 0;\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromePrefixReversed = '';\n  let longestPalindromeSuffixReversed = '';\n  let longestPalindromePrefixReversedLength = 0;\n  let longestPalindromeSuffixReversedLength = 0;\n  let longestPalindromePrefixReversedReversed = '';\n  let longestPalindromeSuffixReversedReversed = '';\n  let longestPalindromePrefixReversedReversedLength = 0;\n  let longestPalindromeSuffixReversedReversedLength = 0;\n  let longestPalindromePrefixReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversed = '';\n  let longestPalindromePrefixReversedReversedReversedLength = 0;\n  let longestPalindromeSuffixReversedReversedReversedLength = 0;\n  let longestPalindromePrefixReversedReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversedReversed = '';\n  let longestPalindromePrefixReversedReversedReversedReversedLength = 0;\n  let longestPalindromeSuffixReversedReversedReversedReversedLength = 0;\n  let longestPalindromePrefixReversedReversedReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversedReversedReversed = '';\n  let longestPalindromePrefixReversedReversedReversedReversedReversedLength = 0;\n  let longestPalindromeSuffixReversedReversedReversedReversedReversedLength = 0;\n  let longestPalindromePrefixReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromePrefixReversedReversedReversedReversedReversedReversedLength = 0;\n  let longestPalindromeSuffixReversedReversedReversedReversedReversedReversedLength = 0;\n  let longestPalindromePrefixReversedReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromePrefixReversedReversedReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromePrefixReversedReversedReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromePrefixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = '';\n  let longestPalindromeSuffixReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReverse", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let level = 1;\n  while (level < n) {\n    result.push(level);\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let level = 1;\n  while (level < n) {\n    result.push(level);\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let level = 1;\n  while (level < n) {\n    result.push(level);\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let level = 1;\n  while (level < n) {\n    result.push(level);\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let level = 1;\n  while (level < n) {\n    result.push(level);\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let level = 1;\n  while (level < n) {\n    result.push(level);\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let level = 1;\n  while (level < n) {\n    result.push(level);\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let level = 1;\n  while (level < n) {\n    result.push(level);\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let level = 1;\n  while (level < n) {\n    result.push(level);\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let level = 1;\n  while (level < n) {\n    result.push(level);\n    level += 1;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let level = 1;\n  while (level < n) {\n    result.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray2 = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray3 = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray4 = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray5 = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray6 = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray7 = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray8 = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray9 = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray10 = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray11 = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.map((word) => word.trim());\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray12 = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let biggestNum = x;\n  let evenNum = 0;\n  let evenNum2 = 0;\n  let evenNum3 = 0;\n  let evenNum4 = 0;\n  let evenNum5 = 0;\n  let evenNum6 = 0;\n  let evenNum7 = 0;\n  let evenNum8 = 0;\n  let evenNum9 = 0;\n  let evenNum10 = 0;\n  let evenNum11 = 0;\n  let evenNum12 = 0;\n  let evenNum13 = 0;\n  let evenNum14 = 0;\n  let evenNum15 = 0;\n  let evenNum16 = 0;\n  let evenNum17 = 0;\n  let evenNum18 = 0;\n  let evenNum19 = 0;\n  let evenNum20 = 0;\n  let evenNum21 = 0;\n  let evenNum22 = 0;\n  let evenNum23 = 0;\n  let evenNum24 = 0;\n  let evenNum25 = 0;\n  let evenNum26 = 0;\n  let evenNum27 = 0;\n  let evenNum28 = 0;\n  let evenNum29 = 0;\n  let evenNum30 = 0;\n  let evenNum31 = 0;\n  let evenNum32 = 0;\n  let evenNum33 = 0;\n  let evenNum34 = 0;\n  let evenNum35 = 0;\n  let evenNum36 = 0;\n  let evenNum37 = 0;\n  let evenNum38 = 0;\n  let evenNum39 = 0;\n  let evenNum40 = 0;\n  let evenNum41 = 0;\n  let evenNum42 = 0;\n  let evenNum43 = 0;\n  let evenNum44 = 0;\n  let evenNum45 = 0;\n  let evenNum46 = 0;\n  let evenNum47 = 0;\n  let evenNum48 = 0;\n  let evenNum49 = 0;\n  let evenNum50 = 0;\n  let evenNum51 = 0;\n  let evenNum52 = 0;\n  let evenNum53 = 0;\n  let evenNum54 = 0;\n  let evenNum55 = 0;\n  let evenNum56 = 0;\n  let evenNum57 = 0;\n  let evenNum58 = 0;\n  let evenNum59 = 0;\n  let evenNum60 = 0;\n  let evenNum61 = 0;\n  let evenNum62 = 0;\n  let evenNum63 = 0;\n  let evenNum64 = 0;\n  let evenNum65 = 0;\n  let evenNum66 = 0;\n  let evenNum67 = 0;\n  let evenNum68 = 0;\n  let evenNum69 = 0;\n  let evenNum70 = 0;\n  let evenNum71 = 0;\n  let evenNum72 = 0;\n  let evenNum73 = 0;\n  let evenNum74 = 0;\n  let evenNum75 = 0;\n  let evenNum76 = 0;\n  let evenNum77 = 0;\n  let evenNum78 = 0;\n  let evenNum79 = 0;\n  let evenNum80 = 0;\n  let evenNum81 = 0;\n  let evenNum82 = 0;\n  let evenNum83 = 0;\n  let evenNum84 = 0;\n  let evenNum85 = 0;\n  let evenNum86 = 0;\n  let evenNum87 = 0;\n  let evenNum88 = 0;\n  let evenNum89 = 0;\n  let evenNum90 = 0;\n  let evenNum91 = 0;\n  let evenNum92 = 0;\n  let evenNum93 = 0;\n  let evenNum94 = 0;\n  let evenNum95 = 0;\n  let evenNum96 = 0;\n  let evenNum97 = 0;\n  let evenNum98 = 0;\n  let evenNum99 = 0;\n  let evenNum100 = 0;\n  let evenNum101 = 0;\n  let evenNum102 = 0;\n  let evenNum103 = 0;\n  let evenNum104 = 0;\n  let evenNum105 = 0;\n  let evenNum106 = 0;\n  let evenNum107 = 0;\n  let evenNum108 = 0;\n  let evenNum109 = 0;\n  let evenNum110 = 0;\n  let evenNum111 = 0;\n  let evenNum112 = 0;\n  let evenNum113 = 0;\n  let evenNum114 = 0;\n  let evenNum115 = 0;\n  let evenNum116 = 0;\n  let evenNum117 = 0;\n  let evenNum118 = 0;\n  let evenNum119 = 0;\n  let evenNum120 = 0;\n  let evenNum121 = 0;\n  let evenNum122 = 0;\n  let evenNum123 = 0;\n  let evenNum124 = 0;\n  let evenNum125 = 0;\n  let evenNum126 = 0;\n  let evenNum127 = 0;\n  let evenNum128 = 0;\n  let evenNum129 = 0;\n  let evenNum130 = 0;\n  let evenNum131 = 0;\n  let evenNum132 = 0;\n  let evenNum133 = 0;\n  let evenNum134 = 0;\n  let evenNum135 = 0;\n  let evenNum136 = 0;\n  let evenNum137 = 0;\n  let evenNum138 = 0;\n  let evenNum139 = 0;\n  let evenNum140 = 0;\n  let evenNum141 = 0;\n  let evenNum142 = 0;\n  let evenNum143 = 0;\n  let evenNum144 = 0;\n  let evenNum145 = 0;\n  let evenNum146 = 0;\n  let evenNum147 = 0;\n  let evenNum148 = 0;\n  let evenNum149 = 0;\n  let evenNum150 = 0;\n  let evenNum151 = 0;\n  let evenNum152 = 0;\n  let evenNum153 = 0;\n  let evenNum154 = 0;\n  let evenNum155 = 0;\n  let evenNum156 = 0;\n  let evenNum157 = 0;\n  let evenNum158 = 0;\n  let evenNum159 = 0;\n  let evenNum160 = 0;\n  let evenNum161 = 0;\n  let evenNum162 = 0;\n  let evenNum163 = 0;\n  let evenNum164 = 0;\n  let evenNum165 = 0;\n  let evenNum166 = 0;\n  let evenNum167 = 0;\n  let evenNum168 = 0;\n  let evenNum169 = 0;\n  let evenNum170 = 0;\n  let evenNum171 = 0;\n  let evenNum172 = 0;\n  let evenNum173 = 0;\n  let evenNum174 = 0;\n  let evenNum175 = 0;\n  let evenNum176 = 0;\n  let evenNum177 = 0;\n  let evenNum178 = 0;\n  let evenNum179 = 0;\n  let evenNum180 = 0;\n  let evenNum181 = 0;\n  let evenNum182 = 0;\n  let evenNum183 = 0;\n  let evenNum184 = 0;\n  let evenNum185 = 0;\n  let evenNum186 = 0;\n  let evenNum187 = 0;\n  let evenNum188 = 0;\n  let evenNum189 = 0;\n  let evenNum190 = 0;\n  let evenNum191 = 0;\n  let evenNum192 = 0;\n  let evenNum193 = 0;\n  let evenNum194 = 0;\n  let evenNum195 = 0;\n  let evenNum196 = 0;\n  let evenNum197 = 0;\n  let evenNum198 = 0;\n  let evenNum199 = 0;\n  let evenNum200 = 0;\n  let evenNum201 = 0;\n  let evenNum202 = 0;\n  let evenNum203 = 0;\n  let evenNum204 = 0;\n  let evenNum205 = 0;\n  let evenNum206 = 0;\n  let evenNum207 = 0;\n  let evenNum208 = 0;\n  let evenNum209 = 0;\n  let evenNum210 = 0;\n  let evenNum211 = 0;\n  let evenNum212 = 0;\n  let evenNum213 = 0;\n  let evenNum214 = 0;\n  let evenNum215 = 0;\n  let evenNum216 = 0;\n  let evenNum217 = 0;\n  let evenNum218 = 0;\n  let evenNum219 = 0;\n  let evenNum220 = 0;\n  let evenNum221 = 0;\n  let evenNum222 = 0;\n  let evenNum223 = 0;\n  let evenNum224 = 0;\n  let evenNum225 = 0;\n  let evenNum226 = 0;\n  let evenNum227 = 0;\n  let evenNum228 = 0;\n  let evenNum229 = 0;\n  let evenNum230 = 0;\n  let evenNum231 = 0;\n  let evenNum232 = 0;\n  let evenNum233 = 0;\n  let evenNum234 = 0;\n  let evenNum235 = 0;\n  let evenNum236 = 0;\n  let evenNum237 = 0;\n  let evenNum238 = 0;\n  let evenNum239 = 0;\n  let evenNum240 = 0;\n  let evenNum241 = 0;\n  let evenNum242 = 0;\n  let evenNum243 = 0;\n  let evenNum244 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let rounded = 0;\n  let binary = \"\";\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = []\n  let digit = 0\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      digit++\n    }\n    \n    if (digit === 10) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\nmodule.exports = uniqueDigits\n\n},{}],4:[function(require,module,exports){\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> evenDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> evenDigits([152, 323, 1422, 10])\n  []\n  */\nconst evenDigits = (x) => {\n  let result = []\n  let digit = 0\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      digit++\n    }\n    \n    if (digit === 2) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\nmodule.exports = evenDigits\n\n},{}],5:[function(require,module,exports){\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> oddDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> oddDigits([152, 323, 1422, 10])\n  []\n  */\nconst oddDigits = (x) => {\n  let result = []\n  let digit = 0\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      digit++\n    }\n    \n    if (digit === 1) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\nmodule.exports = oddDigits\n\n},{}],6:[function(require,module,exports){\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 3. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf3([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> multipleOf3([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf3 = (x) => {\n  let result = []\n  let digit = 0\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 3 === 0) {\n      digit++\n    }\n    \n    if (digit === 3) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\nmodule.exports = multipleOf3\n\n},{}],7:[function(require,module,exports){\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 2. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf2([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> multipleOf2([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf2 = (x) => {\n  let result = []\n  let digit = 0\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2 === 0) {\n      digit++\n    }\n    \n    if (digit === 2) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\nmodule.exports = multipleOf2\n\n},{}],8:[function(require,module,exports){\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 1. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf1([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> multipleOf1([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf1 = (x) => {\n  let result = []\n  let digit = 0\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 1 === 0) {\n      digit++\n    }\n    \n    if (digit === 1) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\nmodule.exports = multipleOf1\n\n},{}],9:[function(require,module,exports){\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 0. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf0([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> multipleOf0([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf0 = (x) => {\n  let result = []\n  let digit = 0\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 0 === 0) {\n      digit++\n    }\n    \n    if (digit === 0) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\nmodule.exports = multipleOf0\n\n},{}],10:[function(require,module,exports){\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of -1. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf-1([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> multipleOf-1([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf-1 = (x) => {\n  let result = []\n  let digit = 0\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 1 === 0) {\n      digit++\n    }\n    \n    if (digit === -1) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\nmodule.exports = multipleOf-1\n\n},{}],11:[function(require,module,exports){\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 1. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf1([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> multipleOf1([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf1 = (x) => {\n  let result = []\n  let digit = 0\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 1 === 0) {\n      digit++\n    }\n    \n    if (digit === 1) {\n      result.push(digit)\n      digit = 0\n    }\n  }\n  \n  return result\n}\n\nmodule.exports = multipleOf1\n\n},{}],12:[function(require,module,exports){\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of -1. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf-1([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> multipleOf-1([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf-1 = (x) => {\n  let result = []\n  let digit = 0\n  \n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 1 === 0) {\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let sortedArr = []\n  let reversedArr = []\n  let sortedArrLen = arr.length\n  let reversedArrLen = sortedArrLen - 1\n  \n  for(let i = 0; i < sortedArrLen; i++){\n    sortedArr.push(arr[i])\n  }\n  \n  for(let i = sortedArrLen - 1; i >= 0; i--){\n    reversedArr.push(sortedArr[i])\n  }\n  \n  for(let i = 0; i < reversedArrLen; i++){\n    reversedArr[i] = reversedArr[i].toString().replace(/\\d/g, function(digit){\n      return sortedArr[digit]\n    })\n  }\n  \n  return reversedArr.reverse()\n}\n\n/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byName = (arr) => {\n  let sortedArr = []\n  let reversedArr = []\n  let sortedArrLen = arr.length\n  let reversedArrLen = sortedArrLen - 1\n  \n  for(let i = 0; i < sortedArrLen; i++){\n    sortedArr.push(arr[i])\n  }\n  \n  for(let i = sortedArrLen - 1; i >= 0; i--){\n    reversedArr.push(sortedArr[i])\n  }\n  \n  for(let i = 0; i < reversedArrLen; i++){\n    reversedArr[i] = reversedArr[i].toString().replace(/\\d/g, function(digit){\n      return sortedArr[digit]\n    })\n  }\n  \n  return reversedArr.reverse()\n}\n\n/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameAndLength = (arr) => {\n  let sortedArr = []\n  let reversedArr = []\n  let sortedArrLen = arr.length\n  let reversedArrLen = sortedArrLen - 1\n  \n  for(let i = 0; i < sortedArrLen; i++){\n    sortedArr.push(arr[i])\n  }\n  \n  for(let i = sortedArrLen - 1; i >= 0; i--){\n    reversedArr.push(sortedArr[i])\n  }\n  \n  for(let i = 0; i < reversedArrLen; i++){\n    reversedArr[i] = reversedArr[i].toString().replace(/\\d/g, function(digit){\n      return sortedArr[digit]\n    })\n  }\n  \n  return reversedArr.reverse()\n}\n\n/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameAndLengthAndName = (arr) => {\n  let sortedArr = []\n  let reversedArr = []\n  let sortedArrLen = arr.length\n  let reversedArrLen = sortedArrLen - 1\n  \n  for(let i = 0; i < sortedArrLen; i++){\n    sortedArr.push(arr[i])\n  }\n  \n  for(let i = sortedArrLen - 1; i >= 0; i--){\n    reversedArr.push(sortedArr[i])\n  }\n  \n  for(let i = 0; i < reversedArrLen; i++){\n    reversedArr[i] = reversedArr[i].toString().replace(/\\d/g, function(digit){\n      return sortedArr[digit]\n    })\n  }\n  \n  return reversedArr.reverse()\n}\n\n/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that took two parameters: \n   a number n and an array. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should return an array with n elements. \n   the elements of an array are sorted ascending. \n   the function should ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i - 1);\n  let evenPalindromeCount = 0;\n  let oddPalindromeCount = 0;\n  for (let i = n; i >= 1; i--) {\n    if (evenPalindromes.includes(i)) {\n      evenPalindromeCount++;\n    }\n    if (oddPalindromes.includes(i)) {\n      oddPalindromeCount++;\n    }\n  }\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(2, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (2, 3)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i - 1);\n  let evenPalindromeCount = 0;\n  let oddPalindromeCount = 0;\n  for (let i = 2; i <= n; i++) {\n    if (evenPalindromes.includes(i)) {\n      evenPalindromeCount++;\n    }\n    if (oddPalindromes.includes(i)) {\n      oddPalindromeCount++;\n    }\n  }\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(3, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (3, 4)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i - 1);\n  let evenPalindromeCount = 0;\n  let oddPalindromeCount = 0;\n  for (let i = 3; i <= n; i++) {\n    if (evenPalindromes.includes(i)) {\n      evenPalindromeCount++;\n    }\n    if (oddPalindromes.includes(i)) {\n      oddPalindromeCount++;\n    }\n  }\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(4, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (4, 5)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i - 1);\n  let evenPalindromeCount = 0;\n  let oddPalindromeCount = 0;\n  for (let i = 4; i <= n; i++) {\n    if (evenPalindromes.includes(i)) {\n      evenPalindromeCount++;\n    }\n    if (oddPalindromes.includes(i)) {\n      oddPalindromeCount++;\n    }\n  }\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(5, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (5, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i + 1);\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i - 1);\n  let evenPalindromeCount = 0;\n  let oddPalindromeCount = 0;\n  for (let i = 5; i <= n; i++) {\n    if (evenPalindromes.includes(i)) {\n      evenPalindromeCount++;\n    }\n    if (oddPalindromes.includes(i)) {\n      oddPalindromeCount++;\n    }\n  }\n  return [evenPalindromeCount, oddPalindromeCount];\n};\n\n/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(6, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countZeros which took an array of integers and returns \n   the number of elements which had a sum of digits== 0\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 2\n  */\nconst countZeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEvens which took an array of integers and returns \n   the number of elements which had a sum of digits== 2\n  >>> countEvens([]) == 0\n  >>> countEvens([-1, 11, -11]) == 1\n  >>> countEvens([1, 1, 2]) == 2\n  */\nconst countEvens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOdds which took an array of integers and returns \n   the number of elements which had a sum of digits== 1\n  >>> countOdds([]) == 0\n  >>> countOdds([-1, 11, -11]) == 1\n  >>> countOdds([1, 1, 2]) == 2\n  */\nconst countOdds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countDivisibles which took an array of integers and returns \n   the number of elements which had a sum of digits== 1\n  >>> countDivisibles([]) == 0\n  >>> countDivisibles([-1, 11, -11]) == 1\n  >>> countDivisibles([1, 1, 2]) == 2\n  */\nconst countDivisibles = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiples which took an array of integers and returns \n   the number of elements which had a sum of digits== 2\n  >>> countMultiples([]) == 0\n  >>> countMultiples([-1, 11, -11]) == 1\n  >>> countMultiples([1, 1, 2]) == 2\n  */\nconst countMultiples = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesDivisible which took an array of integers and returns \n   the number of elements which had a sum of digits== 1\n  >>> countMultiplesDivisible([-1, 11, -11]) == 1\n  >>> countMultiplesDivisible([1, 1, 2]) == 2\n  */\nconst countMultiplesDivisible = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesDivisibleAndEven which took an array of integers and returns \n   the number of elements which had a sum of digits== 2\n  >>> countMultiplesDivisibleAndEven([-1, 11, -11]) == 1\n  >>> countMultiplesDivisibleAndEven([1, 1, 2]) == 2\n  */\nconst countMultiplesDivisibleAndEven = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1 && arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesEvenAndDivisible which took an array of integers and returns \n   the number of elements which had a sum of digits== 1\n  >>> countMultiplesEvenAndDivisible([-1, 11, -11]) == 1\n  >>> countMultiplesEvenAndDivisible([1, 1, 2]) == 2\n  */\nconst countMultiplesEvenAndDivisible = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1 && arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesDivisibleAndOdd which took an array of integers and returns \n   the number of elements which had a sum of digits== 2\n  >>> countMultiplesDivisibleAndOdd([-1, 11, -11]) == 1\n  >>> countMultiplesDivisibleAndOdd([1, 1, 2]) == 2\n  */\nconst countMultiplesDivisibleAndOdd = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1 && arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesOddAndDivisible which took an array of integers and returns \n   the number of elements which had a sum of digits== 1\n  >>> countMultiplesOddAndDivisible([-1, 11, -11]) == 1\n  >>> countMultiplesOddAndDivisible([1, 1, 2]) == 2\n  */\nconst countMultiplesOddAndDivisible = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1 && arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesEvenAndOdd which took an array of integers and returns \n   the number of elements which had a sum of digits== 2\n  >>> countMultiplesEvenAndOdd([-1, 11, -11]) == 1\n  >>> countMultiplesEvenAndOdd([1, 1, 2]) == 2\n  */\nconst countMultiplesEvenAndOdd = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1 && arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesOddAndEven which took an array of integers and returns \n   the number of elements which had a sum of digits== 1\n  >>> countMultiplesOddAndEven([-1, 11, -11]) == 1\n  >>> countMultiplesOddAndEven([1, 1, 2]) == 2\n  */\nconst countMultiplesOddAndEven = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1 && arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesEvenAndOdd which took an array of integers and returns \n   the number of elements which had a sum of digits== 1\n  >>> countMultiplesEvenAndOdd([-1, 11, -11]) == 1\n  >>> countMultiplesEvenAndOdd([1, 1, 2]) == 2\n  */\nconst countMultiplesEvenAndOdd = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 1 && arr[i] % 2!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countMultiplesDivisibleAndEven which took an array of integers and returns \n   the number of elements which had a sum of digits== 2\n  >>> countMultiplesDivisibleAndEven([-1, 11, -11]) == 1\n  >>> countMultiplesDivisibleAndEven([1, 1, 2]) == 2\n  */\nconst countMultiplesDivisibleAndEven = (arr) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n  let moved = 0;\n  while (left <= right) {\n    moved = arr[left] + arr[right];\n    if (moved > arr[right]) {\n      right = left - 1;\n    } else {\n      left = right + 1;\n    }\n  }\n  return left === right;\n};\n\n/*\n  moveTwoBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveTwoBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveTwoBalls = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n  let moved = 0;\n  while (left <= right) {\n    moved = arr[left] + arr[right];\n    if (moved > arr[right]) {\n      right = left - 1;\n    } else {\n      left = right + 1;\n    }\n  }\n  return left === right;\n};\n\n/*\n  moveThreeBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 3 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveThreeBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveThreeBalls = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n  let moved = 0;\n  while (left <= right) {\n    moved = arr[left] + arr[right];\n    if (moved > arr[right]) {\n      right = left - 1;\n    } else {\n      left = right + 1;\n    }\n  }\n  return left === right;\n};\n\n/*\n  moveFourBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 4 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveFourBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveFourBalls = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n  let moved = 0;\n  while (left <= right) {\n    moved = arr[left] + arr[right];\n    if (moved > arr[right]) {\n      right = left - 1;\n    } else {\n      left = right + 1;\n    }\n  }\n  return left === right;\n};\n\n/*\n  moveFiveBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 5 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveFiveBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveFiveBalls = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n  let moved = 0;\n  while (left <= right) {\n    moved = arr[left] + arr[right];\n    if (moved > arr[right]) {\n      right = left - 1;\n    } else {\n      left = right + 1;\n    }\n  }\n  return left === right;\n};\n\n/*\n  moveSixBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 6 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveSixBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveSixBalls = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n  let moved = 0;\n  while (left <= right) {\n    moved = arr[left] + arr[right];\n    if (moved > arr[right]) {\n      right = left - 1;\n    } else {\n      left = right + 1;\n    }\n  }\n  return left === right;\n};\n\n/*\n  moveSevenBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 7 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveSevenBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveSevenBalls = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n  let moved = 0;\n  while (left <= right) {\n    moved = arr[left] + arr[right];\n    if (moved > arr[right]) {\n      right = left - 1;\n    } else {\n      left = right + 1;\n    }\n  }\n  return left === right;\n};\n\n/*\n  moveEightBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 8 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveEightBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveEightBalls = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n  let moved = 0;\n  while (left <= right) {\n    moved = arr[left] + arr[right];\n    if (moved > arr[right]) {\n      right = left - 1;\n    } else {\n      left = right + 1;\n    }\n  }\n  return left === right;\n};\n\n/*\n  moveNineBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 9 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveNineBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveNineBalls = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n  let moved = 0;\n  while (left <= right) {\n    move", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i) + '';\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a number.\n  >>> stringXor('010', '110')\n  10\n  */\nconst stringXorNum = (a) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i);\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a boolean.\n  >>> stringXor('010', '110')\n  true\n  */\nconst stringXorBool = (a) => {\n  let result = false;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorString = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + '';\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a number.\n  >>> stringXor('010', '110')\n  10\n  */\nconst stringXorNumString = (a) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i);\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a boolean.\n  >>> stringXor('010', '110')\n  true\n  */\nconst stringXorBoolString = (a) => {\n  let result = false;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorStringNum = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + '';\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a number.\n  >>> stringXor('010', '110')\n  10\n  */\nconst stringXorNumStringBool = (a) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a boolean.\n  >>> stringXor('010', '110')\n  true\n  */\nconst stringXorBoolStringNum = (a) => {\n  let result = false;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorStringNumBool = (a) => {\n  let result = false;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a number.\n  >>> stringXor('010', '110')\n  10\n  */\nconst stringXorBoolStringNumBool = (a) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorBoolStringNumString = (a) => {\n  let result = false;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a number.\n  >>> stringXor('010', '110')\n  10\n  */\nconst stringXorBoolStringNumStringBool = (a) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorBoolStringNumStringNum = (a) => {\n  let result = false;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a number.\n  >>> stringXor('010', '110')\n  10\n  */\nconst stringXorBoolStringNumStringNumBool = (a) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorBoolStringNumStringNumBoolString = (a) => {\n  let result = false;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a number.\n  >>> stringXor('010', '110')\n  10\n  */\nconst stringXorBoolStringNumStringNumBoolStringNum = (a) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorBoolStringNumStringNumBoolStringNumBool = (a) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXorBoolStringNumStringNumBoolStringNumBoolStringNum = (a) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * Math.pow(10, i) > 0;\n  }\n  return result;\n};\n\n/* Input was a string. \n   Performed binary XOR on it and return result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringX", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length < lst2.length) {\n    console.log(\"The lists cannot be empty\");\n  } else if (lst1.length === lst2.length) {\n    console.log(\"The lists are the same length\");\n  } else {\n    console.log(\"The lists are different\");\n  }\n  if (lst1.length > lst2.length) {\n    console.log(\"The lists cannot be longer\");\n  } else if (lst1.length < lst2.length) {\n    console.log(\"The lists are the same length\");\n  } else {\n    console.log(\"The lists are different\");\n  }\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i] % 2!== lst2[i] % 2) {\n        console.log(\"The lists cannot be even\");\n      } else {\n        console.log(\"The lists are even\");\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes in two lists of numbers and returns \n  whether they are the same length and are both non-empty. \n  For example:\n  sameLength([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  sameLength([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst sameLength = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length < lst2.length) {\n    console.log(\"The lists cannot be empty\");\n  } else if (lst1.length === lst2.length) {\n    console.log(\"The lists are the same length\");\n  } else {\n    console.log(\"The lists are different\");\n  }\n  if (lst1.length > lst2.length) {\n    console.log(\"The lists cannot be longer\");\n  } else if (lst1.length < lst2.length) {\n    console.log(\"The lists are the same length\");\n  } else {\n    console.log(\"The lists are different\");\n  }\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i]!== lst2[i]) {\n        console.log(\"The lists cannot be equal\");\n      } else {\n        console.log(\"The lists are equal\");\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes in two lists of numbers and returns \n  whether they are the same length and are both non-empty. \n  For example:\n  sameLength([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  sameLength([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst sameLength = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length < lst2.length) {\n    console.log(\"The lists cannot be empty\");\n  } else if (lst1.length === lst2.length) {\n    console.log(\"The lists are the same length\");\n  } else {\n    console.log(\"The lists are different\");\n  }\n  if (lst1.length > lst2.length) {\n    console.log(\"The lists cannot be longer\");\n  } else if (lst1.length < lst2.length) {\n    console.log(\"The lists are the same length\");\n  } else {\n    console.log(\"The lists are different\");\n  }\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i]!== lst2[i]) {\n        console.log(\"The lists cannot be equal\");\n      } else {\n        console.log(\"The lists are equal\");\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes in two lists of numbers and returns \n  whether they are the same length and are both non-empty. \n  For example:\n  sameLength([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  sameLength([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst sameLength = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length < lst2.length) {\n    console.log(\"The lists cannot be empty\");\n  } else if (lst1.length === lst2.length) {\n    console.log(\"The lists are the same length\");\n  } else {\n    console.log(\"The lists are different\");\n  }\n  if (lst1.length > lst2.length) {\n    console.log(\"The lists cannot be longer\");\n  } else if (lst1.length < lst2.length) {\n    console.log(\"The lists are the same length\");\n  } else {\n    console.log(\"The lists are different\");\n  }\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i]!== lst2[i]) {\n        console.log(\"The lists cannot be equal\");\n      } else {\n        console.log(\"The lists are equal\");\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes in two lists of numbers and returns \n  whether they are the same length and are both non-empty. \n  For example:\n  sameLength([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  sameLength([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst sameLength = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length < lst2.length) {\n    console.log(\"The lists cannot be empty\");\n  } else if (lst1.length === lst2.length) {\n    console.log(\"The lists are the same length\");\n  } else {\n    console.log(\"The lists are different\");\n  }\n  if (lst1.length > lst2.length) {\n    console.log(\"The lists cannot be longer\");\n  } else if (lst1.length < lst2.length) {\n    console.log(\"The lists are the same length\");\n  } else {\n    console.log(\"The lists are different\");\n  }\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i]!== lst2[i]) {\n        console.log(\"The lists cannot be equal\");\n      } else {\n        console.log(\"The lists are equal\");\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes in two lists of numbers and returns \n  whether they are the same length and are both non-empty. \n  For example:\n  sameLength([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  sameLength([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst sameLength = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length < lst2.length) {\n    console.log(\"The lists cannot be empty\");\n  } else if (lst1.length === lst2.length) {\n    console.log(\"The lists are the same length\");\n  } else {\n    console.log(\"The lists are different\");\n  }\n  if (lst1.length > lst2.length) {\n    console.log(\"The lists cannot be longer\");\n  } else if (lst1.length < lst2.length) {\n    console.log(\"The lists are the same length\");\n  } else {\n    console.log(\"The lists are different\");\n  }\n  if (lst1.length === lst2.length) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i]!== lst2[i]) {\n        console.log(\"The lists cannot be equal\");\n      } else {\n        console.log(\"The lists are equal\");\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that takes in two lists of numbers and returns \n  whether they are the same length and are both non-empty. \n  For example:\n  sameLength([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  sameLength([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst count = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrences = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrencesWith = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrencesWithOccurrences = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrencesWithOccurrencesWith = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrencesWithOccurrencesWithOccurrences = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrencesWithOccurrencesWithOccurrencesWith = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst countOccurrencesWithOccurrencesWithOccurrencesWith = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurren", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let reverse = '';\n  let check = '';\n  let checkReverse = '';\n  let checkCheck = '';\n  let checkCheckReverse = '';\n  let checkCheckCheck = '';\n  let checkCheckCheckReverse = '';\n  let checkCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckCheckReverse = '';\n  let checkCheck", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        oddCount++;\n      }\n    }\n    result.push(oddCount);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        evenCount++;\n      }\n    }\n    result.push(evenCount);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        oddCount++;\n      }\n      if (lst[i][j].match(/\\d/)) {\n        evenCount++;\n      }\n    }\n    result.push(oddCount);\n    result.push(evenCount);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddOddEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        oddCount++;\n      }\n      if (lst[i][j].match(/\\d/)) {\n        evenCount++;\n      }\n    }\n    result.push(oddCount);\n    result.push(evenCount);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenOddCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        oddCount++;\n      }\n      if (lst[i][j].match(/\\d/)) {\n        evenCount++;\n      }\n    }\n    result.push(oddCount);\n    result.push(evenCount);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddOddEvenOddCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        oddCount++;\n      }\n      if (lst[i][j].match(/\\d/)) {\n        evenCount++;\n      }\n    }\n    result.push(oddCount);\n    result.push(evenCount);\n  }\n  return result;\n};\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenOddOddEvenCount = (lst) => {\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    let oddCount = 0;\n    let evenCount = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j].match(/\\d/)) {\n        oddCount++;\n      }\n      if (lst[i][j].match(/\\d/)) {\n        evenCount++;\n      }\n    }\n    result.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = -Infinity;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([3, 1, 2, 1, 2]) == 3\n  minSubArrayCount([-3, -1, 1, 2, 2]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n      if (count < minCount) {\n        minCount = count;\n      }\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([3, 1, 2, 1, 2]) == 3\n  maxSubArrayCount([-3, -1, 1, 2, 2]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      count++;\n      if (count > maxCount) {\n        maxCount = count;\n      }\n    }\n  }\n  return maxCount;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([3, 1, 2, 1, 2]) == 3\n  minSubArrayCount([-3, -1, 1, 2, 2]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n      if (count > minCount) {\n        minCount = count;\n      }\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([3, 1, 2, 1, 2]) == 3\n  maxSubArrayCount([-3, -1, 1, 2, 2]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      count++;\n      if (count > maxCount) {\n        maxCount = count;\n      }\n    }\n  }\n  return maxCount;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([3, 1, 2, 1, 2]) == 3\n  minSubArrayCount([-3, -1, 1, 2, 2]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n      if (count > minCount) {\n        minCount = count;\n      }\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([3, 1, 2, 1, 2]) == 3\n  maxSubArrayCount([-3, -1, 1, 2, 2]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      count++;\n      if (count > maxCount) {\n        maxCount = count;\n      }\n    }\n  }\n  return maxCount;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([3, 1, 2, 1, 2]) == 3\n  minSubArrayCount([-3, -1, 1, 2, 2]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n      if (count > minCount) {\n        minCount = count;\n      }\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([3, 1, 2, 1, 2]) == 3\n  maxSubArrayCount([-3, -1, 1, 2, 2]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      count++;\n      if (count > maxCount) {\n        maxCount = count;\n      }\n    }\n  }\n  return maxCount;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([3, 1, 2, 1, 2]) == 3\n  minSubArrayCount([-3, -1, 1, 2, 2]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n      if (count > minCount) {\n        minCount = count;\n      }\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([3, 1, 2, 1, 2]) == 3\n  maxSubArrayCount([-3, -1, 1, 2, 2]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      count++;\n      if (count > maxCount) {\n        maxCount = count;\n      }\n    }\n  }\n  return maxCount;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([3, 1, 2, 1, 2]) == 3\n  minSubArrayCount([-3, -1, 1, 2, 2]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 0) {\n      count++;\n      if (count > minCount) {\n        minCount = count;\n      }\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([3, 1, 2, 1, 2]) == 3\n  maxSubArrayCount([-3, -1, 1, 2, 2]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      count++;\n      if (count > maxCount) {\n        maxCount = count;\n      }\n    }\n  }\n  return maxCount;\n};\n\n/*\n  Given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count * Math.pow(capacity, 2);\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return the number of times you need to lower the buckets.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * \n * Output: 6\n * \n * Explanation:\n * \n * You needed to lower the buckets to make them empty.\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * \n * Output: 5\n * \n * Explanation:\n * \n * You needed to lower the buckets to make them empty.\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * \n * Output: 0\n * \n * Explanation:\n * \n * You needed to lower the buckets to make them empty.\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n * \n */\nconst maxLower = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count * Math.pow(capacity, 2);\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return the number of times you need to lower the buckets.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * \n * Output: 6\n * \n * Explanation:\n * \n * You needed to lower the buckets to make them empty.\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * \n * Output: 5\n * \n * Explanation:\n * \n * You needed to lower the buckets to make them empty.\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * \n * Output: 0\n * \n * Explanation:\n * \n * You needed to lower the buckets to make them empty.\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n * \n */\nconst maxLowerWithBucket = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count * Math.pow(capacity, 2);\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return the number of times you need to lower the buckets.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * \n * Output: 6\n * \n * Explanation:\n * \n * You needed to lower the buckets to make them empty.\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * \n * Output: 5\n * \n * Explanation:\n * \n * You needed to lower the buckets to make them empty.\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * \n * Output: 0\n * \n * Explanation:\n * \n * You needed to lower the buckets to make them empty.\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n * \n */\nconst maxLowerWithBucketWithBucket = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count * Math.pow(capacity, 2);\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return the number of times you need to lower the buckets.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * bucket_capacity : 1\n * \n * Output: 6\n * \n * Explanation:\n * \n * You needed to lower the buckets to make them empty.\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * bucket_capacity : 2\n * \n * Output: 5\n * \n * Explanation:\n * \n * You needed to lower the buckets to make them empty.\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * bucket_capacity : 5\n * \n * Output: 0\n * \n * Explanation:\n * \n * You needed to lower the buckets to make them empty.\n * \n * Constraints:\n * \n * 1 <= grid.length <= 10^2\n * 1 <= grid[:,1].length <= 10^2\n * grid[i][j] -> 0 | 1\n * 1 <= capacity <= 10\n * \n */\nconst maxLowerWithBucketWithBucketWithBucket = (grid, capacity) => {\n  const n = grid.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        count += 1;\n      }\n    }\n  }\n  return count * Math.pow(capacity, 2);\n};\n\n/**\n * Given a rectangular grid of wells and a bucket capacity, \n * return the number of times you need to lower the buckets.\n * \n * Example 1:", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sortedArr.push(arr[i]);\n    }\n  }\n  sortedArr.sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sortedArr.push(arr[i]);\n    }\n  }\n  sortedArr.sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sortedArr.push(arr[i]);\n    }\n  }\n  sortedArr.sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sortedArr.push(arr[i]);\n    }\n  }\n  sortedArr.sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sortedArr.push(arr[i]);\n    }\n  }\n  sortedArr.sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sortedArr.push(arr[i]);\n    }\n  }\n  sortedArr.sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sortedArr.push(arr[i]);\n    }\n  }\n  sortedArr.sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sortedArr.push(arr[i]);\n    }\n  }\n  sortedArr.sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sortedArr.push(arr[i]);\n    }\n  }\n  sortedArr.sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 1) {\n      sortedArr.push(arr[i]);\n    }\n  }\n  sortedArr.sort((a, b) => a - b);\n  return sortedArr;\n};\n\n/*\n  In this K", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let words = s.split(\" \");\n  let word = \"\";\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const vowelsLength = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsLengthIndex = 0;\n  let vowelsIndex2 = 0;\n  let vowelsLengthIndex2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsLengthIndex3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsLengthIndex4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsLengthIndex5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsLengthIndex6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsLengthIndex7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsLengthIndex8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsLengthIndex9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsLengthIndex10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsLengthIndex11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsLengthIndex12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsLengthIndex13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsLengthIndex14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsLengthIndex15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsLengthIndex16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsLengthIndex17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsLengthIndex18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsLengthIndex19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsLengthIndex20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsLengthIndex21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsLengthIndex22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsLengthIndex23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsLengthIndex24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsLengthIndex25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsLengthIndex26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsLengthIndex27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsLengthIndex28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsLengthIndex29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsLengthIndex30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsLengthIndex31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsLengthIndex32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsLengthIndex33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsLengthIndex34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsLengthIndex35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsLengthIndex36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsLengthIndex37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsLengthIndex38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsLengthIndex39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsLengthIndex40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsLengthIndex41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsLengthIndex42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsLengthIndex43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsLengthIndex44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsLengthIndex45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsLengthIndex46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsLengthIndex47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsLengthIndex48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsLengthIndex49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsLengthIndex50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsLengthIndex51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsLengthIndex52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsLengthIndex53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsLengthIndex54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsLengthIndex55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsLengthIndex56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsLengthIndex57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsLengthIndex58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsLengthIndex59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsLengthIndex60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsLengthIndex61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsLengthIndex62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsLengthIndex63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsLengthIndex64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsLengthIndex65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsLengthIndex66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsLengthIndex67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsLengthIndex68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsLengthIndex69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsLengthIndex70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsLengthIndex71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsLengthIndex72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsLengthIndex73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsLengthIndex74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsLengthIndex75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsLengthIndex76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsLengthIndex77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsLengthIndex78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsLengthIndex79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsLengthIndex80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsLengthIndex81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsLengthIndex82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsLengthIndex83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsLengthIndex84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsLengthIndex85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsLengthIndex86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsLengthIndex87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsLengthIndex88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsLengthIndex89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsLengthIndex90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsLengthIndex91 = 0;\n  let vowelsIndex92", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = 'No';\n  let count = 0;\n  let openParens = 0;\n  let closeParens = 0;\n  let openParensCount = 0;\n  let closeParensCount = 0;\n  \n  lst.forEach((item, index) => {\n    if (item === '(') {\n      openParensCount++;\n    } else if (item === ')') {\n      closeParensCount++;\n    } else if (item === '(' || item === ')') {\n      if (openParensCount === closeParensCount) {\n        openParensCount = 0;\n        closeParensCount = 0;\n        openParensCount++;\n        closeParensCount++;\n        count++;\n      }\n    }\n  });\n  \n  if (count === 0) return 'No';\n  \n  if (count === 1) return 'Yes';\n  \n  if (count === 2) return 'Yes';\n  \n  if (count === 3) return 'Yes';\n  \n  if (count === 4) return 'Yes';\n  \n  if (count === 5) return 'Yes';\n  \n  if (count === 6) return 'Yes';\n  \n  if (count === 7) return 'Yes';\n  \n  if (count === 8) return 'Yes';\n  \n  if (count === 9) return 'Yes';\n  \n  if (count === 10) return 'Yes';\n  \n  if (count === 11) return 'Yes';\n  \n  if (count === 12) return 'Yes';\n  \n  if (count === 13) return 'Yes';\n  \n  if (count === 14) return 'Yes';\n  \n  if (count === 15) return 'Yes';\n  \n  if (count === 16) return 'Yes';\n  \n  if (count === 17) return 'Yes';\n  \n  if (count === 18) return 'Yes';\n  \n  if (count === 19) return 'Yes';\n  \n  if (count === 20) return 'Yes';\n  \n  if (count === 21) return 'Yes';\n  \n  if (count === 22) return 'Yes';\n  \n  if (count === 23) return 'Yes';\n  \n  if (count === 24) return 'Yes';\n  \n  if (count === 25) return 'Yes';\n  \n  if (count === 26) return 'Yes';\n  \n  if (count === 27) return 'Yes';\n  \n  if (count === 28) return 'Yes';\n  \n  if (count === 29) return 'Yes';\n  \n  if (count === 30) return 'Yes';\n  \n  if (count === 31) return 'Yes';\n  \n  if (count === 32) return 'Yes';\n  \n  if (count === 33) return 'Yes';\n  \n  if (count === 34) return 'Yes';\n  \n  if (count === 35) return 'Yes';\n  \n  if (count === 36) return 'Yes';\n  \n  if (count === 37) return 'Yes';\n  \n  if (count === 38) return 'Yes';\n  \n  if (count === 39) return 'Yes';\n  \n  if (count === 40) return 'Yes';\n  \n  if (count === 41) return 'Yes';\n  \n  if (count === 42) return 'Yes';\n  \n  if (count === 43) return 'Yes';\n  \n  if (count === 44) return 'Yes';\n  \n  if (count === 45) return 'Yes';\n  \n  if (count === 46) return 'Yes';\n  \n  if (count === 47) return 'Yes';\n  \n  if (count === 48) return 'Yes';\n  \n  if (count === 49) return 'Yes';\n  \n  if (count === 50) return 'Yes';\n  \n  if (count === 51) return 'Yes';\n  \n  if (count === 52) return 'Yes';\n  \n  if (count === 53) return 'Yes';\n  \n  if (count === 54) return 'Yes';\n  \n  if (count === 55) return 'Yes';\n  \n  if (count === 56) return 'Yes';\n  \n  if (count === 57) return 'Yes';\n  \n  if (count === 58) return 'Yes';\n  \n  if (count === 59) return 'Yes';\n  \n  if (count === 60) return 'Yes';\n  \n  if (count === 61) return 'Yes';\n  \n  if (count === 62) return 'Yes';\n  \n  if (count === 63) return 'Yes';\n  \n  if (count === 64) return 'Yes';\n  \n  if (count === 65) return 'Yes';\n  \n  if (count === 66) return 'Yes';\n  \n  if (count === 67) return 'Yes';\n  \n  if (count === 68) return 'Yes';\n  \n  if (count === 69) return 'Yes';\n  \n  if (count === 70) return 'Yes';\n  \n  if (count === 71) return 'Yes';\n  \n  if (count === 72) return 'Yes';\n  \n  if (count === 73) return 'Yes';\n  \n  if (count === 74) return 'Yes';\n  \n  if (count === 75) return 'Yes';\n  \n  if (count === 76) return 'Yes';\n  \n  if (count === 77) return 'Yes';\n  \n  if (count === 78) return 'Yes';\n  \n  if (count === 79) return 'Yes';\n  \n  if (count === 80) return 'Yes';\n  \n  if (count === 81) return 'Yes';\n  \n  if (count === 82) return 'Yes';\n  \n  if (count === 83) return 'Yes';\n  \n  if (count === 84) return 'Yes';\n  \n  if (count === 85) return 'Yes';\n  \n  if (count === 86) return 'Yes';\n  \n  if (count === 87) return 'Yes';\n  \n  if (count === 88) return 'Yes';\n  \n  if (count === 89) return 'Yes';\n  \n  if (count === 90) return 'Yes';\n  \n  if (count === 91) return 'Yes';\n  \n  if (count === 92) return 'Yes';\n  \n  if (count === 93) return 'Yes';\n  \n  if (count === 94) return 'Yes';\n  \n  if (count === 95) return 'Yes';\n  \n  if (count === 96) return 'Yes';\n  \n  if (count === 97) return 'Yes';\n  \n  if (count === 98) return 'Yes';\n  \n  if (count === 99) return 'Yes';\n  \n  if (count === 100) return 'Yes';\n  \n  if (count === 101) return 'Yes';\n  \n  if (count === 102) return 'Yes';\n  \n  if (count === 103) return 'Yes';\n  \n  if (count === 104) return 'Yes';\n  \n  if (count === 105) return 'Yes';\n  \n  if (count === 106) return 'Yes';\n  \n  if (count === 107) return 'Yes';\n  \n  if (count === 108) return 'Yes';\n  \n  if (count === 109) return 'Yes';\n  \n  if (count === 110) return 'Yes';\n  \n  if (count === 111) return 'Yes';\n  \n  if (count === 112) return 'Yes';\n  \n  if (count === 113) return '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  let longestLength = 0\n  let longestString = ''\n\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longestLength) {\n      longestLength = strings[i].length\n      longestString = strings[i]\n    }\n  }\n\n  return longestString\n}\n\n/**\n * Given a string, return its reverse (ASCII) characters. Return an empty string if the\n * string was empty.\n * \n * >>> reverse('a')\n * 'bc'\n * >>> reverse('')\n * ''\n * >>> reverse('abc')\n * 'cba'\n */\nconst reverse = (string) => {\n  if (string === '') {\n    return ''\n  }\n\n  let reversedString = ''\n  let reversedChar = ''\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedChar = string.charAt(i)\n    reversedString += reversedChar\n  }\n\n  return reversedString\n}\n\n/**\n * Given a string, return its reverse (ASCII) characters. Return an empty string if the\n * string was empty.\n * \n * >>> reverse('a')\n * 'bc'\n * >>> reverse('')\n * ''\n * >>> reverse('abc')\n * 'cba'\n */\nconst reverseAll = (string) => {\n  if (string === '') {\n    return ''\n  }\n\n  let reversedString = ''\n  let reversedChar = ''\n\n  for (let i = 0; i < string.length; i++) {\n    reversedChar = string.charAt(i)\n    reversedString += reversedChar\n  }\n\n  return reversedString\n}\n\n/**\n * Given a string, return its reverse (ASCII) characters. Return an empty string if the\n * string was empty.\n * \n * >>> reverse('a')\n * 'bc'\n * >>> reverse('')\n * ''\n * >>> reverse('abc')\n * 'cba'\n */\nconst reverseAllReversed = (string) => {\n  if (string === '') {\n    return ''\n  }\n\n  let reversedString = ''\n  let reversedChar = ''\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedChar = string.charAt(i)\n    reversedString += reversedChar\n  }\n\n  return reversedString\n}\n\n/**\n * Given a string, return its reverse (ASCII) characters. Return an empty string if the\n * string was empty.\n * \n * >>> reverse('a')\n * 'bc'\n * >>> reverse('')\n * ''\n * >>> reverse('abc')\n * 'cba'\n */\nconst reverseAllReversedAll = (string) => {\n  if (string === '') {\n    return ''\n  }\n\n  let reversedString = ''\n  let reversedChar = ''\n\n  for (let i = 0; i < string.length; i++) {\n    reversedChar = string.charAt(i)\n    reversedString += reversedChar\n  }\n\n  return reversedString\n}\n\n/**\n * Given a string, return its reverse (ASCII) characters. Return an empty string if the\n * string was empty.\n * \n * >>> reverse('a')\n * 'bc'\n * >>> reverse('')\n * ''\n * >>> reverse('abc')\n * 'cba'\n */\nconst reverseAllReversedAllReversed = (string) => {\n  if (string === '') {\n    return ''\n  }\n\n  let reversedString = ''\n  let reversedChar = ''\n\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversedChar = string.charAt(i)\n    reversedString += reversedChar\n  }\n\n  return reversedString\n}\n\n/**\n * Given a string, return its reverse (ASCII) characters. Return an empty string if the\n * string was empty.\n * \n * >>> reverse('a')\n * 'bc'\n * >>> reverse('')\n * ''\n * >>> reverse('abc')\n * 'cba'\n */\nconst reverseAllReversedAllReversedAll = (string) => {\n  if (string === '') {\n    return ''\n  }\n\n  let reversedString = ''\n  let reversedChar = ''\n\n  for (let i = 0; i < string.length; i++) {\n    reversedChar = string.charAt(i)\n    reversedString += reversedChar\n  }\n\n  return reversedString\n}\n\n/**\n * Given a string, return its reverse (ASCII) characters. Return an empty string if the\n * string was empty.\n * \n * >>> reverse('a')\n * 'bc'\n * >>> reverse('')\n * ''\n * >>> reverse('abc')\n * 'cba'\n */\nconst reverseAllReversedAllReversedAllReversed = (string) => {\n  if (string === '') {\n    return ''\n  }\n\n  let reversedString = ''\n  let reversedChar = ''\n\n  for (let i = 0; i < string.length; i++) {\n    reversedChar = string.charAt(i)\n    reversedString += reversedChar\n  }\n\n  return reversedString\n}\n\n/**\n * Given a string, return its reverse (ASCII) characters. Return an empty string if the\n * string was empty.\n * \n * >>> reverse('a')\n * 'bc'\n * >>> reverse('')\n * ''\n * >>> reverse('abc')\n * 'cba'\n */\nconst reverseAllReversedAllReversedAllReversedAll = (string) => {\n  if (string === '') {\n    return ''\n  }\n\n  let reversedString = ''\n  let reversedChar = ''\n\n  for (let i = 0; i < string.length; i++) {\n    reversedChar = string.charAt(i)\n    reversedString += reversedChar\n  }\n\n  return reversedString\n}\n\n/**\n * Given a string, return its reverse (ASCII) characters. Return an empty string if the\n * string was empty.\n * \n * >>> reverse('a')\n * 'bc'\n * >>> reverse('')\n * ''\n * >>> reverse('abc')\n * 'cba'\n */\nconst reverseAllReversedAllReversedAllReversedAllReversed = (string) => {\n  if (string === '') {\n    return ''\n  }\n\n  let reversedString = ''\n  let reversedChar = ''\n\n  for (let i = 0; i < string.length; i++) {\n    reversedChar = string.charAt(i)\n    reversedString += reversedChar\n  }\n\n  return reversedString\n}\n\n/**\n * Given a string, return its reverse (ASCII) characters. Return an empty string if the\n * string was empty.\n * \n * >>> reverse('a')\n * 'bc'\n * >>> reverse('')\n * ''\n * >>> reverse('abc')\n * 'cba'\n */\nconst reverseAllReversedAllReversedAllReversedAllReversedAll = (string) => {\n  if (string === '') {\n    return ''\n  }\n\n  let reversedString = ''\n  let reversedChar = ''\n\n  for (let i = 0; i < string.length; i++) {\n    reversedChar = string.charAt(i)\n    reversedString += reversedChar\n  }\n\n  return reversedString\n}\n\n/**\n * Given a string, return its reverse (ASCII) characters. Return an empty string if the\n * string was empty.\n * \n * >>> reverse('a')\n * 'bc'\n * >>> reverse('')\n * ''\n * >>> reverse('abc')\n * 'cba'\n */\nconst reverseAllReversedAllReversedAllReversedAllReversedAllReversed = (string) => {\n  if (string === '') {\n    return ''\n  }\n\n  let reversed", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k === 0) return arr;\n  const len = arr.length;\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    if (max < arr[i]) {\n      max = arr[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countPairs = function(head) {\n  if (!head) {\n    return 0;\n  }\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    count += 1;\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countPairsII = function(head) {\n  if (!head) {\n    return 0;\n  }\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    count += 1;\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countPairsIII = function(head) {\n  if (!head) {\n    return 0;\n  }\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    count += 1;\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countPairsIV = function(head) {\n  if (!head) {\n    return 0;\n  }\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    count += 1;\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countPairsV = function(head) {\n  if (!head) {\n    return 0;\n  }\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    count += 1;\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countPairsW = function(head) {\n  if (!head) {\n    return 0;\n  }\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    count += 1;\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countPairsX = function(head) {\n  if (!head) {\n    return 0;\n  }\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    count += 1;\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countPairsY = function(head) {\n  if (!head) {\n    return 0;\n  }\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    count += 1;\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countPairsZ = function(head) {\n  if (!head) {\n    return 0;\n  }\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    count += 1;\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countPairsAA = function(head) {\n  if (!head) {\n    return 0;\n  }\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    count += 1;\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countPairsAB = function(head) {\n  if (!head) {\n    return 0;\n  }\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    count += 1;\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countPairsAC = function(head) {\n  if (!head) {\n    return 0;\n  }\n  let count = 0;\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in odd positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((num) => {\n    if (num % 2!== 0) {\n      sum += num;\n    }\n  });\n  \n  return sum;\n};\n\n/*Given a non-empty list of integers, return the sum of all of the even elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % k === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n// Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most three digits from the first k elements of arr.\n\n// Example:\n\n// Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n// Output: 24 # sum of 31 + 5 + 7 + 8 + 9\n\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n// 3. 1 <= arr[i] <= 100\n// 4. 1 <= arr[i] <= 100\n// 5. 1 <= arr[i] <= 100\n// 6. 1 <= arr[i] <= 100\n// 7. 1 <= arr[i] <= 100\n// 8. 1 <= arr[i] <= 100\n// 9. 1 <= arr[i] <= 100\n// 10. 1 <= arr[i] <= 100\n// 11. 1 <= arr[i] <= 100\n// 12. 1 <= arr[i] <= 100\n// 13. 1 <= arr[i] <= 100\n// 14. 1 <= arr[i] <= 100\n// 15. 1 <= arr[i] <= 100\n// 16. 1 <= arr[i] <= 100\n// 17. 1 <= arr[i] <= 100\n// 18. 1 <= arr[i] <= 100\n// 19. 1 <= arr[i] <= 100\n// 20. 1 <= arr[i] <= 100\n// 21. 1 <= arr[i] <= 100\n// 22. 1 <= arr[i] <= 100\n// 23. 1 <= arr[i] <= 100\n// 24. 1 <= arr[i] <= 100\n// 25. 1 <= arr[i] <= 100\n// 26. 1 <= arr[i] <= 100\n// 27. 1 <= arr[i] <= 100\n// 28. 1 <= arr[i] <= 100\n// 29. 1 <= arr[i] <= 100\n// 30. 1 <= arr[i] <= 100\n// 31. 1 <= arr[i] <= 100\n// 32. 1 <= arr[i] <= 100\n// 33. 1 <= arr[i] <= 100\n// 34. 1 <= arr[i] <= 100\n// 35. 1 <= arr[i] <= 100\n// 36. 1 <= arr[i] <= 100\n// 37. 1 <= arr[i] <= 100\n// 38. 1 <= arr[i] <= 100\n// 39. 1 <= arr[i] <= 100\n// 40. 1 <= arr[i] <= 100\n// 41. 1 <= arr[i] <= 100\n// 42. 1 <= arr[i] <= 100\n// 43. 1 <= arr[i] <= 100\n// 44. 1 <= arr[i] <= 100\n// 45. 1 <= arr[i] <= 100\n// 46. 1 <= arr[i] <= 100\n// 47. 1 <= arr[i] <= 100\n// 48. 1 <= arr[i] <= 100\n// 49. 1 <= arr[i] <= 100\n// 50. 1 <= arr[i] <= 100\n// 51. 1 <= arr[i] <= 100\n// 52. 1 <= arr[i] <= 100\n// 53. 1 <= arr[i] <= 100\n// 54. 1 <= arr[i] <= 100\n// 55. 1 <= arr[i] <= 100\n// 56. 1 <= arr[i] <= 100\n// 57. 1 <= arr[i] <= 100\n// 58. 1 <= arr[i] <= 100\n// 59. 1 <= arr[i] <= 100\n// 60. 1 <= arr[i] <= 100\n// 61. 1 <= arr[i] <= 100\n// 62. 1 <= arr[i] <= 100\n// 63. 1 <= arr[i] <= 100\n// 64. 1 <= arr[i] <= 100\n// 65. 1 <= arr[i] <= 100\n// 66. 1 <= arr[i] <= 100\n// 67. 1 <= arr[i] <= 100\n// 68. 1 <= arr[i] <= 100\n// 69. 1 <= arr[i] <= 100\n// 70. 1 <= arr[i] <= 100\n// 71. 1 <= arr[i] <= 100\n// 72. 1 <= arr[i] <= 100\n// 73. 1 <= arr[i] <= 100\n// 74. 1 <= arr[i] <= 100\n// 75. 1 <= arr[i] <= 100\n// 76. 1 <= arr[i] <= 100\n// 77. 1 <= arr[i] <= 100\n// 78. 1 <= arr[i] <= 100\n// 79. 1 <= arr[i] <= 100\n// 80. 1 <= arr[i] <= 100\n// 81. 1 <= arr[i] <= 100\n// 82. 1 <= arr[i] <= 100\n// 83. 1 <= arr[i] <= 100\n// 84. 1 <= arr[i] <= 100\n// 85. 1 <= arr[i] <= 100\n// 86. 1 <= arr[i] <= 100\n// 87. 1 <= arr[i] <= 100\n// 88. 1 <= arr[i] <= 100\n// 89. 1 <= arr[i] <= 100\n// 90. 1 <= arr[i] <= 100\n// 91. 1 <= arr[i] <= 100\n// 92. 1 <= arr[i] <= 100\n// 93. 1 <= arr[i] <= 100\n// 94. 1 <= arr[i] <= 100\n// 95. 1 <= arr[i] <= 100\n// 96. 1 <= arr[i] <= 100\n// 97. 1 <= arr[i] <= 100\n// 98. 1 <= arr[i] <= 100\n// 99. 1 <= arr[i] <= 100\n// 100. 1 <= arr[i] <= 100\n// 101. 1 <= arr[i] <= 100\n// 102. 1 <= arr[i] <= 100\n// 103. 1 <= arr[i] <= 100\n// 104. 1 <= arr[i] <= 100\n// 105. 1 <= arr[i] <= 100\n// 106. 1 <= arr[i] <= 100\n// 107. 1 <= arr[i] <= 100\n// 108. 1 <= arr[i] <= 100\n// 109. 1 <= arr[i] <= 100\n// 110. 1 <= arr[i] <= 100\n// 111. 1 <= arr[i] <= 100\n// 112. 1 <= arr[i] <= 100\n// 113. 1 <= arr[i] <= 100\n// 114. 1 <= arr[i] <= 100\n// 115. 1 <= arr[i] <= 100\n// 116. 1 <= arr[i] <= 100\n// 117. 1 <= arr[i] <= 100\n// 118. 1 <= arr[i] <= 100\n// 119. 1 <= arr[i] <= 100\n// 120. 1 <= arr[i] <= 100\n// 121. 1 <= arr[i] <= 100\n// 122. 1 <= arr[i] <= 100\n// 123. 1 <= arr[i] <= 100\n// 124. 1 <= arr[i] <= 100\n// 125. 1 <= arr[i] <= 100\n// 126. 1 <= arr[i] <= 100\n// 127. 1 <= arr[i] <= 100\n// 128. 1 <= arr[i] <= 100\n// 129. 1 <= arr[i] <= 100\n// 130. 1 <= arr[i] <= 100\n// 131. 1 <= arr[i] <= 100\n// 132. 1 <= arr[i] <= 100\n// 133. 1 <= arr[i] <= 100\n// 134. 1 <= arr[i] <= 100\n// 135. 1 <= arr[i] <= 100\n// 136. 1 <= arr[i] <= 100\n// 137. 1 <= arr[i] <= 100\n// 138. 1 <= arr[i] <= 100\n// 139. 1 <= arr[i] <= 100\n// 140. 1 <= arr[i] <= 100\n// 141. 1 <= arr[i] <= 100\n// 142. 1 <= arr[i] <= 100\n// 143. 1 <= arr[i] <= 100\n// 144. 1 <= arr[i] <= 100\n// 145. 1 <= arr[i] <= 100\n// 146. 1 <= arr[i] <= 100\n// 147. 1 <= arr[i] <= 100\n// 148. 1 <= arr[i] <= 100\n// 149. 1 <= arr[i] <= 100\n// 150. 1 <= arr", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let num = 1;\n  while (num < n) {\n    if (num % 2 === 0) {\n      collatz.push(num);\n      num++;\n    } else {\n      num++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 3] # The collatz sequence for 5 is [1, 5, 3, 8, 4, 2], so the even numbers are only 1, 5, and 3.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let num = 1;\n  while (num < n) {\n    if (num % 2 === 0) {\n      collatz.push(num);\n      num++;\n    } else {\n      num++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the prime numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13, 15], so primes are 1, 3, 5, 7, 9, and 11.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let num = 1;\n  while (num < n) {\n    if (num % 2 === 0) {\n      collatz.push(num);\n      num++;\n    } else {\n      num++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the prime numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13, 15], so primes are 1, 3, 5, 7, 9, and 11.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let num = 1;\n  while (num < n) {\n    if (num % 2 === 0) {\n      collatz.push(num);\n      num++;\n    } else {\n      num++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the prime numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13, 15], so primes are 1, 3, 5, 7, 9, and 11.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let num = 1;\n  while (num < n) {\n    if (num % 2 === 0) {\n      collatz.push(num);\n      num++;\n    } else {\n      num++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the prime numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13, 15], so primes are 1, 3, 5, 7, 9, and 11.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let num = 1;\n  while (num < n) {\n    if (num % 2 === 0) {\n      collatz.push(num);\n      num++;\n    } else {\n      num++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the prime numbers in collatz sequence. \n\n   The Collatz conjecture was ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const [month, day, year] = date.split('-');\n  const isValid = month >= 1 && month <= 12 && day >= 1 && day <= 31 && year >= 1900 && year <= 2099;\n  return isValid;\n};\n\n/*\n  You had to write a function that takes an array of dates and returns an array of the dates in ascending order. \n  If the array is empty or if the array does not contain any dates, return an empty array. \n  If the array contains more than one date in the ascending order, return an array with one date in ascending order and one date in descending order. \n  If the array contains more than one date in the descending order, return an array with one date in descending order and one date in ascending order. \n  If the array contains more than one date in the ascending order and more than one date in the descending order, return an array with one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and one date in descending order and one date in ascending order and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(' ');\n  const splitWordsArr = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = false\n  let last = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > last) {\n      sorted = true\n      last = lst[i]\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they were sorted \n   in descending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isDescending = (lst) => {\n  let sorted = false\n  let last = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < last) {\n      sorted = true\n      last = lst[i]\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they were sorted \n   in ascending order and in descending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isSortedAndDescending = (lst) => {\n  let sorted = false\n  let last = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > last) {\n      sorted = true\n      last = lst[i]\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they were sorted \n   in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending order \n   and in ascending order and in descending order and in ascending order and in descending ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 < start2) {\n    return intersection(interval2, interval1);\n  }\n  if (end1 < end2) {\n    return intersection(interval1, interval2);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > start2) {\n    return intersection(interval2, interval1);\n  }\n  return false;\n};\n\n/*\n  [input] interval1\n  [input] interval2\n  [output] boolean\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"YES\" or \"NO\"\n  [output] \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return \n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversed = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return \n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversed = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return \n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversedReversed = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return \n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversedReversedReversed = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return \n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversedReversedReversedReversed = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return \n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversedReversedReversedReversedReversed = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return \n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversedReversedReversedReversedReversedReversed = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return \n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversedReversedReversedReversedReversedReversedReversed = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return \n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (arr) => {\n  let sum = 0;\n  let sign = 1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You were given an array arr of integers and you needed to return \n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  grid.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      lst_A[cellIndex] = Math.min(lst_A[cellIndex], lst_B[cellIndex]);\n      lst_B[cellIndex] = Math.min(lst_B[cellIndex], lst_A[cellIndex]);\n    });\n  });\n  \n  const lst_A_index = new Array(grid.length).fill(0);\n  const lst_B_index = new Array(grid.length).fill(0);\n  \n  grid.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      lst_A_index[cellIndex] = Math.min(lst_A_index[cellIndex], lst_B_index[cellIndex]);\n      lst_B_index[cellIndex] = Math.min(lst_B_index[cellIndex], lst_A_index[cellIndex]);\n    });\n  });\n  \n  const lst_A = new Array(lst_A_index.length).fill(0);\n  const lst_B = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cellIndex) => {\n    lst_A[cellIndex] = lst_B[cellIndex] = lst_A_index[cellIndex];\n  });\n  \n  const lst_A_index = new Array(lst_A_index.length).fill(0);\n  const lst_B_index = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cellIndex) => {\n    lst_A[cellIndex] = lst_B_index[cellIndex] = lst_A_index[cellIndex];\n  });\n  \n  const lst_A = new Array(lst_A_index.length).fill(0);\n  const lst_B = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cellIndex) => {\n    lst_A[cellIndex] = lst_B_index[cellIndex] = lst_A_index[cellIndex];\n  });\n  \n  const lst_A = new Array(lst_A_index.length).fill(0);\n  const lst_B = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cellIndex) => {\n    lst_A[cellIndex] = lst_B_index[cellIndex] = lst_A_index[cellIndex];\n  });\n  \n  const lst_A = new Array(lst_A_index.length).fill(0);\n  const lst_B = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cellIndex) => {\n    lst_A[cellIndex] = lst_B_index[cellIndex] = lst_A_index[cellIndex];\n  });\n  \n  const lst_A = new Array(lst_A_index.length).fill(0);\n  const lst_B = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cellIndex) => {\n    lst_A[cellIndex] = lst_B_index[cellIndex] = lst_A_index[cellIndex];\n  });\n  \n  const lst_A = new Array(lst_A_index.length).fill(0);\n  const lst_B = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cellIndex) => {\n    lst_A[cellIndex] = lst_B_index[cellIndex] = lst_A_index[cellIndex];\n  });\n  \n  const lst_A = new Array(lst_A_index.length).fill(0);\n  const lst_B = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cellIndex) => {\n    lst_A[cellIndex] = lst_B_index[cellIndex] = lst_A_index[cellIndex];\n  });\n  \n  const lst_A = new Array(lst_A_index.length).fill(0);\n  const lst_B = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cellIndex) => {\n    lst_A[cellIndex] = lst_B_index[cellIndex] = lst_A_index[cellIndex];\n  });\n  \n  const lst_A = new Array(lst_A_index.length).fill(0);\n  const lst_B = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cellIndex) => {\n    lst_A[cellIndex] = lst_B_index[cellIndex] = lst_A_index[cellIndex];\n  });\n  \n  const lst_A = new Array(lst_A_index.length).fill(0);\n  const lst_B = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cellIndex) => {\n    lst_A[cellIndex] = lst_B_index[cellIndex] = lst_A_index[cellIndex];\n  });\n  \n  const lst_A = new Array(lst_A_index.length).fill(0);\n  const lst_B = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cellIndex) => {\n    lst_A[cellIndex] = lst_B_index[cellIndex] = lst_A_index[cellIndex];\n  });\n  \n  const lst_A = new Array(lst_A_index.length).fill(0);\n  const lst_B = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cellIndex) => {\n    lst_A[cellIndex] = lst_B_index[cellIndex] = lst_A_index[cellIndex];\n  });\n  \n  const lst_A = new Array(lst_A_index.length).fill(0);\n  const lst_B = new Array(lst_B_index.length).fill(0);\n  \n  lst_A_index.forEach((index, cell", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a > b? a % b : b > a? b : greatestCommonDivisor(a, b % b);\n};\n\n/**\n * Return a random integer between min and max\n * >>> randomInt(1, 100)\n  1\n  >>> randomInt(1, 100, 2)\n  2\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, 100, 2, 3)\n  3\n  >>> randomInt(1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  if (n <= 1) {\n    arr.push(1);\n    return arr;\n  }\n  arr.push(tri(n - 1) + tri(n - 2) + tri(n - 3));\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n  fib(100) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 12134, 25163, 49008, 76181, 121394, 67645, 241578, 418143, 761809, 1213946, 6764543, 2415777, 4181436, 7618097, 12139465]\n*/\nconst fib = (n) => {\n  let arr = [];\n  if (n <= 1) {\n    arr.push(1);\n    return arr;\n  }\n  arr.push(fib(n - 1) + fib(n - 2) + fib(n - 3));\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  whose sum is divisible by n. \n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 12134, 25163, 49008, 76181, 121394, 67645, 241578, 418143, 761809, 1213946, 6764543, 2415777, 4181436, 7618097, 12139465]\n  fib(100) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 12134, 25163, 49008, 76181, 121394, 67645, 241578, 418143, 761809, 1213946, 6764543, 2415777, 4181436, 7618097, 12139465]\n*/\nconst fibDivisible = (n) => {\n  let arr = [];\n  if (n <= 1) {\n    arr.push(1);\n    return arr;\n  }\n  arr.push(fib(n - 1) + fib(n - 2) + fib(n - 3));\n  arr.push(fib(n - 1) + fib(n - 2) + fib(n - 3));\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  whose sum is divisible by n. \n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 12134, 25163, 49008, 76181, 121394, 67645, 241578, 418143, 761809, 1213946, 6764543, 2415777, 4181436, 7618097, 12139465]\n  fib(100) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 12134, 25163, 49008, 76181, 121394, 67645, 241578, 418143, 761809, 1213946, 6764543, 2415777, 4181436, 7618097, 12139465]\n*/\nconst fibDivisible2 = (num) => {\n  let arr = [];\n  if (num < 2) {\n    return arr;\n  }\n  arr.push(fib(num - 1) + fib(num - 2) + fib(num - 3));\n  arr.push(fib(num - 1) + fib(num - 2) + fib(num - 3));\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  whose sum is divisible by n. \n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(3) = [1, 1, 1]\n  fib(4) = [1, 1, 2, 3, 5, 8]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 12134, 25163, 49008, 76181, 121394, 67645, 241578, 418143, 761809, 1213946, 6764543, 2415777, 4181436, 7618097, 12139465]\n  fib(100) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 12134, 25163, 49008, 76181, 121394, 67645, 241578, 418143, 761809, 1213946, 6764543, 2415777, 4181436, 7618097, 12139465]\n*/\nconst fibDivisible3 = (num) => {\n  let arr = [];\n  if (num < 2) {\n    return arr;\n  }\n  arr.push(fib(num - 1) + fib(num - 2) + fib(num - 3));\n  arr.push(fib(num - 1) + fib(num - 2) + fib(num - 3));\n  arr.push(fib(num - 1) + fib(num - 2) + fib(num - 3));\n  return arr;\n};\n\n/*\n  Given a positive integer n, return the first n numbers of the Fibonacci sequence \n  whose sum is divisible by n. \n  Examples:", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit * 10 + n % 10;\n    n = Math.floor(n / 10);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all even digits.\n   Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_even = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit + n % 2;\n    n = Math.floor(n / 2);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit + n % 2;\n    n = Math.floor(n / 2);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digits.\n   Return 0 if all digits were odd and all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_all_even = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit + digits_even(n);\n    n = Math.floor(n / 2);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digits.\n   Return 0 if all digits were odd and all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_all_odd = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit + digits_odd(n);\n    n = Math.floor(n / 2);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digits.\n   Return 0 if all digits were odd and all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_all_even_and_odd = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit + digits_all_even(n);\n    n = Math.floor(n / 2);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digits.\n   Return 0 if all digits were odd and all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_all_odd_and_even = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit + digits_all_odd(n);\n    n = Math.floor(n / 2);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digits.\n   Return 0 if all digits were odd and all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_all_odd_and_odd = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit + digits_all_odd_and_even(n);\n    n = Math.floor(n / 2);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digits.\n   Return 0 if all digits were odd and all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_all_even_and_odd_and_odd = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit + digits_all_even_and_odd(n);\n    n = Math.floor(n / 2);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digits.\n   Return 0 if all digits were odd and all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_all_odd_and_even_and_odd = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit + digits_all_odd_and_even(n);\n    n = Math.floor(n / 2);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digits.\n   Return 0 if all digits were odd and all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_all_odd_and_odd_and_even = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit + digits_all_odd_and_odd(n);\n    n = Math.floor(n / 2);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digits.\n   Return 0 if all digits were odd and all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_all_even_and_odd_and_odd_and_even = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit + digits_all_even_and_odd_and_even(n);\n    n = Math.floor(n / 2);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digits.\n   Return 0 if all digits were odd and all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_all_odd_and_even_and_odd_and_odd_and_even = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit + digits_all_odd_and_even_and_odd_and_even(n);\n    n = Math.floor(n / 2);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digits.\n   Return 0 if all digits were odd and all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_all_even_and_odd_and_odd_and_odd_and_even = (n) => {\n  let digit = 0;\n  while (n) {\n    digit = digit + digits_all_even_and_odd_and_odd_and_even(n);\n    n = Math.floor(n / 2);\n  }\n  return digit;\n};\n\n/*Given a positive integer n, return the sum of all even and odd digits.\n   Return 0 if all digits were odd and all digits were even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_all_odd_and_even_and_odd_and_odd_and_odd_and_even = (n) => {\n  let digit = 0;\n  while (n) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   let stack=[]\n   let result=false\n   let i=string.length-1\n   while(i>=0){\n     if(string[i]=='['){\n       stack.push(string[i])\n     }\n     else if(string[i]==']'){\n       if(stack.length>0){\n         if(stack[stack.length-1]=='[' && stack[stack.length-2]==']'){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(stack[stack.length-1]=='[' && stack[stack.length-2]=='['){\n           stack.splice(stack.length-1,2)\n           result=true\n         }\n         else if(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumOfSquares = 0;\n  let numOfElements = lst.length;\n  \n  for(let i = 0; i < numOfElements; i++){\n    sum += Math.pow(lst[i], 2);\n    sumOfSquares += Math.pow(lst[i], 2);\n  }\n  \n  return Math.ceil(sumOfSquares);\n}\n\n/*\n  Given a number n, return whether it is a prime number.\n  A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n  Examples:\n  Given n = 2, return true.\n  Given n = 7, return false.\n  Given n = 15, return true.\n  Given n = 17, return false.\n  Given n = 19, return true.\n  Given n = 21, return false.\n  Given n = 23, return true.\n  Given n = 27, return false.\n  Given n = 29, return true.\n  Given n = 31, return true.\n  Given n = 37, return true.\n  Given n = 41, return true.\n  Given n = 47, return true.\n  Given n = 53, return true.\n  Given n = 59, return true.\n  Given n = 61, return true.\n  Given n = 67, return true.\n  Given n = 71, return true.\n  Given n = 73, return true.\n  Given n = 79, return true.\n  Given n = 81, return true.\n  Given n = 87, return true.\n  Given n = 91, return true.\n  Given n = 97, return true.\n  Given n = 101, return true.\n  Given n = 107, return true.\n  Given n = 111, return true.\n  Given n = 117, return true.\n  Given n = 121, return true.\n  Given n = 127, return true.\n  Given n = 131, return true.\n  Given n = 137, return true.\n  Given n = 141, return true.\n  Given n = 147, return true.\n  Given n = 151, return true.\n  Given n = 157, return true.\n  Given n = 161, return true.\n  Given n = 167, return true.\n  Given n = 171, return true.\n  Given n = 177, return true.\n  Given n = 181, return true.\n  Given n = 187, return true.\n  Given n = 191, return true.\n  Given n = 197, return true.\n  Given n = 201, return true.\n  Given n = 207, return true.\n  Given n = 213, return true.\n  Given n = 217, return true.\n  Given n = 221, return true.\n  Given n = 227, return true.\n  Given n = 229, return true.\n  Given n = 233, return true.\n  Given n = 239, return true.\n  Given n = 241, return true.\n  Given n = 247, return true.\n  Given n = 251, return true.\n  Given n = 257, return true.\n  Given n = 261, return true.\n  Given n = 267, return true.\n  Given n = 271, return true.\n  Given n = 277, return true.\n  Given n = 281, return true.\n  Given n = 287, return true.\n  Given n = 291, return true.\n  Given n = 297, return true.\n  Given n = 311, return true.\n  Given n = 317, return true.\n  Given n = 321, return true.\n  Given n = 327, return true.\n  Given n = 331, return true.\n  Given n = 337, return true.\n  Given n = 341, return true.\n  Given n = 347, return true.\n  Given n = 353, return true.\n  Given n = 359, return true.\n  Given n = 361, return true.\n  Given n = 363, return true.\n  Given n = 367, return true.\n  Given n = 371, return true.\n  Given n = 373, return true.\n  Given n = 379, return true.\n  Given n = 381, return true.\n  Given n = 387, return true.\n  Given n = 391, return true.\n  Given n = 397, return true.\n  Given n = 401, return true.\n  Given n = 407, return true.\n  Given n = 413, return true.\n  Given n = 419, return true.\n  Given n = 427, return true.\n  Given n = 433, return true.\n  Given n = 439, return true.\n  Given n = 441, return true.\n  Given n = 447, return true.\n  Given n = 451, return true.\n  Given n = 457, return true.\n  Given n = 461, return true.\n  Given n = 467, return true.\n  Given n = 471, return true.\n  Given n = 477, return true.\n  Given n = 481, return true.\n  Given n = 487, return true.\n  Given n = 491, return true.\n  Given n = 497, return true.\n  Given n = 501, return true.\n  Given n = 507, return true.\n  Given n = 513, return true.\n  Given n = 519, return true.\n  Given n = 527, return true.\n  Given n = 533, return true.\n  Given n = 539, return true.\n  Given n = 541, return true.\n  Given n = 547, return true.\n  Given n = 551, return true.\n  Given n = 557, return true.\n  Given n = 561, return true.\n  Given n = 567, return true.\n  Given n = 571, return true.\n  Given n = 577, return true.\n  Given n = 581, return true.\n  Given n = 587, return true.\n  Given n = 591, return true.\n  Given n = 597, return true.\n  Given n = 601, return true.\n  Given n = 607, return true.\n  Given n = 613, return true.\n  Given n = 619, return true.\n  Given n = 627, return true.\n  Given n = 633, return true.\n  Given n = 639, return true.\n  Given n = 641, return true.\n  Given n = 647, return true.\n  Given n = 651, return true.\n  Given n = 657, return true.\n  Given n = 661, return true.\n  Given n = 667, return true.\n  Given n = 671, return true.\n  Given n = 677, return true.\n  Given n = 681, return true.\n  Given n = 687, return true.\n  Given n = 691, return true.\n  Given n = 697, return true.\n  Given n = 701, return true.\n  Given n = 707, return true.\n  Given n = 713, return true.\n  Given n = 719, return true.\n  Given n = 727, return true.\n  Given n = 733, return true.\n  Given n = ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isLastCharAWord = lastChar ==='' || lastChar === '.' || lastChar === '!' || lastChar === '?' || lastChar === '!' || lastChar === '?' || lastChar === '!'\n  return isLastCharAWord\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a digit and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsDigit = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isLastCharAWord = lastChar ==='' || lastChar === '.' || lastChar === '!' || lastChar === '?' || lastChar === '!' || lastChar === '?' || lastChar === '!'\n  return isLastCharAWord\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a letter or digit and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetterOrDigit = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isLastCharAWord = lastChar ==='' || lastChar === '.' || lastChar === '!' || lastChar === '?' || lastChar === '!' || lastChar === '?' || lastChar === '!'\n  return isLastCharAWord\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a letter or digit and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetterOrDigitAndNotAWord = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isLastCharAWord = lastChar ==='' || lastChar === '.' || lastChar === '!' || lastChar === '?' || lastChar === '!' || lastChar === '?' || lastChar === '!'\n  return isLastCharAWord\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a letter or digit and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetterOrDigitAndNotAWordAndNotAWord = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isLastCharAWord = lastChar ==='' || lastChar === '.' || lastChar === '!' || lastChar === '?' || lastChar === '!' || lastChar === '?' || lastChar === '!'\n  return isLastCharAWord\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a letter or digit and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetterOrDigitAndNotAWordAndNotAWordAndNotAWord = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isLastCharAWord = lastChar ==='' || lastChar === '.' || lastChar === '!' || lastChar === '?' || lastChar === '!' || lastChar === '?' || lastChar === '!'\n  return isLastCharAWord\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a letter or digit and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsLetterOrDigit(\"apple pie\") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsLetterOrDigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsLetterOrDigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsLetterOrDigitAndNotAWordAndNotAWordAndNotAWordAndNotAWord = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  let isLastCharAWord = lastChar ==='' || lastChar === '.' || lastChar === '!' || lastChar === '?' || lastChar === '!' || lastChar === '?' || lastChar === '!'\n  return isLastCharAWord\n}\n\n/* Create a function that returned true if the last character ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n  }\n  return max;\n}\n\n/*\n  Given a sorted array and a target value, return the index of the target \n  value if it is found in the array. Otherwise, return -1.\n\n  Examples:\n  search([1,2,3,4,5], 3) = 2 \n  search([1,2,3,4,5], 5) = -1\n  */\nconst search = (arr, target) => {\n  let i = arr.length - 1;\n  while (i--) {\n    if (arr[i] === target) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n/*\n  Given a sorted array and a target value, return the index of the target \n  value if it is found in the array. Otherwise, return -1.\n\n  Examples:\n  search([1,2,3,4,5], 3) = 2 \n  search([1,2,3,4,5], 5) = -1\n  */\nconst searchInSortedArray = (arr, target) => {\n  let i = search(arr, target);\n  if (i === -1) {\n    return -1;\n  }\n  return i;\n}\n\n/*\n  Given a sorted array and a target value, return the index of the target \n  value if it is found in the array. Otherwise, return -1.\n\n  Examples:\n  searchInSortedArray([1,2,3,4,5], 3) = 2 \n  searchInSortedArray([1,2,3,4,5], 5) = -1\n  */\nconst searchInSortedArrayReversed = (arr, target) => {\n  let i = search(arr, target);\n  if (i === -1) {\n    return -1;\n  }\n  return i;\n}\n\n/*\n  Given a sorted array and a target value, return the index of the target \n  value if it is found in the array. Otherwise, return -1.\n\n  Examples:\n  searchInSortedArrayReversed([1,2,3,4,5], 3) = 2 \n  searchInSortedArrayReversed([1,2,3,4,5], 5) = -1\n  */\nconst searchInSortedArrayReversedReversed = (arr, target) => {\n  let i = search(arr, target);\n  if (i === -1) {\n    return -1;\n  }\n  return i;\n}\n\n/*\n  Given a sorted array and a target value, return the index of the target \n  value if it is found in the array. Otherwise, return -1.\n\n  Examples:\n  searchInSortedArrayReversedReversed([1,2,3,4,5], 3) = 2 \n  searchInSortedArrayReversedReversed([1,2,3,4,5], 5) = -1\n  */\nconst searchInSortedArrayReversedReversedReversed = (arr, target) => {\n  let i = search(arr, target);\n  if (i === -1) {\n    return -1;\n  }\n  return i;\n}\n\n/*\n  Given a sorted array and a target value, return the index of the target \n  value if it is found in the array. Otherwise, return -1.\n\n  Examples:\n  searchInSortedArrayReversedReversedReversed([1,2,3,4,5], 3) = 2 \n  searchInSortedArrayReversedReversedReversed([1,2,3,4,5], 5) = -1\n  */\nconst searchInSortedArrayReversedReversedReversedReversed = (arr, target) => {\n  let i = search(arr, target);\n  if (i === -1) {\n    return -1;\n  }\n  return i;\n}\n\n/*\n  Given a sorted array and a target value, return the index of the target \n  value if it is found in the array. Otherwise, return -1.\n\n  Examples:\n  searchInSortedArrayReversedReversedReversedReversed([1,2,3,4,5], 3) = 2 \n  searchInSortedArrayReversedReversedReversedReversed([1,2,3,4,5], 5) = -1\n  */\nconst searchInSortedArrayReversedReversedReversedReversedReversed = (arr, target) => {\n  let i = search(arr, target);\n  if (i === -1) {\n    return -1;\n  }\n  return i;\n}\n\n/*\n  Given a sorted array and a target value, return the index of the target \n  value if it is found in the array. Otherwise, return -1.\n\n  Examples:\n  searchInSortedArrayReversedReversedReversedReversedReversed([1,2,3,4,5], 3) = 2 \n  searchInSortedArrayReversedReversedReversedReversedReversed([1,2,3,4,5], 5) = -1\n  */\nconst searchInSortedArrayReversedReversedReversedReversedReversedReversed = (arr, target) => {\n  let i = search(arr, target);\n  if (i === -1) {\n    return -1;\n  }\n  return i;\n}\n\n/*\n  Given a sorted array and a target value, return the index of the target \n  value if it is found in the array. Otherwise, return -1.\n\n  Examples:\n  searchInSortedArrayReversedReversedReversedReversedReversedReversed([1,2,3,4,5], 3) = 2 \n  searchInSortedArrayReversedReversedReversedReversedReversedReversed([1,2,3,4,5], 5) = -1\n  */\nconst searchInSortedArrayReversedReversedReversedReversedReversedReversedReversed = (arr, target) => {\n  let i = search(arr, target);\n  if (i === -1) {\n    return -1;\n  }\n  return i;\n}\n\n/*\n  Given a sorted array and a target value, return the index of the target \n  value if it is found in the array. Otherwise, return -1.\n\n  Examples:\n  searchInSortedArrayReversedReversedReversedReversedReversedReversed([1,2,3,4,5], 3) = 2 \n  searchInSortedArrayReversedReversedReversedReversedReversedReversed([1,2,3,4,5], 5) = -1\n  */\nconst searchInSortedArrayReversedReversedReversedReversedReversedReversedReversedReversed = (arr, target) => {\n  let i = search(arr, target);\n  if (i === -1) {\n    return -1;\n  }\n  return i;\n}\n\n/*\n  Given a sorted array and a target value, return the index of the target \n  value if it is found in the array. Otherwise, return -1.\n\n  Examples:\n  searchInSortedArrayReversedReversedReversedReversedReversedReversedReversed([1,2,3,4,5], 3) = 2 \n  searchInSortedArrayReversedReversedReversedReversedReversedReversedReversed([1,2,3,4,5], 5) = -1\n  */\nconst searchInSortedArrayReversedReversedReversedReversedReversedReversedReversedReversedReversed = (arr, target) => {\n  let i = search(arr, target);\n  if (i === -1) {\n    return -1;\n  }\n  return i;\n}\n\n/*\n  Given a sorted array and a target value, return the index of the target \n  value if it is found in the array. Otherwise, return -1.\n\n  Examples:\n  searchInSortedArrayReversedReversedReversedReversedReversedReversedReversedReversed([1,2,3,4,5], 3) = 2 \n  searchInSortedArrayReversedReversedReversedReversedReversedReversedReversedReversed([1,2,3,4,5], 5) = -1\n  */\nconst searchInSortedArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed = (arr, target) => {\n  let i = search(arr, target);\n  if (i === -1) {\n    return -1;\n  }\n  return i;\n}\n\n/*\n  Given a sorted array and a target value, return the index of the target \n  value if it is found in the array. Otherwise, return -1.\n\n  Examples:\n  searchInSortedArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed([1,2,3,4,5], 3) = 2 \n  searchInSortedArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed([1,2,3,4,5], 5) = -1\n  */\nconst searchInSortedArrayReversedReversedReversedReversedReversedReversedReversedReversed", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = null\n      largest = null\n    } else if (lst[i] > 0) {\n      smallest = lst[i]\n    } else {\n      smallest = null\n      largest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = null\n      largest = null\n    } else if (lst[i] > 0) {\n      smallest = lst[i]\n    } else {\n      smallest = null\n      largest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = null\n      largest = null\n    } else if (lst[i] > 0) {\n      smallest = lst[i]\n    } else {\n      smallest = null\n      largest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = null\n      largest = null\n    } else if (lst[i] > 0) {\n      smallest = lst[i]\n    } else {\n      smallest = null\n      largest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = null\n      largest = null\n    } else if (lst[i] > 0) {\n      smallest = lst[i]\n    } else {\n      smallest = null\n      largest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = null\n      largest = null\n    } else if (lst[i] > 0) {\n      smallest = lst[i]\n    } else {\n      smallest = null\n      largest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = null\n      largest = null\n    } else if (lst[i] > 0) {\n      smallest = lst[i]\n    } else {\n      smallest = null\n      largest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null\n  let smallest = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      smallest = null\n      largest = null\n    } else if (lst[i] > 0) {\n      smallest = lst[i]\n    } else {\n      smallest = null\n      largest = lst[i]\n    }\n  }\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a === \"number\"){\n     return a\n   }\n   if(typeof b === \"number\"){\n     return b\n   }\n   if(typeof a === \"string\"){\n     return parseFloat(a)\n   }\n   if(typeof b === \"string\"){\n     return parseFloat(b)\n   }\n   return null\n }\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the smaller variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a === \"number\"){\n     return b\n   }\n   if(typeof b === \"number\"){\n     return a\n   }\n   if(typeof a === \"string\"){\n     return parseFloat(b)\n   }\n   if(typeof b === \"string\"){\n     return parseFloat(a)\n   }\n   return null\n }\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a === \"number\"){\n     return a\n   }\n   if(typeof b === \"number\"){\n     return b\n   }\n   if(typeof a === \"string\"){\n     return parseFloat(b)\n   }\n   if(typeof b === \"string\"){\n     return parseFloat(a)\n   }\n   return null\n }\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the smaller variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a === \"number\"){\n     return b\n   }\n   if(typeof b === \"number\"){\n     return a\n   }\n   if(typeof a === \"string\"){\n     return parseFloat(b)\n   }\n   if(typeof b === \"string\"){\n     return parseFloat(a)\n   }\n   return null\n }\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the smaller variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a === \"number\"){\n     return a\n   }\n   if(typeof b === \"number\"){\n     return b\n   }\n   if(typeof a === \"string\"){\n     return parseFloat(b)\n   }\n   if(typeof b === \"string\"){\n     return parseFloat(a)\n   }\n   return null\n }\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the smaller variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a === \"number\"){\n     return a\n   }\n   if(typeof b === \"number\"){\n     return b\n   }\n   if(typeof a === \"string\"){\n     return parseFloat(b)\n   }\n   if(typeof b === \"string\"){\n     return parseFloat(a)\n   }\n   return null\n }\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the smaller variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a === \"number\"){\n     return b\n   }\n   if(typeof b === \"number\"){\n     return a\n   }\n   if(typeof a === \"string\"){\n     return parseFloat(b)\n   }\n   if(typeof b === \"string\"){\n     return parseFloat(a)\n   }\n   return null\n }\n\n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the smaller variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   if(typeof a === \"number\"){\n     return a\n   }\n   if(typeof b === \"number\"){\n     return b\n   }\n   if(typeof a === \"string\"){\n     return parseFloat(b)\n   }\n   if(typeof b === \"string\"){\n     return parseFloat(a)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sumEven = 0;\n  let isEqual = true;\n  let num = 0;\n  let i = 1;\n  while (i < n) {\n    num = num + i;\n    if (num % 2 === 0) {\n      sumEven = sumEven + num;\n      isEqual = false;\n    }\n    i++;\n  }\n  return isEqual;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == false\n  isEqualToSumEven(-6) == false\n  isEqualToSumEven(-8) == true\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sumEven = 0;\n  let isEqual = true;\n  let num = 0;\n  let i = 1;\n  while (i < n) {\n    num = num - i;\n    if (num % 2 === 0) {\n      sumEven = sumEven + num;\n      isEqual = false;\n    }\n    i++;\n  }\n  return isEqual;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegative(-4) == false\n  isEqualToSumEvenNegative(-6) == false\n  isEqualToSumEvenNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegative = (n) => {\n  let sumEven = 0;\n  let isEqual = true;\n  let num = 0;\n  let i = 1;\n  while (i < n) {\n    num = num + i;\n    if (num % 2 === 0) {\n      sumEven = sumEven + num;\n      isEqual = false;\n    }\n    i++;\n  }\n  return isEqual;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumEvenPositive(4) == false\n  isEqualToSumEvenPositive(6) == false\n  isEqualToSumEvenPositive(8) == true\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sumEven = 0;\n  let isEqual = true;\n  let num = 0;\n  let i = 1;\n  while (i < n) {\n    num = num - i;\n    if (num % 2 === 0) {\n      sumEven = sumEven + num;\n      isEqual = false;\n    }\n    i++;\n  }\n  return isEqual;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositive(4) == false\n  isEqualToSumEvenPositive(6) == false\n  isEqualToSumEvenPositive(8) == true\n  */\nconst isEqualToSumEvenPositiveNegative = (n) => {\n  let sumEven = 0;\n  let isEqual = true;\n  let num = 0;\n  let i = 1;\n  while (i < n) {\n    num = num + i;\n    if (num % 2 === 0) {\n      sumEven = sumEven + num;\n      isEqual = false;\n    }\n    i++;\n  }\n  return isEqual;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegative = (n) => {\n  let sumEven = 0;\n  let isEqual = true;\n  let num = 0;\n  let i = 1;\n  while (i < n) {\n    num = num + i;\n    if (num % 2 === 0) {\n      sumEven = sumEven + num;\n      isEqual = false;\n    }\n    i++;\n  }\n  return isEqual;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativePositive = (n) => {\n  let sumEven = 0;\n  let isEqual = true;\n  let num = 0;\n  let i = 1;\n  while (i < n) {\n    num = num + i;\n    if (num % 2 === 0) {\n      sumEven = sumEven + num;\n      isEqual = false;\n    }\n    i++;\n  }\n  return isEqual;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == false\n  isEqualToSumEvenPositivePositive(6) == false\n  isEqualToSumEvenPositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositivePositive = (n) => {\n  let sumEven = 0;\n  let isEqual = true;\n  let num = 0;\n  let i = 1;\n  while (i < n) {\n    num = num + i;\n    if (num % 2 === 0) {\n      sumEven = sumEven + num;\n      isEqual = false;\n    }\n    i++;\n  }\n  return isEqual;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == false\n  isEqualToSumEvenPositivePositive(6) == false\n  isEqualToSumEvenPositivePositive(8) == true\n  */\nconst isEqualToSumEvenPositiveNegative = (n) => {\n  let sumEven = 0;\n  let isEqual = true;\n  let num = 0;\n  let i = 1;\n  while (i < n) {\n    num = num - i;\n    if (num % 2 === 0) {\n      sumEven = sumEven + num;\n      isEqual = false;\n    }\n    i++;\n  }\n  return isEqual;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumEvenNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativeNegativeNegative = (n) => {\n  let sumEven = 0;\n  let isEqual = true;\n  let num = 0;\n  let i = 1;\n  while (i < n) {\n    num = num + i;\n    if (num % 2 === 0) {\n      sumEven = sumEven + num;\n      isEqual = false;\n    }\n    i++;\n  }\n  return isEqual;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenNegativeNegative(-4) == false\n  isEqualToSumEvenNegativeNegative(-6) == false\n  isEqualToSumEvenNegativeNegative(-8) == true\n  */\nconst isEqualToSumEvenNegativePositiveNegative = (n) => {\n  let sumEven = 0;\n  let isEqual = true;\n  let num = 0;\n  let i = 1;\n  while (i < n) {\n    num = num - i;\n    if (num % 2 === 0) {\n      sumEven = sumEven + num;\n      isEqual = false;\n    }\n    i++;\n  }\n  return isEqual;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumEvenPositivePositivePositive(4) == false\n  isEqualToSumEvenPositivePositivePositive(6) == false\n  isEqualToSumEvenPositivePositivePositive(8) == true\n  */\nconst isEqualTo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula \n  https://en.wikipedia.org/wiki/Factorial\n  \n  For example:\n  >>> factorial(4)\n  120\n\n  The function will receive an integer as input and should return the \n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  let res = 1;\n  for (let i = 2; i <= n; i++) {\n    res = res * i;\n  }\n  return res;\n};\n\n/*\n  A function that calculates the factorial of a number using \n  the factorial formula ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let prefix = '';\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += string.charAt(index);\n    }\n    index++;\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['ab', 'abc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let suffix = '';\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += string.charAt(index);\n    }\n    index++;\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWords = (string) => {\n  let words = [];\n  let word = '';\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === word) {\n      words.push(word);\n      word = '';\n    } else {\n      word += string.charAt(index);\n    }\n    index++;\n  }\n  words.push(word);\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefix = (string) => {\n  let words = [];\n  let word = '';\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === word) {\n      words.push(word);\n      word = '';\n    } else {\n      word += string.charAt(index);\n    }\n    index++;\n  }\n  words.push(word);\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithSuffix = (string) => {\n  let words = [];\n  let word = '';\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === word) {\n      words.push(word);\n      word = '';\n    } else {\n      word += string.charAt(index);\n    }\n    index++;\n  }\n  words.push(word);\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithSuffix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffix = (string) => {\n  let words = [];\n  let word = '';\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === word) {\n      words.push(word);\n      word = '';\n    } else {\n      word += string.charAt(index);\n    }\n    index++;\n  }\n  words.push(word);\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefix = (string) => {\n  let words = [];\n  let word = '';\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === word) {\n      words.push(word);\n      word = '';\n    } else {\n      word += string.charAt(index);\n    }\n    index++;\n  }\n  words.push(word);\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffix = (string) => {\n  let words = [];\n  let word = '';\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === word) {\n      words.push(word);\n      word = '';\n    } else {\n      word += string.charAt(index);\n    }\n    index++;\n  }\n  words.push(word);\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefix = (string) => {\n  let words = [];\n  let word = '';\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === word) {\n      words.push(word);\n      word = '';\n    } else {\n      word += string.charAt(index);\n    }\n    index++;\n  }\n  words.push(word);\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffix = (string) => {\n  let words = [];\n  let word = '';\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === word) {\n      words.push(word);\n      word = '';\n    } else {\n      word += string.charAt(index);\n    }\n    index++;\n  }\n  words.push(word);\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefix = (string) => {\n  let words = [];\n  let word = '';\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === word) {\n      words.push(word);\n      word = '';\n    } else {\n      word += string.charAt(index);\n    }\n    index++;\n  }\n  words.push(word);\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffix = (string) => {\n  let words = [];\n  let word = '';\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === word) {\n      words.push(word);\n      word = '';\n    } else {\n      word += string.charAt(index);\n    }\n    index++;\n  }\n  words.push(word);\n  return words;\n};\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWordsWithPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAndSuffixAndPrefixAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  newText = newText.replace(/\\s+/g, \"_\");\n  newText = newText.replace(/ +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = newText.replace(/  +/g, \"_\");\n  newText = new", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    const file_name_length = file_name.length;\n    const file_name_without_dot = file_name.substring(0, file_name_length - 1);\n    const file_name_without_dot_length = file_name_without_dot.length;\n    const file_name_without_dot_without_digit = file_name_without_dot.substring(0, file_name_without_dot_length - 1);\n    const file_name_without_dot_without_digit_length = file_name_without_dot_without_digit.length;\n    const file_name_without_dot_without_digit_without_dot = file_name_without_dot_without_digit.substring(0, file_name_without_dot_without_digit_length - 1);\n    const file_name_without_dot_without_digit_without_dot_length = file_name_without_dot_without_digit_without_dot.length;\n    const file_name_without_dot_without_digit_without_dot_without_digit = file_name_without_dot_without_digit_without_dot.substring(0, file_name_without_dot_without_digit_without_dot_length - 1);\n    const file_name_without_dot_without_digit_without_dot_without_digit_length = file_name_without_dot_without_digit_without_dot_without_digit.length;\n    const file_name_without_dot_without_digit_without_dot_without_digit_without_dot = file_name_without_dot_without_digit_without_dot_without_digit_without_dot.substring(0, file_name_without_dot_without_digit_without_dot_without_digit_length - 1);\n    const file_name_without_dot_without_digit_without_dot_without_digit_without_dot_length = file_name_without_dot_without_digit_without_dot_without_digit_without_dot.length;\n    const file_name_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit = file_name_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit.substring(0, file_name_without_dot_without_digit_without_dot_without_digit_without_dot_length - 1);\n    const file_name_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_length = file_name_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot.length;\n    const file_name_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit = file_name_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot.substring(0, file_name_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_length - 1);\n    const file_name_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit = file_name_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot.substring(0, file_name_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_length - 1);\n    const file_name_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_dot_without_digit_without_digit_without_dot_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_without_digit_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall cube the integer entry if its index was a multiple of 3 and \n   square it if its index was a multiple of 4. The function did not changed the entries in the list whose indexes were not a multiple of 3 or 4. The function \n   shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and \n   cube each entry if its index was a multiple of 4. The function did not changed the entries in the list whose indexes were not a multiple of 3 or 4. The function \n   shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and \n   cube each entry if its index was a multiple of 4. The function did not changed the entries in the list whose indexes were not a multiple of 3 or 4. The function \n   shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and \n   cube each entry if its index was a multiple of 4. The function did not changed the entries in the list whose indexes were not a multiple of 3 or 4. The function \n   shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChangeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and \n   cube each entry if its index was a multiple of 4. The function did not changed the entries in the list whose indexes were not a multiple of 3 or 4. The function \n   shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChangeNoChangeNoChangeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and \n   cube each entry if its index was a multiple of 4. The function did not changed the entries in the list whose indexes were not a multiple of 3 or 4. The function \n   shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquareCubesNoChangeNoChangeNoChangeNoChangeNoChangeNoChange = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function took a list of integers. For all entries in the list, the function shall square each entry if its index was a multiple of 3 and \n   ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(\" \");\n  let newWords = [];\n  let primes = [];\n  let newSentence = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let isPrime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] <= word.length) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(word.length);\n      newWords.push(word);\n    }\n  }\n\n  for (let i = 0; i < newWords.length; i++) {\n    let newWord = newWords[i];\n    let newSentence = newSentence + newWord;\n  }\n\n  return newSentence;\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(\" \");\n  let newWords = [];\n  let primes = [];\n  let newSentence = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let isPrime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] <= word.length) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(word.length);\n      newWords.push(word);\n    }\n  }\n\n  for (let i = 0; i < newWords.length; i++) {\n    let newWord = newWords[i];\n    let newSentence = newSentence + newWord;\n  }\n\n  return newSentence;\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(\" \");\n  let newWords = [];\n  let primes = [];\n  let newSentence = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let isPrime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] <= word.length) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(word.length);\n      newWords.push(word);\n    }\n  }\n\n  for (let i = 0; i < newWords.length; i++) {\n    let newWord = newWords[i];\n    let newSentence = newSentence + newWord;\n  }\n\n  return newSentence;\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(\" \");\n  let newWords = [];\n  let primes = [];\n  let newSentence = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let isPrime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] <= word.length) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(word.length);\n      newWords.push(word);\n    }\n  }\n\n  for (let i = 0; i < newWords.length; i++) {\n    let newWord = newWords[i];\n    let newSentence = newSentence + newWord;\n  }\n\n  return newSentence;\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(\" \");\n  let newWords = [];\n  let primes = [];\n  let newSentence = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let isPrime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] <= word.length) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(word.length);\n      newWords.push(word);\n    }\n  }\n\n  for (let i = 0; i < newWords.length; i++) {\n    let newWord = newWords[i];\n    let newSentence = newSentence + newWord;\n  }\n\n  return newSentence;\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(\" \");\n  let newWords = [];\n  let primes = [];\n  let newSentence = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let isPrime = true;\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] <= word.length) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      primes.push(word.length);\n      newWords.push(word);\n    }\n  }\n\n  for (let i = 0; i < newWords.length; i++) {\n    let newWord = newWords[i];\n    let newSentence = newSentence + newWord;\n  }\n\n  return newSentence;\n};\n\n/*\n  You were given a string representing a sentence", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   const [numerator, denominator] = n.split('/').map(Number);\n   const [numeratorPart, denominatorPart] = numerator.split('/').map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [denominatorPart, numeratorPart] = denominator.split('/').map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [numeratorPart, denominatorPart] = numeratorPart.map(Number);\n   const [", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let num of nums) {\n    sum += num;\n    index++;\n  }\n  result.sort((a, b) => {\n    return a - b;\n  });\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] === sum) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let num of nums) {\n    sum += num;\n    index++;\n  }\n  result.sort((a, b) => {\n    return b - a;\n  });\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] === sum) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAsc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let num of nums) {\n    sum += num;\n    index++;\n  }\n  result.sort((a, b) => {\n    return a - b;\n  });\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] === sum) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAscDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let num of nums) {\n    sum += num;\n    index++;\n  }\n  result.sort((a, b) => {\n    return b - a;\n  });\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] === sum) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAscDescDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let num of nums) {\n    sum += num;\n    index++;\n  }\n  result.sort((a, b) => {\n    return b - a;\n  });\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] === sum) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAscDescDescDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let num of nums) {\n    sum += num;\n    index++;\n  }\n  result.sort((a, b) => {\n    return b - a;\n  });\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] === sum) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAscDescDescDescDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let num of nums) {\n    sum += num;\n    index++;\n  }\n  result.sort((a, b) => {\n    return b - a;\n  });\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] === sum) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAscDescDescDescDescDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let num of nums) {\n    sum += num;\n    index++;\n  }\n  result.sort((a, b) => {\n    return b - a;\n  });\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] === sum) {\n      result.splice(i, 1);\n      i--;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsAscDescDescDescDescDescDesc = (nums) => {\n  let sum = 0;\n  let index = 0;\n  let result = [];\n  for (let num of nums) {\n    sum += num;\n    index++;\n  }\n  result.sort((a, b) => {\n    return b - a;\n  });\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] === sum) {\n      result.splice(i, 1);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  \n  if(firstDigit % 2 === 0 && lastDigit % 2 === 0){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 1 && lastDigit % 2 === 1){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 2 && lastDigit % 2 === 2){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 3 && lastDigit % 2 === 3){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 4 && lastDigit % 2 === 4){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 5 && lastDigit % 2 === 5){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 6 && lastDigit % 2 === 6){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 7 && lastDigit % 2 === 7){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 8 && lastDigit % 2 === 8){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 9 && lastDigit % 2 === 9){\n    count++;\n  }\n  \n  return count;\n}\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  \n  if(firstDigit % 2 === 0 && lastDigit % 2 === 0){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 1 && lastDigit % 2 === 1){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 2 && lastDigit % 2 === 2){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 3 && lastDigit % 2 === 3){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 4 && lastDigit % 2 === 4){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 5 && lastDigit % 2 === 5){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 6 && lastDigit % 2 === 6){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 7 && lastDigit % 2 === 7){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 8 && lastDigit % 2 === 8){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 9 && lastDigit % 2 === 9){\n    count++;\n  }\n  \n  return count;\n}\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  \n  if(firstDigit % 2 === 0 && lastDigit % 2 === 0){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 1 && lastDigit % 2 === 1){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 2 && lastDigit % 2 === 2){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 3 && lastDigit % 2 === 3){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 4 && lastDigit % 2 === 4){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 5 && lastDigit % 2 === 5){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 6 && lastDigit % 2 === 6){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 7 && lastDigit % 2 === 7){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 8 && lastDigit % 2 === 8){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 9 && lastDigit % 2 === 9){\n    count++;\n  }\n  \n  return count;\n}\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  \n  if(firstDigit % 2 === 0 && lastDigit % 2 === 0){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 1 && lastDigit % 2 === 1){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 2 && lastDigit % 2 === 2){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 3 && lastDigit % 2 === 3){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 4 && lastDigit % 2 === 4){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 5 && lastDigit % 2 === 5){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 6 && lastDigit % 2 === 6){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 7 && lastDigit % 2 === 7){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 8 && lastDigit % 2 === 8){\n    count++;\n  }\n  \n  if(firstDigit % 2 === 9 && lastDigit % 2 === 9){\n    count++;\n  }\n  \n  return count;\n}\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an array a of n integers. \n  You have to find how many unique triplets are there in a.\n  Return the number of unique triplets.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      There are three unique triplets: (1, 3, 13), (3, 7, 13), (7, 13, 21), (13, 21, 21)\n  */\nconst getUniqueTriplets = (a) => {\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an array a of n integers. \n  You have to find how many unique triplets are there in a.\n  Return the number of unique triplets.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      There are three unique triplets: (1, 3, 13), (3, 7, 13), (7, 13, 21), (13, 21, 21)\n  */\nconst getUniqueTriplets_2 = (a) => {\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an array a of n integers. \n  You have to find how many unique triplets are there in a.\n  Return the number of unique triplets.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      There are three unique triplets: (1, 3, 13), (3, 7, 13), (7, 13, 21), (13, 21, 21)\n  */\nconst getUniqueTriplets_3 = (n) => {\n  let a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an array a of n integers. \n  You have to find how many unique triplets are there in a.\n  Return the number of unique triplets.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      There are three unique triplets: (1, 3, 13), (3, 7, 13), (7, 13, 21), (13, 21, 21)\n  */\nconst getUniqueTriplets_4 = (n) => {\n  let a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an array a of n integers. \n  You have to find how many unique triplets are there in a.\n  Return the number of unique triplets.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      There are three unique triplets: (1, 3, 13), (3, 7, 13), (7, 13, 21), (13, 21, 21)\n  */\nconst getUniqueTriplets_5 = (n) => {\n  let a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an array a of n integers. \n  You have to find how many unique triplets are there in a.\n  Return the number of unique triplets.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      There are three unique triplets: (1, 3, 13), (3, 7, 13), (7, 13, 21), (13, 21, 21)\n  */\nconst getUniqueTriplets_6 = (n) => {\n  let a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an array a of n integers. \n  You have to find how many unique triplets are there in a.\n  Return the number of unique triplets.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      There are three unique triplets: (1, 3, 13), (3, 7, 13), (7, 13, 21), (13, 21, 21)\n  */\nconst getUniqueTriplets_7 = (n) => {\n  let a = [...Array(Math.pow(3, n))].map((_, i) => i);\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] === 3) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an array a of n integers. \n  You have to find how many unique triplets are there in a.\n  Return the number of unique triplets.\n\n  Example :\n      Input: a = [1, 3, 7, ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let orb1 = orbit(planet1);\n  let orb2 = orbit(planet2);\n  let orb3 = orbit(planet1);\n  let orb4 = orbit(planet2);\n  let orb5 = orbit(planet1);\n  let orb6 = orbit(planet2);\n  let orb7 = orbit(planet1);\n  let orb8 = orbit(planet2);\n  let orb9 = orbit(planet1);\n  let orb10 = orbit(planet2);\n  let orb11 = orbit(planet1);\n  let orb12 = orbit(planet2);\n  let orb13 = orbit(planet1);\n  let orb14 = orbit(planet2);\n  let orb15 = orbit(planet1);\n  let orb16 = orbit(planet2);\n  let orb17 = orbit(planet1);\n  let orb18 = orbit(planet2);\n  let orb19 = orbit(planet1);\n  let orb20 = orbit(planet2);\n  let orb21 = orbit(planet1);\n  let orb22 = orbit(planet2);\n  let orb23 = orbit(planet1);\n  let orb24 = orbit(planet2);\n  let orb25 = orbit(planet1);\n  let orb26 = orbit(planet2);\n  let orb27 = orbit(planet1);\n  let orb28 = orbit(planet2);\n  let orb29 = orbit(planet1);\n  let orb30 = orbit(planet2);\n  let orb31 = orbit(planet1);\n  let orb32 = orbit(planet2);\n  let orb33 = orbit(planet1);\n  let orb34 = orbit(planet2);\n  let orb35 = orbit(planet1);\n  let orb36 = orbit(planet2);\n  let orb37 = orbit(planet1);\n  let orb38 = orbit(planet2);\n  let orb39 = orbit(planet1);\n  let orb40 = orbit(planet2);\n  let orb41 = orbit(planet1);\n  let orb42 = orbit(planet2);\n  let orb43 = orbit(planet1);\n  let orb44 = orbit(planet2);\n  let orb45 = orbit(planet1);\n  let orb46 = orbit(planet2);\n  let orb47 = orbit(planet1);\n  let orb48 = orbit(planet2);\n  let orb49 = orbit(planet1);\n  let orb50 = orbit(planet2);\n  let orb51 = orbit(planet1);\n  let orb52 = orbit(planet2);\n  let orb53 = orbit(planet1);\n  let orb54 = orbit(planet2);\n  let orb55 = orbit(planet1);\n  let orb56 = orbit(planet2);\n  let orb57 = orbit(planet1);\n  let orb58 = orbit(planet2);\n  let orb59 = orbit(planet1);\n  let orb60 = orbit(planet2);\n  let orb61 = orbit(planet1);\n  let orb62 = orbit(planet2);\n  let orb63 = orbit(planet1);\n  let orb64 = orbit(planet2);\n  let orb65 = orbit(planet1);\n  let orb66 = orbit(planet2);\n  let orb67 = orbit(planet1);\n  let orb68 = orbit(planet2);\n  let orb69 = orbit(planet1);\n  let orb70 = orbit(planet2);\n  let orb71 = orbit(planet1);\n  let orb72 = orbit(planet2);\n  let orb73 = orbit(planet1);\n  let orb74 = orbit(planet2);\n  let orb75 = orbit(planet1);\n  let orb76 = orbit(planet2);\n  let orb77 = orbit(planet1);\n  let orb78 = orbit(planet2);\n  let orb79 = orbit(planet1);\n  let orb80 = orbit(planet2);\n  let orb81 = orbit(planet1);\n  let orb82 = orbit(planet2);\n  let orb83 = orbit(planet1);\n  let orb84 = orbit(planet2);\n  let orb85 = orbit(planet1);\n  let orb86 = orbit(planet2);\n  let orb87 = orbit(planet1);\n  let orb88 = orbit(planet2);\n  let orb89 = orbit(planet1);\n  let orb90 = orbit(planet2);\n  let orb91 = orbit(planet1);\n  let orb92 = orbit(planet2);\n  let orb93 = orbit(planet1);\n  let orb94 = orbit(planet2);\n  let orb95 = orbit(planet1);\n  let orb96 = orbit(planet2);\n  let orb97 = orbit(planet1);\n  let orb98 = orbit(planet2);\n  let orb99 = orbit(planet1);\n  let orb100 = orbit(planet2);\n  let orb101 = orbit(planet1);\n  let orb102 = orbit(planet2);\n  let orb103 = orbit(planet1);\n  let orb104 = orbit(planet2);\n  let orb105 = orbit(planet1);\n  let orb106 = orbit(planet2);\n  let orb107 = orbit(planet1);\n  let orb108 = orbit(planet2);\n  let orb109 = orbit(planet1);\n  let orb110 = orbit(planet2);\n  let orb111 = orbit(planet1);\n  let orb112 = orbit(planet2);\n  let orb113 = orbit(planet1);\n  let orb114 = orbit(planet2);\n  let orb115 = orbit(planet1);\n  let orb116 = orbit(planet2);\n  let orb117 = orbit(planet1);\n  let orb118 = orbit(planet2);\n  let orb119 = orbit(planet1);\n  let orb120 = orbit(planet2);\n  let orb121 = orbit(planet1);\n  let orb122 = orbit(planet2);\n  let orb123 = orbit(planet1);\n  let orb", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.trim())\n   .filter(s => s.length > 0)\n   .map(s => s.trim());\n};\n\n/*\nWrite a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort_alphabetically([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort_alphabetically([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortAlphabetically = lst1 => {\n  let sum = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      sum += lst1[i];\n    }\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.trim())\n   .filter(s => s.length > 0)\n   .map(s => s.trim());\n};\n\n/*\nWrite a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort_alphabetically_with_duplicates([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort_alphabetically_with_duplicates([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortAlphabeticallyWithDuplicates = lst1 => {\n  let sum = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      sum += lst1[i];\n    }\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.trim())\n   .filter(s => s.length > 0)\n   .map(s => s.trim());\n};\n\n/*\nWrite a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort_alphabetically_with_duplicates_alphabetically([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort_alphabetically_with_duplicates_alphabetically([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortAlphabeticallyWithDuplicatesAlphabetically = lst1 => {\n  let sum = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      sum += lst1[i];\n    }\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.trim())\n   .filter(s => s.length > 0)\n   .map(s => s.trim());\n};\n\n/*\nWrite a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort_alphabetically_with_duplicates_alphabetically_with_duplicates([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort_alphabetically_with_duplicates_alphabetically_with_duplicates([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortAlphabeticallyWithDuplicatesAlphabeticallyWithDuplicates = lst1 => {\n  let sum = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      sum += lst1[i];\n    }\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.trim())\n   .filter(s => s.length > 0)\n   .map(s => s.trim());\n};\n\n/*\nWrite a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort_alphabetically_with_duplicates_alphabetically_with_duplicates_alphabetically([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort_alphabetically_with_duplicates_alphabetically_with_duplicates_alphabetically([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSortAlphabeticallyWithDuplicatesAlphabeticallyWithDuplicatesAlphabetically = lst1 => {\n  let sum = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFrom = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromZero = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(0);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromN = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNZero = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(0);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNN = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNNN = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNNNZero = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(0);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNNNN = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNNNNN = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNNNNNZero = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(0);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNNNNNN = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNNNNNNN = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNNNNNNNZero = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(0);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNNNNNNNN = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNNNNNNNNN = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNNNNNNNNNZero = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(0);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty string.\n */\nconst stringSequenceFromNNNNNNNNNN = (n) => {\n  if (n < 0 || n >= stringLength(digits)) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is greater than the number of digits in n, return an empty ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrZ(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrW(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrX(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrZ(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrW(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrX(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrZ(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrW(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrX(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrZ(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrW(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrX(n/y, y, x);\n}\n\n/*A simple program which should return the value of x if n was \n   a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2!=0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2!=0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2!=0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2!=0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = 0;\n  let guesses = 0;\n  let guessesLeft = 0;\n  let correct = 0;\n  let correctGuess = 0;\n  let correctGuesses = 0;\n  let correctGuessesLeft = 0;\n  let correctGuessesLeft2 = 0;\n  let correctGuessesLeft3 = 0;\n  let correctGuessesLeft4 = 0;\n  let correctGuessesLeft5 = 0;\n  let correctGuessesLeft6 = 0;\n  let correctGuessesLeft7 = 0;\n  let correctGuessesLeft8 = 0;\n  let correctGuessesLeft9 = 0;\n  let correctGuessesLeft10 = 0;\n  let correctGuessesLeft11 = 0;\n  let correctGuessesLeft12 = 0;\n  let correctGuessesLeft13 = 0;\n  let correctGuessesLeft14 = 0;\n  let correctGuessesLeft15 = 0;\n  let correctGuessesLeft16 = 0;\n  let correctGuessesLeft17 = 0;\n  let correctGuessesLeft18 = 0;\n  let correctGuessesLeft19 = 0;\n  let correctGuessesLeft20 = 0;\n  let correctGuessesLeft21 = 0;\n  let correctGuessesLeft22 = 0;\n  let correctGuessesLeft23 = 0;\n  let correctGuessesLeft24 = 0;\n  let correctGuessesLeft25 = 0;\n  let correctGuessesLeft26 = 0;\n  let correctGuessesLeft27 = 0;\n  let correctGuessesLeft28 = 0;\n  let correctGuessesLeft29 = 0;\n  let correctGuessesLeft30 = 0;\n  let correctGuessesLeft31 = 0;\n  let correctGuessesLeft32 = 0;\n  let correctGuessesLeft33 = 0;\n  let correctGuessesLeft34 = 0;\n  let correctGuessesLeft35 = 0;\n  let correctGuessesLeft36 = 0;\n  let correctGuessesLeft37 = 0;\n  let correctGuessesLeft38 = 0;\n  let correctGuessesLeft39 = 0;\n  let correctGuessesLeft40 = 0;\n  let correctGuessesLeft41 = 0;\n  let correctGuessesLeft42 = 0;\n  let correctGuessesLeft43 = 0;\n  let correctGuessesLeft44 = 0;\n  let correctGuessesLeft45 = 0;\n  let correctGuessesLeft46 = 0;\n  let correctGuessesLeft47 = 0;\n  let correctGuessesLeft48 = 0;\n  let correctGuessesLeft49 = 0;\n  let correctGuessesLeft50 = 0;\n  let correctGuessesLeft51 = 0;\n  let correctGuessesLeft52 = 0;\n  let correctGuessesLeft53 = 0;\n  let correctGuessesLeft54 = 0;\n  let correctGuessesLeft55 = 0;\n  let correctGuessesLeft56 = 0;\n  let correctGuessesLeft57 = 0;\n  let correctGuessesLeft58 = 0;\n  let correctGuessesLeft59 = 0;\n  let correctGuessesLeft60 = 0;\n  let correctGuessesLeft61 = 0;\n  let correctGuessesLeft62 = 0;\n  let correctGuessesLeft63 = 0;\n  let correctGuessesLeft64 = 0;\n  let correctGuessesLeft65 = 0;\n  let correctGuessesLeft66 = 0;\n  let correctGuessesLeft67 = 0;\n  let correctGuessesLeft68 = 0;\n  let correctGuessesLeft69 = 0;\n  let correctGuessesLeft70 = 0;\n  let correctGuessesLeft71 = 0;\n  let correctGuessesLeft72 = 0;\n  let correctGuessesLeft73 = 0;\n  let correctGuessesLeft74 = 0;\n  let correctGuessesLeft75 = 0;\n  let correctGuessesLeft76 = 0;\n  let correctGuessesLeft77 = 0;\n  let correctGuessesLeft78 = 0;\n  let correctGuessesLeft79 = 0;\n  let correctGuessesLeft80 = 0;\n  let correctGuessesLeft81 = 0;\n  let correctGuessesLeft82 = 0;\n  let correctGuessesLeft83 = 0;\n  let correctGuessesLeft84 = 0;\n  let correctGuessesLeft85 = 0;\n  let correctGuessesLeft86 = 0;\n  let correctGuessesLeft87 = 0;\n  let correctGuessesLeft88 = 0;\n  let correctGuessesLeft89 = 0;\n  let correctGuessesLeft90 = 0;\n  let correctGuessesLeft91 = 0;\n  let correctGuessesLeft92 = 0;\n  let correctGuessesLeft93 = 0;\n  let correctGuessesLeft94 = 0;\n  let correctGuessesLeft95 = 0;\n  let correctGuessesLeft96 = 0;\n  let correctGuessesLeft97 = 0;\n  let correctGuessesLeft98 = 0;\n  let correctGuessesLeft99 = 0;\n  let correctGuessesLeft100 = 0;\n  let correctGuessesLeft101 = 0;\n  let correctGuessesLeft102 = 0;\n  let correctGuessesLeft103 = 0;\n  let correctGuessesLeft104 = 0;\n  let correctGuessesLeft105 = 0;\n  let correctGuessesLeft106 = 0;\n  let correctGuessesLeft107 = 0;\n  let correctGuessesLeft108 = 0;\n  let correctGuessesLeft109 = 0;\n  let correctGuessesLeft110 = 0;\n  let correctGuessesLeft111 = 0;\n  let correctGuessesLeft112 = 0;\n  let correctGuessesLeft113 = 0;\n  let correctGuessesLeft114 = 0;\n  let correctGuessesLeft115 = 0;\n  let correctGuessesLeft116 = 0;\n  let correctGuessesLeft117 = 0;\n  let correctGuessesLeft118 = 0;\n  let correctGuessesLeft119 = 0;\n  let correctGuessesLeft120 = 0;\n  let correctGuessesLeft121 = 0;\n  let correctGuessesLeft122 = 0;\n  let correctGuessesLeft123 = 0;\n  let correctGuessesLeft124 = 0;\n  let correctGuessesLeft125 = 0;\n  let correctGuessesLeft126 = 0;\n  let correctGuessesLeft127 = 0;\n  let correctGuessesLeft128 = 0;\n  let correctGuessesLeft129 = 0;\n  let correctGuessesLeft130 = 0;\n  let correctGuessesLeft131 = 0;\n  let correctGuessesLeft132 = 0;\n  let correctGuessesLeft133 = 0;\n  let correctGuessesLeft134 = 0;\n  let correctGuessesLeft135 = 0;\n  let correctGuessesLeft136 = 0;\n  let correctGuessesLeft137 = 0;\n  let correctGuessesLeft138 = 0;\n  let correctGuessesLeft139 = 0;\n  let correctGuessesLeft140 = 0;\n  let correctGuessesLeft141 = 0;\n  let correctGuessesLeft142 = 0;\n  let correctGuessesLeft143 = 0;\n  let correctGuessesLeft144 = 0;\n  let correctGuessesLeft145 = 0;\n  let correctGuessesLeft146 = 0;\n  let correctGuessesLeft", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_strongest_name = null;\n  let extension_strongest_strength = null;\n  extensions.forEach((extension) => {\n    const extension_strength_str = extension.split('_').map(x => x.toUpperCase()).reduce((a, b) => a + b);\n    if (extension_strength_str === class_name) {\n      extension_strength = extension_strength_str;\n      extension_strongest_name = extension;\n      extension_strongest_strength = extension_strength_str;\n    }\n  });\n  return extension_strongest_name;\n};\n\n/*\n  Given a class name and a set of extensions, return the class name that \n  has the highest strength among those extensions. \n  Example:\n  Given'my_class', ['AA', 'Be', 'CC'], you should return'my_class.AA'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD'], you should return'my_class.DD'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE'], you should return'my_class.EE'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF'], you should return'my_class.FF'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG'], you should return'my_class.GG'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH'], you should return'my_class.HH'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II'], you should return'my_class.II'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ'], you should return'my_class.JJ'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK'], you should return'my_class.KK'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL'], you should return'my_class.LL'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM'], you should return'my_class.MM'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN'], you should return'my_class.NN'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO'], you should return'my_class.OO'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP'], you should return'my_class.PP'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ'], you should return'my_class.QQ'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR'], you should return'my_class.RR'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS'], you should return'my_class.SS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SS'], you should return'my_class.SS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SS', 'SS'], you should return'my_class.SS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SS', 'SS', 'SS'], you should return'my_class.SS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SS', 'SS', 'SS', 'SS'], you should return'my_class.SS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SS', 'SS', 'SS', 'SS', 'SS'], you should return'my_class.SS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SS', 'SS', 'SS', 'SS', 'SS'], you should return'my_class.SS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SS', 'SS', 'SS', 'SS', 'SS'], you should return'my_class.SS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', 'SS', 'SS', 'SS', 'SS', 'SS'], you should return'my_class.SS'\n  Given'my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN', 'OO', 'PP', 'QQ', 'RR', 'SS', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let rotatedA= a.split('').reverse().join('');\n   let rotatedB= b.split('').reverse().join('');\n   let rotatedC= rotatedA.split('').reverse().join('');\n   let rotatedD= rotatedB.split('').reverse().join('');\n   let rotatedE= rotatedC.split('').reverse().join('');\n   let rotatedF= rotatedD.split('').reverse().join('');\n   let rotatedG= rotatedE.split('').reverse().join('');\n   let rotatedH= rotatedF.split('').reverse().join('');\n   let rotatedI= rotatedG.split('').reverse().join('');\n   let rotatedJ= rotatedH.split('').reverse().join('');\n   let rotatedK= rotatedI.split('').reverse().join('');\n   let rotatedL= rotatedJ.split('').reverse().join('');\n   let rotatedM= rotatedK.split('').reverse().join('');\n   let rotatedN= rotatedL.split('').reverse().join('');\n   let rotatedO= rotatedM.split('').reverse().join('');\n   let rotatedP= rotatedN.split('').reverse().join('');\n   let rotatedQ= rotatedO.split('').reverse().join('');\n   let rotatedR= rotatedP.split('').reverse().join('');\n   let rotatedS= rotatedQ.split('').reverse().join('');\n   let rotatedT= rotatedR.split('').reverse().join('');\n   let rotatedU= rotatedS.split('').reverse().join('');\n   let rotatedV= rotatedT.split('').reverse().join('');\n   let rotatedW= rotatedU.split('').reverse().join('');\n   let rotatedX= rotatedV.split('').reverse().join('');\n   let rotatedY= rotatedW.split('').reverse().join('');\n   let rotatedZ= rotatedX.split('').reverse().join('');\n   let rotatedA= rotatedY.split('').reverse().join('');\n   let rotatedB= rotatedZ.split('').reverse().join('');\n   let rotatedC= rotatedA.split('').reverse().join('');\n   let rotatedD= rotatedB.split('').reverse().join('');\n   let rotatedE= rotatedC.split('').reverse().join('');\n   let rotatedF= rotatedD.split('').reverse().join('');\n   let rotatedG= rotatedE.split('').reverse().join('');\n   let rotatedH= rotatedF.split('').reverse().join('');\n   let rotatedI= rotatedG.split('').reverse().join('');\n   let rotatedJ= rotatedH.split('').reverse().join('');\n   let rotatedK= rotatedI.split('').reverse().join('');\n   let rotatedL= rotatedJ.split('').reverse().join('');\n   let rotatedM= rotatedK.split('').reverse().join('');\n   let rotatedN= rotatedL.split('').reverse().join('');\n   let rotatedO= rotatedM.split('').reverse().join('');\n   let rotatedP= rotatedN.split('').reverse().join('');\n   let rotatedQ= rotatedO.split('').reverse().join('');\n   let rotatedR= rotatedP.split('').reverse().join('');\n   let rotatedS= rotatedQ.split('').reverse().join('');\n   let rotatedT= rotatedR.split('').reverse().join('');\n   let rotatedU= rotatedS.split('').reverse().join('');\n   let rotatedV= rotatedT.split('').reverse().join('');\n   let rotatedW= rotatedU.split('').reverse().join('');\n   let rotatedX= rotatedV.split('').reverse().join('');\n   let rotatedY= rotatedW.split('').reverse().join('');\n   let rotatedZ= rotatedX.split('').reverse().join('');\n   let rotatedA= rotatedY.split('').reverse().join('');\n   let rotatedB= rotatedZ.split('').reverse().join('');\n   let rotatedC= rotatedA.split('').reverse().join('');\n   let rotatedD= rotatedB.split('').reverse().join('');\n   let rotatedE= rotatedC.split('').reverse().join('');\n   let rotatedF= rotatedD.split('').reverse().join('');\n   let rotatedG= rotatedE.split('').reverse().join('');\n   let rotatedH= rotatedF.split('').reverse().join('');\n   let rotatedI= rotatedG.split('').reverse().join('');\n   let rotatedJ= rotatedH.split('').reverse().join('');\n   let rotatedK= rotatedI.split('').reverse().join('');\n   let rotatedL= rotatedJ.split('').reverse().join('');\n   let rotatedM= rotatedK.split('').reverse().join('');\n   let rotatedN= rotatedL.split('').reverse().join('');\n   let rotatedO= rotatedM.split('').reverse().join('');\n   let rotatedP= rotatedN.split('').reverse().join('');\n   let rotatedQ= rotatedO.split('').reverse().join('');\n   let rotatedR= rotatedP.split('').reverse().join('');\n   let rotatedS= rotatedQ.split('').reverse().join('');\n   let rotatedT= rotatedR.split('').reverse().join('');\n   let rotatedU= rotatedS.split('').reverse().join('');\n   let rotatedV= rotatedT.split('').reverse().join('');\n   let rotatedW= rotatedU.split('').reverse().join('');\n   let rotatedX= rotatedV.split('').reverse().join('');\n   let rotatedY= rotatedW.split('').reverse().join('');\n   let rotatedZ= rotatedX.split('').reverse().join('');\n   let rotatedA= rotatedY.split('').reverse().join('');\n   let rotatedB= rotatedZ.split('').reverse().join('');\n   let rotatedC= rotatedA.split('').reverse().join('');\n   let rotatedD= rotatedB.split('').reverse().join('');\n   let rotatedE= rotatedC.split('').reverse().join('');\n   let rotatedF= rotatedD.split('').reverse().join('');\n   let rotatedG= rotatedE.split('').reverse().join('');\n   let rotatedH= rotatedF.split('').reverse().join('');\n   let rotatedI= rotatedG.split('').reverse().join('');\n   let rotatedJ= rotatedH.split('').reverse().join('');\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let digit;\n  do {\n    digit = num % 10;\n    evenCount += digit === 0;\n    oddCount += digit === 1;\n    num = Math.floor(num / 10);\n  } while (num > 0);\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return an array that had the characters in it sorted alphabetically.\n\n   Example:\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']\n      sortedAlphabetically('hello') ==> ['h', 'e', 'l', 'l', 'o']", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let str = numberToRoman(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimal = (number) => {\n  let str = numberToDecimal(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its hexadecimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToHex(19) == '0x19'\n  >>> intToHex(152) == '0x152'\n  >>> intToHex(426) == '0x426'\n  */\nconst intToHex = (number) => {\n  let str = numberToHex(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its octal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToOctal(19) == '0o19'\n  >>> intToOctal(152) == '0o152'\n  >>> intToOctal(426) == '0o426'\n  */\nconst intToOctal = (number) => {\n  let str = numberToOctal(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its binary equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToBinary(19) == '0b19'\n  >>> intToBinary(152) == '0b152'\n  >>> intToBinary(426) == '0b426'\n  */\nconst intToBinary = (int) => {\n  let str = numberToBinary(int);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its hexadecimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToHexadecimal(19) == '0x19'\n  >>> intToHexadecimal(152) == '0x152'\n  >>> intToHexadecimal(426) == '0x426'\n  */\nconst intToHexadecimal = (number) => {\n  let str = numberToHexadecimal(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its octal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToOctadecimal(19) == '0o19'\n  >>> intToOctadecimal(152) == '0o152'\n  >>> intToOctadecimal(426) == '0o426'\n  */\nconst intToOctadecimal = (number) => {\n  let str = numberToOctadecimal(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its binary equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToBinary(19) == '0b19'\n  >>> intToBinary(152) == '0b152'\n  >>> intToBinary(426) == '0b426'\n  */\nconst intToBinary(number) => {\n  let str = numberToBinary(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its hexadecimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToHexadecimal(19) == '0x19'\n  >>> intToHexadecimal(152) == '0x152'\n  >>> intToHexadecimal(426) == '0x426'\n  */\nconst intToHexadecimal(number) => {\n  let str = numberToHexadecimal(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimal(number) => {\n  let str = numberToDecimal(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its hexadecimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToHexadecimal(19) == '0x19'\n  >>> intToHexadecimal(152) == '0x152'\n  >>> intToHexadecimal(426) == '0x426'\n  */\nconst intToHexadecimal(number) => {\n  let str = numberToHexadecimal(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimal(number) => {\n  let str = numberToDecimal(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its hexadecimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToHexadecimal(19) == '0x19'\n  >>> intToHexadecimal(152) == '0x152'\n  >>> intToHexadecimal(426) == '0x426'\n  */\nconst intToHexadecimal(number) => {\n  let str = numberToHexadecimal(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal(426) == '426'\n  */\nconst intToDecimal(number) => {\n  let str = numberToDecimal(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its hexadecimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToHexadecimal(19) == '0x19'\n  >>> intToHexadecimal(152) == '0x152'\n  >>> intToHexadecimal(426) == '0x426'\n  */\nconst intToHexadecimal(number) => {\n  let str = numberToHexadecimal(number);\n  return str.toLowerCase();\n}\n\n/*\n  Given a positive integer, obtained its decimal equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToDecimal(19) == '19'\n  >>> intToDecimal(152) == '152'\n  >>> intToDecimal", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\n/*\n Given the lengths of the three sides of a rectangle. Returned true if the \n   three sides formed a right-angled rectangle, false otherwise. \n   A right-angled rectangle was a rectangle in which one angle was right angle \n   or 90 degree.\n  Example:\n  rightAngleRectangle(3, 4, 5) == true\n  rightAngleRectangle(1, 2, 3) == false\n  */\nconst rightAngleRectangle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\n/*\n Given the lengths of the three sides of a circle. Returned true if the \n   three sides formed a right-angled circle, false otherwise. \n   A right-angled circle was a circle in which one angle was right angle \n   or 90 degree.\n  Example:\n  rightAngleCircle(3, 4, 5) == true\n  rightAngleCircle(1, 2, 3) == false\n  */\nconst rightAngleCircle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\n/*\n Given the lengths of the three sides of a square. Returned true if the \n   three sides formed a right-angled square, false otherwise. \n   A right-angled square was a square in which one angle was right angle \n   or 90 degree.\n  Example:\n  rightAngleSquare(3, 4, 5) == true\n  rightAngleSquare(1, 2, 3) == false\n  */\nconst rightAngleSquare = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Returned true if the \n   three sides formed a right-angled pentagon, false otherwise. \n   A right-angled pentagon was a pentagon in which one angle was right angle \n   or 90 degree.\n  Example:\n  rightAnglePentagon(3, 4, 5) == true\n  rightAnglePentagon(1, 2, 3) == false\n  */\nconst rightAnglePentagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\n/*\n Given the lengths of the three sides of a hexagon. Returned true if the \n   three sides formed a right-angled hexagon, false otherwise. \n   A right-angled hexagon was a hexagon in which one angle was right angle \n   or 90 degree.\n  Example:\n  rightAngleHexagon(3, 4, 5) == true\n  rightAngleHexagon(1, 2, 3) == false\n  */\nconst rightAngleHexagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\n/*\n Given the lengths of the three sides of a heptagon. Returned true if the \n   three sides formed a right-angled heptagon, false otherwise. \n   A right-angled heptagon was a heptagon in which one angle was right angle \n   or 90 degree.\n  Example:\n  rightAngleHeptagon(3, 4, 5) == true\n  rightAngleHeptagon(1, 2, 3) == false\n  */\nconst rightAngleHeptagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Returned true if the \n   three sides formed a right-angled decagon, false otherwise. \n   A right-angled decagon was a decagon in which one angle was right angle \n   or 90 degree.\n  Example:\n  rightAngleDecagon(3, 4, 5) == true\n  rightAngleDecagon(1, 2, 3) == false\n  */\nconst rightAngleDecagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\n/*\n Given the lengths of the three sides of a helix. Returned true if the \n   three sides formed a right-angled helix, false otherwise. \n   A right-angled helix was a helix in which one angle was right angle \n   or 90 degree.\n  Example:\n  rightAngleHelix(3, 4, 5) == true\n  rightAngleHelix(1, 2, 3) == false\n  */\nconst rightAngleHelix = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\n/*\n Given the lengths of the three sides of a octagon. Returned true if the \n   three sides formed a right-angled octagon, false otherwise. \n   A right-angled octagon was a octagon in which one angle was right angle \n   or 90 degree.\n  Example:\n  rightAngleOctagon(3, 4, 5) == true\n  rightAngleOctagon(1, 2, 3) == false\n  */\nconst rightAngleOctagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\n/*\n Given the lengths of the three sides of a dodecagon. Returned true if the \n   three sides formed a right-angled dodecagon, false otherwise. \n   A right-angled dodecagon was a dodecagon in which one angle was right angle \n   or 90 degree.\n  Example:\n  rightAngleDodecagon(3, 4, 5) == true\n  rightAngleDodecagon(1, 2, 3) == false\n  */\nconst rightAngleDodecagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n};\n\n/*\n Given the lengths of the three sides of a hexadecagon. Returned true if the \n   three sides formed a right-angled hexadecagon, false otherwise. \n   A right-angled hexadecagon was a hexadecagon in which one angle was right angle \n   or 90 degree.\n  Example:\n  rightAngleHexadecagon(3, 4, 5) == true\n  rightAngleHexadecagon(1, 2, 3) == false\n  */\nconst rightAngleHexadecagon = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return ab >= ac && ab >= bc;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxChar= 0;\n   let maxWord= \"\";\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n   });\n   return maxWord;\n }\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxChar= 0;\n   let maxWord= \"\";\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n   });\n   return maxWord;\n }\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxChar= 0;\n   let maxWord= \"\";\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n   });\n   return maxWord;\n }\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxChar= 0;\n   let maxWord= \"\";\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n   });\n   return maxWord;\n }\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxChar= 0;\n   let maxWord= \"\";\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n   });\n   return maxWord;\n }\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxChar= 0;\n   let maxWord= \"\";\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n   });\n   return maxWord;\n }\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxChar= 0;\n   let maxWord= \"\";\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n   });\n   return maxWord;\n }\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max= 0;\n   let maxChar= 0;\n   let maxWord= \"\";\n   words.forEach((word)=>{\n     if(word.length>maxChar){\n       maxChar= word.length;\n       maxWord= word;\n     }\n   });\n   return maxWord;\n }\n \n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = []\n  let remaining = Math.min(remaining, number)\n  let remaining = Math.min(remaining, need)\n  let remaining = Math.min(remaining, remaining)\n  \n  while(number > 0 && need > 0) {\n    result.push(remaining - number)\n    number -= remaining.length\n    need -= remaining.length\n    remaining -= remaining.length\n  }\n  \n  if(number > 0 && need > 0) {\n    result.push(remaining - number)\n    number -= remaining.length\n    need -= remaining.length\n    remaining -= remaining.length\n  }\n  \n  return result\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = []\n  let remaining = Math.min(remaining, number)\n  let remaining = Math.min(remaining, need)\n  let remaining = Math.min(remaining, remaining)\n  \n  while(number > 0 && need > 0) {\n    result.push(remaining - number)\n    number -= remaining.length\n    need -= remaining.length\n    remaining -= remaining.length\n  }\n  \n  if(number > 0 && need > 0) {\n    result.push(remaining - number)\n    number -= remaining.length\n    need -= remaining.length\n    remaining -= remaining.length\n  }\n  \n  return result\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = []\n  let remaining = Math.min(remaining, number)\n  let remaining = Math.min(remaining, need)\n  let remaining = Math.min(remaining, remaining)\n  \n  while(number > 0 && need > 0) {\n    result.push(remaining - number)\n    number -= remaining.length\n    need -= remaining.length\n    remaining -= remaining.length\n  }\n  \n  if(number > 0 && need > 0) {\n    result.push(remaining - number)\n    number -= remaining.length\n    need -= remaining.length\n    remaining -= remaining.length\n  }\n  \n  return result\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = []\n  let remaining = Math.min(remaining, number)\n  let remaining = Math.min(remaining, need)\n  let remaining = Math.min(remaining, remaining)\n  \n  while(number > 0 && need > 0) {\n    result.push(remaining - number)\n    number -= remaining.length\n    need -= remaining.length\n    remaining -= remaining.length\n  }\n  \n  if(number > 0 && need > 0) {\n    result.push(remaining - number)\n    number -= remaining.length\n    need -= remaining.length\n    remaining -= remaining.length\n  }\n  \n  return result\n}\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    count += chars[i].length;\n  }\n  return count;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS) of its characters (ignoring case).\n * LCS is defined as the longest common subsequence that exists in two strings:\n * If two strings share a common subsequence, their LCS are the same (ignoring case).\n * If two strings do not share a common subsequence, their LCS are different.\n * If two strings do not share a common subsequence, the LCS of their characters is undefined.\n * Examples:\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" are \"abba\".\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba\" and \"abc\" is undefined.\n * Given the string \"abba\", the LCS of \"abba", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result * operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result + operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result - operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result + operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result - operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result + operandList[i]\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorList = operator.split('+')\n  let operandList = operand.split('*')\n  let result = operandList[0]\n  for (let i = 1; i < operandList.length; i++) {\n    result = result - operandList[i]\n  }\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = ''\n  \n  for(let i = 0; i < s.length; i++) {\n    temp = s[i]\n    \n    if(temp ==='') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '@') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '#') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '$') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '%') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '^') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '&') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '*') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '(') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === ')') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '[') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === ']') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '{') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '}') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '|') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '<') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '>') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '?') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '!') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '@') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '#') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '$') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '%') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '^') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '&') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '*') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '(') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === ')') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '[') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === ']') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '{') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '}') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '|') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '<') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '>') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '?') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '!') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '@') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '#') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '$') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '%') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '^') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '&') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '*') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '(') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === ')') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '[') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === ']') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '{') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '}') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '|') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '<') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '>') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '?') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '!') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '@') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '#') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '$') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '%') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '^') {\n      reversed = reversed + temp\n      i++\n      continue\n    }\n    \n    if(temp === '&') {\n      reversed = reversed + temp\n      i++\n      continue\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'b1efce4dbcddf37cdae3eaf25b69d07'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '9fcee49bfcb35bcb9f2f9fbe9d15e3fa7d80f8b7dff9d55e3f0a1e9'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9fcee49bfcb35bcb9f2f9fbe9d15e3fa7d80f8b7dff9d55e3f0a1e9'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9fcee49bfcb35bcb9f2f9fbe9d15e3fa7d80f8b7dff9d55e3f0a1e9'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9fcee49bfcb35bcb9f2f9fbe9d15e3fa7d80f8b7dff9d55e3f0a1e9'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9fcee49bfcb35bcb9f2f9fbe9d15e3fa7d80f8b7dff9d55e3f0a1e9'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9fcee49bfcb35bcb9f2f9fbe9d15e3fa7d80f8b7dff9d55e3f0a1e9'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9fcee49bfcb35bcb9f2f9fbe9d15e3fa7d80f8b7dff9d55e3f0a1e9'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9fcee49bfcb35bcb9f2f9fbe9d15e3fa7d80f8b7dff9d55e3f0a1e9'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9fcee49bfcb35bcb9f2f9fbe9d15e3fa7d80f8b7dff9d55e3f0a1e9'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha1Hash = crypto.createHash('sha1');\n  sha1Hash.update(text);\n  return sha1Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToSha512('Hello world') == '9fcee49bfcb35bcb9f2f9fbe9d15e3fa7d80f8b7dff9d55e3f0a1e9'\n  */\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 2);\n  }\n  while (j > 0) {\n    result.push(j);\n    j = Math.floor(j / 2);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the largest power of 2 greater than or equal\n   to n. For example, generatePowerOfTwo(12) => 8, generatePowerOfTwo(13) => 16,\n   generatePowerOfTwo(14) => 32, generatePowerOfTwo(15) => 64, generatePowerOfTwo(16) => 128,\n   generatePowerOfTwo(17) => 256, generatePowerOfTwo(18) => 512, generatePowerOfTwo(19) => 1024,\n   generatePowerOfTwo(20) => 2048, generatePowerOfTwo(21) => 4096, generatePowerOfTwo(22) => 8192,\n   generatePowerOfTwo(23) => 16384, generatePowerOfTwo(24) => 32768, generatePowerOfTwo(25) => 65536,\n   generatePowerOfTwo(26) => 131072, generatePowerOfTwo(27) => 262144, generatePowerOfTwo(28) =>\n   524288, generatePowerOfTwo(29) => 1048576, generatePowerOfTwo(30) => 2097152, generatePowerOfTwo(31) =>\n   4194304, generatePowerOfTwo(32) => 8388608, generatePowerOfTwo(33) => 16777216, generatePowerOfTwo(34) =>\n   33554432, generatePowerOfTwo(35) => 67108864, generatePowerOfTwo(36) => 134217728, generatePowerOfTwo(37) =>\n   268435456, generatePowerOfTwo(38) => 536870912, generatePowerOfTwo(39) => 1073741824, generatePowerOfTwo(40) =>\n   2147483648, generatePowerOfTwo(41) => 2147483647, generatePowerOfTwo(42) => 2147483646, generatePowerOfTwo(43) =>\n   2147483645, generatePowerOfTwo(44) => 2147483644, generatePowerOfTwo(45) => 2147483643, generatePowerOfTwo(46) =>\n   2147483642, generatePowerOfTwo(47) => 2147483641, generatePowerOfTwo(48) => 2147483640, generatePowerOfTwo(49) =>\n   2147483639, generatePowerOfTwo(50) => 2147483638, generatePowerOfTwo(51) => 2147483637, generatePowerOfTwo(52) =>\n   2147483636, generatePowerOfTwo(53) => 2147483635, generatePowerOfTwo(54) => 2147483634, generatePowerOfTwo(55) =>\n   2147483633, generatePowerOfTwo(56) => 2147483632, generatePowerOfTwo(57) => 2147483631, generatePowerOfTwo(58) =>\n   2147483630, generatePowerOfTwo(59) => 2147483629, generatePowerOfTwo(60) => 2147483628, generatePowerOfTwo(61) =>\n   2147483627, generatePowerOfTwo(62) => 2147483626, generatePowerOfTwo(63) => 2147483625, generatePowerOfTwo(64) =>\n   2147483624, generatePowerOfTwo(65) => 2147483623, generatePowerOfTwo(66) => 2147483622, generatePowerOfTwo(67) =>\n   2147483621, generatePowerOfTwo(68) => 2147483620, generatePowerOfTwo(69) => 2147483619, generatePowerOfTwo(70) =>\n   2147483618, generatePowerOfTwo(71) => 2147483617, generatePowerOfTwo(72) => 2147483616, generatePowerOfTwo(73) =>\n   2147483615, generatePowerOfTwo(74) => 2147483614, generatePowerOfTwo(75) => 2147483613, generatePowerOfTwo(76) =>\n   2147483612, generatePowerOfTwo(77) => 2147483611, generatePowerOfTwo(78) => 2147483610, generatePowerOfTwo(79) =>\n   2147483609, generatePowerOfTwo(80) => 2147483608, generatePowerOfTwo(81) => 2147483607, generatePowerOfTwo(82) =>\n   2147483606, generatePowerOfTwo(83) => 2147483605, generatePowerOfTwo(84) => 2147483604, generatePowerOfTwo(85) =>\n   2147483603, generatePowerOfTwo(86) => 2147483602, generatePowerOfTwo(87) => 2147483601, generatePowerOfTwo(88) =>\n   2147483609, generatePowerOfTwo(89) => 2147483608, generatePowerOfTwo(90) => 2147483607, generatePowerOfTwo(91) =>\n   2147483606, generatePowerOfTwo(92) => 2147483605, generatePowerOfTwo(93) => 2147483604, generatePowerOfTwo(94) =>\n   2147483603, generatePowerOfTwo(95) => 2147483602, generatePowerOfTwo(96) => 2147483601, generatePowerOfTwo(97) =>\n   2147483609, generatePowerOfTwo(98) => 2147483608, generatePowerOfTwo(99) => 2147483607, generatePowerOfTwo(100) =>\n   2147483606, generatePowerOfTwo(101) => 2147483605, generatePowerOfTwo(102) => 2147483604, generatePowerOfTwo(103) =>\n   2147483603, generatePowerOfTwo(104) => 2147483602, generatePowerOfTwo(105) => 2147483601, generatePowerOfTwo(106) =>\n   2147483609, generatePowerOfTwo(107) => 2147483608, generatePowerOfTwo(108) => 2147483607, generatePowerOfTwo(109) =>\n   2147483606, generatePowerOfTwo(110) => 2147483605, generatePowerOfTwo(111) => 2147483604, generatePowerOfTwo(112) =>\n   2147483603, generatePowerOfTwo(113) => 2147483602, generatePowerOfTwo(114) => 2147483601, generatePowerOfTwo(115) =>\n   2147483609, generatePowerOfTwo(116) => 2147483608, generatePowerOfTwo(117) => 2147483607, generatePowerOfTwo(118) =>\n   2147483606, generatePowerOfTwo(119) => 2147483605, generatePowerOfTwo(120) => 2147483604, generatePowerOfTwo(121) =>\n   2147483603, generatePowerOfTwo(122) => 2147483602, generatePowerOfTwo(123) => 2147483601, generatePowerOfTwo(124) =>\n   2147483609, generatePowerOfTwo(125) => 2147483608, generatePowerOfTwo(126) => 2147483607, generatePowerOfTwo(127) =>\n   2147483606, generatePowerOfTwo(128) => 214748360", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split('|');\n  const music_notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const music_note = music_array[i].split(' ');\n    music_notes.push(parseInt(music_note[0]));\n  }\n  return music_notes;\n};\n\n/* \n  Write a function that takes a string representing a musical note and returns the corresponding \n  number of beats. \n\n  >>> getBeats('.| o| o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.| ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring) {\n      count++;\n    }\n    index++;\n  }\n  return count;\n};\n\n/**\n * Given a string, return all possible permutations of that string.\n * If no permutations can be made, return an empty array.\n * If there are multiple permutations, return an array with all the permutations.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with all the permutations of those strings.\n * If there are multiple strings in the string, return an array with ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from largest to smallest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => b - a);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalDecimalDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  3.5\n  */\nconst truncateDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimalDecimalDecimalDecimalNumber = (number) => {\n  const decimal = number.toString().split('.')", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const [minDistance, closest] = numbers.reduce((minDistance, number) => {\n    const distance = Math.abs(number - numbers[numbers.length - 1]);\n    if (distance < minDistance) {\n      minDistance = distance;\n      closest = number;\n    }\n    return minDistance;\n  }, Number.MAX_VALUE);\n  return [closest, minDistance];\n};\n\n/**\n * Given a string, return the first letter of the string if it is a lowercase letter, \n * otherwise return an empty string.\n * \n * >>> firstLetter('hello')\n 'H'\n * >>> firstLetter('HELLO')\n 'H'\n * >>> firstLetter('HELLOWORLD')\n 'H'\n */\nconst firstLetter = (str) => {\n  return str[0] === str[0].toLowerCase()? str.slice(1) : '';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a lowercase letter, \n * otherwise return an empty string.\n * \n * >>> firstLetter('hello')\n 'H'\n * >>> firstLetter('HELLO')\n 'H'\n * >>> firstLetter('HELLOWORLD')\n 'H'\n */\nconst firstLetterOrEmpty = (str) => {\n  return str[0] === str[0].toLowerCase()? str.slice(1) : '';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a lowercase letter, \n * otherwise return an empty string.\n * \n * >>> firstLetterOrEmpty('hello')\n 'H'\n * >>> firstLetterOrEmpty('HELLO')\n 'H'\n * >>> firstLetterOrEmpty('HELLOWORLD')\n 'H'\n */\nconst firstLetterOrEmptyOrEmpty = (str) => {\n  return str[0] === str[0].toLowerCase()? str.slice(1) : '';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a lowercase letter, \n * otherwise return an empty string.\n * \n * >>> firstLetterOrEmptyOrEmpty('hello')\n 'H'\n * >>> firstLetterOrEmptyOrEmpty('HELLO')\n 'H'\n * >>> firstLetterOrEmptyOrEmpty('HELLOWORLD')\n 'H'\n */\nconst firstLetterOrEmptyOrEmptyOrEmpty = (str) => {\n  return str[0] === str[0].toLowerCase()? str.slice(1) : '';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a lowercase letter, \n * otherwise return an empty string.\n * \n * >>> firstLetterOrEmptyOrEmptyOrEmpty('hello')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmpty('HELLO')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmpty('HELLOWORLD')\n 'H'\n */\nconst firstLetterOrEmptyOrEmptyOrEmptyOrEmpty = (str) => {\n  return str[0] === str[0].toLowerCase()? str.slice(1) : '';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a lowercase letter, \n * otherwise return an empty string.\n * \n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmpty('hello')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmpty('HELLO')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmpty('HELLOWORLD')\n 'H'\n */\nconst firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty = (str) => {\n  return str[0] === str[0].toLowerCase()? str.slice(1) : '';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a lowercase letter, \n * otherwise return an empty string.\n * \n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('hello')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('HELLO')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('HELLOWORLD')\n 'H'\n */\nconst firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty = (str) => {\n  return str[0] === str[0].toLowerCase()? str.slice(1) : '';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a lowercase letter, \n * otherwise return an empty string.\n * \n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('hello')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('HELLO')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('HELLOWORLD')\n 'H'\n */\nconst firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty = (str) => {\n  return str[0] === str[0].toLowerCase()? str.slice(1) : '';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a lowercase letter, \n * otherwise return an empty string.\n * \n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('hello')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('HELLO')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('HELLOWORLD')\n 'H'\n */\nconst firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty = (str) => {\n  return str[0] === str[0].toLowerCase()? str.slice(1) : '';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a lowercase letter, \n * otherwise return an empty string.\n * \n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('hello')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('HELLO')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('HELLOWORLD')\n 'H'\n */\nconst firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty = (str) => {\n  return str[0] === str[0].toLowerCase()? str.slice(1) : '';\n};\n\n/**\n * Given a string, return the first letter of the string if it is a lowercase letter, \n * otherwise return an empty string.\n * \n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('hello')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('HELLO')\n 'H'\n * >>> firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty('HELLOWORLD')\n 'H'\n */\nconst firstLetterOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmptyOrEmpty = (str) => {\n  return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, val) => [Math.min(acc, val), Math.max(acc, val)], [0, 0])\n  return numbers.map((val) => val / Math.max(min, Math.min(max, val)))\n}\n\n/**\n * Given a number, return its closest power of 2\n * >>> closestPowerOfTwo(10)\n  2\n  >>> closestPowerOfTwo(20)\n  4\n  >>> closestPowerOfTwo(30)\n  8\n  >>> closestPowerOfTwo(100)\n  16\n  >>> closestPowerOfTwo(1000)\n  32\n  >>> closestPowerOfTwo(10000)\n  64\n  >>> closestPowerOfTwo(1000000)\n  128\n  >>> closestPowerOfTwo(1000000000)\n  256\n  >>> closestPowerOfTwo(10000000000)\n  512\n  >>> closestPowerOfTwo(100000000000)\n  1024\n  >>> closestPowerOfTwo(10000000000000)\n  2048\n  >>> closestPowerOfTwo(1000000000000000)\n  4096\n  >>> closestPowerOfTwo(10000000000000000)\n  8192\n  >>> closestPowerOfTwo(1000000000000000001)\n  16384\n  >>> closestPowerOfTwo(1000000000000000000)\n  32768\n  >>> closestPowerOfTwo(100000000000000000000)\n  65536\n  >>> closestPowerOfTwo(100000000000000000000)\n  131072\n  >>> closestPowerOfTwo(10000000000000000000000)\n  262144\n  >>> closestPowerOfTwo(10000000000000000000000)\n  524288\n  >>> closestPowerOfTwo(1000000000000000000000000)\n  1048576\n  >>> closestPowerOfTwo(1000000000000000000000000)\n  2097152\n  >>> closestPowerOfTwo(10000000000000000000000000)\n  4194304\n  >>> closestPowerOfTwo(100000000000000000000000000)\n  8388608\n  >>> closestPowerOfTwo(100000000000000000000000000)\n  16777216\n  >>> closestPowerOfTwo(1000000000000000000000000000)\n  33554432\n  >>> closestPowerOfTwo(1000000000000000000000000000)\n  67108864\n  >>> closestPowerOfTwo(10000000000000000000000000000)\n  134217728\n  >>> closestPowerOfTwo(10000000000000000000000000000)\n  268435456\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  536870912\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  1073741824\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  2147483648\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  4294967296\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  8589934592\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  17179869184\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  34359738368\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  68719476736\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  13421772799\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  26843545184\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  536870911592\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  10737418240\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  214748364800\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  429496729600\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  85899345920\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  1717986918480\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  3435973836800\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  6871947673600\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  2147483648096\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  4294967296080\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  8589934592080\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  171798691848096\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  34359738368096\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  858993459208096\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  1717986918480960\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  343597383680960\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  214748364809600\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  42949672960800\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  85899345920800\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  17179869184809600\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  3435973836800\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  85899345920809600\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  1717986918480960\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  3435973836800\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  214748364809600\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  42949672960800\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  85899345920800\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  17179869184809600\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  3435973836800\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  85899345920809600\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  1717986918480960\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  3435973836800\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  214748364809600\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  42949672960800\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  85899345920800\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  17179869184809600\n  >>> closestPowerOfTwo(100000000000000000000000000000)\n  3435973836800\n  >>> closestPowerOfTwo(1000000000000000000000000000000)\n  85899345920", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter gave list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value));\n};\n\n/**\n * Filter gave list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter gave list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter gave list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter gave list of any python values only for dictionaries\n  >>> filterDicts(['a', 3.14, 5])\n  [5]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDicts = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter gave list of any python values only for sets (no duplicates)\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  [5]\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n// Return true if string starts with given prefix\nconst startsWith = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n// Return true if string ends with given suffix\nconst endsWith = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n// Return true if string contains given substring\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstring = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string contains given substring\nconst containsSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string starts with given substring\nconst startsWithSubstringSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n// Return true if string ends with given substring\nconst endsWithSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string contains given substring\nconst containsSubstringSubstringSubstringSubstringSubstringSubstring = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.indexOf(substring))!== -1\n}\n\n// Return true if string starts with ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisor(15)\n * 5\n */\nconst largestDivisorEven = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEven(15)\n * 5\n */\nconst largestDivisorEvenSmaller = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenSmaller(15)\n * 5\n */\nconst largestDivisorEvenSmallerSmaller = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenSmallerSmaller(15)\n * 5\n */\nconst largestDivisorEvenSmallerSmallerSmaller = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenSmallerSmallerSmaller(15)\n * 5\n */\nconst largestDivisorEvenSmallerSmallerSmallerSmaller = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenSmallerSmallerSmallerSmaller(15)\n * 5\n */\nconst largestDivisorEvenSmallerSmallerSmallerSmallerSmaller = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenSmallerSmallerSmallerSmallerSmaller(15)\n * 5\n */\nconst largestDivisorEvenSmallerSmallerSmallerSmallerSmallerSmaller = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenSmallerSmallerSmallerSmallerSmallerSmaller(15)\n * 5\n */\nconst largestDivisorEvenSmallerSmallerSmallerSmallerSmallerSmallerSmaller = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenSmallerSmallerSmallerSmallerSmallerSmallerSmaller(15)\n * 5\n */\nconst largestDivisorEvenSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmaller = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmaller(15)\n * 5\n */\nconst largestDivisorEvenSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmaller = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmaller(15)\n * 5\n */\nconst largestDivisorEvenSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmaller = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly and smaller than n.\n * For a gave number n, found the largest number that divides n evenly, smaller than n\n * >>> largestDivisorEvenSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmallerSmaller", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let factor = 1;\n  let factors = [];\n  while (i <= n) {\n    factor = 1;\n    while (j <= n) {\n      if (n % j === 0) {\n        factor += j;\n        j++;\n      }\n      else {\n        factor *= j;\n      }\n    }\n    if (factor === 1) {\n      factors.push(factor);\n      i++;\n    }\n    else {\n      factors.push(factor);\n      j++;\n    }\n  }\n  return factors;\n};\n\n/* Return true if two numbers are equal, false otherwise. \n   Input numbers should be equal if they have same digits. \n  >>> isEqual(2, 2)\n  true\n  >>> isEqual(2, 3)\n  false\n  >>> isEqual(2, 4)\n  false\n  >>> isEqual(2, 5)\n  false\n  >>> isEqual(2, 6)\n  false\n  >>> isEqual(2, 7)\n  false\n  >>> isEqual(2, 8)\n  false\n  >>> isEqual(2, 9)\n  false\n  >>> isEqual(2, 10)\n  false\n  >>> isEqual(2, 11)\n  false\n  >>> isEqual(2, 12)\n  false\n  >>> isEqual(2, 13)\n  false\n  >>> isEqual(2, 14)\n  false\n  >>> isEqual(2, 15)\n  false\n  >>> isEqual(2, 16)\n  false\n  >>> isEqual(2, 17)\n  false\n  >>> isEqual(2, 18)\n  false\n  >>> isEqual(2, 19)\n  false\n  >>> isEqual(2, 20)\n  false\n  >>> isEqual(2, 21)\n  false\n  >>> isEqual(2, 22)\n  false\n  >>> isEqual(2, 23)\n  false\n  >>> isEqual(2, 24)\n  false\n  >>> isEqual(2, 25)\n  false\n  >>> isEqual(2, 26)\n  false\n  >>> isEqual(2, 27)\n  false\n  >>> isEqual(2, 28)\n  false\n  >>> isEqual(2, 29)\n  false\n  >>> isEqual(2, 30)\n  false\n  >>> isEqual(2, 31)\n  false\n  >>> isEqual(2, 32)\n  false\n  >>> isEqual(2, 33)\n  false\n  >>> isEqual(2, 34)\n  false\n  >>> isEqual(2, 35)\n  false\n  >>> isEqual(2, 36)\n  false\n  >>> isEqual(2, 37)\n  false\n  >>> isEqual(2, 38)\n  false\n  >>> isEqual(2, 39)\n  false\n  >>> isEqual(2, 40)\n  false\n  >>> isEqual(2, 41)\n  false\n  >>> isEqual(2, 42)\n  false\n  >>> isEqual(2, 43)\n  false\n  >>> isEqual(2, 44)\n  false\n  >>> isEqual(2, 45)\n  false\n  >>> isEqual(2, 46)\n  false\n  >>> isEqual(2, 47)\n  false\n  >>> isEqual(2, 48)\n  false\n  >>> isEqual(2, 49)\n  false\n  >>> isEqual(2, 50)\n  false\n  >>> isEqual(2, 51)\n  false\n  >>> isEqual(2, 52)\n  false\n  >>> isEqual(2, 53)\n  false\n  >>> isEqual(2, 54)\n  false\n  >>> isEqual(2, 55)\n  false\n  >>> isEqual(2, 56)\n  false\n  >>> isEqual(2, 57)\n  false\n  >>> isEqual(2, 58)\n  false\n  >>> isEqual(2, 59)\n  false\n  >>> isEqual(2, 60)\n  false\n  >>> isEqual(2, 61)\n  false\n  >>> isEqual(2, 62)\n  false\n  >>> isEqual(2, 63)\n  false\n  >>> isEqual(2, 64)\n  false\n  >>> isEqual(2, 65)\n  false\n  >>> isEqual(2, 66)\n  false\n  >>> isEqual(2, 67)\n  false\n  >>> isEqual(2, 68)\n  false\n  >>> isEqual(2, 69)\n  false\n  >>> isEqual(2, 70)\n  false\n  >>> isEqual(2, 71)\n  false\n  >>> isEqual(2, 72)\n  false\n  >>> isEqual(2, 73)\n  false\n  >>> isEqual(2, 74)\n  false\n  >>> isEqual(2, 75)\n  false\n  >>> isEqual(2, 76)\n  false\n  >>> isEqual(2, 77)\n  false\n  >>> isEqual(2, 78)\n  false\n  >>> isEqual(2, 79)\n  false\n  >>> isEqual(2, 80)\n  false\n  >>> isEqual(2, 81)\n  false\n  >>> isEqual(2, 82)\n  false\n  >>> isEqual(2, 83)\n  false\n  >>> isEqual(2, 84)\n  false\n  >>> isEqual(2, 85)\n  false\n  >>> isEqual(2, 86)\n  false\n  >>> isEqual(2, 87)\n  false\n  >>> isEqual(2, 88)\n  false\n  >>> isEqual(2, 89)\n  false\n  >>> isEqual(2, 90)\n  false\n  >>> isEqual(2, 91)\n  false\n  >>> isEqual(2, 92)\n  false\n  >>> isEqual(2, 93)\n  false\n  >>> isEqual(2, 94)\n  false\n  >>> isEqual(2, 95)\n  false\n  >>> isEqual(2, 96)\n  false\n  >>> isEqual(2, 97)\n  false\n  >>> isEqual(2, 98)\n  false\n  >>> isEqual(2, 99)\n  false\n  >>> isEqual(2, 100)\n  false\n  >>> isEqual(2, 101)\n  false\n  >>> isEqual(2, 102)\n  false\n  >>> isEqual(2, 103)\n  false\n  >>> isEqual(2, 104)\n  false\n  >>> isEqual(2, 105)\n  false\n  >>> isEqual(2, 106)\n  false\n  >>> isEqual(2, 107)\n  false\n  >>> isEqual(2, 108)\n  false\n  >>> isEqual(2, 109)\n  false\n  >>> isEqual(2, 110)\n  false\n  >>> isEqual(2, 111)\n  false\n  >>> isEqual(2, 112)\n  false\n  >>> isEqual(2, 113)\n  false\n  >>> isEqual(2, 114)\n  false\n  >>> isEqual(2, 115)\n  false\n  >>> isEqual(2, 116)\n  false\n  >>> isEqual(2, 117)\n  false\n  >>> isEqual(2, 118)\n  false\n  >>> isEqual(2, 119)\n  false\n  >>> isEqual(2, 120)\n  false\n  >>> isEqual(2, 121)\n  false\n  >>> isEqual(2, 122)\n  false\n  >>> isEqual(2, 123)\n  false\n  >>> isEqual(2, 124)\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to \n   the given number. Kept order of elements left the same as in the input.\n  >>> removeLessThanOrEqual([1, 2, 3, 2, 4])\n  [1, 2, 4]\n  */\nconst removeLessThanOrEqual = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    if (number <= numbers[i]) {\n      continue;\n    }\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than the given \n   number. Kept order of elements left the same as in the input.\n  >>> removeMoreThan([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeMoreThan = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    if (number >= numbers[i]) {\n      continue;\n    }\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or \n   equal to the given number. Kept order of elements left the same as in the \n   input.\n  >>> removeLessThanOrEqualMoreThan([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeLessThanOrEqualMoreThan = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    if (number <= numbers[i]) {\n      continue;\n    }\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than or \n   equal to the given number. Kept order of elements left the same as in the \n   input.\n  >>> removeMoreThanOrEqualMoreThan([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeMoreThanOrEqualMoreThan = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    if (number >= numbers[i]) {\n      continue;\n    }\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or \n   equal to the given number. Kept order of elements left the same as in the \n   input.\n  >>> removeLessThanOrEqualMoreThan([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeLessThanOrEqualMoreThan = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    if (number <= numbers[i]) {\n      continue;\n    }\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than the \n   given number. Kept order of elements left the same as in the input.\n  >>> removeMoreThanOrEqualMoreThan([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeMoreThanOrEqualMoreThan = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    if (number >= numbers[i]) {\n      continue;\n    }\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or \n   equal to the given number. Kept order of elements left the same as in the \n   input.\n  >>> removeLessThanOrEqualMoreThan([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeLessThanOrEqualMoreThan = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    if (number <= numbers[i]) {\n      continue;\n    }\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than the \n   given number. Kept order of elements left the same as in the input.\n  >>> removeMoreThanOrEqualMoreThan([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeMoreThanOrEqualMoreThan = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    if (number >= numbers[i]) {\n      continue;\n    }\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or \n   equal to the given number. Kept order of elements left the same as in the \n   input.\n  >>> removeLessThanOrEqualMoreThan([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeLessThanOrEqualMoreThan = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    if (number <= numbers[i]) {\n      continue;\n    }\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than the \n   given number. Kept order of elements left the same as in the input.\n  >>> removeMoreThanOrEqualMoreThan([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeMoreThanOrEqualMoreThan = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    if (number >= numbers[i]) {\n      continue;\n    }\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or \n   equal to the given number. Kept order of elements left the same as in the \n   input.\n  >>> removeLessThanOrEqualMoreThan([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeLessThanOrEqualMoreThan = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    if (number <= numbers[i]) {\n      continue;\n    }\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than the \n   given number. Kept order of elements left the same as in the input.\n  >>> removeMoreThanOrEqualMoreThan([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeMoreThanOrEqualMoreThan = (numbers) => {\n  let seen = {};\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    if (number ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toUpperCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to lowercase.\n * For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> convertCase('Hello')\n  'hello'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toUpperCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.\n * For a gave string, flipped uppercase characters to lowercase and lowercased to uppercase.\n  >>> convertCase('Hello')\n  'HELLO'\n  */\nconst convertCase = (string) => {\n  return string.toLowerCase().split('').reverse().join('')\n}\n\n/**\n * Converts a string to uppercase.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, curr, index) => {\n    return acc + (curr? curr.toString() : '');\n  }, '');\n};\n\n/**\n * Convert string to number\n * If string is not a number, return 0\n */\nconst toNumber = (val) => {\n  return typeof val === 'number'? val : 0;\n};\n\n/**\n * Convert string to boolean\n * If string is not a boolean, return false\n */\nconst toBoolean = (val) => {\n  return typeof val === 'boolean'? val : false;\n};\n\n/**\n * Convert string to object\n * If string is not a object, return {}\n */\nconst toObject = (val) => {\n  return typeof val === 'object'? val : {};\n};\n\n/**\n * Convert string to array\n * If string is not a array, return []\n */\nconst toArray = (val) => {\n  return Array.isArray(val)? val : [];\n};\n\n/**\n * Convert string to number\n * If string is not a number, return 0\n */\nconst toNumber = (val) => {\n  return typeof val === 'number'? val : 0;\n};\n\n/**\n * Convert string to boolean\n * If string is not a boolean, return false\n */\nconst toBoolean = (val) => {\n  return typeof val === 'boolean'? val : false;\n};\n\n/**\n * Convert string to object\n * If string is not a object, return {}\n */\nconst toObject = (val) => {\n  return typeof val === 'object'? val : {};\n};\n\n/**\n * Convert string to array\n * If string is not a array, return []\n */\nconst toArray = (val) => {\n  return Array.isArray(val)? val : [];\n};\n\n/**\n * Convert string to number\n * If string is not a number, return 0\n */\nconst toNumber = (val) => {\n  return typeof val === 'number'? val : 0;\n};\n\n/**\n * Convert string to boolean\n * If string is not a boolean, return false\n */\nconst toBoolean = (val) => {\n  return typeof val === 'boolean'? val : false;\n};\n\n/**\n * Convert string to object\n * If string is not a object, return {}\n */\nconst toObject = (val) => {\n  return typeof val === 'object'? val : {};\n};\n\n/**\n * Convert string to array\n * If string is not a array, return []\n */\nconst toArray = (val) => {\n  return Array.isArray(val)? val : [];\n};\n\n/**\n * Convert string to number\n * If string is not a number, return 0\n */\nconst toNumber = (val) => {\n  return typeof val === 'number'? val : 0;\n};\n\n/**\n * Convert string to boolean\n * If string is not a boolean, return false\n */\nconst toBoolean = (val) => {\n  return typeof val === 'boolean'? val : false;\n};\n\n/**\n * Convert string to object\n * If string is not a object, return {}\n */\nconst toObject = (val) => {\n  return typeof val === 'object'? val : {};\n};\n\n/**\n * Convert string to array\n * If string is not a array, return []\n */\nconst toArray = (val) => {\n  return Array.isArray(val)? val : [];\n};\n\n/**\n * Convert string to number\n * If string is not a number, return 0\n */\nconst toNumber = (val) => {\n  return typeof val === 'number'? val : 0;\n};\n\n/**\n * Convert string to boolean\n * If string is not a boolean, return false\n */\nconst toBoolean = (val) => {\n  return typeof val === 'boolean'? val : false;\n};\n\n/**\n * Convert string to object\n * If string is not a object, return {}\n */\nconst toObject = (val) => {\n  return typeof val === 'object'? val : {};\n};\n\n/**\n * Convert string to array\n * If string is not a array, return []\n */\nconst toArray = (val) => {\n  return Array.isArray(val)? val : [];\n};\n\n/**\n * Convert string to number\n * If string is not a number, return 0\n */\nconst toNumber = (val) => {\n  return typeof val === 'number'? val : 0;\n};\n\n/**\n * Convert string to boolean\n * If string is not a boolean, return false\n */\nconst toBoolean = (val) => {\n  return typeof val === 'boolean'? val : false;\n};\n\n/**\n * Convert string to object\n * If string is not a object, return {}\n */\nconst toObject = (val) => {\n  return typeof val === 'object'? val : {};\n};\n\n/**\n * Convert string to array\n * If string is not a array, return []\n */\nconst toArray = (val) => {\n  return Array.isArray(val)? val : [];\n};\n\n/**\n * Convert string to number\n * If string is not a number, return 0\n */\nconst toNumber = (val) => {\n  return typeof val === 'number'? val : 0;\n};\n\n/**\n * Convert string to boolean\n * If string is not a boolean, return false\n */\nconst toBoolean = (val) => {\n  return typeof val === 'boolean'? val : false;\n};\n\n/**\n * Convert string to object\n * If string is not a object, return {}\n */\nconst toObject = (val) => {\n  return typeof val === 'object'? val : {};\n};\n\n/**\n * Convert string to array\n * If string is not a array, return []\n */\nconst toArray = (val) => {\n  return Array.isArray(val)? val : [];\n};\n\n/**\n * Convert string to number\n * If string is not a number, return 0\n */\nconst toNumber = (val) => {\n  return typeof val === 'number'? val : 0;\n};\n\n/**\n * Convert string to boolean\n * If string is not a boolean, return false\n */\nconst toBoolean = (val) => {\n  return typeof val === 'boolean'? val : false;\n};\n\n/**\n * Convert string to object\n * If string is not a object, return {}\n */\nconst toObject = (val) => {\n  return typeof val === 'object'? val : {};\n};\n\n/**\n * Convert string to array\n * If string is not a array, return []\n */\nconst toArray = (val) => {\n  return Array.isArray(val)? val : [];\n};\n\n/**\n * Convert string to number\n * If string is not a number, return 0\n */\nconst toNumber = (val) => {\n  return typeof val === 'number'? val : 0;\n};\n\n/**\n * Convert string to boolean\n * If string is not a boolean, return false\n */\nconst toBoolean = (val) => {\n  return typeof val === 'boolean'? val : false;\n};\n\n/**\n * Convert string to object\n * If string is not a object, return {}\n */\nconst toObject = (val) => {\n  return typeof val === 'object'? val : {};\n};\n\n/**\n * Convert string to array\n * If string is not a array, return []\n */\nconst toArray = (val) => {\n  return Array.isArray(val)? val : [];\n};\n\n/**\n * Convert string to number\n * If string is not a number, return 0\n */\nconst toNumber = (val) => {\n  return typeof val === 'number'? val : 0;\n};\n\n/**\n * Convert string to boolean\n * If string is not a boolean, return false\n */\nconst toBoolean = (val) => {\n  return typeof val === 'boolean'? val : false;\n};\n\n/**\n * Convert string to object\n * If string is not a object, return {}\n */\nconst toObject = (val) => {\n  return typeof val === 'object'? val : {};\n};\n\n/**\n * Convert string to array\n * If string is not a array, return []\n */\nconst toArray = (val) => {\n  return Array.isArray(val)? val : [];\n};\n\n/**\n * Convert string to number\n * If string is not a number, return 0\n */\nconst toNumber = (val) => {\n  return typeof val === 'number", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for the ones that ended with a gave suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for the ones that do not start with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefix = filterByPrefix\n\n/**\n * Filter an input list of strings only for the ones that do not end with a gave suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffix = filterBySuffix\n\n/**\n * Filter an input list of strings only for the ones that do not start with a gave suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefix = filterByPrefix\n\n/**\n * Filter an input list of strings only for the ones that do not end with a gave suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffix = filterBySuffix\n\n/**\n * Filter an input list of strings only for the ones that do not start with a gave suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefix = filterByPrefix\n\n/**\n * Filter an input list of strings only for the ones that do not end with a gave suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffix = filterBySuffix\n\n/**\n * Filter an input list of strings only for the ones that do not start with a gave suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefix = filterByPrefix\n\n/**\n * Filter an input list of strings only for the ones that do not end with a gave suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffix = filterBySuffix\n\n/**\n * Filter an input list of strings only for the ones that do not start with a gave suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefix = filterByPrefix\n\n/**\n * Filter an input list of strings only for the ones that do not end with a gave suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffix = filterBySuffix\n\n/**\n * Filter an input list of strings only for the ones that do not start with a gave suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefix = filterByPrefix\n\n/**\n * Filter an input list of strings only for the ones that do not end with a gave suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffix = filterBySuffix\n\n/**\n * Filter an input list of strings only for the ones that do not start with a gave suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefix = filterByPrefix\n\n/**\n * Filter an input list of strings only for the ones that do not end with a gave suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffix = filterBySuffix\n\n/**\n * Filter an input list of strings only for the ones that do not start with a gave suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefix = filterByPrefix\n\n/**\n * Filter an input list of strings only for the ones that do not end with a gave suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffix = filterBySuffix\n\n/**\n * Filter an input list of strings only for the ones that do not start with a gave suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefix = filterByPrefix\n\n/**\n * Filter an input list of strings only for the ones that do not end with a gave suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffix = filterBySuffix\n\n/**\n * Filter an input list of strings only for the ones that do not start with a gave suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefix = filterByPrefix\n\n/**\n * Filter an input list of strings only for the ones that do not end with a gave suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffix = filterBySuffix\n\n/**\n * Filter an input list of strings only for the ones that do not start with a gave suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZeropassed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x >= 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible = (l) => {\n  return l.filter(x => x % 3 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleAndMultipleOf3 = (l) => {\n  return l.filter(x => x % 3 === 0 && x!== 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleAndMultipleOf3([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> getDivisibleAndMultipleOf3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleAndMultipleOf3AndMultipleOf5 = (l) => {\n  return l.filter(x => x % 3 === 0 && x!== 0 && x % 5 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7 = (l) => {\n  return l.filter(x => x % 3 === 0 && x!== 0 && x % 5 === 0 && x % 7 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9 = (l) => {\n  return l.filter(x => x % 3 === 0 && x!== 0 && x % 5 === 0 && x % 7 === 0 && x % 9 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9AndMultipleOf11 = (l) => {\n  return l.filter(x => x % 3 === 0 && x!== 0 && x % 5 === 0 && x % 7 === 0 && x % 9 === 0 && x % 11 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9AndMultipleOf11([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9AndMultipleOf11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9AndMultipleOf11AndMultipleOf13 = (l) => {\n  return l.filter(x => x % 3 === 0 && x!== 0 && x % 5 === 0 && x % 7 === 0 && x % 9 === 0 && x % 11 === 0 && x % 13 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9AndMultipleOf11AndMultipleOf13([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9AndMultipleOf11AndMultipleOf13([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9AndMultipleOf11AndMultipleOf13AndMultipleOf15 = (l) => {\n  return l.filter(x => x % 3 === 0 && x!== 0 && x % 5 === 0 && x % 7 === 0 && x % 9 === 0 && x % 11 === 0 && x % 13 === 0 && x % 15 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9AndMultipleOf11AndMultipleOf13AndMultipleOf15([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9AndMultipleOf11AndMultipleOf13AndMultipleOf15([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9AndMultipleOf11AndMultipleOf13AndMultipleOf15AndMultipleOf17 = (l) => {\n  return l.filter(x => x % 3 === 0 && x!== 0 && x % 5 === 0 && x % 7 === 0 && x % 9 === 0 && x % 11 === 0 && x % 13 === 0 && x % 15 === 0 && x % 17 === 0)\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9AndMultipleOf11AndMultipleOf13AndMultipleOf15AndMultipleOf17([-1, 2, -4, 5, 6])\n  [2, 3, 5]\n  >>> getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf7AndMultipleOf9AndMultipleOf11AndMultipleOf13AndMultipleOf15AndMultipleOf17([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getDivisibleAndMultipleOf3AndMultipleOf5AndMultipleOf", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrimeOrZero = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrimeOrZero(13441)\n  true\n  >>> isPrimeOrZero(61)\n  true\n  >>> isPrimeOrZero(4)\n  false\n  >>> isPrimeOrZero(1)\n  false\n  */\nconst isOdd = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isOdd(13441)\n  false\n  >>> isOdd(61)\n  false\n  >>> isOdd(4)\n  true\n  >>> isOdd(1)\n  true\n  */\nconst isEven = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isEven(13441)\n  false\n  >>> isEven(61)\n  false\n  >>> isEven(4)\n  true\n  >>> isEven(1)\n  true\n  */\nconst isDivisible = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isDivisible(13441)\n  true\n  >>> isDivisible(61)\n  true\n  >>> isDivisible(4)\n  false\n  >>> isDivisible(1)\n  false\n  */\nconst isPrimeOrDivisible = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrimeOrDivisible(13441)\n  true\n  >>> isPrimeOrDivisible(61)\n  true\n  >>> isPrimeOrDivisible(4)\n  false\n  >>> isPrimeOrDivisible(1)\n  false\n  */\nconst isMultipleOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOf(13441)\n  false\n  >>> isMultipleOf(61)\n  false\n  >>> isMultipleOf(4)\n  true\n  >>> isMultipleOf(1)\n  true\n  */\nconst isMultipleOfPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOfPrime(13441)\n  true\n  >>> isMultipleOfPrime(61)\n  true\n  >>> isMultipleOfPrime(4)\n  false\n  >>> isMultipleOfPrime(1)\n  false\n  */\nconst isMultipleOfOdd = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOfOdd(13441)\n  false\n  >>> isMultipleOfOdd(61)\n  false\n  >>> isMultipleOfOdd(4)\n  true\n  >>> isMultipleOfOdd(1)\n  true\n  */\nconst isMultipleOfEven = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOfEven(13441)\n  false\n  >>> isMultipleOfEven(61)\n  false\n  >>> isMultipleOfEven(4)\n  true\n  >>> isMultipleOfEven(1)\n  true\n  */\nconst isMultipleOfDivisible = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOfDivisible(13441)\n  true\n  >>> isMultipleOfDivisible(61)\n  true\n  >>> isMultipleOfDivisible(4)\n  false\n  >>> isMultipleOfDivisible(1)\n  false\n  */\nconst isMultipleOfPrimeOrDivisible = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOfPrimeOrDivisible(13441)\n  true\n  >>> isMultipleOfPrimeOrDivisible(61)\n  true\n  >>> isMultipleOfPrimeOrDivisible(4)\n  false\n  >>> isMultipleOfPrimeOrDivisible(1)\n  false\n  */\nconst isMultipleOfMultipleOf = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOfMultipleOf(13441)\n  false\n  >>> isMultipleOfMultipleOf(61)\n  false\n  >>> isMultipleOfMultipleOf(4)\n  true\n  >>> isMultipleOfMultipleOf(1)\n  true\n  */\nconst isMultipleOfMultipleOfPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOfMultipleOfPrime(13441)\n  true\n  >>> isMultipleOfMultipleOfPrime(61)\n  true\n  >>> isMultipleOfMultipleOfPrime(4)\n  false\n  >>> isMultipleOfMultipleOfPrime(1)\n  false\n  */\nconst isMultipleOfMultipleOfOdd = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isMultipleOfMultipleOfOdd(13441)\n  false\n  >>> isMultipleOfMultipleOfOdd(61)\n  false\n  >>> isMultipleOfMultipleOfOdd(4)\n  true", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n   let zero = 0;\n   let nonZero = 0;\n   let max = 0;\n   xs.forEach((item, index)=>{\n     if(item!= 0){\n       if(nonZero < max){\n         zero = item;\n         nonZero++;\n       }\n       else{\n         max = nonZero;\n         zero = item;\n       }\n     }\n   });\n   return zero;\n}\n\n/* \n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \nconst poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n   let zero = 0;\n   let nonZero = 0;\n   let max = 0;\n   xs.forEach((item, index)=>{\n     if(item!= 0){\n       if(nonZero < max){\n         zero = item;\n         nonZero++;\n       }\n       else{\n         max = nonZero;\n         zero = item;\n       }\n     }\n   });\n   return zero;\n}\n\n/* \n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \nconst poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n   let zero = 0;\n   let nonZero = 0;\n   let max = 0;\n   xs.forEach((item, index)=>{\n     if(item!= 0){\n       if(nonZero < max){\n         zero = item;\n         nonZero++;\n       }\n       else{\n         max = nonZero;\n         zero = item;\n       }\n     }\n   });\n   return zero;\n}\n\n/* \n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \nconst poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n   let zero = 0;\n   let nonZero = 0;\n   let max = 0;\n   xs.forEach((item, index)=>{\n     if(item!= 0){\n       if(nonZero < max){\n         zero = item;\n         nonZero++;\n       }\n       else{\n         max = nonZero;\n         zero = item;\n       }\n     }\n   });\n   return zero;\n}\n\n/* \n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \nconst poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n   let zero = 0;\n   let nonZero = 0;\n   let max = 0;\n   xs.forEach((item, index)=>{\n     if(item!= 0){\n       if(nonZero < max){\n         zero = item;\n         nonZero++;\n       }\n       else{\n         max = nonZero;\n         zero = item;\n       }\n     }\n   });\n   return zero;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSort([1, 2, 3])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortThirdAndSort([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5, 1]\n  */\nconst sortThirdAndSort = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => a - b);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSort([1, 2, 3])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortThirdAndSort([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5, 1]\n  */\nconst sortThirdAndSortReverse = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortReverse([1, 2, 3])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortThirdAndSortReverse([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5, 1]\n  */\nconst sortThirdAndSortReverse = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortReverse([1, 2, 3])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortThirdAndSortReverse([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5, 1]\n  */\nconst sortThirdAndSortReverseReverse = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortReverseReverse([1, 2, 3])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortThirdAndSortReverseReverse([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5, 1]\n  */\nconst sortThirdAndSortReverseReverse = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortReverseReverse([1, 2, 3])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortThirdAndSortReverseReverse([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5, 1]\n  */\nconst sortThirdAndSortReverseReverseReverse = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortReverseReverseReverse([1, 2, 3])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortThirdAndSortReverseReverseReverse([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5, 1]\n  */\nconst sortThirdAndSortReverseReverseReverse = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortReverseReverseReverse([1, 2, 3])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortThirdAndSortReverseReverseReverse([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5, 1]\n  */\nconst sortThirdAndSortReverseReverseReverse = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortReverseReverseReverse([1, 2, 3])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortThirdAndSortReverseReverseReverse([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5, 1]\n  */\nconst sortThirdAndSortReverseReverseReverse = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortReverseReverseReverse([1, 2, 3])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortThirdAndSortReverseReverseReverse([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5, 1]\n  */\nconst sortThirdAndSortReverseReverseReverseReverse = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortReverseReverseReverseReverse([1, 2, 3])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortThirdAndSortReverseReverseReverseReverse([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5, 1]\n  */\nconst sortThirdAndSortReverseReverseReverseReverse = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortReverseReverseReverseReverse([1, 2, 3])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortThirdAndSortReverseReverseReverseReverse([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5, 1]\n  */\nconst sortThirdAndSortReverseReverseReverseReverse = (l) => {\n  const l2 = l.slice(0);\n  l2.sort((a, b) => b - a);\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKey = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeys = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValue = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValues = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKey = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeys = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValue = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValues = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValuesAndKey = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValuesAndKeys = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValuesAndKeysAndValue = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValuesAndKeysAndValues = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValuesAndKeysAndValuesAndKey = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValuesAndKeysAndValuesAndKeys = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValuesAndKeysAndValuesAndKeysAndValue = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValuesAndKeysAndValuesAndKeysAndValues = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValuesAndKeysAndValuesAndKeysAndValuesAndKey = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValuesAndKeysAndValuesAndKeysAndValuesAndKeys = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValuesAndKeysAndValuesAndKeysAndValuesAndKeysAndValue = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueByKeysAndValuesAndKeysAndValuesAndKeysAndValuesAndKeysAndValuesAndKeysAndValues = (l, key) => {\n  let seen = {}\n  return l.filter(v =>!seen[v] = true)\n}\n\n/*Return sorted unique elements in a list\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], v => v)\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return average of the elements in the list.\n  >>> average([1, 2, 3])\n  1.5\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3.75\n  */\nconst average = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return standard deviation of the elements in the list.\n  >>> standardDeviation([1, 2, 3])\n  0.5\n  >>> standardDeviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst standardDeviation = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count - Math.pow(sum / count, 2));\n};\n\n/*Return variance of the elements in the list.\n  >>> variance([1, 2, 3])\n  1.4142135623730951\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.pow(sum / count - Math.pow(sum / count, 2), 0.5);\n};\n\n/*Return standard deviation of the elements in the list.\n  >>> variance([1, 2, 3])\n  0.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count - Math.pow(sum / count, 2));\n};\n\n/*Return standard deviation of the elements in the list.\n  >>> variance([1, 2, 3])\n  0.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count - Math.pow(sum / count, 2));\n};\n\n/*Return standard deviation of the elements in the list.\n  >>> variance([1, 2, 3])\n  0.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count - Math.pow(sum / count, 2));\n};\n\n/*Return standard deviation of the elements in the list.\n  >>> variance([1, 2, 3])\n  0.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count - Math.pow(sum / count, 2));\n};\n\n/*Return standard deviation of the elements in the list.\n  >>> variance([1, 2, 3])\n  0.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count - Math.pow(sum / count, 2));\n};\n\n/*Return standard deviation of the elements in the list.\n  >>> variance([1, 2, 3])\n  0.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count - Math.pow(sum / count, 2));\n};\n\n/*Return standard deviation of the elements in the list.\n  >>> variance([1, 2, 3])\n  0.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count - Math.pow(sum / count, 2));\n};\n\n/*Return standard deviation of the elements in the list.\n  >>> variance([1, 2, 3])\n  0.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count - Math.pow(sum / count, 2));\n};\n\n/*Return standard deviation of the elements in the list.\n  >>> variance([1, 2, 3])\n  0.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count - Math.pow(sum / count, 2));\n};\n\n/*Return standard deviation of the elements in the list.\n  >>> variance([1, 2, 3])\n  0.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count - Math.pow(sum / count, 2));\n};\n\n/*Return standard deviation of the elements in the list.\n  >>> variance([1, 2, 3])\n  0.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    count++;\n  }\n  return Math.sqrt(sum / count - Math.pow(sum / count, 2));\n};\n\n/*Return standard deviation of the elements in the list.\n  >>> variance([1, 2, 3])\n  0.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1.4142135623730951\n  */\nconst variance = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let i = n;\n  let j = 1;\n  while (i > 0) {\n    if (i % j === 0 && i % j === 11 || i % j === 13) {\n      count++;\n    }\n    i = Math.floor(i / j);\n    j++;\n  }\n  return count;\n};\n\n/*\n  Given an array of integers, return an array containing all the unique elements of the array.\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,7,8,9])\n  [1,2,3,4,5,6,7,8,9]\n  >>> unique([1,2,3,4,5,6,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  \n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  \n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  \n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  \n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  \n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  \n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddOdd = (l) => {\n  let even = []\n  let odd = []\n  \n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  \n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  \n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  \n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  \n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  \n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  \n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  \n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  \n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  \n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortEvenOddEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  \n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  \n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOddEvenOddEvenOddEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  \n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  \n  return [...odd,...even]\n}\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1));\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n  returns encoded string by cycl", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  if (n % 7 === 0) return 89;\n  return primeFib(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a prime number.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return isPrime(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a palindrome.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPalindrome = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return isPalindrome(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return isPalindromeOf(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return isPalindromeOf(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return isPalindromeOf(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return isPalindromeOf(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return isPalindromeOf(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return isPalindromeOf(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return isPalindromeOf(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return isPalindromeOf(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return isPalindromeOf(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return isPalindromeOf(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  return isPalindromeOf(Math.floor(n / 7));\n};\n\n/**\n * Given a number n, return true if it is a palindrome of n.\n * If n is even, return false.\n * If n is odd, return true.\n */\nconst isPalindromeOf = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0;\n  let sumOfSquares = 0;\n  let mean = 0;\n  let variance = 0;\n  let sumOfSquaredVariances = 0;\n  let meanOfSquares = 0;\n  let varianceOfSquares = 0;\n  let sumOfSquaredVarianceOfSquares = 0;\n  let meanOfSquared = 0;\n  let varianceOfSquared = 0;\n  let sumOfSquaredVarianceOfSquared = 0;\n  let meanOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let meanOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let varianceOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n  let sumOfSquaredVarianceOfSquareOfSquareOf", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToOne took a list of integers as an input. \n   it returned true if there was only one distinct element in the list that \n   sum to one, and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to two, and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to three, and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour took a list of integers as an input. \n   it returned true if there was four distinct elements in the list that \n   sum to four, and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive took a list of integers as an input. \n   it returned true if there was five distinct elements in the list that \n   sum to five, and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix took a list of integers as an input. \n   it returned true if there was six distinct elements in the list that \n   sum to six, and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven took a list of integers as an input. \n   it returned true if there was seven distinct elements in the list that \n   sum to seven, and false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToEight took a list of integers as an input. \n   it returned true if there was eight distinct elements in the list that \n   sum to eight, and false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToNine took a list of integers as an input. \n   it returned true if there was nine distinct elements in the list that \n   sum to nine, and false otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, 7])\n  false\n  >>> triplesSumToNine([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   let collisions=0;\n   let left=1;\n   let right=1;\n   let leftCollision=1;\n   let rightCollision=1;\n   let leftCollision2=1;\n   let rightCollision2=1;\n   let leftCollision3=1;\n   let rightCollision3=1;\n   let leftCollision4=1;\n   let rightCollision4=1;\n   let leftCollision5=1;\n   let rightCollision5=1;\n   let leftCollision6=1;\n   let rightCollision6=1;\n   let leftCollision7=1;\n   let rightCollision7=1;\n   let leftCollision8=1;\n   let rightCollision8=1;\n   let leftCollision9=1;\n   let rightCollision9=1;\n   let leftCollision10=1;\n   let rightCollision10=1;\n   let leftCollision11=1;\n   let rightCollision11=1;\n   let leftCollision12=1;\n   let rightCollision12=1;\n   let leftCollision13=1;\n   let rightCollision13=1;\n   let leftCollision14=1;\n   let rightCollision14=1;\n   let leftCollision15=1;\n   let rightCollision15=1;\n   let leftCollision16=1;\n   let rightCollision16=1;\n   let leftCollision17=1;\n   let rightCollision17=1;\n   let leftCollision18=1;\n   let rightCollision18=1;\n   let leftCollision19=1;\n   let rightCollision19=1;\n   let leftCollision20=1;\n   let rightCollision20=1;\n   let leftCollision21=1;\n   let rightCollision21=1;\n   let leftCollision22=1;\n   let rightCollision22=1;\n   let leftCollision23=1;\n   let rightCollision23=1;\n   let leftCollision24=1;\n   let rightCollision24=1;\n   let leftCollision25=1;\n   let rightCollision25=1;\n   let leftCollision26=1;\n   let rightCollision26=1;\n   let leftCollision27=1;\n   let rightCollision27=1;\n   let leftCollision28=1;\n   let rightCollision28=1;\n   let leftCollision29=1;\n   let rightCollision29=1;\n   let leftCollision30=1;\n   let rightCollision30=1;\n   let leftCollision31=1;\n   let rightCollision31=1;\n   let leftCollision32=1;\n   let rightCollision32=1;\n   let leftCollision33=1;\n   let rightCollision33=1;\n   let leftCollision34=1;\n   let rightCollision34=1;\n   let leftCollision35=1;\n   let rightCollision35=1;\n   let leftCollision36=1;\n   let rightCollision36=1;\n   let leftCollision37=1;\n   let rightCollision37=1;\n   let leftCollision38=1;\n   let rightCollision38=1;\n   let leftCollision39=1;\n   let rightCollision39=1;\n   let leftCollision40=1;\n   let rightCollision40=1;\n   let leftCollision41=1;\n   let rightCollision41=1;\n   let leftCollision42=1;\n   let rightCollision42=1;\n   let leftCollision43=1;\n   let rightCollision43=1;\n   let leftCollision44=1;\n   let rightCollision44=1;\n   let leftCollision45=1;\n   let rightCollision45=1;\n   let leftCollision46=1;\n   let rightCollision46=1;\n   let leftCollision47=1;\n   let rightCollision47=1;\n   let leftCollision48=1;\n   let rightCollision48=1;\n   let leftCollision49=1;\n   let rightCollision49=1;\n   let leftCollision50=1;\n   let rightCollision50=1;\n   let leftCollision51=1;\n   let rightCollision51=1;\n   let leftCollision52=1;\n   let rightCollision52=1;\n   let leftCollision53=1;\n   let rightCollision53=1;\n   let leftCollision54=1;\n   let rightCollision54=1;\n   let leftCollision55=1;\n   let rightCollision55=1;\n   let leftCollision56=1;\n   let rightCollision56=1;\n   let leftCollision57=1;\n   let rightCollision57=1;\n   let leftCollision58=1;\n   let rightCollision58=1;\n   let leftCollision59=1;\n   let rightCollision59=1;\n   let leftCollision60=1;\n   let rightCollision60=1;\n   let leftCollision61=1;\n   let rightCollision61=1;\n   let leftCollision62=1;\n   let rightCollision62=1;\n   let leftCollision63=1;\n   let rightCollision63=1;\n   let leftCollision64=1;\n   let rightCollision64=1;\n   let leftCollision65=1;\n   let rightCollision65=1;\n   let leftCollision66=1;\n   let rightCollision66=1;\n   let leftCollision67=1;\n   let rightCollision67=1;\n   let leftCollision68=1;\n   let rightCollision68=1;\n   let leftCollision69=1;\n   let rightCollision69=1;\n   let leftCollision70=1;\n   let rightCollision70=1;\n   let leftCollision71=1;\n   let rightCollision71=1;\n   let leftCollision72=1;\n   let rightCollision72=1;\n   let leftCollision73=1;\n   let rightCollision73=1;\n   let leftCollision74=1;\n   let rightCollision74=1;\n   let leftCollision75=1;\n   let rightCollision75=1;\n   let leftCollision76=1;\n   let rightCollision76=1;\n   let leftCollision77=1;\n   let rightCollision77=1;\n   let leftCollision78=1;\n   let rightCollision78=1;\n   let leftCollision79=1;\n   let rightCollision79=1;\n   let leftCollision80=1;\n   let rightCollision80=1;\n   let leftCollision81=1;\n   let rightCollision81=1;\n   let leftCollision82=1;\n   let rightCollision82=1;\n   let leftCollision83=1;\n   let rightCollision83=1;\n   let leftCollision84=1;\n   let rightCollision84=1;\n   let leftCollision85=1;\n   let rightCollision85=1;\n   let leftCollision86=", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(i);\n  while (i--) {\n    res[i] = i + 1;\n  }\n  return res;\n};\n\n/**\n * Returns true if two lists are equal, false otherwise.\n * If two lists are equal, they must have the same length.\n * If two lists are equal, they must have the same elements.\n * If two lists are equal, they must have the same order.\n * If two lists are equal, they must have the same first element.\n * If two lists are equal, they must have the same last element.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, they must have the same first and last elements.\n * If two lists are equal, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  removeDuplicates\n  Given a list of numbers, remove all duplicates.\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n  >>> removeDuplicates([1, 3, 1, 2, 2, 3])\n  [1, 2, 3, 2]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let s = x.toString(base);\n  while (s.length < base) {\n    s = '0' + s;\n  }\n  return s;\n}\n\n/*Convert string to hexadecimal number.\n   >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hexToNum('0xff')\n  255\n  >>> hex", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI * h) / a;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(3, 5)\n  1.5\n  */\nconst triangleArea = (b, w) => {\n  const area = (2 * Math.PI * w) / b;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 5)\n  2.5\n  */\nconst triangleArea = (c, h) => {\n  const area = (2 * Math.PI * h) / c;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(7, 5)\n  1.5\n  */\nconst triangleArea = (d, w) => {\n  const area = (2 * Math.PI * w) / d;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(8, 5)\n  1.5\n  */\nconst triangleArea = (e, h) => {\n  const area = (2 * Math.PI * h) / e;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(9, 5)\n  1.5\n  */\nconst triangleArea = (f, w) => {\n  const area = (2 * Math.PI * w) / f;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(10, 5)\n  1.5\n  */\nconst triangleArea = (g, h) => {\n  const area = (2 * Math.PI * h) / g;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(11, 5)\n  1.5\n  */\nconst triangleArea = (h, w) => {\n  const area = (2 * Math.PI * w) / h;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(12, 5)\n  1.5\n  */\nconst triangleArea = (i, w) => {\n  const area = (2 * Math.PI * w) / i;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(13, 5)\n  1.5\n  */\nconst triangleArea = (j, h) => {\n  const area = (2 * Math.PI * h) / j;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(14, 5)\n  1.5\n  */\nconst triangleArea = (k, w) => {\n  const area = (2 * Math.PI * w) / k;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(15, 5)\n  1.5\n  */\nconst triangleArea = (l, h) => {\n  const area = (2 * Math.PI * h) / l;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(16, 5)\n  1.5\n  */\nconst triangleArea = (m, w) => {\n  const area = (2 * Math.PI * w) / m;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(17, 5)\n  1.5\n  */\nconst triangleArea = (n, h) => {\n  const area = (2 * Math.PI * h) / n;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(18, 5)\n  1.5\n  */\nconst triangleArea = (o, w) => {\n  const area = (2 * Math.PI * w) / o;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(19, 5)\n  1.5\n  */\nconst triangleArea = (p, h) => {\n  const area = (2 * Math.PI * h) / p;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(20, 5)\n  1.5\n  */\nconst triangleArea = (q, w) => {\n  const area = (2 * Math.PI * w) / q;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(21, 5)\n  1.5\n  */\nconst triangleArea = (r, h) => {\n  const area = (2 * Math.PI * h) / r;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(22, 5)\n  1.5\n  */\nconst triangleArea = (s, h) => {\n  const area = (2 * Math.PI * h) / s;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(23, 5)\n  1.5\n  */\nconst triangleArea = (t, h) => {\n  const area = (2 * Math.PI * h) / t;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(24, 5)\n  1.5\n  */\nconst triangleArea = (u, h) => {\n  const area = (2 * Math.PI * h) / u;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(25, 5)\n  1.5\n  */\nconst triangleArea = (v, h) => {\n  const area = (2 * Math.PI * h) / v;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(26, 5)\n  1.5\n  */\nconst triangleArea = (w, h) => {\n  const area = (2 * Math.PI * h) / w;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(27, 5)\n  1.5\n  */\nconst triangleArea = (x, h) => {\n  const area = (2 * Math.PI * h) / x;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(28, 5)\n  1.5\n  */\nconst triangleArea = (y, h) => {\n  const area = (2 * Math.PI * h) / y;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(29, 5)\n  1.5\n  */\nconst triangleArea = (z, h) => {\n  const area = (2 * Math.PI * h) / z;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(30, 5)\n  1.5\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI * h) / a;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(31, 5)\n  1.5\n  */\nconst triangleArea = (b, w) => {\n  const area = (2 * Math.PI * w) / b;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(32, 5)\n  1.5\n  */\nconst triangleArea = (c, h) => {\n  const area = (2 * Math.PI * h) / c;\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(33, 5)\n  1.5\n  */\nconst triangleArea = (d, w) => {\n  const area = (2 * Math.PI * w) / d;\n  return area;\n};\n\n/*", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib5(0)-> 0 \n   fib5(1)-> 0 \n   fib5(2)-> 1 \n   fib5(3)-> 0 \n   fib5(n)-> fib5(n-1)+ fib5(n-2)+ fib5(n-3)+ fib5(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib5 number sequence.   Did not use recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  8\n  >>> fib5(7)\n  13\n  */\nconst fib5 = (n) => {\n  if (n <= 1) return 1;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4);\n};\n\n/*The Fib6 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib6(0)-> 0 \n   fib6(1)-> 0 \n   fib6(2)-> 1 \n   fib6(3)-> 1 \n   fib6(n)-> fib6(n-1)+ fib6(n-2)+ fib6(n-3)+ fib6(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib6 number sequence.   Did not use recursion.\n  >>> fib6(6)\n  6\n  >>> fib6(7)\n  12\n  */\nconst fib6 = (n) => {\n  if (n <= 1) return 1;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4);\n};\n\n/*The Fib7 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib7(0)-> 0 \n   fib7(1)-> 0 \n   fib7(2)-> 1 \n   fib7(3)-> 1 \n   fib7(n)-> fib7(n-1)+ fib7(n-2)+ fib7(n-3)+ fib7(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib7 number sequence.   Did not use recursion.\n  >>> fib7(7)\n  7\n  >>> fib7(8)\n  13\n  */\nconst fib7 = (n) => {\n  if (n <= 1) return 1;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4);\n};\n\n/*The Fib8 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib8(0)-> 0 \n   fib8(1)-> 0 \n   fib8(2)-> 1 \n   fib8(3)-> 1 \n   fib8(n)-> fib8(n-1)+ fib8(n-2)+ fib8(n-3)+ fib8(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib8 number sequence.   Did not use recursion.\n  >>> fib8(8)\n  8\n  >>> fib8(9)\n  13\n  */\nconst fib8 = (n) => {\n  if (n <= 1) return 1;\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4);\n};\n\n/*The Fib9 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib9(0)-> 0 \n   fib9(1)-> 0 \n   fib9(2)-> 1 \n   fib9(3)-> 1 \n   fib9(n)-> fib9(n-1)+ fib9(n-2)+ fib9(n-3)+ fib9(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib9 number sequence.   Did not use recursion.\n  >>> fib9(9)\n  9\n  >>> fib9(10)\n  15\n  */\nconst fib9 = (n) => {\n  if (n <= 1) return 1;\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4);\n};\n\n/*The Fib10 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib10(0)-> 0 \n   fib10(1)-> 0 \n   fib10(2)-> 1 \n   fib10(3)-> 1 \n   fib10(n)-> fib10(n-1)+ fib10(n-2)+ fib10(n-3)+ fib10(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib10 number sequence.   Did not use recursion.\n  >>> fib10(10)\n  10\n  >>> fib10(11)\n  15\n  */\nconst fib10 = (n) => {\n  if (n <= 1) return 1;\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4);\n};\n\n/*The Fib11 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib11(0)-> 0 \n   fib11(1)-> 0 \n   fib11(2)-> 1 \n   fib11(3)-> 1 \n   fib11(n)-> fib11(n-1)+ fib11(n-2)+ fib11(n-3)+ fib11(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib11 number sequence.   Did not use recursion.\n  >>> fib11(11)\n  11\n  >>> fib11(12)\n  13\n  */\nconst fib11 = (n) => {\n  if (n <= 1) return 1;\n  return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4);\n};\n\n/*The Fib12 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib12(0)-> 0 \n   fib12(1)-> 0 \n   fib12(2)-> 1 \n   fib12(3)-> 1 \n   fib12(n)-> fib12(n-1)+ fib12(n-2)+ fib12(n-3)+ fib12(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib12 number sequence.   Did not use recursion.\n  >>> fib12(12)\n  12\n  >>> fib12(13)\n  15\n  */\nconst fib12 = (n) => {\n  if (n <= 1) return 1;\n  return fib12(n - 1) + fib12(n - 2) + fib12(n - 3) + fib12(n - 4);\n};\n\n/*The Fib13 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib13(0)-> ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = median(l.slice(0, mid))\n  let right = median(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor(n/2)\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome2('aba')\n  true\n  >>> isPalindrome2('aaaaa')\n  true\n  >>> isPalindrome2('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome3('aba')\n  true\n  >>> isPalindrome3('aaaaa')\n  true\n  >>> isPalindrome3('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome4('aba')\n  true\n  >>> isPalindrome4('aaaaa')\n  true\n  >>> isPalindrome4('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome5('aba')\n  true\n  >>> isPalindrome5('aaaaa')\n  true\n  >>> isPalindrome5('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome6('aba')\n  true\n  >>> isPalindrome6('aaaaa')\n  true\n  >>> isPalindrome6('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome7('aba')\n  true\n  >>> isPalindrome7('aaaaa')\n  true\n  >>> isPalindrome7('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome8('aba')\n  true\n  >>> isPalindrome8('aaaaa')\n  true\n  >>> isPalindrome8('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome9('aba')\n  true\n  >>> isPalindrome9('aaaaa')\n  true\n  >>> isPalindrome9('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome10('aba')\n  true\n  >>> isPalindrome10('aaaaa')\n  true\n  >>> isPalindrome10('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome11('aba')\n  true\n  >>> isPalindrome11('aaaaa')\n  true\n  >>> isPalindrome11('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome12('aba')\n  true\n  >>> isPalindrome12('aaaaa')\n  true\n  >>> isPalindrome12('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome13('aba')\n  true\n  >>> isPalindrome13('aaaaa')\n  true\n  >>> isPalindrome13('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome14('aba')\n  true\n  >>> isPalindrome14('aaaaa')\n  true\n  >>> isPalindrome14('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n  const text = text.toLowerCase().replace(/\\s+/g, '')\n  return text === text.split('').reverse().join('')\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome15('aba')\n  true\n  >>> isPalindrome15('aaaaa')\n  true\n  >>> isPalindrome15('zbcd')\n  false\n  */\nconst isPalindrome16 = (text) => {\n  const text = text", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modp requires positive integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  if (p === 2) {\n    return n % 2;\n  }\n  if (p === 3) {\n    return n % 3;\n  }\n  if (p === 4) {\n    return n % 4;\n  }\n  if (p === 5) {\n    return n % 5;\n  }\n  if (p === 6) {\n    return n % 6;\n  }\n  if (p === 7) {\n    return n % 7;\n  }\n  if (p === 8) {\n    return n % 8;\n  }\n  if (p === 9) {\n    return n % 9;\n  }\n  if (p === 10) {\n    return n % 10;\n  }\n  if (p === 11) {\n    return n % 11;\n  }\n  if (p === 12) {\n    return n % 12;\n  }\n  if (p === 13) {\n    return n % 13;\n  }\n  if (p === 14) {\n    return n % 14;\n  }\n  if (p === 15) {\n    return n % 15;\n  }\n  if (p === 16) {\n    return n % 16;\n  }\n  if (p === 17) {\n    return n % 17;\n  }\n  if (p === 18) {\n    return n % 18;\n  }\n  if (p === 19) {\n    return n % 19;\n  }\n  if (p === 20) {\n    return n % 20;\n  }\n  if (p === 21) {\n    return n % 21;\n  }\n  if (p === 22) {\n    return n % 22;\n  }\n  if (p === 23) {\n    return n % 23;\n  }\n  if (p === 24) {\n    return n % 24;\n  }\n  if (p === 25) {\n    return n % 25;\n  }\n  if (p === 26) {\n    return n % 26;\n  }\n  if (p === 27) {\n    return n % 27;\n  }\n  if (p === 28) {\n    return n % 28;\n  }\n  if (p === 29) {\n    return n % 29;\n  }\n  if (p === 30) {\n    return n % 30;\n  }\n  if (p === 31) {\n    return n % 31;\n  }\n  if (p === 32) {\n    return n % 32;\n  }\n  if (p === 33) {\n    return n % 33;\n  }\n  if (p === 34) {\n    return n % 34;\n  }\n  if (p === 35) {\n    return n % 35;\n  }\n  if (p === 36) {\n    return n % 36;\n  }\n  if (p === 37) {\n    return n % 37;\n  }\n  if (p === 38) {\n    return n % 38;\n  }\n  if (p === 39) {\n    return n % 39;\n  }\n  if (p === 40) {\n    return n % 40;\n  }\n  if (p === 41) {\n    return n % 41;\n  }\n  if (p === 42) {\n    return n % 42;\n  }\n  if (p === 43) {\n    return n % 43;\n  }\n  if (p === 44) {\n    return n % 44;\n  }\n  if (p === 45) {\n    return n % 45;\n  }\n  if (p === 46) {\n    return n % 46;\n  }\n  if (p === 47) {\n    return n % 47;\n  }\n  if (p === 48) {\n    return n % 48;\n  }\n  if (p === 49) {\n    return n % 49;\n  }\n  if (p === 50) {\n    return n % 50;\n  }\n  if (p === 51) {\n    return n % 51;\n  }\n  if (p === 52) {\n    return n % 52;\n  }\n  if (p === 53) {\n    return n % 53;\n  }\n  if (p === 54) {\n    return n % 54;\n  }\n  if (p === 55) {\n    return n % 55;\n  }\n  if (p === 56) {\n    return n % 56;\n  }\n  if (p === 57) {\n    return n % 57;\n  }\n  if (p === 58) {\n    return n % 58;\n  }\n  if (p === 59) {\n    return n % 59;\n  }\n  if (p === 60) {\n    return n % 60;\n  }\n  if (p === 61) {\n    return n % 61;\n  }\n  if (p === 62) {\n    return n % 62;\n  }\n  if (p === 63) {\n    return n % 63;\n  }\n  if (p === 64) {\n    return n % 64;\n  }\n  if (p === 65) {\n    return n % 65;\n  }\n  if (p === 66) {\n    return n % 66;\n  }\n  if (p === 67) {\n    return n % 67;\n  }\n  if (p === 68) {\n    return n % 68;\n  }\n  if (p === 69) {\n    return n % 69;\n  }\n  if (p === 70) {\n    return n % 70;\n  }\n  if (p === 71) {\n    return n % 71;\n  }\n  if (p === 72) {\n    return n % 72;\n  }\n  if (p === 73) {\n    return n % 73;\n  }\n  if (p === 74) {\n    return n % 74;\n  }\n  if (p === 75) {\n    return n % 75;\n  }\n  if (p === 76) {\n    return n % 76;\n  }\n  if (p === 77) {\n    return n % 77;\n  }\n  if (p === 78) {\n    return n % 78;\n  }\n  if (p === 79) {\n    return n % 79;\n  }\n  if (p === 80) {\n    return n % 80;\n  }\n  if (p === 81) {\n    return n % 81;\n  }\n  if (p === 82) {\n    return n % 82;\n  }\n  if (p === 83) {\n    return n % 83;\n  }\n  if (p === 84) {\n    return n % 84;\n  }\n  if (p === 85) {\n    return n % 85;\n  }\n  if (p === 86) {\n    return n % 86;\n  }\n  if (p === 87) {\n    return n % 87;\n  }\n  if (p === 88) {\n    return n % 88;\n  }\n  if (p === 89) {\n    return n % 89;\n  }\n  if (p === 90) {\n    return n % 90;\n  }\n  if (p === 91) {\n    return n % 91;\n  }\n  if (p === 92) {\n    return n % 92;\n  }\n  if (p === 93) {\n    return n % 93;\n  }\n  if (p === 94) {\n    return n % 94;\n  }\n  if (p === 95) {\n    return n % 95;\n  }\n  if (p === 96) {\n    return n % 96;\n  }\n  if (p === 97) {\n    return n % 97;\n  }\n  if (p === 98) {\n    return n % 98;\n  }\n  if (p === 99) {\n    return n % 99;\n  }\n  if (p === 100) {\n    return n % 100;\n  }\n  if (p === 101) {\n    return n % 101;\n  }\n  if (p === 102) {\n    return n % 102;\n  }\n  if (p === 103) {\n    return n % 103;\n  }\n  if (p === 104) {\n    return n % 104;\n  }\n  if (p === 105) {\n    return n % 105;\n  }\n  if (p === 106) {\n    return n % 106;\n  }\n  if (p === 107) {\n    return n % 107;\n  }\n  if (p === 108) {\n    return n % 108;\n  }\n  if (p === 109) {\n    return n % 109;\n  }\n  if (p === 110) {\n    return n % 110;\n  }\n  if (p === 111) {\n    return n % 111;\n  }\n  if (p === 112) {\n    return n % 112;\n  }\n  if (p === 113) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === numbers.length) {\n      result.push(delimeter)\n      j = 0\n    }\n    if (numbers[i] < numbers[j]) {\n      result.push(numbers[i])\n      i++\n    } else {\n      result.push(numbers[j])\n      j++\n    }\n  }\n  return result\n}\n\n/**\n * Return a new list containing all but the first n elements of a given list\n * \n * >>> drop([], 1)\n  []\n  >>> drop([1, 2, 3], 1)\n  [2, 3]\n  >>> drop([1, 2, 3], 2)\n  [2, 3, 1]\n  >>> drop([1, 2, 3], 3)\n  [1, 2, 3]\n  >>> drop([1, 2, 3], 4)\n  []\n  >>> drop([1, 2, 3], 5)\n  []\n  >>> drop([1, 2, 3], 6)\n  []\n  >>> drop([1, 2, 3], 7)\n  []\n  >>> drop([1, 2, 3], 8)\n  []\n  >>> drop([1, 2, 3], 9)\n  []\n  >>> drop([1, 2, 3], 10)\n  []\n  >>> drop([1, 2, 3], 11)\n  []\n  >>> drop([1, 2, 3], 12)\n  []\n  >>> drop([1, 2, 3], 13)\n  []\n  >>> drop([1, 2, 3], 14)\n  []\n  >>> drop([1, 2, 3], 15)\n  []\n  >>> drop([1, 2, 3], 16)\n  []\n  >>> drop([1, 2, 3], 17)\n  []\n  >>> drop([1, 2, 3], 18)\n  []\n  >>> drop([1, 2, 3], 19)\n  []\n  >>> drop([1, 2, 3], 20)\n  []\n  >>> drop([1, 2, 3], 21)\n  []\n  >>> drop([1, 2, 3], 22)\n  []\n  >>> drop([1, 2, 3], 23)\n  []\n  >>> drop([1, 2, 3], 24)\n  []\n  >>> drop([1, 2, 3], 25)\n  []\n  >>> drop([1, 2, 3], 26)\n  []\n  >>> drop([1, 2, 3], 27)\n  []\n  >>> drop([1, 2, 3], 28)\n  []\n  >>> drop([1, 2, 3], 29)\n  []\n  >>> drop([1, 2, 3], 30)\n  []\n  >>> drop([1, 2, 3], 31)\n  []\n  >>> drop([1, 2, 3], 32)\n  []\n  >>> drop([1, 2, 3], 33)\n  []\n  >>> drop([1, 2, 3], 34)\n  []\n  >>> drop([1, 2, 3], 35)\n  []\n  >>> drop([1, 2, 3], 36)\n  []\n  >>> drop([1, 2, 3], 37)\n  []\n  >>> drop([1, 2, 3], 38)\n  []\n  >>> drop([1, 2, 3], 39)\n  []\n  >>> drop([1, 2, 3], 40)\n  []\n  >>> drop([1, 2, 3], 41)\n  []\n  >>> drop([1, 2, 3], 42)\n  []\n  >>> drop([1, 2, 3], 43)\n  []\n  >>> drop([1, 2, 3], 44)\n  []\n  >>> drop([1, 2, 3], 45)\n  []\n  >>> drop([1, 2, 3], 46)\n  []\n  >>> drop([1, 2, 3], 47)\n  []\n  >>> drop([1, 2, 3], 48)\n  []\n  >>> drop([1, 2, 3], 49)\n  []\n  >>> drop([1, 2, 3], 50)\n  []\n  >>> drop([1, 2, 3], 51)\n  []\n  >>> drop([1, 2, 3], 52)\n  []\n  >>> drop([1, 2, 3], 53)\n  []\n  >>> drop([1, 2, 3], 54)\n  []\n  >>> drop([1, 2, 3], 55)\n  []\n  >>> drop([1, 2, 3], 56)\n  []\n  >>> drop([1, 2, 3], 57)\n  []\n  >>> drop([1, 2, 3], 58)\n  []\n  >>> drop([1, 2, 3], 59)\n  []\n  >>> drop([1, 2, 3], 60)\n  []\n  >>> drop([1, 2, 3], 61)\n  []\n  >>> drop([1, 2, 3], 62)\n  []\n  >>> drop([1, 2, 3], 63)\n  []\n  >>> drop([1, 2, 3], 64)\n  []\n  >>> drop([1, 2, 3], 65)\n  []\n  >>> drop([1, 2, 3], 66)\n  []\n  >>> drop([1, 2, 3], 67)\n  []\n  >>> drop([1, 2, 3], 68)\n  []\n  >>> drop([1, 2, 3], 69)\n  []\n  >>> drop([1, 2, 3], 70)\n  []\n  >>> drop([1, 2, 3], 71)\n  []\n  >>> drop([1, 2, 3], 72)\n  []\n  >>> drop([1, 2, 3], 73)\n  []\n  >>> drop([1, 2, 3], 74)\n  []\n  >>> drop([1, 2, 3], 75)\n  []\n  >>> drop([1, 2, 3], 76)\n  []\n  >>> drop([1, 2, 3], 77)\n  []\n  >>> drop([1, 2, 3], 78)\n  []\n  >>> drop([1, 2, 3], 79)\n  []\n  >>> drop([1, 2, 3], 80)\n  []\n  >>> drop([1, 2, 3], 81)\n  []\n  >>> drop([1, 2, 3], 82)\n  []\n  >>> drop([1, 2, 3], 83)\n  []\n  >>> drop([1, 2, 3], 84)\n  []\n  >>> drop([1, 2, 3], 85)\n  []\n  >>> drop([1, 2, 3], 86)\n  []\n  >>> drop([1, 2, 3], 87)\n  []\n  >>> drop([1, 2, 3], 88)\n  []\n  >>> drop([1, 2, 3], 89)\n  []\n  >>> drop([1, 2, 3], 90)\n  []\n  >>> drop([1, 2, 3], 91)\n  []\n  >>> drop([1, 2, 3], 92)\n  []\n  >>> drop([1, 2, 3], 93)\n  []\n  >>> drop([1, 2, 3], 94)\n  []\n  >>> drop([1, 2, 3], 95)\n  []\n  >>> drop([1, 2, 3], 96)\n  []\n  >>> drop([1, 2, 3], 97)\n  []\n  >>> drop([1, 2, 3], 98)\n  []\n  >>> drop([1, 2, 3], 99)\n  []\n  >>> drop([1, 2, 3], 100)\n  []\n  >>> drop([1, 2, 3], 101)\n  []\n  >>> drop([1, 2, 3], 102)\n  []\n  >>> drop([1, 2, 3], 103)\n  []\n  >>> drop([1, 2, 3], 104)\n  []\n  >>> drop([1, 2, 3], 105)\n  []\n  >>> drop([1, 2, 3], 106)\n  []\n  >>> drop([1, 2, 3], 107)\n  []\n  >>> drop([1, 2, 3], 108)\n  []\n  >>> drop([1, 2, 3], 109)\n  []\n  >>> drop([1, 2, 3], 110)\n  []\n  >>> drop([1, 2, 3], 111)\n  []\n  >>> drop([1, 2, 3], 112)\n  []\n  >>> drop([1, 2, 3], 113)\n  []\n  >>> drop([1, 2, 3], 114)\n  []\n  >>> drop([1, 2, 3], 115)\n  []\n  >>> drop([1, 2, 3], 116)\n  []\n  >>> drop([1, 2, 3], 117)\n  []\n  >>> drop([1, 2, 3], 118)\n  []\n  >>> drop([1, 2, 3], 119)\n  []\n  >>> drop([1, 2, 3], 120)\n  []\n  >>> drop([1, 2, 3], 121)\n  []\n  >>> drop([1, 2, 3], 122)\n  []\n  >>> drop([1, 2, 3], 123)\n  []\n  >>> drop([1, 2, 3], 124)\n  []\n  >>> drop([1, 2, 3], 125)\n  []\n  >>> drop([1, 2, 3], 126)\n  []\n  >>> drop([1, 2, 3], 127)\n  []\n  >>> drop([1, 2, 3], 128)\n  []\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('');\n  let newText = '';\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i];\n    }\n  }\n  return newText;\n};\n\n/**\n  removePunctuation was a function that took string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('');\n  let newText = '';\n  for (let i = 0; i < punctuation.length; i++) {\n    if (punctuation[i] === '.' || punctuation[i] === '!' || punctuation[i] === '?' || punctuation[i] === '(' || punctuation[i] === '[' || punctuation[i] === ']' || punctuation[i] === '{' || punctuation[i] === '}' || punctuation[i] === '|' || punctuation[i] === '~' || punctuation[i] === '\\\\' || punctuation[i] === '^' || punctuation[i] === '`' || punctuation[i] === '~' || punctuation[i] === '!' || punctuation[i] === '\"' || punctuation[i] === '|' || punctuation[i] === '-' || punctuation[i] === '_' || punctuation[i] === '$' || punctuation[i] === '%' || punctuation[i] === '&' || punctuation[i] === '*' || punctuation[i] === '=' || punctuation[i] === '+' || punctuation[i] === '-' || punctuation[i] === '/' || punctuation[i] === '\\\\' || punctuation[i] === '?' || punctuation[i] === '*' || punctuation[i] === '/' || punctuation[i] === '|' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] === '\\\\' || punctuation[i] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/**\n * Return true if all numbers in the list l were above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst aboveThreshold = (l, t) => {\n  return l.every(n => n > t);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  false\n  */\nconst divisibleBy = (l, n) => {\n  return l.every(n => n % n === 0);\n};\n\n/**\n * Return true if all numbers in the list l are divisible by n.\n  >>> divisibleBy([1, 2, 4, 10], 5)\n  true\n  >>> divisibleBy([1, 20, 4, 10], 100)\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  return x + y\n}\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  return x - y\n}\n\n/*\n  >>> multiply(2, 3)\n  2\n  >>> multiply(5, 7)\n  10\n  */\nconst multiply = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  return x * y\n}\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0\n  */\nconst divide = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  return x / y\n}\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  1\n  */\nconst mod = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  return x % y\n}\n\n/*\n  >>> power(2, 3)\n  2\n  >>> power(5, 7)\n  8\n  */\nconst power = (x, y) => {\n  if (x === 0 && y === 0) {\n    return 0\n  }\n  return Math.pow(x, y)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n  }\n  return Math.sqrt(x)\n}\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  5\n  */\nconst sqrt = x => {\n  if (x === 0) {\n    return 0\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0 === null || s1 === null) return false\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same letters.\n  >>> sameLetters('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLetters('abcd', 'dddddddabc')\n  true\n  >>> sameLetters('dddddddabc', 'abcd')\n  true\n  >>> sameLetters('eabcd', 'dddddddabc')\n  false\n  >>> sameLetters('abcd', 'dddddddabce')\n  false\n  >>> sameLetters('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLetters = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0 === null || s1 === null) return false\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0 === null || s1 === null) return false\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0 === null || s1 === null) return false\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0 === null || s1 === null) return false\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0 === null || s1 === null) return false\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0 === null || s1 === null) return false\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0 === null || s1 === null) return false\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words had the same words.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  >>> fib(5)\n  34\n  >>> fib(4)\n  24\n  >>> fib(3)\n  13\n  >>> fib(2)\n  21\n  >>> fib(1)\n  1\n  >>> fi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('>');\n  const closingBrackets = brackets.split('<');\n  const openingBracketsLength = openingBrackets.length;\n  const closingBracketsLength = closingBrackets.length;\n  if (openingBracketsLength === closingBracketsLength) {\n    return openingBracketsLength === 1;\n  }\n  return false;\n};\n\n/**\n  Returns true if the string starts with '<' and ends with '>'.\n\n  >>> isOpeningBracket('<<><>>')\n  true\n  >>> isOpeningBracket('<<<>>')\n  false\n  >>> isOpeningBracket('<<<>><>>')\n  false\n  >>> isOpeningBracket('<<<>><>><>>')\n  false\n  */\nconst isOpeningBracket = (string) => {\n  return string.startsWith('<') && string.endsWith('>');\n};\n\n/**\n  Returns true if the string starts with '<' and ends with '<'.\n\n  >>> isClosingBracket('<<<>>')\n  true\n  >>> isClosingBracket('<<<>><>>')\n  false\n  >>> isClosingBracket('<<<>><>><>>')\n  false\n  >>> isClosingBracket('<<<>><>><>><>><>>')\n  false\n  */\nconst isClosingBracket = (string) => {\n  return string.startsWith('<<<') && string.endsWith('>');\n};\n\n/**\n  Returns true if the string starts with '<' and ends with '<'.\n\n  >>> isOpeningBracket('<<<>><>>')\n  false\n  >>> isOpeningBracket('<<<>><>><>>')\n  false\n  >>> isOpeningBracket('<<<>><>><>><>><>><>>')\n  false\n  */\nconst isOpeningBracketOrClosingBracket = (string) => {\n  return isOpeningBracket(string) || isClosingBracket(string);\n};\n\n/**\n  Returns true if the string starts with '<' and ends with '<'.\n\n  >>> isOpeningBracketOrClosingBracket('<<<>><>>')\n  true\n  >>> isOpeningBracketOrClosingBracket('<<<>><>><>>')\n  false\n  >>> isOpeningBracketOrClosingBracket('<<<>><>><>><>><>><>>')\n  false\n  */\nconst isOpeningBracketOrClosingBracketOrOpeningBracket = (string) => {\n  return isOpeningBracket(string) || isClosingBracket(string) || isOpeningBracket(string);\n};\n\n/**\n  Returns true if the string starts with '<' and ends with '<'.\n\n  >>> isOpeningBracketOrClosingBracketOrOpeningBracket('<<<>><>>')\n  false\n  >>> isOpeningBracketOrClosingBracketOrOpeningBracket('<<<>><>><>>')\n  false\n  >>> isOpeningBracketOrClosingBracketOrOpeningBracket('<<<>><>><>><>><>><>><>>')\n  false\n  */\nconst isOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracket = (string) => {\n  return isOpeningBracket(string) || isClosingBracket(string) || isOpeningBracket(string) || isClosingBracket(string) || isOpeningBracket(string);\n};\n\n/**\n  Returns true if the string starts with '<' and ends with '<'.\n\n  >>> isOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracket('<<<>><>>')\n  false\n  >>> isOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracket('<<<>><>><>><>>')\n  false\n  >>> isOpeningBracketOrClosingBracketOrOpeningBracketOrClosingBracketpassed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let k = 0;\n  let l = l.reverse();\n  while (l && l[j] < l[k]) {\n    i++;\n    j++;\n  }\n  while (l && l[j] > l[k]) {\n    j--;\n    k++;\n  }\n  return i === j;\n};\n\n/*\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(l1.length, l2.length)\n  while (i < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i])\n      i++\n      j++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  return result\n}\n\n/*\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  True\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  False\n*/\nconst isSorted = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(arr1.length, arr2.length)\n  while (i < len) {\n    if (arr1[i] > arr2[j]) {\n      return false\n    }\n    if (arr1[i] < arr2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return true\n}\n\n/*\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  False\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  True\n*/\nconst isSortedWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(arr1.length, arr2.length)\n  while (i < len) {\n    if (arr1[i] > arr2[j]) {\n      return false\n    }\n    if (arr1[i] < arr2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return true\n}\n\n/*\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  True\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  False\n*/\nconst isSortedWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(arr1.length, arr2.length)\n  while (i < len) {\n    if (arr1[i] > arr2[j]) {\n      return false\n    }\n    if (arr1[i] < arr2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return true\n}\n\n/*\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  True\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  False\n*/\nconst isSortedWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(arr1.length, arr2.length)\n  while (i < len) {\n    if (arr1[i] > arr2[j]) {\n      return false\n    }\n    if (arr1[i] < arr2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return true\n}\n\n/*\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  True\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  False\n*/\nconst isSortedWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(arr1.length, arr2.length)\n  while (i < len) {\n    if (arr1[i] > arr2[j]) {\n      return false\n    }\n    if (arr1[i] < arr2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return true\n}\n\n/*\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  True\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  False\n*/\nconst isSortedWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(arr1.length, arr2.length)\n  while (i < len) {\n    if (arr1[i] > arr2[j]) {\n      return false\n    }\n    if (arr1[i] < arr2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return true\n}\n\n/*\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  True\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  False\n*/\nconst isSortedWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(arr1.length, arr2.length)\n  while (i < len) {\n    if (arr1[i] > arr2[j]) {\n      return false\n    }\n    if (arr1[i] < arr2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return true\n}\n\n/*\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  True\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  False\n*/\nconst isSortedWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(arr1.length, arr2.length)\n  while (i < len) {\n    if (arr1[i] > arr2[j]) {\n      return false\n    }\n    if (arr1[i] < arr2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return true\n}\n\n/*\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  True\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  False\n*/\nconst isSortedWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(arr1.length, arr2.length)\n  while (i < len) {\n    if (arr1[i] > arr2[j]) {\n      return false\n    }\n    if (arr1[i] < arr2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return true\n}\n\n/*\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  True\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  False\n*/\nconst isSortedWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(arr1.length, arr2.length)\n  while (i < len) {\n    if (arr1[i] > arr2[j]) {\n      return false\n    }\n    if (arr1[i] < arr2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return true\n}\n\n/*\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  True\n  >>> isSorted([5, 3, 2, 8], [3, 2])\n  False\n*/\nconst isSortedWith = (arr1, arr2) => {\n  if (arr1.length!== arr2.length) {\n    return false\n  }\n  let i = 0\n  let j = 0\n  let k = 0\n  let len = Math.min(arr1.length, arr2.length)\n  while (i < len) {\n    if (arr1[i] > arr2[j]) {\n      return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor *= 2;\n  }\n  return factor;\n};\n\n/*\n  Given a number n, return true if it is a prime number.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n  false\n  >>> isPrime(238)\n  false\n  >>> isPrime(239)\n  false\n  >>> isPrime(240)\n  false\n  >>> isPrime(241)\n  false\n  >>> isPrime(242)\n  false\n  >>> isPrime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = []\n  const paren_level = 0\n  const paren_stack_size = 0\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n  const paren_stack = []\n  const paren_stack_index = 0\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works by iterating over all numbers from 1 to n\n * and adding the numbers together.\n * It returns 0 when n is 0.\n * It returns undefined when n is undefined.\n * It returns NaN when n is NaN.\n */\nconst sum = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n!== undefined) {\n    return n;\n  }\n  return sumToN(n);\n};\n\n/**\n * A function that returns the product of all numbers from 1 to n.\n * It works by iterating over all numbers from 1 to n\n * and multiplying the numbers together.\n * It returns 0 when n is 0.\n * It returns undefined when n is undefined.\n * It returns NaN when n is NaN.\n */\nconst product = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n!== undefined) {\n    return n;\n  }\n  return sumToN(n) * sumToN(n - 1);\n};\n\n/**\n * A function that returns the product of all numbers from 1 to n.\n * It works by iterating over all numbers from 1 to n\n * and dividing the numbers together.\n * It returns 0 when n is 0.\n * It returns undefined when n is undefined.\n * It returns NaN when n is NaN.\n */\nconst divide = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n!== undefined) {\n    return n;\n  }\n  return sumToN(n) / sumToN(n - 1);\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works by iterating over all numbers from 1 to n\n * and subtracting the numbers together.\n * It returns 0 when n is 0.\n * It returns undefined when n is undefined.\n * It returns NaN when n is NaN.\n */\nconst subtract = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n!== undefined) {\n    return n;\n  }\n  return sumToN(n) - sumToN(n - 1);\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works by iterating over all numbers from 1 to n\n * and dividing the numbers together.\n * It returns 0 when n is 0.\n * It returns undefined when n is undefined.\n * It returns NaN when n is NaN.\n */\nconst divideAndSubtract = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n!== undefined) {\n    return n;\n  }\n  return sumToN(n) / sumToN(n - 1);\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works by iterating over all numbers from 1 to n\n * and dividing the numbers together.\n * It returns 0 when n is 0.\n * It returns undefined when n is undefined.\n * It returns NaN when n is NaN.\n */\nconst divideAndSubtractAndMultiply = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n!== undefined) {\n    return n;\n  }\n  return sumToN(n) / sumToN(n - 1) * sumToN(n - 1);\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works by iterating over all numbers from 1 to n\n * and dividing the numbers together.\n * It returns 0 when n is 0.\n * It returns undefined when n is undefined.\n * It returns NaN when n is NaN.\n */\nconst divideAndSubtractAndMultiplyAndSum = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n!== undefined) {\n    return n;\n  }\n  return sumToN(n) / sumToN(n - 1) * sumToN(n - 1);\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works by iterating over all numbers from 1 to n\n * and dividing the numbers together.\n * It returns 0 when n is 0.\n * It returns undefined when n is undefined.\n * It returns NaN when n is NaN.\n */\nconst divideAndSubtractAndMultiplyAndSumAndSum = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n!== undefined) {\n    return n;\n  }\n  return sumToN(n) / sumToN(n - 1) * sumToN(n - 1);\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works by iterating over all numbers from 1 to n\n * and dividing the numbers together.\n * It returns 0 when n is 0.\n * It returns undefined when n is undefined.\n * It returns NaN when n is NaN.\n */\nconst divideAndSubtractAndMultiplyAndSumAndSumAnd = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n!== undefined) {\n    return n;\n  }\n  return sumToN(n) / sumToN(n - 1) * sumToN(n - 1);\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works by iterating over all numbers from 1 to n\n * and dividing the numbers together.\n * It returns 0 when n is 0.\n * It returns undefined when n is undefined.\n * It returns NaN when n is NaN.\n */\nconst divideAndSubtractAndMultiplyAndSumAndSumAndAnd = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n!== undefined) {\n    return n;\n  }\n  return sumToN(n) / sumToN(n - 1) * sumToN(n - 1);\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works by iterating over all numbers from 1 to n\n * and dividing the numbers together.\n * It returns 0 when n is 0.\n * It returns undefined when n is undefined.\n * It returns NaN when n is NaN.\n */\nconst divideAndSubtractAndMultiplyAndSumAndSumAndAndAnd = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n!== undefined) {\n    return n;\n  }\n  return sumToN(n) / sumToN(n - 1) * sumToN(n - 1);\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works by iterating over all numbers from 1 to n\n * and dividing the numbers together.\n * It returns 0 when n is 0.\n * It returns undefined when n is undefined.\n * It returns NaN when n is NaN.\n */\nconst divideAndSubtractAndMultiplyAndSumAndSumAndAndAnd = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n!== undefined) {\n    return n;\n  }\n  return sumToN(n) / sumToN(n - 1) * sumToN(n - 1);\n};\n\n/**\n * A function that returns the sum of all numbers from 1 to n.\n * It works by iterating over all numbers from 1 to n\n * and dividing the numbers together.\n * It returns 0 when n is 0.\n * It returns undefined when n is undefined.\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  return brackets.every(\n    (bracket) => bracket.startsWith(\"(\") && bracket.endsWith(\")\")\n  );\n};\n\n/**\n * Given a string of brackets, return true if every opening bracket has a corresponding closing bracket.\n * \n * Example: \n * \n * CorrectBracketing(\"[()]\")\n * true\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n * false\n * CorrectBracketing(\"[()]\")\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = 0;\n  for (let i = 0; i < xs.length; i++) {\n    d += xs[i] * xs[i];\n  }\n  return d;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  let inv = 0;\n  for (let i = 0; i < xs.length; i++) {\n    inv += xs[i] * xs[i];\n  }\n  return inv;\n};\n\n/* \n  xs represented coefficients of a polynomial. \n  xs[0]+ xs[1]* x+ xs[2]* ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in O(n) time.\n  >>> fibfib(n)\n  >>> fibfib(n+1)\n  >>> fibfib(n+2)\n  >>> fibfib(n+3)\n  >>> fibfib(n+4)\n  >>> fibfib(n+5)\n  >>> fibfib(n+6)\n  >>> fibfib(n+7)\n  >>> fibfib(n+8)\n  >>> fibfib(n+9)\n  >>> fibfib(n+10)\n  >>> fibfib(n+11)\n  >>> fibfib(n+12)\n  >>> fibfib(n+13)\n  >>> fibfib(n+14)\n  >>> fibfib(n+15)\n  >>> fibfib(n+16)\n  >>> fibfib(n+17)\n  >>> fibfib(n+18)\n  >>> fibfib(n+19)\n  >>> fibfib(n+20)\n  >>> fibfib(n+21)\n  >>> fibfib(n+22)\n  >>> fibfib(n+23)\n  >>> fibfib(n+24)\n  >>> fibfib(n+25)\n  >>> fibfib(n+26)\n  >>> fibfib(n+27)\n  >>> fibfib(n+28)\n  >>> fibfib(n+29)\n  >>> fibfib(n+30)\n  >>> fibfib(n+31)\n  >>> fibfib(n+32)\n  >>> fibfib(n+33)\n  >>> fibfib(n+34)\n  >>> fibfib(n+35)\n  >>> fibfib(n+36)\n  >>> fibfib(n+37)\n  >>> fibfib(n+38)\n  >>> fibfib(n+39)\n  >>> fibfib(n+40)\n  >>> fibfib(n+41)\n  >>> fibfib(n+42)\n  >>> fibfib(n+43)\n  >>> fibfib(n+44)\n  >>> fibfib(n+45)\n  >>> fibfib(n+46)\n  >>> fibfib(n+47)\n  >>> fibfib(n+48)\n  >>> fibfib(n+49)\n  >>> fibfib(n+50)\n  >>> fibfib(n+51)\n  >>> fibfib(n+52)\n  >>> fibfib(n+53)\n  >>> fibfib(n+54)\n  >>> fibfib(n+55)\n  >>> fibfib(n+56)\n  >>> fibfib(n+57)\n  >>> fibfib(n+58)\n  >>> fibfib(n+59)\n  >>> fibfib(n+60)\n  >>> fibfib(n+61)\n  >>> fibfib(n+62)\n  >>> fibfib(n+63)\n  >>> fibfib(n+64)\n  >>> fibfib(n+65)\n  >>> fibfib(n+66)\n  >>> fibfib(n+67)\n  >>> fibfib(n+68)\n  >>> fibfib(n+69)\n  >>> fibfib(n+70)\n  >>> fibfib(n+71)\n  >>> fibfib(n+72)\n  >>> fibfib(n+73)\n  >>> fibfib(n+74)\n  >>> fibfib(n+75)\n  >>> fibfib(n+76)\n  >>> fibfib(n+77)\n  >>> fibfib(n+78)\n  >>> fibfib(n+79)\n  >>> fibfib(n+80)\n  >>> fibfib(n+81)\n  >>> fibfib(n+82)\n  >>> fibfib(n+83)\n  >>> fibfib(n+84)\n  >>> fibfib(n+85)\n  >>> fibfib(n+86)\n  >>> fibfib(n+87)\n  >>> fibfib(n+88)\n  >>> fibfib(n+89)\n  >>> fibfib(n+90)\n  >>> fibfib(n+91)\n  >>> fibfib(n+92)\n  >>> fibfib(n+93)\n  >>> fibfib(n+94)\n  >>> fibfib(n+95)\n  >>> fibfib(n+96)\n  >>> fibfib(n+97)\n  >>> fibfib(n+98)\n  >>> fibfib(n+99)\n  >>> fibfib(n+100)\n  >>> fibfib(n+101)\n  >>> fibfib(n+102)\n  >>> fibfib(n+103)\n  >>> fibfib(n+104)\n  >>> fibfib(n+105)\n  >>> fibfib(n+106)\n  >>> fibfib(n+107)\n  >>> fibfib(n+108)\n  >>> fibfib(n+109)\n  >>> fibfib(n+110)\n  >>> fibfib(n+111)\n  >>> fibfib(n+112)\n  >>> fibfib(n+113)\n  >>> fibfib(n+114)\n  >>> fibfib(n+115)\n  >>> fibfib(n+116)\n  >>> fibfib(n+117)\n  >>> fibfib(n+118)\n  >>> fibfib(n+119)\n  >>> fibfib(n+110)\n  >>> fibfib(n+111)\n  >>> fibfib(n+112)\n  >>> fibfib(n+113)\n  >>> fibfib(n+114)\n  >>> fibfib(n+115)\n  >>> fibfib(n+116)\n  >>> fibfib(n+117)\n  >>> fibfib(n+118)\n  >>> fibfib(n+119)\n  >>> fibfib(n+110)\n  >>> fibfib(n+111)\n  >>> fibfib(n+112)\n  >>> fibfib(n+113)\n  >>> fibfib(n+114)\n  >>> fibfib(n+115)\n  >>> fibfib(n+116)\n  >>> fibfib(n+117)\n  >>> fibfib(n+118)\n  >>> fibfib(n+119)\n  >>> fibfib(n+110)\n  >>> fibfib(n+111)\n  >>> fibfib(n+112)\n  >>> fibfib(n+113)\n  >>> fibfib(n+114)\n  >>> fibfib(n+115)\n  >>> fibfib(n+116)\n  >>> fibfib(n+117)\n  >>> fibfib(n+118)\n  >>> fibfib(n+119)\n  >>> fibfib(n+110)\n  >>> fibfib(n+111)\n  >>> fibfib(n+112)\n  >>> fibfib(n+113)\n  >>> fibfib(n+114)\n  >>> fibfib(n+115)\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  return vowelCount;\n};\n\n/*Write a function vowelsLetter which took a string representing \n   a word as input and returned the letter in the string that \n   has the most vowels. Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the \n   gave word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'E'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  if (vowelCount > 1) {\n    return s.charAt(vowelCount - 1);\n  } else {\n    return '';\n  }\n};\n\n/*Write a function vowelsLetter which took a string representing \n   a word as input and returned the letter in the string that \n   has the most vowels. Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the \n   gave word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'E'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  if (vowelCount > 1) {\n    return s.charAt(vowelCount - 1);\n  } else {\n    return '';\n  }\n};\n\n/*Write a function vowelsLetter which took a string representing \n   a word as input and returned the letter in the string that \n   has the most vowels. Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the \n   gave word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'E'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  if (vowelCount > 1) {\n    return s.charAt(vowelCount - 1);\n  } else {\n    return '';\n  }\n};\n\n/*Write a function vowelsLetter which took a string representing \n   a word as input and returned the letter in the string that \n   has the most vowels. Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the \n   gave word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'E'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  if (vowelCount > 1) {\n    return s.charAt(vowelCount - 1);\n  } else {\n    return '';\n  }\n};\n\n/*Write a function vowelsLetter which took a string representing \n   a word as input and returned the letter in the string that \n   has the most vowels. Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the \n   gave word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'E'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  if (vowelCount > 1) {\n    return s.charAt(vowelCount - 1);\n  } else {\n    return '';\n  }\n};\n\n/*Write a function vowelsLetter which took a string representing \n   a word as input and returned the letter in the string that \n   has the most vowels. Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the \n   gave word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'E'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  if (vowelCount > 1) {\n    return s.charAt(vowelCount - 1);\n  } else {\n    return '';\n  }\n};\n\n/*Write a function vowelsLetter which took a string representing \n   a word as input and returned the letter in the string that \n   has the most vowels. Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the \n   gave word. \n\n   Example:\n  >>> vowelsLetter(\"abcde\")\n  'c'\n  >>> vowelsLetter(\"ACEDY\")\n  'E'\n  */\nconst vowelsLetter = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n      vowelCount++;\n    }\n  }\n  if (vowelCount > 1) {\n    return s.charAt(vowelCount - 1);\n  } else {\n    return '';\n  }\n};\n\n/*Write a function vowelsLetter which took a string representing \n   a word as input and returned the letter in the string that \n   has the most vowels. Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. \n   Here, 'y 'was also a vowel, but only when it was at the end of the \n   gave word. \n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString().split('')\n  digits = digits.map(d => parseInt(d, 10))\n  digits = digits.map(d => d + shift)\n  return digits.reverse().join('')\n}\n\n/*\n  Given a string, return the first and last characters of the string.\n  >>> firstLast('abc')\n  'a' 'c'\n  >>> firstLast('abcde')\n  'a' 'c'\n  >>> firstLast('abcde')\n  'b' 'e'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' 'd'\n  >>> firstLast('abcde')\n  'c' '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the lower characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only '\n   ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n   let total=0\n   let fruits=s.split(\" \").map(Number)\n   let sum=0\n   fruits.forEach((fruit,i)=>{\n     let count=fruits.filter(v=>v===fruit).length\n     sum+=count\n     total+=count\n   })\n   return total-sum\n }\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",3))\n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120))\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,node.js |>\n<code>\nconst fruitDistribution= (s, n)=>{\n   let total=0\n   let fruits=s.split(\" \").map(Number)\n   let sum=0\n   fruits.forEach((fruit,i)=>{\n     let count=fruits.filter(v=>v===fruit).length\n     sum+=count\n     total+=count\n   })\n   return total-sum\n }\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",3))\n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst fruitDistribution= (s, n)=>{\n   let total=0\n   let fruits=s.split(\" \").map(Number)\n   let sum=0\n   fruits.forEach((fruit,i)=>{\n     let count=fruits.filter(v=>v===fruit).length\n     sum+=count\n     total+=count\n   })\n   return total-sum\n }\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",3))\n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120))\n</code>\n<|/ a tags=javascript,node.js |>\n<| a tags=javascript,node.js |>\n<code>\nconst fruitDistribution= (s, n)=>{\n   let total=0\n   let fruits=s.split(\" \").map(Number)\n   let sum=0\n   fruits.forEach((fruit,i)=>{\n     let count=fruits.filter(v=>v===fruit).length\n     sum+=count\n     total+=count\n   })\n   return total-sum\n }\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",3))\n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120))\n</code>\n<|/ a dscore=0 |>\n<| a tags=javascript,node.js |>\n<code>\nconst fruitDistribution= (s, n)=>{\n   let total=0\n   let fruits=s.split(\" \").map(Number)\n   let sum=0\n   fruits.forEach((fruit,i)=>{\n     let count=fruits.filter(v=>v===fruit).length\n     sum+=count\n     total+=count\n   })\n   return total-sum\n }\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",3))\n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nconst fruitDistribution= (s, n)=>{\n   let total=0\n   let fruits=s.split(\" \").map(Number)\n   let sum=0\n   fruits.forEach((fruit,i)=>{\n     let count=fruits.filter(v=>v===fruit).length\n     sum+=count\n     total+=count\n   })\n   return total-sum\n }\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",3))\n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120))\n</code>\n<|/ a tags=javascript,node.js |>\n<| a dscore=0 |>\n<code>\nconst fruitDistribution= (s, n)=>{\n   let total=0\n   let fruits=s.split(\" \").map(Number)\n   let sum=0\n   fruits.forEach((fruit,i)=>{\n     let count=fruits.filter(v=>v===fruit).length\n     sum+=count\n     total+=count\n   })\n   return total-sum\n }\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",3))\n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120))\n</code>\n<|/ a tags=javascript,node.js |>\n<| a dscore=0 |>\n<code>\nconst fruitDistribution= (s, n)=>{\n   let total=0\n   let fruits=s.split(\" \").map(Number)\n   let sum=0\n   fruits.forEach((fruit,i)=>{\n     let count=fruits.filter(v=>v===fruit).length\n     sum+=count\n     total+=count\n   })\n   return total-sum\n }\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",3))\n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120))\n</code>\n<|/ a tags=javascript,node.js |>\n<| a tags=javascript,node.js |>\n<code>\nconst fruitDistribution= (s, n)=>{\n   let total=0\n   let fruits=s.split(\" \").map(Number)\n   let sum=0\n   fruits.forEach((fruit,i)=>{\n     let count=fruits.filter(v=>v===fruit).length\n     sum+=count\n     total+=count\n   })\n   return total-sum\n }\n console.log(fruitDistribution", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = len - 1;\n  let even = 0;\n  let index = -1;\n  while (min <= max) {\n    even = arr[min];\n    if (even % 2 === 0) {\n      min = min + 1;\n    } else {\n      max = max - 1;\n    }\n    index++;\n  }\n  return index;\n};\n\n// Given a binary tree, return the maximum depth of its subtree.\n// Return the maximum depth of its subtree (including self), if any.\n// Otherwise, return 0.\n// Follow up: Could you do this in O(log n) time?\nconst maxDepth = (root) => {\n  let maxDepth = 0;\n  let node = root;\n  while (node!== null) {\n    maxDepth = Math.max(maxDepth, node.depth);\n    node = node.left;\n  }\n  return maxDepth;\n};\n\n// Given a binary tree, return the minimum depth of its subtree.\n// Return the minimum depth of its subtree (including self), if any.\n// Otherwise, return 0.\n// Follow up: Could you do this in O(log n) time?\nconst minDepth = (root) => {\n  let minDepth = 0;\n  let node = root;\n  while (node!== null) {\n    minDepth = Math.min(minDepth, node.depth);\n    node = node.right;\n  }\n  return minDepth;\n};\n\n// Given a binary tree, return the maximum height of its subtree.\n// Return the maximum height of its subtree (including self), if any.\n// Otherwise, return 0.\n// Follow up: Could you do this in O(log n) time?\nconst maxHeight = (root) => {\n  let maxHeight = 0;\n  let node = root;\n  while (node!== null) {\n    maxHeight = Math.max(maxHeight, node.height);\n    node = node.left;\n  }\n  return maxHeight;\n};\n\n// Given a binary tree, return the minimum height of its subtree.\n// Return the minimum height of its subtree (including self), if any.\n// Otherwise, return 0.\n// Follow up: Could you do this in O(log n) time?\nconst minHeight = (root) => {\n  let minHeight = 0;\n  let node = root;\n  while (node!== null) {\n    minHeight = Math.min(minHeight, node.height);\n    node = node.right;\n  }\n  return minHeight;\n};\n\n// Given a binary tree, return the height of its subtree (including self).\n// Return the height of its subtree (including self), if any.\n// Otherwise, return 0.\n// Follow up: Could you do this in O(log n) time?\nconst height = (root) => {\n  let height = 0;\n  let node = root;\n  while (node!== null) {\n    height = Math.max(height, node.height);\n    node = node.left;\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of its subtree (including self).\n// Return the height of its subtree (including self), if any.\n// Otherwise, return 0.\n// Follow up: Could you do this in O(log n) time?\nconst heightRecur = (root) => {\n  let height = 0;\n  let node = root;\n  while (node!== null) {\n    height = Math.max(height, node.height);\n    node = node.right;\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of its subtree (including self).\n// Return the height of its subtree (including self), if any.\n// Otherwise, return 0.\n// Follow up: Could you do this in O(log n) time?\nconst heightRecur2 = (root) => {\n  let height = 0;\n  let node = root;\n  while (node!== null) {\n    height = Math.max(height, node.height);\n    node = node.left;\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of its subtree (including self).\n// Return the height of its subtree (including self), if any.\n// Otherwise, return 0.\n// Follow up: Could you do this in O(log n) time?\nconst heightRecur3 = (root) => {\n  let height = 0;\n  let node = root;\n  while (node!== null) {\n    height = Math.max(height, node.height);\n    node = node.right;\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of its subtree (including self).\n// Return the height of its subtree (including self), if any.\n// Otherwise, return 0.\n// Follow up: Could you do this in O(log n) time?\nconst heightRecur4 = (root) => {\n  let height = 0;\n  let node = root;\n  while (node!== null) {\n    height = Math.max(height, node.height);\n    node = node.left;\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of its subtree (including self).\n// Return the height of its subtree (including self), if any.\n// Otherwise, return 0.\n// Follow up: Could you do this in O(log n) time?\nconst heightRecur5 = (root) => {\n  let height = 0;\n  let node = root;\n  while (node!== null) {\n    height = Math.max(height, node.height);\n    node = node.right;\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of its subtree (including self).\n// Return the height of its subtree (including self), if any.\n// Otherwise, return 0.\n// Follow up: Could you do this in O(log n) time?\nconst heightRecur6 = (root) => {\n  let height = 0;\n  let node = root;\n  while (node!== null) {\n    height = Math.max(height, node.height);\n    node = node.left;\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of its subtree (including self).\n// Return the height of its subtree (including self), if any.\n// Otherwise, return 0.\n// Follow up: Could you do this in O(log n) time?\nconst heightRecur7 = (root) => {\n  let height = 0;\n  let node = root;\n  while (node!== null) {\n    height = Math.max(height, node.height);\n    node = node.right;\n  }\n  return height;\n};\n\n// Given a binary tree, return the height of its subtree (including self).\n// Return the height of its subtree (including self), if any.\n// Otherwise, return 0.\n// Follow up: Could you do this in O(log n) time?\nconst heightRecur8 = (root) => {\n  let height = 0;\n  let node = root;\n  while (node!== null) {\n    height = Math.max(height, node.height);\n    node = node.left;\n  }\n  return height;\n};\n\n// Given a binary ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You were given a list of positive integers. Return the number of distinct positive integers in the list.\n  Examples:\n      distinct([]) == 0\n      distinct([1]) == 1\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      distinct([1, 2, 3, 4, 5]) == 4\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * or gave a substring that contained a certain character\n * >>> filterBySubstringOrChar(['abc', 'bacd', 'cde', 'array'], 'a', 'b')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringOrChar = (strings, substring, character) => {\n  return strings.filter(string => string.indexOf(substring) > -1 || string.indexOf(character) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * or gave a substring that contained a certain character and that character\n * is in a certain position\n * >>> filterBySubstringOrChar(['abc', 'bacd', 'cde', 'array'], 'a', 'b', 'c')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringOrCharPosition = (strings, substring, character, position) => {\n  return strings.filter(string => string.indexOf(substring) > -1 || string.indexOf(character) > -1 && string.indexOf(character) === position);\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * or gave a substring that contained a certain character and that character\n * is in a certain position and that position is in a certain position\n * >>> filterBySubstringOrCharPosition(['abc', 'bacd', 'cde', 'array'], 'a', 'b', 'c', 'd')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringOrCharPositionPosition = (strings, substring, character, position, position2) => {\n  return strings.filter(string => string.indexOf(substring) > -1 || string.indexOf(character) > -1 && string.indexOf(character) === position && string.indexOf(character) === position2);\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * or gave a substring that contained a certain character and that character\n * is in a certain position and that position is in a certain position\n * >>> filterBySubstringOrCharPositionPosition(['abc', 'bacd', 'cde', 'array'], 'a', 'b', 'c', 'd', 'e')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringOrCharPositionPositionPosition = (strings, substring, character, position, position2, position3) => {\n  return strings.filter(string => string.indexOf(substring) > -1 || string.indexOf(character) > -1 && string.indexOf(character) === position && string.indexOf(character) === position2 && string.indexOf(character) === position3);\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * or gave a substring that contained a certain character and that character\n * is in a certain position and that position is in a certain position\n * >>> filterBySubstringOrCharPositionPosition(['abc', 'bacd', 'cde', 'array'], 'a', 'b', 'c', 'd', 'e', 'f')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringOrCharPositionPositionPosition = (strings, substring, character, position, position2, position3, position4) => {\n  return strings.filter(string => string.indexOf(substring) > -1 || string.indexOf(character) > -1 && string.indexOf(character) === position && string.indexOf(character) === position2 && string.indexOf(character) === position3 && string.indexOf(character) === position4);\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * or gave a substring that contained a certain character and that character\n * is in a certain position and that position is in a certain position\n * >>> filterBySubstringOrCharPositionPositionPosition(['abc', 'bacd', 'cde', 'array'], 'a', 'b', 'c', 'd', 'e', 'f', 'g')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringOrCharPositionPositionPosition = (strings, substring, character, position, position2, position3, position4, position5) => {\n  return strings.filter(string => string.indexOf(substring) > -1 || string.indexOf(character) > -1 && string.indexOf(character) === position && string.indexOf(character) === position2 && string.indexOf(character) === position3 && string.indexOf(character) === position4 && string.indexOf(character) === position5);\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * or gave a substring that contained a certain character and that character\n * is in a certain position and that position is in a certain position\n * >>> filterBySubstringOrCharPositionPositionPosition(['abc', 'bacd', 'cde', 'array'], 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringOrCharPositionPositionPositionPosition = (strings, substring, character, position, position2, position3, position4, position5, position6) => {\n  return strings.filter(string => string.indexOf(substring) > -1 || string.indexOf(character) > -1 && string.indexOf(character) === position && string.indexOf(character) === position2 && string.indexOf(character) === position3 && string.indexOf(character) === position4 && string.indexOf(character) === position5 && string.indexOf(character) === position6);\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * or gave a substring that contained a certain character and that character\n * is in a certain position and that position is in a certain position\n * >>> filterBySubstringOrCharPositionPositionPosition(['abc', 'bacd', 'cde', 'array'], 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringOrCharPositionPositionPositionPosition = (strings, substring, character, position, position2, position3, position4, position5, position6, position7) => {\n  return strings.filter(string => string.indexOf(substring) > -1 || string.indexOf(character) > -1 && string.indexOf(character) === position && string.indexOf(character) === position2 && string.indexOf(character) === position3 && string.indexOf(character) === position4 && string.indexOf(character) === position5 && string.indexOf(character) === position6 && string.indexOf(character) === position7);\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * or gave a substring that contained a certain character and that character\n * is in a certain position and that position is in a certain position\n * >>> filterBySubstringOrCharPositionPositionPositionPosition(['abc', 'bacd', 'cde', 'array'], 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringOrCharPositionPositionPositionPosition = (strings, substring, character, position, position2, position3, position4, position5, position6, position7, position8) => {\n  return strings.filter(string => string.indexOf(substring) > -1 || string.indexOf(character) > -1 && string.indexOf(character) === position && string.indexOf(character) === position2 && string.indexOf(character) === position3 && string.indexOf(character) === position4 && string.indexOf(character) === position5 && string.indexOf(character) === position6 && string.indexOf(character) === position7 && string.indexOf(character) === position8);\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * or gave a substring that contained a certain character and that character\n * is in a certain position and that position is in a certain position\n * >>> filterBySubstringOrCharPositionPositionPositionPosition(['abc', 'bacd', 'cde', 'array'], 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', '", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedArr = []\n  let sortedArr2 = []\n  let sortedArr3 = []\n  let sortedArr4 = []\n  let sortedArr5 = []\n  let sortedArr6 = []\n  let sortedArr7 = []\n  let sortedArr8 = []\n  let sortedArr9 = []\n  let sortedArr10 = []\n  let sortedArr11 = []\n  let sortedArr12 = []\n  let sortedArr13 = []\n  let sortedArr14 = []\n  let sortedArr15 = []\n  let sortedArr16 = []\n  let sortedArr17 = []\n  let sortedArr18 = []\n  let sortedArr19 = []\n  let sortedArr20 = []\n  let sortedArr21 = []\n  let sortedArr22 = []\n  let sortedArr23 = []\n  let sortedArr24 = []\n  let sortedArr25 = []\n  let sortedArr26 = []\n  let sortedArr27 = []\n  let sortedArr28 = []\n  let sortedArr29 = []\n  let sortedArr30 = []\n  let sortedArr31 = []\n  let sortedArr32 = []\n  let sortedArr33 = []\n  let sortedArr34 = []\n  let sortedArr35 = []\n  let sortedArr36 = []\n  let sortedArr37 = []\n  let sortedArr38 = []\n  let sortedArr39 = []\n  let sortedArr40 = []\n  let sortedArr41 = []\n  let sortedArr42 = []\n  let sortedArr43 = []\n  let sortedArr44 = []\n  let sortedArr45 = []\n  let sortedArr46 = []\n  let sortedArr47 = []\n  let sortedArr48 = []\n  let sortedArr49 = []\n  let sortedArr50 = []\n  let sortedArr51 = []\n  let sortedArr52 = []\n  let sortedArr53 = []\n  let sortedArr54 = []\n  let sortedArr55 = []\n  let sortedArr56 = []\n  let sortedArr57 = []\n  let sortedArr58 = []\n  let sortedArr59 = []\n  let sortedArr60 = []\n  let sortedArr61 = []\n  let sortedArr62 = []\n  let sortedArr63 = []\n  let sortedArr64 = []\n  let sortedArr65 = []\n  let sortedArr66 = []\n  let sortedArr67 = []\n  let sortedArr68 = []\n  let sortedArr69 = []\n  let sortedArr70 = []\n  let sortedArr71 = []\n  let sortedArr72 = []\n  let sortedArr73 = []\n  let sortedArr74 = []\n  let sortedArr75 = []\n  let sortedArr76 = []\n  let sortedArr77 = []\n  let sortedArr78 = []\n  let sortedArr79 = []\n  let sortedArr80 = []\n  let sortedArr81 = []\n  let sortedArr82 = []\n  let sortedArr83 = []\n  let sortedArr84 = []\n  let sortedArr85 = []\n  let sortedArr86 = []\n  let sortedArr87 = []\n  let sortedArr88 = []\n  let sortedArr89 = []\n  let sortedArr90 = []\n  let sortedArr91 = []\n  let sortedArr92 = []\n  let sortedArr93 = []\n  let sortedArr94 = []\n  let sortedArr95 = []\n  let sortedArr96 = []\n  let sortedArr97 = []\n  let sortedArr98 = []\n  let sortedArr99 = []\n  let sortedArr100 = []\n  let sortedArr101 = []\n  let sortedArr102 = []\n  let sortedArr103 = []\n  let sortedArr104 = []\n  let sortedArr105 = []\n  let sortedArr106 = []\n  let sortedArr107 = []\n  let sortedArr108 = []\n  let sortedArr109 = []\n  let sortedArr110 = []\n  let sortedAr1111 = []\n  let sortedArr112 = []\n  let sortedArr113 = []\n  let sortedArr114 = []\n  let sortedArr115 = []\n  let sortedArr116 = []\n  let sortedArr117 = []\n  let sortedArr118 = []\n  let sortedArr119 = []\n  let sortedArr120 = []\n  let sortedAr121 = []\n  let sortedAr122 = []\n  let sortedAr123 = []\n  let sortedAr124 = []\n  let sortedAr125 = []\n  let sortedAr126 = []\n  let sortedAr127 = []\n  let sortedAr128 = []\n  let sortedAr129 = []\n  let sortedAr130 = []\n  let sortedAr131 = []\n  let sortedAr132 = []\n  let sortedAr133 = []\n  let sortedAr134 = []\n  let sortedAr135 = []\n  let sortedAr136 = []\n  let sortedAr137 = []\n  let sortedAr138 = []\n  let sortedAr139 = []\n  let sortedAr140 = []\n  let sortedAr141 = []\n  let sortedAr142 = []\n  let sortedAr143 = []\n  let sortedAr144 = []\n  let sortedAr145 = []\n  let sortedAr146 = []\n  let sortedAr147 = []\n  let sortedAr148 = []\n  let sortedAr149 = []\n  let sortedAr150 = []\n  let sortedAr151 = []\n  let sortedAr152 = []\n  let sortedAr153 = []\n  let sortedAr154 = []\n  let sortedAr155 = []\n  let sortedAr156 = []\n  let sortedAr157 = []\n  let sortedAr158 = []\n  let sortedAr159 = []\n  let sortedAr160 = []\n  let sortedAr161 = []\n  let sortedAr162 = []\n  let sortedAr163 = []\n  let sortedAr164 = []\n  let sortedAr165 = []\n  let sortedAr166 = []\n  let sortedAr167 = []\n  let sortedAr168 = []\n  let sortedAr169 = []\n  let sortedAr170 = []\n  let sortedAr171 = []\n  let sortedAr172 = []\n  let sortedAr173 = []\n  let sortedAr174 = []\n  let sortedAr175 = []\n  let sortedAr176 = []\n  let sortedAr177 = []\n  let sortedAr178 = []\n  let sortedAr179 = []\n  let sortedAr180 = []\n  let sortedAr181 = []\n  let sortedAr182 = []\n  let sortedAr183 = []\n  let sortedAr184 = []\n  let sortedAr185 = []\n  let sortedAr186 = []\n  let sortedAr187 = []\n  let sortedAr188 = []\n  let sortedAr189 = []\n  let sortedAr190 = []\n  let sortedAr191 = []\n  let sortedAr192 = []\n  let sortedAr193 = []\n  let sortedAr194 = []\n  let sortedAr195 = []\n  let sortedAr196 = []\n  let sortedAr197 = []\n  let sortedAr198 = []\n  let sortedAr199 = []\n  let sortedAr200 = []\n  let sortedAr201 = []\n  let sortedAr202 = []\n  let sortedAr203 = []\n  let sortedAr204 = []\n  let sortedAr205 = []\n  let sortedAr206 = []\n  let sortedAr207 = []\n  let sortedAr208 = []\n  let sortedAr209 = []\n  let sortedAr210 = []\n  let sortedAr211 = []\n  let sortedAr212 = []\n  let sortedAr213 = []\n  let sortedAr214 = []\n  let sortedAr215 = []\n  let sortedAr216 = []\n  let sortedAr217 = []\n  let sortedAr218 = []\n  let sortedAr219 = []\n  let sortedAr220 = []\n  let sortedAr221 = []\n  let sortedAr222 = []\n  let sortedAr223 = []\n  let sortedAr224 = []\n  let sortedAr225 = []\n  let sortedAr226 = []\n  let sortedAr227 = []\n  let sortedAr228 = []\n  let sortedAr229 = []\n  let sortedAr230 = []\n  let sortedAr231 = []", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let sumA = a + b + c;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;\n  let sumR = a + c;\n  let sumS = a + b;\n  let sumT = a + c;\n  let sumU = a + b;\n  let sumV = a + c;\n  let sumW = a + b;\n  let sumX = a + c;\n  let sumY = a + b;\n  let sumZ = a + c;\n  let sumA = a + b;\n  let sumB = a + c;\n  let sumC = a + b;\n  let sumD = a + c;\n  let sumE = a + b;\n  let sumF = a + c;\n  let sumG = a + b;\n  let sumH = a + c;\n  let sumI = a + b;\n  let sumJ = a + c;\n  let sumK = a + b;\n  let sumL = a + c;\n  let sumM = a + b;\n  let sumN = a + c;\n  let sumO = a + b;\n  let sumP = a + c;\n  let sumQ = a + b;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length < 2) return false;\n  if (q.length % 2!== 0) return false;\n  if (q.reduce((acc, val) => acc + val, 0) < w) return false;\n  return true;\n};\n\n/*\n  Write a function that returned true if the object q was a palindromic list, and false otherwise. \n   The object q was a palindromic list if it was balanced (it was a palindromic list) and the sum of its elements was greater than or equaled the maximum possible weight w.\n\n  Example:\n  isPalindromic([3, 2, 1]) ➞ true\n  # 3 is greater than the maximum possible weight, and it's balanced.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # 3 is not a palindromic list.\n\n  isPalindromic", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallestChange;\n\n},{}],8:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of steps to change \n   the array so that it becomes a palindrome.\n\n  For example:\n  smallestPalindrome([1,2,3,5,4,7,9,6]) == 4\n  smallestPalindrome([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestPalindrome([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestPalindrome = (arr) => {\n  let len = arr.length;\n  let change = 0;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallestPalindrome;\n\n},{}],9:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of steps to change \n   the array so that it becomes a palindrome.\n\n  For example:\n  smallestPalindrome([1,2,3,5,4,7,9,6]) == 4\n  smallestPalindrome([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestPalindrome([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestPalindrome = (arr) => {\n  let len = arr.length;\n  let change = 0;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallestPalindrome;\n\n},{}],10:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of steps to change \n   the array so that it becomes a palindrome.\n\n  For example:\n  smallestPalindrome([1,2,3,5,4,7,9,6]) == 4\n  smallestPalindrome([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestPalindrome([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestPalindrome = (arr) => {\n  let len = arr.length;\n  let change = 0;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallestPalindrome;\n\n},{}],11:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of steps to change \n   the array so that it becomes a palindrome.\n\n  For example:\n  smallestPalindrome([1,2,3,5,4,7,9,6]) == 4\n  smallestPalindrome([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestPalindrome([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestPalindrome = (arr) => {\n  let len = arr.length;\n  let change = 0;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallestPalindrome;\n\n},{}],12:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of steps to change \n   the array so that it becomes a palindrome.\n\n  For example:\n  smallestPalindrome([1,2,3,5,4,7,9,6]) == 4\n  smallestPalindrome([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestPalindrome([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestPalindrome = (arr) => {\n  let len = arr.length;\n  let change = 0;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallestPalindrome;\n\n},{}],13:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of steps to change \n   the array so that it becomes a palindrome.\n\n  For example:\n  smallestPalindrome([1,2,3,5,4,7,9,6]) == 4\n  smallestPalindrome([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestPalindrome([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestPalindrome = (arr) => {\n  let len = arr.length;\n  let change = 0;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallestPalindrome;\n\n},{}],14:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of steps to change \n   the array so that it becomes a palindrome.\n\n  For example:\n  smallestPalindrome([1,2,3,5,4,7,9,6]) == 4\n  smallestPalindrome([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestPalindrome([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestPalindrome = (arr) => {\n  let len = arr.length;\n  let change = 0;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallestPalindrome;\n\n},{}],15:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of steps to change \n   the array so that it becomes a palindrome.\n\n  For example:\n  smallestPalindrome([1,2,3,5,4,7,9,6]) == 4\n  smallestPalindrome([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestPalindrome([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestPalindrome = (arr) => {\n  let len = arr.length;\n  let change = 0;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallestPalindrome;\n\n},{}],16:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of steps to change \n   the array so that it becomes a palindrome.\n\n  For example:\n  smallestPalindrome([1,2,3,5,4,7,9,6]) == 4\n  smallestPalindrome([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestPalindrome([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestPalindrome = (arr) => {\n  let len = arr.length;\n  let change = 0;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      change++;\n    }\n  }\n  return change;\n};\n\nmodule.exports = smallestPalindrome;\n\n},{}],17:[function(require,module,exports){\n/*\n  Given an array arr of integers, find the minimum number of steps to change \n   the array so that it becomes a palindrome.\n\n  For example:\n  smallestPalindrome([1,2,3,5,4,7,9,6]) == 4\n  smallestPalindrome([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestPalindrome([1, 2, 3, 2, 1]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach(item => {\n    if (lst2.includes(item)) {\n      total++;\n    }\n  });\n  return total;\n};\n\nmodule.exports = totalMatch;\n\n},{}],13:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\n/**\n * Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list greater than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalNotMatch = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach(item => {\n    if (!lst2.includes(item)) {\n      total++;\n    }\n  });\n  return total;\n};\n\nmodule.exports = totalNotMatch;\n\n},{\"./totalMatch\":12}],14:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\n/**\n * Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list equal to the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalEqual = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach(item => {\n    if (item === lst2) {\n      total++;\n    }\n  });\n  return total;\n};\n\nmodule.exports = totalEqual;\n\n},{\"./totalMatch\":12}],15:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\n/**\n * Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list greater than or equal to the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalGreaterThan = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach(item => {\n    if (item > lst2) {\n      total++;\n    }\n  });\n  return total;\n};\n\nmodule.exports = totalGreaterThan;\n\n},{\"./totalMatch\":12}],16:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\n/**\n * Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than or equal to the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalLessThan = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach(item => {\n    if (item < lst2) {\n      total++;\n    }\n  });\n  return total;\n};\n\nmodule.exports = totalLessThan;\n\n},{\"./totalMatch\":12}],17:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\n/**\n * Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list equal to the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalEqual = (lst1, lst2) => {\n  let total = 0;\n  lst1.forEach(item => {\n    if (item === lst2) {\n      total++;\n    }\n  });\n  return total;\n};\n\nmodule.exports = totalEqual;\n\n},{\"./totalMatch\":12}],18:[function(require,module,exports){\nconst totalMatch = require('./totalMatch');\n\n/**\n * Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list equal to the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) �", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return a % 3 === 0;\n  }\n  return false;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n % x === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of two and false in other cases. \n   x was a power of two if n**int=x\n  For example:\n  isPowerOfTwo(1, 4) => true\n  isPowerOfTwo(2, 2) => true\n  isPowerOfTwo(8, 2) => true\n  isPowerOfTwo(3, 2) => false\n  isPowerOfTwo(3, 1) => false\n  isPowerOfTwo(5, 3) => false\n  */\nconst isPowerOfTwo = (x, n) => {\n  if (n % x === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of three and false in other cases. \n   x was a power of three if n**int=x\n  For example:\n  isPowerOfThree(1, 4) => true\n  isPowerOfThree(2, 2) => true\n  isPowerOfThree(8, 2) => true\n  isPowerOfThree(3, 2) => false\n  isPowerOfThree(3, 1) => false\n  isPowerOfThree(5, 3) => false\n  */\nconst isPowerOfThree = (x, n) => {\n  if (n % x === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of four and false in other cases. \n   x was a power of four if n**int=x\n  For example:\n  isPowerOfFour(1, 4) => true\n  isPowerOfFour(2, 2) => true\n  isPowerOfFour(8, 2) => true\n  isPowerOfFour(3, 2) => false\n  isPowerOfFour(3, 1) => false\n  isPowerOfFour(5, 3) => false\n  */\nconst isPowerOfFour = (x, n) => {\n  if (n % x === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of five and false in other cases. \n   x was a power of five if n**int=x\n  For example:\n  isPowerOfFive(1, 4) => true\n  isPowerOfFive(2, 2) => true\n  isPowerOfFive(8, 2) => true\n  isPowerOfFive(3, 2) => false\n  isPowerOfFive(3, 1) => false\n  isPowerOfFive(5, 3) => false\n  */\nconst isPowerOfFive = (x, n) => {\n  if (n % x === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of six and false in other cases. \n   x was a power of six if n**int=x\n  For example:\n  isPowerOfSix(1, 4) => true\n  isPowerOfSix(2, 2) => true\n  isPowerOfSix(8, 2) => true\n  isPowerOfSix(3, 2) => false\n  isPowerOfSix(3, 1) => false\n  isPowerOfSix(5, 3) => false\n  */\nconst isPowerOfSix = (x, n) => {\n  if (n % x === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of seven and false in other cases. \n   x was a power of seven if n**int=x\n  For example:\n  isPowerOfSeven(1, 4) => true\n  isPowerOfSeven(2, 2) => true\n  isPowerOfSeven(8, 2) => true\n  isPowerOfSeven(3, 2) => false\n  isPowerOfSeven(3, 1) => false\n  isPowerOfSeven(5, 3) => false\n  */\nconst isPowerOfSeven = (x, n) => {\n  if (n % x === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of eight and false in other cases. \n   x was a power of eight if n**int=x\n  For example:\n  isPowerOfEight(1, 4) => true\n  isPowerOfEight(2, 2) => true\n  isPowerOfEight(8, 2) => true\n  isPowerOfEight(3, 2) => false\n  isPowerOfEight(3, 1) => false\n  isPowerOfEight(5, 3) => false\n  */\nconst isPowerOfEight = (x, n) => {\n  if (n % x === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of nine and false in other cases. \n   x was a power of nine if n**int=x\n  For example:\n  isPowerOfNine(1, 4) => true\n  isPowerOfNine(2, 2) => true\n  isPowerOfNine(8, 2) => true\n  isPowerOfNine(3, 2) => false\n  isPowerOfNine(3, 1) => false\n  isPowerOfNine(5, 3) => false\n  */\nconst isPowerOfNine = (x, n) => {\n  if (n % x === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of ten and false in other cases. \n   x was a power of ten if n**int=x\n  For example:\n  isPowerOfTen(1, 4) => true\n  isPowerOfTen(2, 2) => true\n  isPowerOfTen(8, 2) => true\n  isPowerOfTen(3, 2) => false\n  isPowerOfTen(3, 1) => false\n  isPowerOfTen(5, 3) => false\n  */\nconst isPowerOfTen = (x, n) => {\n  if (n % x === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of eleven and false in other cases. \n   x was a power of eleven if n**int=x\n  For example:\n  isPowerOfEleven(1, 4) => true\n  isPowerOfEleven(2, 2) => true\n  isPowerOfEleven(8, 2) => true\n  isPowerOfEleven(3, 2) => false\n  isPowerOfEleven(3, 1) => false\n  isPowerOfEleven(5, 3) => false\n  */\nconst isPowerOfEleven = (x, n) => {\n  if (n % x === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   power of twelve and false in other cases. \n   x was a power of twelve if n**int=x\n  For example:\n  isPowerOfTwelve(1, 4) => true\n  isPowerOfTwelve(2, 2) => true\n  isPowerOfTwelve(8, 2) => true\n  isPowerOfTwelve(3, 2) => false\n  isPowerOfTwelve(3, 1) => false\n  isPowerOfTwelve(5, 3) => false\n  */\nconst is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false;\n  if (a % 2 === 0) return false;\n  if (a % 3 === 0) return false;\n  if (a % 4 === 0) return false;\n  return true;\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(4) ==> false\n  iscube(5) ==> false\n  iscube(6) ==> false\n  iscube(7) ==> false\n  iscube(8) ==> false\n  iscube(9) ==> false\n  iscube(10) ==> false\n  iscube(11) ==> false\n  iscube(12) ==> false\n  iscube(13) ==> false\n  iscube(14) ==> false\n  iscube(15) ==> false\n  iscube(16) ==> false\n  iscube(17) ==> false\n  iscube(18) ==> false\n  iscube(19) ==> false\n  iscube(20) ==> false\n  iscube(21) ==> false\n  iscube(22) ==> false\n  iscube(23) ==> false\n  iscube(24) ==> false\n  iscube(25) ==> false\n  iscube(26) ==> false\n  iscube(27) ==> false\n  iscube(28) ==> false\n  iscube(29) ==> false\n  iscube(30) ==> false\n  iscube(31) ==> false\n  iscube(32) ==> false\n  iscube(33) ==> false\n  iscube(34) ==> false\n  iscube(35) ==> false\n  iscube(36) ==> false\n  iscube(37) ==> false\n  iscube(38) ==> false\n  iscube(39) ==> false\n  iscube(40) ==> false\n  iscube(41) ==> false\n  iscube(42) ==> false\n  iscube(43) ==> false\n  iscube(44) ==> false\n  iscube(45) ==> false\n  iscube(46) ==> false\n  iscube(47) ==> false\n  iscube(48) ==> false\n  iscube(49) ==> false\n  iscube(50) ==> false\n  iscube(51) ==> false\n  iscube(52) ==> false\n  iscube(53) ==> false\n  iscube(54) ==> false\n  iscube(55) ==> false\n  iscube(56) ==> false\n  iscube(57) ==> false\n  iscube(58) ==> false\n  iscube(59) ==> false\n  iscube(60) ==> false\n  iscube(61) ==> false\n  iscube(62) ==> false\n  iscube(63) ==> false\n  iscube(64) ==> false\n  iscube(65) ==> false\n  iscube(66) ==> false\n  iscube(67) ==> false\n  iscube(68) ==> false\n  iscube(69) ==> false\n  iscube(70) ==> false\n  iscube(71) ==> false\n  iscube(72) ==> false\n  iscube(73) ==> false\n  iscube(74) ==> false\n  iscube(75) ==> false\n  iscube(76) ==> false\n  iscube(77) ==> false\n  iscube(78) ==> false\n  iscube(79) ==> false\n  iscube(80) ==> false\n  iscube(81) ==> false\n  iscube(82) ==> false\n  iscube(83) ==> false\n  iscube(84) ==> false\n  iscube(85) ==> false\n  iscube(86) ==> false\n  iscube(87) ==> false\n  iscube(88) ==> false\n  iscube(89) ==> false\n  iscube(90) ==> false\n  iscube(91) ==> false\n  iscube(92) ==> false\n  iscube(93) ==> false\n  iscube(94) ==> false\n  iscube(95) ==> false\n  iscube(96) ==> false\n  iscube(97) ==> false\n  iscube(98) ==> false\n  iscube(99) ==> false\n  iscube(100) ==> false\n  iscube(101) ==> false\n  iscube(102) ==> false\n  iscube(103) ==> false\n  iscube(104) ==> false\n  iscube(105) ==> false\n  iscube(106) ==> false\n  iscube(107) ==> false\n  iscube(108) ==> false\n  iscube(109) ==> false\n  iscube(110) ==> false\n  iscube(111) ==> false\n  iscube(112) ==> false\n  iscube(113) ==> false\n  iscube(114) ==> false\n  iscube(115) ==> false\n  iscube(116) ==> false\n  iscube(117) ==> false\n  iscube(118) ==> false\n  iscube(119) ==> false\n  iscube(120) ==> false\n  iscube(121) ==> false\n  iscube(122) ==> false\n  iscube(123) ==> false\n  iscube(124) ==> false\n  iscube(125) ==> false\n  iscube(126) ==> false\n  iscube(127) ==> false\n  iscube(128) ==> false\n  iscube(129) ==> false\n  iscube(130) ==> false\n  iscube(131) ==> false\n  iscube(132) ==> false\n  iscube(133) ==> false\n  iscube(134) ==> false\n  iscube(135) ==> false\n  iscube(136) ==> false\n  iscube(137) ==> false\n  iscube(138) ==> false\n  iscube(139) ==> false\n  iscube(140) ==> false\n  iscube(141) ==> false\n  iscube(142) ==> false\n  iscube(143) ==> false\n  iscube(144) ==> false\n  iscube(145) ==> false\n  iscube(146) ==> false\n  iscube(147) ==> false\n  iscube(148) ==> false\n  iscube(149) ==> false\n  iscube(150) ==> false\n  iscube(151) ==> false\n  iscube(152) ==> false\n  iscube(153) ==> false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let key = '';\n  let numStr = '';\n  let numArray = num.split('');\n  for (let i = 0; i < numArray.length; i++) {\n    if (numArray[i] === '0') {\n      numStr += numArray[i];\n    } else {\n      numStr += numArray[i] + numArray[i];\n    }\n  }\n  numStr = numStr.substr(0, numStr.length - 1);\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.substr(0, numStr.length);\n  numStr = numStr.toUpperCase();\n  numStr = numStr.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) == '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes an integer and returns the binary representation of that integer. \n  If the integer is negative, return '-'.\n\n  Examples:\n  binaryToDecimal(10)   # returns 10\n  binaryToDecimal(-10)   # returns -10\n  binaryToDecimal(32)   # returns 32\n  binaryToDecimal(-32)   # returns -32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) == '1') {\n      decimal += '1';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimal;\n};\n\n/*\n  Write a function that takes an integer and returns the decimal representation of that integer. \n  If the integer is negative, return '-'.\n\n  Examples:\n  decimalToBinary(10)   # returns \"10\"\n  decimalToBinary(-10)   # returns \"-10\"\n  decimalToBinary(32)   # returns \"32\"\n  decimalToBinary(-32)   # returns \"-32\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) == '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes an integer and returns the decimal representation of that integer. \n  If the integer is negative, return '-'.\n\n  Examples:\n  binaryToDecimal(10)   # returns 10\n  binaryToDecimal(-10)   # returns -10\n  binaryToDecimal(32)   # returns 32\n  binaryToDecimal(-32)   # returns -32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) == '1') {\n      decimal += '1';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimal;\n};\n\n/*\n  Write a function that takes an integer and returns the decimal representation of that integer. \n  If the integer is negative, return '-'.\n\n  Examples:\n  decimalToBinary(10)   # returns \"10\"\n  decimalToBinary(-10)   # returns \"-10\"\n  decimalToBinary(32)   # returns \"32\"\n  decimalToBinary(-32)   # returns \"-32\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) == '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes an integer and returns the decimal representation of that integer. \n  If the integer is negative, return '-'.\n\n  Examples:\n  binaryToDecimal(10)   # returns \"10\"\n  binaryToDecimal(-10)   # returns \"-10\"\n  binaryToDecimal(32)   # returns \"32\"\n  binaryToDecimal(-32)   # returns \"-32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) == '1') {\n      decimal += '1';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimal;\n};\n\n/*\n  Write a function that takes an integer and returns the decimal representation of that integer. \n  If the integer is negative, return '-'.\n\n  Examples:\n  decimalToBinary(10)   # returns \"10\"\n  decimalToBinary(-10)   # returns \"-10\"\n  decimalToBinary(32)   # returns \"32\"\n  decimalToBinary(-32)   # returns \"-32\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) == '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes an integer and returns the decimal representation of that integer. \n  If the integer is negative, return '-'.\n\n  Examples:\n  binaryToDecimal(10)   # returns \"10\"\n  binaryToDecimal(-10)   # returns \"-10\"\n  binaryToDecimal(32)   # returns \"32\"\n  binaryToDecimal(-32)   # returns \"-32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) == '1') {\n      decimal += '1';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimal;\n};\n\n/*\n  Write a function that takes an integer and returns the decimal representation of that integer. \n  If the integer is negative, return '-'.\n\n  Examples:\n  decimalToBinary(10)   # returns \"10\"\n  decimalToBinary(-10)   # returns \"-10\"\n  decimalToBinary(32)   # returns \"32\"\n  decimalToBinary(-32)   # returns \"-32\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) == '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n  return binary;\n};\n\n/*\n  Write a function that takes an integer and returns the decimal representation of that integer. \n  If the integer is negative, return '-'.\n\n  Examples:\n  binaryToDecimal(10)   # returns \"10\"\n  binaryToDecimal(-10)   # returns \"-10\"\n  binaryToDecimal(32)   # returns \"32\"\n  binaryToDecimal(-32)   # returns \"-32\"\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryString = binary.toString();\n  for (let i = 0; i < binaryString.length; i++) {\n    if (binaryString.charAt(i) == '1') {\n      decimal += '1';\n    } else {\n      decimal += '0';\n    }\n  }\n  return decimal;\n};\n\n/*\n  Write a function that takes an integer and returns the decimal representation of that integer. \n  If the integer is negative, return '-'.\n\n  Examples:\n  decimalToBinary(10)   # returns \"10\"\n  decimalToBinary(-10)   # returns \"-10\"\n  decimalToBinary(32)   # returns \"32\"\n  decimalToBinary(-32)   # returns \"-32\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a sorted list of integers, return the largest and smallest element in the list.\n  >>> largestElement([5, 2, 8, 1, 3])\n  1\n  >>> smallestElement([5, 2, 8, 1, 3])\n  3\n  */\nconst largestElement = (numbers) => {\n  let largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return largest;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list.\n  >>> sumOf([5, 2, 8, 1, 3])\n  10\n  */\nconst sumOf = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list.\n  >>> productOf([5, 2, 8, 1, 3])\n  24\n  */\nconst productOf = (numbers) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list modulo n.\n  >>> moduloOf([5, 2, 8, 1, 3], 2)\n  24\n  */\nconst moduloOf = (numbers, n) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product %= numbers[i];\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list modulo n.\n  >>> sumOfModuloOf([5, 2, 8, 1, 3], 2)\n  10\n  */\nconst sumOfModuloOf = (numbers, n) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += moduloOf(numbers, numbers[i]);\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list modulo n.\n  >>> productOfModuloOf([5, 2, 8, 1, 3], 2)\n  24\n  */\nconst productOfModuloOf = (numbers, n) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product %= numbers[i];\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list modulo n.\n  >>> sumOfModuloOfModuloOf([5, 2, 8, 1, 3], 2)\n  10\n  */\nconst sumOfModuloOfModuloOf = (numbers, n) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += moduloOf(numbers, numbers[i]);\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list modulo n.\n  >>> productOfModuloOfModuloOf([5, 2, 8, 1, 3], 2)\n  24\n  */\nconst productOfModuloOfModuloOf = (numbers, n) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product %= numbers[i];\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list modulo n.\n  >>> sumOfModuloOfModuloOfModuloOf([5, 2, 8, 1, 3], 2)\n  10\n  */\nconst sumOfModuloOfModuloOfModuloOf = (numbers, n) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += moduloOf(numbers, numbers[i]);\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list modulo n.\n  >>> productOfModuloOfModuloOfModuloOf([5, 2, 8, 1, 3], 2)\n  24\n  */\nconst productOfModuloOfModuloOfModuloOf = (numbers, n) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product %= numbers[i];\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list modulo n.\n  >>> sumOfModuloOfModuloOfModuloOfModuloOf([5, 2, 8, 1, 3], 2)\n  10\n  */\nconst sumOfModuloOfModuloOfModuloOfModuloOf = (numbers, n) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += moduloOf(numbers, numbers[i]);\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list modulo n.\n  >>> productOfModuloOfModuloOfModuloOfModuloOf([5, 2, 8, 1, 3], 2)\n  24\n  */\nconst productOfModuloOfModuloOfModuloOfModuloOf = (numbers, n) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product %= numbers[i];\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list modulo n.\n  >>> sumOfModuloOfModuloOfModuloOfModuloOfModuloOf([5, 2, 8, 1, 3], 2)\n  10\n  */\nconst sumOfModuloOfModuloOfModuloOfModuloOfModuloOf = (numbers, n) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += moduloOf(numbers, numbers[i]);\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list modulo n.\n  >>> productOfModuloOfModuloOfModuloOfModuloOfModuloOf([5, 2, 8, 1, 3], 2)\n  24\n  */\nconst productOfModuloOfModuloOfModuloOfModuloOfModuloOf = (numbers, n) => {\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product %= numbers[i];\n  }\n  return product;\n};\n\n/* Given a sorted list of integers, return the sum of all the elements in the list modulo n.\n  >>> sumOfModuloOfModuloOfModuloOfModuloOfModuloOfModuloOf([5, 2, 8, 1, 3], 2)\n  10\n  */\nconst sumOfModuloOfModuloOfModuloOfModuloOfModuloOfModuloOf = (numbers, n) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += moduloOf(numbers, numbers[i]);\n  }\n  return sum;\n};\n\n/* Given a sorted list of integers, return the product of the elements in the list modulo n.\n  >>> productOfModuloOfModuloOfModuloOfModuloOfModuloOfModuloOf([5, 2, 8, 1, 3], 2)\n  24\n  */\nconst productOfModuloOfModuloOfModuloOfModuloOfModuloOfModuloOf = (numbers, n) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length;\n  const isHappy = len >= 3 && len % 3 === 0;\n  return isHappy;\n};\n\n/*\n   You were given a string s.\n   Your task is to check if it is palindrome or not.\n   A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  const len = s.length;\n  const isPalindrome = len === len? true : false;\n  return isPalindrome;\n};\n\n/*\n   You were given a string s.\n   Your task is to check if it is palindrome or not.\n   A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReverse = (s) => {\n  const len = s.length;\n  const isPalindrome = len === len? true : false;\n  return isPalindrome;\n};\n\n/*\n   You were given a string s.\n   Your task is to check if it is palindrome or not.\n   A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReversed = (s) => {\n  const len = s.length;\n  const isPalindrome = len === len? true : false;\n  return isPalindrome;\n};\n\n/*\n   You were given a string s.\n   Your task is to check if it is palindrome or not.\n   A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReversedReverse = (s) => {\n  const len = s.length;\n  const isPalindrome = len === len? true : false;\n  return isPalindrome;\n};\n\n/*\n   You were given a string s.\n   Your task is to check if it is palindrome or not.\n   A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReversedReversed = (s) => {\n  const len = s.length;\n  const isPalindrome = len === len? true : false;\n  return isPalindrome;\n};\n\n/*\n   You were given a string s.\n   Your task is to check if it is palindrome or not.\n   A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReversedReversedReverse = (s) => {\n  const len = s.length;\n  const isPalindrome = len === len? true : false;\n  return isPalindrome;\n};\n\n/*\n   You were given a string s.\n   Your task is to check if it is palindrome or not.\n   A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReversedReversedReversed = (s) => {\n  const len = s.length;\n  const isPalindrome = len === len? true : false;\n  return isPalindrome;\n};\n\n/*\n   You were given a string s.\n   Your task is to check if it is palindrome or not.\n   A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReversedReversedReversedReverse = (s) => {\n  const len = s.length;\n  const isPalindrome = len === len? true : false;\n  return isPalindrome;\n};\n\n/*\n   You were given a string s.\n   Your task is to check if it is palindrome or not.\n   A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindromeReversedReversedReversedReversedReverse = (s) => {\n  const len = s.length;\n  const isPalindrome = len === len? true : false;\n  return isPalindrome;\n};\n\n/*\n   You were given a string s.\n   Your task is to check if it is palindrome or not.\n   A string is palindrome if it reads the same backward as forward.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindro", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  if (length < 2) {\n    return false;\n  }\n  let isPrime = true;\n  for (let i = 2; i < length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  prime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==1){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 0. \n  */ \n const startsZeroEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==0){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -1. \n  */ \n const startsNegativeEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-1){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -2. \n  */ \n const startsTwoEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-2){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -3. \n  */ \n const startsThreeEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-3){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -4. \n  */ \n const startsFourEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-4){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -5. \n  */ \n const startsFiveEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-5){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -6. \n  */ \n const startsSixEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-6){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -7. \n  */ \n const startsSevenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-7){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -8. \n  */ \n const startsEightEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-8){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -9. \n  */ \n const startsNineEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-9){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -10. \n  */ \n const startsTenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-10){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -11. \n  */ \n const startsElevenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-11){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -12. \n  */ \n const startsTwelveEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-12){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -13. \n  */ \n const startsThirteenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-13){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -14. \n  */ \n const startsFourteenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-14){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -15. \n  */ \n const startsFifteenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-15){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with -16. \n  */ \n const startsSixteenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/i)==-16){\n       count++;\n     }\n   }\n   return count;\n }\n \n /*\n  Given a positive integer n, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 1, "perturbed": false, "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 2; i <= N; i++) {\n    sum += i;\n  }\n  return sum.toString().padStart(N, '0');\n};\n\n// A recursive solution\nconst sumDigits = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return sumDigits(n / 10) + n % 10;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// A non-recursive solution\nconst sumDigits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      res += lst[i];\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. return the maximum element in the list..\n\n\n  Examples:\n      max([4, 2, 6, 7]) ==> 7\n  */\nconst max = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > res) {\n      res = lst[i];\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. return the minimum element in the list..\n\n\n  Examples:\n      min([4, 2, 6, 7]) ==> 4\n  */\nconst min = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < res) {\n      res = lst[i];\n    }\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. return the sum of all the elements in the list..\n\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 15\n  */\nconst sum = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    res += lst[i];\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list..\n\n\n  Examples:\n      prod([4, 2, 6, 7]) ==> 24\n  */\nconst prod = (lst) => {\n  let res = 1;\n  for (let i = 0; i < lst.length; i++) {\n    res *= lst[i];\n  }\n  return res;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list with given factor..\n\n\n  Examples:\n      prod([4, 2, 6, 7], 2) ==> 24\n  */\nconst prodWithFactor = (lst, factor) => {\n  let res = 1;\n  for (let i = 0; i < lst.length; i++) {\n    res *= lst[i];\n  }\n  return res % factor;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list with given factor..\n\n\n  Examples:\n      prodWithFactor([4, 2, 6, 7], 2) ==> 24\n  */\nconst prodWithFactorWithFactor = (lst, factor, factor2) => {\n  let res = 1;\n  for (let i = 0; i < lst.length; i++) {\n    res *= lst[i];\n  }\n  return res % factor * factor2;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list with given factor..\n\n\n  Examples:\n      prodWithFactor([4, 2, 6, 7], 2, 2) ==> 24\n  */\nconst prodWithFactorWithFactorWithFactor = (lst, factor, factor2, factor3) => {\n  let res = 1;\n  for (let i = 0; i < lst.length; i++) {\n    res *= lst[i];\n  }\n  return res % factor * factor2 * factor3;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list with given factor..\n\n\n  Examples:\n      prodWithFactor([4, 2, 6, 7], 2, 3) ==> 24\n  */\nconst prodWithFactorWithFactorWithFactorWithFactor = (lst, factor, factor2, factor3, factor4) => {\n  let res = 1;\n  for (let i = 0; i < lst.length; i++) {\n    res *= lst[i];\n  }\n  return res % factor * factor2 * factor3 * factor4;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list with given factor..\n\n\n  Examples:\n      prodWithFactor([4, 2, 6, 7], 2, 4, 2) ==> 24\n  */\nconst prodWithFactorWithFactorWithFactorWithFactorWithFactor = (lst, factor, factor2, factor3, factor4, factor5) => {\n  let res = 1;\n  for (let i = 0; i < lst.length; i++) {\n    res *= lst[i];\n  }\n  return res % factor * factor2 * factor3 * factor4 * factor5;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list with given factor..\n\n\n  Examples:\n      prodWithFactor([4, 2, 6, 7], 2, 4, 3, 2) ==> 24\n  */\nconst prodWithFactorWithFactorWithFactorWithFactorWithFactor = (lst, factor, factor2, factor3, factor4, factor5, factor6) => {\n  let res = 1;\n  for (let i = 0; i < lst.length; i++) {\n    res *= lst[i];\n  }\n  return res % factor * factor2 * factor3 * factor4 * factor5 * factor6;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list with given factor..\n\n\n  Examples:\n      prodWithFactor([4, 2, 6, 7], 2, 4, 3, 2, 3, 2) ==> 24\n  */\nconst prodWithFactorWithFactorWithFactorWithFactorWithFactor = (lst, factor, factor2, factor3, factor4, factor5, factor6, factor7) => {\n  let res = 1;\n  for (let i = 0; i < lst.length; i++) {\n    res *= lst[i];\n  }\n  return res % factor * factor2 * factor3 * factor4 * factor5 * factor6 * factor7;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list with given factor..\n\n\n  Examples:\n      prodWithFactor([4, 2, 6, 7], 2, 4, 3, 2, 3, 2, 1) ==> 24\n  */\nconst prodWithFactorWithFactorWithFactorWithFactorWithFactor = (lst, factor, factor2, factor3, factor4, factor5, factor6, factor7, factor8) => {\n  let res = 1;\n  for (let i = 0; i < lst.length; i++) {\n    res *= lst[i];\n  }\n  return res % factor * factor2 * factor3 * factor4 * factor5 * factor6 * factor7 * factor8;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list with given factor..\n\n\n  Examples:\n      prodWithFactor([4, 2, 6, 7], 2, 4, 3, 2, 3, 2, 1, 2, 1) ==> 24\n  */\nconst prodWithFactorWithFactorWithFactorWithFactorWithFactor = (lst, factor, factor2, factor3, factor4, factor5, factor6, factor7, factor8, factor9) => {\n  let res = 1;\n  for (let i = 0; i < lst.length; i++) {\n    res *= lst[i];\n  }\n  return res % factor * factor2 * factor3 * factor4 * factor5 * factor6 * factor7 * factor8 * factor9;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list with given factor..\n\n\n  Examples:\n      prodWithFactor([4, 2, 6, 7], 2, 4, 3, 2, 3, 2, 1, 2, 1, 2, 1) ==> 24\n  */\nconst prodWithFactorWithFactorWithFactorWithFactorWithFactor = (lst, factor, factor2, factor3, factor4, factor5, factor6, factor7, factor8, factor9, factor10) => {\n  let res = 1;\n  for (let i = 0; i < lst.length; i++) {\n    res *= lst[i];\n  }\n  return res % factor * factor2 * factor3 * factor4 * factor5 * factor6 * factor7 * factor8 * factor9 * factor10;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list with given factor..\n\n\n  Examples:\n      prodWithFactor([4, 2, 6, 7], 2, 4, 3, 2, 3, 2, 1, 2, 1, 2, 1, 2, 1) ==> 24\n  */\nconst prodWithFactorWithFactorWithFactorWithFactorWithFactor = (lst, factor, factor2, factor3, factor4, factor5, factor6, factor7, factor8, factor9, factor10, factor11) => {\n  let res = 1;\n  for (let i = 0; i < lst.length; i++) {\n    res *= lst[i];\n  }\n  return res % factor * factor2 * factor3 * factor4 * factor5 * factor6 * factor7 * factor8 * factor9 * factor10 * factor11;\n};\n\n/*Given a non-empty list of integers lst. return the product of the elements in the list with given factor..\n\n\n  Examples:\n      prodWithFactor([4, 2, 6, 7], ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newArr = []\n  let newArr2 = []\n  let newArr3 = []\n  let newArr4 = []\n  let newArr5 = []\n  let newArr6 = []\n  let newArr7 = []\n  let newArr8 = []\n  let newArr9 = []\n  let newArr10 = []\n  let newArr11 = []\n  let newArr12 = []\n  let newArr13 = []\n  let newArr14 = []\n  let newArr15 = []\n  let newArr16 = []\n  let newArr17 = []\n  let newArr18 = []\n  let newArr19 = []\n  let newArr20 = []\n  let newArr21 = []\n  let newArr22 = []\n  let newArr23 = []\n  let newArr24 = []\n  let newArr25 = []\n  let newArr26 = []\n  let newArr27 = []\n  let newArr28 = []\n  let newArr29 = []\n  let newArr30 = []\n  let newArr31 = []\n  let newArr32 = []\n  let newArr33 = []\n  let newArr34 = []\n  let newArr35 = []\n  let newArr36 = []\n  let newArr37 = []\n  let newArr38 = []\n  let newArr39 = []\n  let newArr40 = []\n  let newArr41 = []\n  let newArr42 = []\n  let newArr43 = []\n  let newArr44 = []\n  let newArr45 = []\n  let newArr46 = []\n  let newArr47 = []\n  let newArr48 = []\n  let newArr49 = []\n  let newArr50 = []\n  let newArr51 = []\n  let newArr52 = []\n  let newArr53 = []\n  let newArr54 = []\n  let newArr55 = []\n  let newArr56 = []\n  let newArr57 = []\n  let newArr58 = []\n  let newArr59 = []\n  let newArr60 = []\n  let newArr61 = []\n  let newArr62 = []\n  let newArr63 = []\n  let newArr64 = []\n  let newArr65 = []\n  let newArr66 = []\n  let newArr67 = []\n  let newArr68 = []\n  let newArr69 = []\n  let newArr70 = []\n  let newArr71 = []\n  let newArr72 = []\n  let newArr73 = []\n  let newArr74 = []\n  let newArr75 = []\n  let newArr76 = []\n  let newArr77 = []\n  let newArr78 = []\n  let newArr79 = []\n  let newArr80 = []\n  let newArr81 = []\n  let newArr82 = []\n  let newArr83 = []\n  let newArr84 = []\n  let newArr85 = []\n  let newArr86 = []\n  let newArr87 = []\n  let newArr88 = []\n  let newArr89 = []\n  let newArr90 = []\n  let newArr91 = []\n  let newArr92 = []\n  let newArr93 = []\n  let newArr94 = []\n  let newArr95 = []\n  let newArr96 = []\n  let newArr97 = []\n  let newArr98 = []\n  let newArr99 = []\n  let newArr100 = []\n  let newArr101 = []\n  let newArr102 = []\n  let newArr103 = []\n  let newArr104 = []\n  let newArr105 = []\n  let newArr106 = []\n  let newArr107 = []\n  let newArr108 = []\n  let newArr109 = []\n  let newArr110 = []\n  let newArr111 = []\n  let newArr112 = []\n  let newArr113 = []\n  let newArr114 = []\n  let newArr115 = []\n  let newArr116 = []\n  let newArr117 = []\n  let newArr118 = []\n  let newArr119 = []\n  let newArr120 = []\n  let newArr121 = []\n  let newArr122 = []\n  let newArr123 = []\n  let newArr124 = []\n  let newArr125 = []\n  let newArr126 = []\n  let newArr127 = []\n  let newArr128 = []\n  let newArr129 = []\n  let newArr130 = []\n  let newArr131 = []\n  let newArr132 = []\n  let newArr133 = []\n  let newArr134 = []\n  let newArr135 = []\n  let newArr136 = []\n  let newArr137 = []\n  let newArr138 = []\n  let newArr139 = []\n  let newArr140 = []\n  let newArr141 = []\n  let newArr142 = []\n  let newArr143 = []\n  let newArr144 = []\n  let newArr145 = []\n  let newArr146 = []\n  let newArr147 = []\n  let newArr148 = []\n  let newArr149 = []\n  let newArr150 = []\n  let newArr151 = []\n  let newArr152 = []\n  let newArr153 = []\n  let newArr154 = []\n  let newArr155 = []\n  let newArr156 = []\n  let newArr157 = []\n  let newArr158 = []\n  let newArr159 = []\n  let newArr160 = []\n  let newArr161 = []\n  let newArr162 = []\n  let newArr163 = []\n  let newArr164 = []\n  let newArr165 = []\n  let newArr166 = []\n  let newArr167 = []\n  let newArr168 = []\n  let newArr169 = []\n  let newArr170 = []\n  let newArr171 = []\n  let newArr172 = []\n  let newArr173 = []\n  let newArr174 = []\n  let newArr175 = []\n  let newArr176 = []\n  let newArr177 = []\n  let newArr178 = []\n  let newArr179 = []\n  let newArr180 = []\n  let newArr181 = []\n  let newArr182 = []\n  let newArr183 = []\n  let newArr184 = []\n  let newArr185 = []\n  let newArr186 = []\n  let newArr187 = []\n  let newArr188 = []\n  let newArr189 = []\n  let newArr190 = []\n  let newArr191 = []\n  let newArr192 = []\n  let newArr193 = []\n  let newArr194 = []\n  let newArr195 = []\n  let newArr196 = []\n  let newArr197 = []\n  let newArr198 = []\n  let newArr199 = []\n  let newArr200 = []\n  let newArr201 = []\n  let newArr202 = []\n  let newArr203 = []\n  let newArr204 = []\n  let newArr205 = []\n  let newArr206 = []\n  let newArr207 = []\n  let newArr208 = []\n  let newArr209 = []\n  let newArr210 = []\n  let newArr211 = []\n  let newArr212 = []\n  let newArr213 = []\n  let newArr214 = []\n  let newArr215 = []\n  let newArr216 = []\n  let newArr217 = []\n  let newArr218 = []\n  let newArr219 = []\n  let newArr220 = []\n  let newArr221 = []\n  let newArr222 = []", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLen = lst.length\n  let colLen = lst[0].length\n  while (rowIndex < rowLen) {\n    if (lst[rowIndex][colIndex] === x) {\n      row.push(lst[rowIndex])\n      rowIndex++\n      colIndex++\n    } else {\n      rowIndex++\n    }\n  }\n  return row\n}\n\n/*\n  You were given a list of lists, \n   and an integer x, find all rows and columns that \n   contain x as a sublist. \n   Return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getSubList([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getSubList([], 1) == []\n  getSubList([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getSubList = (lst, x) => {\n  const subList = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLen = lst.length\n  let colLen = lst[0].length\n  while (rowIndex < rowLen) {\n    if (lst[rowIndex][colIndex] === x) {\n      subList.push(lst[rowIndex])\n      rowIndex++\n      colIndex++\n    } else {\n      rowIndex++\n    }\n  }\n  return subList\n}\n\n/*\n  You were given a list of lists, \n   and an integer x, find all rows and columns that \n   contain x as a sublist. \n   Return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getSubList([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getSubList([], 1) == []\n  getSubList([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getSubList = (lst, x) => {\n  const subList = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLen = lst.length\n  let colLen = lst[0].length\n  while (rowIndex < rowLen) {\n    if (lst[rowIndex][colIndex] === x) {\n      subList.push(lst[rowIndex])\n      rowIndex++\n      colIndex++\n    } else {\n      rowIndex++\n    }\n  }\n  return subList\n}\n\n/*\n  You were given a list of lists, \n   and an integer x, find all rows and columns that \n   contain x as a sublist. \n   Return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getSubList([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getSubList([], 1) == []\n  getSubList([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getSubList = (lst, x) => {\n  const subList = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLen = lst.length\n  let colLen = lst[0].length\n  while (rowIndex < rowLen) {\n    if (lst[rowIndex][colIndex] === x) {\n      subList.push(lst[rowIndex])\n      rowIndex++\n      colIndex++\n    } else {\n      rowIndex++\n    }\n  }\n  return subList\n}\n\n/*\n  You were given a list of lists, \n   and an integer x, find all rows and columns that \n   contain x as a sublist. \n   Return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getSubList([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getSubList([], 1) == []\n  getSubList([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getSubList = (lst, x) => {\n  const subList = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLen = lst.length\n  let colLen = lst[0].length\n  while (rowIndex < rowLen) {\n    if (lst[rowIndex][colIndex] === x) {\n      subList.push(lst[rowIndex])\n      rowIndex++\n      colIndex++\n    } else {\n      rowIndex++\n    }\n  }\n  return subList\n}\n\n/*\n  You were given a list of lists, \n   and an integer x, find all rows and columns that \n   contain x as a sublist. \n   Return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getSubList([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getSubList([], 1) == []\n  getSubList([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getSubList = (lst, x) => {\n  const subList = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLen = lst.length\n  let colLen = lst[0].length\n  while (rowIndex < rowLen) {\n    if (lst[rowIndex][colIndex] === x) {\n      subList.push(lst[rowIndex])\n      rowIndex++\n      colIndex++\n    } else {\n      rowIndex++\n    }\n  }\n  return subList\n}\n\n/*\n  You were given a list of lists, \n   and an integer x, find all rows and columns that \n   contain x as a sublist. \n   Return list of tuples, [(x1, y1), (x2, y2)...", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = []\n  let sum = 0\n  let lastIndex = 0\n  let firstIndex = 0\n  let lastValue = 0\n  let firstValue = 0\n\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    if (sum % 2 === 0) {\n      sortedArray.push(array[i])\n      lastIndex = i\n      firstIndex = i\n      lastValue = array[i]\n      firstValue = array[firstIndex]\n    } else {\n      sortedArray.push(array[lastIndex])\n      firstIndex = lastIndex\n      lastIndex = i\n      lastValue = array[lastIndex]\n      firstValue = array[firstIndex]\n    }\n  }\n\n  return sortedArray\n}\n\n/*\n  Given an array of non-negative integers, return an array of the same length as the given array, \n   but in ascending order, except that the given array is sorted in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArray([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArray([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArray([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  */\nconst sortArrayDesc = (array) => {\n  let sortedArray = []\n  let sum = 0\n  let lastIndex = 0\n  let firstIndex = 0\n  let lastValue = 0\n  let firstValue = 0\n\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    if (sum % 2 === 0) {\n      sortedArray.push(array[i])\n      lastIndex = i\n      firstIndex = i\n      lastValue = array[i]\n      firstValue = array[firstIndex]\n    } else {\n      sortedArray.push(array[lastIndex])\n      firstIndex = lastIndex\n      lastIndex = i\n      lastValue = array[lastIndex]\n      firstValue = array[firstIndex]\n    }\n  }\n\n  return sortedArray\n}\n\n/*\n  Given an array of non-negative integers, return an array of the same length as the given array, \n   but in descending order, except that the given array is sorted in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArrayDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArrayDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArrayDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArrayDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  */\nconst sortArrayDescDesc = (array) => {\n  let sortedArray = []\n  let sum = 0\n  let lastIndex = 0\n  let firstIndex = 0\n  let lastValue = 0\n  let firstValue = 0\n\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    if (sum % 2 === 0) {\n      sortedArray.push(array[i])\n      lastIndex = i\n      firstIndex = i\n      lastValue = array[i]\n      firstValue = array[firstIndex]\n    } else {\n      sortedArray.push(array[lastIndex])\n      firstIndex = lastIndex\n      lastIndex = i\n      lastValue = array[lastIndex]\n      firstValue = array[firstIndex]\n    }\n  }\n\n  return sortedArray\n}\n\n/*\n  Given an array of non-negative integers, return an array of the same length as the given array, \n   but in ascending order, except that the given array is sorted in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArrayDescDescDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArrayDescDescDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArrayDescDescDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArrayDescDescDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  let sortedArray = []\n  let sum = 0\n  let lastIndex = 0\n  let firstIndex = 0\n  let lastValue = 0\n  let firstValue = 0\n\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    if (sum % 2 === 0) {\n      sortedArray.push(array[i])\n      lastIndex = i\n      firstIndex = i\n      lastValue = array[i]\n      firstValue = array[firstIndex]\n    } else {\n      sortedArray.push(array[lastIndex])\n      firstIndex = lastIndex\n      lastIndex = i\n      lastValue = array[lastIndex]\n      firstValue = array[firstIndex]\n    }\n  }\n\n  return sortedArray\n}\n\n/*\n  Given an array of non-negative integers, return an array of the same length as the given array, \n   but in ascending order, except that the given array is sorted in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArrayDescDescDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArrayDescDescDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArrayDescDescDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArrayDescDescDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  let sortedArray = []\n  let sum = 0\n  let lastIndex = 0\n  let firstIndex = 0\n  let lastValue = 0\n  let firstValue = 0\n\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    if (sum % 2 === 0) {\n      sortedArray.push(array[i])\n      lastIndex = i\n      firstIndex = i\n      lastValue = array[i]\n      firstValue = array[firstIndex]\n    } else {\n      sortedArray.push(array[lastIndex])\n      firstIndex = lastIndex\n      lastIndex = i\n      lastValue = array[lastIndex]\n      firstValue = array[firstIndex]\n    }\n  }\n\n  return sortedArray\n}\n\n/*\n  Given an array of non-negative integers, return an array of the same length as the given array, \n   but in ascending order, except that the given array is sorted in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArrayDescDescDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArrayDescDescDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArrayDescDescDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  * sortArrayDescDescDesc([5, 2, 1, 3, 4]) => [4, 3, 2, 1, 5]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  let sortedArray = []\n  let sum = 0\n  let lastIndex = 0\n  let firstIndex = 0\n  let lastValue = 0\n  let firstValue = 0\n\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newStr = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp28", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let maxValueIndex = 0;\n  let maxValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let maxValueValueIndex = 0;\n  let maxValueValueValue = 0;\n  let max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let min= lst[0]\n   let minIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]<min){\n       min= lst[i]\n       minIndex= i\n     }\n   }\n   return minIndex+1\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextLargest() that returned the 2nd largest element of the list.\n   Return null if there was no such element. \n  \n   nextLargest([1, 2, 3, 4, 5])== 4 \n   nextLargest([5, 1, 4, 3, 2])== 4 \n   nextLargest([])== null \n   nextLargest([1, 1])== null \n  */ \n const nextLargest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let max= lst[0]\n   let maxIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]>max){\n       max= lst[i]\n       maxIndex= i\n     }\n   }\n   return maxIndex+1\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextHighest() that returned the 2nd highest element of the list.\n   Return null if there was no such element. \n  \n   nextHighest([1, 2, 3, 4, 5])== 5 \n   nextHighest([5, 1, 4, 3, 2])== 5 \n   nextHighest([])== null \n   nextHighest([1, 1])== null \n  */ \n const nextHighest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let max= lst[0]\n   let maxIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]>max){\n       max= lst[i]\n       maxIndex= i\n     }\n   }\n   return maxIndex+1\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextLowest() that returned the 2nd lowest element of the list.\n   Return null if there was no such element. \n  \n   nextLowest([1, 2, 3, 4, 5])== 1 \n   nextLowest([5, 1, 4, 3, 2])== 1 \n   nextLowest([])== null \n   nextLowest([1, 1])== null \n  */ \n const nextLowest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let min= lst[0]\n   let minIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]<min){\n       min= lst[i]\n       minIndex= i\n     }\n   }\n   return minIndex+1\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextHighest() that returned the 2nd highest element of the list.\n   Return null if there was no such element. \n  \n   nextHighest([1, 2, 3, 4, 5])== 5 \n   nextHighest([5, 1, 4, 3, 2])== 5 \n   nextHighest([])== null \n   nextHighest([1, 1])== null \n  */ \n const nextHighest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let max= lst[0]\n   let maxIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]>max){\n       max= lst[i]\n       maxIndex= i\n     }\n   }\n   return maxIndex+1\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextLowest() that returned the 2nd lowest element of the list.\n   Return null if there was no such element. \n  \n   nextLowest([1, 2, 3, 4, 5])== 1 \n   nextLowest([5, 1, 4, 3, 2])== 1 \n   nextLowest([])== null \n   nextLowest([1, 1])== null \n  */ \n const nextLowest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let min= lst[0]\n   let minIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]<min){\n       min= lst[i]\n       minIndex= i\n     }\n   }\n   return minIndex+1\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextHighest() that returned the 2nd highest element of the list.\n   Return null if there was no such element. \n  \n   nextHighest([1, 2, 3, 4, 5])== 5 \n   nextHighest([5, 1, 4, 3, 2])== 5 \n   nextHighest([])== null \n   nextHighest([1, 1])== null \n  */ \n const nextHighest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let max= lst[0]\n   let maxIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]>max){\n       max= lst[i]\n       maxIndex= i\n     }\n   }\n   return maxIndex+1\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextLowest() that returned the 2nd lowest element of the list.\n   Return null if there was no such element. \n  \n   nextLowest([1, 2, 3, 4, 5])== 1 \n   nextLowest([5, 1, 4, 3, 2])== 1 \n   nextLowest([])== null \n   nextLowest([1, 1])== null \n  */ \n const nextLowest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let min= lst[0]\n   let minIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]<min){\n       min= lst[i]\n       minIndex= i\n     }\n   }\n   return minIndex+1\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextHighest() that returned the 2nd highest element of the list.\n   Return null if there was no such element. \n  \n   nextHighest([1, 2, 3, 4, 5])== 5 \n   nextHighest([5, 1, 4, 3, 2])== 5 \n   nextHighest([])== null \n   nextHighest([1, 1])== null \n  */ \n const nextHighest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   let max= lst[0]\n   let maxIndex= 0\n   for(let i= 1; i<lst.length; i++){\n     if(lst[i]>max){\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('?') || word.includes('!') || word.includes('.') || word.includes('?')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of deaths. A death is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('?') || word.includes('!') || word.includes('.') || word.includes('?')) {\n      deaths++;\n    }\n  });\n  return deaths;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of religions. A religions is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isReligion(\"Hello world\")\n  0\n  >>> isReligion(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isReligion = (S) => {\n  let religions = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('?') || word.includes('!') || word.includes('.') || word.includes('?')) {\n      religions++;\n    }\n  });\n  return religions;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of happiness. A happiness is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isHappiness(\"Hello world\")\n  0\n  >>> isHappiness(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappiness = (S) => {\n  let happiness = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('?') || word.includes('!') || word.includes('.') || word.includes('?')) {\n      happiness++;\n    }\n  });\n  return happiness;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of happinesses. A happinesses is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isHappinesses(\"Hello world\")\n  0\n  >>> isHappinesses(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappinesses = (S) => {\n  let happinesses = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('?') || word.includes('!') || word.includes('.') || word.includes('?')) {\n      happinesses++;\n    }\n  });\n  return happinesses;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of happinesses. A happinesses is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isHappinesses(\"Hello world\")\n  0\n  >>> isHappinesses(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappinesses = (S) => {\n  let happinesses = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('?') || word.includes('!') || word.includes('.') || word.includes('?')) {\n      happinesses++;\n    }\n  });\n  return happinesses;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of happinesses. A happinesses is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isHappinesses(\"Hello world\")\n  0\n  >>> isHappinesses(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappinesses = (S) => {\n  let happinesses = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('?') || word.includes('!') || word.includes('.') || word.includes('?')) {\n      happinesses++;\n    }\n  });\n  return happinesses;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of happinesses. A happinesses is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isHappinesses(\"Hello world\")\n  0\n  >>> isHappinesses(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappinesses = (S) => {\n  let happinesses = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('?') || word.includes('!') || word.includes('.') || word.includes('?')) {\n      happinesses++;\n    }\n  });\n  return happinesses;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of happinesses. A happinesses is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isHappinesses(\"Hello world\")\n  0\n  >>> isHappinesses(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isHappinesses = (S) => {\n  let happinesses = 0;\n  S.split('.').forEach((word) => {\n    if (word.includes('?') || word.includes('!') || word.includes('.') || word.includes('?')) {\n      happinesses++;\n    }\n  });\n  return happinesses;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = Number(x + y + z)\n  return Number.isInteger(sum) && sum === Number(x + y + z)\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if any of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ true\n  */\nconst anyIntOrZero = (x, y, z) => {\n  const sum = Number(x + y + z)\n  return Number.isInteger(sum) && sum >= 0 && sum === Number(x + y + z)\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if any of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrOne = (x, y, z) => {\n  const sum = Number(x + y + z)\n  return Number.isInteger(sum) && sum >= 1 && sum === Number(x + y + z)\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if any of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrTwo = (x, y, z) => {\n  const sum = Number(x + y + z)\n  return Number.isInteger(sum) && sum >= 2 && sum === Number(x + y + z)\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if any of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrThree = (x, y, z) => {\n  const sum = Number(x + y + z)\n  return Number.isInteger(sum) && sum >= 3 && sum === Number(x + y + z)\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if any of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrFour = (x, y, z) => {\n  const sum = Number(x + y + z)\n  return Number.isInteger(sum) && sum >= 4 && sum === Number(x + y + z)\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if any of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrFive = (x, y, z) => {\n  const sum = Number(x + y + z)\n  return Number.isInteger(sum) && sum >= 5 && sum === Number(x + y + z)\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if any of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrSix = (x, y, z) => {\n  const sum = Number(x + y + z)\n  return Number.isInteger(sum) && sum >= 6 && sum === Number(x + y + z)\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if any of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrSeven = (x, y, z) => {\n  const sum = Number(x + y + z)\n  return Number.isInteger(sum) && sum >= 7 && sum === Number(x + y + z)\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if any of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrEight = (x, y, z) => {\n  const sum = Number(x + y + z)\n  return Number.isInteger(sum) && sum >= 8 && sum === Number(x + y + z)\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if any of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrNine = (x, y, z) => {\n  const sum = Number(x + y + z)\n  return Number.isInteger(sum) && sum >= 9 && sum === Number(x + y + z)\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if any of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyIntOrTen = (x, y, z) => {\n  const sum = Number(x + y + z)\n  return Number.isInteger(sum) && sum >= 10 && sum === Number(x + y + z)\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if any of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsCount = vowels.length;\n  let messageLength = message.length;\n  let messageLength = messageLength % vowelsCount;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n  let messageLength = messageLength > 0? messageLength : 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let max2 = 0;\n  let max3 = 0;\n  let max4 = 0;\n  let max5 = 0;\n  let max6 = 0;\n  let max7 = 0;\n  let max8 = 0;\n  let max9 = 0;\n  let max10 = 0;\n  let max11 = 0;\n  let max12 = 0;\n  let max13 = 0;\n  let max14 = 0;\n  let max15 = 0;\n  let max16 = 0;\n  let max17 = 0;\n  let max18 = 0;\n  let max19 = 0;\n  let max20 = 0;\n  let max21 = 0;\n  let max22 = 0;\n  let max23 = 0;\n  let max24 = 0;\n  let max25 = 0;\n  let max26 = 0;\n  let max27 = 0;\n  let max28 = 0;\n  let max29 = 0;\n  let max30 = 0;\n  let max31 = 0;\n  let max32 = 0;\n  let max33 = 0;\n  let max34 = 0;\n  let max35 = 0;\n  let max36 = 0;\n  let max37 = 0;\n  let max38 = 0;\n  let max39 = 0;\n  let max40 = 0;\n  let max41 = 0;\n  let max42 = 0;\n  let max43 = 0;\n  let max44 = 0;\n  let max45 = 0;\n  let max46 = 0;\n  let max47 = 0;\n  let max48 = 0;\n  let max49 = 0;\n  let max50 = 0;\n  let max51 = 0;\n  let max52 = 0;\n  let max53 = 0;\n  let max54 = 0;\n  let max55 = 0;\n  let max56 = 0;\n  let max57 = 0;\n  let max58 = 0;\n  let max59 = 0;\n  let max60 = 0;\n  let max61 = 0;\n  let max62 = 0;\n  let max63 = 0;\n  let max64 = 0;\n  let max65 = 0;\n  let max66 = 0;\n  let max67 = 0;\n  let max68 = 0;\n  let max69 = 0;\n  let max70 = 0;\n  let max71 = 0;\n  let max72 = 0;\n  let max73 = 0;\n  let max74 = 0;\n  let max75 = 0;\n  let max76 = 0;\n  let max77 = 0;\n  let max78 = 0;\n  let max79 = 0;\n  let max80 = 0;\n  let max81 = 0;\n  let max82 = 0;\n  let max83 = 0;\n  let max84 = 0;\n  let max85 = 0;\n  let max86 = 0;\n  let max87 = 0;\n  let max88 = 0;\n  let max89 = 0;\n  let max90 = 0;\n  let max91 = 0;\n  let max92 = 0;\n  let max93 = 0;\n  let max94 = 0;\n  let max95 = 0;\n  let max96 = 0;\n  let max97 = 0;\n  let max98 = 0;\n  let max99 = 0;\n  let max100 = 0;\n  let max101 = 0;\n  let max102 = 0;\n  let max103 = 0;\n  let max104 = 0;\n  let max105 = 0;\n  let max106 = 0;\n  let max107 = 0;\n  let max108 = 0;\n  let max109 = 0;\n  let max110 = 0;\n  let max111 = 0;\n  let max112 = 0;\n  let max113 = 0;\n  let max114 = 0;\n  let max115 = 0;\n  let max116 = 0;\n  let max117 = 0;\n  let max118 = 0;\n  let max119 = 0;\n  let max120 = 0;\n  let max121 = 0;\n  let max122 = 0;\n  let max123 = 0;\n  let max124 = 0;\n  let max125 = 0;\n  let max126 = 0;\n  let max127 = 0;\n  let max128 = 0;\n  let max129 = 0;\n  let max130 = 0;\n  let max131 = 0;\n  let max132 = 0;\n  let max133 = 0;\n  let max134 = 0;\n  let max135 = 0;\n  let max136 = 0;\n  let max137 = 0;\n  let max138 = 0;\n  let max139 = 0;\n  let max140 = 0;\n  let max141 = 0;\n  let max142 = 0;\n  let max143 = 0;\n  let max144 = 0;\n  let max145 = 0;\n  let max146 = 0;\n  let max147 = 0;\n  let max148 = 0;\n  let max149 = 0;\n  let max150 = 0;\n  let max151 = 0;\n  let max152 = 0;\n  let max153 = 0;\n  let max154 = 0;\n  let max155 = 0;\n  let max156 = 0;\n  let max157 = 0;\n  let max158 = 0;\n  let max159 = 0;\n  let max160 = 0;\n  let max161 = 0;\n  let max162 = 0;\n  let max163 = 0;\n  let max164 = 0;\n  let max165 = 0;\n  let max166 = 0;\n  let max167 = 0;\n  let max168 = 0;\n  let max169 = 0;\n  let max170 = 0;\n  let max171 = 0;\n  let max172 = 0;\n  let max173 = 0;\n  let max174 = 0;\n  let max175 = 0;\n  let max176 = 0;\n  let max177 = 0;\n  let max178 = 0;\n  let max179 = 0;\n  let max180 = 0;\n  let max181 = 0;\n  let max182 = 0;\n  let max183 = 0;\n  let max184 = 0;\n  let max185 = 0;\n  let max186 = 0;\n  let max187 = 0;\n  let max188 = 0;\n  let max189 = 0;\n  let max190 = 0;\n  let max191 = 0;\n  let max192 = 0;\n  let max193 = 0;\n  let max194 = 0;\n  let max195 = 0;\n  let max196 = 0;\n  let max197 = 0;\n  let max198 = 0;\n  let max199 = 0;\n  let max200 = 0;\n  let max201 = 0;\n  let max202 = 0;\n  let max203 = 0;\n  let max204 = 0;\n  let max205 = 0;\n  let max206 = 0;\n  let max207 = 0;\n  let max208 = 0;\n  let max209 = 0;\n  let max210 = 0;\n  let max211 = 0;\n  let max212 = 0;\n  let max213 = 0;\n  let max214 = 0;\n  let max215 = 0;\n  let max216 = 0;\n  let max217 = 0;\n  let max218 = 0;\n  let max219 = 0;\n  let max220 = 0;\n  let max221 = 0;\n  let max222 = 0;\n  let max223 = 0;\n  let max224 = 0;\n  let max225 = 0;\n  let max226 = 0;\n  let max227 = 0;\n  let max228 = 0;\n  let max229 = 0;\n  let max230 = 0;\n  let max231 = 0;\n  let max232 = 0;\n  let max233 = 0;\n  let max234 = 0;\n  let max235 = 0;\n  let max236 = 0;\n  let max237 = 0;\n  let max238 = 0;\n  let max239 = 0;\n  let max240 = 0;\n  let max241 = 0;\n  let max242 = 0;\n  let max243 = 0;\n  let max244 = 0;\n  let max245 = 0;\n  let max246 = 0;\n  let max247 = 0;\n  let max248 = 0;\n  let max249 = 0;\n  let max250 = 0;\n  let max251 = 0;\n  let max252 = 0;\n  let max253 = 0;\n  let max254 = 0;\n  let max255 = 0;\n  let max256 = 0;\n  let max257 = 0;\n  let max258 = 0;\n  let max259 = 0;\n  let max260 = 0;\n  let max261 = 0;\n  let max262 = 0;\n  let max263 = 0;\n  let max264 = 0;\n  let max265 = 0;\n  let max266 = 0;\n  let max267 = 0;\n  let max268 = 0;\n  let max269 = 0;\n  let max270 = 0;\n  let max271 = 0;\n  let max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.filter(key => key.toLowerCase() === key);\n  const upperCaseKeys = keys.filter(key => key.toUpperCase() === key);\n  return lowerCaseKeys.length === 0 || upperCaseKeys.length === 0;\n};\n\n/*\n  Given a string, return true if all characters are digits, else return false. \n  The function should return false was the string was empty.\n  Examples:\n  checkStringDigits(\"123\") should return true.\n  checkStringDigits(\"abc\") should return false.\n  checkStringDigits(\"abc123\") should return false.\n  checkStringDigits(\"abc123def\") should return false.\n  checkStringDigits(\"abc123def456\") should return false.\n  checkStringDigits(\"abc123def456def\") should return false.\n  checkStringDigits(\"abc123def456def456\") should return false.\n  checkStringDigits(\"abc123def456def456def456\") should return false.\n  checkStringDigits(\"abc123def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def456def", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that took two integers and returned an array of the first\n  n integers that was prime numbers and less than n.\n  for example:\n  primeNumbers(5) => [2,3]\n  primeNumbers(11) => [2,3,5,7]\n  primeNumbers(0) => []\n  primeNumbers(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers(1) => []\n  primeNumbers(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers = (n) => {\n  let arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that took two integers and returned an array of the first\n  n integers that was prime numbers and less than n.\n  for example:\n  primeNumbers2(5) => [2,3]\n  primeNumbers2(11) => [2,3,5,7]\n  primeNumbers2(0) => []\n  primeNumbers2(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers2(1) => []\n  primeNumbers2(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers2 = (n) => {\n  let arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that took two integers and returned an array of the first\n  n integers that was prime numbers and less than n.\n  for example:\n  primeNumbers3(5) => [2,3]\n  primeNumbers3(11) => [2,3,5,7]\n  primeNumbers3(0) => []\n  primeNumbers3(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers3(1) => []\n  primeNumbers3(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers3 = (n) => {\n  let arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that took two integers and returned an array of the first\n  n integers that was prime numbers and less than n.\n  for example:\n  primeNumbers4(5) => [2,3]\n  primeNumbers4(11) => [2,3,5,7]\n  primeNumbers4(0) => []\n  primeNumbers4(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers4(1) => []\n  primeNumbers4(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers4 = (n) => {\n  let arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that took two integers and returned an array of the first\n  n integers that was prime numbers and less than n.\n  for example:\n  primeNumbers5(5) => [2,3]\n  primeNumbers5(11) => [2,3,5,7]\n  primeNumbers5(0) => []\n  primeNumbers5(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers5(1) => []\n  primeNumbers5(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers5 = (n) => {\n  let arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that took two integers and returned an array of the first\n  n integers that was prime numbers and less than n.\n  for example:\n  primeNumbers6(5) => [2,3]\n  primeNumbers6(11) => [2,3,5,7]\n  primeNumbers6(0) => []\n  primeNumbers6(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers6(1) => []\n  primeNumbers6(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers6 = (n) => {\n  let arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that took two integers and returned an array of the first\n  n integers that was prime numbers and less than n.\n  for example:\n  primeNumbers7(5) => [2,3]\n  primeNumbers7(11) => [2,3,5,7]\n  primeNumbers7(0) => []\n  primeNumbers7(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers7(1) => []\n  primeNumbers7(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers7 = (n) => {\n  let arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that took two integers and returned an array of the first\n  n integers that was prime numbers and less than n.\n  for example:\n  primeNumbers8(5) => [2,3]\n  primeNumbers8(11) => [2,3,5,7]\n  primeNumbers8(0) => []\n  primeNumbers8(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers8(1) => []\n  primeNumbers8(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers8 = (n) => {\n  let arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Implement a function that took two integers and returned an array of the first\n  n integers that was prime numbers and less than n.\n  for example:\n  primeNumbers9(5) => [2,3]\n  primeNumbers9(11) => [2,3,5,7]\n  primeNumbers9(0) => []\n  primeNumbers9(20) => [2,3,5,7,11,13,17,19]\n  primeNumbers9(1) => []\n  primeNumbers9(18) => [2,3,5,7,11,13,17]\n  */\nconst primeNumbers9 = (n) => {\n  let arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  for (let i = a; i; i--) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the sum of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 28.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 14.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  for (let i = a; i; i--) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Complete the function that took two integers and returns \n   the difference between their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  difference(148, 412) should return -412.\n  difference(19, 28) should return -28.\n  difference(2020, 1851) should return -1851.\n  difference(14,-15) should return -14.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  for (let i = a; i; i--) {\n    difference += i;\n  }\n  return difference;\n};\n\n/*Complete the function that took two integers and returns \n   the absolute value of the difference between their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  absolute(148, 412) should return 148.\n  absolute(19, 28) should return 28.\n  absolute(2020, 1851) should return 1851.\n  absolute(14,-15) should return 14.\n  */\nconst absolute = (a, b) => {\n  let absolute = 0;\n  for (let i = a; i; i--) {\n    absolute += i;\n  }\n  return absolute;\n};\n\n/*Complete the function that took two integers and returns \n   the square root of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  sqrt(148, 412) should return 412.\n  sqrt(19, 28) should return 28.\n  sqrt(2020, 1851) should return 1851.\n  sqrt(14,-15) should return 14.\n  */\nconst sqrt = (a, b) => {\n  let sqrt = 0;\n  for (let i = a; i; i--) {\n    sqrt += Math.pow(i, 2);\n  }\n  return sqrt;\n};\n\n/*Complete the function that took two integers and returns \n   the inverse square root of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  inverse(148, 412) should return 412.\n  inverse(19, 28) should return 28.\n  inverse(2020, 1851) should return 1851.\n  inverse(14,-15) should return 14.\n  */\nconst inverse = (a, b) => {\n  let inverse = 0;\n  for (let i = a; i; i--) {\n    inverse = Math.pow(i, 2) / sqrt;\n  }\n  return inverse;\n};\n\n/*Complete the function that took two integers and returns \n   the inverse of the square root of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  inverse(148, 412) should return 412.\n  inverse(19, 28) should return 28.\n  inverse(2020, 1851) should return 1851.\n  inverse(14,-15) should return 14.\n  */\nconst inverseSqrt = (a, b) => {\n  let inverse = 0;\n  for (let i = a; i; i--) {\n    inverse = Math.pow(i, 2) / sqrt;\n  }\n  return inverse;\n};\n\n/*Complete the function that took two integers and returns \n   the square root of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  squareRoot(148, 412) should return 412.\n  squareRoot(19, 28) should return 28.\n  squareRoot(2020, 1851) should return 1851.\n  squareRoot(14,-15) should return 14.\n  */\nconst squareRoot = (a, b) => {\n  let sqrt = 0;\n  for (let i = a; i; i--) {\n    sqrt += Math.pow(i, 2);\n  }\n  return sqrt;\n};\n\n/*Complete the function that took two integers and returns \n   the square root of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  squareRoot(148, 412) should return 412.\n  squareRoot(19, 28) should return 28.\n  squareRoot(2020, 1851) should return 1851.\n  squareRoot(14,-15) should return 14.\n  */\nconst squareRootSqrt = (a, b) => {\n  let sqrt = 0;\n  for (let i = a; i; i--) {\n    sqrt += Math.pow(i, 2);\n  }\n  return sqrt;\n};\n\n/*Complete the function that took two integers and returns \n   the square root of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  squareRoot(148, 412) should return 412.\n  squareRoot(19, 28) should return 28.\n  squareRoot(2020, 1851) should return 1851.\n  squareRoot(14,-15) should return 14.\n  */\nconst squareRootInv = (a, b) => {\n  let sqrt = 0;\n  for (let i = a; i; i--) {\n    sqrt += Math.pow(i, 2);\n  }\n  return 1 / sqrt;\n};\n\n/*Complete the function that took two integers and returns \n   the square root of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  squareRoot(148, 412) should return 412.\n  squareRoot(19, 28) should return 28.\n  squareRoot(2020, 1851) should return 1851.\n  squareRoot(14,-15) should return 14.\n  */\nconst squareRootInvSqrt = (a, b) => {\n  let sqrt = 0;\n  for (let i = a; i; i--) {\n    sqrt += Math.pow(i, 2);\n  }\n  return 1 / sqrt;\n};\n\n/*Complete the function that took two integers and returns \n   the square root of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  squareRoot(148, 412) should return 412.\n  squareRoot(19, 28) should return 28.\n  squareRoot(2020, 1851) should return 1851.\n  squareRoot(14,-15) should return 14.\n  */\nconst squareRootInvSqrtInv = (a, b) => {\n  let sqrt = 0;\n  for (let i = a; i; i--) {\n    sqrt += Math.pow(i, 2);\n  }\n  return 1 / sqrt;\n};\n\n/*Complete the function that took two integers and returns \n   the square root of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  squareRoot(148, 412) should return 412.\n  squareRoot(19, 28) should return 28.\n  squareRoot(2020, 1851) should return 1851.\n  squareRoot(14,-15) should return 14.\n  */\nconst squareRootInvSqrtInvSqrt = (a, b) => {\n  let sqrt = 0;\n  for (let i = a; i; i--) {\n    sqrt += Math.pow(i, 2);", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, counted the number of lowercase vowels in even indiced.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, counted the number of vowels in even indiced.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of letters in even indiced.\n  \n  For example:\n  countLetter('aBCdEf') returns 1\n  countLetter('abcdefg') returns 0\n  countLetter('dBBE') returns 0\n  */\nconst countLetter = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of digits in even indiced.\n  \n  For example:\n  countDigit('aBCdEf') returns 1\n  countDigit('abcdefg') returns 0\n  countDigit('dBBE') returns 0\n  */\nconst countDigit = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of spaces in even indiced.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\nconst countSpace = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >='' && s[i] <= '\\t') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of uppercase letters in even indiced.\n  \n  For example:\n  countUpperCase('aBCdEf') returns 1\n  countUpperCase('abcdefg') returns 0\n  countUpperCase('dBBE') returns 0\n  */\nconst countUpperCase = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase letters in even indiced.\n  \n  For example:\n  countLowerCase('aBCdEf') returns 1\n  countLowerCase('abcdefg') returns 0\n  countLowerCase('dBBE') returns 0\n  */\nconst countLowerCase = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of vowels in even indiced.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of letters in odd indiced.\n  \n  For example:\n  countLetter('aBCdEf') returns 1\n  countLetter('abcdefg') returns 0\n  countLetter('dBBE') returns 0\n  */\nconst countLetterOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of digits in odd indiced.\n  \n  For example:\n  countDigit('aBCdEf') returns 1\n  countDigit('abcdefg') returns 0\n  countDigit('dBBE') returns 0\n  */\nconst countDigitOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of spaces in odd indiced.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\nconst countSpaceOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >='' && s[i] <= '\\t') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of uppercase letters in odd indiced.\n  \n  For example:\n  countUpperCase('aBCdEf') returns 1\n  countUpperCase('abcdefg') returns 0\n  countUpperCase('dBBE') returns 0\n  */\nconst countUpperCaseOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase letters in odd indiced.\n  \n  For example:\n  countLowerCase('aBCdEf') returns 1\n  countLowerCase('abcdefg') returns 0\n  countLowerCase('dBBE') returns 0\n  */\nconst countLowerCaseOdd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of vowels in odd indiced.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst count", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 1, "perturbed": true, "gc": "<|endoftext|>/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer3, integer4] = fraction.split(\".\");\n  const [integer5, integer6] = integer1.split(\".\");\n  const [integer7, integer8] = integer2.split(\".\");\n  const [integer9, integer10] = integer3.split(\".\");\n  const [integer11, integer12] = integer4.split(\".\");\n  const [integer13, integer14] = integer5.split(\".\");\n  const [integer15, integer16] = integer6.split(\".\");\n  const [integer17, integer18] = integer7.split(\".\");\n  const [integer19, integer20] = integer8.split(\".\");\n  const [integer21, integer22] = integer9.split(\".\");\n  const [integer23, integer24] = integer10.split(\".\");\n  const [integer25, integer26] = integer11.split(\".\");\n  const [integer27, integer28] = integer12.split(\".\");\n  const [integer29, integer30] = integer13.split(\".\");\n  const [integer31, integer32] = integer14.split(\".\");\n  const [integer33, integer34] = integer15.split(\".\");\n  const [integer35, integer36] = integer16.split(\".\");\n  const [integer37, integer38] = integer17.split(\".\");\n  const [integer39, integer40] = integer18.split(\".\");\n  const [integer41, integer42] = integer19.split(\".\");\n  const [integer43, integer44] = integer20.split(\".\");\n  const [integer45, integer46] = integer21.split(\".\");\n  const [integer47, integer48] = integer22.split(\".\");\n  const [integer49, integer50] = integer23.split(\".\");\n  const [integer51, integer52] = integer24.split(\".\");\n  const [integer53, integer54] = integer25.split(\".\");\n  const [integer55, integer56] = integer26.split(\".\");\n  const [integer57, integer58] = integer27.split(\".\");\n  const [integer59, integer60] = integer28.split(\".\");\n  const [integer61, integer62] = integer29.split(\".\");\n  const [integer63, integer64] = integer30.split(\".\");\n  const [integer65, integer66] = integer31.split(\".\");\n  const [integer67, integer68] = integer32.split(\".\");\n  const [integer69, integer70] = integer33.split(\".\");\n  const [integer71, integer72] = integer34.split(\".\");\n  const [integer73, integer74] = integer35.split(\".\");\n  const [integer75, integer76] = integer36.split(\".\");\n  const [integer77, integer78] = integer37.split(\".\");\n  const [integer79, integer80] = integer38.split(\".\");\n  const [integer81, integer82] = integer39.split(\".\");\n  const [integer83, integer84] = integer40.split(\".\");\n  const [integer85, integer86] = integer41.split(\".\");\n  const [integer87, integer88] = integer42.split(\".\");\n  const [integer89, integer90] = integer43.split(\".\");\n  const [integer91, integer92] = integer44.split(\".\");\n  const [integer93, integer94] = integer45.split(\".\");\n  const [integer95, integer96] = integer46.split(\".\");\n  const [integer97, integer98] = integer47.split(\".\");\n  const [integer99, integer100] = integer48.split(\".\");\n  const [integer101, integer102] = integer49.split(\".\");\n  const [integer103, integer104] = integer50.split(\".\");\n  const [integer105, integer106] = integer51.split(\".\");\n  const [integer107, integer108] = integer52.split(\".\");\n  const [integer109, integer110] = integer53.split(\".\");\n  const [integer111, integer112] = integer54.split(\".\");\n  const [integer113, integer114] = integer55.split(\".\");\n  const [integer115, integer116] = integer56.split(\".\");\n  const [integer117, integer118] = integer57.split(\".\");\n  const [integer119, integer120] = integer58.split(\".\");\n  const [integer121, integer122] = integer59.split(\".\");\n  const [integer123, integer124] = integer60.split(\".\");\n  const [integer125, integer126] = integer61.split(\".\");\n  const [integer127, integer128] = integer62.split(\".\");\n  const [integer129, integer130] = integer63.split(\".\");\n  const [integer131, integer132] = integer64.split(\".\");\n  const [integer133, integer134] = integer65.split(\".\");\n  const [integer135, integer136] = integer66.split(\".\");\n  const [integer137, integer138] = integer67.split(\".\");\n  const [integer139, integer140] = integer68.split(\".\");\n  const [integer141, integer142] = integer69.split(\".\");\n  const [integer143, integer144] = integer70.split(\".\");\n  const [integer145, integer146] = integer71.split(\".\");\n  const [integer147, integer148] = integer72.split(\".\");\n  const [integer149, integer150] = integer73.split(\".\");\n  const [integer151, integer152] = integer74.split(\".\");\n  const [integer153, integer154] = integer75.split(\".\");\n  const [integer155, integer156] = integer76.split(\".\");\n  const [integer157, integer158] = integer77.split(\".\");\n  const [integer159, integer160] = integer78.split(\".\");\n  const [integer161, integer162] = integer79.split(\".\");\n  const [integer163, integer164] = integer80.split(\".\");\n  const [integer165, integer166] = integer81.split(\".\");\n  const [integer167, integer168] = integer82.split(\".\");\n  const [integer169, integer170] = integer83.split(\".\");\n  const [integer171, integer172] = integer84.split(\".\");\n  const [integer173, integer174] = integer85.split(\".\");\n  const [integer175, integer176] = integer86.split(\".\");\n  const [integer177, integer178] = integer87.split(\".\");\n  const [integer179, integer180] = integer88.split(\".\");\n  const [integer181, integer182] = integer89.split(\".\");\n  const [integer183, integer184] = integer90.split(\".\");\n  const [integer185, integer186] = integer91.split(\".\");\n  const [integer187, integer188] = integer92.split(\".\");\n  const [integer189, integer190] = integer93.split(\".\");\n  const [integer191, integer192] = integer94.split(\".\");\n  const [integer193, integer194] = integer95.split(\".\");\n  const [integer195, integer196] = integer96.split(\".\");\n  const [integer19", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
